%..string = type {i8*, i64} ; Basic_string
%..rawptr = type i8* ; Basic_rawptr
%..complex64 = type {float, float} ; Basic_complex64
%..complex128 = type {double, double} ; Basic_complex128
%..quaternion128 = type {float, float, float, float} ; Basic_quaternion128
%..quaternion256 = type {double, double, double, double} ; Basic_quaternion256
%..any = type {%Type_Info*, %..rawptr} ; Basic_any
declare void @llvm.dbg.declare(metadata, metadata, metadata) nounwind readnone 
%Type_Info_Record = type {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}, i1, i1, i1}
%Type_Info = type {[0 x <8 x i8>], [136 x i8], i64}
%Type_Info.Named = type {i64, i64, %..string, %Type_Info*}
%Type_Info.Integer = type {i64, i64, i1}
%Type_Info.Float = type {i64, i64}
%Type_Info.Complex = type {i64, i64}
%Type_Info.Quaternion = type {i64, i64}
%Type_Info.String = type {i64, i64}
%Type_Info.Boolean = type {i64, i64}
%Type_Info.Any = type {i64, i64}
%Type_Info.Pointer = type {i64, i64, %Type_Info*}
%Type_Info.Procedure = type {i64, i64, %Type_Info*, %Type_Info*, i1, i64}
%Type_Info.Array = type {i64, i64, %Type_Info*, i64, i64}
%Type_Info.Dynamic_Array = type {i64, i64, %Type_Info*, i64}
%Type_Info.Slice = type {i64, i64, %Type_Info*, i64}
%Type_Info.Vector = type {i64, i64, %Type_Info*, i64, i64}
%Type_Info.Tuple = type {i64, i64, %Type_Info_Record}
%Type_Info.Struct = type {i64, i64, %Type_Info_Record}
%Type_Info.Raw_Union = type {i64, i64, %Type_Info_Record}
%Type_Info.Union = type {i64, i64, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {%..string*, i64, i64}, {%Type_Info**, i64, i64}}
%Type_Info.Enum = type {i64, i64, %Type_Info*, {%..string*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}}
%Type_Info.Map = type {i64, i64, %Type_Info*, %Type_Info*, %Type_Info*, i64}
%Allocator = type {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr}
%Context = type {i64, %Allocator, %..rawptr, i64}
%__Map_Key = type {i64, %..string}
%__Map_Find_Result = type {i64, i64, i64}
%__Map_Entry_Header = type {%__Map_Key, i64}
%__Map_Header = type {%raw-6.Dynamic_Map*, i1, i64, i64, i64, i64}
%main-2.Win32Vars_t = type {%jaze_gl-14.OpenGLVars_t, %..rawptr, %..rawptr, {[0 x <8 x i8>], [2 x float]}, %..rawptr}
%fmt-4.Fmt_Info = type {%..any, i64, i64, {i8*, i64, i64}*, i1, i1, i1, i1, i1, i1, i1, i1, i1}
%utf8-5.Accept_Range = type {i8, i8}
%raw-6.Slice = type {%..rawptr, i64, i64}
%raw-6.Dynamic_Array = type {%..rawptr, i64, i64, %Allocator}
%raw-6.Dynamic_Map = type {{i64*, i64, i64,%Allocator}, %raw-6.Dynamic_Array}
%windows-7.Point = type {i32, i32}
%windows-7.WndClassExA = type {i32, i32, i64 (%..rawptr, i32, i64, i64)*, i32, i32, %..rawptr, %..rawptr, %..rawptr, %..rawptr, i8*, i8*, %..rawptr}
%windows-7.Msg = type {%..rawptr, i32, i64, i64, i32, %windows-7.Point}
%windows-7.Rect = type {i32, i32, i32, i32}
%windows-7.Filetime = type {i32, i32}
%windows-7.Security_Attributes = type {i32, %..rawptr, i32}
%windows-7.PIXELFORMATDESCRIPTOR = type {i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32}
%imgui-12.DrawCmd = type {i32, %imgui-12.Vec4, %..rawptr, void (%imgui-12.DrawList*, %imgui-12.DrawCmd*)*, %..rawptr}
%imgui-12.Vec2 = type {float, float}
%imgui-12.Vec4 = type {float, float, float, float}
%imgui-12.DrawVert = type {%imgui-12.Vec2, %imgui-12.Vec2, i32}
%imgui-12.DrawData = type {i1, %imgui-12.DrawList**, i32, i32, i32}
%imgui-12.FontAtlas = type {}
%imgui-12.DrawList = type {}
%imgui-12.GuiStyle = type {float, %imgui-12.Vec2, %imgui-12.Vec2, float, i32, float, %imgui-12.Vec2, float, %imgui-12.Vec2, %imgui-12.Vec2, %imgui-12.Vec2, float, float, float, float, float, float, %imgui-12.Vec2, %imgui-12.Vec2, i1, i1, float, [43 x %imgui-12.Vec4]}
%imgui-12.GuiIO = type {%imgui-12.Vec2, float, float, i8*, i8*, float, float, float, [19 x i32], float, float, %..rawptr, %imgui-12.FontAtlas*, float, i1, %imgui-12.Vec2, %imgui-12.Vec2, %imgui-12.Vec2, i1, i1, i1, i1, void (%imgui-12.DrawData*)*, i8* ()*, void (i8*)*, %..rawptr (i64)*, void (%..rawptr)*, void (i32, i32)*, %..rawptr, %imgui-12.Vec2, [5 x i1], float, i1, i1, i1, i1, i1, [512 x i1], [17 x i16], i1, i1, i1, float, i32, i32, i32, i32, %imgui-12.Vec2, %imgui-12.Vec2, [5 x i1], [5 x %imgui-12.Vec2], [5 x float], [5 x i1], [5 x i1], [5 x i1], [5 x float], [5 x float], [5 x float], [512 x float], [512 x float]}
%jaze_win32-13.MONITORINFO = type {i32, %windows-7.Rect, %windows-7.Rect, i32}
%jaze_win32-13.WINDOWPLACEMENT = type {i32, i32, i32, %windows-7.Point, %windows-7.Point, %windows-7.Rect}
%jaze_win32-13.FindData = type {i32, %windows-7.Filetime, %windows-7.Filetime, %windows-7.Filetime, i32, i32, i32, i32, [260 x i8], [14 x i8]}
%jaze_gl-14.Program = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, i32, i32, i32}
%jaze_gl-14.OpenGLVars_t = type {{%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}, %..string, %..string, %..string, %..string, %..rawptr, i32, i32, i32, i32, i32, i32, i32}
%jaze_gl-14.DebugFunctionLoadStatus = type {%..string, i64, %Type_Info*, i1}
%jaze_gl-14.DebugInfo_t = type {{%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}, i64, i32, i32}
%jaze_wgl-15.Attrib = type {i32, i32}
%jaze_wgl-15.TryGetExtensionList = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}}
%jaze_imgui-17.State_t = type {%jaze_gl-14.Program, i32, i32, i32, i32, i32}
%jaze_xinput-18.BatteryInformation = type {i8, i8}
%jaze_xinput-18.Capabilities = type {i8, i8, i16, %jaze_xinput-18.GamepadState, %jaze_xinput-18.VibrationState}
%jaze_xinput-18.State = type {i32, %jaze_xinput-18.GamepadState}
%jaze_xinput-18.GamepadState = type {i16, i8, i8, i16, i16, i16, i16}
%jaze_xinput-18.VibrationState = type {i16, i16}
%jaze_xinput-18.KeyStroke = type {i16, i16, i16, i8, i8}
%jaze_xinput-18.DebugFunctionLoadStatus = type {%..string, i64, %Type_Info*, i1}
%jaze_xinput-18.DebugInfo_t = type {{%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}, i64, i32, i32}
%jaze_time-20.TimeData = type {double, double, double, i64, i64, i64}
%jaze_catalog-21.Catalog = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}, {%..string*, i64, i64,%Allocator}, %..string, %..string, i64, i64, i64, i64}
%jaze_catalog-21.DebugInfo_t = type {{%..string*, i64, i64,%Allocator}, {%jaze_catalog-21.Catalog**, i64, i64,%Allocator}, i64}
%jaze_asset-22.FileInfo_t = type {%..string, %..string, %..string, i64}
%jaze_asset-22.Asset = type {[0 x <8 x i8>], [416 x i8], i64}
%jaze_asset-22.Asset.Texture = type {%jaze_asset-22.FileInfo_t, i1, i32, i32, i32, i32, i8*}
%jaze_asset-22.Asset.Shader = type {%jaze_asset-22.FileInfo_t, i1, i32, i32, %..string, {i8*, i64, i64}}
%jaze_asset-22.Asset.Sound = type {%jaze_asset-22.FileInfo_t, i1}
%jaze_asset-22.Asset.ShaderProgram = type {%jaze_asset-22.FileInfo_t, i1, %jaze_gl-14.Program, %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader*, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}}
%strconv-28.Decimal_Slice = type {{i8*, i64, i64}, i64, i64, i1}
%strconv-28.Float_Info = type {i64, i64, i64}
%decimal-32.Decimal = type {i64, i64, [384 x i8], i1, i1}

declare ccc void @llvm.assume(i1) 
declare ccc void @llvm.debugtrap() 
declare ccc void @llvm.trap() 
declare ccc i64 @llvm.readcyclecounter() 
declare ccc float @llvm.sqrt.f32(float) 
declare ccc double @llvm.sqrt.f64(double) 
declare ccc i32 @GetLastError() 
declare ccc i32 @GetCursorPos(%windows-7.Point*) 
declare ccc i32 @ScreenToClient(%..rawptr, %windows-7.Point*) 
declare ccc %..rawptr @GetModuleHandleA(i8*) 
declare ccc void @PostQuitMessage(i32) 
declare ccc i32 @SetWindowTextA(%..rawptr, i8*) 
declare ccc i32 @QueryPerformanceFrequency(i64*) 
declare ccc i32 @QueryPerformanceCounter(i64*) 
declare ccc i16 @RegisterClassExA(%windows-7.WndClassExA*) 
declare ccc %..rawptr @CreateWindowExA(i32, i8*, i8*, i32, i32, i32, i32, i32, %..rawptr, %..rawptr, %..rawptr, %..rawptr) 
declare ccc i32 @TranslateMessage(%windows-7.Msg*) 
declare ccc i64 @DispatchMessageA(%windows-7.Msg*) 
declare ccc i32 @PeekMessageA(%windows-7.Msg*, %..rawptr, i32, i32, i32) 
declare ccc i64 @DefWindowProcA(%..rawptr, i32, i64, i64) 
declare ccc i32 @AdjustWindowRect(%windows-7.Rect*, i32, i32) 
declare ccc %..rawptr @GetActiveWindow() 
declare ccc i32 @DestroyWindow(%..rawptr) 
declare ccc i32 @DescribePixelFormat(%..rawptr, i32, i32, %windows-7.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @GetCurrentThreadId() 
declare ccc i32 @CloseHandle(%..rawptr) 
declare ccc %..rawptr @GetStdHandle(i32) 
declare ccc %..rawptr @CreateFileA(i8*, i32, i32, %..rawptr, i32, i32, %..rawptr) 
declare ccc i32 @ReadFile(%..rawptr, %..rawptr, i32, i32*, %..rawptr) 
declare ccc i32 @WriteFile(%..rawptr, %..rawptr, i32, i32*, %..rawptr) 
declare ccc i32 @GetFileSizeEx(%..rawptr, i64*) 
declare ccc i32 @SetHandleInformation(%..rawptr, i32, i32) 
declare ccc %..rawptr @HeapAlloc(%..rawptr, i32, i64) 
declare ccc %..rawptr @HeapReAlloc(%..rawptr, i32, %..rawptr, i64) 
declare ccc i32 @HeapFree(%..rawptr, i32, %..rawptr) 
declare ccc %..rawptr @GetProcessHeap() 
declare ccc %..rawptr @LoadLibraryA(i8*) 
declare ccc void @FreeLibrary(%..rawptr) 
declare ccc void ()* @GetProcAddress(%..rawptr, i8*) 
declare ccc i32 @GetClientRect(%..rawptr, %windows-7.Rect*) 
declare ccc %..rawptr @GetDC(%..rawptr) 
declare ccc i32 @SetPixelFormat(%..rawptr, i32, %windows-7.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @ChoosePixelFormat(%..rawptr, %windows-7.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @SwapBuffers(%..rawptr) 
declare ccc i32 @ReleaseDC(%..rawptr, %..rawptr) 
declare ccc i16 @GetAsyncKeyState(i32) 
declare ccc %..rawptr @wglCreateContext(%..rawptr) 
declare ccc i32 @wglMakeCurrent(%..rawptr, %..rawptr) 
declare ccc void ()* @wglGetProcAddress(i8*) 
declare ccc i32 @wglDeleteContext(%..rawptr) 
declare ccc float @llvm.sin.f32(float) 
declare ccc float @llvm.cos.f32(float) 
declare ccc %imgui-12.GuiIO* @igGetIO() 
declare ccc %imgui-12.GuiStyle* @igGetStyle() 
declare ccc void @igNewFrame() 
declare ccc void @igRender() 
declare ccc void @igShowTestWindow(i1*) 
declare ccc void @igEnd() 
declare ccc void @igEndChild() 
declare ccc void @igSetNextWindowPosCenter(i32) 
declare ccc void @igPushStyleVar(i32, float) 
declare ccc void @igPopStyleVar(i32) 
declare ccc void @igPushTextWrapPos(float) 
declare ccc void @igPopTextWrapPos() 
declare ccc void @igSeparator() 
declare ccc void @igSameLine(float, float) 
declare ccc void @igNewLine() 
declare ccc void @igIndent(float) 
declare ccc void @igUnindent(float) 
declare ccc void @igColumns(i32, i8*, i1) 
declare ccc void @igNextColumn() 
declare ccc void @igPushIdInt(i32) 
declare ccc void @igPopId() 
declare ccc void @igBeginTooltip() 
declare ccc void @igEndTooltip() 
declare ccc i1 @igBeginMainMenuBar() 
declare ccc void @igEndMainMenuBar() 
declare ccc void @igEndMenu() 
declare ccc i1 @igIsItemHovered() 
declare ccc void @ImGuiIO_AddInputCharacter(i16) 
declare ccc void @ImFontAtlas_GetTexDataAsRGBA32(%imgui-12.FontAtlas*, i8**, i32*, i32*, i32*) 
declare ccc void @ImFontAtlas_SetTexID(%imgui-12.FontAtlas*, %..rawptr) 
declare ccc i32 @ImDrawList_GetVertexBufferSize(%imgui-12.DrawList*) 
declare ccc %imgui-12.DrawVert* @ImDrawList_GetVertexPtr(%imgui-12.DrawList*, i32) 
declare ccc i32 @ImDrawList_GetIndexBufferSize(%imgui-12.DrawList*) 
declare ccc i16* @ImDrawList_GetIndexPtr(%imgui-12.DrawList*, i32) 
declare ccc i32 @ImDrawList_GetCmdSize(%imgui-12.DrawList*) 
declare ccc %imgui-12.DrawCmd* @ImDrawList_GetCmdPtr(%imgui-12.DrawList*, i32) 
declare ccc i32 @GetMonitorInfoA(%..rawptr, %jaze_win32-13.MONITORINFO*) 
declare ccc %..rawptr @MonitorFromWindow(%..rawptr, i32) 
declare ccc void @SetWindowPos(%..rawptr, %..rawptr, i32, i32, i32, i32, i32) 
declare ccc i32 @GetWindowPlacement(%..rawptr, %jaze_win32-13.WINDOWPLACEMENT*) 
declare ccc i32 @SetWindowPlacement(%..rawptr, %jaze_win32-13.WINDOWPLACEMENT*) 
declare ccc i64 @GetWindowLongPtrA(%..rawptr, i32) 
declare ccc i64 @SetWindowLongPtrA(%..rawptr, i32, i64) 
declare ccc i32 @GetFileAttributesA(i8*) 
declare ccc %..rawptr @FindFirstFileA(i8*, %jaze_win32-13.FindData*) 
declare ccc i32 @FindNextFileA(%..rawptr, %jaze_win32-13.FindData*) 
declare ccc void @glViewport(i32, i32, i32, i32) 
declare ccc void @glClearColor(float, float, float, float) 
declare ccc void @glScissor(i32, i32, i32, i32) 
declare ccc i8* @glGetString(i32) 
declare ccc void @glTexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, %..rawptr) 
declare ccc void @glTexParameteri(i32, i32, i32) 
declare ccc void @glBindTexture(i32, i32) 
declare ccc void @glGenTextures(i32, i32*) 
declare ccc void @glBlendFunc(i32, i32) 
declare ccc void @glGetIntegerv(i32, i32*) 
declare ccc void @glEnable(i32) 
declare ccc void @glDisable(i32) 
declare ccc void @glClear(i32) 
declare ccc i8* @stbi_load(i8*, i32*, i32*, i32*, i32) 
declare ccc void @stbi_image_free(%..rawptr) 
declare ccc i32 @stbi_info(i8*, i32*, i32*, i32*) 
declare ccc void @llvm.memset.p0i8.i64(%..rawptr, i8, i64, i32, i1) 
declare ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) 
declare ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) 
declare ccc i1 @igBegin(i8*, i1*, i32) 
declare ccc i1 @igBeginChild(i8*, i64, i1, i32) 
declare ccc void @igText(i8*) 
declare ccc i1 @igButton(i8*, i64) 
declare ccc void @igImage(%..rawptr, i64, i64, i64, %imgui-12.Vec4, %imgui-12.Vec4) 
declare ccc i1 @igCombo(i8*, i32*, i8**, i32, i32) 
declare ccc i1 @igCollapsingHeader(i8*, i32) 
declare ccc i1 @igBeginMenu(i8*, i1) 
declare ccc i1 @igMenuItem(i8*, i8*, i1, i1) 

define %Type_Info* @.type_info_base(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named*, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%3 = load %Type_Info*, %Type_Info** %0, align 8
	%4 = icmp eq %Type_Info* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	store %Type_Info* zeroinitializer, %Type_Info** %1
		%5 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %5, %Type_Info** %1
	; TypeMatchStmt
	%6 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%7 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	%8 = load i64, i64* %7, align 8
	%9 = bitcast %Type_Info* %6 to %..rawptr
	%10 = icmp eq i64 %8, 1
	br i1 %10, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	br label %typematch.done-5

typematch.body-4:
	%11 = bitcast %..rawptr %9 to %Type_Info.Named*
	store %Type_Info.Named* zeroinitializer, %Type_Info.Named** %2
	store %Type_Info.Named* %11, %Type_Info.Named** %2
	; AssignStmt
	; SelectorExpr
	%12 = load %Type_Info.Named*, %Type_Info.Named** %2, align 8
	%13 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %12, i64 0
	%14 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %13, i64 0, i32 3
	%15 = load %Type_Info*, %Type_Info** %14, align 8
	store %Type_Info* %15, %Type_Info** %1
	br label %typematch.done-5

typematch.done-5:
	; ReturnStmt
	%16 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %16
}

define %Type_Info* @.type_info_base_without_enum(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named*, align 8
	%3 = alloca %Type_Info.Enum*, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = icmp eq %Type_Info* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	store %Type_Info* zeroinitializer, %Type_Info** %1
		%6 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %6, %Type_Info** %1
	; TypeMatchStmt
	%7 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%8 = getelementptr inbounds %Type_Info, %Type_Info* %7, i64 0, i32 2 ; UnionTagPtr
	%9 = load i64, i64* %8, align 8
	%10 = bitcast %Type_Info* %7 to %..rawptr
	%11 = icmp eq i64 %9, 1
	br i1 %11, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	%12 = icmp eq i64 %9, 19
	br i1 %12, label %typematch.body-6, label %typematch.next-5

typematch.body-4:
	%13 = bitcast %..rawptr %10 to %Type_Info.Named*
	store %Type_Info.Named* zeroinitializer, %Type_Info.Named** %2
	store %Type_Info.Named* %13, %Type_Info.Named** %2
	; AssignStmt
	; SelectorExpr
	%14 = load %Type_Info.Named*, %Type_Info.Named** %2, align 8
	%15 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %14, i64 0
	%16 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %15, i64 0, i32 3
	%17 = load %Type_Info*, %Type_Info** %16, align 8
	store %Type_Info* %17, %Type_Info** %1
	br label %typematch.done-7

typematch.next-5:
	br label %typematch.done-7

typematch.body-6:
	%18 = bitcast %..rawptr %10 to %Type_Info.Enum*
	store %Type_Info.Enum* zeroinitializer, %Type_Info.Enum** %3
	store %Type_Info.Enum* %18, %Type_Info.Enum** %3
	; AssignStmt
	; SelectorExpr
	%19 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%20 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %19, i64 0
	%21 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %20, i64 0, i32 2
	%22 = load %Type_Info*, %Type_Info** %21, align 8
	store %Type_Info* %22, %Type_Info** %1
	br label %typematch.done-7

typematch.done-7:
	; ReturnStmt
	%23 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %23
}

define void @.__check_context() {
decls-0:
	%0 = alloca %Context*, align 8
	; c
	store %Context* zeroinitializer, %Context** %0
		%1 = getelementptr inbounds %Context, %Context* @__context, i64 0
	store %Context* %1, %Context** %0
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%2 = load %Context*, %Context** %0, align 8
	%3 = getelementptr inbounds %Context, %Context* %2, i64 0
	%4 = getelementptr inbounds %Context, %Context* %3, i64 0, i32 1
	%5 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %5, align 8
	%7 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%8 = load %Context*, %Context** %0, align 8
	%9 = getelementptr inbounds %Context, %Context* %8, i64 0
	%10 = getelementptr inbounds %Context, %Context* %9, i64 0, i32 1
	%11 = call %Allocator @.default_allocator()
	store %Allocator %11, %Allocator* %10
	br label %if.done-2

if.done-2:
	; IfStmt
	; SelectorExpr
	%12 = load %Context*, %Context** %0, align 8
	%13 = getelementptr inbounds %Context, %Context* %12, i64 0
	%14 = getelementptr inbounds %Context, %Context* %13, i64 0, i32 0
	%15 = load i64, i64* %14, align 8
	%16 = icmp eq i64 %15, 0
	br i1 %16, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%17 = load %Context*, %Context** %0, align 8
	%18 = getelementptr inbounds %Context, %Context* %17, i64 0
	%19 = getelementptr inbounds %Context, %Context* %18, i64 0, i32 0
	; SelectorExpr
	%20 = call i64 @.os_windows-23.current_thread_id()
	store i64 %20, i64* %19
	br label %if.done-4

if.done-4:
	ret void
}

define %..rawptr @.alloc(i64 %size) alwaysinline {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	%2 = call %..rawptr @.alloc_align(i64 %1, i64 16)
	ret %..rawptr %2
}

define %..rawptr @.alloc_align(i64 %size, i64 %alignment) alwaysinline {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i64, align 8
	%2 = alloca %Allocator, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	store i64 zeroinitializer, i64* %1
		store i64 %alignment, i64* %1
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %2
		; SelectorExpr
	%3 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%4 = load %Allocator, %Allocator* %3, align 8
	store %Allocator %4, %Allocator* %2
	; ReturnStmt
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %5, align 8
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 1
	%8 = load %..rawptr, %..rawptr* %7, align 8
	%9 = load i64, i64* %0, align 8
	%10 = load i64, i64* %1, align 8
	%11 = call %..rawptr %6(%..rawptr %8, i8 0, i64 %9, i64 %10, %..rawptr zeroinitializer, i64 0, i64 0)
	ret %..rawptr %11
}

define void @.free_ptr_with_allocator(%Allocator %a, %..rawptr %ptr) alwaysinline {
decls-0:
	%0 = alloca %Allocator, align 8
	%1 = alloca %..rawptr, align 8
	store %Allocator zeroinitializer, %Allocator* %0
		store %Allocator %a, %Allocator* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %ptr, %..rawptr* %1
	; IfStmt
	%2 = load %..rawptr, %..rawptr* %1, align 8
	%3 = icmp eq %..rawptr %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; SelectorExpr
	%4 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%5 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %4, align 8
	%6 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %5, zeroinitializer
	br i1 %6, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load %..rawptr, %..rawptr* %1, align 8
	%12 = call %..rawptr %8(%..rawptr %10, i8 1, i64 0, i64 0, %..rawptr %11, i64 0, i64 0)
	ret void
}

define void @.free_ptr(%..rawptr %ptr) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	call void @.__check_context()
	; SelectorExpr
	%1 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%2 = load %Allocator, %Allocator* %1, align 8
	%3 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr_with_allocator(%Allocator %2, %..rawptr %3)
	ret void
}

define void @.free_all() alwaysinline {
decls-0:
	%0 = alloca %Allocator, align 8
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %0
		; SelectorExpr
	%1 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%2 = load %Allocator, %Allocator* %1, align 8
	store %Allocator %2, %Allocator* %0
	; SelectorExpr
	%3 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%4 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%6 = load %..rawptr, %..rawptr* %5, align 8
	%7 = call %..rawptr %4(%..rawptr %6, i8 2, i64 0, i64 0, %..rawptr zeroinitializer, i64 0, i64 0)
	ret void
}

define %..rawptr @.resize(%..rawptr %ptr, i64 %old_size, i64 %new_size) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	; ReturnStmt
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load i64, i64* %1, align 8
	%5 = load i64, i64* %2, align 8
	%6 = call %..rawptr @.resize_align(%..rawptr %3, i64 %4, i64 %5, i64 16)
	ret %..rawptr %6
}

define %..rawptr @.resize_align(%..rawptr %ptr, i64 %old_size, i64 %new_size, i64 %alignment) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Allocator, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %4
		; SelectorExpr
	%5 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%6 = load %Allocator, %Allocator* %5, align 8
	store %Allocator %6, %Allocator* %4
	; ReturnStmt
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load i64, i64* %2, align 8
	%12 = load i64, i64* %3, align 8
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = load i64, i64* %1, align 8
	%15 = call %..rawptr %8(%..rawptr %10, i8 3, i64 %11, i64 %12, %..rawptr %13, i64 %14, i64 0)
	ret %..rawptr %15
}

define %..rawptr @.default_resize_align(%..rawptr %old_memory, i64 %old_size, i64 %new_size, i64 %alignment) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %old_memory, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	; IfStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = icmp eq %..rawptr %5, zeroinitializer
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%7 = load i64, i64* %2, align 8
	%8 = load i64, i64* %3, align 8
	%9 = call %..rawptr @.alloc_align(i64 %7, i64 %8)
	ret %..rawptr %9

if.done-2:
	; IfStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 0
	br i1 %11, label %if.then-3, label %if.done-4

if.then-3:
	; free
	%12 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr(%..rawptr %12)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-4:
	; IfStmt
	%13 = load i64, i64* %2, align 8
	%14 = load i64, i64* %1, align 8
	%15 = icmp eq i64 %13, %14
	br i1 %15, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	%16 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %16

if.done-6:
	; new_memory
	store %..rawptr zeroinitializer, %..rawptr* %4
		%17 = load i64, i64* %2, align 8
	%18 = load i64, i64* %3, align 8
	%19 = call %..rawptr @.alloc_align(i64 %17, i64 %18)
	store %..rawptr %19, %..rawptr* %4
	; IfStmt
	%20 = load %..rawptr, %..rawptr* %4, align 8
	%21 = icmp eq %..rawptr %20, zeroinitializer
	br i1 %21, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-8:
	%22 = load %..rawptr, %..rawptr* %4, align 8
	%23 = load %..rawptr, %..rawptr* %0, align 8
	; min
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %2, align 8
	%26 = icmp slt i64 %24, %25
	%27 = select i1 %26, i64 %24, i64 %25
	%28 = call %..rawptr @.__mem_copy(%..rawptr %22, %..rawptr %23, i64 %27)
	; free
	%29 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr(%..rawptr %29)
	; ReturnStmt
	%30 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %30
}

define %..rawptr @.default_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i8, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %..rawptr, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %allocator_data, %..rawptr* %0
	store i8 zeroinitializer, i8* %1
		store i8 %mode, i8* %1
	store i64 zeroinitializer, i64* %2
		store i64 %size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	store %..rawptr zeroinitializer, %..rawptr* %4
		store %..rawptr %old_memory, %..rawptr* %4
	store i64 zeroinitializer, i64* %5
		store i64 %old_size, i64* %5
	store i64 zeroinitializer, i64* %6
		store i64 %flags, i64* %6
	; MatchStmt
	%8 = load i8, i8* %1, align 8
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%10 = icmp eq i8 %8, 1
	br i1 %10, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; ReturnStmt
	; SelectorExpr
	%11 = load i64, i64* %2, align 8
	%12 = call %..rawptr @.os_windows-23.heap_alloc(i64 %11)
	ret %..rawptr %12

match.case.next-3:
	%13 = icmp eq i8 %8, 2
	br i1 %13, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	; SelectorExpr
	%14 = load %..rawptr, %..rawptr* %4, align 8
	call void @.os_windows-23.heap_free(%..rawptr %14)
	; ReturnStmt
	ret %..rawptr zeroinitializer

match.case.next-5:
	%15 = icmp eq i8 %8, 3
	br i1 %15, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	br label %match.done-11

match.case.next-7:
	br label %match.done-11

match.fall.body-8:
	; ptr
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	%16 = load %..rawptr, %..rawptr* %4, align 8
	%17 = load i64, i64* %2, align 8
	%18 = call %..rawptr @.os_windows-23.heap_resize(%..rawptr %16, i64 %17)
	store %..rawptr %18, %..rawptr* %7
	; assert
	%19 = load %..rawptr, %..rawptr* %7, align 8
	%20 = icmp ne %..rawptr %19, zeroinitializer
	%21 = icmp eq i1 %20, false
	br i1 %21, label %builtin.assert.err-9, label %builtin.assert.done-10

builtin.assert.err-9:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$0, i64 0, i32 0), i64 30}, i64 259, i64 10, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-10

builtin.assert.done-10:
	; ReturnStmt
	%22 = load %..rawptr, %..rawptr* %7, align 8
	ret %..rawptr %22

match.done-11:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %Allocator @.default_allocator() {
decls-0:
	%0 = alloca %Allocator, align 8
	; ReturnStmt
	; CompoundLit
	store %Allocator zeroinitializer, %Allocator* %0
	store %Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* zeroinitializer, %..rawptr zeroinitializer}, %Allocator* %0
	%1 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* @.default_allocator_proc, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %1
	%2 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %2
	%3 = load %Allocator, %Allocator* %0, align 8
	ret %Allocator %3
}

define i1 @.__string_eq(%..string %a, %..string %b) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; IfStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 1
	%4 = load %..string, %..string* %1, align 8
	%5 = extractvalue %..string %4, 1
	%6 = icmp ne i64 %3, %5
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; IfStmt
	%7 = load %..string, %..string* %0, align 8
	%8 = extractvalue %..string %7, 1
	%9 = icmp eq i64 %8, 0
	br i1 %9, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i1 true

if.done-4:
	; IfStmt
	; IndexExpr
	%10 = load %..string, %..string* %0, align 8
	%11 = extractvalue %..string %10, 0
	%12 = extractvalue %..string %10, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$2, i64 0, i32 0), i64 30}, i64 290, i64 8, i64 0, i64 %12)
	%13 = getelementptr inbounds i8, i8* %11, i64 0
	%14 = getelementptr inbounds i8, i8* %13, i64 0
	; IndexExpr
	%15 = load %..string, %..string* %1, align 8
	%16 = extractvalue %..string %15, 0
	%17 = extractvalue %..string %15, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$3, i64 0, i32 0), i64 30}, i64 290, i64 17, i64 0, i64 %17)
	%18 = getelementptr inbounds i8, i8* %16, i64 0
	%19 = getelementptr inbounds i8, i8* %18, i64 0
	%20 = icmp eq i8* %14, %19
	br i1 %20, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	ret i1 true

if.done-6:
	; ReturnStmt
	%21 = load %..string, %..string* %0, align 8
	%22 = load %..string, %..string* %1, align 8
	%23 = call i64 @.__string_cmp(%..string %21, %..string %22)
	%24 = icmp eq i64 %23, 0
	ret i1 %24
}

define i64 @.__string_cmp(%..string %a, %..string %b) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	; IndexExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 0
	%4 = extractvalue %..string %2, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$4, i64 0, i32 0), i64 30}, i64 297, i64 26, i64 0, i64 %4)
	%5 = getelementptr inbounds i8, i8* %3, i64 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	; IndexExpr
	%7 = load %..string, %..string* %1, align 8
	%8 = extractvalue %..string %7, 0
	%9 = extractvalue %..string %7, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$5, i64 0, i32 0), i64 30}, i64 297, i64 33, i64 0, i64 %9)
	%10 = getelementptr inbounds i8, i8* %8, i64 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	; min
	%12 = load %..string, %..string* %0, align 8
	%13 = extractvalue %..string %12, 1
	%14 = load %..string, %..string* %1, align 8
	%15 = extractvalue %..string %14, 1
	%16 = icmp slt i64 %13, %15
	%17 = select i1 %16, i64 %13, i64 %15
	%18 = call i64 @.__mem_compare(i8* %6, i8* %11, i64 %17)
	ret i64 %18
}

define i1 @.__string_ne(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i1 @.__string_eq(%..string %2, %..string %3)
	%5 = xor i1 -1, %4
	ret i1 %5
}

define i1 @.__string_lt(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp slt i64 %4, 0
	ret i1 %5
}

define i1 @.__string_gt(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sgt i64 %4, 0
	ret i1 %5
}

define i1 @.__string_le(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sle i64 %4, 0
	ret i1 %5
}

define i1 @.__string_ge(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sge i64 %4, 0
	ret i1 %5
}

define i1 @.__complex64_eq(%..complex64 %a, %..complex64 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex64, align 8
	%1 = alloca %..complex64, align 8
	store %..complex64 zeroinitializer, %..complex64* %0
		store %..complex64 %a, %..complex64* %0
	store %..complex64 zeroinitializer, %..complex64* %1
		store %..complex64 %b, %..complex64* %1
	; ReturnStmt
	; real
	%2 = load %..complex64, %..complex64* %0, align 8
	%3 = extractvalue %..complex64 %2, 0
	; real
	%4 = load %..complex64, %..complex64* %1, align 8
	%5 = extractvalue %..complex64 %4, 0
	%6 = fcmp oeq float %3, %5
	; real
	%7 = load %..complex64, %..complex64* %0, align 8
	%8 = extractvalue %..complex64 %7, 0
	; real
	%9 = load %..complex64, %..complex64* %1, align 8
	%10 = extractvalue %..complex64 %9, 0
	%11 = fcmp oeq float %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex64, %..complex64* %0, align 8
	%13 = extractvalue %..complex64 %12, 1
	; imag
	%14 = load %..complex64, %..complex64* %1, align 8
	%15 = extractvalue %..complex64 %14, 1
	%16 = fcmp oeq float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__complex64_ne(%..complex64 %a, %..complex64 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex64, align 8
	%1 = alloca %..complex64, align 8
	store %..complex64 zeroinitializer, %..complex64* %0
		store %..complex64 %a, %..complex64* %0
	store %..complex64 zeroinitializer, %..complex64* %1
		store %..complex64 %b, %..complex64* %1
	; ReturnStmt
	; real
	%2 = load %..complex64, %..complex64* %0, align 8
	%3 = extractvalue %..complex64 %2, 0
	; real
	%4 = load %..complex64, %..complex64* %1, align 8
	%5 = extractvalue %..complex64 %4, 0
	%6 = fcmp one float %3, %5
	; real
	%7 = load %..complex64, %..complex64* %0, align 8
	%8 = extractvalue %..complex64 %7, 0
	; real
	%9 = load %..complex64, %..complex64* %1, align 8
	%10 = extractvalue %..complex64 %9, 0
	%11 = fcmp one float %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex64, %..complex64* %0, align 8
	%13 = extractvalue %..complex64 %12, 1
	; imag
	%14 = load %..complex64, %..complex64* %1, align 8
	%15 = extractvalue %..complex64 %14, 1
	%16 = fcmp one float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__complex128_eq(%..complex128 %a, %..complex128 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex128, align 8
	%1 = alloca %..complex128, align 8
	store %..complex128 zeroinitializer, %..complex128* %0
		store %..complex128 %a, %..complex128* %0
	store %..complex128 zeroinitializer, %..complex128* %1
		store %..complex128 %b, %..complex128* %1
	; ReturnStmt
	; real
	%2 = load %..complex128, %..complex128* %0, align 8
	%3 = extractvalue %..complex128 %2, 0
	; real
	%4 = load %..complex128, %..complex128* %1, align 8
	%5 = extractvalue %..complex128 %4, 0
	%6 = fcmp oeq double %3, %5
	; real
	%7 = load %..complex128, %..complex128* %0, align 8
	%8 = extractvalue %..complex128 %7, 0
	; real
	%9 = load %..complex128, %..complex128* %1, align 8
	%10 = extractvalue %..complex128 %9, 0
	%11 = fcmp oeq double %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex128, %..complex128* %0, align 8
	%13 = extractvalue %..complex128 %12, 1
	; imag
	%14 = load %..complex128, %..complex128* %1, align 8
	%15 = extractvalue %..complex128 %14, 1
	%16 = fcmp oeq double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__complex128_ne(%..complex128 %a, %..complex128 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex128, align 8
	%1 = alloca %..complex128, align 8
	store %..complex128 zeroinitializer, %..complex128* %0
		store %..complex128 %a, %..complex128* %0
	store %..complex128 zeroinitializer, %..complex128* %1
		store %..complex128 %b, %..complex128* %1
	; ReturnStmt
	; real
	%2 = load %..complex128, %..complex128* %0, align 8
	%3 = extractvalue %..complex128 %2, 0
	; real
	%4 = load %..complex128, %..complex128* %1, align 8
	%5 = extractvalue %..complex128 %4, 0
	%6 = fcmp one double %3, %5
	; real
	%7 = load %..complex128, %..complex128* %0, align 8
	%8 = extractvalue %..complex128 %7, 0
	; real
	%9 = load %..complex128, %..complex128* %1, align 8
	%10 = extractvalue %..complex128 %9, 0
	%11 = fcmp one double %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex128, %..complex128* %0, align 8
	%13 = extractvalue %..complex128 %12, 1
	; imag
	%14 = load %..complex128, %..complex128* %1, align 8
	%15 = extractvalue %..complex128 %14, 1
	%16 = fcmp one double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__quaternion128_eq(%..quaternion128 %a, %..quaternion128 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion128, align 8
	%1 = alloca %..quaternion128, align 8
	store %..quaternion128 zeroinitializer, %..quaternion128* %0
		store %..quaternion128 %a, %..quaternion128* %0
	store %..quaternion128 zeroinitializer, %..quaternion128* %1
		store %..quaternion128 %b, %..quaternion128* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion128, %..quaternion128* %0, align 8
	%3 = extractvalue %..quaternion128 %2, 0
	; real
	%4 = load %..quaternion128, %..quaternion128* %1, align 8
	%5 = extractvalue %..quaternion128 %4, 0
	%6 = fcmp oeq float %3, %5
	; real
	%7 = load %..quaternion128, %..quaternion128* %0, align 8
	%8 = extractvalue %..quaternion128 %7, 0
	; real
	%9 = load %..quaternion128, %..quaternion128* %1, align 8
	%10 = extractvalue %..quaternion128 %9, 0
	%11 = fcmp oeq float %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion128, %..quaternion128* %0, align 8
	%13 = extractvalue %..quaternion128 %12, 1
	; imag
	%14 = load %..quaternion128, %..quaternion128* %1, align 8
	%15 = extractvalue %..quaternion128 %14, 1
	%16 = fcmp oeq float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion128, %..quaternion128* %0, align 8
	%19 = extractvalue %..quaternion128 %18, 0
	; real
	%20 = load %..quaternion128, %..quaternion128* %1, align 8
	%21 = extractvalue %..quaternion128 %20, 0
	%22 = fcmp oeq float %19, %21
	br i1 %22, label %cmp.and-3, label %logical.cmp.done-5

cmp.and-3:
	; imag
	%23 = load %..quaternion128, %..quaternion128* %0, align 8
	%24 = extractvalue %..quaternion128 %23, 1
	; imag
	%25 = load %..quaternion128, %..quaternion128* %1, align 8
	%26 = extractvalue %..quaternion128 %25, 1
	%27 = fcmp oeq float %24, %26
	br i1 %27, label %logical.cmp.rhs-4, label %logical.cmp.done-5

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion128, %..quaternion128* %0, align 8
	%29 = extractvalue %..quaternion128 %28, 2
	; jmag
	%30 = load %..quaternion128, %..quaternion128* %1, align 8
	%31 = extractvalue %..quaternion128 %30, 2
	%32 = fcmp oeq float %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ false, %logical.cmp.done-2 ], [ false, %cmp.and-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion128, %..quaternion128* %0, align 8
	%35 = extractvalue %..quaternion128 %34, 0
	; real
	%36 = load %..quaternion128, %..quaternion128* %1, align 8
	%37 = extractvalue %..quaternion128 %36, 0
	%38 = fcmp oeq float %35, %37
	br i1 %38, label %cmp.and-6, label %logical.cmp.done-9

cmp.and-6:
	; imag
	%39 = load %..quaternion128, %..quaternion128* %0, align 8
	%40 = extractvalue %..quaternion128 %39, 1
	; imag
	%41 = load %..quaternion128, %..quaternion128* %1, align 8
	%42 = extractvalue %..quaternion128 %41, 1
	%43 = fcmp oeq float %40, %42
	br i1 %43, label %cmp.and-7, label %logical.cmp.done-9

cmp.and-7:
	; jmag
	%44 = load %..quaternion128, %..quaternion128* %0, align 8
	%45 = extractvalue %..quaternion128 %44, 2
	; jmag
	%46 = load %..quaternion128, %..quaternion128* %1, align 8
	%47 = extractvalue %..quaternion128 %46, 2
	%48 = fcmp oeq float %45, %47
	br i1 %48, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion128, %..quaternion128* %0, align 8
	%50 = extractvalue %..quaternion128 %49, 3
	; kmag
	%51 = load %..quaternion128, %..quaternion128* %1, align 8
	%52 = extractvalue %..quaternion128 %51, 3
	%53 = fcmp oeq float %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ false, %logical.cmp.done-5 ], [ false, %cmp.and-6 ], [ false, %cmp.and-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define i1 @.__quaternion128_ne(%..quaternion128 %a, %..quaternion128 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion128, align 8
	%1 = alloca %..quaternion128, align 8
	store %..quaternion128 zeroinitializer, %..quaternion128* %0
		store %..quaternion128 %a, %..quaternion128* %0
	store %..quaternion128 zeroinitializer, %..quaternion128* %1
		store %..quaternion128 %b, %..quaternion128* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion128, %..quaternion128* %0, align 8
	%3 = extractvalue %..quaternion128 %2, 0
	; real
	%4 = load %..quaternion128, %..quaternion128* %1, align 8
	%5 = extractvalue %..quaternion128 %4, 0
	%6 = fcmp one float %3, %5
	; real
	%7 = load %..quaternion128, %..quaternion128* %0, align 8
	%8 = extractvalue %..quaternion128 %7, 0
	; real
	%9 = load %..quaternion128, %..quaternion128* %1, align 8
	%10 = extractvalue %..quaternion128 %9, 0
	%11 = fcmp one float %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion128, %..quaternion128* %0, align 8
	%13 = extractvalue %..quaternion128 %12, 1
	; imag
	%14 = load %..quaternion128, %..quaternion128* %1, align 8
	%15 = extractvalue %..quaternion128 %14, 1
	%16 = fcmp one float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion128, %..quaternion128* %0, align 8
	%19 = extractvalue %..quaternion128 %18, 0
	; real
	%20 = load %..quaternion128, %..quaternion128* %1, align 8
	%21 = extractvalue %..quaternion128 %20, 0
	%22 = fcmp one float %19, %21
	br i1 %22, label %logical.cmp.done-5, label %cmp.or-3

cmp.or-3:
	; imag
	%23 = load %..quaternion128, %..quaternion128* %0, align 8
	%24 = extractvalue %..quaternion128 %23, 1
	; imag
	%25 = load %..quaternion128, %..quaternion128* %1, align 8
	%26 = extractvalue %..quaternion128 %25, 1
	%27 = fcmp one float %24, %26
	br i1 %27, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion128, %..quaternion128* %0, align 8
	%29 = extractvalue %..quaternion128 %28, 2
	; jmag
	%30 = load %..quaternion128, %..quaternion128* %1, align 8
	%31 = extractvalue %..quaternion128 %30, 2
	%32 = fcmp one float %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ true, %logical.cmp.done-2 ], [ true, %cmp.or-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion128, %..quaternion128* %0, align 8
	%35 = extractvalue %..quaternion128 %34, 0
	; real
	%36 = load %..quaternion128, %..quaternion128* %1, align 8
	%37 = extractvalue %..quaternion128 %36, 0
	%38 = fcmp one float %35, %37
	br i1 %38, label %logical.cmp.done-9, label %cmp.or-6

cmp.or-6:
	; imag
	%39 = load %..quaternion128, %..quaternion128* %0, align 8
	%40 = extractvalue %..quaternion128 %39, 1
	; imag
	%41 = load %..quaternion128, %..quaternion128* %1, align 8
	%42 = extractvalue %..quaternion128 %41, 1
	%43 = fcmp one float %40, %42
	br i1 %43, label %logical.cmp.done-9, label %cmp.or-7

cmp.or-7:
	; jmag
	%44 = load %..quaternion128, %..quaternion128* %0, align 8
	%45 = extractvalue %..quaternion128 %44, 2
	; jmag
	%46 = load %..quaternion128, %..quaternion128* %1, align 8
	%47 = extractvalue %..quaternion128 %46, 2
	%48 = fcmp one float %45, %47
	br i1 %48, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion128, %..quaternion128* %0, align 8
	%50 = extractvalue %..quaternion128 %49, 3
	; kmag
	%51 = load %..quaternion128, %..quaternion128* %1, align 8
	%52 = extractvalue %..quaternion128 %51, 3
	%53 = fcmp one float %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ true, %logical.cmp.done-5 ], [ true, %cmp.or-6 ], [ true, %cmp.or-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define i1 @.__quaternion256_eq(%..quaternion256 %a, %..quaternion256 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion256, align 8
	%1 = alloca %..quaternion256, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %0
		store %..quaternion256 %a, %..quaternion256* %0
	store %..quaternion256 zeroinitializer, %..quaternion256* %1
		store %..quaternion256 %b, %..quaternion256* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion256, %..quaternion256* %0, align 8
	%3 = extractvalue %..quaternion256 %2, 0
	; real
	%4 = load %..quaternion256, %..quaternion256* %1, align 8
	%5 = extractvalue %..quaternion256 %4, 0
	%6 = fcmp oeq double %3, %5
	; real
	%7 = load %..quaternion256, %..quaternion256* %0, align 8
	%8 = extractvalue %..quaternion256 %7, 0
	; real
	%9 = load %..quaternion256, %..quaternion256* %1, align 8
	%10 = extractvalue %..quaternion256 %9, 0
	%11 = fcmp oeq double %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion256, %..quaternion256* %0, align 8
	%13 = extractvalue %..quaternion256 %12, 1
	; imag
	%14 = load %..quaternion256, %..quaternion256* %1, align 8
	%15 = extractvalue %..quaternion256 %14, 1
	%16 = fcmp oeq double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion256, %..quaternion256* %0, align 8
	%19 = extractvalue %..quaternion256 %18, 0
	; real
	%20 = load %..quaternion256, %..quaternion256* %1, align 8
	%21 = extractvalue %..quaternion256 %20, 0
	%22 = fcmp oeq double %19, %21
	br i1 %22, label %cmp.and-3, label %logical.cmp.done-5

cmp.and-3:
	; imag
	%23 = load %..quaternion256, %..quaternion256* %0, align 8
	%24 = extractvalue %..quaternion256 %23, 1
	; imag
	%25 = load %..quaternion256, %..quaternion256* %1, align 8
	%26 = extractvalue %..quaternion256 %25, 1
	%27 = fcmp oeq double %24, %26
	br i1 %27, label %logical.cmp.rhs-4, label %logical.cmp.done-5

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion256, %..quaternion256* %0, align 8
	%29 = extractvalue %..quaternion256 %28, 2
	; jmag
	%30 = load %..quaternion256, %..quaternion256* %1, align 8
	%31 = extractvalue %..quaternion256 %30, 2
	%32 = fcmp oeq double %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ false, %logical.cmp.done-2 ], [ false, %cmp.and-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion256, %..quaternion256* %0, align 8
	%35 = extractvalue %..quaternion256 %34, 0
	; real
	%36 = load %..quaternion256, %..quaternion256* %1, align 8
	%37 = extractvalue %..quaternion256 %36, 0
	%38 = fcmp oeq double %35, %37
	br i1 %38, label %cmp.and-6, label %logical.cmp.done-9

cmp.and-6:
	; imag
	%39 = load %..quaternion256, %..quaternion256* %0, align 8
	%40 = extractvalue %..quaternion256 %39, 1
	; imag
	%41 = load %..quaternion256, %..quaternion256* %1, align 8
	%42 = extractvalue %..quaternion256 %41, 1
	%43 = fcmp oeq double %40, %42
	br i1 %43, label %cmp.and-7, label %logical.cmp.done-9

cmp.and-7:
	; jmag
	%44 = load %..quaternion256, %..quaternion256* %0, align 8
	%45 = extractvalue %..quaternion256 %44, 2
	; jmag
	%46 = load %..quaternion256, %..quaternion256* %1, align 8
	%47 = extractvalue %..quaternion256 %46, 2
	%48 = fcmp oeq double %45, %47
	br i1 %48, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion256, %..quaternion256* %0, align 8
	%50 = extractvalue %..quaternion256 %49, 3
	; kmag
	%51 = load %..quaternion256, %..quaternion256* %1, align 8
	%52 = extractvalue %..quaternion256 %51, 3
	%53 = fcmp oeq double %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ false, %logical.cmp.done-5 ], [ false, %cmp.and-6 ], [ false, %cmp.and-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define i1 @.__quaternion256_ne(%..quaternion256 %a, %..quaternion256 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion256, align 8
	%1 = alloca %..quaternion256, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %0
		store %..quaternion256 %a, %..quaternion256* %0
	store %..quaternion256 zeroinitializer, %..quaternion256* %1
		store %..quaternion256 %b, %..quaternion256* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion256, %..quaternion256* %0, align 8
	%3 = extractvalue %..quaternion256 %2, 0
	; real
	%4 = load %..quaternion256, %..quaternion256* %1, align 8
	%5 = extractvalue %..quaternion256 %4, 0
	%6 = fcmp one double %3, %5
	; real
	%7 = load %..quaternion256, %..quaternion256* %0, align 8
	%8 = extractvalue %..quaternion256 %7, 0
	; real
	%9 = load %..quaternion256, %..quaternion256* %1, align 8
	%10 = extractvalue %..quaternion256 %9, 0
	%11 = fcmp one double %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion256, %..quaternion256* %0, align 8
	%13 = extractvalue %..quaternion256 %12, 1
	; imag
	%14 = load %..quaternion256, %..quaternion256* %1, align 8
	%15 = extractvalue %..quaternion256 %14, 1
	%16 = fcmp one double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion256, %..quaternion256* %0, align 8
	%19 = extractvalue %..quaternion256 %18, 0
	; real
	%20 = load %..quaternion256, %..quaternion256* %1, align 8
	%21 = extractvalue %..quaternion256 %20, 0
	%22 = fcmp one double %19, %21
	br i1 %22, label %logical.cmp.done-5, label %cmp.or-3

cmp.or-3:
	; imag
	%23 = load %..quaternion256, %..quaternion256* %0, align 8
	%24 = extractvalue %..quaternion256 %23, 1
	; imag
	%25 = load %..quaternion256, %..quaternion256* %1, align 8
	%26 = extractvalue %..quaternion256 %25, 1
	%27 = fcmp one double %24, %26
	br i1 %27, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion256, %..quaternion256* %0, align 8
	%29 = extractvalue %..quaternion256 %28, 2
	; jmag
	%30 = load %..quaternion256, %..quaternion256* %1, align 8
	%31 = extractvalue %..quaternion256 %30, 2
	%32 = fcmp one double %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ true, %logical.cmp.done-2 ], [ true, %cmp.or-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion256, %..quaternion256* %0, align 8
	%35 = extractvalue %..quaternion256 %34, 0
	; real
	%36 = load %..quaternion256, %..quaternion256* %1, align 8
	%37 = extractvalue %..quaternion256 %36, 0
	%38 = fcmp one double %35, %37
	br i1 %38, label %logical.cmp.done-9, label %cmp.or-6

cmp.or-6:
	; imag
	%39 = load %..quaternion256, %..quaternion256* %0, align 8
	%40 = extractvalue %..quaternion256 %39, 1
	; imag
	%41 = load %..quaternion256, %..quaternion256* %1, align 8
	%42 = extractvalue %..quaternion256 %41, 1
	%43 = fcmp one double %40, %42
	br i1 %43, label %logical.cmp.done-9, label %cmp.or-7

cmp.or-7:
	; jmag
	%44 = load %..quaternion256, %..quaternion256* %0, align 8
	%45 = extractvalue %..quaternion256 %44, 2
	; jmag
	%46 = load %..quaternion256, %..quaternion256* %1, align 8
	%47 = extractvalue %..quaternion256 %46, 2
	%48 = fcmp one double %45, %47
	br i1 %48, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion256, %..quaternion256* %0, align 8
	%50 = extractvalue %..quaternion256 %49, 3
	; kmag
	%51 = load %..quaternion256, %..quaternion256* %1, align 8
	%52 = extractvalue %..quaternion256 %51, 3
	%53 = fcmp one double %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ true, %logical.cmp.done-5 ], [ true, %cmp.or-6 ], [ true, %cmp.or-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define void @.__assert(%..string %file, i64 %line, i64 %column, %..string %msg) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [4 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %msg, %..string* %3
	; SelectorExpr
	; SelectorExpr
	%10 = load i64, i64* @.os_windows-23.stderr, align 8
	%11 = load %..string, %..string* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%15 = bitcast %..string* %0 to %..rawptr
	%16 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%17 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%18 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %16, %Type_Info** %17
	store %..rawptr %15, %..rawptr* %18
	%19 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%20 = bitcast i64* %1 to %..rawptr
	%21 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%22 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%27 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%30 = bitcast %..string* %3 to %..rawptr
	%31 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%32 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [4 x %..any] zeroinitializer, [4 x %..any]* %9
	%35 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	store %..any %19, %..any* %35
	%36 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 1
	store %..any %24, %..any* %36
	%37 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 2
	store %..any %29, %..any* %37
	%38 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 3
	store %..any %34, %..any* %38
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	%40 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %39, %..any** %40
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 4, i64* %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 4, i64* %42
	%43 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%44 = call i64 @.fmt-4.fprintf(i64 %10, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$6, i64 0, i32 0), i64 32}, {%..any*, i64, i64} %43)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__panic(%..string %file, i64 %line, i64 %column, %..string %msg) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [4 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %msg, %..string* %3
	; SelectorExpr
	; SelectorExpr
	%10 = load i64, i64* @.os_windows-23.stderr, align 8
	%11 = load %..string, %..string* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%15 = bitcast %..string* %0 to %..rawptr
	%16 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%17 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%18 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %16, %Type_Info** %17
	store %..rawptr %15, %..rawptr* %18
	%19 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%20 = bitcast i64* %1 to %..rawptr
	%21 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%22 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%27 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%30 = bitcast %..string* %3 to %..rawptr
	%31 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%32 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [4 x %..any] zeroinitializer, [4 x %..any]* %9
	%35 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	store %..any %19, %..any* %35
	%36 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 1
	store %..any %24, %..any* %36
	%37 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 2
	store %..any %29, %..any* %37
	%38 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 3
	store %..any %34, %..any* %38
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	%40 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %39, %..any** %40
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 4, i64* %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 4, i64* %42
	%43 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%44 = call i64 @.fmt-4.fprintf(i64 %10, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$7, i64 0, i32 0), i64 20}, {%..any*, i64, i64} %43)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__bounds_check_error(%..string %file, i64 %line, i64 %column, i64 %index, i64 %count) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [5 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %index, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %count, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	br i1 %13, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%14 = load i64, i64* %3, align 8
	%15 = load i64, i64* %4, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%17 = load i64, i64* @.os_windows-23.stderr, align 8
	%18 = load %..string, %..string* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %2, align 8
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%23 = bitcast %..string* %0 to %..rawptr
	%24 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%25 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%26 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %24, %Type_Info** %25
	store %..rawptr %23, %..rawptr* %26
	%27 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%28 = bitcast i64* %1 to %..rawptr
	%29 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%30 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%33 = bitcast i64* %2 to %..rawptr
	%34 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%35 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %34, %Type_Info** %35
	store %..rawptr %33, %..rawptr* %36
	%37 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%38 = bitcast i64* %3 to %..rawptr
	%39 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%40 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %39, %Type_Info** %40
	store %..rawptr %38, %..rawptr* %41
	%42 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%43 = bitcast i64* %4 to %..rawptr
	%44 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%45 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %44, %Type_Info** %45
	store %..rawptr %43, %..rawptr* %46
	%47 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [5 x %..any] zeroinitializer, [5 x %..any]* %11
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	store %..any %27, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 2
	store %..any %37, %..any* %50
	%51 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 3
	store %..any %42, %..any* %51
	%52 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 4
	store %..any %47, %..any* %52
	%53 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	%54 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %53, %..any** %54
	%55 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 5, i64* %55
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 5, i64* %56
	%57 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%58 = call i64 @.fmt-4.fprintf(i64 %17, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$8, i64 0, i32 0), i64 48}, {%..any*, i64, i64} %57)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__slice_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high, i64 %max) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [6 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %low, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %high, i64* %4
	store i64 zeroinitializer, i64* %5
		store i64 %max, i64* %5
	; IfStmt
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 0, %14
	br i1 %15, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%16 = load i64, i64* %3, align 8
	%17 = load i64, i64* %4, align 8
	%18 = icmp sle i64 %16, %17
	br i1 %18, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%19 = load i64, i64* %4, align 8
	%20 = load i64, i64* %5, align 8
	%21 = icmp sle i64 %19, %20
	br i1 %21, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	; SelectorExpr
	%22 = load i64, i64* @.os_windows-23.stderr, align 8
	%23 = load %..string, %..string* %0, align 8
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %2, align 8
	%26 = load i64, i64* %3, align 8
	%27 = load i64, i64* %4, align 8
	%28 = load i64, i64* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%29 = bitcast %..string* %0 to %..rawptr
	%30 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%34 = bitcast i64* %1 to %..rawptr
	%35 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%39 = bitcast i64* %2 to %..rawptr
	%40 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%42 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %40, %Type_Info** %41
	store %..rawptr %39, %..rawptr* %42
	%43 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%44 = bitcast i64* %3 to %..rawptr
	%45 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%47 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %45, %Type_Info** %46
	store %..rawptr %44, %..rawptr* %47
	%48 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%49 = bitcast i64* %4 to %..rawptr
	%50 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%51 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%54 = bitcast i64* %5 to %..rawptr
	%55 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%56 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%57 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %55, %Type_Info** %56
	store %..rawptr %54, %..rawptr* %57
	%58 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [6 x %..any] zeroinitializer, [6 x %..any]* %13
	%59 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	store %..any %33, %..any* %59
	%60 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 1
	store %..any %38, %..any* %60
	%61 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 2
	store %..any %43, %..any* %61
	%62 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 3
	store %..any %48, %..any* %62
	%63 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 4
	store %..any %53, %..any* %63
	%64 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 5
	store %..any %58, %..any* %64
	%65 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	%66 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %65, %..any** %66
	%67 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 6, i64* %67
	%68 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 6, i64* %68
	%69 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%70 = call i64 @.fmt-4.fprintf(i64 %22, %..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$9, i64 0, i32 0), i64 46}, {%..any*, i64, i64} %69)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__substring_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [5 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %low, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %high, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	br i1 %13, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%14 = load i64, i64* %3, align 8
	%15 = load i64, i64* %4, align 8
	%16 = icmp sle i64 %14, %15
	br i1 %16, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%17 = load i64, i64* @.os_windows-23.stderr, align 8
	%18 = load %..string, %..string* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %2, align 8
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%23 = bitcast %..string* %0 to %..rawptr
	%24 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%25 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%26 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %24, %Type_Info** %25
	store %..rawptr %23, %..rawptr* %26
	%27 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%28 = bitcast i64* %1 to %..rawptr
	%29 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%30 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%33 = bitcast i64* %2 to %..rawptr
	%34 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%35 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %34, %Type_Info** %35
	store %..rawptr %33, %..rawptr* %36
	%37 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%38 = bitcast i64* %3 to %..rawptr
	%39 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%40 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %39, %Type_Info** %40
	store %..rawptr %38, %..rawptr* %41
	%42 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%43 = bitcast i64* %4 to %..rawptr
	%44 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%45 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %44, %Type_Info** %45
	store %..rawptr %43, %..rawptr* %46
	%47 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [5 x %..any] zeroinitializer, [5 x %..any]* %11
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	store %..any %27, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 2
	store %..any %37, %..any* %50
	%51 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 3
	store %..any %42, %..any* %51
	%52 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 4
	store %..any %47, %..any* %52
	%53 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	%54 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %53, %..any** %54
	%55 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 5, i64* %55
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 5, i64* %56
	%57 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%58 = call i64 @.fmt-4.fprintf(i64 %17, %..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$a, i64 0, i32 0), i64 46}, {%..any*, i64, i64} %57)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__union_cast_check(i1 %ok, %..string %file, i64 %line, i64 %column, %Type_Info* %from, %Type_Info* %to) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Type_Info*, align 8
	%5 = alloca %Type_Info*, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca {%..any*, i64, i64}, align 8
	%12 = alloca [5 x %..any], align 8
	store i1 zeroinitializer, i1* %0
		store i1 %ok, i1* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %file, %..string* %1
	store i64 zeroinitializer, i64* %2
		store i64 %line, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %column, i64* %3
	store %Type_Info* zeroinitializer, %Type_Info** %4
		store %Type_Info* %from, %Type_Info** %4
	store %Type_Info* zeroinitializer, %Type_Info** %5
		store %Type_Info* %to, %Type_Info** %5
	; IfStmt
	%13 = load i1, i1* %0, align 1
	br i1 %13, label %if.done-2, label %if.then-1

if.then-1:
	; SelectorExpr
	; SelectorExpr
	%14 = load i64, i64* @.os_windows-23.stderr, align 8
	%15 = load %..string, %..string* %1, align 8
	%16 = load i64, i64* %2, align 8
	%17 = load i64, i64* %3, align 8
	%18 = load %Type_Info*, %Type_Info** %4, align 8
	%19 = load %Type_Info*, %Type_Info** %5, align 8
	store %..any zeroinitializer, %..any* %6
	%20 = bitcast %..string* %1 to %..rawptr
	%21 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%22 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%27 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%32 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%35 = bitcast %Type_Info** %4 to %..rawptr
	%36 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%37 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%38 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %36, %Type_Info** %37
	store %..rawptr %35, %..rawptr* %38
	%39 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%40 = bitcast %Type_Info** %5 to %..rawptr
	%41 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%42 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%43 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %41, %Type_Info** %42
	store %..rawptr %40, %..rawptr* %43
	%44 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %11
	store [5 x %..any] zeroinitializer, [5 x %..any]* %12
	%45 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 0
	store %..any %24, %..any* %45
	%46 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 1
	store %..any %29, %..any* %46
	%47 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 2
	store %..any %34, %..any* %47
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 3
	store %..any %39, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 4
	store %..any %44, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 0
	%51 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 0
	store %..any* %50, %..any** %51
	%52 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 1
	store i64 5, i64* %52
	%53 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 2
	store i64 5, i64* %53
	%54 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %11, align 8
	%55 = call i64 @.fmt-4.fprintf(i64 %14, %..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$b, i64 0, i32 0), i64 45}, {%..any*, i64, i64} %54)
	call ccc void @llvm.debugtrap()
	br label %if.done-2

if.done-2:
	ret void
}

define {i32, i64} @.__string_decode_rune(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i32, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	; SelectorExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = call {i32, i64} @.utf8-5.decode_rune-2686135930080(%..string %2)
	%4 = extractvalue {i32, i64} %3, 0
	%5 = extractvalue {i32, i64} %3, 1
	store {i32, i64} zeroinitializer, {i32, i64}* %1
	%6 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 0
	store i32 %4, i32* %6
	%7 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 1
	store i64 %5, i64* %7
	%8 = load {i32, i64}, {i32, i64}* %1, align 8
	ret {i32, i64} %8
}

define %..rawptr @.__mem_set(%..rawptr %data, i32 %value, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i32 zeroinitializer, i32* %1
		store i32 %value, i32* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load i32, i32* %1, align 4
	; cast - cast
	%5 = trunc i32 %4 to i8
	%6 = load i64, i64* %2, align 8
	call ccc void @llvm.memset.p0i8.i64(%..rawptr %3, i8 %5, i64 %6, i32 1, i1 false)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %7
}

define %..rawptr @.__mem_zero(%..rawptr %data, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %len, i64* %1
	; ReturnStmt
	%2 = load %..rawptr, %..rawptr* %0, align 8
	%3 = load i64, i64* %1, align 8
	%4 = call %..rawptr @.__mem_set(%..rawptr %2, i32 0, i64 %3)
	ret %..rawptr %4
}

define %..rawptr @.__mem_copy(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	call ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr %3, %..rawptr %4, i64 %5, i32 1, i1 false)
	; ReturnStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %6
}

define %..rawptr @.__mem_copy_non_overlapping(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	call ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr %3, %..rawptr %4, i64 %5, i32 1, i1 false)
	; ReturnStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %6
}

define i64 @.__mem_compare(i8* %a, i8* %b, i64 %n) {
decls-0:
	%0 = alloca i8*, align 8
	%1 = alloca i8*, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	store i8* zeroinitializer, i8** %0
		store i8* %a, i8** %0
	store i8* zeroinitializer, i8** %1
		store i8* %b, i8** %1
	store i64 zeroinitializer, i64* %2
		store i64 %n, i64* %2
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %3
		store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-1

for.interval.loop-1:
	%6 = load i64, i64* %2, align 8
	%7 = load i64, i64* %4, align 8
	%8 = icmp slt i64 %7, %6
	br i1 %8, label %for.interval.body-2, label %for.interval.done-8

for.interval.body-2:
	%9 = load i64, i64* %4, align 8
	%10 = load i64, i64* %5, align 8
	%11 = load i64, i64* %4, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %4
	%13 = load i64, i64* %5, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %5
	store i64 %9, i64* %3
	; MatchStmt
	%15 = load i8*, i8** %0, align 8
	%16 = load i64, i64* %3, align 8
	%17 = getelementptr inbounds i8, i8* %15, i64 %16
	%18 = getelementptr inbounds i8, i8* %17, i64 0
	%19 = load i8, i8* %18, align 1
	%20 = load i8*, i8** %1, align 8
	%21 = load i64, i64* %3, align 8
	%22 = getelementptr inbounds i8, i8* %20, i64 %21
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	%24 = load i8, i8* %23, align 1
	%25 = icmp ult i8 %19, %24
	%26 = icmp eq i1 true, %25
	br i1 %26, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%27 = load i8*, i8** %0, align 8
	%28 = load i64, i64* %3, align 8
	%29 = getelementptr inbounds i8, i8* %27, i64 %28
	%30 = getelementptr inbounds i8, i8* %29, i64 0
	%31 = load i8, i8* %30, align 1
	%32 = load i8*, i8** %1, align 8
	%33 = load i64, i64* %3, align 8
	%34 = getelementptr inbounds i8, i8* %32, i64 %33
	%35 = getelementptr inbounds i8, i8* %34, i64 0
	%36 = load i8, i8* %35, align 1
	%37 = icmp ugt i8 %31, %36
	%38 = icmp eq i1 true, %37
	br i1 %38, label %match.fall.body-6, label %match.case.next-5

match.case.body-4:
	; ReturnStmt
	ret i64 -1

match.case.next-5:
	br label %match.done-7

match.fall.body-6:
	; ReturnStmt
	ret i64 1

match.done-7:
	br label %for.interval.loop-1

for.interval.done-8:
	; ReturnStmt
	ret i64 0
}

define float @.__abs_complex64(%..complex64 %x) alwaysinline {
decls-0:
	%0 = alloca %..complex64, align 8
	%1 = alloca float, align 4
	%2 = alloca float, align 4
	store %..complex64 zeroinitializer, %..complex64* %0
		store %..complex64 %x, %..complex64* %0
	; r
	store float zeroinitializer, float* %1
		; i
	store float zeroinitializer, float* %2
		; real
	%3 = load %..complex64, %..complex64* %0, align 8
	%4 = extractvalue %..complex64 %3, 0
	; imag
	%5 = load %..complex64, %..complex64* %0, align 8
	%6 = extractvalue %..complex64 %5, 1
	store float %4, float* %1
	store float %6, float* %2
	; ReturnStmt
	%7 = load float, float* %1, align 4
	%8 = load float, float* %1, align 4
	%9 = fmul float %7, %8
	%10 = load float, float* %2, align 4
	%11 = load float, float* %2, align 4
	%12 = fmul float %10, %11
	%13 = fadd float %9, %12
	%14 = call ccc float @llvm.sqrt.f32(float %13)
	ret float %14
}

define double @.__abs_complex128(%..complex128 %x) alwaysinline {
decls-0:
	%0 = alloca %..complex128, align 8
	%1 = alloca double, align 8
	%2 = alloca double, align 8
	store %..complex128 zeroinitializer, %..complex128* %0
		store %..complex128 %x, %..complex128* %0
	; r
	store double zeroinitializer, double* %1
		; i
	store double zeroinitializer, double* %2
		; real
	%3 = load %..complex128, %..complex128* %0, align 8
	%4 = extractvalue %..complex128 %3, 0
	; imag
	%5 = load %..complex128, %..complex128* %0, align 8
	%6 = extractvalue %..complex128 %5, 1
	store double %4, double* %1
	store double %6, double* %2
	; ReturnStmt
	%7 = load double, double* %1, align 8
	%8 = load double, double* %1, align 8
	%9 = fmul double %7, %8
	%10 = load double, double* %2, align 8
	%11 = load double, double* %2, align 8
	%12 = fmul double %10, %11
	%13 = fadd double %9, %12
	%14 = call ccc double @llvm.sqrt.f64(double %13)
	ret double %14
}

define float @.__abs_quaternion128(%..quaternion128 %x) alwaysinline {
decls-0:
	%0 = alloca %..quaternion128, align 8
	%1 = alloca float, align 4
	%2 = alloca float, align 4
	%3 = alloca float, align 4
	%4 = alloca float, align 4
	store %..quaternion128 zeroinitializer, %..quaternion128* %0
		store %..quaternion128 %x, %..quaternion128* %0
	; r
	store float zeroinitializer, float* %1
		; i
	store float zeroinitializer, float* %2
		; j
	store float zeroinitializer, float* %3
		; k
	store float zeroinitializer, float* %4
		; real
	%5 = load %..quaternion128, %..quaternion128* %0, align 8
	%6 = extractvalue %..quaternion128 %5, 0
	; imag
	%7 = load %..quaternion128, %..quaternion128* %0, align 8
	%8 = extractvalue %..quaternion128 %7, 1
	; jmag
	%9 = load %..quaternion128, %..quaternion128* %0, align 8
	%10 = extractvalue %..quaternion128 %9, 2
	; kmag
	%11 = load %..quaternion128, %..quaternion128* %0, align 8
	%12 = extractvalue %..quaternion128 %11, 3
	store float %6, float* %1
	store float %8, float* %2
	store float %10, float* %3
	store float %12, float* %4
	; ReturnStmt
	%13 = load float, float* %1, align 4
	%14 = load float, float* %1, align 4
	%15 = fmul float %13, %14
	%16 = load float, float* %2, align 4
	%17 = load float, float* %2, align 4
	%18 = fmul float %16, %17
	%19 = fadd float %15, %18
	%20 = load float, float* %3, align 4
	%21 = load float, float* %3, align 4
	%22 = fmul float %20, %21
	%23 = fadd float %19, %22
	%24 = load float, float* %4, align 4
	%25 = load float, float* %4, align 4
	%26 = fmul float %24, %25
	%27 = fadd float %23, %26
	%28 = call ccc float @llvm.sqrt.f32(float %27)
	ret float %28
}

define double @.__abs_quaternion256(%..quaternion256 %x) alwaysinline {
decls-0:
	%0 = alloca %..quaternion256, align 8
	%1 = alloca double, align 8
	%2 = alloca double, align 8
	%3 = alloca double, align 8
	%4 = alloca double, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %0
		store %..quaternion256 %x, %..quaternion256* %0
	; r
	store double zeroinitializer, double* %1
		; i
	store double zeroinitializer, double* %2
		; j
	store double zeroinitializer, double* %3
		; k
	store double zeroinitializer, double* %4
		; real
	%5 = load %..quaternion256, %..quaternion256* %0, align 8
	%6 = extractvalue %..quaternion256 %5, 0
	; imag
	%7 = load %..quaternion256, %..quaternion256* %0, align 8
	%8 = extractvalue %..quaternion256 %7, 1
	; jmag
	%9 = load %..quaternion256, %..quaternion256* %0, align 8
	%10 = extractvalue %..quaternion256 %9, 2
	; kmag
	%11 = load %..quaternion256, %..quaternion256* %0, align 8
	%12 = extractvalue %..quaternion256 %11, 3
	store double %6, double* %1
	store double %8, double* %2
	store double %10, double* %3
	store double %12, double* %4
	; ReturnStmt
	%13 = load double, double* %1, align 8
	%14 = load double, double* %1, align 8
	%15 = fmul double %13, %14
	%16 = load double, double* %2, align 8
	%17 = load double, double* %2, align 8
	%18 = fmul double %16, %17
	%19 = fadd double %15, %18
	%20 = load double, double* %3, align 8
	%21 = load double, double* %3, align 8
	%22 = fmul double %20, %21
	%23 = fadd double %19, %22
	%24 = load double, double* %4, align 8
	%25 = load double, double* %4, align 8
	%26 = fmul double %24, %25
	%27 = fadd double %23, %26
	%28 = call ccc double @llvm.sqrt.f64(double %27)
	ret double %28
}

define void @.__dynamic_array_make(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %len, i64 %cap) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %raw-6.Dynamic_Array*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %len, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %cap, i64* %4
	; array
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %5
		%6 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%7 = bitcast %..rawptr %6 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %7, %raw-6.Dynamic_Array** %5
	call void @.__check_context()
	; AssignStmt
	; SelectorExpr
	%8 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%9 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %8, i64 0
	%10 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %9, i64 0, i32 3
	; SelectorExpr
	%11 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%12 = load %Allocator, %Allocator* %11, align 8
	store %Allocator %12, %Allocator* %10
	; assert
	; SelectorExpr
	; SelectorExpr
	%13 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%14 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %13, i64 0
	%15 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %14, i64 0, i32 3
	%16 = getelementptr inbounds %Allocator, %Allocator* %15, i64 0, i32 0
	%17 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %16, align 8
	%18 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %17, zeroinitializer
	%19 = icmp eq i1 %18, false
	br i1 %19, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$c, i64 0, i32 0), i64 30}, i64 434, i64 25, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$d, i64 0, i32 0), i64 32})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; IfStmt
	%20 = load i64, i64* %4, align 8
	%21 = icmp sgt i64 %20, 0
	br i1 %21, label %if.then-3, label %if.done-4

if.then-3:
	%22 = load %..rawptr, %..rawptr* %0, align 8
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %2, align 8
	%25 = load i64, i64* %4, align 8
	%26 = call i1 @.__dynamic_array_reserve(%..rawptr %22, i64 %23, i64 %24, i64 %25)
	; AssignStmt
	; SelectorExpr
	%27 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%28 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %27, i64 0
	%29 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %28, i64 0, i32 1
	%30 = load i64, i64* %3, align 8
	store i64 %30, i64* %29
	br label %if.done-4

if.done-4:
	ret void
}

define i1 @.__dynamic_array_reserve(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %cap) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %raw-6.Dynamic_Array*, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %Allocator, align 8
	%8 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %cap, i64* %3
	; array
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %4
		%9 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%10 = bitcast %..rawptr %9 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %10, %raw-6.Dynamic_Array** %4
	; IfStmt
	%11 = load i64, i64* %3, align 8
	; SelectorExpr
	%12 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%13 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %12, i64 0
	%14 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %13, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %11, %15
	br i1 %16, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 true

if.done-2:
	call void @.__check_context()
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%17 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%18 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %18, i64 0, i32 3
	%20 = getelementptr inbounds %Allocator, %Allocator* %19, i64 0, i32 0
	%21 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %20, align 8
	%22 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %21, zeroinitializer
	br i1 %22, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%23 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%24 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %23, i64 0
	%25 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %24, i64 0, i32 3
	; SelectorExpr
	%26 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%27 = load %Allocator, %Allocator* %26, align 8
	store %Allocator %27, %Allocator* %25
	br label %if.done-4

if.done-4:
	; assert
	; SelectorExpr
	; SelectorExpr
	%28 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%29 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %28, i64 0
	%30 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %29, i64 0, i32 3
	%31 = getelementptr inbounds %Allocator, %Allocator* %30, i64 0, i32 0
	%32 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %31, align 8
	%33 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %32, zeroinitializer
	%34 = icmp eq i1 %33, false
	br i1 %34, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$e, i64 0, i32 0), i64 30}, i64 453, i64 25, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$f, i64 0, i32 0), i64 32})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; old_size
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%35 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%36 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %35, i64 0
	%37 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %36, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = load i64, i64* %1, align 8
	%40 = mul i64 %38, %39
	store i64 %40, i64* %5
	; new_size
	store i64 zeroinitializer, i64* %6
		%41 = load i64, i64* %3, align 8
	%42 = load i64, i64* %1, align 8
	%43 = mul i64 %41, %42
	store i64 %43, i64* %6
	; allocator
	store %Allocator zeroinitializer, %Allocator* %7
		; SelectorExpr
	%44 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%45 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %44, i64 0
	%46 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %45, i64 0, i32 3
	%47 = load %Allocator, %Allocator* %46, align 8
	store %Allocator %47, %Allocator* %7
	; new_data
	store %..rawptr zeroinitializer, %..rawptr* %8
		; SelectorExpr
	%48 = getelementptr inbounds %Allocator, %Allocator* %7, i64 0, i32 0
	%49 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %48, align 8
	; SelectorExpr
	%50 = getelementptr inbounds %Allocator, %Allocator* %7, i64 0, i32 1
	%51 = load %..rawptr, %..rawptr* %50, align 8
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %2, align 8
	; SelectorExpr
	%54 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%55 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %54, i64 0
	%56 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %55, i64 0, i32 0
	%57 = load %..rawptr, %..rawptr* %56, align 8
	%58 = load i64, i64* %5, align 8
	%59 = call %..rawptr %49(%..rawptr %51, i8 3, i64 %52, i64 %53, %..rawptr %57, i64 %58, i64 0)
	store %..rawptr %59, %..rawptr* %8
	; IfStmt
	%60 = load %..rawptr, %..rawptr* %8, align 8
	%61 = icmp eq %..rawptr %60, zeroinitializer
	br i1 %61, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i1 false

if.done-8:
	; AssignStmt
	; SelectorExpr
	%62 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%63 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %62, i64 0
	%64 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %63, i64 0, i32 0
	%65 = load %..rawptr, %..rawptr* %8, align 8
	store %..rawptr %65, %..rawptr* %64
	; AssignStmt
	; SelectorExpr
	%66 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%67 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %66, i64 0
	%68 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %67, i64 0, i32 2
	%69 = load i64, i64* %3, align 8
	store i64 %69, i64* %68
	; ReturnStmt
	ret i1 true
}

define i1 @.__dynamic_array_resize(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %raw-6.Dynamic_Array*, align 8
	%5 = alloca i1, align 1
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %len, i64* %3
	; array
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %4
		%6 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%7 = bitcast %..rawptr %6 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %7, %raw-6.Dynamic_Array** %4
	; ok
	store i1 zeroinitializer, i1* %5
		%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = load i64, i64* %1, align 8
	%10 = load i64, i64* %2, align 8
	%11 = load i64, i64* %3, align 8
	%12 = call i1 @.__dynamic_array_reserve(%..rawptr %8, i64 %9, i64 %10, i64 %11)
	store i1 %12, i1* %5
	; IfStmt
	%13 = load i1, i1* %5, align 1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%14 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%15 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %14, i64 0
	%16 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %15, i64 0, i32 1
	%17 = load i64, i64* %3, align 8
	store i64 %17, i64* %16
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%18 = load i1, i1* %5, align 1
	ret i1 %18
}

define i64 @.__dynamic_array_append(%..rawptr %array_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca i64, align 8
	%5 = alloca %raw-6.Dynamic_Array*, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %items, %..rawptr* %3
	store i64 zeroinitializer, i64* %4
		store i64 %item_count, i64* %4
	; array
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %5
		%9 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%10 = bitcast %..rawptr %9 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %10, %raw-6.Dynamic_Array** %5
	; IfStmt
	%11 = load i64, i64* %4, align 8
	%12 = icmp sle i64 %11, 0
	br i1 %12, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%13 = load %..rawptr, %..rawptr* %3, align 8
	%14 = icmp eq %..rawptr %13, zeroinitializer
	br i1 %14, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%15 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%16 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %15, i64 0
	%17 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %16, i64 0, i32 1
	%18 = load i64, i64* %17, align 8
	ret i64 %18

if.done-3:
	; ok
	store i1 zeroinitializer, i1* %6
		store i1 true, i1* %6
	; IfStmt
	; SelectorExpr
	%19 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%20 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %20, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	; SelectorExpr
	%23 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%24 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %23, i64 0
	%25 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %24, i64 0, i32 1
	%26 = load i64, i64* %25, align 8
	%27 = load i64, i64* %4, align 8
	%28 = add i64 %26, %27
	%29 = icmp sle i64 %22, %28
	br i1 %29, label %if.then-4, label %if.done-5

if.then-4:
	; cap
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%30 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%31 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %30, i64 0
	%32 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %31, i64 0, i32 2
	%33 = load i64, i64* %32, align 8
	%34 = mul i64 2, %33
	; max
	%35 = load i64, i64* %4, align 8
	%36 = icmp sgt i64 8, %35
	%37 = select i1 %36, i64 8, i64 %35
	%38 = add i64 %34, %37
	store i64 %38, i64* %7
	; AssignStmt
	%39 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%40 = load i64, i64* %1, align 8
	%41 = load i64, i64* %2, align 8
	%42 = load i64, i64* %7, align 8
	%43 = bitcast %raw-6.Dynamic_Array* %39 to %..rawptr
	%44 = call i1 @.__dynamic_array_reserve(%..rawptr %43, i64 %40, i64 %41, i64 %42)
	store i1 %44, i1* %6
	br label %if.done-5

if.done-5:
	; IfStmt
	%45 = load i1, i1* %6, align 1
	br i1 %45, label %if.done-7, label %if.then-6

if.then-6:
	; ReturnStmt
	; SelectorExpr
	%46 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%47 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %46, i64 0
	%48 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %47, i64 0, i32 1
	%49 = load i64, i64* %48, align 8
	ret i64 %49

if.done-7:
	; data
	store i8* zeroinitializer, i8** %8
		; SelectorExpr
	%50 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%51 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %50, i64 0
	%52 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %51, i64 0, i32 0
	%53 = load %..rawptr, %..rawptr* %52, align 8
	; cast - cast
	%54 = bitcast %..rawptr %53 to i8*
	store i8* %54, i8** %8
	; assert
	%55 = load i8*, i8** %8, align 8
	%56 = icmp ne i8* %55, zeroinitializer
	%57 = icmp eq i1 %56, false
	br i1 %57, label %builtin.assert.err-8, label %builtin.assert.done-9

builtin.assert.err-8:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$10, i64 0, i32 0), i64 30}, i64 499, i64 9, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$11, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-9

builtin.assert.done-9:
	%58 = load i8*, i8** %8, align 8
	%59 = load i64, i64* %1, align 8
	; SelectorExpr
	%60 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%61 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	%64 = mul i64 %59, %63
	%65 = getelementptr inbounds i8, i8* %58, i64 %64
	%66 = load %..rawptr, %..rawptr* %3, align 8
	%67 = load i64, i64* %1, align 8
	%68 = load i64, i64* %4, align 8
	%69 = mul i64 %67, %68
	%70 = bitcast i8* %65 to %..rawptr
	%71 = call %..rawptr @.__mem_copy(%..rawptr %70, %..rawptr %66, i64 %69)
	; AssignStmt
	; SelectorExpr
	%72 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%73 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %72, i64 0
	%74 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %73, i64 0, i32 1
	%75 = load i64, i64* %4, align 8
	%76 = load i64, i64* %74, align 8
	%77 = add i64 %76, %75
	store i64 %77, i64* %74
	; ReturnStmt
	; SelectorExpr
	%78 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%79 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %78, i64 0
	%80 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %79, i64 0, i32 1
	%81 = load i64, i64* %80, align 8
	ret i64 %81
}

define i64 @.__dynamic_array_append_nothing(%..rawptr %array_, i64 %elem_size, i64 %elem_align) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %raw-6.Dynamic_Array*, align 8
	%4 = alloca i1, align 1
	%5 = alloca i64, align 8
	%6 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	; array
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %3
		%7 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%8 = bitcast %..rawptr %7 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %8, %raw-6.Dynamic_Array** %3
	; ok
	store i1 zeroinitializer, i1* %4
		store i1 true, i1* %4
	; IfStmt
	; SelectorExpr
	%9 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%10 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %9, i64 0
	%11 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %10, i64 0, i32 2
	%12 = load i64, i64* %11, align 8
	; SelectorExpr
	%13 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%14 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %13, i64 0
	%15 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	%17 = add i64 %16, 1
	%18 = icmp sle i64 %12, %17
	br i1 %18, label %if.then-1, label %if.done-2

if.then-1:
	; cap
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%19 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%20 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %20, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	%23 = mul i64 2, %22
	%24 = add i64 %23, 8
	store i64 %24, i64* %5
	; AssignStmt
	%25 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%26 = load i64, i64* %1, align 8
	%27 = load i64, i64* %2, align 8
	%28 = load i64, i64* %5, align 8
	%29 = bitcast %raw-6.Dynamic_Array* %25 to %..rawptr
	%30 = call i1 @.__dynamic_array_reserve(%..rawptr %29, i64 %26, i64 %27, i64 %28)
	store i1 %30, i1* %4
	br label %if.done-2

if.done-2:
	; IfStmt
	%31 = load i1, i1* %4, align 1
	br i1 %31, label %if.done-4, label %if.then-3

if.then-3:
	; ReturnStmt
	; SelectorExpr
	%32 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%33 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %33, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	ret i64 %35

if.done-4:
	; data
	store i8* zeroinitializer, i8** %6
		; SelectorExpr
	%36 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%37 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %36, i64 0
	%38 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %37, i64 0, i32 0
	%39 = load %..rawptr, %..rawptr* %38, align 8
	; cast - cast
	%40 = bitcast %..rawptr %39 to i8*
	store i8* %40, i8** %6
	; assert
	%41 = load i8*, i8** %6, align 8
	%42 = icmp ne i8* %41, zeroinitializer
	%43 = icmp eq i1 %42, false
	br i1 %43, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$12, i64 0, i32 0), i64 30}, i64 518, i64 9, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$13, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	%44 = load i8*, i8** %6, align 8
	%45 = load i64, i64* %1, align 8
	; SelectorExpr
	%46 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%47 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %46, i64 0
	%48 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %47, i64 0, i32 1
	%49 = load i64, i64* %48, align 8
	%50 = mul i64 %45, %49
	%51 = getelementptr inbounds i8, i8* %44, i64 %50
	%52 = load i64, i64* %1, align 8
	%53 = bitcast i8* %51 to %..rawptr
	%54 = call %..rawptr @.__mem_zero(%..rawptr %53, i64 %52)
	; SelectorExpr
	%55 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%56 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %55, i64 0
	%57 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %56, i64 0, i32 1
	%58 = load i64, i64* %57, align 8
	%59 = add i64 %58, 1
	store i64 %59, i64* %57
	; ReturnStmt
	; SelectorExpr
	%60 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %3, align 8
	%61 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	ret i64 %63
}

define i64 @.__slice_append(%..rawptr %slice_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca i64, align 8
	%5 = alloca %raw-6.Slice*, align 8
	%6 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %slice_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %items, %..rawptr* %3
	store i64 zeroinitializer, i64* %4
		store i64 %item_count, i64* %4
	; slice
	store %raw-6.Slice* zeroinitializer, %raw-6.Slice** %5
		%7 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%8 = bitcast %..rawptr %7 to %raw-6.Slice*
	store %raw-6.Slice* %8, %raw-6.Slice** %5
	; IfStmt
	%9 = load i64, i64* %4, align 8
	%10 = icmp sle i64 %9, 0
	br i1 %10, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%11 = load %..rawptr, %..rawptr* %3, align 8
	%12 = icmp eq %..rawptr %11, zeroinitializer
	br i1 %12, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%13 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%14 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %13, i64 0
	%15 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	ret i64 %16

if.done-3:
	; AssignStmt
	; min
	; SelectorExpr
	%17 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%18 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %17, i64 0
	%19 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	; SelectorExpr
	%21 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%22 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %21, i64 0
	%23 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %22, i64 0, i32 1
	%24 = load i64, i64* %23, align 8
	%25 = sub i64 %20, %24
	%26 = load i64, i64* %4, align 8
	%27 = icmp slt i64 %25, %26
	%28 = select i1 %27, i64 %25, i64 %26
	store i64 %28, i64* %4
	; IfStmt
	%29 = load i64, i64* %4, align 8
	%30 = icmp sgt i64 %29, 0
	br i1 %30, label %if.then-4, label %if.done-7

if.then-4:
	; data
	store i8* zeroinitializer, i8** %6
		; SelectorExpr
	%31 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%32 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %31, i64 0
	%33 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %32, i64 0, i32 0
	%34 = load %..rawptr, %..rawptr* %33, align 8
	; cast - cast
	%35 = bitcast %..rawptr %34 to i8*
	store i8* %35, i8** %6
	; assert
	%36 = load i8*, i8** %6, align 8
	%37 = icmp ne i8* %36, zeroinitializer
	%38 = icmp eq i1 %37, false
	br i1 %38, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$14, i64 0, i32 0), i64 30}, i64 535, i64 10, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$15, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	%39 = load i8*, i8** %6, align 8
	%40 = load i64, i64* %1, align 8
	; SelectorExpr
	%41 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%42 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %41, i64 0
	%43 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	%45 = mul i64 %40, %44
	%46 = getelementptr inbounds i8, i8* %39, i64 %45
	%47 = load %..rawptr, %..rawptr* %3, align 8
	%48 = load i64, i64* %1, align 8
	%49 = load i64, i64* %4, align 8
	%50 = mul i64 %48, %49
	%51 = bitcast i8* %46 to %..rawptr
	%52 = call %..rawptr @.__mem_copy(%..rawptr %51, %..rawptr %47, i64 %50)
	; AssignStmt
	; SelectorExpr
	%53 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%54 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %53, i64 0
	%55 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %54, i64 0, i32 1
	%56 = load i64, i64* %4, align 8
	%57 = load i64, i64* %55, align 8
	%58 = add i64 %57, %56
	store i64 %58, i64* %55
	br label %if.done-7

if.done-7:
	; ReturnStmt
	; SelectorExpr
	%59 = load %raw-6.Slice*, %raw-6.Slice** %5, align 8
	%60 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %59, i64 0
	%61 = getelementptr inbounds %raw-6.Slice, %raw-6.Slice* %60, i64 0, i32 1
	%62 = load i64, i64* %61, align 8
	ret i64 %62
}

define i64 @.__default_hash({i8*, i64, i64} %data) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %0
	; ReturnStmt
	%1 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%2 = call i64 @.__default_hash.fnv64a-0({i8*, i64, i64} %1)
	ret i64 %2
}

define i64 @.__default_hash.fnv64a-0({i8*, i64, i64} %data) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %0
	; h
	store i64 zeroinitializer, i64* %1
		store i64 -3750763034362895579, i64* %1
	; RangeStmt
	; b
	store i8 zeroinitializer, i8* %2
		%5 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	store i64 zeroinitializer, i64* %3
	%6 = extractvalue {i8*, i64, i64} %5, 1
	store i64 %6, i64* %3
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%7 = load i64, i64* %4, align 8
	%8 = add i64 %7, 1
	store i64 %8, i64* %4
	%9 = load i64, i64* %3, align 8
	%10 = icmp slt i64 %8, %9
	br i1 %10, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%11 = load i64, i64* %4, align 8
	%12 = extractvalue {i8*, i64, i64} %5, 0
	%13 = getelementptr inbounds i8, i8* %12, i64 %11
	%14 = load i8, i8* %13, align 1
	store i8 %14, i8* %2
	; AssignStmt
	%15 = load i64, i64* %1, align 8
	%16 = load i8, i8* %2, align 1
	; cast - cast
	%17 = zext i8 %16 to i64
	%18 = xor i64 %15, %17
	%19 = mul i64 %18, 1099511628211
	store i64 %19, i64* %1
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%20 = load i64, i64* %1, align 8
	ret i64 %20
}

define i64 @.__default_hash_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%3 = load %..string, %..string* %0, align 8
	; cast - cast
	%4 = extractvalue %..string %3, 0
	store i8* zeroinitializer, i8** %1
	store i8* %4, i8** %1
	%5 = extractvalue %..string %3, 1
	%6 = sub i64 %5, 0
	%7 = sub i64 %5, 0
	%8 = load i8*, i8** %1, align 8
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %6, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = call i64 @.__default_hash({i8*, i64, i64} %13)
	ret i64 %14
}

define void @.__dynamic_map_reserve(%__Map_Header %header, i64 %cap) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %header, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %cap, i64* %1
	; SelectorExpr
	%2 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%3 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %2, align 8
	%4 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0
	%5 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %4, i64 0, i32 0
	%6 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %5, i64 0
	%7 = load i64, i64* %1, align 8
	%8 = bitcast {i64*, i64, i64,%Allocator}* %6 to %..rawptr
	%9 = call i1 @.__dynamic_array_reserve(%..rawptr %8, i64 8, i64 8, i64 %7)
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%11 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %10, align 8
	%12 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %11, i64 0
	%13 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %12, i64 0, i32 1
	%14 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %13, i64 0
	%15 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%16 = load i64, i64* %15, align 8
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%18 = load i64, i64* %17, align 8
	%19 = load i64, i64* %1, align 8
	%20 = bitcast %raw-6.Dynamic_Array* %14 to %..rawptr
	%21 = call i1 @.__dynamic_array_reserve(%..rawptr %20, i64 %16, i64 %18, i64 %19)
	ret void
}

define void @.__dynamic_map_rehash(%__Map_Header %header, i64 %new_count) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca %__Map_Header, align 8
	%3 = alloca %raw-6.Dynamic_Map, align 8
	%4 = alloca %raw-6.Dynamic_Array*, align 8
	%5 = alloca %raw-6.Dynamic_Array*, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	%10 = alloca %__Map_Entry_Header*, align 8
	%11 = alloca i8*, align 8
	%12 = alloca %__Map_Find_Result, align 8
	%13 = alloca i64, align 8
	%14 = alloca %__Map_Entry_Header*, align 8
	%15 = alloca %__Map_Entry_Header*, align 8
	%16 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %header, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %new_count, i64* %1
	; new_header
	store %__Map_Header zeroinitializer, %__Map_Header* %2
		%17 = load %__Map_Header, %__Map_Header* %0, align 8
	store %__Map_Header %17, %__Map_Header* %2
	; nm
	store %raw-6.Dynamic_Map zeroinitializer, %raw-6.Dynamic_Map* %3
		; AssignStmt
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%19 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0
	store %raw-6.Dynamic_Map* %19, %raw-6.Dynamic_Map** %18
	; header_hashes
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %4
		; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%21 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %20, align 8
	%22 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %21, i64 0
	%23 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %22, i64 0, i32 0
	%24 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %23, i64 0
	; cast - cast
	%25 = bitcast {i64*, i64, i64,%Allocator}* %24 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %25, %raw-6.Dynamic_Array** %4
	; nm_hashes
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %5
		; SelectorExpr
	%26 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0, i32 0
	%27 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %26, i64 0
	; cast - cast
	%28 = bitcast {i64*, i64, i64,%Allocator}* %27 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %28, %raw-6.Dynamic_Array** %5
	%29 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %5, align 8
	%30 = load i64, i64* %1, align 8
	%31 = bitcast %raw-6.Dynamic_Array* %29 to %..rawptr
	%32 = call i1 @.__dynamic_array_resize(%..rawptr %31, i64 8, i64 8, i64 %30)
	; SelectorExpr
	%33 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0, i32 1
	%34 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %33, i64 0
	%35 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%38 = load i64, i64* %37, align 8
	; SelectorExpr
	; SelectorExpr
	%39 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%40 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %39, align 8
	%41 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %40, i64 0
	%42 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %41, i64 0, i32 1
	%43 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	%45 = bitcast %raw-6.Dynamic_Array* %34 to %..rawptr
	%46 = call i1 @.__dynamic_array_reserve(%..rawptr %45, i64 %36, i64 %38, i64 %44)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %6
		store i64 zeroinitializer, i64* %7
	store i64 0, i64* %7
	store i64 zeroinitializer, i64* %8
	store i64 0, i64* %8
	br label %for.interval.loop-1

for.interval.loop-1:
	%47 = load i64, i64* %1, align 8
	%48 = load i64, i64* %7, align 8
	%49 = icmp slt i64 %48, %47
	br i1 %49, label %for.interval.body-2, label %for.interval.done-3

for.interval.body-2:
	%50 = load i64, i64* %7, align 8
	%51 = load i64, i64* %8, align 8
	%52 = load i64, i64* %7, align 8
	%53 = add i64 %52, 1
	store i64 %53, i64* %7
	%54 = load i64, i64* %8, align 8
	%55 = add i64 %54, 1
	store i64 %55, i64* %8
	store i64 %50, i64* %6
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%56 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0, i32 0
	%57 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %56, align 8
	%58 = extractvalue {i64*, i64, i64,%Allocator} %57, 0
	%59 = extractvalue {i64*, i64, i64,%Allocator} %57, 1
	%60 = load i64, i64* %6, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$16, i64 0, i32 0), i64 30}, i64 605, i64 13, i64 %60, i64 %59)
	%61 = getelementptr inbounds i64, i64* %58, i64 %60
	store i64 -1, i64* %61
	br label %for.interval.loop-1

for.interval.done-3:
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %9
		store i64 0, i64* %9
	br label %for.loop-4

for.loop-4:
	%62 = load i64, i64* %9, align 8
	; SelectorExpr
	; SelectorExpr
	%63 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%64 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %63, align 8
	%65 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %64, i64 0
	%66 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %65, i64 0, i32 1
	%67 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %66, i64 0, i32 1
	%68 = load i64, i64* %67, align 8
	%69 = icmp slt i64 %62, %68
	br i1 %69, label %for.body-5, label %for.done-13

for.body-5:
	; IfStmt
	; SelectorExpr
	%70 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0, i32 0
	%71 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %70, align 8
	%72 = extractvalue {i64*, i64, i64,%Allocator} %71, 1
	%73 = icmp eq i64 %72, 0
	br i1 %73, label %if.then-6, label %if.done-7

if.then-6:
	%74 = load %__Map_Header, %__Map_Header* %2, align 8
	call void @.__dynamic_map_grow(%__Map_Header %74)
	br label %if.done-7

if.done-7:
	; entry_header
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %10
		%75 = load %__Map_Header, %__Map_Header* %0, align 8
	%76 = load i64, i64* %9, align 8
	%77 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %75, i64 %76)
	store %__Map_Entry_Header* %77, %__Map_Entry_Header** %10
	; data
	store i8* zeroinitializer, i8** %11
		%78 = load %__Map_Entry_Header*, %__Map_Entry_Header** %10, align 8
	; cast - cast
	%79 = bitcast %__Map_Entry_Header* %78 to i8*
	store i8* %79, i8** %11
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %12
		%80 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%81 = load %__Map_Entry_Header*, %__Map_Entry_Header** %10, align 8
	%82 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %81, i64 0
	%83 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %82, i64 0, i32 0
	%84 = load %__Map_Key, %__Map_Key* %83, align 8
	%85 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %80, %__Map_Key %84)
	store %__Map_Find_Result %85, %__Map_Find_Result* %12
	; j
	store i64 zeroinitializer, i64* %13
		%86 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%87 = load %__Map_Entry_Header*, %__Map_Entry_Header** %10, align 8
	%88 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %87, i64 0
	%89 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %88, i64 0, i32 0
	%90 = load %__Map_Key, %__Map_Key* %89, align 8
	%91 = call i64 @.__dynamic_map_add_entry(%__Map_Header %86, %__Map_Key %90)
	store i64 %91, i64* %13
	; IfStmt
	; SelectorExpr
	%92 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %12, i64 0, i32 1
	%93 = load i64, i64* %92, align 8
	%94 = icmp slt i64 %93, 0
	br i1 %94, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%95 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0, i32 0
	%96 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %95, align 8
	%97 = extractvalue {i64*, i64, i64,%Allocator} %96, 0
	%98 = extractvalue {i64*, i64, i64,%Allocator} %96, 1
	; SelectorExpr
	%99 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %12, i64 0, i32 0
	%100 = load i64, i64* %99, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$17, i64 0, i32 0), i64 30}, i64 619, i64 17, i64 %100, i64 %98)
	%101 = getelementptr inbounds i64, i64* %97, i64 %100
	%102 = load i64, i64* %13, align 8
	store i64 %102, i64* %101
	br label %if.done-10

if.else-9:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %14
		%103 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%104 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %12, i64 0, i32 1
	%105 = load i64, i64* %104, align 8
	%106 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %103, i64 %105)
	store %__Map_Entry_Header* %106, %__Map_Entry_Header** %14
	; AssignStmt
	; SelectorExpr
	%107 = load %__Map_Entry_Header*, %__Map_Entry_Header** %14, align 8
	%108 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %107, i64 0
	%109 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %108, i64 0, i32 1
	%110 = load i64, i64* %13, align 8
	store i64 %110, i64* %109
	br label %if.done-10

if.done-10:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %15
		%111 = load %__Map_Header, %__Map_Header* %2, align 8
	%112 = load i64, i64* %13, align 8
	%113 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %111, i64 %112)
	store %__Map_Entry_Header* %113, %__Map_Entry_Header** %15
	; AssignStmt
	; SelectorExpr
	%114 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	%115 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %114, i64 0
	%116 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %115, i64 0, i32 1
	; SelectorExpr
	%117 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %12, i64 0, i32 2
	%118 = load i64, i64* %117, align 8
	store i64 %118, i64* %116
	; ndata
	store i8* zeroinitializer, i8** %16
		%119 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	; cast - cast
	%120 = bitcast %__Map_Entry_Header* %119 to i8*
	store i8* %120, i8** %16
	%121 = load i8*, i8** %16, align 8
	%122 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%123 = load i64, i64* %122, align 8
	%124 = getelementptr inbounds i8, i8* %121, i64 %123
	%125 = load i8*, i8** %11, align 8
	%126 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%127 = load i64, i64* %126, align 8
	%128 = getelementptr inbounds i8, i8* %125, i64 %127
	%129 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 5
	%130 = load i64, i64* %129, align 8
	%131 = bitcast i8* %124 to %..rawptr
	%132 = bitcast i8* %128 to %..rawptr
	%133 = call %..rawptr @.__mem_copy(%..rawptr %131, %..rawptr %132, i64 %130)
	; IfStmt
	%134 = load %__Map_Header, %__Map_Header* %2, align 8
	%135 = call i1 @.__dynamic_map_full(%__Map_Header %134)
	br i1 %135, label %if.then-11, label %if.done-12

if.then-11:
	%136 = load %__Map_Header, %__Map_Header* %2, align 8
	call void @.__dynamic_map_grow(%__Map_Header %136)
	br label %if.done-12

if.done-12:
	%137 = load i64, i64* %9, align 8
	%138 = add i64 %137, 1
	store i64 %138, i64* %9
	br label %for.loop-4

for.done-13:
	; SelectorExpr
	%139 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%140 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %139, i64 0
	%141 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %140, i64 0, i32 3
	%142 = load %Allocator, %Allocator* %141, align 8
	; SelectorExpr
	%143 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %4, align 8
	%144 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %143, i64 0
	%145 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %144, i64 0, i32 0
	%146 = load %..rawptr, %..rawptr* %145, align 8
	call void @.free_ptr_with_allocator(%Allocator %142, %..rawptr %146)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%147 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%148 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %147, align 8
	%149 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %148, i64 0
	%150 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %149, i64 0, i32 1
	%151 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %150, i64 0, i32 3
	%152 = load %Allocator, %Allocator* %151, align 8
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%153 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%154 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %153, align 8
	%155 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %154, i64 0
	%156 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %155, i64 0, i32 1
	%157 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %156, i64 0, i32 0
	%158 = load %..rawptr, %..rawptr* %157, align 8
	call void @.free_ptr_with_allocator(%Allocator %152, %..rawptr %158)
	; AssignStmt
	; SelectorExpr
	%159 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%160 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %159, align 8
	%161 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %160, i64 0
	%162 = load %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, align 8
	store %raw-6.Dynamic_Map %162, %raw-6.Dynamic_Map* %161
	ret void
}

define %..rawptr @.__dynamic_map_get(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca i64, align 8
	%3 = alloca %__Map_Find_Result, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; index
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%6 = load %__Map_Header, %__Map_Header* %0, align 8
	%7 = load %__Map_Key, %__Map_Key* %1, align 8
	%8 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %6, %__Map_Key %7)
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %3
	store %__Map_Find_Result %8, %__Map_Find_Result* %3
	%9 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %3, i64 0, i32 2
	%10 = load i64, i64* %9, align 8
	store i64 %10, i64* %2
	; IfStmt
	%11 = load i64, i64* %2, align 8
	%12 = icmp sge i64 %11, 0
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; data
	store i8* zeroinitializer, i8** %4
		%13 = load %__Map_Header, %__Map_Header* %0, align 8
	%14 = load i64, i64* %2, align 8
	%15 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %13, i64 %14)
	; cast - cast
	%16 = bitcast %__Map_Entry_Header* %15 to i8*
	store i8* %16, i8** %4
	; val
	store i8* zeroinitializer, i8** %5
		%17 = load i8*, i8** %4, align 8
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%19 = load i64, i64* %18, align 8
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	store i8* %20, i8** %5
	; ReturnStmt
	%21 = load i8*, i8** %5, align 8
	%22 = bitcast i8* %21 to %..rawptr
	ret %..rawptr %22

if.done-2:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define void @.__dynamic_map_set(%__Map_Header %h, %__Map_Key %key, %..rawptr %value) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %..rawptr, align 8
	%3 = alloca i64, align 8
	%4 = alloca %__Map_Find_Result, align 8
	%5 = alloca %__Map_Entry_Header*, align 8
	%6 = alloca %__Map_Entry_Header*, align 8
	%7 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	store %..rawptr zeroinitializer, %..rawptr* %2
		store %..rawptr %value, %..rawptr* %2
	; index
	store i64 zeroinitializer, i64* %3
		; assert
	%8 = load %..rawptr, %..rawptr* %2, align 8
	%9 = icmp ne %..rawptr %8, zeroinitializer
	%10 = icmp eq i1 %9, false
	br i1 %10, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$18, i64 0, i32 0), i64 30}, i64 651, i64 9, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$19, i64 0, i32 0), i64 12})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; IfStmt
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %13, i64 0, i32 0
	%15 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %14, align 8
	%16 = extractvalue {i64*, i64, i64,%Allocator} %15, 1
	%17 = icmp eq i64 %16, 0
	br i1 %17, label %if.then-3, label %if.done-4

if.then-3:
	%18 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_reserve(%__Map_Header %18, i64 16)
	%19 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_grow(%__Map_Header %19)
	br label %if.done-4

if.done-4:
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %4
		%20 = load %__Map_Header, %__Map_Header* %0, align 8
	%21 = load %__Map_Key, %__Map_Key* %1, align 8
	%22 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %20, %__Map_Key %21)
	store %__Map_Find_Result %22, %__Map_Find_Result* %4
	; IfStmt
	; SelectorExpr
	%23 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 2
	%24 = load i64, i64* %23, align 8
	%25 = icmp sge i64 %24, 0
	br i1 %25, label %if.then-5, label %if.else-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 2
	%27 = load i64, i64* %26, align 8
	store i64 %27, i64* %3
	br label %if.done-10

if.else-6:
	; AssignStmt
	%28 = load %__Map_Header, %__Map_Header* %0, align 8
	%29 = load %__Map_Key, %__Map_Key* %1, align 8
	%30 = call i64 @.__dynamic_map_add_entry(%__Map_Header %28, %__Map_Key %29)
	store i64 %30, i64* %3
	; IfStmt
	; SelectorExpr
	%31 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 1
	%32 = load i64, i64* %31, align 8
	%33 = icmp sge i64 %32, 0
	br i1 %33, label %if.then-7, label %if.else-8

if.then-7:
	; entry
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %5
		%34 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%35 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 1
	%36 = load i64, i64* %35, align 8
	%37 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %34, i64 %36)
	store %__Map_Entry_Header* %37, %__Map_Entry_Header** %5
	; AssignStmt
	; SelectorExpr
	%38 = load %__Map_Entry_Header*, %__Map_Entry_Header** %5, align 8
	%39 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %38, i64 0
	%40 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %39, i64 0, i32 1
	%41 = load i64, i64* %3, align 8
	store i64 %41, i64* %40
	br label %if.done-9

if.else-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%42 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%43 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %42, align 8
	%44 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %43, i64 0
	%45 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %44, i64 0, i32 0
	%46 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %45, align 8
	%47 = extractvalue {i64*, i64, i64,%Allocator} %46, 0
	%48 = extractvalue {i64*, i64, i64,%Allocator} %46, 1
	; SelectorExpr
	%49 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 0
	%50 = load i64, i64* %49, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$1a, i64 0, i32 0), i64 30}, i64 668, i64 16, i64 %50, i64 %48)
	%51 = getelementptr inbounds i64, i64* %47, i64 %50
	%52 = load i64, i64* %3, align 8
	store i64 %52, i64* %51
	br label %if.done-9

if.done-9:
	br label %if.done-10

if.done-10:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %6
		%53 = load %__Map_Header, %__Map_Header* %0, align 8
	%54 = load i64, i64* %3, align 8
	%55 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %53, i64 %54)
	store %__Map_Entry_Header* %55, %__Map_Entry_Header** %6
	; AssignStmt
	; SelectorExpr
	%56 = load %__Map_Entry_Header*, %__Map_Entry_Header** %6, align 8
	%57 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %56, i64 0
	%58 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %57, i64 0, i32 0
	%59 = load %__Map_Key, %__Map_Key* %1, align 8
	store %__Map_Key %59, %__Map_Key* %58
	; val
	store i8* zeroinitializer, i8** %7
		%60 = load %__Map_Entry_Header*, %__Map_Entry_Header** %6, align 8
	; cast - cast
	%61 = bitcast %__Map_Entry_Header* %60 to i8*
	%62 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%63 = load i64, i64* %62, align 8
	%64 = getelementptr inbounds i8, i8* %61, i64 %63
	store i8* %64, i8** %7
	%65 = load i8*, i8** %7, align 8
	%66 = load %..rawptr, %..rawptr* %2, align 8
	%67 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 5
	%68 = load i64, i64* %67, align 8
	%69 = bitcast i8* %65 to %..rawptr
	%70 = call %..rawptr @.__mem_copy(%..rawptr %69, %..rawptr %66, i64 %68)
	; IfStmt
	%71 = load %__Map_Header, %__Map_Header* %0, align 8
	%72 = call i1 @.__dynamic_map_full(%__Map_Header %71)
	br i1 %72, label %if.then-11, label %if.done-12

if.then-11:
	%73 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_grow(%__Map_Header %73)
	br label %if.done-12

if.done-12:
	ret void
}

define void @.__dynamic_map_grow(%__Map_Header %h) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	; new_count
	store i64 zeroinitializer, i64* %1
		; max
	; SelectorExpr
	; SelectorExpr
	%2 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%3 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %2, align 8
	%4 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0
	%5 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %4, i64 0, i32 1
	%6 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %5, i64 0, i32 2
	%7 = load i64, i64* %6, align 8
	%8 = mul i64 2, %7
	%9 = add i64 %8, 8
	%10 = icmp sgt i64 %9, 16
	%11 = select i1 %10, i64 %9, i64 16
	store i64 %11, i64* %1
	%12 = load %__Map_Header, %__Map_Header* %0, align 8
	%13 = load i64, i64* %1, align 8
	call void @.__dynamic_map_rehash(%__Map_Header %12, i64 %13)
	ret void
}

define i1 @.__dynamic_map_full(%__Map_Header %h) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	; ReturnStmt
	; SelectorExpr
	%1 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%2 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %1, align 8
	%3 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %2, i64 0
	%4 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %3, i64 0, i32 0
	%5 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %4, align 8
	%6 = extractvalue {i64*, i64, i64,%Allocator} %5, 1
	; cast - cast
	%7 = sitofp i64 %6 to double
	%8 = fmul double 0x3fe8000000000000, %7
	; cast - cast
	%9 = fptosi double %8 to i64
	; SelectorExpr
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%11 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %10, align 8
	%12 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %11, i64 0
	%13 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %12, i64 0, i32 1
	%14 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %13, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %9, %15
	ret i1 %16
}

define i1 @.__dynamic_map_hash_equal(%__Map_Header %h, %__Map_Key %a, %__Map_Key %b) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Key, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %a, %__Map_Key* %1
	store %__Map_Key zeroinitializer, %__Map_Key* %2
		store %__Map_Key %b, %__Map_Key* %2
	; IfStmt
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Key, %__Map_Key* %2, i64 0, i32 0
	%6 = load i64, i64* %5, align 8
	%7 = icmp eq i64 %4, %6
	br i1 %7, label %if.then-1, label %if.done-4

if.then-1:
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 1
	%9 = load i1, i1* %8, align 1
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 1
	%11 = load %..string, %..string* %10, align 8
	; SelectorExpr
	%12 = getelementptr inbounds %__Map_Key, %__Map_Key* %2, i64 0, i32 1
	%13 = load %..string, %..string* %12, align 8
	%14 = call i1 @.__string_eq(%..string %11, %..string %13)
	ret i1 %14

if.done-3:
	; ReturnStmt
	ret i1 true

if.done-4:
	; ReturnStmt
	ret i1 false
}

define %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Find_Result, align 8
	%3 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %2
		store %__Map_Find_Result {i64 -1, i64 -1, i64 -1}, %__Map_Find_Result* %2
	; IfStmt
	; SelectorExpr
	%4 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%5 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %4, align 8
	%6 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %5, i64 0
	%7 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %6, i64 0, i32 0
	%8 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %7, align 8
	%9 = extractvalue {i64*, i64, i64,%Allocator} %8, 1
	%10 = icmp sgt i64 %9, 0
	br i1 %10, label %if.then-1, label %if.done-7

if.then-1:
	; AssignStmt
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 0
	; SelectorExpr
	%12 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 0
	%13 = load i64, i64* %12, align 8
	; SelectorExpr
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%15 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %14, align 8
	%16 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %15, i64 0
	%17 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %16, i64 0, i32 0
	%18 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %17, align 8
	%19 = extractvalue {i64*, i64, i64,%Allocator} %18, 1
	; cast - cast
	%20 = bitcast i64 %19 to i64
	%21 = urem i64 %13, %20
	; cast - cast
	%22 = bitcast i64 %21 to i64
	store i64 %22, i64* %11
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	; IndexExpr
	; SelectorExpr
	%24 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%25 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %24, align 8
	%26 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %25, i64 0
	%27 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %26, i64 0, i32 0
	%28 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %27, align 8
	%29 = extractvalue {i64*, i64, i64,%Allocator} %28, 0
	%30 = extractvalue {i64*, i64, i64,%Allocator} %28, 1
	; SelectorExpr
	%31 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 0
	%32 = load i64, i64* %31, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$1b, i64 0, i32 0), i64 30}, i64 708, i64 32, i64 %32, i64 %30)
	%33 = getelementptr inbounds i64, i64* %29, i64 %32
	%34 = load i64, i64* %33, align 8
	store i64 %34, i64* %23
	; ForStmt
	br label %for.loop-2

for.loop-2:
	; SelectorExpr
	%35 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = icmp sge i64 %36, 0
	br i1 %37, label %for.body-3, label %for.done-6

for.body-3:
	; entry
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
		%38 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%39 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%40 = load i64, i64* %39, align 8
	%41 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %38, i64 %40)
	store %__Map_Entry_Header* %41, %__Map_Entry_Header** %3
	; IfStmt
	%42 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%43 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%44 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %43, i64 0
	%45 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %44, i64 0, i32 0
	%46 = load %__Map_Key, %__Map_Key* %45, align 8
	%47 = load %__Map_Key, %__Map_Key* %1, align 8
	%48 = call i1 @.__dynamic_map_hash_equal(%__Map_Header %42, %__Map_Key %46, %__Map_Key %47)
	br i1 %48, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	%49 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	ret %__Map_Find_Result %49

if.done-5:
	; AssignStmt
	; SelectorExpr
	%50 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 1
	; SelectorExpr
	%51 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %50
	; AssignStmt
	; SelectorExpr
	%53 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	; SelectorExpr
	%54 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%55 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %54, i64 0
	%56 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %55, i64 0, i32 1
	%57 = load i64, i64* %56, align 8
	store i64 %57, i64* %53
	br label %for.loop-2

for.done-6:
	br label %if.done-7

if.done-7:
	; ReturnStmt
	%58 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	ret %__Map_Find_Result %58
}

define i64 @.__dynamic_map_add_entry(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; prev
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%6 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %5, align 8
	%7 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %6, i64 0
	%8 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %7, i64 0, i32 1
	%9 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	store i64 %10, i64* %2
	; c
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %13, i64 0, i32 1
	%15 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %14, i64 0
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%17 = load i64, i64* %16, align 8
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%19 = load i64, i64* %18, align 8
	%20 = bitcast %raw-6.Dynamic_Array* %15 to %..rawptr
	%21 = call i64 @.__dynamic_array_append_nothing(%..rawptr %20, i64 %17, i64 %19)
	store i64 %21, i64* %3
	; IfStmt
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %2, align 8
	%24 = icmp ne i64 %22, %23
	br i1 %24, label %if.then-1, label %if.done-2

if.then-1:
	; end
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %4
		%25 = load %__Map_Header, %__Map_Header* %0, align 8
	%26 = load i64, i64* %3, align 8
	%27 = sub i64 %26, 1
	%28 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %25, i64 %27)
	store %__Map_Entry_Header* %28, %__Map_Entry_Header** %4
	; AssignStmt
	; SelectorExpr
	%29 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%30 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %29, i64 0
	%31 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %30, i64 0, i32 0
	%32 = load %__Map_Key, %__Map_Key* %1, align 8
	store %__Map_Key %32, %__Map_Key* %31
	; AssignStmt
	; SelectorExpr
	%33 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%34 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %33, i64 0
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0, i32 1
	store i64 -1, i64* %35
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%36 = load i64, i64* %2, align 8
	ret i64 %36
}

define void @.__dynamic_map_delete(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Find_Result, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %2
		%3 = load %__Map_Header, %__Map_Header* %0, align 8
	%4 = load %__Map_Key, %__Map_Key* %1, align 8
	%5 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %3, %__Map_Key %4)
	store %__Map_Find_Result %5, %__Map_Find_Result* %2
	; IfStmt
	; SelectorExpr
	%6 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%7 = load i64, i64* %6, align 8
	%8 = icmp sge i64 %7, 0
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	%9 = load %__Map_Header, %__Map_Header* %0, align 8
	%10 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	call void @.__dynamic_map_erase(%__Map_Header %9, %__Map_Find_Result %10)
	br label %if.done-2

if.done-2:
	ret void
}

define %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %h, i64 %index) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %index, i64* %1
	; data
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%4 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %3, align 8
	%5 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %4, i64 0
	%6 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %5, i64 0, i32 1
	%7 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %6, i64 0, i32 0
	%8 = load %..rawptr, %..rawptr* %7, align 8
	; cast - cast
	%9 = bitcast %..rawptr %8 to i8*
	%10 = load i64, i64* %1, align 8
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%12 = load i64, i64* %11, align 8
	%13 = mul i64 %10, %12
	%14 = getelementptr inbounds i8, i8* %9, i64 %13
	store i8* %14, i8** %2
	; ReturnStmt
	%15 = load i8*, i8** %2, align 8
	; cast - cast
	%16 = bitcast i8* %15 to %__Map_Entry_Header*
	ret %__Map_Entry_Header* %16
}

define void @.__dynamic_map_erase(%__Map_Header %h, %__Map_Find_Result %fr) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Find_Result, align 8
	%2 = alloca %__Map_Entry_Header*, align 8
	%3 = alloca %__Map_Entry_Header*, align 8
	%4 = alloca %__Map_Entry_Header*, align 8
	%5 = alloca %__Map_Find_Result, align 8
	%6 = alloca %__Map_Entry_Header*, align 8
	%7 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %1
		store %__Map_Find_Result %fr, %__Map_Find_Result* %1
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 1
	%9 = load i64, i64* %8, align 8
	%10 = icmp slt i64 %9, 0
	br i1 %10, label %if.then-1, label %if.else-2

if.then-1:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %13, i64 0, i32 0
	%15 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %14, align 8
	%16 = extractvalue {i64*, i64, i64,%Allocator} %15, 0
	%17 = extractvalue {i64*, i64, i64,%Allocator} %15, 1
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 0
	%19 = load i64, i64* %18, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$1c, i64 0, i32 0), i64 30}, i64 747, i64 15, i64 %19, i64 %17)
	%20 = getelementptr inbounds i64, i64* %16, i64 %19
	; SelectorExpr
	%21 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%22 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%23 = load i64, i64* %22, align 8
	%24 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %21, i64 %23)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %2
	store %__Map_Entry_Header* %24, %__Map_Entry_Header** %2
	%25 = load %__Map_Entry_Header*, %__Map_Entry_Header** %2, align 8
	%26 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %25, i64 0
	%27 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %26, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	store i64 %28, i64* %20
	br label %if.done-3

if.else-2:
	; AssignStmt
	; SelectorExpr
	%29 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%30 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 1
	%31 = load i64, i64* %30, align 8
	%32 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %29, i64 %31)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
	store %__Map_Entry_Header* %32, %__Map_Entry_Header** %3
	%33 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%34 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %33, i64 0
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0, i32 1
	; SelectorExpr
	%36 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%37 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %36, i64 %38)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %4
	store %__Map_Entry_Header* %39, %__Map_Entry_Header** %4
	%40 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%41 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %40, i64 0
	%42 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %41, i64 0, i32 1
	%43 = load i64, i64* %42, align 8
	store i64 %43, i64* %35
	br label %if.done-3

if.done-3:
	; IfStmt
	; SelectorExpr
	%44 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%45 = load i64, i64* %44, align 8
	; SelectorExpr
	; SelectorExpr
	%46 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%47 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %46, align 8
	%48 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %47, i64 0
	%49 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %48, i64 0, i32 1
	%50 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %49, i64 0, i32 1
	%51 = load i64, i64* %50, align 8
	%52 = sub i64 %51, 1
	%53 = icmp eq i64 %45, %52
	br i1 %53, label %if.then-4, label %if.done-5

if.then-4:
	; SelectorExpr
	; SelectorExpr
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%55 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %54, align 8
	%56 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %55, i64 0
	%57 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %56, i64 0, i32 1
	%58 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %57, i64 0, i32 1
	%59 = load i64, i64* %58, align 8
	%60 = sub i64 %59, 1
	store i64 %60, i64* %58
	br label %if.done-5

if.done-5:
	%61 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%63 = load i64, i64* %62, align 8
	%64 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %61, i64 %63)
	%65 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%66 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%67 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %66, align 8
	%68 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %67, i64 0
	%69 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %68, i64 0, i32 1
	%70 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %69, i64 0, i32 1
	%71 = load i64, i64* %70, align 8
	%72 = sub i64 %71, 1
	%73 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %65, i64 %72)
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%75 = load i64, i64* %74, align 8
	%76 = bitcast %__Map_Entry_Header* %64 to %..rawptr
	%77 = bitcast %__Map_Entry_Header* %73 to %..rawptr
	%78 = call %..rawptr @.__mem_copy(%..rawptr %76, %..rawptr %77, i64 %75)
	; last
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %5
		%79 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%80 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%81 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%82 = load i64, i64* %81, align 8
	%83 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %80, i64 %82)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %6
	store %__Map_Entry_Header* %83, %__Map_Entry_Header** %6
	%84 = load %__Map_Entry_Header*, %__Map_Entry_Header** %6, align 8
	%85 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %84, i64 0
	%86 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %85, i64 0, i32 0
	%87 = load %__Map_Key, %__Map_Key* %86, align 8
	%88 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %79, %__Map_Key %87)
	store %__Map_Find_Result %88, %__Map_Find_Result* %5
	; IfStmt
	; SelectorExpr
	%89 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 1
	%90 = load i64, i64* %89, align 8
	%91 = icmp sge i64 %90, 0
	br i1 %91, label %if.then-6, label %if.else-7

if.then-6:
	; AssignStmt
	; SelectorExpr
	%92 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%93 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 1
	%94 = load i64, i64* %93, align 8
	%95 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %92, i64 %94)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %7
	store %__Map_Entry_Header* %95, %__Map_Entry_Header** %7
	%96 = load %__Map_Entry_Header*, %__Map_Entry_Header** %7, align 8
	%97 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %96, i64 0
	%98 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %97, i64 0, i32 1
	; SelectorExpr
	%99 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%100 = load i64, i64* %99, align 8
	store i64 %100, i64* %98
	br label %if.done-8

if.else-7:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%102 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %101, align 8
	%103 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %102, i64 0
	%104 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %103, i64 0, i32 0
	%105 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %104, align 8
	%106 = extractvalue {i64*, i64, i64,%Allocator} %105, 0
	%107 = extractvalue {i64*, i64, i64,%Allocator} %105, 1
	; SelectorExpr
	%108 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 0
	%109 = load i64, i64* %108, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$1d, i64 0, i32 0), i64 30}, i64 760, i64 17, i64 %109, i64 %107)
	%110 = getelementptr inbounds i64, i64* %106, i64 %109
	; SelectorExpr
	%111 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%112 = load i64, i64* %111, align 8
	store i64 %112, i64* %110
	br label %if.done-8

if.done-8:
	ret void
}

define %..rawptr @.main-2.CreateWindow(%..rawptr %instance) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %windows-7.WndClassExA, align 4
	%2 = alloca i32, align 4
	%3 = alloca %windows-7.Rect, align 4
	%4 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %instance, %..rawptr* %0
	; wndClass
	store %windows-7.WndClassExA zeroinitializer, %windows-7.WndClassExA* %1
		; AssignStmt
	; SelectorExpr
	%5 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0, i32 0
	store i32 80, i32* %5
	; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0, i32 1
	store i32 35, i32* %6
	; AssignStmt
	; SelectorExpr
	%7 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0, i32 2
	store i64 (%..rawptr, i32, i64, i64)* @.main-2.WindowProc, i64 (%..rawptr, i32, i64, i64)** %7
	; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0, i32 5
	%9 = load %..rawptr, %..rawptr* %0, align 8
	store %..rawptr %9, %..rawptr* %8
	; AssignStmt
	; SelectorExpr
	%10 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0, i32 10
	; SelectorExpr
	%11 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1e, i64 0, i32 0), i64 10})
	store i8* %11, i8** %10
	; IfStmt
	%12 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0
	%13 = call ccc i16 @RegisterClassExA(%windows-7.WndClassExA* %12)
	%14 = icmp eq i16 %13, 0
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$1f, i64 0, i32 0), i64 31}, i64 43, i64 15, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$20, i64 0, i32 0), i64 24})
	br label %if.done-2

if.done-2:
	; windowStyle
	store i32 zeroinitializer, i32* %2
		store i32 282001408, i32* %2
	; clientRect
	store %windows-7.Rect zeroinitializer, %windows-7.Rect* %3
		store %windows-7.Rect {i32 0, i32 0, i32 1280, i32 720}, %windows-7.Rect* %3
	%15 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %3, i64 0
	%16 = load i32, i32* %2, align 4
	%17 = call ccc i32 @AdjustWindowRect(%windows-7.Rect* %15, i32 %16, i32 0)
	; windowHandle
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	%18 = getelementptr inbounds %windows-7.WndClassExA, %windows-7.WndClassExA* %1, i64 0, i32 10
	%19 = load i8*, i8** %18, align 8
	; SelectorExpr
	%20 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$21, i64 0, i32 0), i64 4})
	%21 = load i32, i32* %2, align 4
	; SelectorExpr
	%22 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %3, i64 0, i32 2
	%23 = load i32, i32* %22, align 4
	; SelectorExpr
	%24 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %3, i64 0, i32 0
	%25 = load i32, i32* %24, align 4
	%26 = sub i32 %23, %25
	; SelectorExpr
	%27 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %3, i64 0, i32 3
	%28 = load i32, i32* %27, align 4
	; SelectorExpr
	%29 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %3, i64 0, i32 1
	%30 = load i32, i32* %29, align 4
	%31 = sub i32 %28, %30
	%32 = load %..rawptr, %..rawptr* %0, align 8
	%33 = call ccc %..rawptr @CreateWindowExA(i32 0, i8* %19, i8* %20, i32 %21, i32 -2147483648, i32 -2147483648, i32 %26, i32 %31, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr %32, %..rawptr zeroinitializer)
	store %..rawptr %33, %..rawptr* %4
	; IfStmt
	%34 = load %..rawptr, %..rawptr* %4, align 8
	%35 = icmp eq %..rawptr %34, zeroinitializer
	br i1 %35, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$22, i64 0, i32 0), i64 31}, i64 64, i64 15, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$23, i64 0, i32 0), i64 23})
	br label %if.done-4

if.done-4:
	; ReturnStmt
	%36 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %36
}

define %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %vars, i1 %modern) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca i1, align 1
	%2 = alloca %windows-7.PIXELFORMATDESCRIPTOR, align 4
	%3 = alloca i32, align 4
	%4 = alloca %..rawptr, align 8
	%5 = alloca %..rawptr, align 8
	%6 = alloca %..rawptr, align 8
	%7 = alloca %..rawptr, align 8
	%8 = alloca %..rawptr, align 8
	%9 = alloca %jaze_wgl-15.TryGetExtensionList, align 8
	%10 = alloca {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, align 8
	%11 = alloca {%jaze_wgl-15.Attrib*, i64, i64}, align 8
	%12 = alloca [9 x %jaze_wgl-15.Attrib], align 4
	%13 = alloca {i32*, i64, i64,%Allocator}, align 8
	%14 = alloca i32, align 4
	%15 = alloca i32, align 4
	%16 = alloca i32, align 4
	%17 = alloca %windows-7.PIXELFORMATDESCRIPTOR, align 4
	%18 = alloca {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, align 8
	%19 = alloca {%jaze_wgl-15.Attrib*, i64, i64}, align 8
	%20 = alloca [4 x %jaze_wgl-15.Attrib], align 4
	%21 = alloca %..rawptr, align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	store i1 zeroinitializer, i1* %1
		store i1 %modern, i1* %1
	; IfStmt
	%22 = load i1, i1* %1, align 1
	br i1 %22, label %if.else-4, label %if.then-1

if.then-1:
	; pfd
	store %windows-7.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-7.PIXELFORMATDESCRIPTOR* %2
		store %windows-7.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-7.PIXELFORMATDESCRIPTOR* %2
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 0
	store i32 44, i32* %23
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 1
	store i32 1, i32* %24
	; AssignStmt
	; SelectorExpr
	%25 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 2
	store i32 37, i32* %25
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 4
	store i8 32, i8* %26
	; AssignStmt
	; SelectorExpr
	%27 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 11
	store i8 8, i8* %27
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 18
	store i8 24, i8* %28
	; format
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	; SelectorExpr
	%29 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%30 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %29, i64 0
	%31 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %30, i64 0, i32 4
	%32 = load %..rawptr, %..rawptr* %31, align 8
	%33 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0
	%34 = call ccc i32 @ChoosePixelFormat(%..rawptr %32, %windows-7.PIXELFORMATDESCRIPTOR* %33)
	store i32 %34, i32* %3
	; SelectorExpr
	; SelectorExpr
	%35 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%36 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %35, i64 0
	%37 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %36, i64 0, i32 4
	%38 = load %..rawptr, %..rawptr* %37, align 8
	%39 = load i32, i32* %3, align 4
	%40 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0
	%41 = call ccc i32 @DescribePixelFormat(%..rawptr %38, i32 %39, i32 44, %windows-7.PIXELFORMATDESCRIPTOR* %40)
	; SelectorExpr
	; SelectorExpr
	%42 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%43 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %42, i64 0
	%44 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %43, i64 0, i32 4
	%45 = load %..rawptr, %..rawptr* %44, align 8
	%46 = load i32, i32* %3, align 4
	%47 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %2, i64 0
	%48 = call ccc i32 @SetPixelFormat(%..rawptr %45, i32 %46, %windows-7.PIXELFORMATDESCRIPTOR* %47)
	; ctx
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	; SelectorExpr
	%49 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%50 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %49, i64 0
	%51 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %50, i64 0, i32 4
	%52 = load %..rawptr, %..rawptr* %51, align 8
	%53 = call ccc %..rawptr @wglCreateContext(%..rawptr %52)
	store %..rawptr %53, %..rawptr* %4
	; assert
	%54 = load %..rawptr, %..rawptr* %4, align 8
	%55 = icmp ne %..rawptr %54, zeroinitializer
	%56 = icmp eq i1 %55, false
	br i1 %56, label %builtin.assert.err-2, label %builtin.assert.done-3

builtin.assert.err-2:
	call void @.__assert(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$24, i64 0, i32 0), i64 31}, i64 85, i64 16, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$25, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-3

builtin.assert.done-3:
	; SelectorExpr
	; SelectorExpr
	%57 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %57, i64 0
	%59 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %58, i64 0, i32 4
	%60 = load %..rawptr, %..rawptr* %59, align 8
	%61 = load %..rawptr, %..rawptr* %4, align 8
	%62 = call ccc i32 @wglMakeCurrent(%..rawptr %60, %..rawptr %61)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%63 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%64 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %63, i64 0
	%65 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %64, i64 0, i32 0
	%66 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %65, i64 0, i32 7
	; SelectorExpr
	%67 = call i32 @.jaze_gl-14.GetInteger(i32 33307)
	store i32 %67, i32* %66
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%68 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%69 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %68, i64 0
	%70 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %69, i64 0, i32 0
	%71 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %70, i64 0, i32 9
	; SelectorExpr
	%72 = call i32 @.jaze_gl-14.GetInteger(i32 33308)
	store i32 %72, i32* %71
	; ReturnStmt
	%73 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %73

if.else-4:
	; wndHandle
	store %..rawptr zeroinitializer, %..rawptr* %5
		; SelectorExpr
	; SelectorExpr
	%74 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$26, i64 0, i32 0), i64 6})
	; SelectorExpr
	%75 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$27, i64 0, i32 0), i64 13})
	%76 = call ccc %..rawptr @CreateWindowExA(i32 0, i8* %74, i8* %75, i32 0, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr zeroinitializer)
	store %..rawptr %76, %..rawptr* %5
	; assert
	%77 = load %..rawptr, %..rawptr* %5, align 8
	%78 = icmp ne %..rawptr %77, zeroinitializer
	%79 = icmp eq i1 %78, false
	br i1 %79, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$28, i64 0, i32 0), i64 31}, i64 100, i64 20, %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$29, i64 0, i32 0), i64 16})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; wndDc
	store %..rawptr zeroinitializer, %..rawptr* %6
		; SelectorExpr
	%80 = load %..rawptr, %..rawptr* %5, align 8
	%81 = call ccc %..rawptr @GetDC(%..rawptr %80)
	store %..rawptr %81, %..rawptr* %6
	; assert
	%82 = load %..rawptr, %..rawptr* %6, align 8
	%83 = icmp ne %..rawptr %82, zeroinitializer
	%84 = icmp eq i1 %83, false
	br i1 %84, label %builtin.assert.err-7, label %builtin.assert.done-8

builtin.assert.err-7:
	call void @.__assert(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$2a, i64 0, i32 0), i64 31}, i64 102, i64 20, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$2b, i64 0, i32 0), i64 12})
	br label %builtin.assert.done-8

builtin.assert.done-8:
	; temp
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	%85 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%86 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %85, i64 0
	%87 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %86, i64 0, i32 4
	%88 = load %..rawptr, %..rawptr* %87, align 8
	store %..rawptr %88, %..rawptr* %7
	; AssignStmt
	; SelectorExpr
	%89 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%90 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %89, i64 0
	%91 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %90, i64 0, i32 4
	%92 = load %..rawptr, %..rawptr* %6, align 8
	store %..rawptr %92, %..rawptr* %91
	; oldCtx
	store %..rawptr zeroinitializer, %..rawptr* %8
		%93 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%94 = call %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %93, i1 false)
	store %..rawptr %94, %..rawptr* %8
	; AssignStmt
	; SelectorExpr
	%95 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%96 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %95, i64 0
	%97 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %96, i64 0, i32 4
	%98 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %98, %..rawptr* %97
	; assert
	%99 = load %..rawptr, %..rawptr* %8, align 8
	%100 = icmp ne %..rawptr %99, zeroinitializer
	%101 = icmp eq i1 %100, false
	br i1 %101, label %builtin.assert.err-9, label %builtin.assert.done-10

builtin.assert.err-9:
	call void @.__assert(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$2c, i64 0, i32 0), i64 31}, i64 107, i64 20, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2d, i64 0, i32 0), i64 13})
	br label %builtin.assert.done-10

builtin.assert.done-10:
	; extensions
	store %jaze_wgl-15.TryGetExtensionList zeroinitializer, %jaze_wgl-15.TryGetExtensionList* %9
		store %jaze_wgl-15.TryGetExtensionList zeroinitializer, %jaze_wgl-15.TryGetExtensionList* %9
	; SelectorExpr
	%102 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%103 = getelementptr inbounds i32 (%..rawptr, i32*, float*, i32, i32*, i32*)*, i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** @.jaze_wgl-15.ChoosePixelFormatARB, i64 0
	%104 = bitcast i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** %103 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %102, %..rawptr %104, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$2e, i64 0, i32 0), i64 23})
	; SelectorExpr
	%105 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%106 = getelementptr inbounds %..rawptr (%..rawptr, %..rawptr, i32*)*, %..rawptr (%..rawptr, %..rawptr, i32*)** @.jaze_wgl-15.CreateContextAttribsARB, i64 0
	%107 = bitcast %..rawptr (%..rawptr, %..rawptr, i32*)** %106 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %105, %..rawptr %107, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$2f, i64 0, i32 0), i64 26})
	; SelectorExpr
	%108 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%109 = getelementptr inbounds i8* (%..rawptr)*, i8* (%..rawptr)** @.jaze_wgl-15.GetExtensionsStringARB, i64 0
	%110 = bitcast i8* (%..rawptr)** %109 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %108, %..rawptr %110, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$30, i64 0, i32 0), i64 25})
	; SelectorExpr
	%111 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%112 = getelementptr inbounds i1 (i32)*, i1 (i32)** @.jaze_wgl-15.SwapIntervalEXT, i64 0
	%113 = bitcast i1 (i32)** %112 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %111, %..rawptr %113, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$31, i64 0, i32 0), i64 18})
	; SelectorExpr
	%114 = load %..rawptr, %..rawptr* %8, align 8
	%115 = load %..rawptr, %..rawptr* %6, align 8
	%116 = load %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, align 8
	call void @.jaze_wgl-15.LoadExtensions(%..rawptr %114, %..rawptr %115, %jaze_wgl-15.TryGetExtensionList %116)
	; SelectorExpr
	%117 = call ccc i32 @wglMakeCurrent(%..rawptr zeroinitializer, %..rawptr zeroinitializer)
	; SelectorExpr
	%118 = load %..rawptr, %..rawptr* %8, align 8
	%119 = call ccc i32 @wglDeleteContext(%..rawptr %118)
	; SelectorExpr
	%120 = load %..rawptr, %..rawptr* %5, align 8
	%121 = load %..rawptr, %..rawptr* %6, align 8
	%122 = call ccc i32 @ReleaseDC(%..rawptr %120, %..rawptr %121)
	; SelectorExpr
	%123 = load %..rawptr, %..rawptr* %5, align 8
	%124 = call ccc i32 @DestroyWindow(%..rawptr %123)
	; attribs
	store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10
		; append
	%125 = bitcast {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10 to %..rawptr
	%126 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10, align 8
	; SelectorExpr
	%127 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.DRAW_TO_WINDOW_ARB(i1 true)
	; SelectorExpr
	%128 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.ACCELERATION_ARB(i32 8231)
	; SelectorExpr
	%129 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.SUPPORT_OPENGL_ARB(i1 true)
	; SelectorExpr
	%130 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.DOUBLE_BUFFER_ARB(i1 true)
	; SelectorExpr
	%131 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.PIXEL_TYPE_ARB(i32 8235)
	; SelectorExpr
	%132 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.COLOR_BITS_ARB(i32 32)
	; SelectorExpr
	%133 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.ALPHA_BITS_ARB(i32 8)
	; SelectorExpr
	%134 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.DEPTH_BITS_ARB(i32 24)
	; SelectorExpr
	%135 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.FRAMEBUFFER_SRGB_CAPABLE_ARB(i1 true)
	; variadic call argument generation
	store {%jaze_wgl-15.Attrib*, i64, i64} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64}* %11
	store [9 x %jaze_wgl-15.Attrib] zeroinitializer, [9 x %jaze_wgl-15.Attrib]* %12
	%136 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 0
	store %jaze_wgl-15.Attrib %127, %jaze_wgl-15.Attrib* %136
	%137 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 1
	store %jaze_wgl-15.Attrib %128, %jaze_wgl-15.Attrib* %137
	%138 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 2
	store %jaze_wgl-15.Attrib %129, %jaze_wgl-15.Attrib* %138
	%139 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 3
	store %jaze_wgl-15.Attrib %130, %jaze_wgl-15.Attrib* %139
	%140 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 4
	store %jaze_wgl-15.Attrib %131, %jaze_wgl-15.Attrib* %140
	%141 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 5
	store %jaze_wgl-15.Attrib %132, %jaze_wgl-15.Attrib* %141
	%142 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 6
	store %jaze_wgl-15.Attrib %133, %jaze_wgl-15.Attrib* %142
	%143 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 7
	store %jaze_wgl-15.Attrib %134, %jaze_wgl-15.Attrib* %143
	%144 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 8
	store %jaze_wgl-15.Attrib %135, %jaze_wgl-15.Attrib* %144
	%145 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 0
	%146 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, i64 0, i32 0
	store %jaze_wgl-15.Attrib* %145, %jaze_wgl-15.Attrib** %146
	%147 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, i64 0, i32 1
	store i64 9, i64* %147
	%148 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, i64 0, i32 2
	store i64 9, i64* %148
	%149 = load {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, align 8
	%150 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %149, 0
	%151 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %149, 1
	%152 = bitcast %jaze_wgl-15.Attrib* %150 to %..rawptr
	%153 = call i64 @.__dynamic_array_append(%..rawptr %125, i64 8, i64 4, %..rawptr %152, i64 %151)
	; attribArray
	store {i32*, i64, i64,%Allocator} zeroinitializer, {i32*, i64, i64,%Allocator}* %13
		; SelectorExpr
	%154 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10, align 8
	%155 = call {i32*, i64, i64,%Allocator} @.jaze_wgl-15.PrepareAttribArray({%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %154)
	store {i32*, i64, i64,%Allocator} %155, {i32*, i64, i64,%Allocator}* %13
	; format
	store i32 zeroinitializer, i32* %14
		; formats
	store i32 zeroinitializer, i32* %15
		; success
	store i32 zeroinitializer, i32* %16
		; SelectorExpr
	%156 = load i32 (%..rawptr, i32*, float*, i32, i32*, i32*)*, i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** @.jaze_wgl-15.ChoosePixelFormatARB, align 8
	; SelectorExpr
	%157 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%158 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %157, i64 0
	%159 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %158, i64 0, i32 4
	%160 = load %..rawptr, %..rawptr* %159, align 8
	; IndexExpr
	%161 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %13, align 8
	%162 = extractvalue {i32*, i64, i64,%Allocator} %161, 0
	%163 = extractvalue {i32*, i64, i64,%Allocator} %161, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$32, i64 0, i32 0), i64 31}, i64 134, i64 74, i64 0, i64 %163)
	%164 = getelementptr inbounds i32, i32* %162, i64 0
	%165 = getelementptr inbounds i32, i32* %164, i64 0
	%166 = getelementptr inbounds i32, i32* %14, i64 0
	%167 = getelementptr inbounds i32, i32* %15, i64 0
	%168 = call ccc i32 %156(%..rawptr %160, i32* %165, float* zeroinitializer, i32 1, i32* %166, i32* %167)
	store i32 %168, i32* %16
	; IfStmt
	%169 = load i32, i32* %16, align 4
	%170 = icmp eq i32 %169, 1
	br i1 %170, label %cmp.and-11, label %if.done-13

cmp.and-11:
	%171 = load i32, i32* %15, align 4
	%172 = icmp eq i32 %171, 0
	br i1 %172, label %if.then-12, label %if.done-13

if.then-12:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$33, i64 0, i32 0), i64 31}, i64 136, i64 19, %..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$34, i64 0, i32 0), i64 35})
	br label %if.done-13

if.done-13:
	; pfd
	store %windows-7.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-7.PIXELFORMATDESCRIPTOR* %17
		; AssignStmt
	; SelectorExpr
	%173 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %17, i64 0, i32 1
	store i32 1, i32* %173
	; AssignStmt
	; SelectorExpr
	%174 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %17, i64 0, i32 0
	store i32 44, i32* %174
	; SelectorExpr
	; SelectorExpr
	%175 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%176 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %175, i64 0
	%177 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %176, i64 0, i32 4
	%178 = load %..rawptr, %..rawptr* %177, align 8
	%179 = load i32, i32* %14, align 4
	%180 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %17, i64 0
	%181 = call ccc i32 @DescribePixelFormat(%..rawptr %178, i32 %179, i32 44, %windows-7.PIXELFORMATDESCRIPTOR* %180)
	; SelectorExpr
	; SelectorExpr
	%182 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%183 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %182, i64 0
	%184 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %183, i64 0, i32 4
	%185 = load %..rawptr, %..rawptr* %184, align 8
	%186 = load i32, i32* %14, align 4
	%187 = getelementptr inbounds %windows-7.PIXELFORMATDESCRIPTOR, %windows-7.PIXELFORMATDESCRIPTOR* %17, i64 0
	%188 = call ccc i32 @SetPixelFormat(%..rawptr %185, i32 %186, %windows-7.PIXELFORMATDESCRIPTOR* %187)
	; createAttr
	store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18
		; append
	%189 = bitcast {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18 to %..rawptr
	%190 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18, align 8
	; SelectorExpr
	%191 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MAJOR_VERSION_ARB(i32 3)
	; SelectorExpr
	%192 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MINOR_VERSION_ARB(i32 3)
	; SelectorExpr
	%193 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_FLAGS_ARB(i32 1)
	; SelectorExpr
	%194 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_PROFILE_MASK_ARB(i32 1)
	; variadic call argument generation
	store {%jaze_wgl-15.Attrib*, i64, i64} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64}* %19
	store [4 x %jaze_wgl-15.Attrib] zeroinitializer, [4 x %jaze_wgl-15.Attrib]* %20
	%195 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 0
	store %jaze_wgl-15.Attrib %191, %jaze_wgl-15.Attrib* %195
	%196 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 1
	store %jaze_wgl-15.Attrib %192, %jaze_wgl-15.Attrib* %196
	%197 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 2
	store %jaze_wgl-15.Attrib %193, %jaze_wgl-15.Attrib* %197
	%198 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 3
	store %jaze_wgl-15.Attrib %194, %jaze_wgl-15.Attrib* %198
	%199 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 0
	%200 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, i64 0, i32 0
	store %jaze_wgl-15.Attrib* %199, %jaze_wgl-15.Attrib** %200
	%201 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, i64 0, i32 1
	store i64 4, i64* %201
	%202 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, i64 0, i32 2
	store i64 4, i64* %202
	%203 = load {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, align 8
	%204 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %203, 0
	%205 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %203, 1
	%206 = bitcast %jaze_wgl-15.Attrib* %204 to %..rawptr
	%207 = call i64 @.__dynamic_array_append(%..rawptr %189, i64 8, i64 4, %..rawptr %206, i64 %205)
	; AssignStmt
	; SelectorExpr
	%208 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18, align 8
	%209 = call {i32*, i64, i64,%Allocator} @.jaze_wgl-15.PrepareAttribArray({%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %208)
	store {i32*, i64, i64,%Allocator} %209, {i32*, i64, i64,%Allocator}* %13
	; ctx
	store %..rawptr zeroinitializer, %..rawptr* %21
		; SelectorExpr
	%210 = load %..rawptr (%..rawptr, %..rawptr, i32*)*, %..rawptr (%..rawptr, %..rawptr, i32*)** @.jaze_wgl-15.CreateContextAttribsARB, align 8
	; SelectorExpr
	%211 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%212 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %211, i64 0
	%213 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %212, i64 0, i32 4
	%214 = load %..rawptr, %..rawptr* %213, align 8
	; IndexExpr
	%215 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %13, align 8
	%216 = extractvalue {i32*, i64, i64,%Allocator} %215, 0
	%217 = extractvalue {i32*, i64, i64,%Allocator} %215, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$35, i64 0, i32 0), i64 31}, i64 151, i64 78, i64 0, i64 %217)
	%218 = getelementptr inbounds i32, i32* %216, i64 0
	%219 = getelementptr inbounds i32, i32* %218, i64 0
	%220 = call ccc %..rawptr %210(%..rawptr %214, %..rawptr zeroinitializer, i32* %219)
	store %..rawptr %220, %..rawptr* %21
	; assert
	%221 = load %..rawptr, %..rawptr* %21, align 8
	%222 = icmp ne %..rawptr %221, zeroinitializer
	%223 = icmp eq i1 %222, false
	br i1 %223, label %builtin.assert.err-14, label %builtin.assert.done-15

builtin.assert.err-14:
	call void @.__assert(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$36, i64 0, i32 0), i64 31}, i64 152, i64 16, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$37, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-15

builtin.assert.done-15:
	; SelectorExpr
	; SelectorExpr
	%224 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%225 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %224, i64 0
	%226 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %225, i64 0, i32 4
	%227 = load %..rawptr, %..rawptr* %226, align 8
	%228 = load %..rawptr, %..rawptr* %21, align 8
	%229 = call ccc i32 @wglMakeCurrent(%..rawptr %227, %..rawptr %228)
	; ReturnStmt
	%230 = load %..rawptr, %..rawptr* %21, align 8
	ret %..rawptr %230

if.done-16:
	unreachable
}

define ccc i64 @.main-2.WindowProc(%..rawptr %hwnd, i32 %msg, i64 %wparam, i64 %lparam) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i16, align 2
	%6 = alloca %imgui-12.GuiIO*, align 8
	%7 = alloca %..any, align 8
	%8 = alloca i32, align 4
	%9 = alloca %..any, align 8
	%10 = alloca i32, align 4
	%11 = alloca {%..any*, i64, i64}, align 8
	%12 = alloca [2 x %..any], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %hwnd, %..rawptr* %0
	store i32 zeroinitializer, i32* %1
		store i32 %msg, i32* %1
	store i64 zeroinitializer, i64* %2
		store i64 %wparam, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %lparam, i64* %3
	; result
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	; MatchStmt
	%13 = load i32, i32* %1, align 4
	%14 = icmp eq i32 %13, 2
	br i1 %14, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%15 = icmp eq i32 %13, 522
	br i1 %15, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	call ccc void @PostQuitMessage(i32 0)
	br label %match.done-17

match.case.next-3:
	%16 = icmp eq i32 %13, 5
	br i1 %16, label %match.fall.body-10, label %match.case.next-9

match.fall.body-4:
	; delta
	store i16 zeroinitializer, i16* %5
		; SelectorExpr
	%17 = load i64, i64* %2, align 8
	%18 = call i16 @.jaze_win32-13.HIWORD-2686136222000(i64 %17)
	; cast - cast
	%19 = bitcast i16 %18 to i16
	store i16 %19, i16* %5
	; IfStmt
	%20 = load i16, i16* %5, align 2
	%21 = icmp sgt i16 %20, 1
	br i1 %21, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 1
	%23 = load i32, i32* %22, align 4
	%24 = add i32 %23, 1
	store i32 %24, i32* %22
	br label %if.done-6

if.done-6:
	; IfStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 1
	br i1 %26, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 1
	%28 = load i32, i32* %27, align 4
	%29 = sub i32 %28, 1
	store i32 %29, i32* %27
	br label %if.done-8

if.done-8:
	; AssignStmt
	store i64 1, i64* %4
	br label %match.done-17

match.case.next-9:
	%30 = icmp eq i32 %13, 258
	br i1 %30, label %match.fall.body-16, label %match.case.next-15

match.fall.body-10:
	; SelectorExpr
	; SelectorExpr
	%31 = load i64, i64* %3, align 8
	%32 = call i16 @.jaze_win32-13.LOWORD-2686136223104(i64 %31)
	; cast - cast
	%33 = zext i16 %32 to i32
	; SelectorExpr
	%34 = load i64, i64* %3, align 8
	%35 = call i16 @.jaze_win32-13.HIWORD-2686136222368(i64 %34)
	; cast - cast
	%36 = zext i16 %35 to i32
	call ccc void @glViewport(i32 0, i32 0, i32 %33, i32 %36)
	; IfStmt
	%37 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%38 = icmp ne %main-2.Win32Vars_t* %37, zeroinitializer
	br i1 %38, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%39 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%40 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %39, i64 0
	%41 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %40, i64 0, i32 3
	%42 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %41, i64 0, i32 1, i32 0
	; SelectorExpr
	%43 = load i64, i64* %3, align 8
	%44 = call i16 @.jaze_win32-13.LOWORD-2686136223104(i64 %43)
	; cast - cast
	%45 = uitofp i16 %44 to float
	store float %45, float* %42
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%46 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%47 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %46, i64 0
	%48 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %47, i64 0, i32 3
	%49 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %48, i64 0, i32 1, i32 1
	; SelectorExpr
	%50 = load i64, i64* %3, align 8
	%51 = call i16 @.jaze_win32-13.HIWORD-2686136222368(i64 %50)
	; cast - cast
	%52 = uitofp i16 %51 to float
	store float %52, float* %49
	br label %if.done-12

if.done-12:
	; io
	store %imgui-12.GuiIO* zeroinitializer, %imgui-12.GuiIO** %6
		; SelectorExpr
	%53 = call ccc %imgui-12.GuiIO* @igGetIO()
	store %imgui-12.GuiIO* %53, %imgui-12.GuiIO** %6
	; IfStmt
	; SelectorExpr
	%54 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %6, align 8
	%55 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %54, i64 0
	%56 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %55, i64 0, i32 22
	%57 = load void (%imgui-12.DrawData*)*, void (%imgui-12.DrawData*)** %56, align 8
	%58 = icmp ne void (%imgui-12.DrawData*)* %57, zeroinitializer
	br i1 %58, label %if.then-13, label %if.done-14

if.then-13:
	; SelectorExpr
	call void @.jaze_imgui-17.BeginNewFrame(double 0x0000000000000000)
	; SelectorExpr
	call ccc void @igSetNextWindowPosCenter(i32 0)
	; SelectorExpr
	call ccc void @igPushStyleVar(i32 0, float 0x3fe9999980000000)
	; SelectorExpr
	%59 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$38, i64 0, i32 0), i64 6}, i1* zeroinitializer, i32 65)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%60 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%61 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %60, i64 0
	%62 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %61, i64 0, i32 3
	%63 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %62, i64 0, i32 1, i32 0
	%64 = load float, float* %63, align 4
	; cast - cast
	%65 = fptosi float %64 to i32
	; SelectorExpr
	; SelectorExpr
	%66 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%67 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %66, i64 0
	%68 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %67, i64 0, i32 3
	%69 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %68, i64 0, i32 1, i32 1
	%70 = load float, float* %69, align 4
	; cast - cast
	%71 = fptosi float %70 to i32
	store %..any zeroinitializer, %..any* %7
	store i32 zeroinitializer, i32* %8
	store i32 %65, i32* %8
	%72 = bitcast i32* %8 to %..rawptr
	%73 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%74 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%75 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %73, %Type_Info** %74
	store %..rawptr %72, %..rawptr* %75
	%76 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %9
	store i32 zeroinitializer, i32* %10
	store i32 %71, i32* %10
	%77 = bitcast i32* %10 to %..rawptr
	%78 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%79 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%80 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %78, %Type_Info** %79
	store %..rawptr %77, %..rawptr* %80
	%81 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %11
	store [2 x %..any] zeroinitializer, [2 x %..any]* %12
	%82 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 0
	store %..any %76, %..any* %82
	%83 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 1
	store %..any %81, %..any* %83
	%84 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 0
	%85 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 0
	store %..any* %84, %..any** %85
	%86 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 1
	store i64 2, i64* %86
	%87 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 2
	store i64 2, i64* %87
	%88 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %11, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$39, i64 0, i32 0), i64 6}, {%..any*, i64, i64} %88)
	; SelectorExpr
	call ccc void @igEnd()
	; SelectorExpr
	call ccc void @igPopStyleVar(i32 1)
	%89 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	call void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %89)
	; SelectorExpr
	call void @.jaze_gl-14.Clear(i32 16640)
	; SelectorExpr
	call ccc void @igRender()
	; SelectorExpr
	; SelectorExpr
	%90 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%91 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %90, i64 0
	%92 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %91, i64 0, i32 4
	%93 = load %..rawptr, %..rawptr* %92, align 8
	%94 = call ccc i32 @SwapBuffers(%..rawptr %93)
	br label %if.done-14

if.done-14:
	; AssignStmt
	store i64 1, i64* %4
	br label %match.done-17

match.case.next-15:
	; AssignStmt
	%95 = load %..rawptr, %..rawptr* %0, align 8
	%96 = load i32, i32* %1, align 4
	%97 = load i64, i64* %2, align 8
	%98 = load i64, i64* %3, align 8
	%99 = call ccc i64 @DefWindowProcA(%..rawptr %95, i32 %96, i64 %97, i64 %98)
	store i64 %99, i64* %4
	br label %match.done-17

match.fall.body-16:
	; SelectorExpr
	%100 = load i64, i64* %2, align 8
	; cast - cast
	%101 = trunc i64 %100 to i16
	call ccc void @ImGuiIO_AddInputCharacter(i16 %101)
	; AssignStmt
	store i64 1, i64* %4
	; break
	br label %match.done-17

match.done-17:
	; ReturnStmt
	%102 = load i64, i64* %4, align 8
	ret i64 %102
}

define ccc void @.main-2.OpenGLDebugCallback(i32 %source, i32 %type, i32 %id, i32 %severity, i32 %length, i8* %message, %..rawptr %userParam) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 8
	%4 = alloca i32, align 4
	%5 = alloca i8*, align 8
	%6 = alloca %..rawptr, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..string, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [4 x %..any], align 8
	store i32 zeroinitializer, i32* %0
		store i32 %source, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %type, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %id, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %severity, i32* %3
	store i32 zeroinitializer, i32* %4
		store i32 %length, i32* %4
	store i8* zeroinitializer, i8** %5
		store i8* %message, i8** %5
	store %..rawptr zeroinitializer, %..rawptr* %6
		store %..rawptr %userParam, %..rawptr* %6
	; SelectorExpr
	%14 = load i32, i32* %0, align 8
	%15 = load i32, i32* %1, align 8
	%16 = load i32, i32* %3, align 8
	; SelectorExpr
	%17 = load i8*, i8** %5, align 8
	%18 = call %..string @.strings-9.to_odin_string(i8* %17)
	store %..any zeroinitializer, %..any* %7
	%19 = bitcast i32* %0 to %..rawptr
	%20 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	%21 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%22 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %20, %Type_Info** %21
	store %..rawptr %19, %..rawptr* %22
	%23 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%24 = bitcast i32* %1 to %..rawptr
	%25 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	%26 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%27 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %25, %Type_Info** %26
	store %..rawptr %24, %..rawptr* %27
	%28 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%29 = bitcast i32* %3 to %..rawptr
	%30 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	%31 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	store %..string zeroinitializer, %..string* %11
	store %..string %18, %..string* %11
	%34 = bitcast %..string* %11 to %..rawptr
	%35 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%36 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [4 x %..any] zeroinitializer, [4 x %..any]* %13
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 0
	store %..any %23, %..any* %39
	%40 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 1
	store %..any %28, %..any* %40
	%41 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 2
	store %..any %33, %..any* %41
	%42 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 3
	store %..any %38, %..any* %42
	%43 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 0
	%44 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %43, %..any** %44
	%45 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 4, i64* %45
	%46 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 4, i64* %46
	%47 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%48 = call i64 @.fmt-4.printf(%..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$3a, i64 0, i32 0), i64 19}, {%..any*, i64, i64} %47)
	ret void
}

define void @.main-2.ToggleFullscreen(%..rawptr %wnd) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca %jaze_win32-13.MONITORINFO, align 4
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %wnd, %..rawptr* %0
	; Style
	store i32 zeroinitializer, i32* %1
		; SelectorExpr
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = call ccc i64 @GetWindowLongPtrA(%..rawptr %3, i32 -16)
	; cast - cast
	%5 = trunc i64 %4 to i32
	store i32 %5, i32* %1
	; IfStmt
	%6 = load i32, i32* %1, align 4
	%7 = and i32 %6, 13565952
	%8 = icmp eq i32 %7, 13565952
	br i1 %8, label %if.then-1, label %if.else-2

if.then-1:
	; monitorInfo
	store %jaze_win32-13.MONITORINFO zeroinitializer, %jaze_win32-13.MONITORINFO* %2
		; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 0
	store i32 40, i32* %9
	; SelectorExpr
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = getelementptr inbounds %jaze_win32-13.WINDOWPLACEMENT, %jaze_win32-13.WINDOWPLACEMENT* @main-2.GlobalWindowPosition, i64 0
	%12 = call ccc i32 @GetWindowPlacement(%..rawptr %10, %jaze_win32-13.WINDOWPLACEMENT* %11)
	; SelectorExpr
	; SelectorExpr
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = call ccc %..rawptr @MonitorFromWindow(%..rawptr %13, i32 1)
	%15 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0
	%16 = call ccc i32 @GetMonitorInfoA(%..rawptr %14, %jaze_win32-13.MONITORINFO* %15)
	; SelectorExpr
	%17 = load %..rawptr, %..rawptr* %0, align 8
	%18 = load i32, i32* %1, align 4
	; cast - cast
	%19 = zext i32 %18 to i64
	%20 = and i64 %19, -13565953
	%21 = call ccc i64 @SetWindowLongPtrA(%..rawptr %17, i32 -16, i64 %20)
	; SelectorExpr
	%22 = load %..rawptr, %..rawptr* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%23 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%24 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %23, i64 0, i32 0
	%25 = load i32, i32* %24, align 4
	; SelectorExpr
	; SelectorExpr
	%26 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%27 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %26, i64 0, i32 1
	%28 = load i32, i32* %27, align 4
	; SelectorExpr
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%30 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %29, i64 0, i32 2
	%31 = load i32, i32* %30, align 4
	; SelectorExpr
	; SelectorExpr
	%32 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%33 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %32, i64 0, i32 0
	%34 = load i32, i32* %33, align 4
	%35 = sub i32 %31, %34
	; SelectorExpr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%37 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %36, i64 0, i32 3
	%38 = load i32, i32* %37, align 4
	; SelectorExpr
	; SelectorExpr
	%39 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%40 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %39, i64 0, i32 1
	%41 = load i32, i32* %40, align 4
	%42 = sub i32 %38, %41
	call ccc void @SetWindowPos(%..rawptr %22, %..rawptr null, i32 %25, i32 %28, i32 %35, i32 %42, i32 544)
	br label %if.done-3

if.else-2:
	; SelectorExpr
	%43 = load %..rawptr, %..rawptr* %0, align 8
	%44 = load i32, i32* %1, align 4
	%45 = or i32 %44, 13565952
	; cast - cast
	%46 = zext i32 %45 to i64
	%47 = call ccc i64 @SetWindowLongPtrA(%..rawptr %43, i32 -16, i64 %46)
	; SelectorExpr
	%48 = load %..rawptr, %..rawptr* %0, align 8
	%49 = getelementptr inbounds %jaze_win32-13.WINDOWPLACEMENT, %jaze_win32-13.WINDOWPLACEMENT* @main-2.GlobalWindowPosition, i64 0
	%50 = call ccc i32 @SetWindowPlacement(%..rawptr %48, %jaze_win32-13.WINDOWPLACEMENT* %49)
	; SelectorExpr
	%51 = load %..rawptr, %..rawptr* %0, align 8
	call ccc void @SetWindowPos(%..rawptr %51, %..rawptr zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 551)
	br label %if.done-3

if.done-3:
	ret void
}

define void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %vars) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca {i1, i1}, align 1
	%2 = alloca %__Map_Header, align 8
	%3 = alloca %__Map_Key, align 8
	%4 = alloca %__Map_Header, align 8
	%5 = alloca %__Map_Key, align 8
	%6 = alloca i1, align 1
	%7 = alloca {i1, i1}, align 1
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i1, i1}, align 1
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca %__Map_Header, align 8
	%17 = alloca %__Map_Key, align 8
	%18 = alloca i1, align 1
	%19 = alloca {i1, i1}, align 1
	%20 = alloca %__Map_Header, align 8
	%21 = alloca %__Map_Key, align 8
	%22 = alloca %__Map_Header, align 8
	%23 = alloca %__Map_Key, align 8
	%24 = alloca i1, align 1
	%25 = alloca {i1, i1}, align 1
	%26 = alloca %__Map_Header, align 8
	%27 = alloca %__Map_Key, align 8
	%28 = alloca %__Map_Header, align 8
	%29 = alloca %__Map_Key, align 8
	%30 = alloca i1, align 1
	%31 = alloca {i1, i1}, align 1
	%32 = alloca %__Map_Header, align 8
	%33 = alloca %__Map_Key, align 8
	%34 = alloca %__Map_Header, align 8
	%35 = alloca %__Map_Key, align 8
	%36 = alloca i1, align 1
	%37 = alloca {i1, i1}, align 1
	%38 = alloca %__Map_Header, align 8
	%39 = alloca %__Map_Key, align 8
	%40 = alloca %__Map_Header, align 8
	%41 = alloca %__Map_Key, align 8
	%42 = alloca i1, align 1
	%43 = alloca {i1, i1}, align 1
	%44 = alloca %__Map_Header, align 8
	%45 = alloca %__Map_Key, align 8
	%46 = alloca i1, align 1
	%47 = alloca {i1, i1}, align 1
	%48 = alloca %__Map_Header, align 8
	%49 = alloca %__Map_Key, align 8
	%50 = alloca %__Map_Header, align 8
	%51 = alloca %__Map_Key, align 8
	%52 = alloca i1, align 1
	%53 = alloca {i1, i1}, align 1
	%54 = alloca %__Map_Header, align 8
	%55 = alloca %__Map_Key, align 8
	%56 = alloca i1, align 1
	%57 = alloca {i1, i1}, align 1
	%58 = alloca %__Map_Header, align 8
	%59 = alloca %__Map_Key, align 8
	%60 = alloca %__Map_Header, align 8
	%61 = alloca %__Map_Key, align 8
	%62 = alloca i1, align 1
	%63 = alloca {i1, i1}, align 1
	%64 = alloca %__Map_Header, align 8
	%65 = alloca %__Map_Key, align 8
	%66 = alloca i1, align 1
	%67 = alloca {i1, i1}, align 1
	%68 = alloca %__Map_Header, align 8
	%69 = alloca %__Map_Key, align 8
	%70 = alloca %__Map_Header, align 8
	%71 = alloca %__Map_Key, align 8
	%72 = alloca i1, align 1
	%73 = alloca {i1, i1}, align 1
	%74 = alloca %__Map_Header, align 8
	%75 = alloca %__Map_Key, align 8
	%76 = alloca i1, align 1
	%77 = alloca {i1, i1}, align 1
	%78 = alloca %__Map_Header, align 8
	%79 = alloca %__Map_Key, align 8
	%80 = alloca %__Map_Header, align 8
	%81 = alloca %__Map_Key, align 8
	%82 = alloca i1, align 1
	%83 = alloca {i1, i1}, align 1
	%84 = alloca %__Map_Header, align 8
	%85 = alloca %__Map_Key, align 8
	%86 = alloca i1, align 1
	%87 = alloca {i1, i1}, align 1
	%88 = alloca %__Map_Header, align 8
	%89 = alloca %__Map_Key, align 8
	%90 = alloca %__Map_Header, align 8
	%91 = alloca %__Map_Key, align 8
	%92 = alloca i1, align 1
	%93 = alloca {i1, i1}, align 1
	%94 = alloca %__Map_Header, align 8
	%95 = alloca %__Map_Key, align 8
	%96 = alloca i1, align 1
	%97 = alloca {i1, i1}, align 1
	%98 = alloca %__Map_Header, align 8
	%99 = alloca %__Map_Key, align 8
	%100 = alloca %__Map_Header, align 8
	%101 = alloca %__Map_Key, align 8
	%102 = alloca i1, align 1
	%103 = alloca {i1, i1}, align 1
	%104 = alloca %__Map_Header, align 8
	%105 = alloca %__Map_Key, align 8
	%106 = alloca i1, align 1
	%107 = alloca {i1, i1}, align 1
	%108 = alloca %__Map_Header, align 8
	%109 = alloca %__Map_Key, align 8
	%110 = alloca %__Map_Header, align 8
	%111 = alloca %__Map_Key, align 8
	%112 = alloca i1, align 1
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	; SelectorExpr
	%113 = call ccc i1 @igBeginMainMenuBar()
	; IfStmt
	; SelectorExpr
	%114 = call i1 @.imgui-12.BeginMenu(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3b, i64 0, i32 0), i64 4}, i1 true)
	br i1 %114, label %if.then-1, label %if.done-36

if.then-1:
	; IfStmt
	; SelectorExpr
	%115 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$3c, i64 0, i32 0), i64 11}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %115, label %if.then-2, label %if.done-5

if.then-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %1
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	%116 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%117 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %117, %raw-6.Dynamic_Map** %116
	%118 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 1
	store i1 true, i1* %118
	%119 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 2
	store i64 40, i64* %119
	%120 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 3
	store i64 8, i64* %120
	%121 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 4
	store i64 32, i64* %121
	%122 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 5
	store i64 1, i64* %122
	%123 = load %__Map_Header, %__Map_Header* %2, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %3
	%124 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 0
	store i64 2297942010048193939, i64* %124
	%125 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3d, i64 0, i32 0), i64 14}, %..string* %125
	%126 = load %__Map_Key, %__Map_Key* %3, align 8
	%127 = call %..rawptr @.__dynamic_map_get(%__Map_Header %123, %__Map_Key %126)
	%128 = icmp ne %..rawptr %127, null
	%129 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 1
	store i1 %128, i1* %129
	br i1 %128, label %map.get.then-3, label %map.get.done-4

map.get.then-3:
	%130 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 0
	%131 = bitcast %..rawptr %127 to i1*
	%132 = load i1, i1* %131, align 1
	store i1 %132, i1* %130
	br label %map.get.done-4

map.get.done-4:
	%133 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 0
	%134 = load i1, i1* %133, align 1
	%135 = xor i1 -1, %134
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	%136 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 0
	%137 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %137, %raw-6.Dynamic_Map** %136
	%138 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 1
	store i1 true, i1* %138
	%139 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 2
	store i64 40, i64* %139
	%140 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 3
	store i64 8, i64* %140
	%141 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 4
	store i64 32, i64* %141
	%142 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 5
	store i64 1, i64* %142
	%143 = load %__Map_Header, %__Map_Header* %4, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %5
	%144 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 0
	store i64 2297942010048193939, i64* %144
	%145 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3e, i64 0, i32 0), i64 14}, %..string* %145
	%146 = load %__Map_Key, %__Map_Key* %5, align 8
	store i1 zeroinitializer, i1* %6
	store i1 %135, i1* %6
	%147 = bitcast i1* %6 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %143, %__Map_Key %146, %..rawptr %147)
	br label %if.done-5

if.done-5:
	; IfStmt
	; SelectorExpr
	%148 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$3f, i64 0, i32 0), i64 13}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %148, label %if.then-6, label %if.done-9

if.then-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %7
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%149 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%150 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %150, %raw-6.Dynamic_Map** %149
	%151 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %151
	%152 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %152
	%153 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %153
	%154 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %154
	%155 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 5
	store i64 1, i64* %155
	%156 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%157 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 2202226828205582596, i64* %157
	%158 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$40, i64 0, i32 0), i64 16}, %..string* %158
	%159 = load %__Map_Key, %__Map_Key* %9, align 8
	%160 = call %..rawptr @.__dynamic_map_get(%__Map_Header %156, %__Map_Key %159)
	%161 = icmp ne %..rawptr %160, null
	%162 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 1
	store i1 %161, i1* %162
	br i1 %161, label %map.get.then-7, label %map.get.done-8

map.get.then-7:
	%163 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 0
	%164 = bitcast %..rawptr %160 to i1*
	%165 = load i1, i1* %164, align 1
	store i1 %165, i1* %163
	br label %map.get.done-8

map.get.done-8:
	%166 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 0
	%167 = load i1, i1* %166, align 1
	%168 = xor i1 -1, %167
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%169 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%170 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %170, %raw-6.Dynamic_Map** %169
	%171 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %171
	%172 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %172
	%173 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %173
	%174 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %174
	%175 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 5
	store i64 1, i64* %175
	%176 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%177 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 2202226828205582596, i64* %177
	%178 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$41, i64 0, i32 0), i64 16}, %..string* %178
	%179 = load %__Map_Key, %__Map_Key* %11, align 8
	store i1 zeroinitializer, i1* %12
	store i1 %168, i1* %12
	%180 = bitcast i1* %12 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %176, %__Map_Key %179, %..rawptr %180)
	br label %if.done-9

if.done-9:
	; IfStmt
	; SelectorExpr
	%181 = call i1 @.imgui-12.BeginMenu(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$42, i64 0, i32 0), i64 6}, i1 true)
	br i1 %181, label %if.then-10, label %if.done-19

if.then-10:
	; IfStmt
	; SelectorExpr
	%182 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$43, i64 0, i32 0), i64 4}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %182, label %if.then-11, label %if.done-14

if.then-11:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %13
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%183 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%184 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %184, %raw-6.Dynamic_Map** %183
	%185 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %185
	%186 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %186
	%187 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %187
	%188 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %188
	%189 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 5
	store i64 1, i64* %189
	%190 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%191 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 8221518982030458364, i64* %191
	%192 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$44, i64 0, i32 0), i64 14}, %..string* %192
	%193 = load %__Map_Key, %__Map_Key* %15, align 8
	%194 = call %..rawptr @.__dynamic_map_get(%__Map_Header %190, %__Map_Key %193)
	%195 = icmp ne %..rawptr %194, null
	%196 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 1
	store i1 %195, i1* %196
	br i1 %195, label %map.get.then-12, label %map.get.done-13

map.get.then-12:
	%197 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%198 = bitcast %..rawptr %194 to i1*
	%199 = load i1, i1* %198, align 1
	store i1 %199, i1* %197
	br label %map.get.done-13

map.get.done-13:
	%200 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%201 = load i1, i1* %200, align 1
	%202 = xor i1 -1, %201
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	%203 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 0
	%204 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %204, %raw-6.Dynamic_Map** %203
	%205 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 1
	store i1 true, i1* %205
	%206 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 2
	store i64 40, i64* %206
	%207 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 3
	store i64 8, i64* %207
	%208 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 4
	store i64 32, i64* %208
	%209 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 5
	store i64 1, i64* %209
	%210 = load %__Map_Header, %__Map_Header* %16, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %17
	%211 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 0
	store i64 8221518982030458364, i64* %211
	%212 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$45, i64 0, i32 0), i64 14}, %..string* %212
	%213 = load %__Map_Key, %__Map_Key* %17, align 8
	store i1 zeroinitializer, i1* %18
	store i1 %202, i1* %18
	%214 = bitcast i1* %18 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %210, %__Map_Key %213, %..rawptr %214)
	br label %if.done-14

if.done-14:
	; IfStmt
	; SelectorExpr
	%215 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$46, i64 0, i32 0), i64 5}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %215, label %if.then-15, label %if.done-18

if.then-15:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %19
	store %__Map_Header zeroinitializer, %__Map_Header* %20
	%216 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 0
	%217 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %217, %raw-6.Dynamic_Map** %216
	%218 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 1
	store i1 true, i1* %218
	%219 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 2
	store i64 40, i64* %219
	%220 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 3
	store i64 8, i64* %220
	%221 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 4
	store i64 32, i64* %221
	%222 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 5
	store i64 1, i64* %222
	%223 = load %__Map_Header, %__Map_Header* %20, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %21
	%224 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 0
	store i64 354564790537078517, i64* %224
	%225 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$47, i64 0, i32 0), i64 15}, %..string* %225
	%226 = load %__Map_Key, %__Map_Key* %21, align 8
	%227 = call %..rawptr @.__dynamic_map_get(%__Map_Header %223, %__Map_Key %226)
	%228 = icmp ne %..rawptr %227, null
	%229 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 1
	store i1 %228, i1* %229
	br i1 %228, label %map.get.then-16, label %map.get.done-17

map.get.then-16:
	%230 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 0
	%231 = bitcast %..rawptr %227 to i1*
	%232 = load i1, i1* %231, align 1
	store i1 %232, i1* %230
	br label %map.get.done-17

map.get.done-17:
	%233 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 0
	%234 = load i1, i1* %233, align 1
	%235 = xor i1 -1, %234
	store %__Map_Header zeroinitializer, %__Map_Header* %22
	%236 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 0
	%237 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %237, %raw-6.Dynamic_Map** %236
	%238 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 1
	store i1 true, i1* %238
	%239 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 2
	store i64 40, i64* %239
	%240 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 3
	store i64 8, i64* %240
	%241 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 4
	store i64 32, i64* %241
	%242 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 5
	store i64 1, i64* %242
	%243 = load %__Map_Header, %__Map_Header* %22, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %23
	%244 = getelementptr inbounds %__Map_Key, %__Map_Key* %23, i64 0, i32 0
	store i64 354564790537078517, i64* %244
	%245 = getelementptr inbounds %__Map_Key, %__Map_Key* %23, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$48, i64 0, i32 0), i64 15}, %..string* %245
	%246 = load %__Map_Key, %__Map_Key* %23, align 8
	store i1 zeroinitializer, i1* %24
	store i1 %235, i1* %24
	%247 = bitcast i1* %24 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %243, %__Map_Key %246, %..rawptr %247)
	br label %if.done-18

if.done-18:
	; SelectorExpr
	call ccc void @igEndMenu()
	br label %if.done-19

if.done-19:
	; IfStmt
	; SelectorExpr
	%248 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$49, i64 0, i32 0), i64 9}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %248, label %if.then-20, label %if.done-23

if.then-20:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %25
	store %__Map_Header zeroinitializer, %__Map_Header* %26
	%249 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 0
	%250 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %250, %raw-6.Dynamic_Map** %249
	%251 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 1
	store i1 true, i1* %251
	%252 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 2
	store i64 40, i64* %252
	%253 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 3
	store i64 8, i64* %253
	%254 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 4
	store i64 32, i64* %254
	%255 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 5
	store i64 1, i64* %255
	%256 = load %__Map_Header, %__Map_Header* %26, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %27
	%257 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 0
	store i64 9180840996585617949, i64* %257
	%258 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$4a, i64 0, i32 0), i64 12}, %..string* %258
	%259 = load %__Map_Key, %__Map_Key* %27, align 8
	%260 = call %..rawptr @.__dynamic_map_get(%__Map_Header %256, %__Map_Key %259)
	%261 = icmp ne %..rawptr %260, null
	%262 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 1
	store i1 %261, i1* %262
	br i1 %261, label %map.get.then-21, label %map.get.done-22

map.get.then-21:
	%263 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 0
	%264 = bitcast %..rawptr %260 to i1*
	%265 = load i1, i1* %264, align 1
	store i1 %265, i1* %263
	br label %map.get.done-22

map.get.done-22:
	%266 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 0
	%267 = load i1, i1* %266, align 1
	%268 = xor i1 -1, %267
	store %__Map_Header zeroinitializer, %__Map_Header* %28
	%269 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 0
	%270 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %270, %raw-6.Dynamic_Map** %269
	%271 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 1
	store i1 true, i1* %271
	%272 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 2
	store i64 40, i64* %272
	%273 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 3
	store i64 8, i64* %273
	%274 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 4
	store i64 32, i64* %274
	%275 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 5
	store i64 1, i64* %275
	%276 = load %__Map_Header, %__Map_Header* %28, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %29
	%277 = getelementptr inbounds %__Map_Key, %__Map_Key* %29, i64 0, i32 0
	store i64 9180840996585617949, i64* %277
	%278 = getelementptr inbounds %__Map_Key, %__Map_Key* %29, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$4b, i64 0, i32 0), i64 12}, %..string* %278
	%279 = load %__Map_Key, %__Map_Key* %29, align 8
	store i1 zeroinitializer, i1* %30
	store i1 %268, i1* %30
	%280 = bitcast i1* %30 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %276, %__Map_Key %279, %..rawptr %280)
	br label %if.done-23

if.done-23:
	; IfStmt
	; SelectorExpr
	%281 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$4c, i64 0, i32 0), i64 8}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %281, label %if.then-24, label %if.done-27

if.then-24:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %31
	store %__Map_Header zeroinitializer, %__Map_Header* %32
	%282 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 0
	%283 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %283, %raw-6.Dynamic_Map** %282
	%284 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 1
	store i1 true, i1* %284
	%285 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 2
	store i64 40, i64* %285
	%286 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 3
	store i64 8, i64* %286
	%287 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 4
	store i64 32, i64* %287
	%288 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 5
	store i64 1, i64* %288
	%289 = load %__Map_Header, %__Map_Header* %32, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %33
	%290 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 0
	store i64 -3762562292824174117, i64* %290
	%291 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$4d, i64 0, i32 0), i64 17}, %..string* %291
	%292 = load %__Map_Key, %__Map_Key* %33, align 8
	%293 = call %..rawptr @.__dynamic_map_get(%__Map_Header %289, %__Map_Key %292)
	%294 = icmp ne %..rawptr %293, null
	%295 = getelementptr inbounds {i1, i1}, {i1, i1}* %31, i64 0, i32 1
	store i1 %294, i1* %295
	br i1 %294, label %map.get.then-25, label %map.get.done-26

map.get.then-25:
	%296 = getelementptr inbounds {i1, i1}, {i1, i1}* %31, i64 0, i32 0
	%297 = bitcast %..rawptr %293 to i1*
	%298 = load i1, i1* %297, align 1
	store i1 %298, i1* %296
	br label %map.get.done-26

map.get.done-26:
	%299 = getelementptr inbounds {i1, i1}, {i1, i1}* %31, i64 0, i32 0
	%300 = load i1, i1* %299, align 1
	%301 = xor i1 -1, %300
	store %__Map_Header zeroinitializer, %__Map_Header* %34
	%302 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 0
	%303 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %303, %raw-6.Dynamic_Map** %302
	%304 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 1
	store i1 true, i1* %304
	%305 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 2
	store i64 40, i64* %305
	%306 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 3
	store i64 8, i64* %306
	%307 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 4
	store i64 32, i64* %307
	%308 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 5
	store i64 1, i64* %308
	%309 = load %__Map_Header, %__Map_Header* %34, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %35
	%310 = getelementptr inbounds %__Map_Key, %__Map_Key* %35, i64 0, i32 0
	store i64 -3762562292824174117, i64* %310
	%311 = getelementptr inbounds %__Map_Key, %__Map_Key* %35, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$4e, i64 0, i32 0), i64 17}, %..string* %311
	%312 = load %__Map_Key, %__Map_Key* %35, align 8
	store i1 zeroinitializer, i1* %36
	store i1 %301, i1* %36
	%313 = bitcast i1* %36 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %309, %__Map_Key %312, %..rawptr %313)
	br label %if.done-27

if.done-27:
	; IfStmt
	; SelectorExpr
	%314 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$4f, i64 0, i32 0), i64 16}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %314, label %if.then-28, label %if.done-31

if.then-28:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %37
	store %__Map_Header zeroinitializer, %__Map_Header* %38
	%315 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 0
	%316 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %316, %raw-6.Dynamic_Map** %315
	%317 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 1
	store i1 true, i1* %317
	%318 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 2
	store i64 40, i64* %318
	%319 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 3
	store i64 8, i64* %319
	%320 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 4
	store i64 32, i64* %320
	%321 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 5
	store i64 1, i64* %321
	%322 = load %__Map_Header, %__Map_Header* %38, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %39
	%323 = getelementptr inbounds %__Map_Key, %__Map_Key* %39, i64 0, i32 0
	store i64 -6145881643456605148, i64* %323
	%324 = getelementptr inbounds %__Map_Key, %__Map_Key* %39, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$50, i64 0, i32 0), i64 14}, %..string* %324
	%325 = load %__Map_Key, %__Map_Key* %39, align 8
	%326 = call %..rawptr @.__dynamic_map_get(%__Map_Header %322, %__Map_Key %325)
	%327 = icmp ne %..rawptr %326, null
	%328 = getelementptr inbounds {i1, i1}, {i1, i1}* %37, i64 0, i32 1
	store i1 %327, i1* %328
	br i1 %327, label %map.get.then-29, label %map.get.done-30

map.get.then-29:
	%329 = getelementptr inbounds {i1, i1}, {i1, i1}* %37, i64 0, i32 0
	%330 = bitcast %..rawptr %326 to i1*
	%331 = load i1, i1* %330, align 1
	store i1 %331, i1* %329
	br label %map.get.done-30

map.get.done-30:
	%332 = getelementptr inbounds {i1, i1}, {i1, i1}* %37, i64 0, i32 0
	%333 = load i1, i1* %332, align 1
	%334 = xor i1 -1, %333
	store %__Map_Header zeroinitializer, %__Map_Header* %40
	%335 = getelementptr inbounds %__Map_Header, %__Map_Header* %40, i64 0, i32 0
	%336 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %336, %raw-6.Dynamic_Map** %335
	%337 = getelementptr inbounds %__Map_Header, %__Map_Header* %40, i64 0, i32 1
	store i1 true, i1* %337
	%338 = getelementptr inbounds %__Map_Header, %__Map_Header* %40, i64 0, i32 2
	store i64 40, i64* %338
	%339 = getelementptr inbounds %__Map_Header, %__Map_Header* %40, i64 0, i32 3
	store i64 8, i64* %339
	%340 = getelementptr inbounds %__Map_Header, %__Map_Header* %40, i64 0, i32 4
	store i64 32, i64* %340
	%341 = getelementptr inbounds %__Map_Header, %__Map_Header* %40, i64 0, i32 5
	store i64 1, i64* %341
	%342 = load %__Map_Header, %__Map_Header* %40, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %41
	%343 = getelementptr inbounds %__Map_Key, %__Map_Key* %41, i64 0, i32 0
	store i64 -6145881643456605148, i64* %343
	%344 = getelementptr inbounds %__Map_Key, %__Map_Key* %41, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$51, i64 0, i32 0), i64 14}, %..string* %344
	%345 = load %__Map_Key, %__Map_Key* %41, align 8
	store i1 zeroinitializer, i1* %42
	store i1 %334, i1* %42
	%346 = bitcast i1* %42 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %342, %__Map_Key %345, %..rawptr %346)
	br label %if.done-31

if.done-31:
	; SelectorExpr
	call ccc void @igSeparator()
	; IfStmt
	; SelectorExpr
	%347 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$52, i64 0, i32 0), i64 17}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$53, i64 0, i32 0), i64 9}, i1 false, i1 true)
	br i1 %347, label %if.then-32, label %if.done-33

if.then-32:
	; SelectorExpr
	%348 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%349 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %348, i64 0
	%350 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %349, i64 0, i32 2
	%351 = load %..rawptr, %..rawptr* %350, align 8
	call void @.main-2.ToggleFullscreen(%..rawptr %351)
	br label %if.done-33

if.done-33:
	; IfStmt
	; SelectorExpr
	%352 = call i1 @.imgui-12.MenuItem(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$54, i64 0, i32 0), i64 4}, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$55, i64 0, i32 0), i64 6}, i1 false, i1 true)
	br i1 %352, label %if.then-34, label %if.done-35

if.then-34:
	; AssignStmt
	store i1 false, i1* @main-2.ProgramRunning
	br label %if.done-35

if.done-35:
	; SelectorExpr
	call ccc void @igEndMenu()
	br label %if.done-36

if.done-36:
	; SelectorExpr
	call ccc void @igEndMainMenuBar()
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %43
	store %__Map_Header zeroinitializer, %__Map_Header* %44
	%353 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 0
	%354 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %354, %raw-6.Dynamic_Map** %353
	%355 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 1
	store i1 true, i1* %355
	%356 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 2
	store i64 40, i64* %356
	%357 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 3
	store i64 8, i64* %357
	%358 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 4
	store i64 32, i64* %358
	%359 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 5
	store i64 1, i64* %359
	%360 = load %__Map_Header, %__Map_Header* %44, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %45
	%361 = getelementptr inbounds %__Map_Key, %__Map_Key* %45, i64 0, i32 0
	store i64 2297942010048193939, i64* %361
	%362 = getelementptr inbounds %__Map_Key, %__Map_Key* %45, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$56, i64 0, i32 0), i64 14}, %..string* %362
	%363 = load %__Map_Key, %__Map_Key* %45, align 8
	%364 = call %..rawptr @.__dynamic_map_get(%__Map_Header %360, %__Map_Key %363)
	%365 = icmp ne %..rawptr %364, null
	%366 = getelementptr inbounds {i1, i1}, {i1, i1}* %43, i64 0, i32 1
	store i1 %365, i1* %366
	br i1 %365, label %map.get.then-37, label %map.get.done-38

map.get.then-37:
	%367 = getelementptr inbounds {i1, i1}, {i1, i1}* %43, i64 0, i32 0
	%368 = bitcast %..rawptr %364 to i1*
	%369 = load i1, i1* %368, align 1
	store i1 %369, i1* %367
	br label %map.get.done-38

map.get.done-38:
	%370 = getelementptr inbounds {i1, i1}, {i1, i1}* %43, i64 0, i32 0
	%371 = load i1, i1* %370, align 1
	%372 = icmp eq i1 %371, true
	br i1 %372, label %if.then-39, label %if.done-42

if.then-39:
	; b
	store i1 zeroinitializer, i1* %46
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %47
	store %__Map_Header zeroinitializer, %__Map_Header* %48
	%373 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 0
	%374 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %374, %raw-6.Dynamic_Map** %373
	%375 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 1
	store i1 true, i1* %375
	%376 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 2
	store i64 40, i64* %376
	%377 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 3
	store i64 8, i64* %377
	%378 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 4
	store i64 32, i64* %378
	%379 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 5
	store i64 1, i64* %379
	%380 = load %__Map_Header, %__Map_Header* %48, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %49
	%381 = getelementptr inbounds %__Map_Key, %__Map_Key* %49, i64 0, i32 0
	store i64 2297942010048193939, i64* %381
	%382 = getelementptr inbounds %__Map_Key, %__Map_Key* %49, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$57, i64 0, i32 0), i64 14}, %..string* %382
	%383 = load %__Map_Key, %__Map_Key* %49, align 8
	%384 = call %..rawptr @.__dynamic_map_get(%__Map_Header %380, %__Map_Key %383)
	%385 = icmp ne %..rawptr %384, null
	%386 = getelementptr inbounds {i1, i1}, {i1, i1}* %47, i64 0, i32 1
	store i1 %385, i1* %386
	br i1 %385, label %map.get.then-40, label %map.get.done-41

map.get.then-40:
	%387 = getelementptr inbounds {i1, i1}, {i1, i1}* %47, i64 0, i32 0
	%388 = bitcast %..rawptr %384 to i1*
	%389 = load i1, i1* %388, align 1
	store i1 %389, i1* %387
	br label %map.get.done-41

map.get.done-41:
	%390 = getelementptr inbounds {i1, i1}, {i1, i1}* %47, i64 0, i32 0
	%391 = load i1, i1* %390, align 1
	store i1 %391, i1* %46
	; SelectorExpr
	; SelectorExpr
	%392 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%393 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %392, i64 0
	%394 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %393, i64 0, i32 0
	%395 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %394, i64 0
	%396 = getelementptr inbounds i1, i1* %46, i64 0
	call void @.jaze_debug_windows-16.OpenGLInfo(%jaze_gl-14.OpenGLVars_t* %395, i1* %396)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%397 = load i1, i1* %46, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %50
	%398 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 0
	%399 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %399, %raw-6.Dynamic_Map** %398
	%400 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 1
	store i1 true, i1* %400
	%401 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 2
	store i64 40, i64* %401
	%402 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 3
	store i64 8, i64* %402
	%403 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 4
	store i64 32, i64* %403
	%404 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 5
	store i64 1, i64* %404
	%405 = load %__Map_Header, %__Map_Header* %50, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %51
	%406 = getelementptr inbounds %__Map_Key, %__Map_Key* %51, i64 0, i32 0
	store i64 2297942010048193939, i64* %406
	%407 = getelementptr inbounds %__Map_Key, %__Map_Key* %51, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$58, i64 0, i32 0), i64 14}, %..string* %407
	%408 = load %__Map_Key, %__Map_Key* %51, align 8
	store i1 zeroinitializer, i1* %52
	store i1 %397, i1* %52
	%409 = bitcast i1* %52 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %405, %__Map_Key %408, %..rawptr %409)
	br label %if.done-42

if.done-42:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %53
	store %__Map_Header zeroinitializer, %__Map_Header* %54
	%410 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 0
	%411 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %411, %raw-6.Dynamic_Map** %410
	%412 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 1
	store i1 true, i1* %412
	%413 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 2
	store i64 40, i64* %413
	%414 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 3
	store i64 8, i64* %414
	%415 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 4
	store i64 32, i64* %415
	%416 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 5
	store i64 1, i64* %416
	%417 = load %__Map_Header, %__Map_Header* %54, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %55
	%418 = getelementptr inbounds %__Map_Key, %__Map_Key* %55, i64 0, i32 0
	store i64 2202226828205582596, i64* %418
	%419 = getelementptr inbounds %__Map_Key, %__Map_Key* %55, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$59, i64 0, i32 0), i64 16}, %..string* %419
	%420 = load %__Map_Key, %__Map_Key* %55, align 8
	%421 = call %..rawptr @.__dynamic_map_get(%__Map_Header %417, %__Map_Key %420)
	%422 = icmp ne %..rawptr %421, null
	%423 = getelementptr inbounds {i1, i1}, {i1, i1}* %53, i64 0, i32 1
	store i1 %422, i1* %423
	br i1 %422, label %map.get.then-43, label %map.get.done-44

map.get.then-43:
	%424 = getelementptr inbounds {i1, i1}, {i1, i1}* %53, i64 0, i32 0
	%425 = bitcast %..rawptr %421 to i1*
	%426 = load i1, i1* %425, align 1
	store i1 %426, i1* %424
	br label %map.get.done-44

map.get.done-44:
	%427 = getelementptr inbounds {i1, i1}, {i1, i1}* %53, i64 0, i32 0
	%428 = load i1, i1* %427, align 1
	%429 = icmp eq i1 %428, true
	br i1 %429, label %if.then-45, label %if.done-48

if.then-45:
	; b
	store i1 zeroinitializer, i1* %56
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %57
	store %__Map_Header zeroinitializer, %__Map_Header* %58
	%430 = getelementptr inbounds %__Map_Header, %__Map_Header* %58, i64 0, i32 0
	%431 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %431, %raw-6.Dynamic_Map** %430
	%432 = getelementptr inbounds %__Map_Header, %__Map_Header* %58, i64 0, i32 1
	store i1 true, i1* %432
	%433 = getelementptr inbounds %__Map_Header, %__Map_Header* %58, i64 0, i32 2
	store i64 40, i64* %433
	%434 = getelementptr inbounds %__Map_Header, %__Map_Header* %58, i64 0, i32 3
	store i64 8, i64* %434
	%435 = getelementptr inbounds %__Map_Header, %__Map_Header* %58, i64 0, i32 4
	store i64 32, i64* %435
	%436 = getelementptr inbounds %__Map_Header, %__Map_Header* %58, i64 0, i32 5
	store i64 1, i64* %436
	%437 = load %__Map_Header, %__Map_Header* %58, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %59
	%438 = getelementptr inbounds %__Map_Key, %__Map_Key* %59, i64 0, i32 0
	store i64 2202226828205582596, i64* %438
	%439 = getelementptr inbounds %__Map_Key, %__Map_Key* %59, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$5a, i64 0, i32 0), i64 16}, %..string* %439
	%440 = load %__Map_Key, %__Map_Key* %59, align 8
	%441 = call %..rawptr @.__dynamic_map_get(%__Map_Header %437, %__Map_Key %440)
	%442 = icmp ne %..rawptr %441, null
	%443 = getelementptr inbounds {i1, i1}, {i1, i1}* %57, i64 0, i32 1
	store i1 %442, i1* %443
	br i1 %442, label %map.get.then-46, label %map.get.done-47

map.get.then-46:
	%444 = getelementptr inbounds {i1, i1}, {i1, i1}* %57, i64 0, i32 0
	%445 = bitcast %..rawptr %441 to i1*
	%446 = load i1, i1* %445, align 1
	store i1 %446, i1* %444
	br label %map.get.done-47

map.get.done-47:
	%447 = getelementptr inbounds {i1, i1}, {i1, i1}* %57, i64 0, i32 0
	%448 = load i1, i1* %447, align 1
	store i1 %448, i1* %56
	; SelectorExpr
	%449 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%450 = getelementptr inbounds i1, i1* %56, i64 0
	call void @.jaze_debug_windows-16.Win32VarsInfo(%main-2.Win32Vars_t* %449, i1* %450)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%451 = load i1, i1* %56, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %60
	%452 = getelementptr inbounds %__Map_Header, %__Map_Header* %60, i64 0, i32 0
	%453 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %453, %raw-6.Dynamic_Map** %452
	%454 = getelementptr inbounds %__Map_Header, %__Map_Header* %60, i64 0, i32 1
	store i1 true, i1* %454
	%455 = getelementptr inbounds %__Map_Header, %__Map_Header* %60, i64 0, i32 2
	store i64 40, i64* %455
	%456 = getelementptr inbounds %__Map_Header, %__Map_Header* %60, i64 0, i32 3
	store i64 8, i64* %456
	%457 = getelementptr inbounds %__Map_Header, %__Map_Header* %60, i64 0, i32 4
	store i64 32, i64* %457
	%458 = getelementptr inbounds %__Map_Header, %__Map_Header* %60, i64 0, i32 5
	store i64 1, i64* %458
	%459 = load %__Map_Header, %__Map_Header* %60, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %61
	%460 = getelementptr inbounds %__Map_Key, %__Map_Key* %61, i64 0, i32 0
	store i64 2202226828205582596, i64* %460
	%461 = getelementptr inbounds %__Map_Key, %__Map_Key* %61, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$5b, i64 0, i32 0), i64 16}, %..string* %461
	%462 = load %__Map_Key, %__Map_Key* %61, align 8
	store i1 zeroinitializer, i1* %62
	store i1 %451, i1* %62
	%463 = bitcast i1* %62 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %459, %__Map_Key %462, %..rawptr %463)
	br label %if.done-48

if.done-48:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %63
	store %__Map_Header zeroinitializer, %__Map_Header* %64
	%464 = getelementptr inbounds %__Map_Header, %__Map_Header* %64, i64 0, i32 0
	%465 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %465, %raw-6.Dynamic_Map** %464
	%466 = getelementptr inbounds %__Map_Header, %__Map_Header* %64, i64 0, i32 1
	store i1 true, i1* %466
	%467 = getelementptr inbounds %__Map_Header, %__Map_Header* %64, i64 0, i32 2
	store i64 40, i64* %467
	%468 = getelementptr inbounds %__Map_Header, %__Map_Header* %64, i64 0, i32 3
	store i64 8, i64* %468
	%469 = getelementptr inbounds %__Map_Header, %__Map_Header* %64, i64 0, i32 4
	store i64 32, i64* %469
	%470 = getelementptr inbounds %__Map_Header, %__Map_Header* %64, i64 0, i32 5
	store i64 1, i64* %470
	%471 = load %__Map_Header, %__Map_Header* %64, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %65
	%472 = getelementptr inbounds %__Map_Key, %__Map_Key* %65, i64 0, i32 0
	store i64 8221518982030458364, i64* %472
	%473 = getelementptr inbounds %__Map_Key, %__Map_Key* %65, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$5c, i64 0, i32 0), i64 14}, %..string* %473
	%474 = load %__Map_Key, %__Map_Key* %65, align 8
	%475 = call %..rawptr @.__dynamic_map_get(%__Map_Header %471, %__Map_Key %474)
	%476 = icmp ne %..rawptr %475, null
	%477 = getelementptr inbounds {i1, i1}, {i1, i1}* %63, i64 0, i32 1
	store i1 %476, i1* %477
	br i1 %476, label %map.get.then-49, label %map.get.done-50

map.get.then-49:
	%478 = getelementptr inbounds {i1, i1}, {i1, i1}* %63, i64 0, i32 0
	%479 = bitcast %..rawptr %475 to i1*
	%480 = load i1, i1* %479, align 1
	store i1 %480, i1* %478
	br label %map.get.done-50

map.get.done-50:
	%481 = getelementptr inbounds {i1, i1}, {i1, i1}* %63, i64 0, i32 0
	%482 = load i1, i1* %481, align 1
	br i1 %482, label %if.then-51, label %if.done-54

if.then-51:
	; b
	store i1 zeroinitializer, i1* %66
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %67
	store %__Map_Header zeroinitializer, %__Map_Header* %68
	%483 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 0
	%484 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %484, %raw-6.Dynamic_Map** %483
	%485 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 1
	store i1 true, i1* %485
	%486 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 2
	store i64 40, i64* %486
	%487 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 3
	store i64 8, i64* %487
	%488 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 4
	store i64 32, i64* %488
	%489 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 5
	store i64 1, i64* %489
	%490 = load %__Map_Header, %__Map_Header* %68, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %69
	%491 = getelementptr inbounds %__Map_Key, %__Map_Key* %69, i64 0, i32 0
	store i64 8221518982030458364, i64* %491
	%492 = getelementptr inbounds %__Map_Key, %__Map_Key* %69, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$5d, i64 0, i32 0), i64 14}, %..string* %492
	%493 = load %__Map_Key, %__Map_Key* %69, align 8
	%494 = call %..rawptr @.__dynamic_map_get(%__Map_Header %490, %__Map_Key %493)
	%495 = icmp ne %..rawptr %494, null
	%496 = getelementptr inbounds {i1, i1}, {i1, i1}* %67, i64 0, i32 1
	store i1 %495, i1* %496
	br i1 %495, label %map.get.then-52, label %map.get.done-53

map.get.then-52:
	%497 = getelementptr inbounds {i1, i1}, {i1, i1}* %67, i64 0, i32 0
	%498 = bitcast %..rawptr %494 to i1*
	%499 = load i1, i1* %498, align 1
	store i1 %499, i1* %497
	br label %map.get.done-53

map.get.done-53:
	%500 = getelementptr inbounds {i1, i1}, {i1, i1}* %67, i64 0, i32 0
	%501 = load i1, i1* %500, align 1
	store i1 %501, i1* %66
	; SelectorExpr
	%502 = getelementptr inbounds i1, i1* %66, i64 0
	call void @.jaze_debug_windows-16.ShowXinputInfoWindow(i1* %502)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%503 = load i1, i1* %66, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %70
	%504 = getelementptr inbounds %__Map_Header, %__Map_Header* %70, i64 0, i32 0
	%505 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %505, %raw-6.Dynamic_Map** %504
	%506 = getelementptr inbounds %__Map_Header, %__Map_Header* %70, i64 0, i32 1
	store i1 true, i1* %506
	%507 = getelementptr inbounds %__Map_Header, %__Map_Header* %70, i64 0, i32 2
	store i64 40, i64* %507
	%508 = getelementptr inbounds %__Map_Header, %__Map_Header* %70, i64 0, i32 3
	store i64 8, i64* %508
	%509 = getelementptr inbounds %__Map_Header, %__Map_Header* %70, i64 0, i32 4
	store i64 32, i64* %509
	%510 = getelementptr inbounds %__Map_Header, %__Map_Header* %70, i64 0, i32 5
	store i64 1, i64* %510
	%511 = load %__Map_Header, %__Map_Header* %70, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %71
	%512 = getelementptr inbounds %__Map_Key, %__Map_Key* %71, i64 0, i32 0
	store i64 8221518982030458364, i64* %512
	%513 = getelementptr inbounds %__Map_Key, %__Map_Key* %71, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$5e, i64 0, i32 0), i64 14}, %..string* %513
	%514 = load %__Map_Key, %__Map_Key* %71, align 8
	store i1 zeroinitializer, i1* %72
	store i1 %503, i1* %72
	%515 = bitcast i1* %72 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %511, %__Map_Key %514, %..rawptr %515)
	br label %if.done-54

if.done-54:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %73
	store %__Map_Header zeroinitializer, %__Map_Header* %74
	%516 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 0
	%517 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %517, %raw-6.Dynamic_Map** %516
	%518 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 1
	store i1 true, i1* %518
	%519 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 2
	store i64 40, i64* %519
	%520 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 3
	store i64 8, i64* %520
	%521 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 4
	store i64 32, i64* %521
	%522 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 5
	store i64 1, i64* %522
	%523 = load %__Map_Header, %__Map_Header* %74, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %75
	%524 = getelementptr inbounds %__Map_Key, %__Map_Key* %75, i64 0, i32 0
	store i64 354564790537078517, i64* %524
	%525 = getelementptr inbounds %__Map_Key, %__Map_Key* %75, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$5f, i64 0, i32 0), i64 15}, %..string* %525
	%526 = load %__Map_Key, %__Map_Key* %75, align 8
	%527 = call %..rawptr @.__dynamic_map_get(%__Map_Header %523, %__Map_Key %526)
	%528 = icmp ne %..rawptr %527, null
	%529 = getelementptr inbounds {i1, i1}, {i1, i1}* %73, i64 0, i32 1
	store i1 %528, i1* %529
	br i1 %528, label %map.get.then-55, label %map.get.done-56

map.get.then-55:
	%530 = getelementptr inbounds {i1, i1}, {i1, i1}* %73, i64 0, i32 0
	%531 = bitcast %..rawptr %527 to i1*
	%532 = load i1, i1* %531, align 1
	store i1 %532, i1* %530
	br label %map.get.done-56

map.get.done-56:
	%533 = getelementptr inbounds {i1, i1}, {i1, i1}* %73, i64 0, i32 0
	%534 = load i1, i1* %533, align 1
	br i1 %534, label %if.then-57, label %if.done-60

if.then-57:
	; b
	store i1 zeroinitializer, i1* %76
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %77
	store %__Map_Header zeroinitializer, %__Map_Header* %78
	%535 = getelementptr inbounds %__Map_Header, %__Map_Header* %78, i64 0, i32 0
	%536 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %536, %raw-6.Dynamic_Map** %535
	%537 = getelementptr inbounds %__Map_Header, %__Map_Header* %78, i64 0, i32 1
	store i1 true, i1* %537
	%538 = getelementptr inbounds %__Map_Header, %__Map_Header* %78, i64 0, i32 2
	store i64 40, i64* %538
	%539 = getelementptr inbounds %__Map_Header, %__Map_Header* %78, i64 0, i32 3
	store i64 8, i64* %539
	%540 = getelementptr inbounds %__Map_Header, %__Map_Header* %78, i64 0, i32 4
	store i64 32, i64* %540
	%541 = getelementptr inbounds %__Map_Header, %__Map_Header* %78, i64 0, i32 5
	store i64 1, i64* %541
	%542 = load %__Map_Header, %__Map_Header* %78, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %79
	%543 = getelementptr inbounds %__Map_Key, %__Map_Key* %79, i64 0, i32 0
	store i64 354564790537078517, i64* %543
	%544 = getelementptr inbounds %__Map_Key, %__Map_Key* %79, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$60, i64 0, i32 0), i64 15}, %..string* %544
	%545 = load %__Map_Key, %__Map_Key* %79, align 8
	%546 = call %..rawptr @.__dynamic_map_get(%__Map_Header %542, %__Map_Key %545)
	%547 = icmp ne %..rawptr %546, null
	%548 = getelementptr inbounds {i1, i1}, {i1, i1}* %77, i64 0, i32 1
	store i1 %547, i1* %548
	br i1 %547, label %map.get.then-58, label %map.get.done-59

map.get.then-58:
	%549 = getelementptr inbounds {i1, i1}, {i1, i1}* %77, i64 0, i32 0
	%550 = bitcast %..rawptr %546 to i1*
	%551 = load i1, i1* %550, align 1
	store i1 %551, i1* %549
	br label %map.get.done-59

map.get.done-59:
	%552 = getelementptr inbounds {i1, i1}, {i1, i1}* %77, i64 0, i32 0
	%553 = load i1, i1* %552, align 1
	store i1 %553, i1* %76
	; SelectorExpr
	%554 = getelementptr inbounds i1, i1* %76, i64 0
	call void @.jaze_debug_windows-16.ShowXinputStateWindow(i1* %554)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%555 = load i1, i1* %76, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %80
	%556 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 0
	%557 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %557, %raw-6.Dynamic_Map** %556
	%558 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 1
	store i1 true, i1* %558
	%559 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 2
	store i64 40, i64* %559
	%560 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 3
	store i64 8, i64* %560
	%561 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 4
	store i64 32, i64* %561
	%562 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 5
	store i64 1, i64* %562
	%563 = load %__Map_Header, %__Map_Header* %80, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %81
	%564 = getelementptr inbounds %__Map_Key, %__Map_Key* %81, i64 0, i32 0
	store i64 354564790537078517, i64* %564
	%565 = getelementptr inbounds %__Map_Key, %__Map_Key* %81, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$61, i64 0, i32 0), i64 15}, %..string* %565
	%566 = load %__Map_Key, %__Map_Key* %81, align 8
	store i1 zeroinitializer, i1* %82
	store i1 %555, i1* %82
	%567 = bitcast i1* %82 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %563, %__Map_Key %566, %..rawptr %567)
	br label %if.done-60

if.done-60:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %83
	store %__Map_Header zeroinitializer, %__Map_Header* %84
	%568 = getelementptr inbounds %__Map_Header, %__Map_Header* %84, i64 0, i32 0
	%569 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %569, %raw-6.Dynamic_Map** %568
	%570 = getelementptr inbounds %__Map_Header, %__Map_Header* %84, i64 0, i32 1
	store i1 true, i1* %570
	%571 = getelementptr inbounds %__Map_Header, %__Map_Header* %84, i64 0, i32 2
	store i64 40, i64* %571
	%572 = getelementptr inbounds %__Map_Header, %__Map_Header* %84, i64 0, i32 3
	store i64 8, i64* %572
	%573 = getelementptr inbounds %__Map_Header, %__Map_Header* %84, i64 0, i32 4
	store i64 32, i64* %573
	%574 = getelementptr inbounds %__Map_Header, %__Map_Header* %84, i64 0, i32 5
	store i64 1, i64* %574
	%575 = load %__Map_Header, %__Map_Header* %84, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %85
	%576 = getelementptr inbounds %__Map_Key, %__Map_Key* %85, i64 0, i32 0
	store i64 9180840996585617949, i64* %576
	%577 = getelementptr inbounds %__Map_Key, %__Map_Key* %85, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$62, i64 0, i32 0), i64 12}, %..string* %577
	%578 = load %__Map_Key, %__Map_Key* %85, align 8
	%579 = call %..rawptr @.__dynamic_map_get(%__Map_Header %575, %__Map_Key %578)
	%580 = icmp ne %..rawptr %579, null
	%581 = getelementptr inbounds {i1, i1}, {i1, i1}* %83, i64 0, i32 1
	store i1 %580, i1* %581
	br i1 %580, label %map.get.then-61, label %map.get.done-62

map.get.then-61:
	%582 = getelementptr inbounds {i1, i1}, {i1, i1}* %83, i64 0, i32 0
	%583 = bitcast %..rawptr %579 to i1*
	%584 = load i1, i1* %583, align 1
	store i1 %584, i1* %582
	br label %map.get.done-62

map.get.done-62:
	%585 = getelementptr inbounds {i1, i1}, {i1, i1}* %83, i64 0, i32 0
	%586 = load i1, i1* %585, align 1
	br i1 %586, label %if.then-63, label %if.done-66

if.then-63:
	; b
	store i1 zeroinitializer, i1* %86
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %87
	store %__Map_Header zeroinitializer, %__Map_Header* %88
	%587 = getelementptr inbounds %__Map_Header, %__Map_Header* %88, i64 0, i32 0
	%588 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %588, %raw-6.Dynamic_Map** %587
	%589 = getelementptr inbounds %__Map_Header, %__Map_Header* %88, i64 0, i32 1
	store i1 true, i1* %589
	%590 = getelementptr inbounds %__Map_Header, %__Map_Header* %88, i64 0, i32 2
	store i64 40, i64* %590
	%591 = getelementptr inbounds %__Map_Header, %__Map_Header* %88, i64 0, i32 3
	store i64 8, i64* %591
	%592 = getelementptr inbounds %__Map_Header, %__Map_Header* %88, i64 0, i32 4
	store i64 32, i64* %592
	%593 = getelementptr inbounds %__Map_Header, %__Map_Header* %88, i64 0, i32 5
	store i64 1, i64* %593
	%594 = load %__Map_Header, %__Map_Header* %88, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %89
	%595 = getelementptr inbounds %__Map_Key, %__Map_Key* %89, i64 0, i32 0
	store i64 9180840996585617949, i64* %595
	%596 = getelementptr inbounds %__Map_Key, %__Map_Key* %89, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$63, i64 0, i32 0), i64 12}, %..string* %596
	%597 = load %__Map_Key, %__Map_Key* %89, align 8
	%598 = call %..rawptr @.__dynamic_map_get(%__Map_Header %594, %__Map_Key %597)
	%599 = icmp ne %..rawptr %598, null
	%600 = getelementptr inbounds {i1, i1}, {i1, i1}* %87, i64 0, i32 1
	store i1 %599, i1* %600
	br i1 %599, label %map.get.then-64, label %map.get.done-65

map.get.then-64:
	%601 = getelementptr inbounds {i1, i1}, {i1, i1}* %87, i64 0, i32 0
	%602 = bitcast %..rawptr %598 to i1*
	%603 = load i1, i1* %602, align 1
	store i1 %603, i1* %601
	br label %map.get.done-65

map.get.done-65:
	%604 = getelementptr inbounds {i1, i1}, {i1, i1}* %87, i64 0, i32 0
	%605 = load i1, i1* %604, align 1
	store i1 %605, i1* %86
	; SelectorExpr
	%606 = getelementptr inbounds i1, i1* %86, i64 0
	call void @.jaze_debug_windows-16.ShowTimeDataWindow(i1* %606)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%607 = load i1, i1* %86, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %90
	%608 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 0
	%609 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %609, %raw-6.Dynamic_Map** %608
	%610 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 1
	store i1 true, i1* %610
	%611 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 2
	store i64 40, i64* %611
	%612 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 3
	store i64 8, i64* %612
	%613 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 4
	store i64 32, i64* %613
	%614 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 5
	store i64 1, i64* %614
	%615 = load %__Map_Header, %__Map_Header* %90, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %91
	%616 = getelementptr inbounds %__Map_Key, %__Map_Key* %91, i64 0, i32 0
	store i64 9180840996585617949, i64* %616
	%617 = getelementptr inbounds %__Map_Key, %__Map_Key* %91, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$64, i64 0, i32 0), i64 12}, %..string* %617
	%618 = load %__Map_Key, %__Map_Key* %91, align 8
	store i1 zeroinitializer, i1* %92
	store i1 %607, i1* %92
	%619 = bitcast i1* %92 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %615, %__Map_Key %618, %..rawptr %619)
	br label %if.done-66

if.done-66:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %93
	store %__Map_Header zeroinitializer, %__Map_Header* %94
	%620 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 0
	%621 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %621, %raw-6.Dynamic_Map** %620
	%622 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 1
	store i1 true, i1* %622
	%623 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 2
	store i64 40, i64* %623
	%624 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 3
	store i64 8, i64* %624
	%625 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 4
	store i64 32, i64* %625
	%626 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 5
	store i64 1, i64* %626
	%627 = load %__Map_Header, %__Map_Header* %94, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %95
	%628 = getelementptr inbounds %__Map_Key, %__Map_Key* %95, i64 0, i32 0
	store i64 -3762562292824174117, i64* %628
	%629 = getelementptr inbounds %__Map_Key, %__Map_Key* %95, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$65, i64 0, i32 0), i64 17}, %..string* %629
	%630 = load %__Map_Key, %__Map_Key* %95, align 8
	%631 = call %..rawptr @.__dynamic_map_get(%__Map_Header %627, %__Map_Key %630)
	%632 = icmp ne %..rawptr %631, null
	%633 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 1
	store i1 %632, i1* %633
	br i1 %632, label %map.get.then-67, label %map.get.done-68

map.get.then-67:
	%634 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 0
	%635 = bitcast %..rawptr %631 to i1*
	%636 = load i1, i1* %635, align 1
	store i1 %636, i1* %634
	br label %map.get.done-68

map.get.done-68:
	%637 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 0
	%638 = load i1, i1* %637, align 1
	br i1 %638, label %if.then-69, label %if.done-72

if.then-69:
	; b
	store i1 zeroinitializer, i1* %96
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %97
	store %__Map_Header zeroinitializer, %__Map_Header* %98
	%639 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 0
	%640 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %640, %raw-6.Dynamic_Map** %639
	%641 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 1
	store i1 true, i1* %641
	%642 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 2
	store i64 40, i64* %642
	%643 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 3
	store i64 8, i64* %643
	%644 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 4
	store i64 32, i64* %644
	%645 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 5
	store i64 1, i64* %645
	%646 = load %__Map_Header, %__Map_Header* %98, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %99
	%647 = getelementptr inbounds %__Map_Key, %__Map_Key* %99, i64 0, i32 0
	store i64 -3762562292824174117, i64* %647
	%648 = getelementptr inbounds %__Map_Key, %__Map_Key* %99, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$66, i64 0, i32 0), i64 17}, %..string* %648
	%649 = load %__Map_Key, %__Map_Key* %99, align 8
	%650 = call %..rawptr @.__dynamic_map_get(%__Map_Header %646, %__Map_Key %649)
	%651 = icmp ne %..rawptr %650, null
	%652 = getelementptr inbounds {i1, i1}, {i1, i1}* %97, i64 0, i32 1
	store i1 %651, i1* %652
	br i1 %651, label %map.get.then-70, label %map.get.done-71

map.get.then-70:
	%653 = getelementptr inbounds {i1, i1}, {i1, i1}* %97, i64 0, i32 0
	%654 = bitcast %..rawptr %650 to i1*
	%655 = load i1, i1* %654, align 1
	store i1 %655, i1* %653
	br label %map.get.done-71

map.get.done-71:
	%656 = getelementptr inbounds {i1, i1}, {i1, i1}* %97, i64 0, i32 0
	%657 = load i1, i1* %656, align 1
	store i1 %657, i1* %96
	; SelectorExpr
	%658 = getelementptr inbounds i1, i1* %96, i64 0
	call void @.jaze_debug_windows-16.ShowCatalogWindow(i1* %658)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%659 = load i1, i1* %96, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %100
	%660 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 0
	%661 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %661, %raw-6.Dynamic_Map** %660
	%662 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 1
	store i1 true, i1* %662
	%663 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 2
	store i64 40, i64* %663
	%664 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 3
	store i64 8, i64* %664
	%665 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 4
	store i64 32, i64* %665
	%666 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 5
	store i64 1, i64* %666
	%667 = load %__Map_Header, %__Map_Header* %100, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %101
	%668 = getelementptr inbounds %__Map_Key, %__Map_Key* %101, i64 0, i32 0
	store i64 -3762562292824174117, i64* %668
	%669 = getelementptr inbounds %__Map_Key, %__Map_Key* %101, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$67, i64 0, i32 0), i64 17}, %..string* %669
	%670 = load %__Map_Key, %__Map_Key* %101, align 8
	store i1 zeroinitializer, i1* %102
	store i1 %659, i1* %102
	%671 = bitcast i1* %102 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %667, %__Map_Key %670, %..rawptr %671)
	br label %if.done-72

if.done-72:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %103
	store %__Map_Header zeroinitializer, %__Map_Header* %104
	%672 = getelementptr inbounds %__Map_Header, %__Map_Header* %104, i64 0, i32 0
	%673 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %673, %raw-6.Dynamic_Map** %672
	%674 = getelementptr inbounds %__Map_Header, %__Map_Header* %104, i64 0, i32 1
	store i1 true, i1* %674
	%675 = getelementptr inbounds %__Map_Header, %__Map_Header* %104, i64 0, i32 2
	store i64 40, i64* %675
	%676 = getelementptr inbounds %__Map_Header, %__Map_Header* %104, i64 0, i32 3
	store i64 8, i64* %676
	%677 = getelementptr inbounds %__Map_Header, %__Map_Header* %104, i64 0, i32 4
	store i64 32, i64* %677
	%678 = getelementptr inbounds %__Map_Header, %__Map_Header* %104, i64 0, i32 5
	store i64 1, i64* %678
	%679 = load %__Map_Header, %__Map_Header* %104, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %105
	%680 = getelementptr inbounds %__Map_Key, %__Map_Key* %105, i64 0, i32 0
	store i64 -6145881643456605148, i64* %680
	%681 = getelementptr inbounds %__Map_Key, %__Map_Key* %105, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$68, i64 0, i32 0), i64 14}, %..string* %681
	%682 = load %__Map_Key, %__Map_Key* %105, align 8
	%683 = call %..rawptr @.__dynamic_map_get(%__Map_Header %679, %__Map_Key %682)
	%684 = icmp ne %..rawptr %683, null
	%685 = getelementptr inbounds {i1, i1}, {i1, i1}* %103, i64 0, i32 1
	store i1 %684, i1* %685
	br i1 %684, label %map.get.then-73, label %map.get.done-74

map.get.then-73:
	%686 = getelementptr inbounds {i1, i1}, {i1, i1}* %103, i64 0, i32 0
	%687 = bitcast %..rawptr %683 to i1*
	%688 = load i1, i1* %687, align 1
	store i1 %688, i1* %686
	br label %map.get.done-74

map.get.done-74:
	%689 = getelementptr inbounds {i1, i1}, {i1, i1}* %103, i64 0, i32 0
	%690 = load i1, i1* %689, align 1
	br i1 %690, label %if.then-75, label %if.done-78

if.then-75:
	; b
	store i1 zeroinitializer, i1* %106
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %107
	store %__Map_Header zeroinitializer, %__Map_Header* %108
	%691 = getelementptr inbounds %__Map_Header, %__Map_Header* %108, i64 0, i32 0
	%692 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %692, %raw-6.Dynamic_Map** %691
	%693 = getelementptr inbounds %__Map_Header, %__Map_Header* %108, i64 0, i32 1
	store i1 true, i1* %693
	%694 = getelementptr inbounds %__Map_Header, %__Map_Header* %108, i64 0, i32 2
	store i64 40, i64* %694
	%695 = getelementptr inbounds %__Map_Header, %__Map_Header* %108, i64 0, i32 3
	store i64 8, i64* %695
	%696 = getelementptr inbounds %__Map_Header, %__Map_Header* %108, i64 0, i32 4
	store i64 32, i64* %696
	%697 = getelementptr inbounds %__Map_Header, %__Map_Header* %108, i64 0, i32 5
	store i64 1, i64* %697
	%698 = load %__Map_Header, %__Map_Header* %108, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %109
	%699 = getelementptr inbounds %__Map_Key, %__Map_Key* %109, i64 0, i32 0
	store i64 -6145881643456605148, i64* %699
	%700 = getelementptr inbounds %__Map_Key, %__Map_Key* %109, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$69, i64 0, i32 0), i64 14}, %..string* %700
	%701 = load %__Map_Key, %__Map_Key* %109, align 8
	%702 = call %..rawptr @.__dynamic_map_get(%__Map_Header %698, %__Map_Key %701)
	%703 = icmp ne %..rawptr %702, null
	%704 = getelementptr inbounds {i1, i1}, {i1, i1}* %107, i64 0, i32 1
	store i1 %703, i1* %704
	br i1 %703, label %map.get.then-76, label %map.get.done-77

map.get.then-76:
	%705 = getelementptr inbounds {i1, i1}, {i1, i1}* %107, i64 0, i32 0
	%706 = bitcast %..rawptr %702 to i1*
	%707 = load i1, i1* %706, align 1
	store i1 %707, i1* %705
	br label %map.get.done-77

map.get.done-77:
	%708 = getelementptr inbounds {i1, i1}, {i1, i1}* %107, i64 0, i32 0
	%709 = load i1, i1* %708, align 1
	store i1 %709, i1* %106
	; SelectorExpr
	%710 = getelementptr inbounds i1, i1* %106, i64 0
	call ccc void @igShowTestWindow(i1* %710)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%711 = load i1, i1* %106, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %110
	%712 = getelementptr inbounds %__Map_Header, %__Map_Header* %110, i64 0, i32 0
	%713 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %713, %raw-6.Dynamic_Map** %712
	%714 = getelementptr inbounds %__Map_Header, %__Map_Header* %110, i64 0, i32 1
	store i1 true, i1* %714
	%715 = getelementptr inbounds %__Map_Header, %__Map_Header* %110, i64 0, i32 2
	store i64 40, i64* %715
	%716 = getelementptr inbounds %__Map_Header, %__Map_Header* %110, i64 0, i32 3
	store i64 8, i64* %716
	%717 = getelementptr inbounds %__Map_Header, %__Map_Header* %110, i64 0, i32 4
	store i64 32, i64* %717
	%718 = getelementptr inbounds %__Map_Header, %__Map_Header* %110, i64 0, i32 5
	store i64 1, i64* %718
	%719 = load %__Map_Header, %__Map_Header* %110, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %111
	%720 = getelementptr inbounds %__Map_Key, %__Map_Key* %111, i64 0, i32 0
	store i64 -6145881643456605148, i64* %720
	%721 = getelementptr inbounds %__Map_Key, %__Map_Key* %111, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$6a, i64 0, i32 0), i64 14}, %..string* %721
	%722 = load %__Map_Key, %__Map_Key* %111, align 8
	store i1 zeroinitializer, i1* %112
	store i1 %711, i1* %112
	%723 = bitcast i1* %112 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %719, %__Map_Key %722, %..rawptr %723)
	br label %if.done-78

if.done-78:
	ret void
}

define void @main() {
decls-0:
	%0 = alloca %main-2.Win32Vars_t, align 8
	%1 = alloca [1024 x i8], align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca {%..any*, i64, i64}, align 8
	%7 = alloca [2 x %..any], align 8
	%8 = alloca float, align 4
	%9 = alloca %jaze_catalog-21.Catalog*, align 8
	%10 = alloca %jaze_catalog-21.Catalog*, align 8
	%11 = alloca %windows-7.Msg, align 8
	%12 = alloca %imgui-12.GuiStyle*, align 8
	%13 = alloca %imgui-12.GuiStyle*, align 8
	%14 = alloca {i8*, i64, i64}, align 8
	%15 = alloca %..any, align 8
	%16 = alloca %..any, align 8
	%17 = alloca double, align 8
	%18 = alloca %..any, align 8
	%19 = alloca double, align 8
	%20 = alloca %..any, align 8
	%21 = alloca double, align 8
	%22 = alloca {%..any*, i64, i64}, align 8
	%23 = alloca [4 x %..any], align 8
	call void @.__$startup_runtime()
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_win32-13.WINDOWPLACEMENT, %jaze_win32-13.WINDOWPLACEMENT* @main-2.GlobalWindowPosition, i64 0, i32 0
	store i32 44, i32* %24
	; win32vars
	store %main-2.Win32Vars_t zeroinitializer, %main-2.Win32Vars_t* %0
		store %main-2.Win32Vars_t zeroinitializer, %main-2.Win32Vars_t* %0
	; AssignStmt
	%25 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	store %main-2.Win32Vars_t* %25, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 1
	; SelectorExpr
	%27 = call ccc %..rawptr @GetModuleHandleA(i8* zeroinitializer)
	store %..rawptr %27, %..rawptr* %26
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	; SelectorExpr
	%29 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 1
	%30 = load %..rawptr, %..rawptr* %29, align 8
	%31 = call %..rawptr @.main-2.CreateWindow(%..rawptr %30)
	store %..rawptr %31, %..rawptr* %28
	; AssignStmt
	; SelectorExpr
	%32 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	; SelectorExpr
	; SelectorExpr
	%33 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%34 = load %..rawptr, %..rawptr* %33, align 8
	%35 = call ccc %..rawptr @GetDC(%..rawptr %34)
	store %..rawptr %35, %..rawptr* %32
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%36 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%37 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %36, i64 0, i32 6
	%38 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	%39 = call %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %38, i1 true)
	store %..rawptr %39, %..rawptr* %37
	; SelectorExpr
	call void @.jaze_gl-14.Init()
	; SelectorExpr
	call void @.jaze_gl-14.DebugMessageCallback(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* @.main-2.OpenGLDebugCallback, %..rawptr zeroinitializer)
	; SelectorExpr
	call void @.jaze_gl-14.Enable(i32 33346)
	; SelectorExpr
	call void @.jaze_gl-14.DebugMessageControl(i32 4352, i32 4352, i32 33387, i32 0, i32* zeroinitializer, i1 false)
	; SelectorExpr
	; SelectorExpr
	%40 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%41 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %40, i64 0
	call void @.jaze_gl-14.GetInfo(%jaze_gl-14.OpenGLVars_t* %41)
	; SelectorExpr
	; SelectorExpr
	%42 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%43 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %42, i64 0
	; SelectorExpr
	%44 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	%45 = load %..rawptr, %..rawptr* %44, align 8
	call void @.jaze_wgl-15.GetInfo(%jaze_gl-14.OpenGLVars_t* %43, %..rawptr %45)
	; TitleBuf
	store [1024 x i8] zeroinitializer, [1024 x i8]* %1
		; SelectorExpr
	; SliceExpr
	%46 = load [1024 x i8], [1024 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$6b, i64 0, i32 0), i64 31}, i64 351, i64 24, i64 0, i64 0, i64 1024)
	%47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	%48 = getelementptr inbounds i8, i8* %47, i64 0
	%49 = sub i64 0, 0
	%50 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%51 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %48, i8** %51
	%52 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %49, i64* %52
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %50, i64* %53
	%54 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	; SelectorExpr
	; SelectorExpr
	%55 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%56 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %55, i64 0, i32 2
	%57 = load %..string, %..string* %56, align 8
	store %..string zeroinitializer, %..string* %3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$6c, i64 0, i32 0), i64 5}, %..string* %3
	%58 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%59 = bitcast %..string* %3 to %..rawptr
	%60 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%61 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%62 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %60, %Type_Info** %61
	store %..rawptr %59, %..rawptr* %62
	%63 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%64 = bitcast %..string* %56 to %..rawptr
	%65 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%66 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%67 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %65, %Type_Info** %66
	store %..rawptr %64, %..rawptr* %67
	%68 = load %..any, %..any* %5, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %6
	store [2 x %..any] zeroinitializer, [2 x %..any]* %7
	%69 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	store %..any %63, %..any* %69
	%70 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 1
	store %..any %68, %..any* %70
	%71 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	%72 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 0
	store %..any* %71, %..any** %72
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 1
	store i64 2, i64* %73
	%74 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 2
	store i64 2, i64* %74
	%75 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %6, align 8
	%76 = call %..string @.fmt-4.sprint({i8*, i64, i64} %54, {%..any*, i64, i64} %75)
	; SelectorExpr
	; SelectorExpr
	%77 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%78 = load %..rawptr, %..rawptr* %77, align 8
	; IndexExpr
	%79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$6d, i64 0, i32 0), i64 31}, i64 352, i64 60, i64 0, i64 1024)
	%80 = getelementptr inbounds i8, i8* %79, i64 0
	%81 = call ccc i32 @SetWindowTextA(%..rawptr %78, i8* %80)
	; col
	store float zeroinitializer, float* %8
		store float 0x3fcc1c1c00000000, float* %8
	; SelectorExpr
	%82 = load float, float* %8, align 4
	%83 = load float, float* %8, align 4
	%84 = load float, float* %8, align 4
	call ccc void @glClearColor(float %82, float %83, float %84, float 0x3ff0000000000000)
	; SelectorExpr
	; SelectorExpr
	%85 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%86 = load %..rawptr, %..rawptr* %85, align 8
	call void @.jaze_imgui-17.Init(%..rawptr %86)
	; AssignStmt
	store i1 true, i1* @main-2.ProgramRunning
	; SelectorExpr
	call void @.jaze_time-20.Init()
	; SelectorExpr
	%87 = load i1 (i32)*, i1 (i32)** @.jaze_wgl-15.SwapIntervalEXT, align 8
	%88 = call ccc i1 %87(i32 -1)
	; SelectorExpr
	%89 = call i1 @.jaze_xinput-18.Init()
	; SelectorExpr
	call void @.jaze_xinput-18.Enable(i1 true)
	; shaderCat
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %9
		; SelectorExpr
	%90 = call {%jaze_catalog-21.Catalog*, i64} @.jaze_catalog-21.CreateNew-2686136301616(i64 1, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$6e, i64 0, i32 0), i64 13}, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$6f, i64 0, i32 0), i64 7})
	%91 = extractvalue {%jaze_catalog-21.Catalog*, i64} %90, 0
	%92 = extractvalue {%jaze_catalog-21.Catalog*, i64} %90, 1
	store %jaze_catalog-21.Catalog* %91, %jaze_catalog-21.Catalog** %9
	; textureCat
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %10
		; SelectorExpr
	%93 = call {%jaze_catalog-21.Catalog*, i64} @.jaze_catalog-21.CreateNew-2686136301616(i64 0, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$70, i64 0, i32 0), i64 14}, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$71, i64 0, i32 0), i64 10})
	%94 = extractvalue {%jaze_catalog-21.Catalog*, i64} %93, 0
	%95 = extractvalue {%jaze_catalog-21.Catalog*, i64} %93, 1
	store %jaze_catalog-21.Catalog* %94, %jaze_catalog-21.Catalog** %10
	; SelectorExpr
	%96 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %9, align 8
	%97 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %10, align 8
	call void @.jaze_render-19.Init(%jaze_catalog-21.Catalog* %96, %jaze_catalog-21.Catalog* %97)
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%98 = load i1, i1* @main-2.ProgramRunning, align 1
	br i1 %98, label %for.body-2, label %for.done-29

for.body-2:
	; msg
	store %windows-7.Msg zeroinitializer, %windows-7.Msg* %11
		; ForStmt
	br label %for.loop-3

for.loop-3:
	; SelectorExpr
	%99 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0
	%100 = call ccc i32 @PeekMessageA(%windows-7.Msg* %99, %..rawptr zeroinitializer, i32 0, i32 0, i32 1)
	%101 = icmp eq i32 %100, 1
	br i1 %101, label %for.body-4, label %for.done-24

for.body-4:
	; MatchStmt
	; SelectorExpr
	%102 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0, i32 1
	%103 = load i32, i32* %102, align 4
	%104 = icmp eq i32 %103, 18
	br i1 %104, label %match.case.body-6, label %match.case.next-5

match.case.next-5:
	%105 = icmp eq i32 %103, 260
	br i1 %105, label %match.fall.body-8, label %match.case.next-7

match.case.body-6:
	; AssignStmt
	store i1 false, i1* @main-2.ProgramRunning
	br label %match.done-23

match.case.next-7:
	%106 = icmp eq i32 %103, 256
	br i1 %106, label %match.fall.body-14, label %match.case.next-13

match.fall.body-8:
	; IfStmt
	; SelectorExpr
	%107 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0, i32 2
	%108 = load i64, i64* %107, align 8
	; cast - cast
	%109 = trunc i64 %108 to i32
	%110 = icmp eq i32 %109, 13
	br i1 %110, label %if.then-9, label %if.done-10

if.then-9:
	; SelectorExpr
	%111 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%112 = load %..rawptr, %..rawptr* %111, align 8
	call void @.main-2.ToggleFullscreen(%..rawptr %112)
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%113 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0, i32 2
	%114 = load i64, i64* %113, align 8
	%115 = icmp eq i64 %114, 192
	br i1 %115, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	%116 = load i1, i1* @main-2.ShowDebugMenu, align 1
	%117 = xor i1 -1, %116
	store i1 %117, i1* @main-2.ShowDebugMenu
	br label %if.done-12

if.done-12:
	; continue
	br label %for.loop-3

match.case.next-13:
	%118 = icmp eq i32 %103, 257
	br i1 %118, label %match.fall.body-20, label %match.case.next-19

match.fall.body-14:
	; IfStmt
	; SelectorExpr
	%119 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0, i32 2
	%120 = load i64, i64* %119, align 8
	; cast - cast
	%121 = trunc i64 %120 to i32
	%122 = icmp eq i32 %121, 27
	br i1 %122, label %if.then-15, label %if.done-16

if.then-15:
	; SelectorExpr
	call ccc void @PostQuitMessage(i32 0)
	br label %if.done-16

if.done-16:
	; IfStmt
	; SelectorExpr
	%123 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0, i32 2
	%124 = load i64, i64* %123, align 8
	; cast - cast
	%125 = trunc i64 %124 to i32
	%126 = icmp eq i32 %125, 9
	br i1 %126, label %if.then-17, label %if.done-18

if.then-17:
	; style
	store %imgui-12.GuiStyle* zeroinitializer, %imgui-12.GuiStyle** %12
		; SelectorExpr
	%127 = call ccc %imgui-12.GuiStyle* @igGetStyle()
	store %imgui-12.GuiStyle* %127, %imgui-12.GuiStyle** %12
	; AssignStmt
	; SelectorExpr
	%128 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %12, align 8
	%129 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %128, i64 0
	%130 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %129, i64 0, i32 0
	store float 0x3fb9999980000000, float* %130
	br label %if.done-18

if.done-18:
	br label %match.done-23

match.case.next-19:
	br label %match.done-23

match.fall.body-20:
	; IfStmt
	; SelectorExpr
	%131 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0, i32 2
	%132 = load i64, i64* %131, align 8
	; cast - cast
	%133 = trunc i64 %132 to i32
	%134 = icmp eq i32 %133, 9
	br i1 %134, label %if.then-21, label %if.done-22

if.then-21:
	; style
	store %imgui-12.GuiStyle* zeroinitializer, %imgui-12.GuiStyle** %13
		; SelectorExpr
	%135 = call ccc %imgui-12.GuiStyle* @igGetStyle()
	store %imgui-12.GuiStyle* %135, %imgui-12.GuiStyle** %13
	; AssignStmt
	; SelectorExpr
	%136 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %13, align 8
	%137 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %136, i64 0
	%138 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %137, i64 0, i32 0
	store float 0x3ff0000000000000, float* %138
	br label %if.done-22

if.done-22:
	br label %match.done-23

match.done-23:
	; SelectorExpr
	%139 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0
	%140 = call ccc i32 @TranslateMessage(%windows-7.Msg* %139)
	; SelectorExpr
	%141 = getelementptr inbounds %windows-7.Msg, %windows-7.Msg* %11, i64 0
	%142 = call ccc i64 @DispatchMessageA(%windows-7.Msg* %141)
	br label %for.loop-3

for.done-24:
	; SelectorExpr
	call void @.jaze_time-20.Update()
	; SelectorExpr
	; SliceExpr
	%143 = load [1024 x i8], [1024 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$72, i64 0, i32 0), i64 31}, i64 414, i64 29, i64 0, i64 0, i64 1024)
	%144 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	%145 = getelementptr inbounds i8, i8* %144, i64 0
	%146 = sub i64 0, 0
	%147 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %14
	%148 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 0
	store i8* %145, i8** %148
	%149 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 1
	store i64 %146, i64* %149
	%150 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 2
	store i64 %147, i64* %150
	%151 = load {i8*, i64, i64}, {i8*, i64, i64}* %14, align 8
	; SelectorExpr
	; SelectorExpr
	%152 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%153 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %152, i64 0, i32 2
	%154 = load %..string, %..string* %153, align 8
	; SelectorExpr
	%155 = call double @.jaze_time-20.GetUnscaledDeltaTime()
	; SelectorExpr
	%156 = call double @.jaze_time-20.GetDeltaTime()
	; SelectorExpr
	%157 = call double @.jaze_time-20.GetTimeSinceStart()
	store %..any zeroinitializer, %..any* %15
	%158 = bitcast %..string* %153 to %..rawptr
	%159 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%160 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%161 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	store %Type_Info* %159, %Type_Info** %160
	store %..rawptr %158, %..rawptr* %161
	%162 = load %..any, %..any* %15, align 8
	store %..any zeroinitializer, %..any* %16
	store double zeroinitializer, double* %17
	store double %155, double* %17
	%163 = bitcast double* %17 to %..rawptr
	%164 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%165 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 0
	%166 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 1
	store %Type_Info* %164, %Type_Info** %165
	store %..rawptr %163, %..rawptr* %166
	%167 = load %..any, %..any* %16, align 8
	store %..any zeroinitializer, %..any* %18
	store double zeroinitializer, double* %19
	store double %156, double* %19
	%168 = bitcast double* %19 to %..rawptr
	%169 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%170 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%171 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %169, %Type_Info** %170
	store %..rawptr %168, %..rawptr* %171
	%172 = load %..any, %..any* %18, align 8
	store %..any zeroinitializer, %..any* %20
	store double zeroinitializer, double* %21
	store double %157, double* %21
	%173 = bitcast double* %21 to %..rawptr
	%174 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%175 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%176 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %174, %Type_Info** %175
	store %..rawptr %173, %..rawptr* %176
	%177 = load %..any, %..any* %20, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %22
	store [4 x %..any] zeroinitializer, [4 x %..any]* %23
	%178 = getelementptr inbounds [4 x %..any], [4 x %..any]* %23, i64 0, i32 0
	store %..any %162, %..any* %178
	%179 = getelementptr inbounds [4 x %..any], [4 x %..any]* %23, i64 0, i32 1
	store %..any %167, %..any* %179
	%180 = getelementptr inbounds [4 x %..any], [4 x %..any]* %23, i64 0, i32 2
	store %..any %172, %..any* %180
	%181 = getelementptr inbounds [4 x %..any], [4 x %..any]* %23, i64 0, i32 3
	store %..any %177, %..any* %181
	%182 = getelementptr inbounds [4 x %..any], [4 x %..any]* %23, i64 0, i32 0
	%183 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %22, i64 0, i32 0
	store %..any* %182, %..any** %183
	%184 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %22, i64 0, i32 1
	store i64 4, i64* %184
	%185 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %22, i64 0, i32 2
	store i64 4, i64* %185
	%186 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %22, align 8
	%187 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %151, %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$73, i64 0, i32 0), i64 37}, {%..any*, i64, i64} %186)
	; SelectorExpr
	; SelectorExpr
	%188 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%189 = load %..rawptr, %..rawptr* %188, align 8
	; IndexExpr
	%190 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$74, i64 0, i32 0), i64 31}, i64 415, i64 64, i64 0, i64 1024)
	%191 = getelementptr inbounds i8, i8* %190, i64 0
	%192 = call ccc i32 @SetWindowTextA(%..rawptr %189, i8* %191)
	; IfStmt
	%193 = load i1, i1* @main-2.ShowDebugMenu, align 1
	br i1 %193, label %if.then-25, label %if.done-26

if.then-25:
	; SelectorExpr
	; SelectorExpr
	%194 = call double @.jaze_time-20.GetUnscaledDeltaTime()
	call void @.jaze_imgui-17.BeginNewFrame(double %194)
	%195 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	call void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %195)
	br label %if.done-26

if.done-26:
	; SelectorExpr
	call void @.jaze_gl-14.Clear(i32 16640)
	; SelectorExpr
	; SelectorExpr
	%196 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 3
	%197 = load {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %196, align 8
	call void @.jaze_render-19.Draw({[0 x <8 x i8>], [2 x float]} %197)
	; IfStmt
	%198 = load i1, i1* @main-2.ShowDebugMenu, align 1
	br i1 %198, label %if.then-27, label %if.done-28

if.then-27:
	; SelectorExpr
	call ccc void @igRender()
	br label %if.done-28

if.done-28:
	; SelectorExpr
	; SelectorExpr
	%199 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	%200 = load %..rawptr, %..rawptr* %199, align 8
	%201 = call ccc i32 @SwapBuffers(%..rawptr %200)
	br label %for.loop-1

for.done-29:
	ret void
}

define void @.fmt-4.write_string({i8*, i64, i64}* %buf, %..string %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	; append
	%4 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%5 = bitcast {i8*, i64, i64}* %4 to %..rawptr
	%6 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%7 = load %..string, %..string* %1, align 8
	; cast - cast
	%8 = extractvalue %..string %7, 0
	store i8* zeroinitializer, i8** %2
	store i8* %8, i8** %2
	%9 = extractvalue %..string %7, 1
	%10 = sub i64 %9, 0
	%11 = sub i64 %9, 0
	%12 = load i8*, i8** %2, align 8
	%13 = getelementptr inbounds i8, i8* %12, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %13, i8** %14
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %11, i64* %16
	%17 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%18 = extractvalue {i8*, i64, i64} %17, 0
	%19 = extractvalue {i8*, i64, i64} %17, 1
	%20 = bitcast i8* %18 to %..rawptr
	%21 = call i64 @.__slice_append(%..rawptr %5, i64 1, i64 1, %..rawptr %20, i64 %19)
	ret void
}

define void @.fmt-4.write_byte({i8*, i64, i64}* %buf, i8 %b) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i8, align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca [1 x i8], align 1
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store i8 zeroinitializer, i8* %1
		store i8 %b, i8* %1
	; append
	%4 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%5 = bitcast {i8*, i64, i64}* %4 to %..rawptr
	%6 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%7 = load i8, i8* %1, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	store [1 x i8] zeroinitializer, [1 x i8]* %3
	%8 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	store i8 %7, i8* %8
	%9 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = extractvalue {i8*, i64, i64} %13, 0
	%15 = extractvalue {i8*, i64, i64} %13, 1
	%16 = bitcast i8* %14 to %..rawptr
	%17 = call i64 @.__slice_append(%..rawptr %5, i64 1, i64 1, %..rawptr %16, i64 %15)
	ret void
}

define void @.fmt-4.write_rune({i8*, i64, i64}* %buf, i32 %r) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i32, align 4
	%2 = alloca [4 x i8], align 1
	%3 = alloca i64, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store i32 zeroinitializer, i32* %1
		store i32 %r, i32* %1
	; IfStmt
	%5 = load i32, i32* %1, align 4
	%6 = icmp slt i32 %5, 128
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	%7 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%8 = load i32, i32* %1, align 4
	; cast - cast
	%9 = trunc i32 %8 to i8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %7, i8 %9)
	; ReturnStmt
	ret void

if.done-2:
	; b
	store [4 x i8] zeroinitializer, [4 x i8]* %2
		; n
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%10 = load i32, i32* %1, align 4
	%11 = call {[4 x i8], i64} @.utf8-5.encode_rune(i32 %10)
	%12 = extractvalue {[4 x i8], i64} %11, 0
	%13 = extractvalue {[4 x i8], i64} %11, 1
	store [4 x i8] %12, [4 x i8]* %2
	store i64 %13, i64* %3
	; append
	%14 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%15 = bitcast {i8*, i64, i64}* %14 to %..rawptr
	%16 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SliceExpr
	%17 = load i64, i64* %3, align 8
	%18 = load [4 x i8], [4 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$75, i64 0, i32 0), i64 25}, i64 24, i64 17, i64 0, i64 %17, i64 4)
	%19 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i32 0
	%20 = getelementptr inbounds i8, i8* %19, i64 0
	%21 = sub i64 %17, 0
	%22 = sub i64 4, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %20, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %21, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %22, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %26, 0
	%28 = extractvalue {i8*, i64, i64} %26, 1
	%29 = bitcast i8* %27 to %..rawptr
	%30 = call i64 @.__slice_append(%..rawptr %15, i64 1, i64 1, %..rawptr %29, i64 %28)
	ret void
}

define i64 @.fmt-4.fprint(i64 %fd, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [4096 x i8], align 1
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
		; SliceExpr
	%6 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$76, i64 0, i32 0), i64 25}, i64 50, i64 13, i64 0, i64 0, i64 4096)
	%7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call i64 @.fmt-4.bprint({i8*, i64, i64}* %15, {%..any*, i64, i64} %16)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	; SliceExpr
	%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 1
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$77, i64 0, i32 0), i64 25}, i64 52, i64 18, i64 0, i64 %20, i64 %22)
	%23 = extractvalue {i8*, i64, i64} %21, 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = sub i64 %20, 0
	%26 = sub i64 %22, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %24, i8** %27
	%28 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %25, i64* %28
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %26, i64* %29
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%31 = call {i64, i64} @.os_windows-23.write(i64 %18, {i8*, i64, i64} %30)
	; ReturnStmt
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%33 = extractvalue {i8*, i64, i64} %32, 1
	ret i64 %33
}

define i64 @.fmt-4.fprintln(i64 %fd, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [4096 x i8], align 1
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
		; SliceExpr
	%6 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$78, i64 0, i32 0), i64 25}, i64 58, i64 13, i64 0, i64 0, i64 4096)
	%7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call i64 @.fmt-4.bprintln({i8*, i64, i64}* %15, {%..any*, i64, i64} %16)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	; SliceExpr
	%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 1
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$79, i64 0, i32 0), i64 25}, i64 60, i64 18, i64 0, i64 %20, i64 %22)
	%23 = extractvalue {i8*, i64, i64} %21, 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = sub i64 %20, 0
	%26 = sub i64 %22, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %24, i8** %27
	%28 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %25, i64* %28
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %26, i64* %29
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%31 = call {i64, i64} @.os_windows-23.write(i64 %18, {i8*, i64, i64} %30)
	; ReturnStmt
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%33 = extractvalue {i8*, i64, i64} %32, 1
	ret i64 %33
}

define i64 @.fmt-4.fprintf(i64 %fd, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [4096 x i8], align 1
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %3
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
		; SliceExpr
	%7 = load [4096 x i8], [4096 x i8]* %3, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$7a, i64 0, i32 0), i64 25}, i64 65, i64 13, i64 0, i64 0, i64 4096)
	%8 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i32 0
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	%10 = sub i64 0, 0
	%11 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %9, i8** %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %10, i64* %13
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %11, i64* %14
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	store {i8*, i64, i64} %15, {i8*, i64, i64}* %4
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0
	%17 = load %..string, %..string* %1, align 8
	%18 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%19 = call i64 @.fmt-4.bprintf({i8*, i64, i64}* %16, %..string %17, {%..any*, i64, i64} %18)
	; SelectorExpr
	%20 = load i64, i64* %0, align 8
	; SliceExpr
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 1
	%23 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%24 = extractvalue {i8*, i64, i64} %23, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$7b, i64 0, i32 0), i64 25}, i64 67, i64 18, i64 0, i64 %22, i64 %24)
	%25 = extractvalue {i8*, i64, i64} %23, 0
	%26 = getelementptr inbounds i8, i8* %25, i64 0
	%27 = sub i64 %22, 0
	%28 = sub i64 %24, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %26, i8** %29
	%30 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %27, i64* %30
	%31 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %28, i64* %31
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%33 = call {i64, i64} @.os_windows-23.write(i64 %20, {i8*, i64, i64} %32)
	; ReturnStmt
	%34 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%35 = extractvalue {i8*, i64, i64} %34, 1
	ret i64 %35
}

define i64 @.fmt-4.print({%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load i64, i64* @.os_windows-23.stdout, align 8
	%2 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%3 = call i64 @.fmt-4.fprint(i64 %1, {%..any*, i64, i64} %2)
	ret i64 %3
}

define i64 @.fmt-4.println({%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load i64, i64* @.os_windows-23.stdout, align 8
	%2 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%3 = call i64 @.fmt-4.fprintln(i64 %1, {%..any*, i64, i64} %2)
	ret i64 %3
}

define i64 @.fmt-4.printf(%..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %fmt, %..string* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; ReturnStmt
	; SelectorExpr
	%2 = load i64, i64* @.os_windows-23.stdout, align 8
	%3 = load %..string, %..string* %0, align 8
	%4 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%5 = call i64 @.fmt-4.fprintf(i64 %2, %..string %3, {%..any*, i64, i64} %4)
	ret i64 %5
}

define void @.fmt-4.write_type({i8*, i64, i64}* %buf, %Type_Info* %ti) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named*, align 8
	%3 = alloca %Type_Info.Integer*, align 8
	%4 = alloca %fmt-4.Fmt_Info, align 8
	%5 = alloca %fmt-4.Fmt_Info, align 8
	%6 = alloca %Type_Info.Float*, align 8
	%7 = alloca %Type_Info.Complex*, align 8
	%8 = alloca %Type_Info.Quaternion*, align 8
	%9 = alloca %Type_Info.String*, align 8
	%10 = alloca %Type_Info.Boolean*, align 8
	%11 = alloca %Type_Info.Pointer*, align 8
	%12 = alloca %Type_Info.Procedure*, align 8
	%13 = alloca %Type_Info.Tuple*, align 8
	%14 = alloca {%Type_Info.Tuple*, i1}, align 8
	%15 = alloca %Type_Info*, align 8
	%16 = alloca i64, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	%19 = alloca %Type_Info.Tuple*, align 8
	%20 = alloca i64, align 8
	%21 = alloca %..string, align 8
	%22 = alloca i64, align 8
	%23 = alloca i64, align 8
	%24 = alloca i64, align 8
	%25 = alloca %Type_Info*, align 8
	%26 = alloca %Type_Info.Array*, align 8
	%27 = alloca %fmt-4.Fmt_Info, align 8
	%28 = alloca %fmt-4.Fmt_Info, align 8
	%29 = alloca %Type_Info.Dynamic_Array*, align 8
	%30 = alloca %Type_Info.Slice*, align 8
	%31 = alloca %Type_Info.Vector*, align 8
	%32 = alloca %fmt-4.Fmt_Info, align 8
	%33 = alloca %fmt-4.Fmt_Info, align 8
	%34 = alloca %Type_Info.Map*, align 8
	%35 = alloca %Type_Info.Struct*, align 8
	%36 = alloca %fmt-4.Fmt_Info, align 8
	%37 = alloca %fmt-4.Fmt_Info, align 8
	%38 = alloca %..string, align 8
	%39 = alloca i64, align 8
	%40 = alloca i64, align 8
	%41 = alloca i64, align 8
	%42 = alloca %Type_Info.Union*, align 8
	%43 = alloca {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, align 8
	%44 = alloca i64, align 8
	%45 = alloca %..string, align 8
	%46 = alloca i64, align 8
	%47 = alloca i64, align 8
	%48 = alloca i64, align 8
	%49 = alloca %..string, align 8
	%50 = alloca i64, align 8
	%51 = alloca i64, align 8
	%52 = alloca i64, align 8
	%53 = alloca %Type_Info*, align 8
	%54 = alloca %Type_Info.Struct*, align 8
	%55 = alloca {%Type_Info.Struct*, i1}, align 8
	%56 = alloca i64, align 8
	%57 = alloca i64, align 8
	%58 = alloca i64, align 8
	%59 = alloca i64, align 8
	%60 = alloca i64, align 8
	%61 = alloca %Type_Info.Raw_Union*, align 8
	%62 = alloca %..string, align 8
	%63 = alloca i64, align 8
	%64 = alloca i64, align 8
	%65 = alloca i64, align 8
	%66 = alloca %Type_Info.Enum*, align 8
	%67 = alloca %..string, align 8
	%68 = alloca i64, align 8
	%69 = alloca i64, align 8
	%70 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store %Type_Info* zeroinitializer, %Type_Info** %1
		store %Type_Info* %ti, %Type_Info** %1
	; IfStmt
	%71 = load %Type_Info*, %Type_Info** %1, align 8
	%72 = icmp eq %Type_Info* %71, zeroinitializer
	br i1 %72, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; TypeMatchStmt
	%73 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%74 = getelementptr inbounds %Type_Info, %Type_Info* %73, i64 0, i32 2 ; UnionTagPtr
	%75 = load i64, i64* %74, align 8
	%76 = bitcast %Type_Info* %73 to %..rawptr
	%77 = icmp eq i64 %75, 1
	br i1 %77, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	%78 = icmp eq i64 %75, 2
	br i1 %78, label %typematch.body-6, label %typematch.next-5

typematch.body-4:
	%79 = bitcast %..rawptr %76 to %Type_Info.Named*
	store %Type_Info.Named* zeroinitializer, %Type_Info.Named** %2
	store %Type_Info.Named* %79, %Type_Info.Named** %2
	%80 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%81 = load %Type_Info.Named*, %Type_Info.Named** %2, align 8
	%82 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %81, i64 0
	%83 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %82, i64 0, i32 2
	%84 = load %..string, %..string* %83, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %80, %..string %84)
	br label %typematch.done-129

typematch.next-5:
	%85 = icmp eq i64 %75, 3
	br i1 %85, label %typematch.body-16, label %typematch.next-15

typematch.body-6:
	%86 = bitcast %..rawptr %76 to %Type_Info.Integer*
	store %Type_Info.Integer* zeroinitializer, %Type_Info.Integer** %3
	store %Type_Info.Integer* %86, %Type_Info.Integer** %3
	; MatchStmt
	%87 = load %Type_Info*, %Type_Info** %1, align 8
	%88 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%89 = icmp eq %Type_Info* %87, %88
	%90 = icmp eq i1 true, %89
	br i1 %90, label %match.case.body-8, label %match.case.next-7

match.case.next-7:
	%91 = load %Type_Info*, %Type_Info** %1, align 8
	%92 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%93 = icmp eq %Type_Info* %91, %92
	%94 = icmp eq i1 true, %93
	br i1 %94, label %match.fall.body-10, label %match.case.next-9

match.case.body-8:
	%95 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %95, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$7c, i64 0, i32 0), i64 3})
	br label %match.done-14

match.case.next-9:
	%96 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; TernaryExpr
	; SelectorExpr
	%97 = load %Type_Info.Integer*, %Type_Info.Integer** %3, align 8
	%98 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %97, i64 0
	%99 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %98, i64 0, i32 2
	%100 = load i1, i1* %99, align 1
	br i1 %100, label %if.then-11, label %if.else-12

match.fall.body-10:
	%101 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %101, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$7d, i64 0, i32 0), i64 4})
	br label %match.done-14

if.then-11:
	br label %if.done-13

if.else-12:
	br label %if.done-13

if.done-13:
	%102 = phi %..string [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$7e, i64 0, i32 0), i64 1}, %if.then-11 ], [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$7f, i64 0, i32 0), i64 1}, %if.else-12 ]
	call void @.fmt-4.write_string({i8*, i64, i64}* %96, %..string %102)
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %4
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %5
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %5
	%103 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%104 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, i64 0, i32 3
	store {i8*, i64, i64}* %103, {i8*, i64, i64}** %104
	%105 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, align 8
	store %fmt-4.Fmt_Info %105, %fmt-4.Fmt_Info* %4
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %4, i64 0
	; SelectorExpr
	%107 = load %Type_Info.Integer*, %Type_Info.Integer** %3, align 8
	%108 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %107, i64 0
	%109 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %108, i64 0, i32 0
	%110 = load i64, i64* %109, align 8
	%111 = mul i64 8, %110
	; cast - cast
	%112 = bitcast i64 %111 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %106, i64 %112, i1 false, i64 64, i32 100)
	br label %match.done-14

match.done-14:
	br label %typematch.done-129

typematch.next-15:
	%113 = icmp eq i64 %75, 4
	br i1 %113, label %typematch.body-23, label %typematch.next-22

typematch.body-16:
	%114 = bitcast %..rawptr %76 to %Type_Info.Float*
	store %Type_Info.Float* zeroinitializer, %Type_Info.Float** %6
	store %Type_Info.Float* %114, %Type_Info.Float** %6
	; MatchStmt
	; SelectorExpr
	%115 = load %Type_Info.Float*, %Type_Info.Float** %6, align 8
	%116 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %115, i64 0
	%117 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %116, i64 0, i32 0
	%118 = load i64, i64* %117, align 8
	%119 = icmp eq i64 %118, 4
	br i1 %119, label %match.case.body-18, label %match.case.next-17

match.case.next-17:
	%120 = icmp eq i64 %118, 8
	br i1 %120, label %match.fall.body-20, label %match.case.next-19

match.case.body-18:
	%121 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %121, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$80, i64 0, i32 0), i64 3})
	br label %match.done-21

match.case.next-19:
	br label %match.done-21

match.fall.body-20:
	%122 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %122, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$81, i64 0, i32 0), i64 3})
	br label %match.done-21

match.done-21:
	br label %typematch.done-129

typematch.next-22:
	%123 = icmp eq i64 %75, 5
	br i1 %123, label %typematch.body-30, label %typematch.next-29

typematch.body-23:
	%124 = bitcast %..rawptr %76 to %Type_Info.Complex*
	store %Type_Info.Complex* zeroinitializer, %Type_Info.Complex** %7
	store %Type_Info.Complex* %124, %Type_Info.Complex** %7
	; MatchStmt
	; SelectorExpr
	%125 = load %Type_Info.Complex*, %Type_Info.Complex** %7, align 8
	%126 = getelementptr inbounds %Type_Info.Complex, %Type_Info.Complex* %125, i64 0
	%127 = getelementptr inbounds %Type_Info.Complex, %Type_Info.Complex* %126, i64 0, i32 0
	%128 = load i64, i64* %127, align 8
	%129 = icmp eq i64 %128, 8
	br i1 %129, label %match.case.body-25, label %match.case.next-24

match.case.next-24:
	%130 = icmp eq i64 %128, 16
	br i1 %130, label %match.fall.body-27, label %match.case.next-26

match.case.body-25:
	%131 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %131, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$82, i64 0, i32 0), i64 9})
	br label %match.done-28

match.case.next-26:
	br label %match.done-28

match.fall.body-27:
	%132 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %132, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$83, i64 0, i32 0), i64 10})
	br label %match.done-28

match.done-28:
	br label %typematch.done-129

typematch.next-29:
	%133 = icmp eq i64 %75, 6
	br i1 %133, label %typematch.body-37, label %typematch.next-36

typematch.body-30:
	%134 = bitcast %..rawptr %76 to %Type_Info.Quaternion*
	store %Type_Info.Quaternion* zeroinitializer, %Type_Info.Quaternion** %8
	store %Type_Info.Quaternion* %134, %Type_Info.Quaternion** %8
	; MatchStmt
	; SelectorExpr
	%135 = load %Type_Info.Quaternion*, %Type_Info.Quaternion** %8, align 8
	%136 = getelementptr inbounds %Type_Info.Quaternion, %Type_Info.Quaternion* %135, i64 0
	%137 = getelementptr inbounds %Type_Info.Quaternion, %Type_Info.Quaternion* %136, i64 0, i32 0
	%138 = load i64, i64* %137, align 8
	%139 = icmp eq i64 %138, 16
	br i1 %139, label %match.case.body-32, label %match.case.next-31

match.case.next-31:
	%140 = icmp eq i64 %138, 32
	br i1 %140, label %match.fall.body-34, label %match.case.next-33

match.case.body-32:
	%141 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %141, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$84, i64 0, i32 0), i64 13})
	br label %match.done-35

match.case.next-33:
	br label %match.done-35

match.fall.body-34:
	%142 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %142, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$85, i64 0, i32 0), i64 10})
	br label %match.done-35

match.done-35:
	br label %typematch.done-129

typematch.next-36:
	%143 = icmp eq i64 %75, 7
	br i1 %143, label %typematch.body-39, label %typematch.next-38

typematch.body-37:
	%144 = bitcast %..rawptr %76 to %Type_Info.String*
	store %Type_Info.String* zeroinitializer, %Type_Info.String** %9
	store %Type_Info.String* %144, %Type_Info.String** %9
	%145 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %145, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$86, i64 0, i32 0), i64 6})
	br label %typematch.done-129

typematch.next-38:
	%146 = icmp eq i64 %75, 9
	br i1 %146, label %typematch.body-41, label %typematch.next-40

typematch.body-39:
	%147 = bitcast %..rawptr %76 to %Type_Info.Boolean*
	store %Type_Info.Boolean* zeroinitializer, %Type_Info.Boolean** %10
	store %Type_Info.Boolean* %147, %Type_Info.Boolean** %10
	%148 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %148, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$87, i64 0, i32 0), i64 4})
	br label %typematch.done-129

typematch.next-40:
	%149 = icmp eq i64 %75, 10
	br i1 %149, label %typematch.body-46, label %typematch.next-45

typematch.body-41:
	%150 = bitcast %..rawptr %76 to %Type_Info.Pointer*
	store %Type_Info.Pointer* zeroinitializer, %Type_Info.Pointer** %11
	store %Type_Info.Pointer* %150, %Type_Info.Pointer** %11
	; IfStmt
	; SelectorExpr
	%151 = load %Type_Info.Pointer*, %Type_Info.Pointer** %11, align 8
	%152 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %151, i64 0
	%153 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %152, i64 0, i32 2
	%154 = load %Type_Info*, %Type_Info** %153, align 8
	%155 = icmp eq %Type_Info* %154, zeroinitializer
	br i1 %155, label %if.then-42, label %if.else-43

if.then-42:
	%156 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %156, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$88, i64 0, i32 0), i64 6})
	br label %if.done-44

if.else-43:
	%157 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %157, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$89, i64 0, i32 0), i64 1})
	%158 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%159 = load %Type_Info.Pointer*, %Type_Info.Pointer** %11, align 8
	%160 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %159, i64 0
	%161 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %160, i64 0, i32 2
	%162 = load %Type_Info*, %Type_Info** %161, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %158, %Type_Info* %162)
	br label %if.done-44

if.done-44:
	br label %typematch.done-129

typematch.next-45:
	%163 = icmp eq i64 %75, 15
	br i1 %163, label %typematch.body-60, label %typematch.next-59

typematch.body-46:
	%164 = bitcast %..rawptr %76 to %Type_Info.Procedure*
	store %Type_Info.Procedure* zeroinitializer, %Type_Info.Procedure** %12
	store %Type_Info.Procedure* %164, %Type_Info.Procedure** %12
	%165 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %165, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$8a, i64 0, i32 0), i64 4})
	; IfStmt
	; SelectorExpr
	%166 = load %Type_Info.Procedure*, %Type_Info.Procedure** %12, align 8
	%167 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %166, i64 0
	%168 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %167, i64 0, i32 2
	%169 = load %Type_Info*, %Type_Info** %168, align 8
	%170 = icmp eq %Type_Info* %169, zeroinitializer
	br i1 %170, label %if.then-47, label %if.else-48

if.then-47:
	%171 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %171, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$8b, i64 0, i32 0), i64 2})
	br label %if.done-56

if.else-48:
	; t
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %13
		; SelectorExpr
	%172 = load %Type_Info.Procedure*, %Type_Info.Procedure** %12, align 8
	%173 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %172, i64 0
	%174 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %173, i64 0, i32 2
	%175 = load %Type_Info*, %Type_Info** %174, align 8
	; cast - union_cast
	store {%Type_Info.Tuple*, i1} zeroinitializer, {%Type_Info.Tuple*, i1}* %14
	%176 = getelementptr inbounds %Type_Info, %Type_Info* %175, i64 0, i32 2 ; UnionTagPtr
	%177 = load i64, i64* %176, align 8
	%178 = icmp eq i64 %177, 15
	br i1 %178, label %union_cast.ok-49, label %union_cast.end-50

union_cast.ok-49:
	%179 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 0
	%180 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 1
	%181 = bitcast %Type_Info* %175 to %Type_Info.Tuple*
	store %Type_Info.Tuple* %181, %Type_Info.Tuple** %179
	store i1 true, i1* %180
	br label %union_cast.end-50

union_cast.end-50:
	%182 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 1
	%183 = load i1, i1* %182, align 1
	%184 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%185 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	call void @.__union_cast_check(i1 %183, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$8c, i64 0, i32 0), i64 25}, i64 138, i64 9, %Type_Info* %184, %Type_Info* %185)
	%186 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 0
	%187 = load %Type_Info.Tuple*, %Type_Info.Tuple** %186, align 8
	store %Type_Info.Tuple* %187, %Type_Info.Tuple** %13
	%188 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %188, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$8d, i64 0, i32 0), i64 1})
	; RangeStmt
	; type
	store %Type_Info* zeroinitializer, %Type_Info** %15
		; i
	store i64 zeroinitializer, i64* %16
		; SelectorExpr
	%189 = load %Type_Info.Tuple*, %Type_Info.Tuple** %13, align 8
	%190 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %189, i64 0
	%191 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %190, i64 0, i32 2
	%192 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %191, i64 0, i32 0
	%193 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %192, align 8
	store i64 zeroinitializer, i64* %17
	%194 = extractvalue {%Type_Info**, i64, i64} %193, 1
	store i64 %194, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-51

for.index.loop-51:
	%195 = load i64, i64* %18, align 8
	%196 = add i64 %195, 1
	store i64 %196, i64* %18
	%197 = load i64, i64* %17, align 8
	%198 = icmp slt i64 %196, %197
	br i1 %198, label %for.index.body-52, label %for.index.done-55

for.index.body-52:
	%199 = load i64, i64* %18, align 8
	%200 = extractvalue {%Type_Info**, i64, i64} %193, 0
	%201 = getelementptr inbounds %Type_Info*, %Type_Info** %200, i64 %199
	%202 = load %Type_Info*, %Type_Info** %201, align 8
	store %Type_Info* %202, %Type_Info** %15
	store i64 %199, i64* %16
	; IfStmt
	%203 = load i64, i64* %16, align 8
	%204 = icmp sgt i64 %203, 0
	br i1 %204, label %if.then-53, label %if.done-54

if.then-53:
	%205 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %205, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$8e, i64 0, i32 0), i64 2})
	br label %if.done-54

if.done-54:
	%206 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%207 = load %Type_Info*, %Type_Info** %15, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %206, %Type_Info* %207)
	br label %for.index.loop-51

for.index.done-55:
	%208 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %208, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$8f, i64 0, i32 0), i64 1})
	br label %if.done-56

if.done-56:
	; IfStmt
	; SelectorExpr
	%209 = load %Type_Info.Procedure*, %Type_Info.Procedure** %12, align 8
	%210 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %209, i64 0
	%211 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %210, i64 0, i32 3
	%212 = load %Type_Info*, %Type_Info** %211, align 8
	%213 = icmp ne %Type_Info* %212, zeroinitializer
	br i1 %213, label %if.then-57, label %if.done-58

if.then-57:
	%214 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %214, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$90, i64 0, i32 0), i64 4})
	%215 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%216 = load %Type_Info.Procedure*, %Type_Info.Procedure** %12, align 8
	%217 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %216, i64 0
	%218 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %217, i64 0, i32 3
	%219 = load %Type_Info*, %Type_Info** %218, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %215, %Type_Info* %219)
	br label %if.done-58

if.done-58:
	br label %typematch.done-129

typematch.next-59:
	%220 = icmp eq i64 %75, 11
	br i1 %220, label %typematch.body-73, label %typematch.next-72

typematch.body-60:
	%221 = bitcast %..rawptr %76 to %Type_Info.Tuple*
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %19
	store %Type_Info.Tuple* %221, %Type_Info.Tuple** %19
	; count
	store i64 zeroinitializer, i64* %20
		; SelectorExpr
	%222 = load %Type_Info.Tuple*, %Type_Info.Tuple** %19, align 8
	%223 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %222, i64 0
	%224 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %223, i64 0, i32 2
	%225 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %224, i64 0, i32 1
	%226 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %225, align 8
	%227 = extractvalue {%..string*, i64, i64} %226, 1
	store i64 %227, i64* %20
	; IfStmt
	%228 = load i64, i64* %20, align 8
	%229 = icmp ne i64 %228, 1
	br i1 %229, label %if.then-61, label %if.done-62

if.then-61:
	%230 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %230, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$91, i64 0, i32 0), i64 1})
	br label %if.done-62

if.done-62:
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %21
		; i
	store i64 zeroinitializer, i64* %22
		; SelectorExpr
	%231 = load %Type_Info.Tuple*, %Type_Info.Tuple** %19, align 8
	%232 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %231, i64 0
	%233 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %232, i64 0, i32 2
	%234 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %233, i64 0, i32 1
	%235 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %234, align 8
	store i64 zeroinitializer, i64* %23
	%236 = extractvalue {%..string*, i64, i64} %235, 1
	store i64 %236, i64* %23
	store i64 zeroinitializer, i64* %24
	store i64 -1, i64* %24
	br label %for.index.loop-63

for.index.loop-63:
	%237 = load i64, i64* %24, align 8
	%238 = add i64 %237, 1
	store i64 %238, i64* %24
	%239 = load i64, i64* %23, align 8
	%240 = icmp slt i64 %238, %239
	br i1 %240, label %for.index.body-64, label %for.index.done-69

for.index.body-64:
	%241 = load i64, i64* %24, align 8
	%242 = extractvalue {%..string*, i64, i64} %235, 0
	%243 = getelementptr inbounds %..string, %..string* %242, i64 %241
	%244 = load %..string, %..string* %243, align 8
	store %..string %244, %..string* %21
	store i64 %241, i64* %22
	; IfStmt
	%245 = load i64, i64* %22, align 8
	%246 = icmp sgt i64 %245, 0
	br i1 %246, label %if.then-65, label %if.done-66

if.then-65:
	%247 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %247, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$92, i64 0, i32 0), i64 2})
	br label %if.done-66

if.done-66:
	; type
	store %Type_Info* zeroinitializer, %Type_Info** %25
		; IndexExpr
	; SelectorExpr
	%248 = load %Type_Info.Tuple*, %Type_Info.Tuple** %19, align 8
	%249 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %248, i64 0
	%250 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %249, i64 0, i32 2
	%251 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %250, i64 0, i32 0
	%252 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %251, align 8
	%253 = extractvalue {%Type_Info**, i64, i64} %252, 0
	%254 = extractvalue {%Type_Info**, i64, i64} %252, 1
	%255 = load i64, i64* %22, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$93, i64 0, i32 0), i64 25}, i64 156, i64 23, i64 %255, i64 %254)
	%256 = getelementptr inbounds %Type_Info*, %Type_Info** %253, i64 %255
	%257 = load %Type_Info*, %Type_Info** %256, align 8
	store %Type_Info* %257, %Type_Info** %25
	; IfStmt
	%258 = load %..string, %..string* %21, align 8
	%259 = extractvalue %..string %258, 1
	%260 = icmp sgt i64 %259, 0
	br i1 %260, label %if.then-67, label %if.done-68

if.then-67:
	%261 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%262 = load %..string, %..string* %21, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %261, %..string %262)
	%263 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %263, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$94, i64 0, i32 0), i64 2})
	br label %if.done-68

if.done-68:
	%264 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%265 = load %Type_Info*, %Type_Info** %25, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %264, %Type_Info* %265)
	br label %for.index.loop-63

for.index.done-69:
	; IfStmt
	%266 = load i64, i64* %20, align 8
	%267 = icmp ne i64 %266, 1
	br i1 %267, label %if.then-70, label %if.done-71

if.then-70:
	%268 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %268, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$95, i64 0, i32 0), i64 1})
	br label %if.done-71

if.done-71:
	br label %typematch.done-129

typematch.next-72:
	%269 = icmp eq i64 %75, 12
	br i1 %269, label %typematch.body-75, label %typematch.next-74

typematch.body-73:
	%270 = bitcast %..rawptr %76 to %Type_Info.Array*
	store %Type_Info.Array* zeroinitializer, %Type_Info.Array** %26
	store %Type_Info.Array* %270, %Type_Info.Array** %26
	%271 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %271, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$96, i64 0, i32 0), i64 1})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %27
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %28
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %28
	%272 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%273 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 3
	store {i8*, i64, i64}* %272, {i8*, i64, i64}** %273
	%274 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, align 8
	store %fmt-4.Fmt_Info %274, %fmt-4.Fmt_Info* %27
	%275 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	; SelectorExpr
	%276 = load %Type_Info.Array*, %Type_Info.Array** %26, align 8
	%277 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %276, i64 0
	%278 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %277, i64 0, i32 4
	%279 = load i64, i64* %278, align 8
	; cast - cast
	%280 = bitcast i64 %279 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %275, i64 %280, i1 false, i64 64, i32 100)
	%281 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %281, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$97, i64 0, i32 0), i64 1})
	%282 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%283 = load %Type_Info.Array*, %Type_Info.Array** %26, align 8
	%284 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %283, i64 0
	%285 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %284, i64 0, i32 2
	%286 = load %Type_Info*, %Type_Info** %285, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %282, %Type_Info* %286)
	br label %typematch.done-129

typematch.next-74:
	%287 = icmp eq i64 %75, 13
	br i1 %287, label %typematch.body-77, label %typematch.next-76

typematch.body-75:
	%288 = bitcast %..rawptr %76 to %Type_Info.Dynamic_Array*
	store %Type_Info.Dynamic_Array* zeroinitializer, %Type_Info.Dynamic_Array** %29
	store %Type_Info.Dynamic_Array* %288, %Type_Info.Dynamic_Array** %29
	%289 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %289, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$98, i64 0, i32 0), i64 9})
	%290 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%291 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %29, align 8
	%292 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %291, i64 0
	%293 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %292, i64 0, i32 2
	%294 = load %Type_Info*, %Type_Info** %293, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %290, %Type_Info* %294)
	br label %typematch.done-129

typematch.next-76:
	%295 = icmp eq i64 %75, 14
	br i1 %295, label %typematch.body-79, label %typematch.next-78

typematch.body-77:
	%296 = bitcast %..rawptr %76 to %Type_Info.Slice*
	store %Type_Info.Slice* zeroinitializer, %Type_Info.Slice** %30
	store %Type_Info.Slice* %296, %Type_Info.Slice** %30
	%297 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %297, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$99, i64 0, i32 0), i64 2})
	%298 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%299 = load %Type_Info.Slice*, %Type_Info.Slice** %30, align 8
	%300 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %299, i64 0
	%301 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %300, i64 0, i32 2
	%302 = load %Type_Info*, %Type_Info** %301, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %298, %Type_Info* %302)
	br label %typematch.done-129

typematch.next-78:
	%303 = icmp eq i64 %75, 20
	br i1 %303, label %typematch.body-81, label %typematch.next-80

typematch.body-79:
	%304 = bitcast %..rawptr %76 to %Type_Info.Vector*
	store %Type_Info.Vector* zeroinitializer, %Type_Info.Vector** %31
	store %Type_Info.Vector* %304, %Type_Info.Vector** %31
	%305 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %305, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$9a, i64 0, i32 0), i64 8})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %32
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %33
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %33
	%306 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%307 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0, i32 3
	store {i8*, i64, i64}* %306, {i8*, i64, i64}** %307
	%308 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, align 8
	store %fmt-4.Fmt_Info %308, %fmt-4.Fmt_Info* %32
	%309 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %32, i64 0
	; SelectorExpr
	%310 = load %Type_Info.Vector*, %Type_Info.Vector** %31, align 8
	%311 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %310, i64 0
	%312 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %311, i64 0, i32 4
	%313 = load i64, i64* %312, align 8
	; cast - cast
	%314 = bitcast i64 %313 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %309, i64 %314, i1 false, i64 64, i32 100)
	%315 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %315, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$9b, i64 0, i32 0), i64 1})
	%316 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%317 = load %Type_Info.Vector*, %Type_Info.Vector** %31, align 8
	%318 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %317, i64 0
	%319 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %318, i64 0, i32 2
	%320 = load %Type_Info*, %Type_Info** %319, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %316, %Type_Info* %320)
	br label %typematch.done-129

typematch.next-80:
	%321 = icmp eq i64 %75, 16
	br i1 %321, label %typematch.body-83, label %typematch.next-82

typematch.body-81:
	%322 = bitcast %..rawptr %76 to %Type_Info.Map*
	store %Type_Info.Map* zeroinitializer, %Type_Info.Map** %34
	store %Type_Info.Map* %322, %Type_Info.Map** %34
	%323 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %323, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$9c, i64 0, i32 0), i64 4})
	%324 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%325 = load %Type_Info.Map*, %Type_Info.Map** %34, align 8
	%326 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %325, i64 0
	%327 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %326, i64 0, i32 2
	%328 = load %Type_Info*, %Type_Info** %327, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %324, %Type_Info* %328)
	%329 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %329, i8 93)
	%330 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%331 = load %Type_Info.Map*, %Type_Info.Map** %34, align 8
	%332 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %331, i64 0
	%333 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %332, i64 0, i32 3
	%334 = load %Type_Info*, %Type_Info** %333, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %330, %Type_Info* %334)
	br label %typematch.done-129

typematch.next-82:
	%335 = icmp eq i64 %75, 18
	br i1 %335, label %typematch.body-96, label %typematch.next-95

typematch.body-83:
	%336 = bitcast %..rawptr %76 to %Type_Info.Struct*
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %35
	store %Type_Info.Struct* %336, %Type_Info.Struct** %35
	%337 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %337, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$9d, i64 0, i32 0), i64 7})
	; IfStmt
	; SelectorExpr
	%338 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%339 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %338, i64 0
	%340 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %339, i64 0, i32 2
	%341 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %340, i64 0, i32 3
	%342 = load i1, i1* %341, align 1
	br i1 %342, label %if.then-84, label %if.done-85

if.then-84:
	%343 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %343, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$9e, i64 0, i32 0), i64 8})
	br label %if.done-85

if.done-85:
	; IfStmt
	; SelectorExpr
	%344 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%345 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %344, i64 0
	%346 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %345, i64 0, i32 2
	%347 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %346, i64 0, i32 4
	%348 = load i1, i1* %347, align 1
	br i1 %348, label %if.then-86, label %if.done-87

if.then-86:
	%349 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %349, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$9f, i64 0, i32 0), i64 9})
	br label %if.done-87

if.done-87:
	; IfStmt
	; SelectorExpr
	%350 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%351 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %350, i64 0
	%352 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %351, i64 0, i32 2
	%353 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %352, i64 0, i32 5
	%354 = load i1, i1* %353, align 1
	br i1 %354, label %if.then-88, label %if.done-89

if.then-88:
	%355 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %355, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$a0, i64 0, i32 0), i64 7})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %36
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %37
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %37
	%356 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%357 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0, i32 3
	store {i8*, i64, i64}* %356, {i8*, i64, i64}** %357
	%358 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, align 8
	store %fmt-4.Fmt_Info %358, %fmt-4.Fmt_Info* %36
	%359 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %36, i64 0
	; SelectorExpr
	%360 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%361 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %360, i64 0
	%362 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %361, i64 0, i32 1
	%363 = load i64, i64* %362, align 8
	; cast - cast
	%364 = bitcast i64 %363 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %359, i64 %364, i1 false, i64 64, i32 100)
	%365 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %365, i8 32)
	br label %if.done-89

if.done-89:
	%366 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %366, i8 123)
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %38
		; i
	store i64 zeroinitializer, i64* %39
		; SelectorExpr
	%367 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%368 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %367, i64 0
	%369 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %368, i64 0, i32 2
	%370 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %369, i64 0, i32 1
	%371 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %370, align 8
	store i64 zeroinitializer, i64* %40
	%372 = extractvalue {%..string*, i64, i64} %371, 1
	store i64 %372, i64* %40
	store i64 zeroinitializer, i64* %41
	store i64 -1, i64* %41
	br label %for.index.loop-90

for.index.loop-90:
	%373 = load i64, i64* %41, align 8
	%374 = add i64 %373, 1
	store i64 %374, i64* %41
	%375 = load i64, i64* %40, align 8
	%376 = icmp slt i64 %374, %375
	br i1 %376, label %for.index.body-91, label %for.index.done-94

for.index.body-91:
	%377 = load i64, i64* %41, align 8
	%378 = extractvalue {%..string*, i64, i64} %371, 0
	%379 = getelementptr inbounds %..string, %..string* %378, i64 %377
	%380 = load %..string, %..string* %379, align 8
	store %..string %380, %..string* %38
	store i64 %377, i64* %39
	; IfStmt
	%381 = load i64, i64* %39, align 8
	%382 = icmp sgt i64 %381, 0
	br i1 %382, label %if.then-92, label %if.done-93

if.then-92:
	%383 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %383, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a1, i64 0, i32 0), i64 2})
	br label %if.done-93

if.done-93:
	%384 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%385 = load %..string, %..string* %38, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %384, %..string %385)
	%386 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %386, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a2, i64 0, i32 0), i64 2})
	%387 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%388 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%389 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %388, i64 0
	%390 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %389, i64 0, i32 2
	%391 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %390, i64 0, i32 0
	%392 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %391, align 8
	%393 = extractvalue {%Type_Info**, i64, i64} %392, 0
	%394 = extractvalue {%Type_Info**, i64, i64} %392, 1
	%395 = load i64, i64* %39, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$a3, i64 0, i32 0), i64 25}, i64 208, i64 31, i64 %395, i64 %394)
	%396 = getelementptr inbounds %Type_Info*, %Type_Info** %393, i64 %395
	%397 = load %Type_Info*, %Type_Info** %396, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %387, %Type_Info* %397)
	br label %for.index.loop-90

for.index.done-94:
	%398 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %398, i8 125)
	br label %typematch.done-129

typematch.next-95:
	%399 = icmp eq i64 %75, 17
	br i1 %399, label %typematch.body-116, label %typematch.next-115

typematch.body-96:
	%400 = bitcast %..rawptr %76 to %Type_Info.Union*
	store %Type_Info.Union* zeroinitializer, %Type_Info.Union** %42
	store %Type_Info.Union* %400, %Type_Info.Union** %42
	%401 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %401, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$a4, i64 0, i32 0), i64 7})
	; cf
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} zeroinitializer, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43
		; SelectorExpr
	%402 = load %Type_Info.Union*, %Type_Info.Union** %42, align 8
	%403 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %402, i64 0
	%404 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %403, i64 0, i32 2
	%405 = load {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %404, align 8
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} %405, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43
	; total_count
	store i64 zeroinitializer, i64* %44
		store i64 0, i64* %44
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %45
		; i
	store i64 zeroinitializer, i64* %46
		; SelectorExpr
	%406 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 1
	%407 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %406, align 8
	store i64 zeroinitializer, i64* %47
	%408 = extractvalue {%..string*, i64, i64} %407, 1
	store i64 %408, i64* %47
	store i64 zeroinitializer, i64* %48
	store i64 -1, i64* %48
	br label %for.index.loop-97

for.index.loop-97:
	%409 = load i64, i64* %48, align 8
	%410 = add i64 %409, 1
	store i64 %410, i64* %48
	%411 = load i64, i64* %47, align 8
	%412 = icmp slt i64 %410, %411
	br i1 %412, label %for.index.body-98, label %for.index.done-101

for.index.body-98:
	%413 = load i64, i64* %48, align 8
	%414 = extractvalue {%..string*, i64, i64} %407, 0
	%415 = getelementptr inbounds %..string, %..string* %414, i64 %413
	%416 = load %..string, %..string* %415, align 8
	store %..string %416, %..string* %45
	store i64 %413, i64* %46
	; IfStmt
	%417 = load i64, i64* %46, align 8
	%418 = icmp sgt i64 %417, 0
	br i1 %418, label %if.then-99, label %if.done-100

if.then-99:
	%419 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %419, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a5, i64 0, i32 0), i64 2})
	br label %if.done-100

if.done-100:
	%420 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%421 = load %..string, %..string* %45, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %420, %..string %421)
	%422 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %422, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a6, i64 0, i32 0), i64 2})
	%423 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%424 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 0
	%425 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %424, align 8
	%426 = extractvalue {%Type_Info**, i64, i64} %425, 0
	%427 = extractvalue {%Type_Info**, i64, i64} %425, 1
	%428 = load i64, i64* %46, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$a7, i64 0, i32 0), i64 25}, i64 222, i64 29, i64 %428, i64 %427)
	%429 = getelementptr inbounds %Type_Info*, %Type_Info** %426, i64 %428
	%430 = load %Type_Info*, %Type_Info** %429, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %423, %Type_Info* %430)
	%431 = load i64, i64* %44, align 8
	%432 = add i64 %431, 1
	store i64 %432, i64* %44
	br label %for.index.loop-97

for.index.done-101:
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %49
		; i
	store i64 zeroinitializer, i64* %50
		; SelectorExpr
	%433 = load %Type_Info.Union*, %Type_Info.Union** %42, align 8
	%434 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %433, i64 0
	%435 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %434, i64 0, i32 3
	%436 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %435, align 8
	store i64 zeroinitializer, i64* %51
	%437 = extractvalue {%..string*, i64, i64} %436, 1
	store i64 %437, i64* %51
	store i64 zeroinitializer, i64* %52
	store i64 -1, i64* %52
	br label %for.index.loop-102

for.index.loop-102:
	%438 = load i64, i64* %52, align 8
	%439 = add i64 %438, 1
	store i64 %439, i64* %52
	%440 = load i64, i64* %51, align 8
	%441 = icmp slt i64 %439, %440
	br i1 %441, label %for.index.body-103, label %for.index.done-114

for.index.body-103:
	%442 = load i64, i64* %52, align 8
	%443 = extractvalue {%..string*, i64, i64} %436, 0
	%444 = getelementptr inbounds %..string, %..string* %443, i64 %442
	%445 = load %..string, %..string* %444, align 8
	store %..string %445, %..string* %49
	store i64 %442, i64* %50
	; IfStmt
	%446 = load i64, i64* %44, align 8
	%447 = icmp sgt i64 %446, 0
	br i1 %447, label %if.then-105, label %cmp.or-104

cmp.or-104:
	%448 = load i64, i64* %50, align 8
	%449 = icmp sgt i64 %448, 0
	br i1 %449, label %if.then-105, label %if.done-106

if.then-105:
	%450 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %450, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a8, i64 0, i32 0), i64 2})
	br label %if.done-106

if.done-106:
	%451 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%452 = load %..string, %..string* %49, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %451, %..string %452)
	%453 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %453, i8 123)
	; DeferStmt
	; variant_type
	store %Type_Info* zeroinitializer, %Type_Info** %53
		; IndexExpr
	; SelectorExpr
	%454 = load %Type_Info.Union*, %Type_Info.Union** %42, align 8
	%455 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %454, i64 0
	%456 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %455, i64 0, i32 4
	%457 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %456, align 8
	%458 = extractvalue {%Type_Info**, i64, i64} %457, 0
	%459 = extractvalue {%Type_Info**, i64, i64} %457, 1
	%460 = load i64, i64* %50, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$a9, i64 0, i32 0), i64 25}, i64 233, i64 54, i64 %460, i64 %459)
	%461 = getelementptr inbounds %Type_Info*, %Type_Info** %458, i64 %460
	%462 = load %Type_Info*, %Type_Info** %461, align 8
	%463 = call %Type_Info* @.type_info_base(%Type_Info* %462)
	store %Type_Info* %463, %Type_Info** %53
	; variant
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %54
		%464 = load %Type_Info*, %Type_Info** %53, align 8
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %55
	%465 = getelementptr inbounds %Type_Info, %Type_Info* %464, i64 0, i32 2 ; UnionTagPtr
	%466 = load i64, i64* %465, align 8
	%467 = icmp eq i64 %466, 16
	br i1 %467, label %union_cast.ok-107, label %union_cast.end-108

union_cast.ok-107:
	%468 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 0
	%469 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 1
	%470 = bitcast %Type_Info* %464 to %Type_Info.Struct*
	store %Type_Info.Struct* %470, %Type_Info.Struct** %468
	store i1 true, i1* %469
	br label %union_cast.end-108

union_cast.end-108:
	%471 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 1
	%472 = load i1, i1* %471, align 1
	%473 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%474 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	call void @.__union_cast_check(i1 %472, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$aa, i64 0, i32 0), i64 25}, i64 234, i64 15, %Type_Info* %473, %Type_Info* %474)
	%475 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 0
	%476 = load %Type_Info.Struct*, %Type_Info.Struct** %475, align 8
	store %Type_Info.Struct* %476, %Type_Info.Struct** %54
	; vc
	store i64 zeroinitializer, i64* %56
		; SelectorExpr
	%477 = load %Type_Info.Struct*, %Type_Info.Struct** %54, align 8
	%478 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %477, i64 0
	%479 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %478, i64 0, i32 2
	%480 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %479, i64 0, i32 1
	%481 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %480, align 8
	%482 = extractvalue {%..string*, i64, i64} %481, 1
	; SelectorExpr
	%483 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 1
	%484 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %483, align 8
	%485 = extractvalue {%..string*, i64, i64} %484, 1
	%486 = sub i64 %482, %485
	store i64 %486, i64* %56
	; RangeStmt
	; j
	store i64 zeroinitializer, i64* %57
		store i64 zeroinitializer, i64* %58
	store i64 0, i64* %58
	store i64 zeroinitializer, i64* %59
	store i64 0, i64* %59
	br label %for.interval.loop-109

for.interval.loop-109:
	%487 = load i64, i64* %56, align 8
	%488 = load i64, i64* %58, align 8
	%489 = icmp slt i64 %488, %487
	br i1 %489, label %for.interval.body-110, label %for.interval.done-113

for.interval.body-110:
	%490 = load i64, i64* %58, align 8
	%491 = load i64, i64* %59, align 8
	%492 = load i64, i64* %58, align 8
	%493 = add i64 %492, 1
	store i64 %493, i64* %58
	%494 = load i64, i64* %59, align 8
	%495 = add i64 %494, 1
	store i64 %495, i64* %59
	store i64 %490, i64* %57
	; IfStmt
	%496 = load i64, i64* %57, align 8
	%497 = icmp sgt i64 %496, 0
	br i1 %497, label %if.then-111, label %if.done-112

if.then-111:
	%498 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %498, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ab, i64 0, i32 0), i64 2})
	br label %if.done-112

if.done-112:
	; index
	store i64 zeroinitializer, i64* %60
		%499 = load i64, i64* %57, align 8
	; SelectorExpr
	%500 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 1
	%501 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %500, align 8
	%502 = extractvalue {%..string*, i64, i64} %501, 1
	%503 = add i64 %499, %502
	store i64 %503, i64* %60
	%504 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%505 = load %Type_Info.Struct*, %Type_Info.Struct** %54, align 8
	%506 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %505, i64 0
	%507 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %506, i64 0, i32 2
	%508 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %507, i64 0, i32 1
	%509 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %508, align 8
	%510 = extractvalue {%..string*, i64, i64} %509, 0
	%511 = extractvalue {%..string*, i64, i64} %509, 1
	%512 = load i64, i64* %60, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ac, i64 0, i32 0), i64 25}, i64 242, i64 37, i64 %512, i64 %511)
	%513 = getelementptr inbounds %..string, %..string* %510, i64 %512
	%514 = load %..string, %..string* %513, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %504, %..string %514)
	%515 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %515, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ad, i64 0, i32 0), i64 2})
	%516 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%517 = load %Type_Info.Struct*, %Type_Info.Struct** %54, align 8
	%518 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %517, i64 0
	%519 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %518, i64 0, i32 2
	%520 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %519, i64 0, i32 0
	%521 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %520, align 8
	%522 = extractvalue {%Type_Info**, i64, i64} %521, 0
	%523 = extractvalue {%Type_Info**, i64, i64} %521, 1
	%524 = load i64, i64* %60, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ae, i64 0, i32 0), i64 25}, i64 244, i64 35, i64 %524, i64 %523)
	%525 = getelementptr inbounds %Type_Info*, %Type_Info** %522, i64 %524
	%526 = load %Type_Info*, %Type_Info** %525, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %516, %Type_Info* %526)
	br label %for.interval.loop-109

for.interval.done-113:
	; defer
	%527 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %527, i8 125)
	br label %for.index.loop-102

for.index.done-114:
	%528 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %528, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$af, i64 0, i32 0), i64 1})
	br label %typematch.done-129

typematch.next-115:
	%529 = icmp eq i64 %75, 19
	br i1 %529, label %typematch.body-123, label %typematch.next-122

typematch.body-116:
	%530 = bitcast %..rawptr %76 to %Type_Info.Raw_Union*
	store %Type_Info.Raw_Union* zeroinitializer, %Type_Info.Raw_Union** %61
	store %Type_Info.Raw_Union* %530, %Type_Info.Raw_Union** %61
	%531 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %531, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$b0, i64 0, i32 0), i64 11})
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %62
		; i
	store i64 zeroinitializer, i64* %63
		; SelectorExpr
	%532 = load %Type_Info.Raw_Union*, %Type_Info.Raw_Union** %61, align 8
	%533 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %532, i64 0
	%534 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %533, i64 0, i32 2
	%535 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %534, i64 0, i32 1
	%536 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %535, align 8
	store i64 zeroinitializer, i64* %64
	%537 = extractvalue {%..string*, i64, i64} %536, 1
	store i64 %537, i64* %64
	store i64 zeroinitializer, i64* %65
	store i64 -1, i64* %65
	br label %for.index.loop-117

for.index.loop-117:
	%538 = load i64, i64* %65, align 8
	%539 = add i64 %538, 1
	store i64 %539, i64* %65
	%540 = load i64, i64* %64, align 8
	%541 = icmp slt i64 %539, %540
	br i1 %541, label %for.index.body-118, label %for.index.done-121

for.index.body-118:
	%542 = load i64, i64* %65, align 8
	%543 = extractvalue {%..string*, i64, i64} %536, 0
	%544 = getelementptr inbounds %..string, %..string* %543, i64 %542
	%545 = load %..string, %..string* %544, align 8
	store %..string %545, %..string* %62
	store i64 %542, i64* %63
	; IfStmt
	%546 = load i64, i64* %63, align 8
	%547 = icmp sgt i64 %546, 0
	br i1 %547, label %if.then-119, label %if.done-120

if.then-119:
	%548 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %548, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$b1, i64 0, i32 0), i64 2})
	br label %if.done-120

if.done-120:
	%549 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%550 = load %..string, %..string* %62, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %549, %..string %550)
	%551 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %551, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$b2, i64 0, i32 0), i64 2})
	%552 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%553 = load %Type_Info.Raw_Union*, %Type_Info.Raw_Union** %61, align 8
	%554 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %553, i64 0
	%555 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %554, i64 0, i32 2
	%556 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %555, i64 0, i32 0
	%557 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %556, align 8
	%558 = extractvalue {%Type_Info**, i64, i64} %557, 0
	%559 = extractvalue {%Type_Info**, i64, i64} %557, 1
	%560 = load i64, i64* %63, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$b3, i64 0, i32 0), i64 25}, i64 257, i64 31, i64 %560, i64 %559)
	%561 = getelementptr inbounds %Type_Info*, %Type_Info** %558, i64 %560
	%562 = load %Type_Info*, %Type_Info** %561, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %552, %Type_Info* %562)
	br label %for.index.loop-117

for.index.done-121:
	%563 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %563, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$b4, i64 0, i32 0), i64 1})
	br label %typematch.done-129

typematch.next-122:
	br label %typematch.done-129

typematch.body-123:
	%564 = bitcast %..rawptr %76 to %Type_Info.Enum*
	store %Type_Info.Enum* zeroinitializer, %Type_Info.Enum** %66
	store %Type_Info.Enum* %564, %Type_Info.Enum** %66
	%565 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %565, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$b5, i64 0, i32 0), i64 5})
	%566 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%567 = load %Type_Info.Enum*, %Type_Info.Enum** %66, align 8
	%568 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %567, i64 0
	%569 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %568, i64 0, i32 2
	%570 = load %Type_Info*, %Type_Info** %569, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %566, %Type_Info* %570)
	%571 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %571, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$b6, i64 0, i32 0), i64 2})
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %67
		; i
	store i64 zeroinitializer, i64* %68
		; SelectorExpr
	%572 = load %Type_Info.Enum*, %Type_Info.Enum** %66, align 8
	%573 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %572, i64 0
	%574 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %573, i64 0, i32 3
	%575 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %574, align 8
	store i64 zeroinitializer, i64* %69
	%576 = extractvalue {%..string*, i64, i64} %575, 1
	store i64 %576, i64* %69
	store i64 zeroinitializer, i64* %70
	store i64 -1, i64* %70
	br label %for.index.loop-124

for.index.loop-124:
	%577 = load i64, i64* %70, align 8
	%578 = add i64 %577, 1
	store i64 %578, i64* %70
	%579 = load i64, i64* %69, align 8
	%580 = icmp slt i64 %578, %579
	br i1 %580, label %for.index.body-125, label %for.index.done-128

for.index.body-125:
	%581 = load i64, i64* %70, align 8
	%582 = extractvalue {%..string*, i64, i64} %575, 0
	%583 = getelementptr inbounds %..string, %..string* %582, i64 %581
	%584 = load %..string, %..string* %583, align 8
	store %..string %584, %..string* %67
	store i64 %581, i64* %68
	; IfStmt
	%585 = load i64, i64* %68, align 8
	%586 = icmp sgt i64 %585, 0
	br i1 %586, label %if.then-126, label %if.done-127

if.then-126:
	%587 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %587, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$b7, i64 0, i32 0), i64 2})
	br label %if.done-127

if.done-127:
	%588 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%589 = load %..string, %..string* %67, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %588, %..string %589)
	br label %for.index.loop-124

for.index.done-128:
	%590 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %590, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$b8, i64 0, i32 0), i64 1})
	br label %typematch.done-129

typematch.done-129:
	ret void
}

define i64 @.fmt-4.bprint({i8*, i64, i64}* %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca %fmt-4.Fmt_Info, align 8
	%3 = alloca i1, align 1
	%4 = alloca %..any, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %2
		; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0, i32 3
	%10 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	store {i8*, i64, i64}* %10, {i8*, i64, i64}** %9
	; prev_string
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %4
		; i
	store i64 zeroinitializer, i64* %5
		%11 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %6
	%12 = extractvalue {%..any*, i64, i64} %11, 1
	store i64 %12, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-1

for.index.loop-1:
	%13 = load i64, i64* %7, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %7
	%15 = load i64, i64* %6, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %for.index.body-2, label %for.index.done-9

for.index.body-2:
	%17 = load i64, i64* %7, align 8
	%18 = extractvalue {%..any*, i64, i64} %11, 0
	%19 = getelementptr inbounds %..any, %..any* %18, i64 %17
	%20 = load %..any, %..any* %19, align 8
	store %..any %20, %..any* %4
	store i64 %17, i64* %5
	; is_string
	store i1 zeroinitializer, i1* %8
		%21 = load %..any, %..any* %4, align 8
	%22 = extractvalue %..any %21, 0
	%23 = extractvalue %..any %21, 1
	%24 = bitcast %..rawptr null to %Type_Info*
	%25 = icmp ne %Type_Info* %22, %24
	%26 = icmp ne %..rawptr %23, null
	%27 = and i1 %25, %26
	%28 = load %..any, %..any* %4, align 8
	%29 = extractvalue %..any %28, 0
	%30 = extractvalue %..any %28, 1
	%31 = bitcast %..rawptr null to %Type_Info*
	%32 = icmp ne %Type_Info* %29, %31
	%33 = icmp ne %..rawptr %30, null
	%34 = and i1 %32, %33
	br i1 %34, label %logical.cmp.rhs-3, label %logical.cmp.done-4

logical.cmp.rhs-3:
	; SelectorExpr
	; SelectorExpr
	%35 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%36 = load %Type_Info*, %Type_Info** %35, align 8
	%37 = call i1 @.types-27.is_string(%Type_Info* %36)
	br label %logical.cmp.done-4

logical.cmp.done-4:
	%38 = phi i1 [ false, %for.index.body-2 ], [ %37, %logical.cmp.rhs-3 ]
	store i1 %38, i1* %8
	; IfStmt
	%39 = load i64, i64* %5, align 8
	%40 = icmp sgt i64 %39, 0
	br i1 %40, label %cmp.and-5, label %if.done-8

cmp.and-5:
	%41 = load i1, i1* %8, align 1
	br i1 %41, label %if.done-8, label %cmp.and-6

cmp.and-6:
	%42 = load i1, i1* %3, align 1
	br i1 %42, label %if.done-8, label %if.then-7

if.then-7:
	%43 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %43, i8 32)
	br label %if.done-8

if.done-8:
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	; IndexExpr
	%45 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%46 = extractvalue {%..any*, i64, i64} %45, 0
	%47 = extractvalue {%..any*, i64, i64} %45, 1
	%48 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$b9, i64 0, i32 0), i64 25}, i64 286, i64 23, i64 %48, i64 %47)
	%49 = getelementptr inbounds %..any, %..any* %46, i64 %48
	%50 = load %..any, %..any* %49, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %44, %..any %50, i32 118)
	; AssignStmt
	%51 = load i1, i1* %8, align 1
	store i1 %51, i1* %3
	br label %for.index.loop-1

for.index.done-9:
	; ReturnStmt
	%52 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%53 = load {i8*, i64, i64}, {i8*, i64, i64}* %52, align 8
	%54 = extractvalue {i8*, i64, i64} %53, 1
	ret i64 %54
}

define i64 @.fmt-4.bprintln({i8*, i64, i64}* %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca %fmt-4.Fmt_Info, align 8
	%3 = alloca %..any, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %2
		; AssignStmt
	; SelectorExpr
	%7 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0, i32 3
	%8 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	store {i8*, i64, i64}* %8, {i8*, i64, i64}** %7
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %3
		; i
	store i64 zeroinitializer, i64* %4
		%9 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %5
	%10 = extractvalue {%..any*, i64, i64} %9, 1
	store i64 %10, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-1

for.index.loop-1:
	%11 = load i64, i64* %6, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %6
	%13 = load i64, i64* %5, align 8
	%14 = icmp slt i64 %12, %13
	br i1 %14, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%15 = load i64, i64* %6, align 8
	%16 = extractvalue {%..any*, i64, i64} %9, 0
	%17 = getelementptr inbounds %..any, %..any* %16, i64 %15
	%18 = load %..any, %..any* %17, align 8
	store %..any %18, %..any* %3
	store i64 %15, i64* %4
	; IfStmt
	%19 = load i64, i64* %4, align 8
	%20 = icmp sgt i64 %19, 0
	br i1 %20, label %if.then-3, label %if.done-4

if.then-3:
	%21 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %21, i8 32)
	br label %if.done-4

if.done-4:
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	; IndexExpr
	%23 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%24 = extractvalue {%..any*, i64, i64} %23, 0
	%25 = extractvalue {%..any*, i64, i64} %23, 1
	%26 = load i64, i64* %4, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ba, i64 0, i32 0), i64 25}, i64 300, i64 23, i64 %26, i64 %25)
	%27 = getelementptr inbounds %..any, %..any* %24, i64 %26
	%28 = load %..any, %..any* %27, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %22, %..any %28, i32 118)
	br label %for.index.loop-1

for.index.done-5:
	%29 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %29, i8 10)
	; ReturnStmt
	%30 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%31 = load {i8*, i64, i64}, {i8*, i64, i64}* %30, align 8
	%32 = extractvalue {i8*, i64, i64} %31, 1
	ret i64 %32
}

define %..string @.fmt-4.sprint({i8*, i64, i64} %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca i64, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; count
	store i64 zeroinitializer, i64* %2
		%5 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0
	%6 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%7 = call i64 @.fmt-4.bprint({i8*, i64, i64}* %5, {%..any*, i64, i64} %6)
	store i64 %7, i64* %2
	; ReturnStmt
	; SliceExpr
	%8 = load i64, i64* %2, align 8
	%9 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%10 = extractvalue {i8*, i64, i64} %9, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$bb, i64 0, i32 0), i64 25}, i64 308, i64 24, i64 0, i64 %8, i64 %10)
	%11 = extractvalue {i8*, i64, i64} %9, 0
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	%13 = sub i64 %8, 0
	%14 = sub i64 %10, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %12, i8** %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %13, i64* %16
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %14, i64* %17
	%18 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	; cast - cast
	%19 = extractvalue {i8*, i64, i64} %18, 0
	%20 = extractvalue {i8*, i64, i64} %18, 1
	store %..string zeroinitializer, %..string* %4
	%21 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 0
	%22 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 1
	store i8* %19, i8** %21
	store i64 %20, i64* %22
	%23 = load %..string, %..string* %4, align 8
	ret %..string %23
}

define %..string @.fmt-4.sprintf({i8*, i64, i64} %buf, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca i64, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; count
	store i64 zeroinitializer, i64* %3
		%6 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0
	%7 = load %..string, %..string* %1, align 8
	%8 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%9 = call i64 @.fmt-4.bprintf({i8*, i64, i64}* %6, %..string %7, {%..any*, i64, i64} %8)
	store i64 %9, i64* %3
	; ReturnStmt
	; SliceExpr
	%10 = load i64, i64* %3, align 8
	%11 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%12 = extractvalue {i8*, i64, i64} %11, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$bc, i64 0, i32 0), i64 25}, i64 316, i64 24, i64 0, i64 %10, i64 %12)
	%13 = extractvalue {i8*, i64, i64} %11, 0
	%14 = getelementptr inbounds i8, i8* %13, i64 0
	%15 = sub i64 %10, 0
	%16 = sub i64 %12, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %14, i8** %17
	%18 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %15, i64* %18
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %16, i64* %19
	%20 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	; cast - cast
	%21 = extractvalue {i8*, i64, i64} %20, 0
	%22 = extractvalue {i8*, i64, i64} %20, 1
	store %..string zeroinitializer, %..string* %5
	%23 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%24 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i8* %21, i8** %23
	store i64 %22, i64* %24
	%25 = load %..string, %..string* %5, align 8
	ret %..string %25
}

define {i64, i64, i1} @.fmt-4._parse_int(%..string %s, i64 %offset) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i32, align 4
	%9 = alloca {i64, i64, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %offset, i64* %1
	; result
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; ok
	store i1 zeroinitializer, i1* %3
		store i1 true, i1* %3
	; i
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	; RangeStmt
	; o
	store i64 zeroinitializer, i64* %5
		%10 = load i64, i64* %1, align 8
	store i64 zeroinitializer, i64* %6
	store i64 %10, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 0, i64* %7
	br label %for.interval.loop-1

for.interval.loop-1:
	%11 = load %..string, %..string* %0, align 8
	%12 = extractvalue %..string %11, 1
	%13 = load i64, i64* %6, align 8
	%14 = icmp slt i64 %13, %12
	br i1 %14, label %for.interval.body-2, label %for.interval.done-5

for.interval.body-2:
	%15 = load i64, i64* %6, align 8
	%16 = load i64, i64* %7, align 8
	%17 = load i64, i64* %6, align 8
	%18 = add i64 %17, 1
	store i64 %18, i64* %6
	%19 = load i64, i64* %7, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %7
	store i64 %15, i64* %5
	; c
	store i32 zeroinitializer, i32* %8
		; IndexExpr
	%21 = load %..string, %..string* %0, align 8
	%22 = extractvalue %..string %21, 0
	%23 = extractvalue %..string %21, 1
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %4, align 8
	%26 = add i64 %24, %25
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$bd, i64 0, i32 0), i64 25}, i64 332, i64 20, i64 %26, i64 %23)
	%27 = getelementptr inbounds i8, i8* %22, i64 %26
	%28 = load i8, i8* %27, align 1
	; cast - cast
	%29 = zext i8 %28 to i32
	store i32 %29, i32* %8
	; IfStmt
	%30 = load i32, i32* %8, align 4
	%31 = call i1 @.fmt-4._parse_int.is_digit-0(i32 %30)
	br i1 %31, label %if.done-4, label %if.then-3

if.then-3:
	; break
	br label %for.interval.done-5

if.done-4:
	%32 = load i64, i64* %4, align 8
	%33 = add i64 %32, 1
	store i64 %33, i64* %4
	; AssignStmt
	%34 = load i64, i64* %2, align 8
	%35 = mul i64 %34, 10
	store i64 %35, i64* %2
	; AssignStmt
	%36 = load i32, i32* %8, align 4
	%37 = sub i32 %36, 48
	; cast - cast
	%38 = sext i32 %37 to i64
	%39 = load i64, i64* %2, align 8
	%40 = add i64 %39, %38
	store i64 %40, i64* %2
	br label %for.interval.loop-1

for.interval.done-5:
	; ReturnStmt
	%41 = load i64, i64* %2, align 8
	%42 = load i64, i64* %1, align 8
	%43 = load i64, i64* %4, align 8
	%44 = add i64 %42, %43
	%45 = load i64, i64* %4, align 8
	%46 = icmp ne i64 %45, 0
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %9
	%47 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 0
	store i64 %41, i64* %47
	%48 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 1
	store i64 %44, i64* %48
	%49 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 2
	store i1 %46, i1* %49
	%50 = load {i64, i64, i1}, {i64, i64, i1}* %9, align 8
	ret {i64, i64, i1} %50
}

define i1 @.fmt-4._parse_int.is_digit-0(i32 %r) alwaysinline {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %r, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 4
	%2 = icmp sle i32 48, %1
	%3 = load i32, i32* %0, align 4
	%4 = icmp sle i32 48, %3
	br i1 %4, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%5 = load i32, i32* %0, align 4
	%6 = icmp sle i32 %5, 57
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%7 = phi i1 [ false, %decls-0 ], [ %6, %logical.cmp.rhs-1 ]
	ret i1 %7
}

define {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %fi, i64 %arg_index, %..string %format, i64 %offset, i64 %arg_count) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca {i64, i64, i1}, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	%9 = alloca %..string, align 8
	%10 = alloca {i64, i64, i1}, align 8
	%11 = alloca {i64, i64, i1}, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %arg_index, i64* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %format, %..string* %2
	store i64 zeroinitializer, i64* %3
		store i64 %offset, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %arg_count, i64* %4
	; IfStmt
	%12 = load %..string, %..string* %2, align 8
	%13 = extractvalue %..string %12, 1
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 %13, %14
	br i1 %15, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; IndexExpr
	%16 = load %..string, %..string* %2, align 8
	%17 = extractvalue %..string %16, 0
	%18 = extractvalue %..string %16, 1
	%19 = load i64, i64* %3, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$be, i64 0, i32 0), i64 25}, i64 370, i64 37, i64 %19, i64 %18)
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	%21 = load i8, i8* %20, align 1
	%22 = icmp ne i8 %21, 91
	br i1 %22, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %3, align 8
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %5
	%25 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 0
	store i64 %23, i64* %25
	%26 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 1
	store i64 %24, i64* %26
	%27 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 2
	store i1 false, i1* %27
	%28 = load {i64, i64, i1}, {i64, i64, i1}* %5, align 8
	ret {i64, i64, i1} %28

if.done-3:
	; AssignStmt
	; SelectorExpr
	%29 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0
	%31 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0, i32 11
	store i1 true, i1* %31
	; index
	store i64 zeroinitializer, i64* %6
		; width
	store i64 zeroinitializer, i64* %7
		; ok
	store i1 zeroinitializer, i1* %8
		; SliceExpr
	%32 = load i64, i64* %3, align 8
	%33 = load %..string, %..string* %2, align 8
	%34 = extractvalue %..string %33, 1
	%35 = extractvalue %..string %33, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$bf, i64 0, i32 0), i64 25}, i64 374, i64 45, i64 %32, i64 %34)
	%36 = extractvalue %..string %33, 0
	%37 = getelementptr inbounds i8, i8* %36, i64 %32
	%38 = sub i64 %34, %32
	store %..string zeroinitializer, %..string* %9
	%39 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %37, i8** %39
	%40 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %38, i64* %40
	%41 = load %..string, %..string* %9, align 8
	%42 = call {i64, i64, i1} @.fmt-4._arg_number.parse_arg_number-0(%..string %41)
	%43 = extractvalue {i64, i64, i1} %42, 0
	%44 = extractvalue {i64, i64, i1} %42, 1
	%45 = extractvalue {i64, i64, i1} %42, 2
	store i64 %43, i64* %6
	store i64 %44, i64* %7
	store i1 %45, i1* %8
	; IfStmt
	%46 = load i1, i1* %8, align 1
	br i1 %46, label %cmp.and-4, label %if.done-7

cmp.and-4:
	%47 = load i64, i64* %6, align 8
	%48 = icmp sle i64 0, %47
	br i1 %48, label %cmp.and-5, label %if.done-7

cmp.and-5:
	%49 = load i64, i64* %6, align 8
	%50 = load i64, i64* %4, align 8
	%51 = icmp slt i64 %49, %50
	br i1 %51, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %3, align 8
	%54 = load i64, i64* %7, align 8
	%55 = add i64 %53, %54
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %10
	%56 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 0
	store i64 %52, i64* %56
	%57 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 1
	store i64 %55, i64* %57
	%58 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 2
	store i1 true, i1* %58
	%59 = load {i64, i64, i1}, {i64, i64, i1}* %10, align 8
	ret {i64, i64, i1} %59

if.done-7:
	; AssignStmt
	; SelectorExpr
	%60 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0, i32 12
	store i1 false, i1* %62
	; ReturnStmt
	%63 = load i64, i64* %1, align 8
	%64 = load i64, i64* %3, align 8
	%65 = load i64, i64* %7, align 8
	%66 = add i64 %64, %65
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %11
	%67 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 0
	store i64 %63, i64* %67
	%68 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 1
	store i64 %66, i64* %68
	%69 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 2
	store i1 false, i1* %69
	%70 = load {i64, i64, i1}, {i64, i64, i1}* %11, align 8
	ret {i64, i64, i1} %70
}

define {i64, i64, i1} @.fmt-4._arg_number.parse_arg_number-0(%..string %format) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i64, i64, i1}, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i1, align 1
	%8 = alloca {i64, i64, i1}, align 8
	%9 = alloca {i64, i64, i1}, align 8
	%10 = alloca {i64, i64, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %format, %..string* %0
	; IfStmt
	%11 = load %..string, %..string* %0, align 8
	%12 = extractvalue %..string %11, 1
	%13 = icmp slt i64 %12, 3
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %1
	%14 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 0
	store i64 0, i64* %14
	%15 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 1
	store i64 1, i64* %15
	%16 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 2
	store i1 false, i1* %16
	%17 = load {i64, i64, i1}, {i64, i64, i1}* %1, align 8
	ret {i64, i64, i1} %17

if.done-2:
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %2
		store i64 zeroinitializer, i64* %3
	store i64 1, i64* %3
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	br label %for.interval.loop-3

for.interval.loop-3:
	%18 = load %..string, %..string* %0, align 8
	%19 = extractvalue %..string %18, 1
	%20 = load i64, i64* %3, align 8
	%21 = icmp slt i64 %20, %19
	br i1 %21, label %for.interval.body-4, label %for.interval.done-10

for.interval.body-4:
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %4, align 8
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	%26 = load i64, i64* %4, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %4
	store i64 %22, i64* %2
	; IfStmt
	; IndexExpr
	%28 = load %..string, %..string* %0, align 8
	%29 = extractvalue %..string %28, 0
	%30 = extractvalue %..string %28, 1
	%31 = load i64, i64* %2, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$c0, i64 0, i32 0), i64 25}, i64 357, i64 14, i64 %31, i64 %30)
	%32 = getelementptr inbounds i8, i8* %29, i64 %31
	%33 = load i8, i8* %32, align 1
	%34 = icmp eq i8 %33, 93
	br i1 %34, label %if.then-5, label %if.done-9

if.then-5:
	; width
	store i64 zeroinitializer, i64* %5
		; new_index
	store i64 zeroinitializer, i64* %6
		; ok
	store i1 zeroinitializer, i1* %7
		%35 = load %..string, %..string* %0, align 8
	%36 = call {i64, i64, i1} @.fmt-4._parse_int(%..string %35, i64 1)
	%37 = extractvalue {i64, i64, i1} %36, 0
	%38 = extractvalue {i64, i64, i1} %36, 1
	%39 = extractvalue {i64, i64, i1} %36, 2
	store i64 %37, i64* %5
	store i64 %38, i64* %6
	store i1 %39, i1* %7
	; IfStmt
	%40 = load i1, i1* %7, align 1
	br i1 %40, label %cmp.or-6, label %if.then-7

cmp.or-6:
	%41 = load i64, i64* %6, align 8
	%42 = load i64, i64* %2, align 8
	%43 = icmp ne i64 %41, %42
	br i1 %43, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	%44 = load i64, i64* %2, align 8
	%45 = add i64 %44, 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %8
	%46 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 0
	store i64 0, i64* %46
	%47 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 1
	store i64 %45, i64* %47
	%48 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 2
	store i1 false, i1* %48
	%49 = load {i64, i64, i1}, {i64, i64, i1}* %8, align 8
	ret {i64, i64, i1} %49

if.done-8:
	; ReturnStmt
	%50 = load i64, i64* %5, align 8
	%51 = sub i64 %50, 1
	%52 = load i64, i64* %2, align 8
	%53 = add i64 %52, 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %9
	%54 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 0
	store i64 %51, i64* %54
	%55 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 1
	store i64 %53, i64* %55
	%56 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 2
	store i1 true, i1* %56
	%57 = load {i64, i64, i1}, {i64, i64, i1}* %9, align 8
	ret {i64, i64, i1} %57

if.done-9:
	br label %for.interval.loop-3

for.interval.done-10:
	; ReturnStmt
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %10
	%58 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 0
	store i64 0, i64* %58
	%59 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 1
	store i64 1, i64* %59
	%60 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 2
	store i1 false, i1* %60
	%61 = load {i64, i64, i1}, {i64, i64, i1}* %10, align 8
	ret {i64, i64, i1} %61
}

define {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %args, i64 %arg_index) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i1, align 1
	%5 = alloca %..any, align 8
	%6 = alloca i64, align 8
	%7 = alloca i8, align 1
	%8 = alloca i16, align 2
	%9 = alloca i32, align 4
	%10 = alloca i64, align 8
	%11 = alloca i8, align 1
	%12 = alloca i16, align 2
	%13 = alloca i32, align 4
	%14 = alloca i64, align 8
	%15 = alloca %..any, align 8
	%16 = alloca {i64, i64, i1}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	store i64 zeroinitializer, i64* %1
		store i64 %arg_index, i64* %1
	; num
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; new_arg_index
	store i64 zeroinitializer, i64* %3
		%17 = load i64, i64* %1, align 8
	store i64 %17, i64* %3
	; ok
	store i1 zeroinitializer, i1* %4
		store i1 true, i1* %4
	; IfStmt
	%18 = load i64, i64* %1, align 8
	%19 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%20 = extractvalue {%..any*, i64, i64} %19, 1
	%21 = icmp slt i64 %18, %20
	br i1 %21, label %if.then-1, label %if.done-21

if.then-1:
	; arg
	store %..any zeroinitializer, %..any* %5
		; IndexExpr
	%22 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%23 = extractvalue {%..any*, i64, i64} %22, 0
	%24 = extractvalue {%..any*, i64, i64} %22, 1
	%25 = load i64, i64* %1, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$c1, i64 0, i32 0), i64 25}, i64 387, i64 15, i64 %25, i64 %24)
	%26 = getelementptr inbounds %..any, %..any* %23, i64 %25
	%27 = load %..any, %..any* %26, align 8
	store %..any %27, %..any* %5
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	; SelectorExpr
	%29 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%30 = load %Type_Info*, %Type_Info** %29, align 8
	%31 = call %Type_Info* @.type_info_base(%Type_Info* %30)
	store %Type_Info* %31, %Type_Info** %28
	; TypeMatchStmt
	%32 = load %..any, %..any* %5, align 8
	%33 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%34 = load %Type_Info*, %Type_Info** %33, align 8
	%35 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%36 = icmp eq %Type_Info* %34, %35
	br i1 %36, label %typematch.body-3, label %typematch.next-2

typematch.next-2:
	%37 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%38 = load %Type_Info*, %Type_Info** %37, align 8
	%39 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%40 = icmp eq %Type_Info* %38, %39
	br i1 %40, label %typematch.body-5, label %typematch.next-4

typematch.body-3:
	%41 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%42 = load %..rawptr, %..rawptr* %41, align 8
	%43 = bitcast %..rawptr %42 to i64*
	%44 = load i64, i64* %43, align 8
	store i64 zeroinitializer, i64* %6
	store i64 %44, i64* %6
	; AssignStmt
	%45 = load i64, i64* %6, align 8
	store i64 %45, i64* %2
	br label %typematch.done-20

typematch.next-4:
	%46 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%47 = load %Type_Info*, %Type_Info** %46, align 8
	%48 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%49 = icmp eq %Type_Info* %47, %48
	br i1 %49, label %typematch.body-7, label %typematch.next-6

typematch.body-5:
	%50 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%51 = load %..rawptr, %..rawptr* %50, align 8
	%52 = bitcast %..rawptr %51 to i8*
	%53 = load i8, i8* %52, align 1
	store i8 zeroinitializer, i8* %7
	store i8 %53, i8* %7
	; AssignStmt
	%54 = load i8, i8* %7, align 1
	; cast - cast
	%55 = sext i8 %54 to i64
	store i64 %55, i64* %2
	br label %typematch.done-20

typematch.next-6:
	%56 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%57 = load %Type_Info*, %Type_Info** %56, align 8
	%58 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%59 = icmp eq %Type_Info* %57, %58
	br i1 %59, label %typematch.body-9, label %typematch.next-8

typematch.body-7:
	%60 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%61 = load %..rawptr, %..rawptr* %60, align 8
	%62 = bitcast %..rawptr %61 to i16*
	%63 = load i16, i16* %62, align 2
	store i16 zeroinitializer, i16* %8
	store i16 %63, i16* %8
	; AssignStmt
	%64 = load i16, i16* %8, align 2
	; cast - cast
	%65 = sext i16 %64 to i64
	store i64 %65, i64* %2
	br label %typematch.done-20

typematch.next-8:
	%66 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%67 = load %Type_Info*, %Type_Info** %66, align 8
	%68 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%69 = icmp eq %Type_Info* %67, %68
	br i1 %69, label %typematch.body-11, label %typematch.next-10

typematch.body-9:
	%70 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%71 = load %..rawptr, %..rawptr* %70, align 8
	%72 = bitcast %..rawptr %71 to i32*
	%73 = load i32, i32* %72, align 4
	store i32 zeroinitializer, i32* %9
	store i32 %73, i32* %9
	; AssignStmt
	%74 = load i32, i32* %9, align 4
	; cast - cast
	%75 = sext i32 %74 to i64
	store i64 %75, i64* %2
	br label %typematch.done-20

typematch.next-10:
	%76 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%77 = load %Type_Info*, %Type_Info** %76, align 8
	%78 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%79 = icmp eq %Type_Info* %77, %78
	br i1 %79, label %typematch.body-13, label %typematch.next-12

typematch.body-11:
	%80 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%81 = load %..rawptr, %..rawptr* %80, align 8
	%82 = bitcast %..rawptr %81 to i64*
	%83 = load i64, i64* %82, align 8
	store i64 zeroinitializer, i64* %10
	store i64 %83, i64* %10
	; AssignStmt
	%84 = load i64, i64* %10, align 8
	; cast - cast
	%85 = bitcast i64 %84 to i64
	store i64 %85, i64* %2
	br label %typematch.done-20

typematch.next-12:
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%87 = load %Type_Info*, %Type_Info** %86, align 8
	%88 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	%89 = icmp eq %Type_Info* %87, %88
	br i1 %89, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%90 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%91 = load %..rawptr, %..rawptr* %90, align 8
	%92 = bitcast %..rawptr %91 to i8*
	%93 = load i8, i8* %92, align 1
	store i8 zeroinitializer, i8* %11
	store i8 %93, i8* %11
	; AssignStmt
	%94 = load i8, i8* %11, align 1
	; cast - cast
	%95 = zext i8 %94 to i64
	store i64 %95, i64* %2
	br label %typematch.done-20

typematch.next-14:
	%96 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%97 = load %Type_Info*, %Type_Info** %96, align 8
	%98 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%99 = icmp eq %Type_Info* %97, %98
	br i1 %99, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%100 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%101 = load %..rawptr, %..rawptr* %100, align 8
	%102 = bitcast %..rawptr %101 to i16*
	%103 = load i16, i16* %102, align 2
	store i16 zeroinitializer, i16* %12
	store i16 %103, i16* %12
	; AssignStmt
	%104 = load i16, i16* %12, align 2
	; cast - cast
	%105 = zext i16 %104 to i64
	store i64 %105, i64* %2
	br label %typematch.done-20

typematch.next-16:
	%106 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%107 = load %Type_Info*, %Type_Info** %106, align 8
	%108 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%109 = icmp eq %Type_Info* %107, %108
	br i1 %109, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%110 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%111 = load %..rawptr, %..rawptr* %110, align 8
	%112 = bitcast %..rawptr %111 to i32*
	%113 = load i32, i32* %112, align 4
	store i32 zeroinitializer, i32* %13
	store i32 %113, i32* %13
	; AssignStmt
	%114 = load i32, i32* %13, align 4
	; cast - cast
	%115 = zext i32 %114 to i64
	store i64 %115, i64* %2
	br label %typematch.done-20

typematch.next-18:
	store %..any zeroinitializer, %..any* %15
	store %..any %32, %..any* %15
	; AssignStmt
	store i1 false, i1* %4
	br label %typematch.done-20

typematch.body-19:
	%116 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%117 = load %..rawptr, %..rawptr* %116, align 8
	%118 = bitcast %..rawptr %117 to i64*
	%119 = load i64, i64* %118, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %119, i64* %14
	; AssignStmt
	%120 = load i64, i64* %14, align 8
	; cast - cast
	%121 = bitcast i64 %120 to i64
	store i64 %121, i64* %2
	br label %typematch.done-20

typematch.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%122 = load i64, i64* %2, align 8
	%123 = load i64, i64* %3, align 8
	%124 = load i1, i1* %4, align 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %16
	%125 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 0
	store i64 %122, i64* %125
	%126 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 1
	store i64 %123, i64* %126
	%127 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 2
	store i1 %124, i1* %127
	%128 = load {i64, i64, i1}, {i64, i64, i1}* %16, align 8
	ret {i64, i64, i1} %128
}

define void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %fi, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i32 zeroinitializer, i32* %1
		store i32 %verb, i32* %1
	; assert
	%2 = load i32, i32* %1, align 4
	%3 = icmp ne i32 %2, 118
	%4 = icmp eq i1 %3, false
	br i1 %4, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$c2, i64 0, i32 0), i64 25}, i64 409, i64 9, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$c3, i64 0, i32 0), i64 9})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	%5 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%6 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, i64 0
	%7 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %6, i64 0, i32 3
	%8 = load {i8*, i64, i64}*, {i8*, i64, i64}** %7, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %8, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$c4, i64 0, i32 0), i64 2})
	%9 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %10, i64 0, i32 3
	%12 = load {i8*, i64, i64}*, {i8*, i64, i64}** %11, align 8
	%13 = load i32, i32* %1, align 4
	call void @.fmt-4.write_rune({i8*, i64, i64}* %12, i32 %13)
	%14 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%15 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %14, i64 0
	%16 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %15, i64 0, i32 3
	%17 = load {i8*, i64, i64}*, {i8*, i64, i64}** %16, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %17, i8 40)
	; IfStmt
	; SelectorExpr
	%18 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0, i32 0
	%21 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%22 = load %Type_Info*, %Type_Info** %21, align 8
	%23 = icmp ne %Type_Info* %22, zeroinitializer
	br i1 %23, label %if.then-3, label %if.else-4

if.then-3:
	%24 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0, i32 3
	%27 = load {i8*, i64, i64}*, {i8*, i64, i64}** %26, align 8
	; SelectorExpr
	%28 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 0
	%32 = load %Type_Info*, %Type_Info** %31, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %27, %Type_Info* %32)
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 3
	%36 = load {i8*, i64, i64}*, {i8*, i64, i64}** %35, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %36, i8 61)
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0, i32 0
	%41 = load %..any, %..any* %40, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %37, %..any %41, i32 118)
	br label %if.done-5

if.else-4:
	%42 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %43, i64 0, i32 3
	%45 = load {i8*, i64, i64}*, {i8*, i64, i64}** %44, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %45, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$c5, i64 0, i32 0), i64 5})
	br label %if.done-5

if.done-5:
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0, i32 3
	%49 = load {i8*, i64, i64}*, {i8*, i64, i64}** %48, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %49, i8 41)
	ret void
}

define void @.fmt-4.fmt_bool(%fmt-4.Fmt_Info* %fi, i1 %b, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i1, align 1
	%2 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i1 zeroinitializer, i1* %1
		store i1 %b, i1* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 116
	br i1 %4, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%5 = icmp eq i32 %3, 118
	br i1 %5, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%6 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%7 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %6, i32 %7)
	br label %match.done-7

match.case.body-3:
	%8 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0, i32 3
	%11 = load {i8*, i64, i64}*, {i8*, i64, i64}** %10, align 8
	; TernaryExpr
	%12 = load i1, i1* %1, align 1
	br i1 %12, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%13 = phi %..string [ {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$c6, i64 0, i32 0), i64 4}, %if.then-4 ], [ {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$c7, i64 0, i32 0), i64 5}, %if.else-5 ]
	call void @.fmt-4.write_string({i8*, i64, i64}* %11, %..string %13)
	br label %match.done-7

match.done-7:
	ret void
}

define void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %fi, i64 %width) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca [1 x i8], align 1
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %width, i64* %1
	; IfStmt
	%8 = load i64, i64* %1, align 8
	%9 = icmp sle i64 %8, 0
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; pad_byte
	store i8 zeroinitializer, i8* %2
		store i8 32, i8* %2
	; IfStmt
	; SelectorExpr
	%10 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%11 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %10, i64 0
	%12 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %11, i64 0, i32 7
	%13 = load i1, i1* %12, align 1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	store i8 48, i8* %2
	br label %if.done-4

if.done-4:
	; count
	store i64 zeroinitializer, i64* %3
		; min
	%14 = load i64, i64* %1, align 8
	; SelectorExpr
	%15 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%16 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %15, i64 0
	%17 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %16, i64 0, i32 3
	%18 = load {i8*, i64, i64}*, {i8*, i64, i64}** %17, align 8
	%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %18, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 2
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 3
	%24 = load {i8*, i64, i64}*, {i8*, i64, i64}** %23, align 8
	%25 = load {i8*, i64, i64}, {i8*, i64, i64}* %24, align 8
	%26 = extractvalue {i8*, i64, i64} %25, 1
	%27 = sub i64 %20, %26
	%28 = icmp slt i64 %14, %27
	%29 = select i1 %28, i64 %14, i64 %27
	store i64 %29, i64* %3
	; RangeStmt
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-5

for.interval.loop-5:
	%30 = load i64, i64* %3, align 8
	%31 = load i64, i64* %4, align 8
	%32 = icmp slt i64 %31, %30
	br i1 %32, label %for.interval.body-6, label %for.interval.done-7

for.interval.body-6:
	%33 = load i64, i64* %4, align 8
	%34 = load i64, i64* %5, align 8
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %5, align 8
	%38 = add i64 %37, 1
	store i64 %38, i64* %5
	; append
	; SelectorExpr
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %40, i64 0, i32 3
	%42 = load {i8*, i64, i64}*, {i8*, i64, i64}** %41, align 8
	%43 = bitcast {i8*, i64, i64}* %42 to %..rawptr
	; SelectorExpr
	%44 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%45 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %44, i64 0
	%46 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %45, i64 0, i32 3
	%47 = load {i8*, i64, i64}*, {i8*, i64, i64}** %46, align 8
	%48 = load i8, i8* %2, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%49 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %48, i8* %49
	%50 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%51 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %50, i8** %51
	%52 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %52
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %53
	%54 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%55 = extractvalue {i8*, i64, i64} %54, 0
	%56 = extractvalue {i8*, i64, i64} %54, 1
	%57 = bitcast i8* %55 to %..rawptr
	%58 = call i64 @.__slice_append(%..rawptr %43, i64 1, i64 1, %..rawptr %57, i64 %56)
	br label %for.interval.loop-5

for.interval.done-7:
	ret void
}

define {i64, i1} @.fmt-4.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i1, align 1
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i8, align 1
	%5 = alloca i16, align 2
	%6 = alloca i32, align 4
	%7 = alloca i64, align 8
	%8 = alloca {i64, i1}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %u, i64* %0
	store i1 zeroinitializer, i1* %1
		store i1 %is_signed, i1* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	; neg
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; IfStmt
	%9 = load i1, i1* %1, align 1
	br i1 %9, label %if.then-1, label %if.done-19

if.then-1:
	; MatchStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 8
	br i1 %11, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%12 = icmp eq i64 %10, 16
	br i1 %12, label %match.fall.body-7, label %match.case.next-6

match.case.body-3:
	; i
	store i8 zeroinitializer, i8* %4
		%13 = load i64, i64* %0, align 8
	; cast - cast
	%14 = trunc i64 %13 to i8
	store i8 %14, i8* %4
	; AssignStmt
	%15 = load i8, i8* %4, align 1
	%16 = icmp slt i8 %15, 0
	store i1 %16, i1* %3
	; IfStmt
	%17 = load i1, i1* %3, align 1
	br i1 %17, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%18 = load i8, i8* %4, align 1
	%19 = sub i8 0, %18
	store i8 %19, i8* %4
	br label %if.done-5

if.done-5:
	; AssignStmt
	%20 = load i8, i8* %4, align 1
	; cast - cast
	%21 = sext i8 %20 to i64
	store i64 %21, i64* %0
	br label %match.done-18

match.case.next-6:
	%22 = icmp eq i64 %10, 32
	br i1 %22, label %match.fall.body-11, label %match.case.next-10

match.fall.body-7:
	; i
	store i16 zeroinitializer, i16* %5
		%23 = load i64, i64* %0, align 8
	; cast - cast
	%24 = trunc i64 %23 to i16
	store i16 %24, i16* %5
	; AssignStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 0
	store i1 %26, i1* %3
	; IfStmt
	%27 = load i1, i1* %3, align 1
	br i1 %27, label %if.then-8, label %if.done-9

if.then-8:
	; AssignStmt
	%28 = load i16, i16* %5, align 2
	%29 = sub i16 0, %28
	store i16 %29, i16* %5
	br label %if.done-9

if.done-9:
	; AssignStmt
	%30 = load i16, i16* %5, align 2
	; cast - cast
	%31 = sext i16 %30 to i64
	store i64 %31, i64* %0
	br label %match.done-18

match.case.next-10:
	%32 = icmp eq i64 %10, 64
	br i1 %32, label %match.fall.body-15, label %match.case.next-14

match.fall.body-11:
	; i
	store i32 zeroinitializer, i32* %6
		%33 = load i64, i64* %0, align 8
	; cast - cast
	%34 = trunc i64 %33 to i32
	store i32 %34, i32* %6
	; AssignStmt
	%35 = load i32, i32* %6, align 4
	%36 = icmp slt i32 %35, 0
	store i1 %36, i1* %3
	; IfStmt
	%37 = load i1, i1* %3, align 1
	br i1 %37, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%38 = load i32, i32* %6, align 4
	%39 = sub i32 0, %38
	store i32 %39, i32* %6
	br label %if.done-13

if.done-13:
	; AssignStmt
	%40 = load i32, i32* %6, align 4
	; cast - cast
	%41 = sext i32 %40 to i64
	store i64 %41, i64* %0
	br label %match.done-18

match.case.next-14:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$c8, i64 0, i32 0), i64 25}, i64 474, i64 10, %..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$c9, i64 0, i32 0), i64 41})
	br label %match.done-18

match.fall.body-15:
	; i
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %0, align 8
	; cast - cast
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load i64, i64* %7, align 8
	%45 = icmp slt i64 %44, 0
	store i1 %45, i1* %3
	; IfStmt
	%46 = load i1, i1* %3, align 1
	br i1 %46, label %if.then-16, label %if.done-17

if.then-16:
	; AssignStmt
	%47 = load i64, i64* %7, align 8
	%48 = sub i64 0, %47
	store i64 %48, i64* %7
	br label %if.done-17

if.done-17:
	; AssignStmt
	%49 = load i64, i64* %7, align 8
	; cast - cast
	%50 = bitcast i64 %49 to i64
	store i64 %50, i64* %0
	br label %match.done-18

match.done-18:
	br label %if.done-19

if.done-19:
	; ReturnStmt
	%51 = load i64, i64* %0, align 8
	%52 = load i1, i1* %3, align 1
	store {i64, i1} zeroinitializer, {i64, i1}* %8
	%53 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 0
	store i64 %51, i64* %53
	%54 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 1
	store i1 %52, i1* %54
	%55 = load {i64, i1}, {i64, i1}* %8, align 8
	ret {i64, i1} %55
}

define void @.fmt-4._write_int(%fmt-4.Fmt_Info* %fi, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca [256 x i8], align 1
	%11 = alloca i64, align 8
	%12 = alloca %..string, align 8
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca i1, align 1
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %base, i64* %2
	store i1 zeroinitializer, i1* %3
		store i1 %is_signed, i1* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	store %..string zeroinitializer, %..string* %5
		store %..string %digits, %..string* %5
	; neg
	store i1 zeroinitializer, i1* %6
		%15 = load i64, i64* %1, align 8
	%16 = load i1, i1* %3, align 1
	%17 = load i64, i64* %4, align 8
	%18 = call {i64, i1} @.fmt-4.is_integer_negative(i64 %15, i1 %16, i64 %17)
	%19 = extractvalue {i64, i1} %18, 0
	%20 = extractvalue {i64, i1} %18, 1
	store i1 %20, i1* %6
	; IfStmt
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 9
	%24 = load i1, i1* %23, align 1
	br i1 %24, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%25 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %26, i64 0, i32 10
	%28 = load i1, i1* %27, align 1
	br i1 %28, label %if.then-2, label %if.done-5

if.then-2:
	; width
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%29 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0
	%31 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0, i32 1
	%32 = load i64, i64* %31, align 8
	; SelectorExpr
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = add i64 %32, %36
	%38 = add i64 %37, 3
	store i64 %38, i64* %7
	; IfStmt
	%39 = load i64, i64* %7, align 8
	%40 = icmp sgt i64 %39, 256
	br i1 %40, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ca, i64 0, i32 0), i64 25}, i64 488, i64 10, %..string {i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.__str$cb, i64 0, i32 0), i64 55})
	br label %if.done-4

if.done-4:
	br label %if.done-5

if.done-5:
	; prec
	store i64 zeroinitializer, i64* %8
		store i64 0, i64* %8
	; IfStmt
	; SelectorExpr
	%41 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%42 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %41, i64 0
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0, i32 10
	%44 = load i1, i1* %43, align 1
	br i1 %44, label %if.then-6, label %if.else-10

if.then-6:
	; AssignStmt
	; SelectorExpr
	%45 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%46 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %45, i64 0
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0, i32 2
	%48 = load i64, i64* %47, align 8
	store i64 %48, i64* %8
	; IfStmt
	%49 = load i64, i64* %8, align 8
	%50 = icmp eq i64 %49, 0
	br i1 %50, label %cmp.and-7, label %if.done-9

cmp.and-7:
	%51 = load i64, i64* %1, align 8
	%52 = icmp eq i64 %51, 0
	br i1 %52, label %if.then-8, label %if.done-9

if.then-8:
	; prev_zero
	store i1 zeroinitializer, i1* %9
		; SelectorExpr
	%53 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%54 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %53, i64 0
	%55 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %54, i64 0, i32 7
	%56 = load i1, i1* %55, align 1
	store i1 %56, i1* %9
	; AssignStmt
	; SelectorExpr
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%58 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %57, i64 0
	%59 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %58, i64 0, i32 7
	store i1 false, i1* %59
	%60 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%61 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0
	%63 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %62, i64 0, i32 1
	%64 = load i64, i64* %63, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %60, i64 %64)
	; AssignStmt
	; SelectorExpr
	%65 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%66 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %65, i64 0
	%67 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %66, i64 0, i32 7
	%68 = load i1, i1* %9, align 1
	store i1 %68, i1* %67
	; ReturnStmt
	ret void

if.done-9:
	br label %if.done-18

if.else-10:
	; IfStmt
	; SelectorExpr
	%69 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%70 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %69, i64 0
	%71 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %70, i64 0, i32 7
	%72 = load i1, i1* %71, align 1
	br i1 %72, label %cmp.and-11, label %if.done-17

cmp.and-11:
	; SelectorExpr
	%73 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%74 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %73, i64 0
	%75 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %74, i64 0, i32 9
	%76 = load i1, i1* %75, align 1
	br i1 %76, label %if.then-12, label %if.done-17

if.then-12:
	; AssignStmt
	; SelectorExpr
	%77 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%78 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %77, i64 0
	%79 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %78, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	store i64 %80, i64* %8
	; IfStmt
	%81 = load i1, i1* %6, align 1
	br i1 %81, label %if.then-15, label %cmp.or-13

cmp.or-13:
	; SelectorExpr
	%82 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%83 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %82, i64 0
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %83, i64 0, i32 5
	%85 = load i1, i1* %84, align 1
	br i1 %85, label %if.then-15, label %cmp.or-14

cmp.or-14:
	; SelectorExpr
	%86 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0, i32 6
	%89 = load i1, i1* %88, align 1
	br i1 %89, label %if.then-15, label %if.done-16

if.then-15:
	%90 = load i64, i64* %8, align 8
	%91 = sub i64 %90, 1
	store i64 %91, i64* %8
	br label %if.done-16

if.done-16:
	br label %if.done-17

if.done-17:
	br label %if.done-18

if.done-18:
	; MatchStmt
	%92 = load i64, i64* %2, align 8
	%93 = icmp eq i64 %92, 2
	br i1 %93, label %match.case.body-24, label %match.case.next-19

match.case.next-19:
	%94 = icmp eq i64 %92, 8
	br i1 %94, label %match.case.body-24, label %match.case.next-20

match.case.next-20:
	%95 = icmp eq i64 %92, 10
	br i1 %95, label %match.case.body-24, label %match.case.next-21

match.case.next-21:
	%96 = icmp eq i64 %92, 12
	br i1 %96, label %match.case.body-24, label %match.case.next-22

match.case.next-22:
	%97 = icmp eq i64 %92, 16
	br i1 %97, label %match.case.body-24, label %match.case.next-23

match.case.next-23:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$cc, i64 0, i32 0), i64 25}, i64 514, i64 9, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$cd, i64 0, i32 0), i64 32})
	br label %match.done-25

match.case.body-24:
	; break
	br label %match.done-25

match.done-25:
	; buf
	store [256 x i8] zeroinitializer, [256 x i8]* %10
		; flags
	store i64 zeroinitializer, i64* %11
		; IfStmt
	; SelectorExpr
	%98 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%99 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %98, i64 0
	%100 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %99, i64 0, i32 8
	%101 = load i1, i1* %100, align 1
	br i1 %101, label %if.then-26, label %if.done-27

if.then-26:
	; AssignStmt
	%102 = load i64, i64* %11, align 8
	%103 = or i64 %102, 1
	store i64 %103, i64* %11
	br label %if.done-27

if.done-27:
	; IfStmt
	; SelectorExpr
	%104 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%105 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %104, i64 0
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %105, i64 0, i32 5
	%107 = load i1, i1* %106, align 1
	br i1 %107, label %if.then-28, label %if.done-29

if.then-28:
	; AssignStmt
	%108 = load i64, i64* %11, align 8
	%109 = or i64 %108, 2
	store i64 %109, i64* %11
	br label %if.done-29

if.done-29:
	; IfStmt
	; SelectorExpr
	%110 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%111 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %110, i64 0
	%112 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %111, i64 0, i32 6
	%113 = load i1, i1* %112, align 1
	br i1 %113, label %if.then-30, label %if.done-31

if.then-30:
	; AssignStmt
	%114 = load i64, i64* %11, align 8
	%115 = or i64 %114, 4
	store i64 %115, i64* %11
	br label %if.done-31

if.done-31:
	; s
	store %..string zeroinitializer, %..string* %12
		; SelectorExpr
	; SliceExpr
	%116 = load [256 x i8], [256 x i8]* %10, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ce, i64 0, i32 0), i64 25}, i64 522, i64 30, i64 0, i64 0, i64 256)
	%117 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i32 0
	%118 = getelementptr inbounds i8, i8* %117, i64 0
	%119 = sub i64 0, 0
	%120 = sub i64 256, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%121 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %118, i8** %121
	%122 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %119, i64* %122
	%123 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %120, i64* %123
	%124 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%125 = load i64, i64* %1, align 8
	%126 = load i64, i64* %2, align 8
	%127 = load i1, i1* %3, align 1
	%128 = load i64, i64* %4, align 8
	%129 = load %..string, %..string* %5, align 8
	%130 = load i64, i64* %11, align 8
	%131 = call %..string @.strconv-28.append_bits({i8*, i64, i64} %124, i64 %125, i64 %126, i1 %127, i64 %128, %..string %129, i64 %130)
	store %..string %131, %..string* %12
	; prev_zero
	store i1 zeroinitializer, i1* %14
		; SelectorExpr
	%132 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0
	%134 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %133, i64 0, i32 7
	%135 = load i1, i1* %134, align 1
	store i1 %135, i1* %14
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%136 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %136, i64 0
	%138 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %137, i64 0, i32 7
	store i1 false, i1* %138
	%139 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%140 = load %..string, %..string* %12, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %139, %..string %140)
	; defer
	; AssignStmt
	; SelectorExpr
	%141 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%142 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %141, i64 0
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0, i32 7
	%144 = load i1, i1* %14, align 1
	store i1 %144, i1* %143
	ret void
}

define void @.fmt-4.fmt_rune(%fmt-4.Fmt_Info* %fi, i32 %r) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i32 zeroinitializer, i32* %1
		store i32 %r, i32* %1
	; SelectorExpr
	%2 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%3 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	%4 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 3
	%5 = load {i8*, i64, i64}*, {i8*, i64, i64}** %4, align 8
	%6 = load i32, i32* %1, align 4
	call void @.fmt-4.write_rune({i8*, i64, i64}* %5, i32 %6)
	ret void
}

define void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %fi, i64 %u, i1 %is_signed, i64 %bit_size, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i1, align 1
	%3 = alloca i64, align 8
	%4 = alloca i32, align 4
	%5 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i1 zeroinitializer, i1* %2
		store i1 %is_signed, i1* %2
	store i64 zeroinitializer, i64* %3
		store i64 %bit_size, i64* %3
	store i32 zeroinitializer, i32* %4
		store i32 %verb, i32* %4
	; MatchStmt
	%6 = load i32, i32* %4, align 4
	%7 = icmp eq i32 %6, 118
	br i1 %7, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%8 = icmp eq i32 %6, 98
	br i1 %8, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	%9 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%10 = load i64, i64* %1, align 8
	%11 = load i1, i1* %2, align 1
	%12 = load i64, i64* %3, align 8
	%13 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %9, i64 %10, i64 10, i1 %11, i64 %12, %..string %13)
	br label %match.done-22

match.case.next-3:
	%14 = icmp eq i32 %6, 111
	br i1 %14, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	%15 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%16 = load i64, i64* %1, align 8
	%17 = load i1, i1* %2, align 1
	%18 = load i64, i64* %3, align 8
	%19 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %15, i64 %16, i64 2, i1 %17, i64 %18, %..string %19)
	br label %match.done-22

match.case.next-5:
	%20 = icmp eq i32 %6, 100
	br i1 %20, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = load i64, i64* %1, align 8
	%23 = load i1, i1* %2, align 1
	%24 = load i64, i64* %3, align 8
	%25 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %21, i64 %22, i64 8, i1 %23, i64 %24, %..string %25)
	br label %match.done-22

match.case.next-7:
	%26 = icmp eq i32 %6, 120
	br i1 %26, label %match.fall.body-10, label %match.case.next-9

match.fall.body-8:
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = load i64, i64* %1, align 8
	%29 = load i1, i1* %2, align 1
	%30 = load i64, i64* %3, align 8
	%31 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %27, i64 %28, i64 10, i1 %29, i64 %30, %..string %31)
	br label %match.done-22

match.case.next-9:
	%32 = icmp eq i32 %6, 88
	br i1 %32, label %match.fall.body-12, label %match.case.next-11

match.fall.body-10:
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = load i64, i64* %1, align 8
	%35 = load i1, i1* %2, align 1
	%36 = load i64, i64* %3, align 8
	%37 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %33, i64 %34, i64 16, i1 %35, i64 %36, %..string %37)
	br label %match.done-22

match.case.next-11:
	%38 = icmp eq i32 %6, 99
	br i1 %38, label %match.fall.body-15, label %match.case.next-13

match.fall.body-12:
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = load i64, i64* %1, align 8
	%41 = load i1, i1* %2, align 1
	%42 = load i64, i64* %3, align 8
	%43 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %39, i64 %40, i64 16, i1 %41, i64 %42, %..string %43)
	br label %match.done-22

match.case.next-13:
	%44 = icmp eq i32 %6, 114
	br i1 %44, label %match.fall.body-15, label %match.case.next-14

match.case.next-14:
	%45 = icmp eq i32 %6, 85
	br i1 %45, label %match.fall.body-17, label %match.case.next-16

match.fall.body-15:
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = load i64, i64* %1, align 8
	; cast - cast
	%48 = trunc i64 %47 to i32
	call void @.fmt-4.fmt_rune(%fmt-4.Fmt_Info* %46, i32 %48)
	br label %match.done-22

match.case.next-16:
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = load i32, i32* %4, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %49, i32 %50)
	br label %match.done-22

match.fall.body-17:
	; r
	store i32 zeroinitializer, i32* %5
		%51 = load i64, i64* %1, align 8
	; cast - cast
	%52 = trunc i64 %51 to i32
	store i32 %52, i32* %5
	; IfStmt
	%53 = load i32, i32* %5, align 4
	%54 = icmp slt i32 %53, 0
	br i1 %54, label %if.then-19, label %cmp.or-18

cmp.or-18:
	%55 = load i32, i32* %5, align 4
	%56 = icmp sgt i32 %55, 1114111
	br i1 %56, label %if.then-19, label %if.else-20

if.then-19:
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%58 = load i32, i32* %4, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %57, i32 %58)
	br label %if.done-21

if.else-20:
	; SelectorExpr
	%59 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%60 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %59, i64 0
	%61 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %60, i64 0, i32 3
	%62 = load {i8*, i64, i64}*, {i8*, i64, i64}** %61, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %62, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$cf, i64 0, i32 0), i64 2})
	%63 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%64 = load i64, i64* %1, align 8
	%65 = load i64, i64* %3, align 8
	%66 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %63, i64 %64, i64 16, i1 false, i64 %65, %..string %66)
	br label %if.done-21

if.done-21:
	br label %match.done-22

match.done-22:
	ret void
}

define void @.fmt-4._pad(%fmt-4.Fmt_Info* %fi, %..string %s) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	; IfStmt
	; SelectorExpr
	%3 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%4 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%5 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %4, i64 0, i32 9
	%6 = load i1, i1* %5, align 1
	br i1 %6, label %cmp.or-1, label %if.then-2

cmp.or-1:
	; SelectorExpr
	%7 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%8 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %7, i64 0
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp eq i64 %10, 0
	br i1 %11, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %13, i64 0, i32 3
	%15 = load {i8*, i64, i64}*, {i8*, i64, i64}** %14, align 8
	%16 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %15, %..string %16)
	; ReturnStmt
	ret void

if.done-3:
	; width
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %17, i64 0
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	; SelectorExpr
	%21 = load %..string, %..string* %1, align 8
	%22 = call i64 @.utf8-5.rune_count-2686135932656(%..string %21)
	%23 = sub i64 %20, %22
	store i64 %23, i64* %2
	; IfStmt
	; SelectorExpr
	%24 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0, i32 4
	%27 = load i1, i1* %26, align 1
	br i1 %27, label %if.then-4, label %if.else-5

if.then-4:
	; SelectorExpr
	%28 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0, i32 3
	%31 = load {i8*, i64, i64}*, {i8*, i64, i64}** %30, align 8
	%32 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %31, %..string %32)
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = load i64, i64* %2, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %33, i64 %34)
	br label %if.done-6

if.else-5:
	%35 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%36 = load i64, i64* %2, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %35, i64 %36)
	; SelectorExpr
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0, i32 3
	%40 = load {i8*, i64, i64}*, {i8*, i64, i64}** %39, align 8
	%41 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %40, %..string %41)
	br label %if.done-6

if.done-6:
	ret void
}

define void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %fi, double %v, i64 %bit_size, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca double, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca i64, align 8
	%5 = alloca [128 x i8], align 1
	%6 = alloca %..string, align 8
	%7 = alloca {i8*, i64, i64}, align 8
	%8 = alloca {i8*, i64, i64}, align 8
	%9 = alloca %..string, align 8
	%10 = alloca %..string, align 8
	%11 = alloca %..string, align 8
	%12 = alloca %..string, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store double zeroinitializer, double* %1
		store double %v, double* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%13 = load i32, i32* %3, align 4
	%14 = icmp eq i32 %13, 102
	br i1 %14, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%15 = icmp eq i32 %13, 70
	br i1 %15, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%16 = icmp eq i32 %13, 118
	br i1 %16, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %17, i32 %18)
	; ReturnStmt
	ret void

match.case.body-4:
	; prec
	store i64 zeroinitializer, i64* %4
		store i64 3, i64* %4
	; IfStmt
	; SelectorExpr
	%19 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0
	%21 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %20, i64 0, i32 10
	%22 = load i1, i1* %21, align 1
	br i1 %22, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%23 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%24 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %23, i64 0
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0, i32 2
	%26 = load i64, i64* %25, align 8
	store i64 %26, i64* %4
	br label %if.done-6

if.done-6:
	; buf
	store [128 x i8] zeroinitializer, [128 x i8]* %5
		; str
	store %..string zeroinitializer, %..string* %6
		; SelectorExpr
	; SliceExpr
	%27 = load [128 x i8], [128 x i8]* %5, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d0, i64 0, i32 0), i64 25}, i64 587, i64 34, i64 1, i64 1, i64 128)
	%28 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i32 0
	%29 = getelementptr inbounds i8, i8* %28, i64 1
	%30 = sub i64 1, 1
	%31 = sub i64 128, 1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %7
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 0
	store i8* %29, i8** %32
	%33 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 1
	store i64 %30, i64* %33
	%34 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 2
	store i64 %31, i64* %34
	%35 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	%36 = load double, double* %1, align 8
	%37 = load i64, i64* %4, align 8
	%38 = load i64, i64* %2, align 8
	%39 = call %..string @.strconv-28.append_float({i8*, i64, i64} %35, double %36, i8 102, i64 %37, i64 %38)
	store %..string %39, %..string* %6
	; AssignStmt
	; SliceExpr
	%40 = load %..string, %..string* %6, align 8
	%41 = extractvalue %..string %40, 1
	%42 = add i64 %41, 1
	%43 = load [128 x i8], [128 x i8]* %5, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d1, i64 0, i32 0), i64 25}, i64 588, i64 24, i64 0, i64 %42, i64 128)
	%44 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i32 0
	%45 = getelementptr inbounds i8, i8* %44, i64 0
	%46 = sub i64 %42, 0
	%47 = sub i64 128, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %8
	%48 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	store i8* %45, i8** %48
	%49 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 1
	store i64 %46, i64* %49
	%50 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 2
	store i64 %47, i64* %50
	%51 = load {i8*, i64, i64}, {i8*, i64, i64}* %8, align 8
	; cast - cast
	%52 = extractvalue {i8*, i64, i64} %51, 0
	%53 = extractvalue {i8*, i64, i64} %51, 1
	store %..string zeroinitializer, %..string* %9
	%54 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	%55 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i8* %52, i8** %54
	store i64 %53, i64* %55
	%56 = load %..string, %..string* %9, align 8
	store %..string %56, %..string* %6
	; IfStmt
	; IndexExpr
	%57 = load %..string, %..string* %6, align 8
	%58 = extractvalue %..string %57, 0
	%59 = extractvalue %..string %57, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d2, i64 0, i32 0), i64 25}, i64 589, i64 10, i64 1, i64 %59)
	%60 = getelementptr inbounds i8, i8* %58, i64 1
	%61 = load i8, i8* %60, align 1
	%62 = icmp eq i8 %61, 43
	br i1 %62, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; IndexExpr
	%63 = load %..string, %..string* %6, align 8
	%64 = extractvalue %..string %63, 0
	%65 = extractvalue %..string %63, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d3, i64 0, i32 0), i64 25}, i64 589, i64 27, i64 1, i64 %65)
	%66 = getelementptr inbounds i8, i8* %64, i64 1
	%67 = load i8, i8* %66, align 1
	%68 = icmp eq i8 %67, 45
	br i1 %68, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; SliceExpr
	%69 = load %..string, %..string* %6, align 8
	%70 = extractvalue %..string %69, 1
	%71 = extractvalue %..string %69, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d4, i64 0, i32 0), i64 25}, i64 590, i64 13, i64 1, i64 %70)
	%72 = extractvalue %..string %69, 0
	%73 = getelementptr inbounds i8, i8* %72, i64 1
	%74 = sub i64 %70, 1
	store %..string zeroinitializer, %..string* %10
	%75 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %73, i8** %75
	%76 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %74, i64* %76
	%77 = load %..string, %..string* %10, align 8
	store %..string %77, %..string* %6
	br label %if.done-10

if.else-9:
	; AssignStmt
	; IndexExpr
	%78 = load %..string, %..string* %6, align 8
	%79 = extractvalue %..string %78, 0
	%80 = extractvalue %..string %78, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d5, i64 0, i32 0), i64 25}, i64 592, i64 8, i64 0, i64 %80)
	%81 = getelementptr inbounds i8, i8* %79, i64 0
	store i8 43, i8* %81
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%82 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%83 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %82, i64 0
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %83, i64 0, i32 6
	%85 = load i1, i1* %84, align 1
	br i1 %85, label %cmp.and-11, label %if.done-14

cmp.and-11:
	; SelectorExpr
	%86 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0, i32 5
	%89 = load i1, i1* %88, align 1
	br i1 %89, label %if.done-14, label %cmp.and-12

cmp.and-12:
	; IndexExpr
	%90 = load %..string, %..string* %6, align 8
	%91 = extractvalue %..string %90, 0
	%92 = extractvalue %..string %90, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d6, i64 0, i32 0), i64 25}, i64 595, i64 34, i64 0, i64 %92)
	%93 = getelementptr inbounds i8, i8* %91, i64 0
	%94 = load i8, i8* %93, align 1
	%95 = icmp eq i8 %94, 43
	br i1 %95, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; IndexExpr
	%96 = load %..string, %..string* %6, align 8
	%97 = extractvalue %..string %96, 0
	%98 = extractvalue %..string %96, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d7, i64 0, i32 0), i64 25}, i64 596, i64 8, i64 0, i64 %98)
	%99 = getelementptr inbounds i8, i8* %97, i64 0
	store i8 32, i8* %99
	br label %if.done-14

if.done-14:
	; IfStmt
	; IndexExpr
	%100 = load %..string, %..string* %6, align 8
	%101 = extractvalue %..string %100, 0
	%102 = extractvalue %..string %100, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d8, i64 0, i32 0), i64 25}, i64 599, i64 10, i64 1, i64 %102)
	%103 = getelementptr inbounds i8, i8* %101, i64 1
	%104 = load i8, i8* %103, align 1
	%105 = icmp eq i8 %104, 78
	br i1 %105, label %cmp.and-15, label %if.done-17

cmp.and-15:
	; IndexExpr
	%106 = load %..string, %..string* %6, align 8
	%107 = extractvalue %..string %106, 0
	%108 = extractvalue %..string %106, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$d9, i64 0, i32 0), i64 25}, i64 599, i64 27, i64 1, i64 %108)
	%109 = getelementptr inbounds i8, i8* %107, i64 1
	%110 = load i8, i8* %109, align 1
	%111 = icmp eq i8 %110, 73
	br i1 %111, label %if.then-16, label %if.done-17

if.then-16:
	; SelectorExpr
	%112 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%113 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %112, i64 0
	%114 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %113, i64 0, i32 3
	%115 = load {i8*, i64, i64}*, {i8*, i64, i64}** %114, align 8
	%116 = load %..string, %..string* %6, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %115, %..string %116)
	; ReturnStmt
	ret void

if.done-17:
	; IfStmt
	; SelectorExpr
	%117 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%118 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %117, i64 0
	%119 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %118, i64 0, i32 5
	%120 = load i1, i1* %119, align 1
	br i1 %120, label %if.then-19, label %cmp.or-18

cmp.or-18:
	; IndexExpr
	%121 = load %..string, %..string* %6, align 8
	%122 = extractvalue %..string %121, 0
	%123 = extractvalue %..string %121, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$da, i64 0, i32 0), i64 25}, i64 604, i64 21, i64 0, i64 %123)
	%124 = getelementptr inbounds i8, i8* %122, i64 0
	%125 = load i8, i8* %124, align 1
	%126 = icmp ne i8 %125, 43
	br i1 %126, label %if.then-19, label %if.else-25

if.then-19:
	; IfStmt
	; SelectorExpr
	%127 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%128 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %127, i64 0
	%129 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %128, i64 0, i32 7
	%130 = load i1, i1* %129, align 1
	br i1 %130, label %cmp.and-20, label %if.else-23

cmp.and-20:
	; SelectorExpr
	%131 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%132 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %131, i64 0
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0, i32 9
	%134 = load i1, i1* %133, align 1
	br i1 %134, label %cmp.and-21, label %if.else-23

cmp.and-21:
	; SelectorExpr
	%135 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%136 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %135, i64 0
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %136, i64 0, i32 1
	%138 = load i64, i64* %137, align 8
	%139 = load %..string, %..string* %6, align 8
	%140 = extractvalue %..string %139, 1
	%141 = icmp sgt i64 %138, %140
	br i1 %141, label %if.then-22, label %if.else-23

if.then-22:
	; SelectorExpr
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0
	%144 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %143, i64 0, i32 3
	%145 = load {i8*, i64, i64}*, {i8*, i64, i64}** %144, align 8
	; IndexExpr
	%146 = load %..string, %..string* %6, align 8
	%147 = extractvalue %..string %146, 0
	%148 = extractvalue %..string %146, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$db, i64 0, i32 0), i64 25}, i64 606, i64 28, i64 0, i64 %148)
	%149 = getelementptr inbounds i8, i8* %147, i64 0
	%150 = load i8, i8* %149, align 1
	call void @.fmt-4.write_byte({i8*, i64, i64}* %145, i8 %150)
	%151 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%152 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%153 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %152, i64 0
	%154 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %153, i64 0, i32 1
	%155 = load i64, i64* %154, align 8
	%156 = load %..string, %..string* %6, align 8
	%157 = extractvalue %..string %156, 1
	%158 = sub i64 %155, %157
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %151, i64 %158)
	; SelectorExpr
	%159 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%160 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %159, i64 0
	%161 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %160, i64 0, i32 3
	%162 = load {i8*, i64, i64}*, {i8*, i64, i64}** %161, align 8
	; SliceExpr
	%163 = load %..string, %..string* %6, align 8
	%164 = extractvalue %..string %163, 1
	%165 = extractvalue %..string %163, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$dc, i64 0, i32 0), i64 25}, i64 608, i64 29, i64 1, i64 %164)
	%166 = extractvalue %..string %163, 0
	%167 = getelementptr inbounds i8, i8* %166, i64 1
	%168 = sub i64 %164, 1
	store %..string zeroinitializer, %..string* %11
	%169 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 0
	store i8* %167, i8** %169
	%170 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 1
	store i64 %168, i64* %170
	%171 = load %..string, %..string* %11, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %162, %..string %171)
	br label %if.done-24

if.else-23:
	%172 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%173 = load %..string, %..string* %6, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %172, %..string %173)
	br label %if.done-24

if.done-24:
	br label %if.done-26

if.else-25:
	%174 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SliceExpr
	%175 = load %..string, %..string* %6, align 8
	%176 = extractvalue %..string %175, 1
	%177 = extractvalue %..string %175, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$dd, i64 0, i32 0), i64 25}, i64 613, i64 16, i64 1, i64 %176)
	%178 = extractvalue %..string %175, 0
	%179 = getelementptr inbounds i8, i8* %178, i64 1
	%180 = sub i64 %176, 1
	store %..string zeroinitializer, %..string* %12
	%181 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 0
	store i8* %179, i8** %181
	%182 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 1
	store i64 %180, i64* %182
	%183 = load %..string, %..string* %12, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %174, %..string %183)
	br label %if.done-26

if.done-26:
	br label %match.done-27

match.done-27:
	ret void
}

define void @.fmt-4.fmt_string(%fmt-4.Fmt_Info* %fi, %..string %s, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i32, align 4
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%7 = load i32, i32* %2, align 4
	%8 = icmp eq i32 %7, 115
	br i1 %8, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%9 = icmp eq i32 %7, 118
	br i1 %9, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%10 = icmp eq i32 %7, 120
	br i1 %10, label %match.fall.body-6, label %match.case.next-4

match.case.body-3:
	; SelectorExpr
	%11 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%12 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %11, i64 0
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0, i32 3
	%14 = load {i8*, i64, i64}*, {i8*, i64, i64}** %13, align 8
	%15 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %14, %..string %15)
	br label %match.done-16

match.case.next-4:
	%16 = icmp eq i32 %7, 88
	br i1 %16, label %match.fall.body-6, label %match.case.next-5

match.case.next-5:
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %17, i32 %18)
	br label %match.done-16

match.fall.body-6:
	; space
	store i1 zeroinitializer, i1* %3
		; SelectorExpr
	%19 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0
	%21 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %20, i64 0, i32 6
	%22 = load i1, i1* %21, align 1
	store i1 %22, i1* %3
	; AssignStmt
	; SelectorExpr
	%23 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%24 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %23, i64 0
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0, i32 6
	store i1 false, i1* %25
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %4
		store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.interval.loop-7

for.interval.loop-7:
	%26 = load %..string, %..string* %1, align 8
	%27 = extractvalue %..string %26, 1
	%28 = load i64, i64* %5, align 8
	%29 = icmp slt i64 %28, %27
	br i1 %29, label %for.interval.body-8, label %for.interval.done-15

for.interval.body-8:
	%30 = load i64, i64* %5, align 8
	%31 = load i64, i64* %6, align 8
	%32 = load i64, i64* %5, align 8
	%33 = add i64 %32, 1
	store i64 %33, i64* %5
	%34 = load i64, i64* %6, align 8
	%35 = add i64 %34, 1
	store i64 %35, i64* %6
	store i64 %30, i64* %4
	; IfStmt
	%36 = load i64, i64* %4, align 8
	%37 = icmp sgt i64 %36, 0
	br i1 %37, label %cmp.and-9, label %if.done-11

cmp.and-9:
	%38 = load i1, i1* %3, align 1
	br i1 %38, label %if.then-10, label %if.done-11

if.then-10:
	; SelectorExpr
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %40, i64 0, i32 3
	%42 = load {i8*, i64, i64}*, {i8*, i64, i64}** %41, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %42, i8 32)
	br label %if.done-11

if.done-11:
	%43 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; IndexExpr
	%44 = load %..string, %..string* %1, align 8
	%45 = extractvalue %..string %44, 0
	%46 = extractvalue %..string %44, 1
	%47 = load i64, i64* %4, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$de, i64 0, i32 0), i64 25}, i64 635, i64 30, i64 %47, i64 %46)
	%48 = getelementptr inbounds i8, i8* %45, i64 %47
	%49 = load i8, i8* %48, align 1
	; cast - cast
	%50 = zext i8 %49 to i64
	; TernaryExpr
	%51 = load i32, i32* %2, align 4
	%52 = icmp eq i32 %51, 120
	br i1 %52, label %if.then-12, label %if.else-13

if.then-12:
	%53 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	br label %if.done-14

if.else-13:
	%54 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	br label %if.done-14

if.done-14:
	%55 = phi %..string [ %53, %if.then-12 ], [ %54, %if.else-13 ]
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %43, i64 %50, i64 16, i1 false, i64 8, %..string %55)
	br label %for.interval.loop-7

for.interval.done-15:
	; defer
	; AssignStmt
	; SelectorExpr
	%56 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%57 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %56, i64 0
	%58 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %57, i64 0, i32 6
	%59 = load i1, i1* %3, align 1
	store i1 %59, i1* %58
	br label %match.done-16

match.done-16:
	ret void
}

define void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %fi, %..rawptr %p, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i32, align 4
	%3 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 112
	br i1 %5, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%7 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %7, i32 %8)
	; ReturnStmt
	ret void

match.case.body-3:
	br label %match.done-4

match.done-4:
	; u
	store i64 zeroinitializer, i64* %3
		%9 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%10 = ptrtoint %..rawptr %9 to i64
	; cast - cast
	%11 = bitcast i64 %10 to i64
	store i64 %11, i64* %3
	; IfStmt
	; SelectorExpr
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %13, i64 0, i32 8
	%15 = load i1, i1* %14, align 1
	br i1 %15, label %cmp.or-5, label %if.then-6

cmp.or-5:
	%16 = load i32, i32* %2, align 4
	%17 = icmp eq i32 %16, 118
	br i1 %17, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%18 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0, i32 3
	%21 = load {i8*, i64, i64}*, {i8*, i64, i64}** %20, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %21, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$df, i64 0, i32 0), i64 2})
	br label %if.done-7

if.done-7:
	%22 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%23 = load i64, i64* %3, align 8
	%24 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %22, i64 %23, i64 16, i1 false, i64 64, %..string %24)
	ret void
}

define void @.fmt-4.fmt_enum(%fmt-4.Fmt_Info* %fi, %..any %v, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info.Enum*, align 8
	%4 = alloca %..any, align 8
	%5 = alloca i64, align 8
	%6 = alloca double, align 8
	%7 = alloca i1, align 1
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca i8, align 1
	%11 = alloca i16, align 2
	%12 = alloca i32, align 4
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i16, align 2
	%17 = alloca i32, align 4
	%18 = alloca i64, align 8
	%19 = alloca i64, align 8
	%20 = alloca float, align 4
	%21 = alloca i64, align 8
	%22 = alloca double, align 8
	%23 = alloca i64, align 8
	%24 = alloca {[0 x <8 x i8>], [8 x i8]}, align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	%28 = alloca {[0 x <8 x i8>], [8 x i8]}, align 8
	%29 = alloca i64, align 8
	%30 = alloca i64, align 8
	%31 = alloca i64, align 8
	%32 = alloca %Type_Info*, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %v, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%33 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%34 = load %Type_Info*, %Type_Info** %33, align 8
	%35 = icmp eq %Type_Info* %34, zeroinitializer
	br i1 %35, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%36 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%37 = load %..rawptr, %..rawptr* %36, align 8
	%38 = icmp eq %..rawptr %37, zeroinitializer
	br i1 %38, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %40, i64 0, i32 3
	%42 = load {i8*, i64, i64}*, {i8*, i64, i64}** %41, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %42, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$e0, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; TypeMatchStmt
	; SelectorExpr
	%43 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%44 = load %Type_Info*, %Type_Info** %43, align 8
	; get union's tag
	%45 = getelementptr inbounds %Type_Info, %Type_Info* %44, i64 0, i32 2 ; UnionTagPtr
	%46 = load i64, i64* %45, align 8
	%47 = bitcast %Type_Info* %44 to %..rawptr
	%48 = icmp eq i64 %46, 19
	br i1 %48, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	store %Type_Info* zeroinitializer, %Type_Info** %32
	store %Type_Info* %44, %Type_Info** %32
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %49, i32 %50)
	; ReturnStmt
	ret void

typematch.body-5:
	%51 = bitcast %..rawptr %47 to %Type_Info.Enum*
	store %Type_Info.Enum* zeroinitializer, %Type_Info.Enum** %3
	store %Type_Info.Enum* %51, %Type_Info.Enum** %3
	; MatchStmt
	%52 = load i32, i32* %2, align 4
	%53 = icmp eq i32 %52, 100
	br i1 %53, label %match.case.body-8, label %match.case.next-6

match.case.next-6:
	%54 = icmp eq i32 %52, 102
	br i1 %54, label %match.case.body-8, label %match.case.next-7

match.case.next-7:
	%55 = icmp eq i32 %52, 115
	br i1 %55, label %match.fall.body-11, label %match.case.next-9

match.case.body-8:
	%56 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %4
	store %..any zeroinitializer, %..any* %4
	; SelectorExpr
	%57 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%58 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %57, i64 0
	%59 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %58, i64 0, i32 2
	%60 = load %Type_Info*, %Type_Info** %59, align 8
	%61 = call %Type_Info* @.type_info_base(%Type_Info* %60)
	%62 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %Type_Info* %61, %Type_Info** %62
	; SelectorExpr
	%63 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%64 = load %..rawptr, %..rawptr* %63, align 8
	%65 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %..rawptr %64, %..rawptr* %65
	%66 = load %..any, %..any* %4, align 8
	%67 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %56, %..any %66, i32 %67)
	br label %match.done-55

match.case.next-9:
	%68 = icmp eq i32 %52, 118
	br i1 %68, label %match.fall.body-11, label %match.case.next-10

match.case.next-10:
	%69 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%70 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %69, i32 %70)
	; ReturnStmt
	ret void

match.fall.body-11:
	; i
	store i64 zeroinitializer, i64* %5
		; f
	store double zeroinitializer, double* %6
		; ok
	store i1 zeroinitializer, i1* %7
		store i1 false, i1* %7
	; a
	store %..any zeroinitializer, %..any* %8
		; CompoundLit
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; SelectorExpr
	%71 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%72 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %71, i64 0
	%73 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %72, i64 0, i32 2
	%74 = load %Type_Info*, %Type_Info** %73, align 8
	%75 = call %Type_Info* @.type_info_base(%Type_Info* %74)
	%76 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %Type_Info* %75, %Type_Info** %76
	; SelectorExpr
	%77 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%78 = load %..rawptr, %..rawptr* %77, align 8
	%79 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..rawptr %78, %..rawptr* %79
	%80 = load %..any, %..any* %9, align 8
	store %..any %80, %..any* %8
	; TypeMatchStmt
	%81 = load %..any, %..any* %8, align 8
	%82 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%83 = load %Type_Info*, %Type_Info** %82, align 8
	%84 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%85 = icmp eq %Type_Info* %83, %84
	br i1 %85, label %typematch.body-13, label %typematch.next-12

typematch.next-12:
	%86 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%87 = load %Type_Info*, %Type_Info** %86, align 8
	%88 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%89 = icmp eq %Type_Info* %87, %88
	br i1 %89, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%90 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%91 = load %..rawptr, %..rawptr* %90, align 8
	%92 = bitcast %..rawptr %91 to i8*
	%93 = load i8, i8* %92, align 1
	store i8 zeroinitializer, i8* %10
	store i8 %93, i8* %10
	; AssignStmt
	%94 = load i8, i8* %10, align 1
	; cast - cast
	%95 = sext i8 %94 to i64
	store i64 %95, i64* %5
	br label %typematch.done-36

typematch.next-14:
	%96 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%97 = load %Type_Info*, %Type_Info** %96, align 8
	%98 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%99 = icmp eq %Type_Info* %97, %98
	br i1 %99, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%100 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%101 = load %..rawptr, %..rawptr* %100, align 8
	%102 = bitcast %..rawptr %101 to i16*
	%103 = load i16, i16* %102, align 2
	store i16 zeroinitializer, i16* %11
	store i16 %103, i16* %11
	; AssignStmt
	%104 = load i16, i16* %11, align 2
	; cast - cast
	%105 = sext i16 %104 to i64
	store i64 %105, i64* %5
	br label %typematch.done-36

typematch.next-16:
	%106 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%107 = load %Type_Info*, %Type_Info** %106, align 8
	%108 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%109 = icmp eq %Type_Info* %107, %108
	br i1 %109, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%110 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%111 = load %..rawptr, %..rawptr* %110, align 8
	%112 = bitcast %..rawptr %111 to i32*
	%113 = load i32, i32* %112, align 4
	store i32 zeroinitializer, i32* %12
	store i32 %113, i32* %12
	; AssignStmt
	%114 = load i32, i32* %12, align 4
	; cast - cast
	%115 = sext i32 %114 to i64
	store i64 %115, i64* %5
	br label %typematch.done-36

typematch.next-18:
	%116 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%117 = load %Type_Info*, %Type_Info** %116, align 8
	%118 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%119 = icmp eq %Type_Info* %117, %118
	br i1 %119, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%120 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%121 = load %..rawptr, %..rawptr* %120, align 8
	%122 = bitcast %..rawptr %121 to i64*
	%123 = load i64, i64* %122, align 8
	store i64 zeroinitializer, i64* %13
	store i64 %123, i64* %13
	; AssignStmt
	%124 = load i64, i64* %13, align 8
	; cast - cast
	store i64 %124, i64* %5
	br label %typematch.done-36

typematch.next-20:
	%125 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%126 = load %Type_Info*, %Type_Info** %125, align 8
	%127 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%128 = icmp eq %Type_Info* %126, %127
	br i1 %128, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%129 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%130 = load %..rawptr, %..rawptr* %129, align 8
	%131 = bitcast %..rawptr %130 to i64*
	%132 = load i64, i64* %131, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %132, i64* %14
	; AssignStmt
	%133 = load i64, i64* %14, align 8
	; cast - cast
	%134 = bitcast i64 %133 to i64
	store i64 %134, i64* %5
	br label %typematch.done-36

typematch.next-22:
	%135 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%136 = load %Type_Info*, %Type_Info** %135, align 8
	%137 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	%138 = icmp eq %Type_Info* %136, %137
	br i1 %138, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%139 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%140 = load %..rawptr, %..rawptr* %139, align 8
	%141 = bitcast %..rawptr %140 to i8*
	%142 = load i8, i8* %141, align 1
	store i8 zeroinitializer, i8* %15
	store i8 %142, i8* %15
	; AssignStmt
	%143 = load i8, i8* %15, align 1
	; cast - cast
	%144 = zext i8 %143 to i64
	store i64 %144, i64* %5
	br label %typematch.done-36

typematch.next-24:
	%145 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%146 = load %Type_Info*, %Type_Info** %145, align 8
	%147 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%148 = icmp eq %Type_Info* %146, %147
	br i1 %148, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%149 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%150 = load %..rawptr, %..rawptr* %149, align 8
	%151 = bitcast %..rawptr %150 to i16*
	%152 = load i16, i16* %151, align 2
	store i16 zeroinitializer, i16* %16
	store i16 %152, i16* %16
	; AssignStmt
	%153 = load i16, i16* %16, align 2
	; cast - cast
	%154 = zext i16 %153 to i64
	store i64 %154, i64* %5
	br label %typematch.done-36

typematch.next-26:
	%155 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%156 = load %Type_Info*, %Type_Info** %155, align 8
	%157 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%158 = icmp eq %Type_Info* %156, %157
	br i1 %158, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%159 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%160 = load %..rawptr, %..rawptr* %159, align 8
	%161 = bitcast %..rawptr %160 to i32*
	%162 = load i32, i32* %161, align 4
	store i32 zeroinitializer, i32* %17
	store i32 %162, i32* %17
	; AssignStmt
	%163 = load i32, i32* %17, align 4
	; cast - cast
	%164 = zext i32 %163 to i64
	store i64 %164, i64* %5
	br label %typematch.done-36

typematch.next-28:
	%165 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%166 = load %Type_Info*, %Type_Info** %165, align 8
	%167 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%168 = icmp eq %Type_Info* %166, %167
	br i1 %168, label %typematch.body-31, label %typematch.next-30

typematch.body-29:
	%169 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%170 = load %..rawptr, %..rawptr* %169, align 8
	%171 = bitcast %..rawptr %170 to i64*
	%172 = load i64, i64* %171, align 8
	store i64 zeroinitializer, i64* %18
	store i64 %172, i64* %18
	; AssignStmt
	%173 = load i64, i64* %18, align 8
	; cast - cast
	%174 = bitcast i64 %173 to i64
	store i64 %174, i64* %5
	br label %typematch.done-36

typematch.next-30:
	%175 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%176 = load %Type_Info*, %Type_Info** %175, align 8
	%177 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%178 = icmp eq %Type_Info* %176, %177
	br i1 %178, label %typematch.body-33, label %typematch.next-32

typematch.body-31:
	%179 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%180 = load %..rawptr, %..rawptr* %179, align 8
	%181 = bitcast %..rawptr %180 to i64*
	%182 = load i64, i64* %181, align 8
	store i64 zeroinitializer, i64* %19
	store i64 %182, i64* %19
	; AssignStmt
	%183 = load i64, i64* %19, align 8
	; cast - cast
	%184 = bitcast i64 %183 to i64
	store i64 %184, i64* %5
	br label %typematch.done-36

typematch.next-32:
	%185 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%186 = load %Type_Info*, %Type_Info** %185, align 8
	%187 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%188 = icmp eq %Type_Info* %186, %187
	br i1 %188, label %typematch.body-35, label %typematch.next-34

typematch.body-33:
	%189 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%190 = load %..rawptr, %..rawptr* %189, align 8
	%191 = bitcast %..rawptr %190 to float*
	%192 = load float, float* %191, align 4
	store float zeroinitializer, float* %20
	store float %192, float* %20
	; AssignStmt
	%193 = load float, float* %20, align 4
	; cast - cast
	%194 = fpext float %193 to double
	store double %194, double* %6
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %21
	%195 = load double, double* %6, align 8
	%196 = bitcast double %195 to i64
	store i64 %196, i64* %21
	%197 = load i64, i64* %21, align 8
	store i64 %197, i64* %5
	br label %typematch.done-36

typematch.next-34:
	br label %typematch.done-36

typematch.body-35:
	%198 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%199 = load %..rawptr, %..rawptr* %198, align 8
	%200 = bitcast %..rawptr %199 to double*
	%201 = load double, double* %200, align 8
	store double zeroinitializer, double* %22
	store double %201, double* %22
	; AssignStmt
	%202 = load double, double* %22, align 8
	; cast - cast
	store double %202, double* %6
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %23
	%203 = load double, double* %6, align 8
	%204 = bitcast double %203 to i64
	store i64 %204, i64* %23
	%205 = load i64, i64* %23, align 8
	store i64 %205, i64* %5
	br label %typematch.done-36

typematch.done-36:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%206 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%207 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %206, i64 0
	%208 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %207, i64 0, i32 2
	%209 = load %Type_Info*, %Type_Info** %208, align 8
	%210 = call i1 @.types-27.is_string(%Type_Info* %209)
	br i1 %210, label %if.then-37, label %if.else-43

if.then-37:
	; RangeStmt
	; val
	store {[0 x <8 x i8>], [8 x i8]} zeroinitializer, {[0 x <8 x i8>], [8 x i8]}* %24
		; idx
	store i64 zeroinitializer, i64* %25
		; SelectorExpr
	%211 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%212 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %211, i64 0
	%213 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %212, i64 0, i32 4
	%214 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %213, align 8
	store i64 zeroinitializer, i64* %26
	%215 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %214, 1
	store i64 %215, i64* %26
	store i64 zeroinitializer, i64* %27
	store i64 -1, i64* %27
	br label %for.index.loop-38

for.index.loop-38:
	%216 = load i64, i64* %27, align 8
	%217 = add i64 %216, 1
	store i64 %217, i64* %27
	%218 = load i64, i64* %26, align 8
	%219 = icmp slt i64 %217, %218
	br i1 %219, label %for.index.body-39, label %for.index.done-42

for.index.body-39:
	%220 = load i64, i64* %27, align 8
	%221 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %214, 0
	%222 = getelementptr inbounds {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %221, i64 %220
	%223 = load {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %222, align 8
	store {[0 x <8 x i8>], [8 x i8]} %223, {[0 x <8 x i8>], [8 x i8]}* %24
	store i64 %220, i64* %25
	; IfStmt
	; SelectorExpr
	%224 = bitcast {[0 x <8 x i8>], [8 x i8]}* %24 to i64*
	%225 = load i64, i64* %224, align 8
	%226 = load i64, i64* %5, align 8
	%227 = icmp eq i64 %225, %226
	br i1 %227, label %if.then-40, label %if.done-41

if.then-40:
	; SelectorExpr
	%228 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%229 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %228, i64 0
	%230 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %229, i64 0, i32 3
	%231 = load {i8*, i64, i64}*, {i8*, i64, i64}** %230, align 8
	; IndexExpr
	; SelectorExpr
	%232 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%233 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %232, i64 0
	%234 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %233, i64 0, i32 3
	%235 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %234, align 8
	%236 = extractvalue {%..string*, i64, i64} %235, 0
	%237 = extractvalue {%..string*, i64, i64} %235, 1
	%238 = load i64, i64* %25, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$e1, i64 0, i32 0), i64 25}, i64 696, i64 36, i64 %238, i64 %237)
	%239 = getelementptr inbounds %..string, %..string* %236, i64 %238
	%240 = load %..string, %..string* %239, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %231, %..string %240)
	; AssignStmt
	store i1 true, i1* %7
	; break
	br label %for.index.done-42

if.done-41:
	br label %for.index.loop-38

for.index.done-42:
	br label %if.done-52

if.else-43:
	; IfStmt
	; SelectorExpr
	%241 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%242 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %241, i64 0
	%243 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %242, i64 0, i32 4
	%244 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %243, align 8
	%245 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %244, 1
	%246 = icmp eq i64 %245, 0
	br i1 %246, label %if.then-44, label %if.else-45

if.then-44:
	; SelectorExpr
	%247 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%248 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %247, i64 0
	%249 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %248, i64 0, i32 3
	%250 = load {i8*, i64, i64}*, {i8*, i64, i64}** %249, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %250, %..string zeroinitializer)
	; AssignStmt
	store i1 true, i1* %7
	br label %if.done-51

if.else-45:
	; RangeStmt
	; val
	store {[0 x <8 x i8>], [8 x i8]} zeroinitializer, {[0 x <8 x i8>], [8 x i8]}* %28
		; idx
	store i64 zeroinitializer, i64* %29
		; SelectorExpr
	%251 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%252 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %251, i64 0
	%253 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %252, i64 0, i32 4
	%254 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %253, align 8
	store i64 zeroinitializer, i64* %30
	%255 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %254, 1
	store i64 %255, i64* %30
	store i64 zeroinitializer, i64* %31
	store i64 -1, i64* %31
	br label %for.index.loop-46

for.index.loop-46:
	%256 = load i64, i64* %31, align 8
	%257 = add i64 %256, 1
	store i64 %257, i64* %31
	%258 = load i64, i64* %30, align 8
	%259 = icmp slt i64 %257, %258
	br i1 %259, label %for.index.body-47, label %for.index.done-50

for.index.body-47:
	%260 = load i64, i64* %31, align 8
	%261 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %254, 0
	%262 = getelementptr inbounds {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %261, i64 %260
	%263 = load {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %262, align 8
	store {[0 x <8 x i8>], [8 x i8]} %263, {[0 x <8 x i8>], [8 x i8]}* %28
	store i64 %260, i64* %29
	; IfStmt
	; SelectorExpr
	%264 = bitcast {[0 x <8 x i8>], [8 x i8]}* %28 to i64*
	%265 = load i64, i64* %264, align 8
	%266 = load i64, i64* %5, align 8
	%267 = icmp eq i64 %265, %266
	br i1 %267, label %if.then-48, label %if.done-49

if.then-48:
	; SelectorExpr
	%268 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%269 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %268, i64 0
	%270 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %269, i64 0, i32 3
	%271 = load {i8*, i64, i64}*, {i8*, i64, i64}** %270, align 8
	; IndexExpr
	; SelectorExpr
	%272 = load %Type_Info.Enum*, %Type_Info.Enum** %3, align 8
	%273 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %272, i64 0
	%274 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %273, i64 0, i32 3
	%275 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %274, align 8
	%276 = extractvalue {%..string*, i64, i64} %275, 0
	%277 = extractvalue {%..string*, i64, i64} %275, 1
	%278 = load i64, i64* %29, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$e2, i64 0, i32 0), i64 25}, i64 707, i64 36, i64 %278, i64 %277)
	%279 = getelementptr inbounds %..string, %..string* %276, i64 %278
	%280 = load %..string, %..string* %279, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %271, %..string %280)
	; AssignStmt
	store i1 true, i1* %7
	; break
	br label %for.index.done-50

if.done-49:
	br label %for.index.loop-46

for.index.done-50:
	br label %if.done-51

if.done-51:
	br label %if.done-52

if.done-52:
	; IfStmt
	%281 = load i1, i1* %7, align 1
	br i1 %281, label %if.done-54, label %if.then-53

if.then-53:
	; SelectorExpr
	%282 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%283 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %282, i64 0
	%284 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %283, i64 0, i32 3
	%285 = load {i8*, i64, i64}*, {i8*, i64, i64}** %284, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %285, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$e3, i64 0, i32 0), i64 18})
	br label %if.done-54

if.done-54:
	br label %match.done-55

match.done-55:
	br label %typematch.done-56

typematch.done-56:
	ret void
}

define void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %fi, %..any %v, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info.Named*, align 8
	%4 = alloca %Type_Info.Struct*, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i8*, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %Type_Info*, align 8
	%11 = alloca %..any, align 8
	%12 = alloca %Type_Info.Boolean*, align 8
	%13 = alloca %Type_Info.Integer*, align 8
	%14 = alloca %Type_Info.Float*, align 8
	%15 = alloca %Type_Info.Complex*, align 8
	%16 = alloca %Type_Info.Quaternion*, align 8
	%17 = alloca %Type_Info.String*, align 8
	%18 = alloca %Type_Info.Pointer*, align 8
	%19 = alloca %Type_Info.Array*, align 8
	%20 = alloca i64, align 8
	%21 = alloca i64, align 8
	%22 = alloca i64, align 8
	%23 = alloca i8*, align 8
	%24 = alloca %..any, align 8
	%25 = alloca %Type_Info.Dynamic_Array*, align 8
	%26 = alloca %raw-6.Dynamic_Array*, align 8
	%27 = alloca i64, align 8
	%28 = alloca i64, align 8
	%29 = alloca i64, align 8
	%30 = alloca i8*, align 8
	%31 = alloca %..any, align 8
	%32 = alloca %Type_Info.Map*, align 8
	%33 = alloca %raw-6.Dynamic_Array*, align 8
	%34 = alloca %raw-6.Dynamic_Map*, align 8
	%35 = alloca %Type_Info.Struct*, align 8
	%36 = alloca {%Type_Info.Struct*, i1}, align 8
	%37 = alloca %Type_Info.Dynamic_Array*, align 8
	%38 = alloca {%Type_Info.Dynamic_Array*, i1}, align 8
	%39 = alloca %Type_Info.Struct*, align 8
	%40 = alloca {%Type_Info.Struct*, i1}, align 8
	%41 = alloca i64, align 8
	%42 = alloca i64, align 8
	%43 = alloca i64, align 8
	%44 = alloca i64, align 8
	%45 = alloca i8*, align 8
	%46 = alloca %__Map_Entry_Header*, align 8
	%47 = alloca %fmt-4.Fmt_Info, align 8
	%48 = alloca %fmt-4.Fmt_Info, align 8
	%49 = alloca %..any, align 8
	%50 = alloca i8*, align 8
	%51 = alloca %..any, align 8
	%52 = alloca %Type_Info.Slice*, align 8
	%53 = alloca {i8*, i64, i64}*, align 8
	%54 = alloca i64, align 8
	%55 = alloca i64, align 8
	%56 = alloca i64, align 8
	%57 = alloca i8*, align 8
	%58 = alloca %..any, align 8
	%59 = alloca %Type_Info.Vector*, align 8
	%60 = alloca i64, align 8
	%61 = alloca i64, align 8
	%62 = alloca i64, align 8
	%63 = alloca i8*, align 8
	%64 = alloca %..any, align 8
	%65 = alloca %Type_Info.Struct*, align 8
	%66 = alloca i64, align 8
	%67 = alloca i64, align 8
	%68 = alloca i64, align 8
	%69 = alloca i8*, align 8
	%70 = alloca %..any, align 8
	%71 = alloca %Type_Info.Union*, align 8
	%72 = alloca {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, align 8
	%73 = alloca i64, align 8
	%74 = alloca i64, align 8
	%75 = alloca i64, align 8
	%76 = alloca i8*, align 8
	%77 = alloca %..any, align 8
	%78 = alloca %Type_Info.Raw_Union*, align 8
	%79 = alloca %Type_Info.Enum*, align 8
	%80 = alloca %Type_Info.Procedure*, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %v, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%81 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%82 = load %..rawptr, %..rawptr* %81, align 8
	%83 = icmp eq %..rawptr %82, zeroinitializer
	br i1 %83, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%84 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%85 = load %Type_Info*, %Type_Info** %84, align 8
	%86 = icmp eq %Type_Info* %85, zeroinitializer
	br i1 %86, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%87 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0
	%89 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %88, i64 0, i32 3
	%90 = load {i8*, i64, i64}*, {i8*, i64, i64}** %89, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %90, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$e4, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; TypeMatchStmt
	; SelectorExpr
	%91 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%92 = load %Type_Info*, %Type_Info** %91, align 8
	; get union's tag
	%93 = getelementptr inbounds %Type_Info, %Type_Info* %92, i64 0, i32 2 ; UnionTagPtr
	%94 = load i64, i64* %93, align 8
	%95 = bitcast %Type_Info* %92 to %..rawptr
	%96 = icmp eq i64 %94, 1
	br i1 %96, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	%97 = icmp eq i64 %94, 7
	br i1 %97, label %typematch.body-17, label %typematch.next-16

typematch.body-5:
	%98 = bitcast %..rawptr %95 to %Type_Info.Named*
	store %Type_Info.Named* zeroinitializer, %Type_Info.Named** %3
	store %Type_Info.Named* %98, %Type_Info.Named** %3
	; TypeMatchStmt
	; SelectorExpr
	%99 = load %Type_Info.Named*, %Type_Info.Named** %3, align 8
	%100 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %99, i64 0
	%101 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %100, i64 0, i32 3
	%102 = load %Type_Info*, %Type_Info** %101, align 8
	; get union's tag
	%103 = getelementptr inbounds %Type_Info, %Type_Info* %102, i64 0, i32 2 ; UnionTagPtr
	%104 = load i64, i64* %103, align 8
	%105 = bitcast %Type_Info* %102 to %..rawptr
	%106 = icmp eq i64 %104, 16
	br i1 %106, label %typematch.body-7, label %typematch.next-6

typematch.next-6:
	store %Type_Info* zeroinitializer, %Type_Info** %10
	store %Type_Info* %102, %Type_Info** %10
	%107 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %11
	store %..any zeroinitializer, %..any* %11
	; SelectorExpr
	%108 = load %Type_Info.Named*, %Type_Info.Named** %3, align 8
	%109 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %108, i64 0
	%110 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %109, i64 0, i32 3
	%111 = load %Type_Info*, %Type_Info** %110, align 8
	%112 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	store %Type_Info* %111, %Type_Info** %112
	; SelectorExpr
	%113 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%114 = load %..rawptr, %..rawptr* %113, align 8
	%115 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %..rawptr %114, %..rawptr* %115
	%116 = load %..any, %..any* %11, align 8
	%117 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %107, %..any %116, i32 %117)
	br label %typematch.done-15

typematch.body-7:
	%118 = bitcast %..rawptr %105 to %Type_Info.Struct*
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %4
	store %Type_Info.Struct* %118, %Type_Info.Struct** %4
	; IfStmt
	%119 = load i32, i32* %2, align 4
	%120 = icmp ne i32 %119, 118
	br i1 %120, label %if.then-8, label %if.done-9

if.then-8:
	%121 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%122 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %121, i32 %122)
	; ReturnStmt
	ret void

if.done-9:
	; SelectorExpr
	%123 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%124 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %123, i64 0
	%125 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %124, i64 0, i32 3
	%126 = load {i8*, i64, i64}*, {i8*, i64, i64}** %125, align 8
	; SelectorExpr
	%127 = load %Type_Info.Named*, %Type_Info.Named** %3, align 8
	%128 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %127, i64 0
	%129 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %128, i64 0, i32 2
	%130 = load %..string, %..string* %129, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %126, %..string %130)
	; SelectorExpr
	%131 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%132 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %131, i64 0
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0, i32 3
	%134 = load {i8*, i64, i64}*, {i8*, i64, i64}** %133, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %134, i8 123)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%135 = load %Type_Info.Struct*, %Type_Info.Struct** %4, align 8
	%136 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %135, i64 0
	%137 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %136, i64 0, i32 2
	%138 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %137, i64 0, i32 1
	%139 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %138, align 8
	store i64 zeroinitializer, i64* %6
	%140 = extractvalue {%..string*, i64, i64} %139, 1
	store i64 %140, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-10

for.index.loop-10:
	%141 = load i64, i64* %7, align 8
	%142 = add i64 %141, 1
	store i64 %142, i64* %7
	%143 = load i64, i64* %6, align 8
	%144 = icmp slt i64 %142, %143
	br i1 %144, label %for.index.body-11, label %for.index.done-14

for.index.body-11:
	%145 = load i64, i64* %7, align 8
	store i64 %145, i64* %5
	; IfStmt
	%146 = load i64, i64* %5, align 8
	%147 = icmp sgt i64 %146, 0
	br i1 %147, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%148 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%149 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %148, i64 0
	%150 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %149, i64 0, i32 3
	%151 = load {i8*, i64, i64}*, {i8*, i64, i64}** %150, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %151, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$e5, i64 0, i32 0), i64 2})
	br label %if.done-13

if.done-13:
	; SelectorExpr
	%152 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%153 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %152, i64 0
	%154 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %153, i64 0, i32 3
	%155 = load {i8*, i64, i64}*, {i8*, i64, i64}** %154, align 8
	; IndexExpr
	; SelectorExpr
	%156 = load %Type_Info.Struct*, %Type_Info.Struct** %4, align 8
	%157 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %156, i64 0
	%158 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %157, i64 0, i32 2
	%159 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %158, i64 0, i32 1
	%160 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %159, align 8
	%161 = extractvalue {%..string*, i64, i64} %160, 0
	%162 = extractvalue {%..string*, i64, i64} %160, 1
	%163 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$e6, i64 0, i32 0), i64 25}, i64 746, i64 34, i64 %163, i64 %162)
	%164 = getelementptr inbounds %..string, %..string* %161, i64 %163
	%165 = load %..string, %..string* %164, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %155, %..string %165)
	; SelectorExpr
	%166 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%167 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %166, i64 0
	%168 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %167, i64 0, i32 3
	%169 = load {i8*, i64, i64}*, {i8*, i64, i64}** %168, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %169, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$e7, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %8
		; SelectorExpr
	%170 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%171 = load %..rawptr, %..rawptr* %170, align 8
	; cast - cast
	%172 = bitcast %..rawptr %171 to i8*
	; IndexExpr
	; SelectorExpr
	%173 = load %Type_Info.Struct*, %Type_Info.Struct** %4, align 8
	%174 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %173, i64 0
	%175 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %174, i64 0, i32 2
	%176 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %175, i64 0, i32 2
	%177 = load {i64*, i64, i64}, {i64*, i64, i64}* %176, align 8
	%178 = extractvalue {i64*, i64, i64} %177, 0
	%179 = extractvalue {i64*, i64, i64} %177, 1
	%180 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$e8, i64 0, i32 0), i64 25}, i64 748, i64 43, i64 %180, i64 %179)
	%181 = getelementptr inbounds i64, i64* %178, i64 %180
	%182 = load i64, i64* %181, align 8
	%183 = getelementptr inbounds i8, i8* %172, i64 %182
	store i8* %183, i8** %8
	%184 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; IndexExpr
	; SelectorExpr
	%185 = load %Type_Info.Struct*, %Type_Info.Struct** %4, align 8
	%186 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %185, i64 0
	%187 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %186, i64 0, i32 2
	%188 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %187, i64 0, i32 0
	%189 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %188, align 8
	%190 = extractvalue {%Type_Info**, i64, i64} %189, 0
	%191 = extractvalue {%Type_Info**, i64, i64} %189, 1
	%192 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$e9, i64 0, i32 0), i64 25}, i64 749, i64 29, i64 %192, i64 %191)
	%193 = getelementptr inbounds %Type_Info*, %Type_Info** %190, i64 %192
	%194 = load %Type_Info*, %Type_Info** %193, align 8
	%195 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %Type_Info* %194, %Type_Info** %195
	%196 = load i8*, i8** %8, align 8
	; cast - cast
	%197 = bitcast i8* %196 to %..rawptr
	%198 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..rawptr %197, %..rawptr* %198
	%199 = load %..any, %..any* %9, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %184, %..any %199, i32 118)
	br label %for.index.loop-10

for.index.done-14:
	; SelectorExpr
	%200 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%201 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %200, i64 0
	%202 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %201, i64 0, i32 3
	%203 = load {i8*, i64, i64}*, {i8*, i64, i64}** %202, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %203, i8 125)
	br label %typematch.done-15

typematch.done-15:
	br label %typematch.done-105

typematch.next-16:
	%204 = icmp eq i64 %94, 2
	br i1 %204, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%205 = bitcast %..rawptr %95 to %Type_Info.Boolean*
	store %Type_Info.Boolean* zeroinitializer, %Type_Info.Boolean** %12
	store %Type_Info.Boolean* %205, %Type_Info.Boolean** %12
	%206 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%207 = load %..any, %..any* %1, align 8
	%208 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %206, %..any %207, i32 %208)
	br label %typematch.done-105

typematch.next-18:
	%209 = icmp eq i64 %94, 3
	br i1 %209, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%210 = bitcast %..rawptr %95 to %Type_Info.Integer*
	store %Type_Info.Integer* zeroinitializer, %Type_Info.Integer** %13
	store %Type_Info.Integer* %210, %Type_Info.Integer** %13
	%211 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%212 = load %..any, %..any* %1, align 8
	%213 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %211, %..any %212, i32 %213)
	br label %typematch.done-105

typematch.next-20:
	%214 = icmp eq i64 %94, 4
	br i1 %214, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%215 = bitcast %..rawptr %95 to %Type_Info.Float*
	store %Type_Info.Float* zeroinitializer, %Type_Info.Float** %14
	store %Type_Info.Float* %215, %Type_Info.Float** %14
	%216 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%217 = load %..any, %..any* %1, align 8
	%218 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %216, %..any %217, i32 %218)
	br label %typematch.done-105

typematch.next-22:
	%219 = icmp eq i64 %94, 5
	br i1 %219, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%220 = bitcast %..rawptr %95 to %Type_Info.Complex*
	store %Type_Info.Complex* zeroinitializer, %Type_Info.Complex** %15
	store %Type_Info.Complex* %220, %Type_Info.Complex** %15
	%221 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%222 = load %..any, %..any* %1, align 8
	%223 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %221, %..any %222, i32 %223)
	br label %typematch.done-105

typematch.next-24:
	%224 = icmp eq i64 %94, 6
	br i1 %224, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%225 = bitcast %..rawptr %95 to %Type_Info.Quaternion*
	store %Type_Info.Quaternion* zeroinitializer, %Type_Info.Quaternion** %16
	store %Type_Info.Quaternion* %225, %Type_Info.Quaternion** %16
	%226 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%227 = load %..any, %..any* %1, align 8
	%228 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %226, %..any %227, i32 %228)
	br label %typematch.done-105

typematch.next-26:
	%229 = icmp eq i64 %94, 9
	br i1 %229, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%230 = bitcast %..rawptr %95 to %Type_Info.String*
	store %Type_Info.String* zeroinitializer, %Type_Info.String** %17
	store %Type_Info.String* %230, %Type_Info.String** %17
	%231 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%232 = load %..any, %..any* %1, align 8
	%233 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %231, %..any %232, i32 %233)
	br label %typematch.done-105

typematch.next-28:
	%234 = icmp eq i64 %94, 11
	br i1 %234, label %typematch.body-34, label %typematch.next-33

typematch.body-29:
	%235 = bitcast %..rawptr %95 to %Type_Info.Pointer*
	store %Type_Info.Pointer* zeroinitializer, %Type_Info.Pointer** %18
	store %Type_Info.Pointer* %235, %Type_Info.Pointer** %18
	; IfStmt
	; SelectorExpr
	%236 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%237 = load %Type_Info*, %Type_Info** %236, align 8
	%238 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%239 = icmp eq %Type_Info* %237, %238
	br i1 %239, label %if.then-30, label %if.else-31

if.then-30:
	; SelectorExpr
	%240 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%241 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %240, i64 0
	%242 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %241, i64 0, i32 3
	%243 = load {i8*, i64, i64}*, {i8*, i64, i64}** %242, align 8
	; SelectorExpr
	%244 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%245 = load %..rawptr, %..rawptr* %244, align 8
	; cast - cast
	%246 = bitcast %..rawptr %245 to %Type_Info**
	%247 = getelementptr inbounds %Type_Info*, %Type_Info** %246, i64 0
	%248 = load %Type_Info*, %Type_Info** %247, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %243, %Type_Info* %248)
	br label %if.done-32

if.else-31:
	%249 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%250 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%251 = load %..rawptr, %..rawptr* %250, align 8
	; cast - cast
	%252 = bitcast %..rawptr %251 to %..rawptr*
	%253 = getelementptr inbounds %..rawptr, %..rawptr* %252, i64 0
	%254 = load %..rawptr, %..rawptr* %253, align 8
	%255 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %249, %..rawptr %254, i32 %255)
	br label %if.done-32

if.done-32:
	br label %typematch.done-105

typematch.next-33:
	%256 = icmp eq i64 %94, 12
	br i1 %256, label %typematch.body-43, label %typematch.next-42

typematch.body-34:
	%257 = bitcast %..rawptr %95 to %Type_Info.Array*
	store %Type_Info.Array* zeroinitializer, %Type_Info.Array** %19
	store %Type_Info.Array* %257, %Type_Info.Array** %19
	; IfStmt
	%258 = load i32, i32* %2, align 4
	%259 = icmp ne i32 %258, 118
	br i1 %259, label %if.then-35, label %if.done-36

if.then-35:
	%260 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%261 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %260, i32 %261)
	; ReturnStmt
	ret void

if.done-36:
	; SelectorExpr
	%262 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%263 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %262, i64 0
	%264 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %263, i64 0, i32 3
	%265 = load {i8*, i64, i64}*, {i8*, i64, i64}** %264, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %265, i8 91)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %20
		store i64 zeroinitializer, i64* %21
	store i64 0, i64* %21
	store i64 zeroinitializer, i64* %22
	store i64 0, i64* %22
	br label %for.interval.loop-37

for.interval.loop-37:
	; SelectorExpr
	%266 = load %Type_Info.Array*, %Type_Info.Array** %19, align 8
	%267 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %266, i64 0
	%268 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %267, i64 0, i32 4
	%269 = load i64, i64* %268, align 8
	%270 = load i64, i64* %21, align 8
	%271 = icmp slt i64 %270, %269
	br i1 %271, label %for.interval.body-38, label %for.interval.done-41

for.interval.body-38:
	%272 = load i64, i64* %21, align 8
	%273 = load i64, i64* %22, align 8
	%274 = load i64, i64* %21, align 8
	%275 = add i64 %274, 1
	store i64 %275, i64* %21
	%276 = load i64, i64* %22, align 8
	%277 = add i64 %276, 1
	store i64 %277, i64* %22
	store i64 %272, i64* %20
	; IfStmt
	%278 = load i64, i64* %20, align 8
	%279 = icmp sgt i64 %278, 0
	br i1 %279, label %if.then-39, label %if.done-40

if.then-39:
	; SelectorExpr
	%280 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%281 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %280, i64 0
	%282 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %281, i64 0, i32 3
	%283 = load {i8*, i64, i64}*, {i8*, i64, i64}** %282, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %283, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ea, i64 0, i32 0), i64 2})
	br label %if.done-40

if.done-40:
	; data
	store i8* zeroinitializer, i8** %23
		; SelectorExpr
	%284 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%285 = load %..rawptr, %..rawptr* %284, align 8
	; cast - cast
	%286 = bitcast %..rawptr %285 to i8*
	%287 = load i64, i64* %20, align 8
	; SelectorExpr
	%288 = load %Type_Info.Array*, %Type_Info.Array** %19, align 8
	%289 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %288, i64 0
	%290 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %289, i64 0, i32 3
	%291 = load i64, i64* %290, align 8
	%292 = mul i64 %287, %291
	%293 = getelementptr inbounds i8, i8* %286, i64 %292
	store i8* %293, i8** %23
	%294 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %24
	store %..any zeroinitializer, %..any* %24
	; SelectorExpr
	%295 = load %Type_Info.Array*, %Type_Info.Array** %19, align 8
	%296 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %295, i64 0
	%297 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %296, i64 0, i32 2
	%298 = load %Type_Info*, %Type_Info** %297, align 8
	%299 = getelementptr inbounds %..any, %..any* %24, i64 0, i32 0
	store %Type_Info* %298, %Type_Info** %299
	%300 = load i8*, i8** %23, align 8
	; cast - cast
	%301 = bitcast i8* %300 to %..rawptr
	%302 = getelementptr inbounds %..any, %..any* %24, i64 0, i32 1
	store %..rawptr %301, %..rawptr* %302
	%303 = load %..any, %..any* %24, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %294, %..any %303, i32 118)
	br label %for.interval.loop-37

for.interval.done-41:
	; defer
	; SelectorExpr
	%304 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%305 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %304, i64 0
	%306 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %305, i64 0, i32 3
	%307 = load {i8*, i64, i64}*, {i8*, i64, i64}** %306, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %307, i8 93)
	br label %typematch.done-105

typematch.next-42:
	%308 = icmp eq i64 %94, 20
	br i1 %308, label %typematch.body-52, label %typematch.next-51

typematch.body-43:
	%309 = bitcast %..rawptr %95 to %Type_Info.Dynamic_Array*
	store %Type_Info.Dynamic_Array* zeroinitializer, %Type_Info.Dynamic_Array** %25
	store %Type_Info.Dynamic_Array* %309, %Type_Info.Dynamic_Array** %25
	; IfStmt
	%310 = load i32, i32* %2, align 4
	%311 = icmp ne i32 %310, 118
	br i1 %311, label %if.then-44, label %if.done-45

if.then-44:
	%312 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%313 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %312, i32 %313)
	; ReturnStmt
	ret void

if.done-45:
	; SelectorExpr
	%314 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%315 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %314, i64 0
	%316 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %315, i64 0, i32 3
	%317 = load {i8*, i64, i64}*, {i8*, i64, i64}** %316, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %317, i8 91)
	; DeferStmt
	; array
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %26
		; SelectorExpr
	%318 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%319 = load %..rawptr, %..rawptr* %318, align 8
	; cast - cast
	%320 = bitcast %..rawptr %319 to %raw-6.Dynamic_Array*
	store %raw-6.Dynamic_Array* %320, %raw-6.Dynamic_Array** %26
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %27
		store i64 zeroinitializer, i64* %28
	store i64 0, i64* %28
	store i64 zeroinitializer, i64* %29
	store i64 0, i64* %29
	br label %for.interval.loop-46

for.interval.loop-46:
	; SelectorExpr
	%321 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %26, align 8
	%322 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %321, i64 0
	%323 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %322, i64 0, i32 1
	%324 = load i64, i64* %323, align 8
	%325 = load i64, i64* %28, align 8
	%326 = icmp slt i64 %325, %324
	br i1 %326, label %for.interval.body-47, label %for.interval.done-50

for.interval.body-47:
	%327 = load i64, i64* %28, align 8
	%328 = load i64, i64* %29, align 8
	%329 = load i64, i64* %28, align 8
	%330 = add i64 %329, 1
	store i64 %330, i64* %28
	%331 = load i64, i64* %29, align 8
	%332 = add i64 %331, 1
	store i64 %332, i64* %29
	store i64 %327, i64* %27
	; IfStmt
	%333 = load i64, i64* %27, align 8
	%334 = icmp sgt i64 %333, 0
	br i1 %334, label %if.then-48, label %if.done-49

if.then-48:
	; SelectorExpr
	%335 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%336 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %335, i64 0
	%337 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %336, i64 0, i32 3
	%338 = load {i8*, i64, i64}*, {i8*, i64, i64}** %337, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %338, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$eb, i64 0, i32 0), i64 2})
	br label %if.done-49

if.done-49:
	; data
	store i8* zeroinitializer, i8** %30
		; SelectorExpr
	%339 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %26, align 8
	%340 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %339, i64 0
	%341 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %340, i64 0, i32 0
	%342 = load %..rawptr, %..rawptr* %341, align 8
	; cast - cast
	%343 = bitcast %..rawptr %342 to i8*
	%344 = load i64, i64* %27, align 8
	; SelectorExpr
	%345 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %25, align 8
	%346 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %345, i64 0
	%347 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %346, i64 0, i32 3
	%348 = load i64, i64* %347, align 8
	%349 = mul i64 %344, %348
	%350 = getelementptr inbounds i8, i8* %343, i64 %349
	store i8* %350, i8** %30
	%351 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %31
	store %..any zeroinitializer, %..any* %31
	; SelectorExpr
	%352 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %25, align 8
	%353 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %352, i64 0
	%354 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %353, i64 0, i32 2
	%355 = load %Type_Info*, %Type_Info** %354, align 8
	%356 = getelementptr inbounds %..any, %..any* %31, i64 0, i32 0
	store %Type_Info* %355, %Type_Info** %356
	%357 = load i8*, i8** %30, align 8
	; cast - cast
	%358 = bitcast i8* %357 to %..rawptr
	%359 = getelementptr inbounds %..any, %..any* %31, i64 0, i32 1
	store %..rawptr %358, %..rawptr* %359
	%360 = load %..any, %..any* %31, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %351, %..any %360, i32 118)
	br label %for.interval.loop-46

for.interval.done-50:
	; defer
	; SelectorExpr
	%361 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%362 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %361, i64 0
	%363 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %362, i64 0, i32 3
	%364 = load {i8*, i64, i64}*, {i8*, i64, i64}** %363, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %364, i8 93)
	br label %typematch.done-105

typematch.next-51:
	%365 = icmp eq i64 %94, 13
	br i1 %365, label %typematch.body-70, label %typematch.next-69

typematch.body-52:
	%366 = bitcast %..rawptr %95 to %Type_Info.Map*
	store %Type_Info.Map* zeroinitializer, %Type_Info.Map** %32
	store %Type_Info.Map* %366, %Type_Info.Map** %32
	; IfStmt
	%367 = load i32, i32* %2, align 4
	%368 = icmp ne i32 %367, 118
	br i1 %368, label %if.then-53, label %if.done-54

if.then-53:
	%369 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%370 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %369, i32 %370)
	; ReturnStmt
	ret void

if.done-54:
	; SelectorExpr
	%371 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%372 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %371, i64 0
	%373 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %372, i64 0, i32 3
	%374 = load {i8*, i64, i64}*, {i8*, i64, i64}** %373, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %374, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$ec, i64 0, i32 0), i64 4})
	; DeferStmt
	; entries
	store %raw-6.Dynamic_Array* zeroinitializer, %raw-6.Dynamic_Array** %33
		; SelectorExpr
	; Cast - cast
	store %raw-6.Dynamic_Map* zeroinitializer, %raw-6.Dynamic_Map** %34
	; SelectorExpr
	%375 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%376 = load %..rawptr, %..rawptr* %375, align 8
	%377 = bitcast %..rawptr %376 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %377, %raw-6.Dynamic_Map** %34
	%378 = load %raw-6.Dynamic_Map*, %raw-6.Dynamic_Map** %34, align 8
	%379 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %378, i64 0
	%380 = getelementptr inbounds %raw-6.Dynamic_Map, %raw-6.Dynamic_Map* %379, i64 0, i32 1
	%381 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %380, i64 0
	store %raw-6.Dynamic_Array* %381, %raw-6.Dynamic_Array** %33
	; gs
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %35
		; SelectorExpr
	%382 = load %Type_Info.Map*, %Type_Info.Map** %32, align 8
	%383 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %382, i64 0
	%384 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %383, i64 0, i32 4
	%385 = load %Type_Info*, %Type_Info** %384, align 8
	%386 = call %Type_Info* @.type_info_base(%Type_Info* %385)
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %36
	%387 = getelementptr inbounds %Type_Info, %Type_Info* %386, i64 0, i32 2 ; UnionTagPtr
	%388 = load i64, i64* %387, align 8
	%389 = icmp eq i64 %388, 16
	br i1 %389, label %union_cast.ok-55, label %union_cast.end-56

union_cast.ok-55:
	%390 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 0
	%391 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 1
	%392 = bitcast %Type_Info* %386 to %Type_Info.Struct*
	store %Type_Info.Struct* %392, %Type_Info.Struct** %390
	store i1 true, i1* %391
	br label %union_cast.end-56

union_cast.end-56:
	%393 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 1
	%394 = load i1, i1* %393, align 1
	%395 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%396 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	call void @.__union_cast_check(i1 %394, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ed, i64 0, i32 0), i64 25}, i64 813, i64 9, %Type_Info* %395, %Type_Info* %396)
	%397 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 0
	%398 = load %Type_Info.Struct*, %Type_Info.Struct** %397, align 8
	store %Type_Info.Struct* %398, %Type_Info.Struct** %35
	; ed
	store %Type_Info.Dynamic_Array* zeroinitializer, %Type_Info.Dynamic_Array** %37
		; IndexExpr
	; SelectorExpr
	%399 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%400 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %399, i64 0
	%401 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %400, i64 0, i32 2
	%402 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %401, i64 0, i32 0
	%403 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %402, align 8
	%404 = extractvalue {%Type_Info**, i64, i64} %403, 0
	%405 = extractvalue {%Type_Info**, i64, i64} %403, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ee, i64 0, i32 0), i64 25}, i64 814, i64 59, i64 1, i64 %405)
	%406 = getelementptr inbounds %Type_Info*, %Type_Info** %404, i64 1
	%407 = load %Type_Info*, %Type_Info** %406, align 8
	%408 = call %Type_Info* @.type_info_base(%Type_Info* %407)
	; cast - union_cast
	store {%Type_Info.Dynamic_Array*, i1} zeroinitializer, {%Type_Info.Dynamic_Array*, i1}* %38
	%409 = getelementptr inbounds %Type_Info, %Type_Info* %408, i64 0, i32 2 ; UnionTagPtr
	%410 = load i64, i64* %409, align 8
	%411 = icmp eq i64 %410, 12
	br i1 %411, label %union_cast.ok-57, label %union_cast.end-58

union_cast.ok-57:
	%412 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 0
	%413 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 1
	%414 = bitcast %Type_Info* %408 to %Type_Info.Dynamic_Array*
	store %Type_Info.Dynamic_Array* %414, %Type_Info.Dynamic_Array** %412
	store i1 true, i1* %413
	br label %union_cast.end-58

union_cast.end-58:
	%415 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 1
	%416 = load i1, i1* %415, align 1
	%417 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%418 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	call void @.__union_cast_check(i1 %416, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ef, i64 0, i32 0), i64 25}, i64 814, i64 9, %Type_Info* %417, %Type_Info* %418)
	%419 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 0
	%420 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %419, align 8
	store %Type_Info.Dynamic_Array* %420, %Type_Info.Dynamic_Array** %37
	; entry_type
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %39
		; SelectorExpr
	%421 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %37, align 8
	%422 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %421, i64 0
	%423 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %422, i64 0, i32 2
	%424 = load %Type_Info*, %Type_Info** %423, align 8
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %40
	%425 = getelementptr inbounds %Type_Info, %Type_Info* %424, i64 0, i32 2 ; UnionTagPtr
	%426 = load i64, i64* %425, align 8
	%427 = icmp eq i64 %426, 16
	br i1 %427, label %union_cast.ok-59, label %union_cast.end-60

union_cast.ok-59:
	%428 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 0
	%429 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 1
	%430 = bitcast %Type_Info* %424 to %Type_Info.Struct*
	store %Type_Info.Struct* %430, %Type_Info.Struct** %428
	store i1 true, i1* %429
	br label %union_cast.end-60

union_cast.end-60:
	%431 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 1
	%432 = load i1, i1* %431, align 1
	%433 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%434 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	call void @.__union_cast_check(i1 %432, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$f0, i64 0, i32 0), i64 25}, i64 816, i64 17, %Type_Info* %433, %Type_Info* %434)
	%435 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 0
	%436 = load %Type_Info.Struct*, %Type_Info.Struct** %435, align 8
	store %Type_Info.Struct* %436, %Type_Info.Struct** %39
	; entry_size
	store i64 zeroinitializer, i64* %41
		; SelectorExpr
	%437 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %37, align 8
	%438 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %437, i64 0
	%439 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %438, i64 0, i32 3
	%440 = load i64, i64* %439, align 8
	store i64 %440, i64* %41
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %42
		store i64 zeroinitializer, i64* %43
	store i64 0, i64* %43
	store i64 zeroinitializer, i64* %44
	store i64 0, i64* %44
	br label %for.interval.loop-61

for.interval.loop-61:
	; SelectorExpr
	%441 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %33, align 8
	%442 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %441, i64 0
	%443 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %442, i64 0, i32 1
	%444 = load i64, i64* %443, align 8
	%445 = load i64, i64* %43, align 8
	%446 = icmp slt i64 %445, %444
	br i1 %446, label %for.interval.body-62, label %for.interval.done-68

for.interval.body-62:
	%447 = load i64, i64* %43, align 8
	%448 = load i64, i64* %44, align 8
	%449 = load i64, i64* %43, align 8
	%450 = add i64 %449, 1
	store i64 %450, i64* %43
	%451 = load i64, i64* %44, align 8
	%452 = add i64 %451, 1
	store i64 %452, i64* %44
	store i64 %447, i64* %42
	; IfStmt
	%453 = load i64, i64* %42, align 8
	%454 = icmp sgt i64 %453, 0
	br i1 %454, label %if.then-63, label %if.done-64

if.then-63:
	; SelectorExpr
	%455 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%456 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %455, i64 0
	%457 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %456, i64 0, i32 3
	%458 = load {i8*, i64, i64}*, {i8*, i64, i64}** %457, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %458, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$f1, i64 0, i32 0), i64 2})
	br label %if.done-64

if.done-64:
	; data
	store i8* zeroinitializer, i8** %45
		; SelectorExpr
	%459 = load %raw-6.Dynamic_Array*, %raw-6.Dynamic_Array** %33, align 8
	%460 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %459, i64 0
	%461 = getelementptr inbounds %raw-6.Dynamic_Array, %raw-6.Dynamic_Array* %460, i64 0, i32 0
	%462 = load %..rawptr, %..rawptr* %461, align 8
	; cast - cast
	%463 = bitcast %..rawptr %462 to i8*
	%464 = load i64, i64* %42, align 8
	%465 = load i64, i64* %41, align 8
	%466 = mul i64 %464, %465
	%467 = getelementptr inbounds i8, i8* %463, i64 %466
	store i8* %467, i8** %45
	; header
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %46
		%468 = load i8*, i8** %45, align 8
	; cast - cast
	%469 = bitcast i8* %468 to %__Map_Entry_Header*
	store %__Map_Entry_Header* %469, %__Map_Entry_Header** %46
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%470 = load %Type_Info.Map*, %Type_Info.Map** %32, align 8
	%471 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %470, i64 0
	%472 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %471, i64 0, i32 2
	%473 = load %Type_Info*, %Type_Info** %472, align 8
	%474 = call i1 @.types-27.is_string(%Type_Info* %473)
	br i1 %474, label %if.then-65, label %if.else-66

if.then-65:
	; SelectorExpr
	%475 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%476 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %475, i64 0
	%477 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %476, i64 0, i32 3
	%478 = load {i8*, i64, i64}*, {i8*, i64, i64}** %477, align 8
	; SelectorExpr
	; SelectorExpr
	%479 = load %__Map_Entry_Header*, %__Map_Entry_Header** %46, align 8
	%480 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %479, i64 0
	%481 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %480, i64 0, i32 0
	%482 = getelementptr inbounds %__Map_Key, %__Map_Key* %481, i64 0, i32 1
	%483 = load %..string, %..string* %482, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %478, %..string %483)
	br label %if.done-67

if.else-66:
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %47
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %48
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %48
	; SelectorExpr
	%484 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%485 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %484, i64 0
	%486 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %485, i64 0, i32 3
	%487 = load {i8*, i64, i64}*, {i8*, i64, i64}** %486, align 8
	%488 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %48, i64 0, i32 3
	store {i8*, i64, i64}* %487, {i8*, i64, i64}** %488
	%489 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %48, align 8
	store %fmt-4.Fmt_Info %489, %fmt-4.Fmt_Info* %47
	%490 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0
	; CompoundLit
	store %..any zeroinitializer, %..any* %49
	store %..any zeroinitializer, %..any* %49
	; SelectorExpr
	%491 = load %Type_Info.Map*, %Type_Info.Map** %32, align 8
	%492 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %491, i64 0
	%493 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %492, i64 0, i32 2
	%494 = load %Type_Info*, %Type_Info** %493, align 8
	%495 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 0
	store %Type_Info* %494, %Type_Info** %495
	; SelectorExpr
	; SelectorExpr
	%496 = load %__Map_Entry_Header*, %__Map_Entry_Header** %46, align 8
	%497 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %496, i64 0
	%498 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %497, i64 0, i32 0
	%499 = getelementptr inbounds %__Map_Key, %__Map_Key* %498, i64 0, i32 0
	%500 = getelementptr inbounds i64, i64* %499, i64 0
	; cast - cast
	%501 = bitcast i64* %500 to %..rawptr
	%502 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 1
	store %..rawptr %501, %..rawptr* %502
	%503 = load %..any, %..any* %49, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %490, %..any %503, i32 118)
	br label %if.done-67

if.done-67:
	; SelectorExpr
	%504 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%505 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %504, i64 0
	%506 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %505, i64 0, i32 3
	%507 = load {i8*, i64, i64}*, {i8*, i64, i64}** %506, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %507, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$f2, i64 0, i32 0), i64 1})
	; value
	store i8* zeroinitializer, i8** %50
		%508 = load i8*, i8** %45, align 8
	; IndexExpr
	; SelectorExpr
	%509 = load %Type_Info.Struct*, %Type_Info.Struct** %39, align 8
	%510 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %509, i64 0
	%511 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %510, i64 0, i32 2
	%512 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %511, i64 0, i32 2
	%513 = load {i64*, i64, i64}, {i64*, i64, i64}* %512, align 8
	%514 = extractvalue {i64*, i64, i64} %513, 0
	%515 = extractvalue {i64*, i64, i64} %513, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$f3, i64 0, i32 0), i64 25}, i64 834, i64 39, i64 2, i64 %515)
	%516 = getelementptr inbounds i64, i64* %514, i64 2
	%517 = load i64, i64* %516, align 8
	%518 = getelementptr inbounds i8, i8* %508, i64 %517
	store i8* %518, i8** %50
	%519 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %51
	store %..any zeroinitializer, %..any* %51
	; SelectorExpr
	%520 = load %Type_Info.Map*, %Type_Info.Map** %32, align 8
	%521 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %520, i64 0
	%522 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %521, i64 0, i32 3
	%523 = load %Type_Info*, %Type_Info** %522, align 8
	%524 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 0
	store %Type_Info* %523, %Type_Info** %524
	%525 = load i8*, i8** %50, align 8
	; cast - cast
	%526 = bitcast i8* %525 to %..rawptr
	%527 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 1
	store %..rawptr %526, %..rawptr* %527
	%528 = load %..any, %..any* %51, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %519, %..any %528, i32 118)
	br label %for.interval.loop-61

for.interval.done-68:
	; defer
	; SelectorExpr
	%529 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%530 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %529, i64 0
	%531 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %530, i64 0, i32 3
	%532 = load {i8*, i64, i64}*, {i8*, i64, i64}** %531, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %532, i8 93)
	br label %typematch.done-105

typematch.next-69:
	%533 = icmp eq i64 %94, 14
	br i1 %533, label %typematch.body-79, label %typematch.next-78

typematch.body-70:
	%534 = bitcast %..rawptr %95 to %Type_Info.Slice*
	store %Type_Info.Slice* zeroinitializer, %Type_Info.Slice** %52
	store %Type_Info.Slice* %534, %Type_Info.Slice** %52
	; IfStmt
	%535 = load i32, i32* %2, align 4
	%536 = icmp ne i32 %535, 118
	br i1 %536, label %if.then-71, label %if.done-72

if.then-71:
	%537 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%538 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %537, i32 %538)
	; ReturnStmt
	ret void

if.done-72:
	; SelectorExpr
	%539 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%540 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %539, i64 0
	%541 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %540, i64 0, i32 3
	%542 = load {i8*, i64, i64}*, {i8*, i64, i64}** %541, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %542, i8 91)
	; DeferStmt
	; slice
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %53
		; SelectorExpr
	%543 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%544 = load %..rawptr, %..rawptr* %543, align 8
	; cast - cast
	%545 = bitcast %..rawptr %544 to {i8*, i64, i64}*
	store {i8*, i64, i64}* %545, {i8*, i64, i64}** %53
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %54
		store i64 zeroinitializer, i64* %55
	store i64 0, i64* %55
	store i64 zeroinitializer, i64* %56
	store i64 0, i64* %56
	br label %for.interval.loop-73

for.interval.loop-73:
	%546 = load {i8*, i64, i64}*, {i8*, i64, i64}** %53, align 8
	%547 = load {i8*, i64, i64}, {i8*, i64, i64}* %546, align 8
	%548 = extractvalue {i8*, i64, i64} %547, 1
	%549 = load i64, i64* %55, align 8
	%550 = icmp slt i64 %549, %548
	br i1 %550, label %for.interval.body-74, label %for.interval.done-77

for.interval.body-74:
	%551 = load i64, i64* %55, align 8
	%552 = load i64, i64* %56, align 8
	%553 = load i64, i64* %55, align 8
	%554 = add i64 %553, 1
	store i64 %554, i64* %55
	%555 = load i64, i64* %56, align 8
	%556 = add i64 %555, 1
	store i64 %556, i64* %56
	store i64 %551, i64* %54
	; IfStmt
	%557 = load i64, i64* %54, align 8
	%558 = icmp sgt i64 %557, 0
	br i1 %558, label %if.then-75, label %if.done-76

if.then-75:
	; SelectorExpr
	%559 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%560 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %559, i64 0
	%561 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %560, i64 0, i32 3
	%562 = load {i8*, i64, i64}*, {i8*, i64, i64}** %561, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %562, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$f4, i64 0, i32 0), i64 2})
	br label %if.done-76

if.done-76:
	; data
	store i8* zeroinitializer, i8** %57
		; IndexExpr
	%563 = load {i8*, i64, i64}*, {i8*, i64, i64}** %53, align 8
	%564 = load {i8*, i64, i64}, {i8*, i64, i64}* %563, align 8
	%565 = extractvalue {i8*, i64, i64} %564, 0
	%566 = extractvalue {i8*, i64, i64} %564, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$f5, i64 0, i32 0), i64 25}, i64 851, i64 19, i64 0, i64 %566)
	%567 = getelementptr inbounds i8, i8* %565, i64 0
	%568 = getelementptr inbounds i8, i8* %567, i64 0
	%569 = load i64, i64* %54, align 8
	; SelectorExpr
	%570 = load %Type_Info.Slice*, %Type_Info.Slice** %52, align 8
	%571 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %570, i64 0
	%572 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %571, i64 0, i32 3
	%573 = load i64, i64* %572, align 8
	%574 = mul i64 %569, %573
	%575 = getelementptr inbounds i8, i8* %568, i64 %574
	store i8* %575, i8** %57
	%576 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %58
	store %..any zeroinitializer, %..any* %58
	; SelectorExpr
	%577 = load %Type_Info.Slice*, %Type_Info.Slice** %52, align 8
	%578 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %577, i64 0
	%579 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %578, i64 0, i32 2
	%580 = load %Type_Info*, %Type_Info** %579, align 8
	%581 = getelementptr inbounds %..any, %..any* %58, i64 0, i32 0
	store %Type_Info* %580, %Type_Info** %581
	%582 = load i8*, i8** %57, align 8
	; cast - cast
	%583 = bitcast i8* %582 to %..rawptr
	%584 = getelementptr inbounds %..any, %..any* %58, i64 0, i32 1
	store %..rawptr %583, %..rawptr* %584
	%585 = load %..any, %..any* %58, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %576, %..any %585, i32 118)
	br label %for.interval.loop-73

for.interval.done-77:
	; defer
	; SelectorExpr
	%586 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%587 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %586, i64 0
	%588 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %587, i64 0, i32 3
	%589 = load {i8*, i64, i64}*, {i8*, i64, i64}** %588, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %589, i8 93)
	br label %typematch.done-105

typematch.next-78:
	%590 = icmp eq i64 %94, 16
	br i1 %590, label %typematch.body-86, label %typematch.next-85

typematch.body-79:
	%591 = bitcast %..rawptr %95 to %Type_Info.Vector*
	store %Type_Info.Vector* zeroinitializer, %Type_Info.Vector** %59
	store %Type_Info.Vector* %591, %Type_Info.Vector** %59
	; SelectorExpr
	%592 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%593 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %592, i64 0
	%594 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %593, i64 0, i32 3
	%595 = load {i8*, i64, i64}*, {i8*, i64, i64}** %594, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %595, i8 60)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %60
		store i64 zeroinitializer, i64* %61
	store i64 0, i64* %61
	store i64 zeroinitializer, i64* %62
	store i64 0, i64* %62
	br label %for.interval.loop-80

for.interval.loop-80:
	; SelectorExpr
	%596 = load %Type_Info.Vector*, %Type_Info.Vector** %59, align 8
	%597 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %596, i64 0
	%598 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %597, i64 0, i32 4
	%599 = load i64, i64* %598, align 8
	%600 = load i64, i64* %61, align 8
	%601 = icmp slt i64 %600, %599
	br i1 %601, label %for.interval.body-81, label %for.interval.done-84

for.interval.body-81:
	%602 = load i64, i64* %61, align 8
	%603 = load i64, i64* %62, align 8
	%604 = load i64, i64* %61, align 8
	%605 = add i64 %604, 1
	store i64 %605, i64* %61
	%606 = load i64, i64* %62, align 8
	%607 = add i64 %606, 1
	store i64 %607, i64* %62
	store i64 %602, i64* %60
	; IfStmt
	%608 = load i64, i64* %60, align 8
	%609 = icmp sgt i64 %608, 0
	br i1 %609, label %if.then-82, label %if.done-83

if.then-82:
	; SelectorExpr
	%610 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%611 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %610, i64 0
	%612 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %611, i64 0, i32 3
	%613 = load {i8*, i64, i64}*, {i8*, i64, i64}** %612, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %613, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$f6, i64 0, i32 0), i64 2})
	br label %if.done-83

if.done-83:
	; data
	store i8* zeroinitializer, i8** %63
		; SelectorExpr
	%614 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%615 = load %..rawptr, %..rawptr* %614, align 8
	; cast - cast
	%616 = bitcast %..rawptr %615 to i8*
	%617 = load i64, i64* %60, align 8
	; SelectorExpr
	%618 = load %Type_Info.Vector*, %Type_Info.Vector** %59, align 8
	%619 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %618, i64 0
	%620 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %619, i64 0, i32 3
	%621 = load i64, i64* %620, align 8
	%622 = mul i64 %617, %621
	%623 = getelementptr inbounds i8, i8* %616, i64 %622
	store i8* %623, i8** %63
	%624 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %64
	store %..any zeroinitializer, %..any* %64
	; SelectorExpr
	%625 = load %Type_Info.Vector*, %Type_Info.Vector** %59, align 8
	%626 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %625, i64 0
	%627 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %626, i64 0, i32 2
	%628 = load %Type_Info*, %Type_Info** %627, align 8
	%629 = getelementptr inbounds %..any, %..any* %64, i64 0, i32 0
	store %Type_Info* %628, %Type_Info** %629
	%630 = load i8*, i8** %63, align 8
	; cast - cast
	%631 = bitcast i8* %630 to %..rawptr
	%632 = getelementptr inbounds %..any, %..any* %64, i64 0, i32 1
	store %..rawptr %631, %..rawptr* %632
	%633 = load %..any, %..any* %64, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %624, %..any %633, i32 118)
	br label %for.interval.loop-80

for.interval.done-84:
	; defer
	; SelectorExpr
	%634 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%635 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %634, i64 0
	%636 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %635, i64 0, i32 3
	%637 = load {i8*, i64, i64}*, {i8*, i64, i64}** %636, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %637, i8 62)
	br label %typematch.done-105

typematch.next-85:
	%638 = icmp eq i64 %94, 18
	br i1 %638, label %typematch.body-93, label %typematch.next-92

typematch.body-86:
	%639 = bitcast %..rawptr %95 to %Type_Info.Struct*
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %65
	store %Type_Info.Struct* %639, %Type_Info.Struct** %65
	; SelectorExpr
	%640 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%641 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %640, i64 0
	%642 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %641, i64 0, i32 3
	%643 = load {i8*, i64, i64}*, {i8*, i64, i64}** %642, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %643, i8 123)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %66
		; SelectorExpr
	%644 = load %Type_Info.Struct*, %Type_Info.Struct** %65, align 8
	%645 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %644, i64 0
	%646 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %645, i64 0, i32 2
	%647 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %646, i64 0, i32 1
	%648 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %647, align 8
	store i64 zeroinitializer, i64* %67
	%649 = extractvalue {%..string*, i64, i64} %648, 1
	store i64 %649, i64* %67
	store i64 zeroinitializer, i64* %68
	store i64 -1, i64* %68
	br label %for.index.loop-87

for.index.loop-87:
	%650 = load i64, i64* %68, align 8
	%651 = add i64 %650, 1
	store i64 %651, i64* %68
	%652 = load i64, i64* %67, align 8
	%653 = icmp slt i64 %651, %652
	br i1 %653, label %for.index.body-88, label %for.index.done-91

for.index.body-88:
	%654 = load i64, i64* %68, align 8
	store i64 %654, i64* %66
	; IfStmt
	%655 = load i64, i64* %66, align 8
	%656 = icmp sgt i64 %655, 0
	br i1 %656, label %if.then-89, label %if.done-90

if.then-89:
	; SelectorExpr
	%657 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%658 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %657, i64 0
	%659 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %658, i64 0, i32 3
	%660 = load {i8*, i64, i64}*, {i8*, i64, i64}** %659, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %660, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$f7, i64 0, i32 0), i64 2})
	br label %if.done-90

if.done-90:
	; SelectorExpr
	%661 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%662 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %661, i64 0
	%663 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %662, i64 0, i32 3
	%664 = load {i8*, i64, i64}*, {i8*, i64, i64}** %663, align 8
	; IndexExpr
	; SelectorExpr
	%665 = load %Type_Info.Struct*, %Type_Info.Struct** %65, align 8
	%666 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %665, i64 0
	%667 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %666, i64 0, i32 2
	%668 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %667, i64 0, i32 1
	%669 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %668, align 8
	%670 = extractvalue {%..string*, i64, i64} %669, 0
	%671 = extractvalue {%..string*, i64, i64} %669, 1
	%672 = load i64, i64* %66, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$f8, i64 0, i32 0), i64 25}, i64 876, i64 36, i64 %672, i64 %671)
	%673 = getelementptr inbounds %..string, %..string* %670, i64 %672
	%674 = load %..string, %..string* %673, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %664, %..string %674)
	; SelectorExpr
	%675 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%676 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %675, i64 0
	%677 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %676, i64 0, i32 3
	%678 = load {i8*, i64, i64}*, {i8*, i64, i64}** %677, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %678, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$f9, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %69
		; SelectorExpr
	%679 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%680 = load %..rawptr, %..rawptr* %679, align 8
	; cast - cast
	%681 = bitcast %..rawptr %680 to i8*
	; IndexExpr
	; SelectorExpr
	%682 = load %Type_Info.Struct*, %Type_Info.Struct** %65, align 8
	%683 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %682, i64 0
	%684 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %683, i64 0, i32 2
	%685 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %684, i64 0, i32 2
	%686 = load {i64*, i64, i64}, {i64*, i64, i64}* %685, align 8
	%687 = extractvalue {i64*, i64, i64} %686, 0
	%688 = extractvalue {i64*, i64, i64} %686, 1
	%689 = load i64, i64* %66, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$fa, i64 0, i32 0), i64 25}, i64 878, i64 45, i64 %689, i64 %688)
	%690 = getelementptr inbounds i64, i64* %687, i64 %689
	%691 = load i64, i64* %690, align 8
	%692 = getelementptr inbounds i8, i8* %681, i64 %691
	store i8* %692, i8** %69
	%693 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %70
	store %..any zeroinitializer, %..any* %70
	; IndexExpr
	; SelectorExpr
	%694 = load %Type_Info.Struct*, %Type_Info.Struct** %65, align 8
	%695 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %694, i64 0
	%696 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %695, i64 0, i32 2
	%697 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %696, i64 0, i32 0
	%698 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %697, align 8
	%699 = extractvalue {%Type_Info**, i64, i64} %698, 0
	%700 = extractvalue {%Type_Info**, i64, i64} %698, 1
	%701 = load i64, i64* %66, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$fb, i64 0, i32 0), i64 25}, i64 879, i64 33, i64 %701, i64 %700)
	%702 = getelementptr inbounds %Type_Info*, %Type_Info** %699, i64 %701
	%703 = load %Type_Info*, %Type_Info** %702, align 8
	%704 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 0
	store %Type_Info* %703, %Type_Info** %704
	%705 = load i8*, i8** %69, align 8
	; cast - cast
	%706 = bitcast i8* %705 to %..rawptr
	%707 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 1
	store %..rawptr %706, %..rawptr* %707
	%708 = load %..any, %..any* %70, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %693, %..any %708, i32 118)
	br label %for.index.loop-87

for.index.done-91:
	; defer
	; SelectorExpr
	%709 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%710 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %709, i64 0
	%711 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %710, i64 0, i32 3
	%712 = load {i8*, i64, i64}*, {i8*, i64, i64}** %711, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %712, i8 125)
	br label %typematch.done-105

typematch.next-92:
	%713 = icmp eq i64 %94, 17
	br i1 %713, label %typematch.body-100, label %typematch.next-99

typematch.body-93:
	%714 = bitcast %..rawptr %95 to %Type_Info.Union*
	store %Type_Info.Union* zeroinitializer, %Type_Info.Union** %71
	store %Type_Info.Union* %714, %Type_Info.Union** %71
	; SelectorExpr
	%715 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%716 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %715, i64 0
	%717 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %716, i64 0, i32 3
	%718 = load {i8*, i64, i64}*, {i8*, i64, i64}** %717, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %718, i8 123)
	; DeferStmt
	; cf
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} zeroinitializer, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72
		; SelectorExpr
	%719 = load %Type_Info.Union*, %Type_Info.Union** %71, align 8
	%720 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %719, i64 0
	%721 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %720, i64 0, i32 2
	%722 = load {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %721, align 8
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} %722, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %73
		; SelectorExpr
	%723 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 1
	%724 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %723, align 8
	store i64 zeroinitializer, i64* %74
	%725 = extractvalue {%..string*, i64, i64} %724, 1
	store i64 %725, i64* %74
	store i64 zeroinitializer, i64* %75
	store i64 -1, i64* %75
	br label %for.index.loop-94

for.index.loop-94:
	%726 = load i64, i64* %75, align 8
	%727 = add i64 %726, 1
	store i64 %727, i64* %75
	%728 = load i64, i64* %74, align 8
	%729 = icmp slt i64 %727, %728
	br i1 %729, label %for.index.body-95, label %for.index.done-98

for.index.body-95:
	%730 = load i64, i64* %75, align 8
	store i64 %730, i64* %73
	; IfStmt
	%731 = load i64, i64* %73, align 8
	%732 = icmp sgt i64 %731, 0
	br i1 %732, label %if.then-96, label %if.done-97

if.then-96:
	; SelectorExpr
	%733 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%734 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %733, i64 0
	%735 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %734, i64 0, i32 3
	%736 = load {i8*, i64, i64}*, {i8*, i64, i64}** %735, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %736, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$fc, i64 0, i32 0), i64 2})
	br label %if.done-97

if.done-97:
	; SelectorExpr
	%737 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%738 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %737, i64 0
	%739 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %738, i64 0, i32 3
	%740 = load {i8*, i64, i64}*, {i8*, i64, i64}** %739, align 8
	; IndexExpr
	; SelectorExpr
	%741 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 1
	%742 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %741, align 8
	%743 = extractvalue {%..string*, i64, i64} %742, 0
	%744 = extractvalue {%..string*, i64, i64} %742, 1
	%745 = load i64, i64* %73, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$fd, i64 0, i32 0), i64 25}, i64 892, i64 34, i64 %745, i64 %744)
	%746 = getelementptr inbounds %..string, %..string* %743, i64 %745
	%747 = load %..string, %..string* %746, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %740, %..string %747)
	; SelectorExpr
	%748 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%749 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %748, i64 0
	%750 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %749, i64 0, i32 3
	%751 = load {i8*, i64, i64}*, {i8*, i64, i64}** %750, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %751, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$fe, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %76
		; SelectorExpr
	%752 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%753 = load %..rawptr, %..rawptr* %752, align 8
	; cast - cast
	%754 = bitcast %..rawptr %753 to i8*
	; IndexExpr
	; SelectorExpr
	%755 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 2
	%756 = load {i64*, i64, i64}, {i64*, i64, i64}* %755, align 8
	%757 = extractvalue {i64*, i64, i64} %756, 0
	%758 = extractvalue {i64*, i64, i64} %756, 1
	%759 = load i64, i64* %73, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$ff, i64 0, i32 0), i64 25}, i64 894, i64 43, i64 %759, i64 %758)
	%760 = getelementptr inbounds i64, i64* %757, i64 %759
	%761 = load i64, i64* %760, align 8
	%762 = getelementptr inbounds i8, i8* %754, i64 %761
	store i8* %762, i8** %76
	%763 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %77
	store %..any zeroinitializer, %..any* %77
	; IndexExpr
	; SelectorExpr
	%764 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 0
	%765 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %764, align 8
	%766 = extractvalue {%Type_Info**, i64, i64} %765, 0
	%767 = extractvalue {%Type_Info**, i64, i64} %765, 1
	%768 = load i64, i64* %73, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$100, i64 0, i32 0), i64 25}, i64 895, i64 31, i64 %768, i64 %767)
	%769 = getelementptr inbounds %Type_Info*, %Type_Info** %766, i64 %768
	%770 = load %Type_Info*, %Type_Info** %769, align 8
	%771 = getelementptr inbounds %..any, %..any* %77, i64 0, i32 0
	store %Type_Info* %770, %Type_Info** %771
	%772 = load i8*, i8** %76, align 8
	; cast - cast
	%773 = bitcast i8* %772 to %..rawptr
	%774 = getelementptr inbounds %..any, %..any* %77, i64 0, i32 1
	store %..rawptr %773, %..rawptr* %774
	%775 = load %..any, %..any* %77, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %763, %..any %775, i32 118)
	br label %for.index.loop-94

for.index.done-98:
	; defer
	; SelectorExpr
	%776 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%777 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %776, i64 0
	%778 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %777, i64 0, i32 3
	%779 = load {i8*, i64, i64}*, {i8*, i64, i64}** %778, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %779, i8 125)
	br label %typematch.done-105

typematch.next-99:
	%780 = icmp eq i64 %94, 19
	br i1 %780, label %typematch.body-102, label %typematch.next-101

typematch.body-100:
	%781 = bitcast %..rawptr %95 to %Type_Info.Raw_Union*
	store %Type_Info.Raw_Union* zeroinitializer, %Type_Info.Raw_Union** %78
	store %Type_Info.Raw_Union* %781, %Type_Info.Raw_Union** %78
	; SelectorExpr
	%782 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%783 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %782, i64 0
	%784 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %783, i64 0, i32 3
	%785 = load {i8*, i64, i64}*, {i8*, i64, i64}** %784, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %785, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$101, i64 0, i32 0), i64 11})
	br label %typematch.done-105

typematch.next-101:
	%786 = icmp eq i64 %94, 10
	br i1 %786, label %typematch.body-104, label %typematch.next-103

typematch.body-102:
	%787 = bitcast %..rawptr %95 to %Type_Info.Enum*
	store %Type_Info.Enum* zeroinitializer, %Type_Info.Enum** %79
	store %Type_Info.Enum* %787, %Type_Info.Enum** %79
	%788 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%789 = load %..any, %..any* %1, align 8
	%790 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_enum(%fmt-4.Fmt_Info* %788, %..any %789, i32 %790)
	br label %typematch.done-105

typematch.next-103:
	br label %typematch.done-105

typematch.body-104:
	%791 = bitcast %..rawptr %95 to %Type_Info.Procedure*
	store %Type_Info.Procedure* zeroinitializer, %Type_Info.Procedure** %80
	store %Type_Info.Procedure* %791, %Type_Info.Procedure** %80
	; SelectorExpr
	%792 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%793 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %792, i64 0
	%794 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %793, i64 0, i32 3
	%795 = load {i8*, i64, i64}*, {i8*, i64, i64}** %794, align 8
	; SelectorExpr
	%796 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%797 = load %Type_Info*, %Type_Info** %796, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %795, %Type_Info* %797)
	; SelectorExpr
	%798 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%799 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %798, i64 0
	%800 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %799, i64 0, i32 3
	%801 = load {i8*, i64, i64}*, {i8*, i64, i64}** %800, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %801, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$102, i64 0, i32 0), i64 3})
	%802 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%803 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%804 = load %..rawptr, %..rawptr* %803, align 8
	; cast - cast
	%805 = bitcast %..rawptr %804 to %..rawptr*
	%806 = getelementptr inbounds %..rawptr, %..rawptr* %805, i64 0
	%807 = load %..rawptr, %..rawptr* %806, align 8
	call void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %802, %..rawptr %807, i32 112)
	br label %typematch.done-105

typematch.done-105:
	ret void
}

define void @.fmt-4.fmt_complex(%fmt-4.Fmt_Info* %fi, %..complex128 %c, i64 %bits, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..complex128, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca double, align 8
	%5 = alloca double, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..complex128 zeroinitializer, %..complex128* %1
		store %..complex128 %c, %..complex128* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bits, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%6 = load i32, i32* %3, align 4
	%7 = icmp eq i32 %6, 102
	br i1 %7, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%8 = icmp eq i32 %6, 70
	br i1 %8, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%9 = icmp eq i32 %6, 118
	br i1 %9, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%10 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%11 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %10, i32 %11)
	; ReturnStmt
	ret void

match.case.body-4:
	; r
	store double zeroinitializer, double* %4
		; real
	%12 = load %..complex128, %..complex128* %1, align 8
	%13 = extractvalue %..complex128 %12, 0
	store double %13, double* %4
	; i
	store double zeroinitializer, double* %5
		; imag
	%14 = load %..complex128, %..complex128* %1, align 8
	%15 = extractvalue %..complex128 %14, 1
	store double %15, double* %5
	%16 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%17 = load double, double* %4, align 8
	%18 = load i64, i64* %2, align 8
	%19 = sdiv i64 %18, 2
	%20 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %16, double %17, i64 %19, i32 %20)
	; IfStmt
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 5
	%24 = load i1, i1* %23, align 1
	br i1 %24, label %if.done-7, label %cmp.and-5

cmp.and-5:
	%25 = load double, double* %5, align 8
	%26 = fcmp oge double %25, 0x0000000000000000
	br i1 %26, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 3
	%30 = load {i8*, i64, i64}*, {i8*, i64, i64}** %29, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %30, i32 43)
	br label %if.done-7

if.done-7:
	%31 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%32 = load double, double* %5, align 8
	%33 = load i64, i64* %2, align 8
	%34 = sdiv i64 %33, 2
	%35 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %31, double %32, i64 %34, i32 %35)
	; SelectorExpr
	%36 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%37 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %36, i64 0
	%38 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0, i32 3
	%39 = load {i8*, i64, i64}*, {i8*, i64, i64}** %38, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %39, i32 105)
	br label %match.done-8

match.done-8:
	ret void
}

define void @.fmt-4.fmt_quaternion(%fmt-4.Fmt_Info* %fi, %..quaternion256 %c, i64 %bits, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..quaternion256, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca double, align 8
	%5 = alloca double, align 8
	%6 = alloca double, align 8
	%7 = alloca double, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..quaternion256 zeroinitializer, %..quaternion256* %1
		store %..quaternion256 %c, %..quaternion256* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bits, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%8 = load i32, i32* %3, align 4
	%9 = icmp eq i32 %8, 102
	br i1 %9, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%10 = icmp eq i32 %8, 70
	br i1 %10, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%11 = icmp eq i32 %8, 118
	br i1 %11, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %12, i32 %13)
	; ReturnStmt
	ret void

match.case.body-4:
	; r
	store double zeroinitializer, double* %4
		; real
	%14 = load %..quaternion256, %..quaternion256* %1, align 8
	%15 = extractvalue %..quaternion256 %14, 0
	store double %15, double* %4
	; i
	store double zeroinitializer, double* %5
		; imag
	%16 = load %..quaternion256, %..quaternion256* %1, align 8
	%17 = extractvalue %..quaternion256 %16, 1
	store double %17, double* %5
	; j
	store double zeroinitializer, double* %6
		; jmag
	%18 = load %..quaternion256, %..quaternion256* %1, align 8
	%19 = extractvalue %..quaternion256 %18, 2
	store double %19, double* %6
	; k
	store double zeroinitializer, double* %7
		; kmag
	%20 = load %..quaternion256, %..quaternion256* %1, align 8
	%21 = extractvalue %..quaternion256 %20, 3
	store double %21, double* %7
	%22 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%23 = load double, double* %4, align 8
	%24 = load i64, i64* %2, align 8
	%25 = sdiv i64 %24, 4
	%26 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %22, double %23, i64 %25, i32 %26)
	; IfStmt
	; SelectorExpr
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 5
	%30 = load i1, i1* %29, align 1
	br i1 %30, label %if.done-7, label %cmp.and-5

cmp.and-5:
	%31 = load double, double* %5, align 8
	%32 = fcmp oge double %31, 0x0000000000000000
	br i1 %32, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 3
	%36 = load {i8*, i64, i64}*, {i8*, i64, i64}** %35, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %36, i32 43)
	br label %if.done-7

if.done-7:
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = load double, double* %5, align 8
	%39 = load i64, i64* %2, align 8
	%40 = sdiv i64 %39, 4
	%41 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %37, double %38, i64 %40, i32 %41)
	; SelectorExpr
	%42 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %43, i64 0, i32 3
	%45 = load {i8*, i64, i64}*, {i8*, i64, i64}** %44, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %45, i32 105)
	; IfStmt
	; SelectorExpr
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0, i32 5
	%49 = load i1, i1* %48, align 1
	br i1 %49, label %if.done-10, label %cmp.and-8

cmp.and-8:
	%50 = load double, double* %6, align 8
	%51 = fcmp oge double %50, 0x0000000000000000
	br i1 %51, label %if.then-9, label %if.done-10

if.then-9:
	; SelectorExpr
	%52 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%53 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %52, i64 0
	%54 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %53, i64 0, i32 3
	%55 = load {i8*, i64, i64}*, {i8*, i64, i64}** %54, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %55, i32 43)
	br label %if.done-10

if.done-10:
	%56 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%57 = load double, double* %6, align 8
	%58 = load i64, i64* %2, align 8
	%59 = sdiv i64 %58, 4
	%60 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %56, double %57, i64 %59, i32 %60)
	; SelectorExpr
	%61 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0
	%63 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %62, i64 0, i32 3
	%64 = load {i8*, i64, i64}*, {i8*, i64, i64}** %63, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %64, i32 106)
	; IfStmt
	; SelectorExpr
	%65 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%66 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %65, i64 0
	%67 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %66, i64 0, i32 5
	%68 = load i1, i1* %67, align 1
	br i1 %68, label %if.done-13, label %cmp.and-11

cmp.and-11:
	%69 = load double, double* %7, align 8
	%70 = fcmp oge double %69, 0x0000000000000000
	br i1 %70, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%71 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%72 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %71, i64 0
	%73 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %72, i64 0, i32 3
	%74 = load {i8*, i64, i64}*, {i8*, i64, i64}** %73, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %74, i32 43)
	br label %if.done-13

if.done-13:
	%75 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%76 = load double, double* %7, align 8
	%77 = load i64, i64* %2, align 8
	%78 = sdiv i64 %77, 4
	%79 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %75, double %76, i64 %78, i32 %79)
	; SelectorExpr
	%80 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%81 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %80, i64 0
	%82 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %81, i64 0, i32 3
	%83 = load {i8*, i64, i64}*, {i8*, i64, i64}** %82, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %83, i32 107)
	br label %match.done-14

match.done-14:
	ret void
}

define void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %fi, %..any %arg, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info*, align 8
	%4 = alloca %Type_Info*, align 8
	%5 = alloca %..any, align 8
	%6 = alloca i1, align 1
	%7 = alloca float, align 4
	%8 = alloca double, align 8
	%9 = alloca %..complex64, align 8
	%10 = alloca %..complex128, align 8
	%11 = alloca %..complex128, align 8
	%12 = alloca %..quaternion128, align 8
	%13 = alloca %..quaternion256, align 8
	%14 = alloca %..quaternion256, align 8
	%15 = alloca i64, align 8
	%16 = alloca i8, align 1
	%17 = alloca i16, align 2
	%18 = alloca i32, align 4
	%19 = alloca i64, align 8
	%20 = alloca i64, align 8
	%21 = alloca i8, align 1
	%22 = alloca i16, align 2
	%23 = alloca i32, align 4
	%24 = alloca i64, align 8
	%25 = alloca %..string, align 8
	%26 = alloca %..any, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %arg, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	%27 = load %..any, %..any* %1, align 8
	%28 = extractvalue %..any %27, 0
	%29 = extractvalue %..any %27, 1
	%30 = bitcast %..rawptr null to %Type_Info*
	%31 = icmp eq %Type_Info* %28, %30
	%32 = icmp eq %..rawptr %29, null
	%33 = or i1 %31, %32
	br i1 %33, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%34 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0
	%36 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %35, i64 0, i32 3
	%37 = load {i8*, i64, i64}*, {i8*, i64, i64}** %36, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %37, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$103, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-2:
	; AssignStmt
	; SelectorExpr
	%38 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0, i32 0
	%41 = load %..any, %..any* %1, align 8
	store %..any %41, %..any* %40
	; IfStmt
	%42 = load i32, i32* %2, align 4
	%43 = icmp eq i32 %42, 84
	br i1 %43, label %if.then-3, label %if.done-7

if.then-3:
	; ti
	store %Type_Info* zeroinitializer, %Type_Info** %3
		; SelectorExpr
	%44 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%45 = load %Type_Info*, %Type_Info** %44, align 8
	store %Type_Info* %45, %Type_Info** %3
	; TypeMatchStmt
	%46 = load %..any, %..any* %1, align 8
	%47 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%48 = load %Type_Info*, %Type_Info** %47, align 8
	%49 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%50 = icmp eq %Type_Info* %48, %49
	br i1 %50, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	br label %typematch.done-6

typematch.body-5:
	%51 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%52 = load %..rawptr, %..rawptr* %51, align 8
	%53 = bitcast %..rawptr %52 to %Type_Info**
	%54 = load %Type_Info*, %Type_Info** %53, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %4
	store %Type_Info* %54, %Type_Info** %4
	; AssignStmt
	%55 = load %Type_Info*, %Type_Info** %4, align 8
	store %Type_Info* %55, %Type_Info** %3
	br label %typematch.done-6

typematch.done-6:
	; SelectorExpr
	%56 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%57 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %56, i64 0
	%58 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %57, i64 0, i32 3
	%59 = load {i8*, i64, i64}*, {i8*, i64, i64}** %58, align 8
	%60 = load %Type_Info*, %Type_Info** %3, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %59, %Type_Info* %60)
	; ReturnStmt
	ret void

if.done-7:
	; base_arg
	store %..any zeroinitializer, %..any* %5
		%61 = load %..any, %..any* %1, align 8
	store %..any %61, %..any* %5
	; AssignStmt
	; SelectorExpr
	%62 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	; SelectorExpr
	%63 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%64 = load %Type_Info*, %Type_Info** %63, align 8
	%65 = call %Type_Info* @.type_info_base(%Type_Info* %64)
	store %Type_Info* %65, %Type_Info** %62
	; TypeMatchStmt
	%66 = load %..any, %..any* %5, align 8
	%67 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%68 = load %Type_Info*, %Type_Info** %67, align 8
	%69 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%70 = icmp eq %Type_Info* %68, %69
	br i1 %70, label %typematch.body-9, label %typematch.next-8

typematch.next-8:
	%71 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%72 = load %Type_Info*, %Type_Info** %71, align 8
	%73 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%74 = icmp eq %Type_Info* %72, %73
	br i1 %74, label %typematch.body-11, label %typematch.next-10

typematch.body-9:
	%75 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%76 = load %..rawptr, %..rawptr* %75, align 8
	%77 = bitcast %..rawptr %76 to i1*
	%78 = load i1, i1* %77, align 1
	store i1 zeroinitializer, i1* %6
	store i1 %78, i1* %6
	%79 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%80 = load i1, i1* %6, align 1
	%81 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bool(%fmt-4.Fmt_Info* %79, i1 %80, i32 %81)
	br label %typematch.done-44

typematch.next-10:
	%82 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%83 = load %Type_Info*, %Type_Info** %82, align 8
	%84 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%85 = icmp eq %Type_Info* %83, %84
	br i1 %85, label %typematch.body-13, label %typematch.next-12

typematch.body-11:
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%87 = load %..rawptr, %..rawptr* %86, align 8
	%88 = bitcast %..rawptr %87 to float*
	%89 = load float, float* %88, align 4
	store float zeroinitializer, float* %7
	store float %89, float* %7
	%90 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%91 = load float, float* %7, align 4
	; cast - cast
	%92 = fpext float %91 to double
	%93 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %90, double %92, i64 32, i32 %93)
	br label %typematch.done-44

typematch.next-12:
	%94 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%95 = load %Type_Info*, %Type_Info** %94, align 8
	%96 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 91
	%97 = icmp eq %Type_Info* %95, %96
	br i1 %97, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%98 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%99 = load %..rawptr, %..rawptr* %98, align 8
	%100 = bitcast %..rawptr %99 to double*
	%101 = load double, double* %100, align 8
	store double zeroinitializer, double* %8
	store double %101, double* %8
	%102 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%103 = load double, double* %8, align 8
	%104 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %102, double %103, i64 64, i32 %104)
	br label %typematch.done-44

typematch.next-14:
	%105 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%106 = load %Type_Info*, %Type_Info** %105, align 8
	%107 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	%108 = icmp eq %Type_Info* %106, %107
	br i1 %108, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%109 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%110 = load %..rawptr, %..rawptr* %109, align 8
	%111 = bitcast %..rawptr %110 to %..complex64*
	%112 = load %..complex64, %..complex64* %111, align 8
	store %..complex64 zeroinitializer, %..complex64* %9
	store %..complex64 %112, %..complex64* %9
	%113 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%114 = load %..complex64, %..complex64* %9, align 8
	; cast - cast
	store %..complex128 zeroinitializer, %..complex128* %10
	%115 = extractvalue %..complex64 %114, 0
	%116 = fpext float %115 to double
	%117 = extractvalue %..complex64 %114, 1
	%118 = fpext float %117 to double
	%119 = getelementptr inbounds %..complex128, %..complex128* %10, i64 0, i32 0
	store double %116, double* %119
	%120 = getelementptr inbounds %..complex128, %..complex128* %10, i64 0, i32 1
	store double %118, double* %120
	%121 = load %..complex128, %..complex128* %10, align 8
	%122 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_complex(%fmt-4.Fmt_Info* %113, %..complex128 %121, i64 64, i32 %122)
	br label %typematch.done-44

typematch.next-16:
	%123 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%124 = load %Type_Info*, %Type_Info** %123, align 8
	%125 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	%126 = icmp eq %Type_Info* %124, %125
	br i1 %126, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%127 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%128 = load %..rawptr, %..rawptr* %127, align 8
	%129 = bitcast %..rawptr %128 to %..complex128*
	%130 = load %..complex128, %..complex128* %129, align 8
	store %..complex128 zeroinitializer, %..complex128* %11
	store %..complex128 %130, %..complex128* %11
	%131 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%132 = load %..complex128, %..complex128* %11, align 8
	%133 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_complex(%fmt-4.Fmt_Info* %131, %..complex128 %132, i64 128, i32 %133)
	br label %typematch.done-44

typematch.next-18:
	%134 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%135 = load %Type_Info*, %Type_Info** %134, align 8
	%136 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	%137 = icmp eq %Type_Info* %135, %136
	br i1 %137, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%138 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%139 = load %..rawptr, %..rawptr* %138, align 8
	%140 = bitcast %..rawptr %139 to %..quaternion128*
	%141 = load %..quaternion128, %..quaternion128* %140, align 8
	store %..quaternion128 zeroinitializer, %..quaternion128* %12
	store %..quaternion128 %141, %..quaternion128* %12
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = load %..quaternion128, %..quaternion128* %12, align 8
	; cast - cast
	store %..quaternion256 zeroinitializer, %..quaternion256* %13
	%144 = extractvalue %..quaternion128 %143, 0
	%145 = fpext float %144 to double
	%146 = extractvalue %..quaternion128 %143, 1
	%147 = fpext float %146 to double
	%148 = extractvalue %..quaternion128 %143, 2
	%149 = fpext float %148 to double
	%150 = extractvalue %..quaternion128 %143, 3
	%151 = fpext float %150 to double
	%152 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 0
	store double %145, double* %152
	%153 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 1
	store double %147, double* %153
	%154 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 2
	store double %149, double* %154
	%155 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 3
	store double %151, double* %155
	%156 = load %..quaternion256, %..quaternion256* %13, align 8
	%157 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_quaternion(%fmt-4.Fmt_Info* %142, %..quaternion256 %156, i64 128, i32 %157)
	br label %typematch.done-44

typematch.next-20:
	%158 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%159 = load %Type_Info*, %Type_Info** %158, align 8
	%160 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%161 = icmp eq %Type_Info* %159, %160
	br i1 %161, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%162 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%163 = load %..rawptr, %..rawptr* %162, align 8
	%164 = bitcast %..rawptr %163 to %..quaternion256*
	%165 = load %..quaternion256, %..quaternion256* %164, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %14
	store %..quaternion256 %165, %..quaternion256* %14
	%166 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%167 = load %..quaternion256, %..quaternion256* %14, align 8
	%168 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_quaternion(%fmt-4.Fmt_Info* %166, %..quaternion256 %167, i64 256, i32 %168)
	br label %typematch.done-44

typematch.next-22:
	%169 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%170 = load %Type_Info*, %Type_Info** %169, align 8
	%171 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%172 = icmp eq %Type_Info* %170, %171
	br i1 %172, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%173 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%174 = load %..rawptr, %..rawptr* %173, align 8
	%175 = bitcast %..rawptr %174 to i64*
	%176 = load i64, i64* %175, align 8
	store i64 zeroinitializer, i64* %15
	store i64 %176, i64* %15
	%177 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%178 = load i64, i64* %15, align 8
	; cast - cast
	%179 = bitcast i64 %178 to i64
	%180 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %177, i64 %179, i1 true, i64 64, i32 %180)
	br label %typematch.done-44

typematch.next-24:
	%181 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%182 = load %Type_Info*, %Type_Info** %181, align 8
	%183 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%184 = icmp eq %Type_Info* %182, %183
	br i1 %184, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%185 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%186 = load %..rawptr, %..rawptr* %185, align 8
	%187 = bitcast %..rawptr %186 to i8*
	%188 = load i8, i8* %187, align 1
	store i8 zeroinitializer, i8* %16
	store i8 %188, i8* %16
	%189 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%190 = load i8, i8* %16, align 1
	; cast - cast
	%191 = sext i8 %190 to i64
	%192 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %189, i64 %191, i1 true, i64 8, i32 %192)
	br label %typematch.done-44

typematch.next-26:
	%193 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%194 = load %Type_Info*, %Type_Info** %193, align 8
	%195 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%196 = icmp eq %Type_Info* %194, %195
	br i1 %196, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%197 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%198 = load %..rawptr, %..rawptr* %197, align 8
	%199 = bitcast %..rawptr %198 to i16*
	%200 = load i16, i16* %199, align 2
	store i16 zeroinitializer, i16* %17
	store i16 %200, i16* %17
	%201 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%202 = load i16, i16* %17, align 2
	; cast - cast
	%203 = sext i16 %202 to i64
	%204 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %201, i64 %203, i1 true, i64 16, i32 %204)
	br label %typematch.done-44

typematch.next-28:
	%205 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%206 = load %Type_Info*, %Type_Info** %205, align 8
	%207 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%208 = icmp eq %Type_Info* %206, %207
	br i1 %208, label %typematch.body-31, label %typematch.next-30

typematch.body-29:
	%209 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%210 = load %..rawptr, %..rawptr* %209, align 8
	%211 = bitcast %..rawptr %210 to i32*
	%212 = load i32, i32* %211, align 4
	store i32 zeroinitializer, i32* %18
	store i32 %212, i32* %18
	%213 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%214 = load i32, i32* %18, align 4
	; cast - cast
	%215 = sext i32 %214 to i64
	%216 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %213, i64 %215, i1 true, i64 32, i32 %216)
	br label %typematch.done-44

typematch.next-30:
	%217 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%218 = load %Type_Info*, %Type_Info** %217, align 8
	%219 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%220 = icmp eq %Type_Info* %218, %219
	br i1 %220, label %typematch.body-33, label %typematch.next-32

typematch.body-31:
	%221 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%222 = load %..rawptr, %..rawptr* %221, align 8
	%223 = bitcast %..rawptr %222 to i64*
	%224 = load i64, i64* %223, align 8
	store i64 zeroinitializer, i64* %19
	store i64 %224, i64* %19
	%225 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%226 = load i64, i64* %19, align 8
	; cast - cast
	%227 = bitcast i64 %226 to i64
	%228 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %225, i64 %227, i1 true, i64 64, i32 %228)
	br label %typematch.done-44

typematch.next-32:
	%229 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%230 = load %Type_Info*, %Type_Info** %229, align 8
	%231 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%232 = icmp eq %Type_Info* %230, %231
	br i1 %232, label %typematch.body-35, label %typematch.next-34

typematch.body-33:
	%233 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%234 = load %..rawptr, %..rawptr* %233, align 8
	%235 = bitcast %..rawptr %234 to i64*
	%236 = load i64, i64* %235, align 8
	store i64 zeroinitializer, i64* %20
	store i64 %236, i64* %20
	%237 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%238 = load i64, i64* %20, align 8
	; cast - cast
	%239 = bitcast i64 %238 to i64
	%240 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %237, i64 %239, i1 false, i64 64, i32 %240)
	br label %typematch.done-44

typematch.next-34:
	%241 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%242 = load %Type_Info*, %Type_Info** %241, align 8
	%243 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	%244 = icmp eq %Type_Info* %242, %243
	br i1 %244, label %typematch.body-37, label %typematch.next-36

typematch.body-35:
	%245 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%246 = load %..rawptr, %..rawptr* %245, align 8
	%247 = bitcast %..rawptr %246 to i8*
	%248 = load i8, i8* %247, align 1
	store i8 zeroinitializer, i8* %21
	store i8 %248, i8* %21
	%249 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%250 = load i8, i8* %21, align 1
	; cast - cast
	%251 = zext i8 %250 to i64
	%252 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %249, i64 %251, i1 false, i64 8, i32 %252)
	br label %typematch.done-44

typematch.next-36:
	%253 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%254 = load %Type_Info*, %Type_Info** %253, align 8
	%255 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%256 = icmp eq %Type_Info* %254, %255
	br i1 %256, label %typematch.body-39, label %typematch.next-38

typematch.body-37:
	%257 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%258 = load %..rawptr, %..rawptr* %257, align 8
	%259 = bitcast %..rawptr %258 to i16*
	%260 = load i16, i16* %259, align 2
	store i16 zeroinitializer, i16* %22
	store i16 %260, i16* %22
	%261 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%262 = load i16, i16* %22, align 2
	; cast - cast
	%263 = zext i16 %262 to i64
	%264 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %261, i64 %263, i1 false, i64 16, i32 %264)
	br label %typematch.done-44

typematch.next-38:
	%265 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%266 = load %Type_Info*, %Type_Info** %265, align 8
	%267 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%268 = icmp eq %Type_Info* %266, %267
	br i1 %268, label %typematch.body-41, label %typematch.next-40

typematch.body-39:
	%269 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%270 = load %..rawptr, %..rawptr* %269, align 8
	%271 = bitcast %..rawptr %270 to i32*
	%272 = load i32, i32* %271, align 4
	store i32 zeroinitializer, i32* %23
	store i32 %272, i32* %23
	%273 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%274 = load i32, i32* %23, align 4
	; cast - cast
	%275 = zext i32 %274 to i64
	%276 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %273, i64 %275, i1 false, i64 32, i32 %276)
	br label %typematch.done-44

typematch.next-40:
	%277 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%278 = load %Type_Info*, %Type_Info** %277, align 8
	%279 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%280 = icmp eq %Type_Info* %278, %279
	br i1 %280, label %typematch.body-43, label %typematch.next-42

typematch.body-41:
	%281 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%282 = load %..rawptr, %..rawptr* %281, align 8
	%283 = bitcast %..rawptr %282 to i64*
	%284 = load i64, i64* %283, align 8
	store i64 zeroinitializer, i64* %24
	store i64 %284, i64* %24
	%285 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%286 = load i64, i64* %24, align 8
	; cast - cast
	%287 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %285, i64 %286, i1 false, i64 64, i32 %287)
	br label %typematch.done-44

typematch.next-42:
	store %..any zeroinitializer, %..any* %26
	store %..any %66, %..any* %26
	%288 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%289 = load %..any, %..any* %1, align 8
	%290 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %288, %..any %289, i32 %290)
	br label %typematch.done-44

typematch.body-43:
	%291 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%292 = load %..rawptr, %..rawptr* %291, align 8
	%293 = bitcast %..rawptr %292 to %..string*
	%294 = load %..string, %..string* %293, align 8
	store %..string zeroinitializer, %..string* %25
	store %..string %294, %..string* %25
	%295 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%296 = load %..string, %..string* %25, align 8
	%297 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_string(%fmt-4.Fmt_Info* %295, %..string %296, i32 %297)
	br label %typematch.done-44

typematch.done-44:
	ret void
}

define i64 @.fmt-4.bprintf({i8*, i64, i64}* %b, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca %fmt-4.Fmt_Info, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca %fmt-4.Fmt_Info, align 8
	%9 = alloca i64, align 8
	%10 = alloca %..string, align 8
	%11 = alloca i32, align 4
	%12 = alloca i64, align 8
	%13 = alloca %..string, align 8
	%14 = alloca %..any, align 8
	%15 = alloca i64, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %b, {i8*, i64, i64}** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %3
		store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %3
	; end
	store i64 zeroinitializer, i64* %4
		%19 = load %..string, %..string* %1, align 8
	%20 = extractvalue %..string %19, 1
	store i64 %20, i64* %4
	; arg_index
	store i64 zeroinitializer, i64* %5
		store i64 0, i64* %5
	; was_prev_index
	store i1 zeroinitializer, i1* %6
		store i1 false, i1* %6
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %7
		store i64 0, i64* %7
	br label %for.loop-1

for.loop-1:
	%21 = load i64, i64* %7, align 8
	%22 = load i64, i64* %4, align 8
	%23 = icmp slt i64 %21, %22
	br i1 %23, label %for.body-2, label %for.done-64

for.body-2:
	; AssignStmt
	; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %8
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 true}, %fmt-4.Fmt_Info* %8
	%24 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0, i32 3
	store {i8*, i64, i64}* %24, {i8*, i64, i64}** %25
	%26 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, align 8
	store %fmt-4.Fmt_Info %26, %fmt-4.Fmt_Info* %3
	; prev_i
	store i64 zeroinitializer, i64* %9
		%27 = load i64, i64* %7, align 8
	store i64 %27, i64* %9
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%28 = load i64, i64* %7, align 8
	%29 = load i64, i64* %4, align 8
	%30 = icmp slt i64 %28, %29
	br i1 %30, label %cmp.and-4, label %for.done-6

cmp.and-4:
	; IndexExpr
	%31 = load %..string, %..string* %1, align 8
	%32 = extractvalue %..string %31, 0
	%33 = extractvalue %..string %31, 1
	%34 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$104, i64 0, i32 0), i64 25}, i64 1010, i64 22, i64 %34, i64 %33)
	%35 = getelementptr inbounds i8, i8* %32, i64 %34
	%36 = load i8, i8* %35, align 1
	%37 = icmp ne i8 %36, 37
	br i1 %37, label %for.body-5, label %for.done-6

for.body-5:
	%38 = load i64, i64* %7, align 8
	%39 = add i64 %38, 1
	store i64 %39, i64* %7
	br label %for.loop-3

for.done-6:
	; IfStmt
	%40 = load i64, i64* %7, align 8
	%41 = load i64, i64* %9, align 8
	%42 = icmp sgt i64 %40, %41
	br i1 %42, label %if.then-7, label %if.done-8

if.then-7:
	%43 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SliceExpr
	%44 = load i64, i64* %9, align 8
	%45 = load i64, i64* %7, align 8
	%46 = load %..string, %..string* %1, align 8
	%47 = extractvalue %..string %46, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$105, i64 0, i32 0), i64 25}, i64 1014, i64 23, i64 %44, i64 %45)
	%48 = extractvalue %..string %46, 0
	%49 = getelementptr inbounds i8, i8* %48, i64 %44
	%50 = sub i64 %45, %44
	store %..string zeroinitializer, %..string* %10
	%51 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %49, i8** %51
	%52 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %50, i64* %52
	%53 = load %..string, %..string* %10, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %43, %..string %53)
	br label %if.done-8

if.done-8:
	; IfStmt
	%54 = load i64, i64* %7, align 8
	%55 = load i64, i64* %4, align 8
	%56 = icmp sge i64 %54, %55
	br i1 %56, label %if.then-9, label %if.done-10

if.then-9:
	; break
	br label %for.done-64

if.done-10:
	%57 = load i64, i64* %7, align 8
	%58 = add i64 %57, 1
	store i64 %58, i64* %7
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%59 = load i64, i64* %7, align 8
	%60 = load i64, i64* %4, align 8
	%61 = icmp slt i64 %59, %60
	br i1 %61, label %for.body-12, label %for.done-24

for.body-12:
	; MatchStmt
	; IndexExpr
	%62 = load %..string, %..string* %1, align 8
	%63 = extractvalue %..string %62, 0
	%64 = extractvalue %..string %62, 1
	%65 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$106, i64 0, i32 0), i64 25}, i64 1025, i64 14, i64 %65, i64 %64)
	%66 = getelementptr inbounds i8, i8* %63, i64 %65
	%67 = load i8, i8* %66, align 1
	%68 = icmp eq i8 %67, 43
	br i1 %68, label %match.case.body-14, label %match.case.next-13

match.case.next-13:
	%69 = icmp eq i8 %67, 45
	br i1 %69, label %match.fall.body-16, label %match.case.next-15

match.case.body-14:
	; AssignStmt
	; SelectorExpr
	%70 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 5
	store i1 true, i1* %70
	br label %match.done-23

match.case.next-15:
	%71 = icmp eq i8 %67, 32
	br i1 %71, label %match.fall.body-18, label %match.case.next-17

match.fall.body-16:
	; AssignStmt
	; SelectorExpr
	%72 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	store i1 true, i1* %72
	; AssignStmt
	; SelectorExpr
	%73 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	store i1 false, i1* %73
	br label %match.done-23

match.case.next-17:
	%74 = icmp eq i8 %67, 35
	br i1 %74, label %match.fall.body-20, label %match.case.next-19

match.fall.body-18:
	; AssignStmt
	; SelectorExpr
	%75 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 6
	store i1 true, i1* %75
	br label %match.done-23

match.case.next-19:
	%76 = icmp eq i8 %67, 48
	br i1 %76, label %match.fall.body-22, label %match.case.next-21

match.fall.body-20:
	; AssignStmt
	; SelectorExpr
	%77 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 8
	store i1 true, i1* %77
	br label %match.done-23

match.case.next-21:
	; break
	br label %for.done-24

match.fall.body-22:
	; AssignStmt
	; SelectorExpr
	%78 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	; SelectorExpr
	%79 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	%80 = load i1, i1* %79, align 1
	%81 = xor i1 -1, %80
	store i1 %81, i1* %78
	br label %match.done-23

match.done-23:
	%82 = load i64, i64* %7, align 8
	%83 = add i64 %82, 1
	store i64 %83, i64* %7
	br label %for.loop-11

for.done-24:
	; AssignStmt
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%85 = load i64, i64* %5, align 8
	%86 = load %..string, %..string* %1, align 8
	%87 = load i64, i64* %7, align 8
	%88 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%89 = extractvalue {%..any*, i64, i64} %88, 1
	%90 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %84, i64 %85, %..string %86, i64 %87, i64 %89)
	%91 = extractvalue {i64, i64, i1} %90, 0
	%92 = extractvalue {i64, i64, i1} %90, 1
	%93 = extractvalue {i64, i64, i1} %90, 2
	store i64 %91, i64* %5
	store i64 %92, i64* %7
	store i1 %93, i1* %6
	; IfStmt
	%94 = load i64, i64* %7, align 8
	%95 = load i64, i64* %4, align 8
	%96 = icmp slt i64 %94, %95
	br i1 %96, label %cmp.and-25, label %if.else-31

cmp.and-25:
	; IndexExpr
	%97 = load %..string, %..string* %1, align 8
	%98 = extractvalue %..string %97, 0
	%99 = extractvalue %..string %97, 1
	%100 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$107, i64 0, i32 0), i64 25}, i64 1045, i64 21, i64 %100, i64 %99)
	%101 = getelementptr inbounds i8, i8* %98, i64 %100
	%102 = load i8, i8* %101, align 1
	%103 = icmp eq i8 %102, 42
	br i1 %103, label %if.then-26, label %if.else-31

if.then-26:
	%104 = load i64, i64* %7, align 8
	%105 = add i64 %104, 1
	store i64 %105, i64* %7
	; AssignStmt
	; SelectorExpr
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%107 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%108 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%109 = load i64, i64* %5, align 8
	%110 = call {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %108, i64 %109)
	%111 = extractvalue {i64, i64, i1} %110, 0
	%112 = extractvalue {i64, i64, i1} %110, 1
	%113 = extractvalue {i64, i64, i1} %110, 2
	store i64 %111, i64* %106
	store i64 %112, i64* %5
	store i1 %113, i1* %107
	; IfStmt
	; SelectorExpr
	%114 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%115 = load i1, i1* %114, align 1
	br i1 %115, label %if.done-28, label %if.then-27

if.then-27:
	%116 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %116, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$108, i64 0, i32 0), i64 13})
	br label %if.done-28

if.done-28:
	; IfStmt
	; SelectorExpr
	%117 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	%118 = load i64, i64* %117, align 8
	%119 = icmp slt i64 %118, 0
	br i1 %119, label %if.then-29, label %if.done-30

if.then-29:
	; AssignStmt
	; SelectorExpr
	%120 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%121 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	%122 = load i64, i64* %121, align 8
	%123 = sub i64 0, %122
	store i64 %123, i64* %120
	; AssignStmt
	; SelectorExpr
	%124 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	store i1 true, i1* %124
	; AssignStmt
	; SelectorExpr
	%125 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	store i1 false, i1* %125
	br label %if.done-30

if.done-30:
	; AssignStmt
	store i1 false, i1* %6
	br label %if.done-35

if.else-31:
	; AssignStmt
	; SelectorExpr
	%126 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%127 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%128 = load %..string, %..string* %1, align 8
	%129 = load i64, i64* %7, align 8
	%130 = call {i64, i64, i1} @.fmt-4._parse_int(%..string %128, i64 %129)
	%131 = extractvalue {i64, i64, i1} %130, 0
	%132 = extractvalue {i64, i64, i1} %130, 1
	%133 = extractvalue {i64, i64, i1} %130, 2
	store i64 %131, i64* %126
	store i64 %132, i64* %7
	store i1 %133, i1* %127
	; IfStmt
	%134 = load i1, i1* %6, align 1
	br i1 %134, label %cmp.and-32, label %if.done-34

cmp.and-32:
	; SelectorExpr
	%135 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%136 = load i1, i1* %135, align 1
	br i1 %136, label %if.then-33, label %if.done-34

if.then-33:
	; AssignStmt
	; SelectorExpr
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	store i1 false, i1* %137
	br label %if.done-34

if.done-34:
	br label %if.done-35

if.done-35:
	; IfStmt
	%138 = load i64, i64* %7, align 8
	%139 = load i64, i64* %4, align 8
	%140 = icmp slt i64 %138, %139
	br i1 %140, label %cmp.and-36, label %if.done-50

cmp.and-36:
	; IndexExpr
	%141 = load %..string, %..string* %1, align 8
	%142 = extractvalue %..string %141, 0
	%143 = extractvalue %..string %141, 1
	%144 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$109, i64 0, i32 0), i64 25}, i64 1066, i64 21, i64 %144, i64 %143)
	%145 = getelementptr inbounds i8, i8* %142, i64 %144
	%146 = load i8, i8* %145, align 1
	%147 = icmp eq i8 %146, 46
	br i1 %147, label %if.then-37, label %if.done-50

if.then-37:
	%148 = load i64, i64* %7, align 8
	%149 = add i64 %148, 1
	store i64 %149, i64* %7
	; IfStmt
	%150 = load i1, i1* %6, align 1
	br i1 %150, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	; SelectorExpr
	%151 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	store i1 false, i1* %151
	br label %if.done-39

if.done-39:
	; IfStmt
	%152 = load i64, i64* %7, align 8
	%153 = load i64, i64* %4, align 8
	%154 = icmp slt i64 %152, %153
	br i1 %154, label %cmp.and-40, label %if.else-46

cmp.and-40:
	; IndexExpr
	%155 = load %..string, %..string* %1, align 8
	%156 = extractvalue %..string %155, 0
	%157 = extractvalue %..string %155, 1
	%158 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$10a, i64 0, i32 0), i64 25}, i64 1071, i64 22, i64 %158, i64 %157)
	%159 = getelementptr inbounds i8, i8* %156, i64 %158
	%160 = load i8, i8* %159, align 1
	%161 = icmp eq i8 %160, 42
	br i1 %161, label %if.then-41, label %if.else-46

if.then-41:
	; AssignStmt
	%162 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%163 = load i64, i64* %5, align 8
	%164 = load %..string, %..string* %1, align 8
	%165 = load i64, i64* %7, align 8
	%166 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%167 = extractvalue {%..any*, i64, i64} %166, 1
	%168 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %162, i64 %163, %..string %164, i64 %165, i64 %167)
	%169 = extractvalue {i64, i64, i1} %168, 0
	%170 = extractvalue {i64, i64, i1} %168, 1
	%171 = extractvalue {i64, i64, i1} %168, 2
	store i64 %169, i64* %5
	store i64 %170, i64* %7
	store i1 %171, i1* %6
	%172 = load i64, i64* %7, align 8
	%173 = add i64 %172, 1
	store i64 %173, i64* %7
	; AssignStmt
	; SelectorExpr
	%174 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	; SelectorExpr
	%175 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%176 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%177 = load i64, i64* %5, align 8
	%178 = call {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %176, i64 %177)
	%179 = extractvalue {i64, i64, i1} %178, 0
	%180 = extractvalue {i64, i64, i1} %178, 1
	%181 = extractvalue {i64, i64, i1} %178, 2
	store i64 %179, i64* %174
	store i64 %180, i64* %5
	store i1 %181, i1* %175
	; IfStmt
	; SelectorExpr
	%182 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	%183 = load i64, i64* %182, align 8
	%184 = icmp slt i64 %183, 0
	br i1 %184, label %if.then-42, label %if.done-43

if.then-42:
	; AssignStmt
	; SelectorExpr
	%185 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	store i64 0, i64* %185
	; AssignStmt
	; SelectorExpr
	%186 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	store i1 false, i1* %186
	br label %if.done-43

if.done-43:
	; IfStmt
	; SelectorExpr
	%187 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%188 = load i1, i1* %187, align 1
	br i1 %188, label %if.done-45, label %if.then-44

if.then-44:
	; SelectorExpr
	%189 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 3
	%190 = load {i8*, i64, i64}*, {i8*, i64, i64}** %189, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %190, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$10b, i64 0, i32 0), i64 17})
	br label %if.done-45

if.done-45:
	; AssignStmt
	store i1 false, i1* %6
	br label %if.done-49

if.else-46:
	; AssignStmt
	; SelectorExpr
	%191 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	; SelectorExpr
	%192 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%193 = load %..string, %..string* %1, align 8
	%194 = load i64, i64* %7, align 8
	%195 = call {i64, i64, i1} @.fmt-4._parse_int(%..string %193, i64 %194)
	%196 = extractvalue {i64, i64, i1} %195, 0
	%197 = extractvalue {i64, i64, i1} %195, 1
	%198 = extractvalue {i64, i64, i1} %195, 2
	store i64 %196, i64* %191
	store i64 %197, i64* %7
	store i1 %198, i1* %192
	; IfStmt
	; SelectorExpr
	%199 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%200 = load i1, i1* %199, align 1
	br i1 %200, label %if.done-48, label %if.then-47

if.then-47:
	; AssignStmt
	; SelectorExpr
	%201 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	store i1 true, i1* %201
	; AssignStmt
	; SelectorExpr
	%202 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	store i64 0, i64* %202
	br label %if.done-48

if.done-48:
	br label %if.done-49

if.done-49:
	br label %if.done-50

if.done-50:
	; IfStmt
	%203 = load i1, i1* %6, align 1
	br i1 %203, label %if.done-52, label %if.then-51

if.then-51:
	; AssignStmt
	%204 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%205 = load i64, i64* %5, align 8
	%206 = load %..string, %..string* %1, align 8
	%207 = load i64, i64* %7, align 8
	%208 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%209 = extractvalue {%..any*, i64, i64} %208, 1
	%210 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %204, i64 %205, %..string %206, i64 %207, i64 %209)
	%211 = extractvalue {i64, i64, i1} %210, 0
	%212 = extractvalue {i64, i64, i1} %210, 1
	%213 = extractvalue {i64, i64, i1} %210, 2
	store i64 %211, i64* %5
	store i64 %212, i64* %7
	store i1 %213, i1* %6
	br label %if.done-52

if.done-52:
	; IfStmt
	%214 = load i64, i64* %7, align 8
	%215 = load i64, i64* %4, align 8
	%216 = icmp sge i64 %214, %215
	br i1 %216, label %if.then-53, label %if.done-54

if.then-53:
	%217 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %217, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$10c, i64 0, i32 0), i64 11})
	; break
	br label %for.done-64

if.done-54:
	; verb
	store i32 zeroinitializer, i32* %11
		; w
	store i64 zeroinitializer, i64* %12
		; SelectorExpr
	; SliceExpr
	%218 = load i64, i64* %7, align 8
	%219 = load %..string, %..string* %1, align 8
	%220 = extractvalue %..string %219, 1
	%221 = extractvalue %..string %219, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$10d, i64 0, i32 0), i64 25}, i64 1101, i64 34, i64 %218, i64 %220)
	%222 = extractvalue %..string %219, 0
	%223 = getelementptr inbounds i8, i8* %222, i64 %218
	%224 = sub i64 %220, %218
	store %..string zeroinitializer, %..string* %13
	%225 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 0
	store i8* %223, i8** %225
	%226 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 1
	store i64 %224, i64* %226
	%227 = load %..string, %..string* %13, align 8
	%228 = call {i32, i64} @.utf8-5.decode_rune-2686135930080(%..string %227)
	%229 = extractvalue {i32, i64} %228, 0
	%230 = extractvalue {i32, i64} %228, 1
	store i32 %229, i32* %11
	store i64 %230, i64* %12
	; AssignStmt
	%231 = load i64, i64* %12, align 8
	%232 = load i64, i64* %7, align 8
	%233 = add i64 %232, %231
	store i64 %233, i64* %7
	; IfStmt
	%234 = load i32, i32* %11, align 4
	%235 = icmp eq i32 %234, 37
	br i1 %235, label %if.then-55, label %if.else-56

if.then-55:
	%236 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %236, i8 37)
	br label %if.done-63

if.else-56:
	; IfStmt
	; SelectorExpr
	%237 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	%238 = load i1, i1* %237, align 1
	br i1 %238, label %if.else-58, label %if.then-57

if.then-57:
	%239 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %239, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$10e, i64 0, i32 0), i64 23})
	br label %if.done-62

if.else-58:
	; IfStmt
	%240 = load i64, i64* %5, align 8
	%241 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%242 = extractvalue {%..any*, i64, i64} %241, 1
	%243 = icmp sge i64 %240, %242
	br i1 %243, label %if.then-59, label %if.else-60

if.then-59:
	%244 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %244, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$10f, i64 0, i32 0), i64 20})
	br label %if.done-61

if.else-60:
	%245 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	; IndexExpr
	%246 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%247 = extractvalue {%..any*, i64, i64} %246, 0
	%248 = extractvalue {%..any*, i64, i64} %246, 1
	%249 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$110, i64 0, i32 0), i64 25}, i64 1111, i64 22, i64 %249, i64 %248)
	%250 = getelementptr inbounds %..any, %..any* %247, i64 %249
	%251 = load %..any, %..any* %250, align 8
	%252 = load i32, i32* %11, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %245, %..any %251, i32 %252)
	%253 = load i64, i64* %5, align 8
	%254 = add i64 %253, 1
	store i64 %254, i64* %5
	br label %if.done-61

if.done-61:
	br label %if.done-62

if.done-62:
	br label %if.done-63

if.done-63:
	br label %for.loop-1

for.done-64:
	; IfStmt
	; SelectorExpr
	%255 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 11
	%256 = load i1, i1* %255, align 1
	br i1 %256, label %if.done-75, label %cmp.and-65

cmp.and-65:
	%257 = load i64, i64* %5, align 8
	%258 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%259 = extractvalue {%..any*, i64, i64} %258, 1
	%260 = icmp slt i64 %257, %259
	br i1 %260, label %if.then-66, label %if.done-75

if.then-66:
	%261 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %261, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$111, i64 0, i32 0), i64 9})
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %14
		; index
	store i64 zeroinitializer, i64* %15
		; SliceExpr
	%262 = load i64, i64* %5, align 8
	%263 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%264 = extractvalue {%..any*, i64, i64} %263, 1
	%265 = extractvalue {%..any*, i64, i64} %263, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$112, i64 0, i32 0), i64 25}, i64 1118, i64 25, i64 %262, i64 %264, i64 %265)
	%266 = extractvalue {%..any*, i64, i64} %263, 0
	%267 = getelementptr inbounds %..any, %..any* %266, i64 %262
	%268 = sub i64 %264, %262
	%269 = sub i64 %265, %262
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	%270 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %267, %..any** %270
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 %268, i64* %271
	%272 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 %269, i64* %272
	%273 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	store i64 zeroinitializer, i64* %17
	%274 = extractvalue {%..any*, i64, i64} %273, 1
	store i64 %274, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-67

for.index.loop-67:
	%275 = load i64, i64* %18, align 8
	%276 = add i64 %275, 1
	store i64 %276, i64* %18
	%277 = load i64, i64* %17, align 8
	%278 = icmp slt i64 %276, %277
	br i1 %278, label %for.index.body-68, label %for.index.done-74

for.index.body-68:
	%279 = load i64, i64* %18, align 8
	%280 = extractvalue {%..any*, i64, i64} %273, 0
	%281 = getelementptr inbounds %..any, %..any* %280, i64 %279
	%282 = load %..any, %..any* %281, align 8
	store %..any %282, %..any* %14
	store i64 %279, i64* %15
	; IfStmt
	%283 = load i64, i64* %15, align 8
	%284 = icmp sgt i64 %283, 0
	br i1 %284, label %if.then-69, label %if.done-70

if.then-69:
	%285 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %285, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$113, i64 0, i32 0), i64 2})
	br label %if.done-70

if.done-70:
	; IfStmt
	%286 = load %..any, %..any* %14, align 8
	%287 = extractvalue %..any %286, 0
	%288 = extractvalue %..any %286, 1
	%289 = bitcast %..rawptr null to %Type_Info*
	%290 = icmp eq %Type_Info* %287, %289
	%291 = icmp eq %..rawptr %288, null
	%292 = or i1 %290, %291
	br i1 %292, label %if.then-71, label %if.else-72

if.then-71:
	%293 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %293, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$114, i64 0, i32 0), i64 5})
	br label %if.done-73

if.else-72:
	%294 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	; IndexExpr
	%295 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%296 = extractvalue {%..any*, i64, i64} %295, 0
	%297 = extractvalue {%..any*, i64, i64} %295, 1
	%298 = load i64, i64* %15, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$115, i64 0, i32 0), i64 25}, i64 1125, i64 23, i64 %298, i64 %297)
	%299 = getelementptr inbounds %..any, %..any* %296, i64 %298
	%300 = load %..any, %..any* %299, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %294, %..any %300, i32 118)
	br label %if.done-73

if.done-73:
	br label %for.index.loop-67

for.index.done-74:
	%301 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %301, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$116, i64 0, i32 0), i64 1})
	br label %if.done-75

if.done-75:
	; ReturnStmt
	%302 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%303 = load {i8*, i64, i64}, {i8*, i64, i64}* %302, align 8
	%304 = extractvalue {i8*, i64, i64} %303, 1
	ret i64 %304
}

define {[4 x i8], i64} @.utf8-5.encode_rune(i32 %r) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca [4 x i8], align 1
	%2 = alloca i32, align 4
	%3 = alloca {[4 x i8], i64}, align 8
	%4 = alloca {[4 x i8], i64}, align 8
	%5 = alloca {[4 x i8], i64}, align 8
	%6 = alloca {[4 x i8], i64}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %r, i32* %0
	; buf
	store [4 x i8] zeroinitializer, [4 x i8]* %1
		; i
	store i32 zeroinitializer, i32* %2
		%7 = load i32, i32* %0, align 4
	; cast - cast
	%8 = bitcast i32 %7 to i32
	store i32 %8, i32* %2
	; IfStmt
	%9 = load i32, i32* %2, align 4
	%10 = icmp ule i32 %9, 127
	br i1 %10, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	%11 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$117, i64 0, i32 0), i64 26}, i64 66, i64 7, i64 0, i64 4)
	%12 = load i32, i32* %0, align 4
	; cast - cast
	%13 = trunc i32 %12 to i8
	store i8 %13, i8* %11
	; ReturnStmt
	%14 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %3
	%15 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 0
	store [4 x i8] %14, [4 x i8]* %15
	%16 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 1
	store i64 1, i64* %16
	%17 = load {[4 x i8], i64}, {[4 x i8], i64}* %3, align 8
	ret {[4 x i8], i64} %17

if.done-2:
	; IfStmt
	%18 = load i32, i32* %2, align 4
	%19 = icmp ule i32 %18, 2047
	br i1 %19, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$118, i64 0, i32 0), i64 26}, i64 70, i64 7, i64 0, i64 4)
	%21 = load i32, i32* %0, align 4
	%22 = lshr i32 %21, 6
	; cast - cast
	%23 = trunc i32 %22 to i8
	%24 = or i8 192, %23
	store i8 %24, i8* %20
	; AssignStmt
	; IndexExpr
	%25 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$119, i64 0, i32 0), i64 26}, i64 71, i64 7, i64 1, i64 4)
	%26 = load i32, i32* %0, align 4
	; cast - cast
	%27 = trunc i32 %26 to i8
	%28 = and i8 %27, 63
	%29 = or i8 128, %28
	store i8 %29, i8* %25
	; ReturnStmt
	%30 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %4
	%31 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 0
	store [4 x i8] %30, [4 x i8]* %31
	%32 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 1
	store i64 2, i64* %32
	%33 = load {[4 x i8], i64}, {[4 x i8], i64}* %4, align 8
	ret {[4 x i8], i64} %33

if.done-4:
	; IfStmt
	%34 = load i32, i32* %2, align 4
	%35 = icmp ugt i32 %34, 1114111
	br i1 %35, label %if.then-7, label %cmp.or-5

cmp.or-5:
	%36 = load i32, i32* %2, align 4
	%37 = icmp ule i32 55296, %36
	br i1 %37, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%38 = load i32, i32* %2, align 4
	%39 = icmp ule i32 %38, 57343
	br i1 %39, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	store i32 65533, i32* %0
	br label %if.done-8

if.done-8:
	; IfStmt
	%40 = load i32, i32* %2, align 4
	%41 = icmp ule i32 %40, 65535
	br i1 %41, label %if.then-9, label %if.done-10

if.then-9:
	; AssignStmt
	; IndexExpr
	%42 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11a, i64 0, i32 0), i64 26}, i64 82, i64 7, i64 0, i64 4)
	%43 = load i32, i32* %0, align 4
	%44 = lshr i32 %43, 12
	; cast - cast
	%45 = trunc i32 %44 to i8
	%46 = or i8 224, %45
	store i8 %46, i8* %42
	; AssignStmt
	; IndexExpr
	%47 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11b, i64 0, i32 0), i64 26}, i64 83, i64 7, i64 1, i64 4)
	%48 = load i32, i32* %0, align 4
	%49 = lshr i32 %48, 6
	; cast - cast
	%50 = trunc i32 %49 to i8
	%51 = and i8 %50, 63
	%52 = or i8 128, %51
	store i8 %52, i8* %47
	; AssignStmt
	; IndexExpr
	%53 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11c, i64 0, i32 0), i64 26}, i64 84, i64 7, i64 2, i64 4)
	%54 = load i32, i32* %0, align 4
	; cast - cast
	%55 = trunc i32 %54 to i8
	%56 = and i8 %55, 63
	%57 = or i8 128, %56
	store i8 %57, i8* %53
	; ReturnStmt
	%58 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %5
	%59 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 0
	store [4 x i8] %58, [4 x i8]* %59
	%60 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 1
	store i64 3, i64* %60
	%61 = load {[4 x i8], i64}, {[4 x i8], i64}* %5, align 8
	ret {[4 x i8], i64} %61

if.done-10:
	; AssignStmt
	; IndexExpr
	%62 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11d, i64 0, i32 0), i64 26}, i64 88, i64 6, i64 0, i64 4)
	%63 = load i32, i32* %0, align 4
	%64 = lshr i32 %63, 18
	; cast - cast
	%65 = trunc i32 %64 to i8
	%66 = or i8 240, %65
	store i8 %66, i8* %62
	; AssignStmt
	; IndexExpr
	%67 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11e, i64 0, i32 0), i64 26}, i64 89, i64 6, i64 1, i64 4)
	%68 = load i32, i32* %0, align 4
	%69 = lshr i32 %68, 12
	; cast - cast
	%70 = trunc i32 %69 to i8
	%71 = and i8 %70, 63
	%72 = or i8 128, %71
	store i8 %72, i8* %67
	; AssignStmt
	; IndexExpr
	%73 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11f, i64 0, i32 0), i64 26}, i64 90, i64 6, i64 2, i64 4)
	%74 = load i32, i32* %0, align 4
	%75 = lshr i32 %74, 6
	; cast - cast
	%76 = trunc i32 %75 to i8
	%77 = and i8 %76, 63
	%78 = or i8 128, %77
	store i8 %78, i8* %73
	; AssignStmt
	; IndexExpr
	%79 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$120, i64 0, i32 0), i64 26}, i64 91, i64 6, i64 3, i64 4)
	%80 = load i32, i32* %0, align 4
	; cast - cast
	%81 = trunc i32 %80 to i8
	%82 = and i8 %81, 63
	%83 = or i8 128, %82
	store i8 %83, i8* %79
	; ReturnStmt
	%84 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %6
	%85 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 0
	store [4 x i8] %84, [4 x i8]* %85
	%86 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 1
	store i64 4, i64* %86
	%87 = load {[4 x i8], i64}, {[4 x i8], i64}* %6, align 8
	ret {[4 x i8], i64} %87
}

define {i32, i64} @.utf8-5.decode_rune-2686135930080(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca {i32, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%4 = load %..string, %..string* %0, align 8
	; cast - cast
	%5 = extractvalue %..string %4, 0
	store i8* zeroinitializer, i8** %1
	store i8* %5, i8** %1
	%6 = extractvalue %..string %4, 1
	%7 = sub i64 %6, 0
	%8 = sub i64 %6, 0
	%9 = load i8*, i8** %1, align 8
	%10 = getelementptr inbounds i8, i8* %9, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %8, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%15 = call {i32, i64} @.utf8-5.decode_rune-2686135930448({i8*, i64, i64} %14)
	%16 = extractvalue {i32, i64} %15, 0
	%17 = extractvalue {i32, i64} %15, 1
	store {i32, i64} zeroinitializer, {i32, i64}* %3
	%18 = getelementptr inbounds {i32, i64}, {i32, i64}* %3, i64 0, i32 0
	store i32 %16, i32* %18
	%19 = getelementptr inbounds {i32, i64}, {i32, i64}* %3, i64 0, i32 1
	store i64 %17, i64* %19
	%20 = load {i32, i64}, {i32, i64}* %3, align 8
	ret {i32, i64} %20
}

define {i32, i64} @.utf8-5.decode_rune-2686135930448({i8*, i64, i64} %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca {i32, i64}, align 8
	%3 = alloca i8, align 1
	%4 = alloca i8, align 1
	%5 = alloca i32, align 4
	%6 = alloca {i32, i64}, align 8
	%7 = alloca i8, align 1
	%8 = alloca %utf8-5.Accept_Range, align 1
	%9 = alloca {i32, i64}, align 8
	%10 = alloca i8, align 1
	%11 = alloca {i32, i64}, align 8
	%12 = alloca {i32, i64}, align 8
	%13 = alloca i8, align 1
	%14 = alloca {i32, i64}, align 8
	%15 = alloca {i32, i64}, align 8
	%16 = alloca i8, align 1
	%17 = alloca {i32, i64}, align 8
	%18 = alloca {i32, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %s, {i8*, i64, i64}* %0
	; n
	store i64 zeroinitializer, i64* %1
		%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 1
	store i64 %20, i64* %1
	; IfStmt
	%21 = load i64, i64* %1, align 8
	%22 = icmp slt i64 %21, 1
	br i1 %22, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %2
	%23 = getelementptr inbounds {i32, i64}, {i32, i64}* %2, i64 0, i32 0
	store i32 65533, i32* %23
	%24 = getelementptr inbounds {i32, i64}, {i32, i64}* %2, i64 0, i32 1
	store i64 0, i64* %24
	%25 = load {i32, i64}, {i32, i64}* %2, align 8
	ret {i32, i64} %25

if.done-2:
	; s0
	store i8 zeroinitializer, i8* %3
		; IndexExpr
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%27 = extractvalue {i8*, i64, i64} %26, 0
	%28 = extractvalue {i8*, i64, i64} %26, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$121, i64 0, i32 0), i64 26}, i64 101, i64 10, i64 0, i64 %28)
	%29 = getelementptr inbounds i8, i8* %27, i64 0
	%30 = load i8, i8* %29, align 1
	store i8 %30, i8* %3
	; x
	store i8 zeroinitializer, i8* %4
		; IndexExpr
	%31 = load i8, i8* %3, align 1
	%32 = zext i8 %31 to i64
	%33 = trunc i64 %32 to i32
	%34 = getelementptr inbounds [256 x i8], [256 x i8]* @.utf8-5.accept_sizes, i64 0, i32 %33
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$122, i64 0, i32 0), i64 26}, i64 102, i64 20, i64 %32, i64 256)
	%35 = load i8, i8* %34, align 1
	store i8 %35, i8* %4
	; IfStmt
	%36 = load i8, i8* %4, align 1
	%37 = icmp uge i8 %36, 240
	br i1 %37, label %if.then-3, label %if.done-4

if.then-3:
	; mask
	store i32 zeroinitializer, i32* %5
		%38 = load i8, i8* %4, align 1
	; cast - cast
	%39 = zext i8 %38 to i32
	%40 = shl i32 %39, 31
	%41 = lshr i32 %40, 31
	store i32 %41, i32* %5
	; ReturnStmt
	; IndexExpr
	%42 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%43 = extractvalue {i8*, i64, i64} %42, 0
	%44 = extractvalue {i8*, i64, i64} %42, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$123, i64 0, i32 0), i64 26}, i64 105, i64 23, i64 0, i64 %44)
	%45 = getelementptr inbounds i8, i8* %43, i64 0
	%46 = load i8, i8* %45, align 1
	; cast - cast
	%47 = zext i8 %46 to i32
	%48 = load i32, i32* %5, align 4
	%49 = xor i32 %48, -1
	%50 = and i32 %47, %49
	%51 = load i32, i32* %5, align 4
	%52 = and i32 65533, %51
	%53 = or i32 %50, %52
	store {i32, i64} zeroinitializer, {i32, i64}* %6
	%54 = getelementptr inbounds {i32, i64}, {i32, i64}* %6, i64 0, i32 0
	store i32 %53, i32* %54
	%55 = getelementptr inbounds {i32, i64}, {i32, i64}* %6, i64 0, i32 1
	store i64 1, i64* %55
	%56 = load {i32, i64}, {i32, i64}* %6, align 8
	ret {i32, i64} %56

if.done-4:
	; sz
	store i8 zeroinitializer, i8* %7
		%57 = load i8, i8* %4, align 1
	%58 = and i8 %57, 7
	store i8 %58, i8* %7
	; accept
	store %utf8-5.Accept_Range zeroinitializer, %utf8-5.Accept_Range* %8
		; IndexExpr
	%59 = load i8, i8* %4, align 1
	%60 = lshr i8 %59, 4
	%61 = zext i8 %60 to i64
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [5 x %utf8-5.Accept_Range], [5 x %utf8-5.Accept_Range]* @.utf8-5.accept_ranges, i64 0, i32 %62
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$124, i64 0, i32 0), i64 26}, i64 108, i64 26, i64 %61, i64 5)
	%64 = load %utf8-5.Accept_Range, %utf8-5.Accept_Range* %63, align 1
	store %utf8-5.Accept_Range %64, %utf8-5.Accept_Range* %8
	; IfStmt
	%65 = load i64, i64* %1, align 8
	%66 = load i8, i8* %7, align 1
	; cast - cast
	%67 = zext i8 %66 to i64
	%68 = icmp slt i64 %65, %67
	br i1 %68, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %9
	%69 = getelementptr inbounds {i32, i64}, {i32, i64}* %9, i64 0, i32 0
	store i32 65533, i32* %69
	%70 = getelementptr inbounds {i32, i64}, {i32, i64}* %9, i64 0, i32 1
	store i64 1, i64* %70
	%71 = load {i32, i64}, {i32, i64}* %9, align 8
	ret {i32, i64} %71

if.done-6:
	; b1
	store i8 zeroinitializer, i8* %10
		; IndexExpr
	%72 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%73 = extractvalue {i8*, i64, i64} %72, 0
	%74 = extractvalue {i8*, i64, i64} %72, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$125, i64 0, i32 0), i64 26}, i64 112, i64 10, i64 1, i64 %74)
	%75 = getelementptr inbounds i8, i8* %73, i64 1
	%76 = load i8, i8* %75, align 1
	store i8 %76, i8* %10
	; IfStmt
	%77 = load i8, i8* %10, align 1
	; SelectorExpr
	%78 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %8, i64 0, i32 0
	%79 = load i8, i8* %78, align 1
	%80 = icmp ult i8 %77, %79
	br i1 %80, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; SelectorExpr
	%81 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %8, i64 0, i32 1
	%82 = load i8, i8* %81, align 1
	%83 = load i8, i8* %10, align 1
	%84 = icmp ult i8 %82, %83
	br i1 %84, label %if.then-8, label %if.done-9

if.then-8:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %11
	%85 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 0
	store i32 65533, i32* %85
	%86 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 1
	store i64 1, i64* %86
	%87 = load {i32, i64}, {i32, i64}* %11, align 8
	ret {i32, i64} %87

if.done-9:
	; IfStmt
	%88 = load i8, i8* %7, align 1
	%89 = icmp eq i8 %88, 2
	br i1 %89, label %if.then-10, label %if.done-11

if.then-10:
	; ReturnStmt
	%90 = load i8, i8* %3, align 1
	%91 = and i8 %90, 31
	; cast - cast
	%92 = zext i8 %91 to i32
	%93 = shl i32 %92, 6
	%94 = load i8, i8* %10, align 1
	%95 = and i8 %94, 63
	; cast - cast
	%96 = zext i8 %95 to i32
	%97 = or i32 %93, %96
	store {i32, i64} zeroinitializer, {i32, i64}* %12
	%98 = getelementptr inbounds {i32, i64}, {i32, i64}* %12, i64 0, i32 0
	store i32 %97, i32* %98
	%99 = getelementptr inbounds {i32, i64}, {i32, i64}* %12, i64 0, i32 1
	store i64 2, i64* %99
	%100 = load {i32, i64}, {i32, i64}* %12, align 8
	ret {i32, i64} %100

if.done-11:
	; b2
	store i8 zeroinitializer, i8* %13
		; IndexExpr
	%101 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%102 = extractvalue {i8*, i64, i64} %101, 0
	%103 = extractvalue {i8*, i64, i64} %101, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$126, i64 0, i32 0), i64 26}, i64 119, i64 10, i64 2, i64 %103)
	%104 = getelementptr inbounds i8, i8* %102, i64 2
	%105 = load i8, i8* %104, align 1
	store i8 %105, i8* %13
	; IfStmt
	%106 = load i8, i8* %13, align 1
	%107 = icmp ult i8 %106, 128
	br i1 %107, label %if.then-13, label %cmp.or-12

cmp.or-12:
	%108 = load i8, i8* %13, align 1
	%109 = icmp ult i8 191, %108
	br i1 %109, label %if.then-13, label %if.done-14

if.then-13:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %14
	%110 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 0
	store i32 65533, i32* %110
	%111 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 1
	store i64 1, i64* %111
	%112 = load {i32, i64}, {i32, i64}* %14, align 8
	ret {i32, i64} %112

if.done-14:
	; IfStmt
	%113 = load i8, i8* %7, align 1
	%114 = icmp eq i8 %113, 3
	br i1 %114, label %if.then-15, label %if.done-16

if.then-15:
	; ReturnStmt
	%115 = load i8, i8* %3, align 1
	%116 = and i8 %115, 15
	; cast - cast
	%117 = zext i8 %116 to i32
	%118 = shl i32 %117, 12
	%119 = load i8, i8* %10, align 1
	%120 = and i8 %119, 63
	; cast - cast
	%121 = zext i8 %120 to i32
	%122 = shl i32 %121, 6
	%123 = or i32 %118, %122
	%124 = load i8, i8* %13, align 1
	%125 = and i8 %124, 63
	; cast - cast
	%126 = zext i8 %125 to i32
	%127 = or i32 %123, %126
	store {i32, i64} zeroinitializer, {i32, i64}* %15
	%128 = getelementptr inbounds {i32, i64}, {i32, i64}* %15, i64 0, i32 0
	store i32 %127, i32* %128
	%129 = getelementptr inbounds {i32, i64}, {i32, i64}* %15, i64 0, i32 1
	store i64 3, i64* %129
	%130 = load {i32, i64}, {i32, i64}* %15, align 8
	ret {i32, i64} %130

if.done-16:
	; b3
	store i8 zeroinitializer, i8* %16
		; IndexExpr
	%131 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%132 = extractvalue {i8*, i64, i64} %131, 0
	%133 = extractvalue {i8*, i64, i64} %131, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$127, i64 0, i32 0), i64 26}, i64 126, i64 10, i64 3, i64 %133)
	%134 = getelementptr inbounds i8, i8* %132, i64 3
	%135 = load i8, i8* %134, align 1
	store i8 %135, i8* %16
	; IfStmt
	%136 = load i8, i8* %16, align 1
	%137 = icmp ult i8 %136, 128
	br i1 %137, label %if.then-18, label %cmp.or-17

cmp.or-17:
	%138 = load i8, i8* %16, align 1
	%139 = icmp ult i8 191, %138
	br i1 %139, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %17
	%140 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 0
	store i32 65533, i32* %140
	%141 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 1
	store i64 1, i64* %141
	%142 = load {i32, i64}, {i32, i64}* %17, align 8
	ret {i32, i64} %142

if.done-19:
	; ReturnStmt
	%143 = load i8, i8* %3, align 1
	%144 = and i8 %143, 7
	; cast - cast
	%145 = zext i8 %144 to i32
	%146 = shl i32 %145, 18
	%147 = load i8, i8* %10, align 1
	%148 = and i8 %147, 63
	; cast - cast
	%149 = zext i8 %148 to i32
	%150 = shl i32 %149, 12
	%151 = or i32 %146, %150
	%152 = load i8, i8* %13, align 1
	%153 = and i8 %152, 63
	; cast - cast
	%154 = zext i8 %153 to i32
	%155 = shl i32 %154, 6
	%156 = or i32 %151, %155
	%157 = load i8, i8* %16, align 1
	%158 = and i8 %157, 63
	; cast - cast
	%159 = zext i8 %158 to i32
	%160 = or i32 %156, %159
	store {i32, i64} zeroinitializer, {i32, i64}* %18
	%161 = getelementptr inbounds {i32, i64}, {i32, i64}* %18, i64 0, i32 0
	store i32 %160, i32* %161
	%162 = getelementptr inbounds {i32, i64}, {i32, i64}* %18, i64 0, i32 1
	store i64 4, i64* %162
	%163 = load {i32, i64}, {i32, i64}* %18, align 8
	ret {i32, i64} %163
}

define i64 @.utf8-5.rune_count-2686135932656(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%3 = load %..string, %..string* %0, align 8
	; cast - cast
	%4 = extractvalue %..string %3, 0
	store i8* zeroinitializer, i8** %1
	store i8* %4, i8** %1
	%5 = extractvalue %..string %3, 1
	%6 = sub i64 %5, 0
	%7 = sub i64 %5, 0
	%8 = load i8*, i8** %1, align 8
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %6, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = call i64 @.utf8-5.rune_count-2686135933024({i8*, i64, i64} %13)
	ret i64 %14
}

define i64 @.utf8-5.rune_count-2686135933024({i8*, i64, i64} %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i8, align 1
	%5 = alloca i8, align 1
	%6 = alloca i64, align 8
	%7 = alloca %utf8-5.Accept_Range, align 1
	%8 = alloca i8, align 1
	%9 = alloca i8, align 1
	%10 = alloca i8, align 1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %s, {i8*, i64, i64}* %0
	; count
	store i64 zeroinitializer, i64* %1
		store i64 0, i64* %1
	; n
	store i64 zeroinitializer, i64* %2
		%11 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%12 = extractvalue {i8*, i64, i64} %11, 1
	store i64 %12, i64* %2
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	br label %for.loop-1

for.loop-1:
	%13 = load i64, i64* %3, align 8
	%14 = load i64, i64* %2, align 8
	%15 = icmp slt i64 %13, %14
	br i1 %15, label %for.body-2, label %for.done-26

for.body-2:
	; DeferStmt
	; si
	store i8 zeroinitializer, i8* %4
		; IndexExpr
	%16 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%17 = extractvalue {i8*, i64, i64} %16, 0
	%18 = extractvalue {i8*, i64, i64} %16, 1
	%19 = load i64, i64* %3, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$128, i64 0, i32 0), i64 26}, i64 227, i64 11, i64 %19, i64 %18)
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	%21 = load i8, i8* %20, align 1
	store i8 %21, i8* %4
	; IfStmt
	%22 = load i8, i8* %4, align 1
	%23 = icmp ult i8 %22, 128
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	; defer
	%26 = load i64, i64* %1, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %1
	; continue
	br label %for.loop-1

if.done-4:
	; x
	store i8 zeroinitializer, i8* %5
		; IndexExpr
	%28 = load i8, i8* %4, align 1
	%29 = zext i8 %28 to i64
	%30 = trunc i64 %29 to i32
	%31 = getelementptr inbounds [256 x i8], [256 x i8]* @.utf8-5.accept_sizes, i64 0, i32 %30
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$129, i64 0, i32 0), i64 26}, i64 232, i64 21, i64 %29, i64 256)
	%32 = load i8, i8* %31, align 1
	store i8 %32, i8* %5
	; IfStmt
	%33 = load i8, i8* %5, align 1
	%34 = icmp eq i8 %33, 241
	br i1 %34, label %if.then-5, label %if.done-6

if.then-5:
	%35 = load i64, i64* %3, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %3
	; defer
	%37 = load i64, i64* %1, align 8
	%38 = add i64 %37, 1
	store i64 %38, i64* %1
	; continue
	br label %for.loop-1

if.done-6:
	; size
	store i64 zeroinitializer, i64* %6
		%39 = load i8, i8* %5, align 1
	%40 = and i8 %39, 7
	; cast - cast
	%41 = zext i8 %40 to i64
	store i64 %41, i64* %6
	; IfStmt
	%42 = load i64, i64* %3, align 8
	%43 = load i64, i64* %6, align 8
	%44 = add i64 %42, %43
	%45 = load i64, i64* %2, align 8
	%46 = icmp sgt i64 %44, %45
	br i1 %46, label %if.then-7, label %if.done-8

if.then-7:
	%47 = load i64, i64* %3, align 8
	%48 = add i64 %47, 1
	store i64 %48, i64* %3
	; defer
	%49 = load i64, i64* %1, align 8
	%50 = add i64 %49, 1
	store i64 %50, i64* %1
	; continue
	br label %for.loop-1

if.done-8:
	; ar
	store %utf8-5.Accept_Range zeroinitializer, %utf8-5.Accept_Range* %7
		; IndexExpr
	%51 = load i8, i8* %5, align 1
	%52 = lshr i8 %51, 4
	%53 = zext i8 %52 to i64
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [5 x %utf8-5.Accept_Range], [5 x %utf8-5.Accept_Range]* @.utf8-5.accept_ranges, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$12a, i64 0, i32 0), i64 26}, i64 242, i64 23, i64 %53, i64 5)
	%56 = load %utf8-5.Accept_Range, %utf8-5.Accept_Range* %55, align 1
	store %utf8-5.Accept_Range %56, %utf8-5.Accept_Range* %7
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %8
		; IndexExpr
	%57 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%58 = extractvalue {i8*, i64, i64} %57, 0
	%59 = extractvalue {i8*, i64, i64} %57, 1
	%60 = load i64, i64* %3, align 8
	%61 = add i64 %60, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$12b, i64 0, i32 0), i64 26}, i64 243, i64 13, i64 %61, i64 %59)
	%62 = getelementptr inbounds i8, i8* %58, i64 %61
	%63 = load i8, i8* %62, align 1
	store i8 %63, i8* %8
	%64 = load i8, i8* %8, align 1
	; SelectorExpr
	%65 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %7, i64 0, i32 0
	%66 = load i8, i8* %65, align 1
	%67 = icmp ult i8 %64, %66
	br i1 %67, label %if.then-10, label %cmp.or-9

cmp.or-9:
	; SelectorExpr
	%68 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %7, i64 0, i32 1
	%69 = load i8, i8* %68, align 1
	%70 = load i8, i8* %8, align 1
	%71 = icmp ult i8 %69, %70
	br i1 %71, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-25

if.else-11:
	; IfStmt
	%72 = load i64, i64* %6, align 8
	%73 = icmp eq i64 %72, 2
	br i1 %73, label %if.then-12, label %if.else-13

if.then-12:
	br label %if.done-24

if.else-13:
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %9
		; IndexExpr
	%74 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%75 = extractvalue {i8*, i64, i64} %74, 0
	%76 = extractvalue {i8*, i64, i64} %74, 1
	%77 = load i64, i64* %3, align 8
	%78 = add i64 %77, 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$12c, i64 0, i32 0), i64 26}, i64 247, i64 20, i64 %78, i64 %76)
	%79 = getelementptr inbounds i8, i8* %75, i64 %78
	%80 = load i8, i8* %79, align 1
	store i8 %80, i8* %9
	%81 = load i8, i8* %9, align 1
	%82 = icmp ult i8 %81, 128
	br i1 %82, label %if.then-15, label %cmp.or-14

cmp.or-14:
	%83 = load i8, i8* %9, align 1
	%84 = icmp ult i8 191, %83
	br i1 %84, label %if.then-15, label %if.else-16

if.then-15:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-23

if.else-16:
	; IfStmt
	%85 = load i64, i64* %6, align 8
	%86 = icmp eq i64 %85, 3
	br i1 %86, label %if.then-17, label %if.else-18

if.then-17:
	br label %if.done-22

if.else-18:
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %10
		; IndexExpr
	%87 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%88 = extractvalue {i8*, i64, i64} %87, 0
	%89 = extractvalue {i8*, i64, i64} %87, 1
	%90 = load i64, i64* %3, align 8
	%91 = add i64 %90, 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$12d, i64 0, i32 0), i64 26}, i64 251, i64 20, i64 %91, i64 %89)
	%92 = getelementptr inbounds i8, i8* %88, i64 %91
	%93 = load i8, i8* %92, align 1
	store i8 %93, i8* %10
	%94 = load i8, i8* %10, align 1
	%95 = icmp ult i8 %94, 128
	br i1 %95, label %if.then-20, label %cmp.or-19

cmp.or-19:
	%96 = load i8, i8* %10, align 1
	%97 = icmp ult i8 191, %96
	br i1 %97, label %if.then-20, label %if.done-21

if.then-20:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-21

if.done-21:
	br label %if.done-22

if.done-22:
	br label %if.done-23

if.done-23:
	br label %if.done-24

if.done-24:
	br label %if.done-25

if.done-25:
	; AssignStmt
	%98 = load i64, i64* %6, align 8
	%99 = load i64, i64* %3, align 8
	%100 = add i64 %99, %98
	store i64 %100, i64* %3
	; defer
	%101 = load i64, i64* %1, align 8
	%102 = add i64 %101, 1
	store i64 %102, i64* %1
	br label %for.loop-1

for.done-26:
	; ReturnStmt
	%103 = load i64, i64* %1, align 8
	ret i64 %103
}

define i1 @.windows-7.is_key_down(i32 %key) alwaysinline {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %key, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 8
	; cast - cast
	%2 = call ccc i16 @GetAsyncKeyState(i32 %1)
	%3 = icmp slt i16 %2, 0
	ret i1 %3
}

define i8* @.strings-9.new_c_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca i8*, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; c
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		; make
	%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 1
	%7 = add i64 %6, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$12e, i64 0, i32 0), i64 29}, i64 2, i64 20, i64 0, i64 %7, i64 %7)
	%8 = mul i64 1, %7
	%9 = call %..rawptr @.alloc_align(i64 %8, i64 1)
	%10 = bitcast %..rawptr %9 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %1
	; copy
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%16 = load %..string, %..string* %0, align 8
	; cast - cast
	%17 = extractvalue %..string %16, 0
	store i8* zeroinitializer, i8** %3
	store i8* %17, i8** %3
	%18 = extractvalue %..string %16, 1
	%19 = sub i64 %18, 0
	%20 = sub i64 %18, 0
	%21 = load i8*, i8** %3, align 8
	%22 = getelementptr inbounds i8, i8* %21, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %22, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %19, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %20, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %15, 0
	%28 = bitcast i8* %27 to %..rawptr
	%29 = extractvalue {i8*, i64, i64} %26, 0
	%30 = bitcast i8* %29 to %..rawptr
	%31 = extractvalue {i8*, i64, i64} %15, 1
	%32 = extractvalue {i8*, i64, i64} %26, 1
	%33 = icmp slt i64 %31, %32
	%34 = select i1 %33, i64 %31, i64 %32
	%35 = mul i64 %34, 1
	%36 = call %..rawptr @.__mem_copy(%..rawptr %28, %..rawptr %30, i64 %35)
	; AssignStmt
	; IndexExpr
	%37 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%38 = extractvalue {i8*, i64, i64} %37, 0
	%39 = extractvalue {i8*, i64, i64} %37, 1
	%40 = load %..string, %..string* %0, align 8
	%41 = extractvalue %..string %40, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$12f, i64 0, i32 0), i64 29}, i64 4, i64 4, i64 %41, i64 %39)
	%42 = getelementptr inbounds i8, i8* %38, i64 %41
	store i8 0, i8* %42
	; ReturnStmt
	; IndexExpr
	%43 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%44 = extractvalue {i8*, i64, i64} %43, 0
	%45 = extractvalue {i8*, i64, i64} %43, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$130, i64 0, i32 0), i64 29}, i64 5, i64 12, i64 0, i64 %45)
	%46 = getelementptr inbounds i8, i8* %44, i64 0
	%47 = getelementptr inbounds i8, i8* %46, i64 0
	ret i8* %47
}

define %..string @.strings-9.to_odin_string(i8* %c) {
decls-0:
	%0 = alloca i8*, align 8
	%1 = alloca i64, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca %..string, align 8
	store i8* zeroinitializer, i8** %0
		store i8* %c, i8** %0
	; len
	store i64 zeroinitializer, i64* %1
		store i64 0, i64* %1
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%4 = load i8*, i8** %0, align 8
	%5 = load i64, i64* %1, align 8
	%6 = getelementptr inbounds i8, i8* %4, i64 %5
	%7 = getelementptr inbounds i8, i8* %6, i64 0
	%8 = load i8, i8* %7, align 1
	%9 = icmp ne i8 %8, 0
	br i1 %9, label %for.body-2, label %for.done-3

for.body-2:
	%10 = load i64, i64* %1, align 8
	%11 = add i64 %10, 1
	store i64 %11, i64* %1
	br label %for.loop-1

for.done-3:
	; ReturnStmt
	; slice_ptr
	%12 = load i8*, i8** %0, align 8
	%13 = load i64, i64* %1, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %12, i8** %14
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %13, i64* %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %13, i64* %16
	%17 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	; cast - cast
	%18 = extractvalue {i8*, i64, i64} %17, 0
	%19 = extractvalue {i8*, i64, i64} %17, 1
	store %..string zeroinitializer, %..string* %3
	%20 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 0
	%21 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 1
	store i8* %18, i8** %20
	store i64 %19, i64* %21
	%22 = load %..string, %..string* %3, align 8
	ret %..string %22
}

define float @.math-10.tan-2686136046096(float %θ) alwaysinline {
decls-0:
	%0 = alloca float, align 4
	store float zeroinitializer, float* %0
		store float %"\CE\B8", float* %0
	; ReturnStmt
	%1 = load float, float* %0, align 4
	%2 = call ccc float @llvm.sin.f32(float %1)
	%3 = load float, float* %0, align 4
	%4 = call ccc float @llvm.cos.f32(float %3)
	%5 = fdiv float %2, %4
	ret float %5
}

define float @.math-10.dot-2686136056400({[0 x <8 x i8>], [3 x float]} %a, {[0 x <8 x i8>], [3 x float]} %b) {
decls-0:
	%0 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%1 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%2 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%3 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %0
		store {[0 x <8 x i8>], [3 x float]} %a, {[0 x <8 x i8>], [3 x float]}* %0
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %1
		store {[0 x <8 x i8>], [3 x float]} %b, {[0 x <8 x i8>], [3 x float]}* %1
	; c
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %2
		%4 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, align 8
	%5 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, align 8
	; vector.arith.begin
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %3
	%6 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 0
	%7 = load float, float* %6, align 4
	%8 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 0
	%9 = load float, float* %8, align 4
	%10 = fmul float %7, %9
	%11 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %3, i64 0, i32 1, i32 0
	store float %10, float* %11
	%12 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 1
	%13 = load float, float* %12, align 4
	%14 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 1
	%15 = load float, float* %14, align 4
	%16 = fmul float %13, %15
	%17 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %3, i64 0, i32 1, i32 1
	store float %16, float* %17
	%18 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 2
	%19 = load float, float* %18, align 4
	%20 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 2
	%21 = load float, float* %20, align 4
	%22 = fmul float %19, %21
	%23 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %3, i64 0, i32 1, i32 2
	store float %22, float* %23
	; vector.arith.end
	%24 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %3, align 8
	store {[0 x <8 x i8>], [3 x float]} %24, {[0 x <8 x i8>], [3 x float]}* %2
	; ReturnStmt
	; SelectorExpr
	%25 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, i64 0, i32 1, i32 0
	%26 = load float, float* %25, align 4
	; SelectorExpr
	%27 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, i64 0, i32 1, i32 1
	%28 = load float, float* %27, align 4
	%29 = fadd float %26, %28
	; SelectorExpr
	%30 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, i64 0, i32 1, i32 2
	%31 = load float, float* %30, align 4
	%32 = fadd float %29, %31
	ret float %32
}

define float @.math-10.mag-2686136057872({[0 x <8 x i8>], [3 x float]} %v) {
decls-0:
	%0 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %0
		store {[0 x <8 x i8>], [3 x float]} %v, {[0 x <8 x i8>], [3 x float]}* %0
	; ReturnStmt
	%1 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, align 8
	%2 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, align 8
	%3 = call float @.math-10.dot-2686136056400({[0 x <8 x i8>], [3 x float]} %1, {[0 x <8 x i8>], [3 x float]} %2)
	%4 = call ccc float @llvm.sqrt.f32(float %3)
	ret float %4
}

define {[0 x <8 x i8>], [3 x float]} @.math-10.norm-2686136058976({[0 x <8 x i8>], [3 x float]} %v) {
decls-0:
	%0 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%1 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%2 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %0
		store {[0 x <8 x i8>], [3 x float]} %v, {[0 x <8 x i8>], [3 x float]}* %0
	; ReturnStmt
	%3 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, align 8
	; CompoundLit
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %1
	%4 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, align 8
	%5 = call float @.math-10.mag-2686136057872({[0 x <8 x i8>], [3 x float]} %4)
	%6 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 0
	store float %5, float* %6
	%7 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 1
	store float %5, float* %7
	%8 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 2
	store float %5, float* %8
	%9 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, align 8
	; vector.arith.begin
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %2
	%10 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 0
	%11 = load float, float* %10, align 4
	%12 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 0
	%13 = load float, float* %12, align 4
	%14 = fdiv float %11, %13
	%15 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, i64 0, i32 1, i32 0
	store float %14, float* %15
	%16 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 1
	%17 = load float, float* %16, align 4
	%18 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 1
	%19 = load float, float* %18, align 4
	%20 = fdiv float %17, %19
	%21 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, i64 0, i32 1, i32 1
	store float %20, float* %21
	%22 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 2
	%23 = load float, float* %22, align 4
	%24 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %1, i64 0, i32 1, i32 2
	%25 = load float, float* %24, align 4
	%26 = fdiv float %23, %25
	%27 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, i64 0, i32 1, i32 2
	store float %26, float* %27
	; vector.arith.end
	%28 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %2, align 8
	ret {[0 x <8 x i8>], [3 x float]} %28
}

define [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_identity() {
decls-0:
	; ReturnStmt
	ret [4 x {[0 x <16 x i8>], [4 x float]}] [{[0 x <16 x i8>], [4 x float]} {[0 x <16 x i8>] zeroinitializer, [4 x float][float 0x3ff0000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000]}, {[0 x <16 x i8>], [4 x float]} {[0 x <16 x i8>] zeroinitializer, [4 x float][float 0x0000000000000000, float 0x3ff0000000000000, float 0x0000000000000000, float 0x0000000000000000]}, {[0 x <16 x i8>], [4 x float]} {[0 x <16 x i8>] zeroinitializer, [4 x float][float 0x0000000000000000, float 0x0000000000000000, float 0x3ff0000000000000, float 0x0000000000000000]}, {[0 x <16 x i8>], [4 x float]} {[0 x <16 x i8>] zeroinitializer, [4 x float][float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3ff0000000000000]}]
}

define [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_translate({[0 x <8 x i8>], [3 x float]} %v) {
decls-0:
	%0 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%1 = alloca [4 x {[0 x <16 x i8>], [4 x float]}], align 16
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %0
		store {[0 x <8 x i8>], [3 x float]} %v, {[0 x <8 x i8>], [3 x float]}* %0
	; m
	store [4 x {[0 x <16 x i8>], [4 x float]}] zeroinitializer, [4 x {[0 x <16 x i8>], [4 x float]}]* %1
		%2 = call [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_identity()
	store [4 x {[0 x <16 x i8>], [4 x float]}] %2, [4 x {[0 x <16 x i8>], [4 x float]}]* %1
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%3 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$131, i64 0, i32 0), i64 26}, i64 264, i64 4, i64 3, i64 4)
	%4 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %3, i64 0, i32 1, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$132, i64 0, i32 0), i64 26}, i64 264, i64 7, i64 0, i64 4)
	; SelectorExpr
	%5 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 0
	%6 = load float, float* %5, align 4
	store float %6, float* %4
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%7 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$133, i64 0, i32 0), i64 26}, i64 265, i64 4, i64 3, i64 4)
	%8 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %7, i64 0, i32 1, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$134, i64 0, i32 0), i64 26}, i64 265, i64 7, i64 1, i64 4)
	; SelectorExpr
	%9 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 1
	%10 = load float, float* %9, align 4
	store float %10, float* %8
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%11 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$135, i64 0, i32 0), i64 26}, i64 266, i64 4, i64 3, i64 4)
	%12 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %11, i64 0, i32 1, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$136, i64 0, i32 0), i64 26}, i64 266, i64 7, i64 2, i64 4)
	; SelectorExpr
	%13 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, i64 0, i32 1, i32 2
	%14 = load float, float* %13, align 4
	store float %14, float* %12
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%15 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$137, i64 0, i32 0), i64 26}, i64 267, i64 4, i64 3, i64 4)
	%16 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %15, i64 0, i32 1, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$138, i64 0, i32 0), i64 26}, i64 267, i64 7, i64 3, i64 4)
	store float 0x3ff0000000000000, float* %16
	; ReturnStmt
	%17 = load [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %1, align 16
	ret [4 x {[0 x <16 x i8>], [4 x float]}] %17
}

define [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_rotate({[0 x <8 x i8>], [3 x float]} %v, float %angle_radians) {
decls-0:
	%0 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%1 = alloca float, align 4
	%2 = alloca float, align 4
	%3 = alloca float, align 4
	%4 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%5 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%6 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%7 = alloca {[0 x <8 x i8>], [3 x float]}, align 8
	%8 = alloca [4 x {[0 x <16 x i8>], [4 x float]}], align 16
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %0
		store {[0 x <8 x i8>], [3 x float]} %v, {[0 x <8 x i8>], [3 x float]}* %0
	store float zeroinitializer, float* %1
		store float %angle_radians, float* %1
	; c
	store float zeroinitializer, float* %2
		%9 = load float, float* %1, align 4
	%10 = call ccc float @llvm.cos.f32(float %9)
	store float %10, float* %2
	; s
	store float zeroinitializer, float* %3
		%11 = load float, float* %1, align 4
	%12 = call ccc float @llvm.sin.f32(float %11)
	store float %12, float* %3
	; a
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %4
		%13 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %0, align 8
	%14 = call {[0 x <8 x i8>], [3 x float]} @.math-10.norm-2686136058976({[0 x <8 x i8>], [3 x float]} %13)
	store {[0 x <8 x i8>], [3 x float]} %14, {[0 x <8 x i8>], [3 x float]}* %4
	; t
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %5
		%15 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, align 8
	; CompoundLit
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %6
	%16 = load float, float* %2, align 4
	%17 = fsub float 0x3ff0000000000000, %16
	%18 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, i64 0, i32 1, i32 0
	store float %17, float* %18
	%19 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, i64 0, i32 1, i32 1
	store float %17, float* %19
	%20 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, i64 0, i32 1, i32 2
	store float %17, float* %20
	%21 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, align 8
	; vector.arith.begin
	store {[0 x <8 x i8>], [3 x float]} zeroinitializer, {[0 x <8 x i8>], [3 x float]}* %7
	%22 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 0
	%23 = load float, float* %22, align 4
	%24 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, i64 0, i32 1, i32 0
	%25 = load float, float* %24, align 4
	%26 = fmul float %23, %25
	%27 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %7, i64 0, i32 1, i32 0
	store float %26, float* %27
	%28 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 1
	%29 = load float, float* %28, align 4
	%30 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, i64 0, i32 1, i32 1
	%31 = load float, float* %30, align 4
	%32 = fmul float %29, %31
	%33 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %7, i64 0, i32 1, i32 1
	store float %32, float* %33
	%34 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 2
	%35 = load float, float* %34, align 4
	%36 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %6, i64 0, i32 1, i32 2
	%37 = load float, float* %36, align 4
	%38 = fmul float %35, %37
	%39 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %7, i64 0, i32 1, i32 2
	store float %38, float* %39
	; vector.arith.end
	%40 = load {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %7, align 8
	store {[0 x <8 x i8>], [3 x float]} %40, {[0 x <8 x i8>], [3 x float]}* %5
	; rot
	store [4 x {[0 x <16 x i8>], [4 x float]}] zeroinitializer, [4 x {[0 x <16 x i8>], [4 x float]}]* %8
		%41 = call [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_identity()
	store [4 x {[0 x <16 x i8>], [4 x float]}] %41, [4 x {[0 x <16 x i8>], [4 x float]}]* %8
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%42 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$139, i64 0, i32 0), i64 26}, i64 280, i64 6, i64 0, i64 4)
	%43 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %42, i64 0, i32 1, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13a, i64 0, i32 0), i64 26}, i64 280, i64 9, i64 0, i64 4)
	%44 = load float, float* %2, align 4
	; SelectorExpr
	%45 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 0
	%46 = load float, float* %45, align 4
	; SelectorExpr
	%47 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 0
	%48 = load float, float* %47, align 4
	%49 = fmul float %46, %48
	%50 = fadd float %44, %49
	store float %50, float* %43
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%51 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13b, i64 0, i32 0), i64 26}, i64 281, i64 6, i64 0, i64 4)
	%52 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %51, i64 0, i32 1, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13c, i64 0, i32 0), i64 26}, i64 281, i64 9, i64 1, i64 4)
	; SelectorExpr
	%53 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 0
	%54 = load float, float* %53, align 4
	; SelectorExpr
	%55 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 1
	%56 = load float, float* %55, align 4
	%57 = fmul float %54, %56
	%58 = fadd float 0x0000000000000000, %57
	%59 = load float, float* %3, align 4
	; SelectorExpr
	%60 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 2
	%61 = load float, float* %60, align 4
	%62 = fmul float %59, %61
	%63 = fadd float %58, %62
	store float %63, float* %52
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%64 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13d, i64 0, i32 0), i64 26}, i64 282, i64 6, i64 0, i64 4)
	%65 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %64, i64 0, i32 1, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13e, i64 0, i32 0), i64 26}, i64 282, i64 9, i64 2, i64 4)
	; SelectorExpr
	%66 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 0
	%67 = load float, float* %66, align 4
	; SelectorExpr
	%68 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 2
	%69 = load float, float* %68, align 4
	%70 = fmul float %67, %69
	%71 = fadd float 0x0000000000000000, %70
	%72 = load float, float* %3, align 4
	; SelectorExpr
	%73 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 1
	%74 = load float, float* %73, align 4
	%75 = fmul float %72, %74
	%76 = fsub float %71, %75
	store float %76, float* %65
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%77 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13f, i64 0, i32 0), i64 26}, i64 283, i64 6, i64 0, i64 4)
	%78 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %77, i64 0, i32 1, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$140, i64 0, i32 0), i64 26}, i64 283, i64 9, i64 3, i64 4)
	store float 0x0000000000000000, float* %78
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%79 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$141, i64 0, i32 0), i64 26}, i64 285, i64 6, i64 1, i64 4)
	%80 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %79, i64 0, i32 1, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$142, i64 0, i32 0), i64 26}, i64 285, i64 9, i64 0, i64 4)
	; SelectorExpr
	%81 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 1
	%82 = load float, float* %81, align 4
	; SelectorExpr
	%83 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 0
	%84 = load float, float* %83, align 4
	%85 = fmul float %82, %84
	%86 = fadd float 0x0000000000000000, %85
	%87 = load float, float* %3, align 4
	; SelectorExpr
	%88 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 2
	%89 = load float, float* %88, align 4
	%90 = fmul float %87, %89
	%91 = fsub float %86, %90
	store float %91, float* %80
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%92 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$143, i64 0, i32 0), i64 26}, i64 286, i64 6, i64 1, i64 4)
	%93 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %92, i64 0, i32 1, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$144, i64 0, i32 0), i64 26}, i64 286, i64 9, i64 1, i64 4)
	%94 = load float, float* %2, align 4
	; SelectorExpr
	%95 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 1
	%96 = load float, float* %95, align 4
	; SelectorExpr
	%97 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 1
	%98 = load float, float* %97, align 4
	%99 = fmul float %96, %98
	%100 = fadd float %94, %99
	store float %100, float* %93
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%101 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$145, i64 0, i32 0), i64 26}, i64 287, i64 6, i64 1, i64 4)
	%102 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %101, i64 0, i32 1, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$146, i64 0, i32 0), i64 26}, i64 287, i64 9, i64 2, i64 4)
	; SelectorExpr
	%103 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 1
	%104 = load float, float* %103, align 4
	; SelectorExpr
	%105 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 2
	%106 = load float, float* %105, align 4
	%107 = fmul float %104, %106
	%108 = fadd float 0x0000000000000000, %107
	%109 = load float, float* %3, align 4
	; SelectorExpr
	%110 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 0
	%111 = load float, float* %110, align 4
	%112 = fmul float %109, %111
	%113 = fadd float %108, %112
	store float %113, float* %102
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%114 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$147, i64 0, i32 0), i64 26}, i64 288, i64 6, i64 1, i64 4)
	%115 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %114, i64 0, i32 1, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$148, i64 0, i32 0), i64 26}, i64 288, i64 9, i64 3, i64 4)
	store float 0x0000000000000000, float* %115
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%116 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$149, i64 0, i32 0), i64 26}, i64 290, i64 6, i64 2, i64 4)
	%117 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %116, i64 0, i32 1, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14a, i64 0, i32 0), i64 26}, i64 290, i64 9, i64 0, i64 4)
	; SelectorExpr
	%118 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 2
	%119 = load float, float* %118, align 4
	; SelectorExpr
	%120 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 0
	%121 = load float, float* %120, align 4
	%122 = fmul float %119, %121
	%123 = fadd float 0x0000000000000000, %122
	%124 = load float, float* %3, align 4
	; SelectorExpr
	%125 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 1
	%126 = load float, float* %125, align 4
	%127 = fmul float %124, %126
	%128 = fadd float %123, %127
	store float %128, float* %117
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%129 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14b, i64 0, i32 0), i64 26}, i64 291, i64 6, i64 2, i64 4)
	%130 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %129, i64 0, i32 1, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14c, i64 0, i32 0), i64 26}, i64 291, i64 9, i64 1, i64 4)
	; SelectorExpr
	%131 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 2
	%132 = load float, float* %131, align 4
	; SelectorExpr
	%133 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 1
	%134 = load float, float* %133, align 4
	%135 = fmul float %132, %134
	%136 = fadd float 0x0000000000000000, %135
	%137 = load float, float* %3, align 4
	; SelectorExpr
	%138 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 0
	%139 = load float, float* %138, align 4
	%140 = fmul float %137, %139
	%141 = fsub float %136, %140
	store float %141, float* %130
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%142 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14d, i64 0, i32 0), i64 26}, i64 292, i64 6, i64 2, i64 4)
	%143 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %142, i64 0, i32 1, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14e, i64 0, i32 0), i64 26}, i64 292, i64 9, i64 2, i64 4)
	%144 = load float, float* %2, align 4
	; SelectorExpr
	%145 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %5, i64 0, i32 1, i32 2
	%146 = load float, float* %145, align 4
	; SelectorExpr
	%147 = getelementptr inbounds {[0 x <8 x i8>], [3 x float]}, {[0 x <8 x i8>], [3 x float]}* %4, i64 0, i32 1, i32 2
	%148 = load float, float* %147, align 4
	%149 = fmul float %146, %148
	%150 = fadd float %144, %149
	store float %150, float* %143
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%151 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14f, i64 0, i32 0), i64 26}, i64 293, i64 6, i64 2, i64 4)
	%152 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %151, i64 0, i32 1, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$150, i64 0, i32 0), i64 26}, i64 293, i64 9, i64 3, i64 4)
	store float 0x0000000000000000, float* %152
	; ReturnStmt
	%153 = load [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %8, align 16
	ret [4 x {[0 x <16 x i8>], [4 x float]}] %153
}

define [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.perspective(float %fovy, float %aspect, float %near, float %far) {
decls-0:
	%0 = alloca float, align 4
	%1 = alloca float, align 4
	%2 = alloca float, align 4
	%3 = alloca float, align 4
	%4 = alloca [4 x {[0 x <16 x i8>], [4 x float]}], align 16
	%5 = alloca float, align 4
	store float zeroinitializer, float* %0
		store float %fovy, float* %0
	store float zeroinitializer, float* %1
		store float %aspect, float* %1
	store float zeroinitializer, float* %2
		store float %near, float* %2
	store float zeroinitializer, float* %3
		store float %far, float* %3
	; m
	store [4 x {[0 x <16 x i8>], [4 x float]}] zeroinitializer, [4 x {[0 x <16 x i8>], [4 x float]}]* %4
		; tan_half_fovy
	store float zeroinitializer, float* %5
		%6 = load float, float* %0, align 4
	%7 = fmul float 0x3fe0000000000000, %6
	%8 = call float @.math-10.tan-2686136046096(float %7)
	store float %8, float* %5
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%9 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %4, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$151, i64 0, i32 0), i64 26}, i64 330, i64 4, i64 0, i64 4)
	%10 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %9, i64 0, i32 1, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$152, i64 0, i32 0), i64 26}, i64 330, i64 7, i64 0, i64 4)
	%11 = load float, float* %1, align 4
	%12 = load float, float* %5, align 4
	%13 = fmul float %11, %12
	%14 = fdiv float 0x3ff0000000000000, %13
	store float %14, float* %10
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%15 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %4, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$153, i64 0, i32 0), i64 26}, i64 331, i64 4, i64 1, i64 4)
	%16 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %15, i64 0, i32 1, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$154, i64 0, i32 0), i64 26}, i64 331, i64 7, i64 1, i64 4)
	%17 = load float, float* %5, align 4
	%18 = fdiv float 0x3ff0000000000000, %17
	store float %18, float* %16
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%19 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %4, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$155, i64 0, i32 0), i64 26}, i64 332, i64 4, i64 2, i64 4)
	%20 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %19, i64 0, i32 1, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$156, i64 0, i32 0), i64 26}, i64 332, i64 7, i64 2, i64 4)
	%21 = load float, float* %3, align 4
	%22 = load float, float* %2, align 4
	%23 = fadd float %21, %22
	%24 = fsub float 0x0000000000000000, %23
	%25 = load float, float* %3, align 4
	%26 = load float, float* %2, align 4
	%27 = fsub float %25, %26
	%28 = fdiv float %24, %27
	store float %28, float* %20
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%29 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %4, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$157, i64 0, i32 0), i64 26}, i64 333, i64 4, i64 2, i64 4)
	%30 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %29, i64 0, i32 1, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$158, i64 0, i32 0), i64 26}, i64 333, i64 7, i64 3, i64 4)
	store float 0xbff0000000000000, float* %30
	; AssignStmt
	; IndexExpr
	; IndexExpr
	%31 = getelementptr inbounds [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %4, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$159, i64 0, i32 0), i64 26}, i64 334, i64 4, i64 3, i64 4)
	%32 = getelementptr inbounds {[0 x <16 x i8>], [4 x float]}, {[0 x <16 x i8>], [4 x float]}* %31, i64 0, i32 1, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$15a, i64 0, i32 0), i64 26}, i64 334, i64 7, i64 2, i64 4)
	%33 = load float, float* %3, align 4
	%34 = fmul float 0xc000000000000000, %33
	%35 = load float, float* %2, align 4
	%36 = fmul float %34, %35
	%37 = load float, float* %3, align 4
	%38 = load float, float* %2, align 4
	%39 = fsub float %37, %38
	%40 = fdiv float %36, %39
	store float %40, float* %32
	; ReturnStmt
	%41 = load [4 x {[0 x <16 x i8>], [4 x float]}], [4 x {[0 x <16 x i8>], [4 x float]}]* %4, align 16
	ret [4 x {[0 x <16 x i8>], [4 x float]}] %41
}

define i1 @.imgui-12.Begin(%..string %name, i1* %open, i32 %flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i1*, align 8
	%2 = alloca i32, align 8
	%3 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	store i1* zeroinitializer, i1** %1
		store i1* %open, i1** %1
	store i32 zeroinitializer, i32* %2
		store i32 %flags, i32* %2
	; str
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%4 = load %..string, %..string* %0, align 8
	%5 = call i8* @.strings-9.new_c_string(%..string %4)
	store i8* %5, i8** %3
	; DeferStmt
	; ReturnStmt
	%6 = load i8*, i8** %3, align 8
	%7 = load i1*, i1** %1, align 8
	%8 = load i32, i32* %2, align 8
	%9 = call ccc i1 @igBegin(i8* %6, i1* %7, i32 %8)
	; defer
	; free
	%10 = load i8*, i8** %3, align 8
	%11 = bitcast i8* %10 to %..rawptr
	call void @.free_ptr(%..rawptr %11)
	ret i1 %9
}

define i1 @.imgui-12.BeginChild(%..string %str_id, %imgui-12.Vec2 %size, i1 %border, i32 %extra_flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %imgui-12.Vec2, align 4
	%2 = alloca i1, align 1
	%3 = alloca i32, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %str_id, %..string* %0
	store %imgui-12.Vec2 zeroinitializer, %imgui-12.Vec2* %1
		store %imgui-12.Vec2 %size, %imgui-12.Vec2* %1
	store i1 zeroinitializer, i1* %2
		store i1 %border, i1* %2
	store i32 zeroinitializer, i32* %3
		store i32 %extra_flags, i32* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %4
	; DeferStmt
	; ReturnStmt
	%8 = load i8*, i8** %4, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %5
	%9 = load %imgui-12.Vec2, %imgui-12.Vec2* %1, align 4
	%10 = bitcast %imgui-12.Vec2* %1 to i64*
	%11 = load i64, i64* %10, align 8
	store i64 %11, i64* %5
	%12 = load i64, i64* %5, align 8
	%13 = load i1, i1* %2, align 1
	%14 = load i32, i32* %3, align 8
	%15 = call ccc i1 @igBeginChild(i8* %8, i64 %12, i1 %13, i32 %14)
	; defer
	; free
	%16 = load i8*, i8** %4, align 8
	%17 = bitcast i8* %16 to %..rawptr
	call void @.free_ptr(%..rawptr %17)
	ret i1 %15
}

define void @.imgui-12.Text(%..string %fmt_, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [1024 x i8], align 1
	%3 = alloca %..string, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %fmt_, %..string* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; buf
	store [1024 x i8] zeroinitializer, [1024 x i8]* %2
		; s
	store %..string zeroinitializer, %..string* %3
		; SelectorExpr
	; SliceExpr
	%6 = load [1024 x i8], [1024 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$15b, i64 0, i32 0), i64 44}, i64 517, i64 25, i64 0, i64 0, i64 1024)
	%7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%15 = load %..string, %..string* %0, align 8
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %14, %..string %15, {%..any*, i64, i64} %16)
	store %..string %17, %..string* %3
	; assert
	%18 = load %..string, %..string* %3, align 8
	%19 = extractvalue %..string %18, 1
	%20 = icmp slt i64 %19, 1024
	%21 = icmp eq i1 %20, false
	br i1 %21, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$15c, i64 0, i32 0), i64 44}, i64 518, i64 12, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$15d, i64 0, i32 0), i64 17})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; c_str
	store i8* zeroinitializer, i8** %5
		; IndexExpr
	%22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$15e, i64 0, i32 0), i64 44}, i64 519, i64 19, i64 0, i64 1024)
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	store i8* %23, i8** %5
	%24 = load i8*, i8** %5, align 8
	call ccc void @igText(i8* %24)
	ret void
}

define i1 @.imgui-12.Button(%..string %label, %imgui-12.Vec2 %size) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %imgui-12.Vec2, align 4
	%2 = alloca i8*, align 8
	%3 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store %imgui-12.Vec2 zeroinitializer, %imgui-12.Vec2* %1
		store %imgui-12.Vec2 %size, %imgui-12.Vec2* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%4 = load %..string, %..string* %0, align 8
	%5 = call i8* @.strings-9.new_c_string(%..string %4)
	store i8* %5, i8** %2
	; DeferStmt
	; ReturnStmt
	%6 = load i8*, i8** %2, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %3
	%7 = load %imgui-12.Vec2, %imgui-12.Vec2* %1, align 4
	%8 = bitcast %imgui-12.Vec2* %1 to i64*
	%9 = load i64, i64* %8, align 8
	store i64 %9, i64* %3
	%10 = load i64, i64* %3, align 8
	%11 = call ccc i1 @igButton(i8* %6, i64 %10)
	; defer
	; free
	%12 = load i8*, i8** %2, align 8
	%13 = bitcast i8* %12 to %..rawptr
	call void @.free_ptr(%..rawptr %13)
	ret i1 %11
}

define void @.imgui-12.Image(%..rawptr %user_texture_id, %imgui-12.Vec2 %size, %imgui-12.Vec2 %uv0, %imgui-12.Vec2 %uv1, %imgui-12.Vec4 %tint_col, %imgui-12.Vec4 %border_col) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %imgui-12.Vec2, align 4
	%2 = alloca %imgui-12.Vec2, align 4
	%3 = alloca %imgui-12.Vec2, align 4
	%4 = alloca %imgui-12.Vec4, align 4
	%5 = alloca %imgui-12.Vec4, align 4
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [6 x %..any], align 8
	%14 = alloca i64, align 8
	%15 = alloca i64, align 8
	%16 = alloca i64, align 8
	%17 = alloca %..any, align 8
	%18 = alloca %..any, align 8
	%19 = alloca %..any, align 8
	%20 = alloca %..any, align 8
	%21 = alloca %..any, align 8
	%22 = alloca %..any, align 8
	%23 = alloca {%..any*, i64, i64}, align 8
	%24 = alloca [6 x %..any], align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %user_texture_id, %..rawptr* %0
	store %imgui-12.Vec2 zeroinitializer, %imgui-12.Vec2* %1
		store %imgui-12.Vec2 %size, %imgui-12.Vec2* %1
	store %imgui-12.Vec2 zeroinitializer, %imgui-12.Vec2* %2
		store %imgui-12.Vec2 %uv0, %imgui-12.Vec2* %2
	store %imgui-12.Vec2 zeroinitializer, %imgui-12.Vec2* %3
		store %imgui-12.Vec2 %uv1, %imgui-12.Vec2* %3
	store %imgui-12.Vec4 zeroinitializer, %imgui-12.Vec4* %4
		store %imgui-12.Vec4 %tint_col, %imgui-12.Vec4* %4
	store %imgui-12.Vec4 zeroinitializer, %imgui-12.Vec4* %5
		store %imgui-12.Vec4 %border_col, %imgui-12.Vec4* %5
	; SelectorExpr
	%28 = load %..rawptr, %..rawptr* %0, align 8
	%29 = load %imgui-12.Vec2, %imgui-12.Vec2* %1, align 4
	%30 = load %imgui-12.Vec2, %imgui-12.Vec2* %2, align 4
	%31 = load %imgui-12.Vec2, %imgui-12.Vec2* %3, align 4
	%32 = load %imgui-12.Vec4, %imgui-12.Vec4* %4, align 4
	%33 = load %imgui-12.Vec4, %imgui-12.Vec4* %5, align 4
	store %..any zeroinitializer, %..any* %6
	%34 = bitcast %..rawptr* %0 to %..rawptr
	%35 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	%36 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%39 = bitcast %imgui-12.Vec2* %1 to %..rawptr
	%40 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	%41 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%42 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %40, %Type_Info** %41
	store %..rawptr %39, %..rawptr* %42
	%43 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%44 = bitcast %imgui-12.Vec2* %2 to %..rawptr
	%45 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	%46 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%47 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %45, %Type_Info** %46
	store %..rawptr %44, %..rawptr* %47
	%48 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%49 = bitcast %imgui-12.Vec2* %3 to %..rawptr
	%50 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	%51 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%54 = bitcast %imgui-12.Vec4* %4 to %..rawptr
	%55 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%56 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%57 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %55, %Type_Info** %56
	store %..rawptr %54, %..rawptr* %57
	%58 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%59 = bitcast %imgui-12.Vec4* %5 to %..rawptr
	%60 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%61 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%62 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %60, %Type_Info** %61
	store %..rawptr %59, %..rawptr* %62
	%63 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [6 x %..any] zeroinitializer, [6 x %..any]* %13
	%64 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	store %..any %38, %..any* %64
	%65 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 1
	store %..any %43, %..any* %65
	%66 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 2
	store %..any %48, %..any* %66
	%67 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 3
	store %..any %53, %..any* %67
	%68 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 4
	store %..any %58, %..any* %68
	%69 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 5
	store %..any %63, %..any* %69
	%70 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	%71 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %70, %..any** %71
	%72 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 6, i64* %72
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 6, i64* %73
	%74 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%75 = call i64 @.fmt-4.println({%..any*, i64, i64} %74)
	; SelectorExpr
	%76 = load %..rawptr, %..rawptr* %0, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %14
	%77 = load %imgui-12.Vec2, %imgui-12.Vec2* %1, align 4
	%78 = bitcast %imgui-12.Vec2* %1 to i64*
	%79 = load i64, i64* %78, align 8
	store i64 %79, i64* %14
	%80 = load i64, i64* %14, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %15
	%81 = load %imgui-12.Vec2, %imgui-12.Vec2* %2, align 4
	%82 = bitcast %imgui-12.Vec2* %2 to i64*
	%83 = load i64, i64* %82, align 8
	store i64 %83, i64* %15
	%84 = load i64, i64* %15, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %16
	%85 = load %imgui-12.Vec2, %imgui-12.Vec2* %3, align 4
	%86 = bitcast %imgui-12.Vec2* %3 to i64*
	%87 = load i64, i64* %86, align 8
	store i64 %87, i64* %16
	%88 = load i64, i64* %16, align 8
	%89 = load %imgui-12.Vec4, %imgui-12.Vec4* %4, align 4
	%90 = load %imgui-12.Vec4, %imgui-12.Vec4* %5, align 4
	store %..any zeroinitializer, %..any* %17
	%91 = bitcast %..rawptr* %0 to %..rawptr
	%92 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	%93 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%94 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %92, %Type_Info** %93
	store %..rawptr %91, %..rawptr* %94
	%95 = load %..any, %..any* %17, align 8
	store %..any zeroinitializer, %..any* %18
	%96 = bitcast i64* %14 to %..rawptr
	%97 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%98 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%99 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %97, %Type_Info** %98
	store %..rawptr %96, %..rawptr* %99
	%100 = load %..any, %..any* %18, align 8
	store %..any zeroinitializer, %..any* %19
	%101 = bitcast i64* %15 to %..rawptr
	%102 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%103 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 0
	%104 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 1
	store %Type_Info* %102, %Type_Info** %103
	store %..rawptr %101, %..rawptr* %104
	%105 = load %..any, %..any* %19, align 8
	store %..any zeroinitializer, %..any* %20
	%106 = bitcast i64* %16 to %..rawptr
	%107 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%108 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%109 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %107, %Type_Info** %108
	store %..rawptr %106, %..rawptr* %109
	%110 = load %..any, %..any* %20, align 8
	store %..any zeroinitializer, %..any* %21
	%111 = bitcast %imgui-12.Vec4* %4 to %..rawptr
	%112 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%113 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 0
	%114 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 1
	store %Type_Info* %112, %Type_Info** %113
	store %..rawptr %111, %..rawptr* %114
	%115 = load %..any, %..any* %21, align 8
	store %..any zeroinitializer, %..any* %22
	%116 = bitcast %imgui-12.Vec4* %5 to %..rawptr
	%117 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%118 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 0
	%119 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 1
	store %Type_Info* %117, %Type_Info** %118
	store %..rawptr %116, %..rawptr* %119
	%120 = load %..any, %..any* %22, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %23
	store [6 x %..any] zeroinitializer, [6 x %..any]* %24
	%121 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 0
	store %..any %95, %..any* %121
	%122 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 1
	store %..any %100, %..any* %122
	%123 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 2
	store %..any %105, %..any* %123
	%124 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 3
	store %..any %110, %..any* %124
	%125 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 4
	store %..any %115, %..any* %125
	%126 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 5
	store %..any %120, %..any* %126
	%127 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 0
	%128 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 0
	store %..any* %127, %..any** %128
	%129 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 1
	store i64 6, i64* %129
	%130 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 2
	store i64 6, i64* %130
	%131 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %23, align 8
	%132 = call i64 @.fmt-4.println({%..any*, i64, i64} %131)
	%133 = load %..rawptr, %..rawptr* %0, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %25
	%134 = load %imgui-12.Vec2, %imgui-12.Vec2* %1, align 4
	%135 = bitcast %imgui-12.Vec2* %1 to i64*
	%136 = load i64, i64* %135, align 8
	store i64 %136, i64* %25
	%137 = load i64, i64* %25, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %26
	%138 = load %imgui-12.Vec2, %imgui-12.Vec2* %2, align 4
	%139 = bitcast %imgui-12.Vec2* %2 to i64*
	%140 = load i64, i64* %139, align 8
	store i64 %140, i64* %26
	%141 = load i64, i64* %26, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %27
	%142 = load %imgui-12.Vec2, %imgui-12.Vec2* %3, align 4
	%143 = bitcast %imgui-12.Vec2* %3 to i64*
	%144 = load i64, i64* %143, align 8
	store i64 %144, i64* %27
	%145 = load i64, i64* %27, align 8
	%146 = load %imgui-12.Vec4, %imgui-12.Vec4* %4, align 4
	%147 = load %imgui-12.Vec4, %imgui-12.Vec4* %5, align 4
	call ccc void @igImage(%..rawptr %133, i64 %137, i64 %141, i64 %145, %imgui-12.Vec4 %146, %imgui-12.Vec4 %147)
	ret void
}

define i1 @.imgui-12.Combo(%..string %label, i32* %current_item, {%..string*, i64, i64} %items, i32 %height_in_items) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i32*, align 8
	%2 = alloca {%..string*, i64, i64}, align 8
	%3 = alloca i32, align 4
	%4 = alloca i8*, align 8
	%5 = alloca {i8**, i64, i64}, align 8
	%6 = alloca {i8**, i64, i64}, align 8
	%7 = alloca %..string, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	%10 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i32* zeroinitializer, i32** %1
		store i32* %current_item, i32** %1
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %2
		store {%..string*, i64, i64} %items, {%..string*, i64, i64}* %2
	store i32 zeroinitializer, i32* %3
		store i32 %height_in_items, i32* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%11 = load %..string, %..string* %0, align 8
	%12 = call i8* @.strings-9.new_c_string(%..string %11)
	store i8* %12, i8** %4
	; DeferStmt
	; data
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %5
		; make
	%13 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %2, align 8
	%14 = extractvalue {%..string*, i64, i64} %13, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$15f, i64 0, i32 0), i64 44}, i64 561, i64 28, i64 0, i64 %14, i64 %14)
	%15 = mul i64 8, %14
	%16 = call %..rawptr @.alloc_align(i64 %15, i64 8)
	%17 = bitcast %..rawptr %16 to i8**
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %6
	%18 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %6, i64 0, i32 0
	store i8** %17, i8*** %18
	%19 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %6, i64 0, i32 1
	store i64 %14, i64* %19
	%20 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %6, i64 0, i32 2
	store i64 %14, i64* %20
	%21 = load {i8**, i64, i64}, {i8**, i64, i64}* %6, align 8
	store {i8**, i64, i64} %21, {i8**, i64, i64}* %5
	; DeferStmt
	; RangeStmt
	; item
	store %..string zeroinitializer, %..string* %7
		; idx
	store i64 zeroinitializer, i64* %8
		%22 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %2, align 8
	store i64 zeroinitializer, i64* %9
	%23 = extractvalue {%..string*, i64, i64} %22, 1
	store i64 %23, i64* %9
	store i64 zeroinitializer, i64* %10
	store i64 -1, i64* %10
	br label %for.index.loop-1

for.index.loop-1:
	%24 = load i64, i64* %10, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %10
	%26 = load i64, i64* %9, align 8
	%27 = icmp slt i64 %25, %26
	br i1 %27, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%28 = load i64, i64* %10, align 8
	%29 = extractvalue {%..string*, i64, i64} %22, 0
	%30 = getelementptr inbounds %..string, %..string* %29, i64 %28
	%31 = load %..string, %..string* %30, align 8
	store %..string %31, %..string* %7
	store i64 %28, i64* %8
	; AssignStmt
	; IndexExpr
	%32 = load {i8**, i64, i64}, {i8**, i64, i64}* %5, align 8
	%33 = extractvalue {i8**, i64, i64} %32, 0
	%34 = extractvalue {i8**, i64, i64} %32, 1
	%35 = load i64, i64* %8, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$160, i64 0, i32 0), i64 44}, i64 563, i64 14, i64 %35, i64 %34)
	%36 = getelementptr inbounds i8*, i8** %33, i64 %35
	; SelectorExpr
	%37 = load %..string, %..string* %7, align 8
	%38 = call i8* @.strings-9.new_c_string(%..string %37)
	store i8* %38, i8** %36
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%39 = load i8*, i8** %4, align 8
	%40 = load i32*, i32** %1, align 8
	; IndexExpr
	%41 = load {i8**, i64, i64}, {i8**, i64, i64}* %5, align 8
	%42 = extractvalue {i8**, i64, i64} %41, 0
	%43 = extractvalue {i8**, i64, i64} %41, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$161, i64 0, i32 0), i64 44}, i64 566, i64 46, i64 0, i64 %43)
	%44 = getelementptr inbounds i8*, i8** %42, i64 0
	%45 = getelementptr inbounds i8*, i8** %44, i64 0
	%46 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %2, align 8
	%47 = extractvalue {%..string*, i64, i64} %46, 1
	; cast - cast
	%48 = trunc i64 %47 to i32
	%49 = load i32, i32* %3, align 4
	%50 = call ccc i1 @igCombo(i8* %39, i32* %40, i8** %45, i32 %48, i32 %49)
	; defer
	; free
	%51 = load {i8**, i64, i64}, {i8**, i64, i64}* %5, align 8
	%52 = extractvalue {i8**, i64, i64} %51, 0
	%53 = bitcast i8** %52 to %..rawptr
	call void @.free_ptr(%..rawptr %53)
	; defer
	; free
	%54 = load i8*, i8** %4, align 8
	%55 = bitcast i8* %54 to %..rawptr
	call void @.free_ptr(%..rawptr %55)
	ret i1 %50
}

define i1 @.imgui-12.CollapsingHeader(%..string %label, i32 %flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i32, align 8
	%2 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i32 zeroinitializer, i32* %1
		store i32 %flags, i32* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @.strings-9.new_c_string(%..string %3)
	store i8* %4, i8** %2
	; DeferStmt
	; ReturnStmt
	%5 = load i8*, i8** %2, align 8
	%6 = load i32, i32* %1, align 8
	%7 = call ccc i1 @igCollapsingHeader(i8* %5, i32 %6)
	; defer
	; free
	%8 = load i8*, i8** %2, align 8
	%9 = bitcast i8* %8 to %..rawptr
	call void @.free_ptr(%..rawptr %9)
	ret i1 %7
}

define i1 @.imgui-12.BeginMenu(%..string %label, i1 %enabled) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i1, align 1
	%2 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i1 zeroinitializer, i1* %1
		store i1 %enabled, i1* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @.strings-9.new_c_string(%..string %3)
	store i8* %4, i8** %2
	; DeferStmt
	; ReturnStmt
	%5 = load i8*, i8** %2, align 8
	%6 = load i1, i1* %1, align 1
	%7 = call ccc i1 @igBeginMenu(i8* %5, i1 %6)
	; defer
	; free
	%8 = load i8*, i8** %2, align 8
	%9 = bitcast i8* %8 to %..rawptr
	call void @.free_ptr(%..rawptr %9)
	ret i1 %7
}

define i1 @.imgui-12.MenuItem(%..string %label, %..string %shortcut, i1 %selected, i1 %enabled) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i1, align 1
	%3 = alloca i1, align 1
	%4 = alloca i8*, align 8
	%5 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %shortcut, %..string* %1
	store i1 zeroinitializer, i1* %2
		store i1 %selected, i1* %2
	store i1 zeroinitializer, i1* %3
		store i1 %enabled, i1* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %4
	; DeferStmt
	; shrt
	store i8* zeroinitializer, i8** %5
		; SelectorExpr
	%8 = load %..string, %..string* %1, align 8
	%9 = call i8* @.strings-9.new_c_string(%..string %8)
	store i8* %9, i8** %5
	; DeferStmt
	; ReturnStmt
	%10 = load i8*, i8** %4, align 8
	%11 = load i8*, i8** %5, align 8
	%12 = load i1, i1* %2, align 1
	%13 = load i1, i1* %3, align 1
	%14 = call ccc i1 @igMenuItem(i8* %10, i8* %11, i1 %12, i1 %13)
	; defer
	; free
	%15 = load i8*, i8** %5, align 8
	%16 = bitcast i8* %15 to %..rawptr
	call void @.free_ptr(%..rawptr %16)
	; defer
	; free
	%17 = load i8*, i8** %4, align 8
	%18 = bitcast i8* %17 to %..rawptr
	call void @.free_ptr(%..rawptr %18)
	ret i1 %14
}

define i16 @.jaze_win32-13.HIWORD-2686136222000(i64 %wParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %wParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i32
	%3 = lshr i32 %2, 16
	%4 = and i32 %3, 65535
	; cast - cast
	%5 = trunc i32 %4 to i16
	ret i16 %5
}

define i16 @.jaze_win32-13.HIWORD-2686136222368(i64 %lParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %lParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i32
	%3 = lshr i32 %2, 16
	%4 = and i32 %3, 65535
	; cast - cast
	%5 = trunc i32 %4 to i16
	ret i16 %5
}

define i16 @.jaze_win32-13.LOWORD-2686136223104(i64 %lParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %lParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i16
	ret i16 %2
}

define void @.jaze_gl-14.PolygonMode(i32 %face, i32 %mode) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %face, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %mode, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._PolygonMode, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._PolygonMode, align 8
	%5 = load i32, i32* %0, align 8
	; cast - cast
	%6 = load i32, i32* %1, align 8
	; cast - cast
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.DebugMessageControl(i32 %source, i32 %type, i32 %severity, i32 %count, i32* %ids, i1 %enabled) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32*, align 8
	%5 = alloca i1, align 1
	store i32 zeroinitializer, i32* %0
		store i32 %source, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %type, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %severity, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %count, i32* %3
	store i32* zeroinitializer, i32** %4
		store i32* %ids, i32** %4
	store i1 zeroinitializer, i1* %5
		store i1 %enabled, i1* %5
	; IfStmt
	%6 = load void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @.jaze_gl-14._DebugMessageControl, align 8
	%7 = icmp ne void (i32, i32, i32, i32, i32*, i1)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.else-2

if.then-1:
	%8 = load void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @.jaze_gl-14._DebugMessageControl, align 8
	%9 = load i32, i32* %0, align 8
	; cast - cast
	%10 = load i32, i32* %1, align 8
	; cast - cast
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i32, i32* %3, align 4
	%13 = load i32*, i32** %4, align 8
	%14 = load i1, i1* %5, align 1
	call ccc void %8(i32 %9, i32 %10, i32 %11, i32 %12, i32* %13, i1 %14)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.DebugMessageCallback(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %callback, %..rawptr %userParam) {
decls-0:
	%0 = alloca void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, align 8
	%1 = alloca %..rawptr, align 8
	store void (i32, i32, i32, i32, i32, i8*, %..rawptr)* zeroinitializer, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0
		store void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %callback, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %userParam, %..rawptr* %1
	; IfStmt
	%2 = load void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @.jaze_gl-14._DebugMessageCallback, align 8
	%3 = icmp ne void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @.jaze_gl-14._DebugMessageCallback, align 8
	%5 = load void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0, align 8
	%6 = load %..rawptr, %..rawptr* %1, align 8
	call ccc void %4(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %5, %..rawptr %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.Clear(i32 %mask) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mask, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glClear(i32 %1)
	ret void
}

define void @.jaze_gl-14.BufferData(i32 %target, i32 %size, %..rawptr %data, i32 %usage) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca %..rawptr, align 8
	%3 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %size, i32* %1
	store %..rawptr zeroinitializer, %..rawptr* %2
		store %..rawptr %data, %..rawptr* %2
	store i32 zeroinitializer, i32* %3
		store i32 %usage, i32* %3
	; IfStmt
	%4 = load void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @.jaze_gl-14._BufferData, align 8
	%5 = icmp ne void (i32, i32, %..rawptr, i32)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	%6 = load void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @.jaze_gl-14._BufferData, align 8
	%7 = load i32, i32* %0, align 8
	; cast - cast
	%8 = load i32, i32* %1, align 4
	%9 = load %..rawptr, %..rawptr* %2, align 8
	%10 = load i32, i32* %3, align 8
	; cast - cast
	call ccc void %6(i32 %7, i32 %8, %..rawptr %9, i32 %10)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GenVBO() {
decls-0:
	%0 = alloca i32, align 4
	; bo
	store i32 zeroinitializer, i32* %0
		%1 = call i32 @.jaze_gl-14.GenBuffer()
	store i32 %1, i32* %0
	; ReturnStmt
	%2 = load i32, i32* %0, align 4
	; cast - cast
	ret i32 %2
}

define i32 @.jaze_gl-14.GenEBO() {
decls-0:
	%0 = alloca i32, align 4
	; bo
	store i32 zeroinitializer, i32* %0
		%1 = call i32 @.jaze_gl-14.GenBuffer()
	store i32 %1, i32* %0
	; ReturnStmt
	%2 = load i32, i32* %0, align 4
	; cast - cast
	ret i32 %2
}

define i32 @.jaze_gl-14.GenBuffer() {
decls-0:
	%0 = alloca i32, align 4
	; IfStmt
	%1 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-14._GenBuffers, align 8
	%2 = icmp ne void (i32, i32*)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %0
		%3 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-14._GenBuffers, align 8
	%4 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%5 = bitcast i32* %4 to i32*
	call ccc void %3(i32 1, i32* %5)
	; ReturnStmt
	%6 = load i32, i32* %0, align 4
	ret i32 %6

if.else-2:
	; ReturnStmt
	ret i32 0

if.done-3:
	unreachable
}

define void @.jaze_gl-14.BindBuffer-2686136247568(i32 %target, i32 %buffer) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %buffer, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._BindBuffer, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._BindBuffer, align 8
	%5 = load i32, i32* %0, align 8
	; cast - cast
	%6 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.BindBuffer-2686136247936(i32 %vbo) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %vbo, i32* %0
	%1 = load i32, i32* %0, align 4
	; cast - cast
	call void @.jaze_gl-14.BindBuffer-2686136247568(i32 34962, i32 %1)
	ret void
}

define void @.jaze_gl-14.BindBuffer-2686136248304(i32 %ebo) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %ebo, i32* %0
	%1 = load i32, i32* %0, align 4
	; cast - cast
	call void @.jaze_gl-14.BindBuffer-2686136247568(i32 34963, i32 %1)
	ret void
}

define void @.jaze_gl-14.BindFragDataLocation(%jaze_gl-14.Program %program, i32 %colorNumber, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca i32, align 4
	%2 = alloca %..string, align 8
	%3 = alloca i8*, align 8
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store i32 zeroinitializer, i32* %1
		store i32 %colorNumber, i32* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; IfStmt
	%4 = load void (i32, i32, i8*)*, void (i32, i32, i8*)** @.jaze_gl-14._BindFragDataLocation, align 8
	%5 = icmp ne void (i32, i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; c
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%6 = load %..string, %..string* %2, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %3
	; DeferStmt
	%8 = load void (i32, i32, i8*)*, void (i32, i32, i8*)** @.jaze_gl-14._BindFragDataLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 2
	%10 = load i32, i32* %9, align 4
	%11 = load i32, i32* %1, align 4
	%12 = load i8*, i8** %3, align 8
	call ccc void %8(i32 %10, i32 %11, i8* %12)
	; defer
	; free
	%13 = load %..string, %..string* %2, align 8
	%14 = extractvalue %..string %13, 0
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GenVertexArray() {
decls-0:
	%0 = alloca i32, align 4
	; IfStmt
	%1 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-14._GenVertexArrays, align 8
	%2 = icmp ne void (i32, i32*)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %0
		%3 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-14._GenVertexArrays, align 8
	%4 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%5 = bitcast i32* %4 to i32*
	call ccc void %3(i32 1, i32* %5)
	; ReturnStmt
	%6 = load i32, i32* %0, align 4
	ret i32 %6

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret i32 0
}

define void @.jaze_gl-14.EnableVertexAttribArray(i32 %index) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %..string, align 8
	%2 = alloca %..any, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	%6 = alloca [2 x %..any], align 8
	store i32 zeroinitializer, i32* %0
		store i32 %index, i32* %0
	; IfStmt
	%7 = load void (i32)*, void (i32)** @.jaze_gl-14._EnableVertexAttribArray, align 8
	%8 = icmp ne void (i32)* %7, zeroinitializer
	br i1 %8, label %if.then-1, label %if.else-2

if.then-1:
	%9 = load void (i32)*, void (i32)** @.jaze_gl-14._EnableVertexAttribArray, align 8
	%10 = load i32, i32* %0, align 4
	call ccc void %9(i32 %10)
	br label %if.done-3

if.else-2:
	; SelectorExpr
	store %..string zeroinitializer, %..string* %1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$162, i64 0, i32 0), i64 23}, %..string* %1
	%11 = load %..string, %..string* %1, align 8
	store %..any zeroinitializer, %..any* %2
	%12 = bitcast %..string* %1 to %..rawptr
	%13 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%14 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%15 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	store %Type_Info* %13, %Type_Info** %14
	store %..rawptr %12, %..rawptr* %15
	%16 = load %..any, %..any* %2, align 8
	store %..string zeroinitializer, %..string* %3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$163, i64 0, i32 0), i64 7}, %..string* %3
	%17 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%18 = bitcast %..string* %3 to %..rawptr
	%19 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%20 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%21 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %19, %Type_Info** %20
	store %..rawptr %18, %..rawptr* %21
	%22 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	store [2 x %..any] zeroinitializer, [2 x %..any]* %6
	%23 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	store %..any %16, %..any* %23
	%24 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 1
	store %..any %22, %..any* %24
	%25 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	%26 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 0
	store %..any* %25, %..any** %26
	%27 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 1
	store i64 2, i64* %27
	%28 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 2
	store i64 2, i64* %28
	%29 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	%30 = call i64 @.fmt-4.println({%..any*, i64, i64} %29)
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.VertexAttribPointer(i32 %index, i32 %size, i32 %type, i1 %normalized, i32 %stride, %..rawptr %pointer) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca i1, align 1
	%4 = alloca i32, align 4
	%5 = alloca %..rawptr, align 8
	%6 = alloca %..string, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..string, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [2 x %..any], align 8
	store i32 zeroinitializer, i32* %0
		store i32 %index, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %size, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %type, i32* %2
	store i1 zeroinitializer, i1* %3
		store i1 %normalized, i1* %3
	store i32 zeroinitializer, i32* %4
		store i32 %stride, i32* %4
	store %..rawptr zeroinitializer, %..rawptr* %5
		store %..rawptr %pointer, %..rawptr* %5
	; IfStmt
	%12 = load void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @.jaze_gl-14._VertexAttribPointer, align 8
	%13 = icmp ne void (i32, i32, i32, i1, i32, %..rawptr)* %12, zeroinitializer
	br i1 %13, label %if.then-1, label %if.else-2

if.then-1:
	%14 = load void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @.jaze_gl-14._VertexAttribPointer, align 8
	%15 = load i32, i32* %0, align 4
	%16 = load i32, i32* %1, align 4
	%17 = load i32, i32* %2, align 8
	; cast - cast
	%18 = load i1, i1* %3, align 1
	%19 = load i32, i32* %4, align 4
	%20 = load %..rawptr, %..rawptr* %5, align 8
	call ccc void %14(i32 %15, i32 %16, i32 %17, i1 %18, i32 %19, %..rawptr %20)
	br label %if.done-3

if.else-2:
	; SelectorExpr
	store %..string zeroinitializer, %..string* %6
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$164, i64 0, i32 0), i64 19}, %..string* %6
	%21 = load %..string, %..string* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%22 = bitcast %..string* %6 to %..rawptr
	%23 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%24 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%25 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %23, %Type_Info** %24
	store %..rawptr %22, %..rawptr* %25
	%26 = load %..any, %..any* %7, align 8
	store %..string zeroinitializer, %..string* %8
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$165, i64 0, i32 0), i64 7}, %..string* %8
	%27 = load %..string, %..string* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%28 = bitcast %..string* %8 to %..rawptr
	%29 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%30 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [2 x %..any] zeroinitializer, [2 x %..any]* %11
	%33 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 0
	store %..any %26, %..any* %33
	%34 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %34
	%35 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 0
	%36 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %35, %..any** %36
	%37 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 2, i64* %37
	%38 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 2, i64* %38
	%39 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%40 = call i64 @.fmt-4.println({%..any*, i64, i64} %39)
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.BindVertexArray(i32 %buffer) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %buffer, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-14._BindVertexArray, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-14._BindVertexArray, align 8
	%4 = load i32, i32* %0, align 4
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.Uniform-2686136250880(i32 %loc, i32 %v0) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %loc, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %v0, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._Uniform1i, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._Uniform1i, align 8
	%5 = load i32, i32* %0, align 4
	%6 = load i32, i32* %1, align 4
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %program, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca i32, align 4
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; IfStmt
	%4 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-14._GetUniformLocation, align 8
	%5 = icmp ne i32 (i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %2
	; DeferStmt
	; res
	store i32 zeroinitializer, i32* %3
		%8 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-14._GetUniformLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 2
	%10 = load i32, i32* %9, align 4
	; cast - cast
	%11 = load i8*, i8** %2, align 8
	%12 = call ccc i32 %8(i32 %10, i8* %11)
	store i32 %12, i32* %3
	; ReturnStmt
	%13 = load i32, i32* %3, align 4
	; defer
	; free
	%14 = load i8*, i8** %2, align 8
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	ret i32 %13

if.else-2:
	; ReturnStmt
	unreachable
}

define i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %program, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca i32, align 4
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; IfStmt
	%4 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-14._GetAttribLocation, align 8
	%5 = icmp ne i32 (i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %2
	; DeferStmt
	; res
	store i32 zeroinitializer, i32* %3
		%8 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-14._GetAttribLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 2
	%10 = load i32, i32* %9, align 4
	; cast - cast
	%11 = load i8*, i8** %2, align 8
	%12 = call ccc i32 %8(i32 %10, i8* %11)
	store i32 %12, i32* %3
	; ReturnStmt
	%13 = load i32, i32* %3, align 4
	; defer
	; free
	%14 = load i8*, i8** %2, align 8
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	ret i32 %13

if.else-2:
	; ReturnStmt
	unreachable
}

define void @.jaze_gl-14.DrawElements(i32 %mode, i32 %count, i32 %type, %..rawptr %indices) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mode, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %count, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %type, i32* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %indices, %..rawptr* %3
	; IfStmt
	%4 = load void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @.jaze_gl-14._DrawElements, align 8
	%5 = icmp ne void (i32, i32, i32, %..rawptr)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	%6 = load void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @.jaze_gl-14._DrawElements, align 8
	%7 = load i32, i32* %0, align 8
	; cast - cast
	%8 = load i32, i32* %1, align 4
	%9 = load i32, i32* %2, align 8
	; cast - cast
	%10 = load %..rawptr, %..rawptr* %3, align 8
	call ccc void %6(i32 %7, i32 %8, i32 %9, %..rawptr %10)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.UseProgram(%jaze_gl-14.Program %program) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-14._UseProgram, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-14._UseProgram, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 2
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.LinkProgram(%jaze_gl-14.Program %program) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-14._LinkProgram, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-14._LinkProgram, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 2
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.TexImage2D(i32 %target, i32 %lod, i32 %internalFormat, i32 %width, i32 %height, i32 %format, i32 %type_, %..rawptr %data) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca i32, align 8
	%6 = alloca i32, align 8
	%7 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %lod, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %internalFormat, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %width, i32* %3
	store i32 zeroinitializer, i32* %4
		store i32 %height, i32* %4
	store i32 zeroinitializer, i32* %5
		store i32 %format, i32* %5
	store i32 zeroinitializer, i32* %6
		store i32 %type_, i32* %6
	store %..rawptr zeroinitializer, %..rawptr* %7
		store %..rawptr %data, %..rawptr* %7
	%8 = load i32, i32* %0, align 8
	; cast - cast
	%9 = bitcast i32 %8 to i32
	%10 = load i32, i32* %1, align 4
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i32, i32* %3, align 4
	%13 = load i32, i32* %4, align 4
	%14 = load i32, i32* %5, align 8
	; cast - cast
	%15 = load i32, i32* %6, align 8
	; cast - cast
	%16 = load %..rawptr, %..rawptr* %7, align 8
	call ccc void @glTexImage2D(i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 0, i32 %14, i32 %15, %..rawptr %16)
	ret void
}

define void @.jaze_gl-14.TexParameteri(i32 %target, i32 %pname, i32 %param) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %pname, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %param, i32* %2
	%3 = load i32, i32* %0, align 8
	; cast - cast
	%4 = bitcast i32 %3 to i32
	%5 = load i32, i32* %1, align 8
	; cast - cast
	%6 = load i32, i32* %2, align 8
	; cast - cast
	call ccc void @glTexParameteri(i32 %4, i32 %5, i32 %6)
	ret void
}

define void @.jaze_gl-14.BindTexture(i32 %target, i32 %texture) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %texture, i32* %1
	%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = bitcast i32 %2 to i32
	%4 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void @glBindTexture(i32 %3, i32 %4)
	ret void
}

define void @.jaze_gl-14.ActiveTexture(i32 %texture) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %texture, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-14._ActiveTexture, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-14._ActiveTexture, align 8
	%4 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GenTexture() {
decls-0:
	%0 = alloca {i32*, i64, i64}, align 8
	; res
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %0
		%1 = call {i32*, i64, i64} @.jaze_gl-14.GenTextures(i32 1)
	store {i32*, i64, i64} %1, {i32*, i64, i64}* %0
	; ReturnStmt
	; IndexExpr
	%2 = load {i32*, i64, i64}, {i32*, i64, i64}* %0, align 8
	%3 = extractvalue {i32*, i64, i64} %2, 0
	%4 = extractvalue {i32*, i64, i64} %2, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$166, i64 0, i32 0), i64 34}, i64 423, i64 16, i64 0, i64 %4)
	%5 = getelementptr inbounds i32, i32* %3, i64 0
	%6 = load i32, i32* %5, align 4
	ret i32 %6
}

define {i32*, i64, i64} @.jaze_gl-14.GenTextures(i32 %count) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca {i32*, i64, i64}, align 8
	%2 = alloca {i32*, i64, i64}, align 8
	%3 = alloca i32, align 4
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca {i32*, i64, i64}, align 8
	%7 = alloca [1 x i32], align 4
	store i32 zeroinitializer, i32* %0
		store i32 %count, i32* %0
	; res
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %1
		; make
	%8 = load i32, i32* %0, align 4
	%9 = sext i32 %8 to i64
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$167, i64 0, i32 0), i64 34}, i64 427, i64 28, i64 0, i64 %9, i64 %9)
	%10 = mul i64 4, %9
	%11 = call %..rawptr @.alloc_align(i64 %10, i64 4)
	%12 = bitcast %..rawptr %11 to i32*
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %2
	%13 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %2, i64 0, i32 0
	store i32* %12, i32** %13
	%14 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %2, i64 0, i32 1
	store i64 %9, i64* %14
	%15 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %2, i64 0, i32 2
	store i64 %9, i64* %15
	%16 = load {i32*, i64, i64}, {i32*, i64, i64}* %2, align 8
	store {i32*, i64, i64} %16, {i32*, i64, i64}* %1
	%17 = load i32, i32* %0, align 4
	; IndexExpr
	%18 = load {i32*, i64, i64}, {i32*, i64, i64}* %1, align 8
	%19 = extractvalue {i32*, i64, i64} %18, 0
	%20 = extractvalue {i32*, i64, i64} %18, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$168, i64 0, i32 0), i64 34}, i64 428, i64 40, i64 0, i64 %20)
	%21 = getelementptr inbounds i32, i32* %19, i64 0
	%22 = getelementptr inbounds i32, i32* %21, i64 0
	; cast - cast
	%23 = bitcast i32* %22 to i32*
	call ccc void @glGenTextures(i32 %17, i32* %23)
	; RangeStmt
	; id
	store i32 zeroinitializer, i32* %3
		%24 = load {i32*, i64, i64}, {i32*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %4
	%25 = extractvalue {i32*, i64, i64} %24, 1
	store i64 %25, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 -1, i64* %5
	br label %for.index.loop-1

for.index.loop-1:
	%26 = load i64, i64* %5, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %5
	%28 = load i64, i64* %4, align 8
	%29 = icmp slt i64 %27, %28
	br i1 %29, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%30 = load i64, i64* %5, align 8
	%31 = extractvalue {i32*, i64, i64} %24, 0
	%32 = getelementptr inbounds i32, i32* %31, i64 %30
	%33 = load i32, i32* %32, align 4
	store i32 %33, i32* %3
	; append
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 1
	%35 = bitcast {i32*, i64, i64,%Allocator}* %34 to %..rawptr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 1
	%37 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %36, align 8
	%38 = load i32, i32* %3, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %6
	store [1 x i32] zeroinitializer, [1 x i32]* %7
	%39 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	store i32 %38, i32* %39
	%40 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	%41 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 0
	store i32* %40, i32** %41
	%42 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %42
	%43 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %43
	%44 = load {i32*, i64, i64}, {i32*, i64, i64}* %6, align 8
	%45 = extractvalue {i32*, i64, i64} %44, 0
	%46 = extractvalue {i32*, i64, i64} %44, 1
	%47 = bitcast i32* %45 to %..rawptr
	%48 = call i64 @.__dynamic_array_append(%..rawptr %35, i64 4, i64 4, %..rawptr %47, i64 %46)
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%49 = load {i32*, i64, i64}, {i32*, i64, i64}* %1, align 8
	ret {i32*, i64, i64} %49
}

define void @.jaze_gl-14.BlendEquation(i32 %mode) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mode, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-14._BlendEquation, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-14._BlendEquation, align 8
	%4 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.BlendFunc(i32 %sfactor, i32 %dfactor) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %sfactor, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %dfactor, i32* %1
	%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = load i32, i32* %1, align 8
	; cast - cast
	call ccc void @glBlendFunc(i32 %2, i32 %3)
	ret void
}

define i32 @.jaze_gl-14.GetShaderValue(i32 %shader, i32 %name) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 8
	%2 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %shader, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %name, i32* %1
	; IfStmt
	%3 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** @.jaze_gl-14._GetShaderiv, align 8
	%4 = icmp ne void (i32, i32, i32*)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %2
		%5 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** @.jaze_gl-14._GetShaderiv, align 8
	%6 = load i32, i32* %0, align 4
	; cast - cast
	%7 = load i32, i32* %1, align 8
	; cast - cast
	%8 = getelementptr inbounds i32, i32* %2, i64 0
	call ccc void %5(i32 %6, i32 %7, i32* %8)
	; ReturnStmt
	%9 = load i32, i32* %2, align 4
	ret i32 %9

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret i32 0
}

define %..string @.jaze_gl-14.GetString-2686136260080(i32 %name, i32 %index) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i8*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %index, i32* %1
	; IfStmt
	%3 = load i8* (i32, i32)*, i8* (i32, i32)** @.jaze_gl-14._GetStringi, align 8
	%4 = icmp ne i8* (i32, i32)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i8* zeroinitializer, i8** %2
		%5 = load i8* (i32, i32)*, i8* (i32, i32)** @.jaze_gl-14._GetStringi, align 8
	%6 = load i32, i32* %0, align 8
	; cast - cast
	%7 = load i32, i32* %1, align 4
	%8 = call ccc i8* %5(i32 %6, i32 %7)
	store i8* %8, i8** %2
	; ReturnStmt
	; SelectorExpr
	%9 = load i8*, i8** %2, align 8
	%10 = call %..string @.strings-9.to_odin_string(i8* %9)
	ret %..string %10

if.else-2:
	; ReturnStmt
	ret %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$169, i64 0, i32 0), i64 3}

if.done-3:
	unreachable
}

define %..string @.jaze_gl-14.GetString-2686136260448(i32 %name) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i8*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	; res
	store i8* zeroinitializer, i8** %1
		%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = call ccc i8* @glGetString(i32 %2)
	store i8* %3, i8** %1
	; ReturnStmt
	; SelectorExpr
	%4 = load i8*, i8** %1, align 8
	%5 = call %..string @.strings-9.to_odin_string(i8* %4)
	ret %..string %5
}

define i32 @.jaze_gl-14.GetInteger(i32 %name) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	; res
	store i32 zeroinitializer, i32* %1
		%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = getelementptr inbounds i32, i32* %1, i64 0
	call ccc void @glGetIntegerv(i32 %2, i32* %3)
	; ReturnStmt
	%4 = load i32, i32* %1, align 4
	ret i32 %4
}

define void @.jaze_gl-14.Enable(i32 %cap) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %cap, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glEnable(i32 %1)
	ret void
}

define void @.jaze_gl-14.Disable(i32 %cap) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %cap, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glDisable(i32 %1)
	ret void
}

define void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %program, i32 %shader) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca i32, align 4
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store i32 zeroinitializer, i32* %1
		store i32 %shader, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._AttachShader, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._AttachShader, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 2
	%6 = load i32, i32* %5, align 4
	%7 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void %4(i32 %6, i32 %7)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define %jaze_gl-14.Program @.jaze_gl-14.CreateProgram() {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_gl-14.Program, align 8
	; IfStmt
	%2 = load i32 ()*, i32 ()** @.jaze_gl-14._CreateProgram, align 8
	%3 = icmp ne i32 ()* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	; id
	store i32 zeroinitializer, i32* %0
		%4 = load i32 ()*, i32 ()** @.jaze_gl-14._CreateProgram, align 8
	%5 = call ccc i32 %4()
	store i32 %5, i32* %0
	; res
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %1
		; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %1, i64 0, i32 2
	%7 = load i32, i32* %0, align 4
	store i32 %7, i32* %6
	; ReturnStmt
	%8 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %1, align 8
	ret %jaze_gl-14.Program %8

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret %jaze_gl-14.Program zeroinitializer
}

define void @.jaze_gl-14.ShaderSource-2686136262656(i32 %obj, %..string %str) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %..string, align 8
	%2 = alloca [1 x %..string], align 8
	%3 = alloca {%..string*, i64, i64}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %obj, i32* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %str, %..string* %1
	; array
	store [1 x %..string] zeroinitializer, [1 x %..string]* %2
		; AssignStmt
	; IndexExpr
	%4 = getelementptr inbounds [1 x %..string], [1 x %..string]* %2, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$16a, i64 0, i32 0), i64 34}, i64 518, i64 11, i64 0, i64 1)
	%5 = load %..string, %..string* %1, align 8
	store %..string %5, %..string* %4
	%6 = load i32, i32* %0, align 4
	; SliceExpr
	%7 = load [1 x %..string], [1 x %..string]* %2, align 8
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$16b, i64 0, i32 0), i64 34}, i64 519, i64 28, i64 0, i64 1, i64 1)
	%8 = getelementptr inbounds [1 x %..string], [1 x %..string]* %2, i64 0, i32 0
	%9 = getelementptr inbounds %..string, %..string* %8, i64 0
	%10 = sub i64 1, 0
	%11 = sub i64 1, 0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %3
	%12 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 0
	store %..string* %9, %..string** %12
	%13 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %13
	%14 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 2
	store i64 %11, i64* %14
	%15 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %3, align 8
	call void @.jaze_gl-14.ShaderSource-2686136263024(i32 %6, {%..string*, i64, i64} %15)
	ret void
}

define void @.jaze_gl-14.ShaderSource-2686136263024(i32 %obj, {%..string*, i64, i64} %strs) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca {%..string*, i64, i64}, align 8
	%2 = alloca {i8**, i64, i64}, align 8
	%3 = alloca {i8**, i64, i64}, align 8
	%4 = alloca {i32*, i64, i64}, align 8
	%5 = alloca {i32*, i64, i64}, align 8
	%6 = alloca %..string, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	%10 = alloca i8*, align 8
	%11 = alloca {i8*, i64, i64}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %obj, i32* %0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %1
		store {%..string*, i64, i64} %strs, {%..string*, i64, i64}* %1
	; IfStmt
	%12 = load void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @.jaze_gl-14._ShaderSource, align 8
	%13 = icmp ne void (i32, i32, i8**, i32*)* %12, zeroinitializer
	br i1 %13, label %if.then-1, label %if.else-5

if.then-1:
	; newStrs
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %2
		; make
	%14 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%15 = extractvalue {%..string*, i64, i64} %14, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$16c, i64 0, i32 0), i64 34}, i64 524, i64 34, i64 0, i64 %15, i64 %15)
	%16 = mul i64 8, %15
	%17 = call %..rawptr @.alloc_align(i64 %16, i64 8)
	%18 = bitcast %..rawptr %17 to i8**
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %3
	%19 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 0
	store i8** %18, i8*** %19
	%20 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 1
	store i64 %15, i64* %20
	%21 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 2
	store i64 %15, i64* %21
	%22 = load {i8**, i64, i64}, {i8**, i64, i64}* %3, align 8
	store {i8**, i64, i64} %22, {i8**, i64, i64}* %2
	; DeferStmt
	; lengths
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %4
		; make
	%23 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%24 = extractvalue {%..string*, i64, i64} %23, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$16d, i64 0, i32 0), i64 34}, i64 525, i64 32, i64 0, i64 %24, i64 %24)
	%25 = mul i64 4, %24
	%26 = call %..rawptr @.alloc_align(i64 %25, i64 4)
	%27 = bitcast %..rawptr %26 to i32*
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %5
	%28 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 0
	store i32* %27, i32** %28
	%29 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 1
	store i64 %24, i64* %29
	%30 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 2
	store i64 %24, i64* %30
	%31 = load {i32*, i64, i64}, {i32*, i64, i64}* %5, align 8
	store {i32*, i64, i64} %31, {i32*, i64, i64}* %4
	; DeferStmt
	; RangeStmt
	; s
	store %..string zeroinitializer, %..string* %6
		; i
	store i64 zeroinitializer, i64* %7
		%32 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %8
	%33 = extractvalue {%..string*, i64, i64} %32, 1
	store i64 %33, i64* %8
	store i64 zeroinitializer, i64* %9
	store i64 -1, i64* %9
	br label %for.index.loop-2

for.index.loop-2:
	%34 = load i64, i64* %9, align 8
	%35 = add i64 %34, 1
	store i64 %35, i64* %9
	%36 = load i64, i64* %8, align 8
	%37 = icmp slt i64 %35, %36
	br i1 %37, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%38 = load i64, i64* %9, align 8
	%39 = extractvalue {%..string*, i64, i64} %32, 0
	%40 = getelementptr inbounds %..string, %..string* %39, i64 %38
	%41 = load %..string, %..string* %40, align 8
	store %..string %41, %..string* %6
	store i64 %38, i64* %7
	; AssignStmt
	; IndexExpr
	%42 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%43 = extractvalue {i8**, i64, i64} %42, 0
	%44 = extractvalue {i8**, i64, i64} %42, 1
	%45 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$16e, i64 0, i32 0), i64 34}, i64 527, i64 21, i64 %45, i64 %44)
	%46 = getelementptr inbounds i8*, i8** %43, i64 %45
	; IndexExpr
	%47 = load %..string, %..string* %6, align 8
	; cast - cast
	%48 = extractvalue %..string %47, 0
	store i8* zeroinitializer, i8** %10
	store i8* %48, i8** %10
	%49 = extractvalue %..string %47, 1
	%50 = sub i64 %49, 0
	%51 = sub i64 %49, 0
	%52 = load i8*, i8** %10, align 8
	%53 = getelementptr inbounds i8, i8* %52, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %11
	%54 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 0
	store i8* %53, i8** %54
	%55 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 1
	store i64 %50, i64* %55
	%56 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 2
	store i64 %51, i64* %56
	%57 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	%58 = extractvalue {i8*, i64, i64} %57, 0
	%59 = extractvalue {i8*, i64, i64} %57, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$16f, i64 0, i32 0), i64 34}, i64 527, i64 43, i64 0, i64 %59)
	%60 = getelementptr inbounds i8, i8* %58, i64 0
	%61 = getelementptr inbounds i8, i8* %60, i64 0
	store i8* %61, i8** %46
	; AssignStmt
	; IndexExpr
	%62 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%63 = extractvalue {i32*, i64, i64} %62, 0
	%64 = extractvalue {i32*, i64, i64} %62, 1
	%65 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$170, i64 0, i32 0), i64 34}, i64 528, i64 21, i64 %65, i64 %64)
	%66 = getelementptr inbounds i32, i32* %63, i64 %65
	%67 = load %..string, %..string* %6, align 8
	%68 = extractvalue %..string %67, 1
	; cast - cast
	%69 = trunc i64 %68 to i32
	store i32 %69, i32* %66
	br label %for.index.loop-2

for.index.done-4:
	%70 = load void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @.jaze_gl-14._ShaderSource, align 8
	%71 = load i32, i32* %0, align 4
	; cast - cast
	%72 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%73 = extractvalue {%..string*, i64, i64} %72, 1
	; cast - cast
	%74 = trunc i64 %73 to i32
	; IndexExpr
	%75 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%76 = extractvalue {i8**, i64, i64} %75, 0
	%77 = extractvalue {i8**, i64, i64} %75, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$171, i64 0, i32 0), i64 34}, i64 530, i64 66, i64 0, i64 %77)
	%78 = getelementptr inbounds i8*, i8** %76, i64 0
	%79 = getelementptr inbounds i8*, i8** %78, i64 0
	; IndexExpr
	%80 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%81 = extractvalue {i32*, i64, i64} %80, 0
	%82 = extractvalue {i32*, i64, i64} %80, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$172, i64 0, i32 0), i64 34}, i64 530, i64 79, i64 0, i64 %82)
	%83 = getelementptr inbounds i32, i32* %81, i64 0
	%84 = getelementptr inbounds i32, i32* %83, i64 0
	call ccc void %70(i32 %71, i32 %74, i8** %79, i32* %84)
	; defer
	; free
	%85 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%86 = extractvalue {i32*, i64, i64} %85, 0
	%87 = bitcast i32* %86 to %..rawptr
	call void @.free_ptr(%..rawptr %87)
	; defer
	; free
	%88 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%89 = extractvalue {i8**, i64, i64} %88, 0
	%90 = bitcast i8** %89 to %..rawptr
	call void @.free_ptr(%..rawptr %90)
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	ret void
}

define i32 @.jaze_gl-14.CreateShader(i32 %type) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %type, i32* %0
	; IfStmt
	%2 = load i32 (i32)*, i32 (i32)** @.jaze_gl-14._CreateShader, align 8
	%3 = icmp ne i32 (i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %1
		%4 = load i32 (i32)*, i32 (i32)** @.jaze_gl-14._CreateShader, align 8
	%5 = load i32, i32* %0, align 8
	; cast - cast
	%6 = call ccc i32 %4(i32 %5)
	store i32 %6, i32* %1
	; ReturnStmt
	%7 = load i32, i32* %1, align 4
	; cast - cast
	ret i32 %7

if.else-2:
	; ReturnStmt
	ret i32 zeroinitializer

if.done-3:
	unreachable
}

define void @.jaze_gl-14.CompileShader(i32 %obj) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %obj, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-14._CompileShader, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-14._CompileShader, align 8
	%4 = load i32, i32* %0, align 4
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.GetInfo(%jaze_gl-14.OpenGLVars_t* %vars) {
decls-0:
	%0 = alloca %jaze_gl-14.OpenGLVars_t*, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 4
	%3 = alloca i64, align 8
	%4 = alloca %..string, align 8
	%5 = alloca {%..string*, i64, i64}, align 8
	%6 = alloca [1 x %..string], align 8
	store %jaze_gl-14.OpenGLVars_t* zeroinitializer, %jaze_gl-14.OpenGLVars_t** %0
		store %jaze_gl-14.OpenGLVars_t* %vars, %jaze_gl-14.OpenGLVars_t** %0
	; AssignStmt
	; SelectorExpr
	%7 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%8 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %7, i64 0
	%9 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %8, i64 0, i32 8
	%10 = call i32 @.jaze_gl-14.GetInteger(i32 33307)
	store i32 %10, i32* %9
	; AssignStmt
	; SelectorExpr
	%11 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%12 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %11, i64 0
	%13 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %12, i64 0, i32 10
	%14 = call i32 @.jaze_gl-14.GetInteger(i32 33308)
	store i32 %14, i32* %13
	; AssignStmt
	; SelectorExpr
	%15 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%16 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %15, i64 0
	%17 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %16, i64 0, i32 11
	%18 = call i32 @.jaze_gl-14.GetInteger(i32 33310)
	store i32 %18, i32* %17
	; AssignStmt
	; SelectorExpr
	%19 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%20 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %19, i64 0
	%21 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %20, i64 0, i32 2
	%22 = call %..string @.jaze_gl-14.GetString-2686136260448(i32 7938)
	store %..string %22, %..string* %21
	; AssignStmt
	; SelectorExpr
	%23 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%24 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %23, i64 0
	%25 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %24, i64 0, i32 3
	%26 = call %..string @.jaze_gl-14.GetString-2686136260448(i32 35724)
	store %..string %26, %..string* %25
	; AssignStmt
	; SelectorExpr
	%27 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%28 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %27, i64 0
	%29 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %28, i64 0, i32 4
	%30 = call %..string @.jaze_gl-14.GetString-2686136260448(i32 7936)
	store %..string %30, %..string* %29
	; AssignStmt
	; SelectorExpr
	%31 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%32 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %31, i64 0
	%33 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %32, i64 0, i32 5
	%34 = call %..string @.jaze_gl-14.GetString-2686136260448(i32 7937)
	store %..string %34, %..string* %33
	; AssignStmt
	; SelectorExpr
	%35 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%36 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %35, i64 0
	%37 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %36, i64 0, i32 12
	%38 = call i32 @.jaze_gl-14.GetInteger(i32 33309)
	store i32 %38, i32* %37
	; reserve
	; SelectorExpr
	%39 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%40 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %39, i64 0
	%41 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %40, i64 0, i32 0
	; SelectorExpr
	%42 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%43 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %42, i64 0
	%44 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %43, i64 0, i32 12
	%45 = load i32, i32* %44, align 4
	%46 = sext i32 %45 to i64
	%47 = bitcast {%..string*, i64, i64,%Allocator}* %41 to %..rawptr
	%48 = call i1 @.__dynamic_array_reserve(%..rawptr %47, i64 16, i64 8, i64 %46)
	; RangeStmt
	; i
	store i32 zeroinitializer, i32* %1
		store i32 zeroinitializer, i32* %2
	store i32 0, i32* %2
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	br label %for.interval.loop-1

for.interval.loop-1:
	; SelectorExpr
	%49 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%50 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %49, i64 0
	%51 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %50, i64 0, i32 12
	%52 = load i32, i32* %51, align 4
	%53 = load i32, i32* %2, align 4
	%54 = icmp slt i32 %53, %52
	br i1 %54, label %for.interval.body-2, label %for.interval.done-3

for.interval.body-2:
	%55 = load i32, i32* %2, align 4
	%56 = load i64, i64* %3, align 8
	%57 = load i32, i32* %2, align 4
	%58 = add i32 %57, 1
	store i32 %58, i32* %2
	%59 = load i64, i64* %3, align 8
	%60 = add i64 %59, 1
	store i64 %60, i64* %3
	store i32 %55, i32* %1
	; ext
	store %..string zeroinitializer, %..string* %4
		%61 = load i32, i32* %1, align 4
	; cast - cast
	%62 = bitcast i32 %61 to i32
	%63 = call %..string @.jaze_gl-14.GetString-2686136260080(i32 7939, i32 %62)
	store %..string %63, %..string* %4
	; append
	; SelectorExpr
	%64 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%65 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %64, i64 0
	%66 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %65, i64 0, i32 0
	%67 = bitcast {%..string*, i64, i64,%Allocator}* %66 to %..rawptr
	; SelectorExpr
	%68 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%69 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %68, i64 0
	%70 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %69, i64 0, i32 0
	%71 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %70, align 8
	%72 = load %..string, %..string* %4, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %5
	store [1 x %..string] zeroinitializer, [1 x %..string]* %6
	%73 = getelementptr inbounds [1 x %..string], [1 x %..string]* %6, i64 0, i32 0
	store %..string %72, %..string* %73
	%74 = getelementptr inbounds [1 x %..string], [1 x %..string]* %6, i64 0, i32 0
	%75 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 0
	store %..string* %74, %..string** %75
	%76 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 1
	store i64 1, i64* %76
	%77 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 2
	store i64 1, i64* %77
	%78 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %5, align 8
	%79 = extractvalue {%..string*, i64, i64} %78, 0
	%80 = extractvalue {%..string*, i64, i64} %78, 1
	%81 = bitcast %..string* %79 to %..rawptr
	%82 = call i64 @.__dynamic_array_append(%..rawptr %67, i64 16, i64 8, %..rawptr %81, i64 %80)
	br label %for.interval.loop-1

for.interval.done-3:
	ret void
}

define void @.jaze_gl-14.Init() {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..rawptr, align 8
	; libString
	store %..string zeroinitializer, %..string* %0
		store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$173, i64 0, i32 0), i64 13}, %..string* %0
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %1
		; SelectorExpr
	; IndexExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 0
	%4 = extractvalue %..string %2, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$174, i64 0, i32 0), i64 34}, i64 578, i64 42, i64 0, i64 %4)
	%5 = getelementptr inbounds i8, i8* %3, i64 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	%7 = call ccc %..rawptr @LoadLibraryA(i8* %6)
	store %..rawptr %7, %..rawptr* %1
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 2
	%9 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%10 = ptrtoint %..rawptr %9 to i64
	store i64 %10, i64* %8
	%11 = load %..rawptr, %..rawptr* %1, align 8
	%12 = getelementptr inbounds void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @.jaze_gl-14._DrawElements, i64 0
	%13 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 100
	%14 = bitcast void (i32, i32, i32, %..rawptr)** %12 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %11, %..rawptr %14, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$175, i64 0, i32 0), i64 14}, %Type_Info* %13)
	%15 = load %..rawptr, %..rawptr* %1, align 8
	%16 = getelementptr inbounds void (i32, i32, i32)*, void (i32, i32, i32)** @.jaze_gl-14._DrawArrays, i64 0
	%17 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	%18 = bitcast void (i32, i32, i32)** %16 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %15, %..rawptr %18, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$176, i64 0, i32 0), i64 12}, %Type_Info* %17)
	%19 = load %..rawptr, %..rawptr* %1, align 8
	%20 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._BindVertexArray, i64 0
	%21 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%22 = bitcast void (i32)** %20 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %19, %..rawptr %22, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$177, i64 0, i32 0), i64 17}, %Type_Info* %21)
	%23 = load %..rawptr, %..rawptr* %1, align 8
	%24 = getelementptr inbounds void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @.jaze_gl-14._VertexAttribPointer, i64 0
	%25 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 106
	%26 = bitcast void (i32, i32, i32, i1, i32, %..rawptr)** %24 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %23, %..rawptr %26, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$178, i64 0, i32 0), i64 21}, %Type_Info* %25)
	%27 = load %..rawptr, %..rawptr* %1, align 8
	%28 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._EnableVertexAttribArray, i64 0
	%29 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%30 = bitcast void (i32)** %28 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %27, %..rawptr %30, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$179, i64 0, i32 0), i64 25}, %Type_Info* %29)
	%31 = load %..rawptr, %..rawptr* %1, align 8
	%32 = getelementptr inbounds void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-14._GenVertexArrays, i64 0
	%33 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%34 = bitcast void (i32, i32*)** %32 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %31, %..rawptr %34, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$17a, i64 0, i32 0), i64 17}, %Type_Info* %33)
	%35 = load %..rawptr, %..rawptr* %1, align 8
	%36 = getelementptr inbounds void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @.jaze_gl-14._BufferData, i64 0
	%37 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 111
	%38 = bitcast void (i32, i32, %..rawptr, i32)** %36 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %35, %..rawptr %38, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$17b, i64 0, i32 0), i64 12}, %Type_Info* %37)
	%39 = load %..rawptr, %..rawptr* %1, align 8
	%40 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._BindBuffer, i64 0
	%41 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	%42 = bitcast void (i32, i32)** %40 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %39, %..rawptr %42, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$17c, i64 0, i32 0), i64 12}, %Type_Info* %41)
	%43 = load %..rawptr, %..rawptr* %1, align 8
	%44 = getelementptr inbounds void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-14._GenBuffers, i64 0
	%45 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%46 = bitcast void (i32, i32*)** %44 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %43, %..rawptr %46, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$17d, i64 0, i32 0), i64 12}, %Type_Info* %45)
	%47 = load %..rawptr, %..rawptr* %1, align 8
	%48 = getelementptr inbounds void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @.jaze_gl-14._DebugMessageControl, i64 0
	%49 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	%50 = bitcast void (i32, i32, i32, i32, i32*, i1)** %48 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %47, %..rawptr %50, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$17e, i64 0, i32 0), i64 24}, %Type_Info* %49)
	%51 = load %..rawptr, %..rawptr* %1, align 8
	%52 = getelementptr inbounds void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @.jaze_gl-14._DebugMessageCallback, i64 0
	%53 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 117
	%54 = bitcast void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** %52 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %51, %..rawptr %54, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$17f, i64 0, i32 0), i64 25}, %Type_Info* %53)
	%55 = load %..rawptr, %..rawptr* %1, align 8
	%56 = getelementptr inbounds void (i32, i32, i32*)*, void (i32, i32, i32*)** @.jaze_gl-14._GetShaderiv, i64 0
	%57 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 122
	%58 = bitcast void (i32, i32, i32*)** %56 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %55, %..rawptr %58, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$180, i64 0, i32 0), i64 13}, %Type_Info* %57)
	%59 = load %..rawptr, %..rawptr* %1, align 8
	%60 = getelementptr inbounds void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)** @.jaze_gl-14._GetShaderInfoLog, i64 0
	%61 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 125
	%62 = bitcast void (i32, i32, i32*, i8*)** %60 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %59, %..rawptr %62, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$181, i64 0, i32 0), i64 18}, %Type_Info* %61)
	%63 = load %..rawptr, %..rawptr* %1, align 8
	%64 = getelementptr inbounds i8* (i32, i32)*, i8* (i32, i32)** @.jaze_gl-14._GetStringi, i64 0
	%65 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 127
	%66 = bitcast i8* (i32, i32)** %64 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %63, %..rawptr %66, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$182, i64 0, i32 0), i64 12}, %Type_Info* %65)
	%67 = load %..rawptr, %..rawptr* %1, align 8
	%68 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._BlendEquation, i64 0
	%69 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	%70 = bitcast void (i32)** %68 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %67, %..rawptr %70, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$183, i64 0, i32 0), i64 15}, %Type_Info* %69)
	%71 = load %..rawptr, %..rawptr* %1, align 8
	%72 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._BlendEquationSeparate, i64 0
	%73 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%74 = bitcast void (i32, i32)** %72 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %71, %..rawptr %74, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$184, i64 0, i32 0), i64 23}, %Type_Info* %73)
	%75 = load %..rawptr, %..rawptr* %1, align 8
	%76 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._CompileShader, i64 0
	%77 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%78 = bitcast void (i32)** %76 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %75, %..rawptr %78, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$185, i64 0, i32 0), i64 15}, %Type_Info* %77)
	%79 = load %..rawptr, %..rawptr* %1, align 8
	%80 = getelementptr inbounds i32 (i32)*, i32 (i32)** @.jaze_gl-14._CreateShader, i64 0
	%81 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 133
	%82 = bitcast i32 (i32)** %80 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %79, %..rawptr %82, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$186, i64 0, i32 0), i64 14}, %Type_Info* %81)
	%83 = load %..rawptr, %..rawptr* %1, align 8
	%84 = getelementptr inbounds void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @.jaze_gl-14._ShaderSource, i64 0
	%85 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 134
	%86 = bitcast void (i32, i32, i8**, i32*)** %84 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %83, %..rawptr %86, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$187, i64 0, i32 0), i64 14}, %Type_Info* %85)
	%87 = load %..rawptr, %..rawptr* %1, align 8
	%88 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._AttachShader, i64 0
	%89 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 137
	%90 = bitcast void (i32, i32)** %88 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %87, %..rawptr %90, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$188, i64 0, i32 0), i64 14}, %Type_Info* %89)
	%91 = load %..rawptr, %..rawptr* %1, align 8
	%92 = getelementptr inbounds i32 ()*, i32 ()** @.jaze_gl-14._CreateProgram, i64 0
	%93 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 139
	%94 = bitcast i32 ()** %92 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %91, %..rawptr %94, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$189, i64 0, i32 0), i64 15}, %Type_Info* %93)
	%95 = load %..rawptr, %..rawptr* %1, align 8
	%96 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._LinkProgram, i64 0
	%97 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%98 = bitcast void (i32)** %96 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %95, %..rawptr %98, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$18a, i64 0, i32 0), i64 13}, %Type_Info* %97)
	%99 = load %..rawptr, %..rawptr* %1, align 8
	%100 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._UseProgram, i64 0
	%101 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%102 = bitcast void (i32)** %100 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %99, %..rawptr %102, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$18b, i64 0, i32 0), i64 12}, %Type_Info* %101)
	%103 = load %..rawptr, %..rawptr* %1, align 8
	%104 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-14._ActiveTexture, i64 0
	%105 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	%106 = bitcast void (i32)** %104 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %103, %..rawptr %106, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$18c, i64 0, i32 0), i64 15}, %Type_Info* %105)
	%107 = load %..rawptr, %..rawptr* %1, align 8
	%108 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._Uniform1i, i64 0
	%109 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%110 = bitcast void (i32, i32)** %108 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %107, %..rawptr %110, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$18d, i64 0, i32 0), i64 11}, %Type_Info* %109)
	%111 = load %..rawptr, %..rawptr* %1, align 8
	%112 = getelementptr inbounds void (i32, i32, i32)*, void (i32, i32, i32)** @.jaze_gl-14._Uniform2i, i64 0
	%113 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	%114 = bitcast void (i32, i32, i32)** %112 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %111, %..rawptr %114, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$18e, i64 0, i32 0), i64 11}, %Type_Info* %113)
	%115 = load %..rawptr, %..rawptr* %1, align 8
	%116 = getelementptr inbounds void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** @.jaze_gl-14._Uniform3i, i64 0
	%117 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 140
	%118 = bitcast void (i32, i32, i32, i32)** %116 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %115, %..rawptr %118, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$18f, i64 0, i32 0), i64 11}, %Type_Info* %117)
	%119 = load %..rawptr, %..rawptr* %1, align 8
	%120 = getelementptr inbounds void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** @.jaze_gl-14._Uniform4i, i64 0
	%121 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 142
	%122 = bitcast void (i32, i32, i32, i32, i32)** %120 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %119, %..rawptr %122, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$190, i64 0, i32 0), i64 11}, %Type_Info* %121)
	%123 = load %..rawptr, %..rawptr* %1, align 8
	%124 = getelementptr inbounds void (i32, float)*, void (i32, float)** @.jaze_gl-14._Uniform1f, i64 0
	%125 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 144
	%126 = bitcast void (i32, float)** %124 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %123, %..rawptr %126, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$191, i64 0, i32 0), i64 11}, %Type_Info* %125)
	%127 = load %..rawptr, %..rawptr* %1, align 8
	%128 = getelementptr inbounds void (i32, float, float)*, void (i32, float, float)** @.jaze_gl-14._Uniform2f, i64 0
	%129 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 146
	%130 = bitcast void (i32, float, float)** %128 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %127, %..rawptr %130, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$192, i64 0, i32 0), i64 11}, %Type_Info* %129)
	%131 = load %..rawptr, %..rawptr* %1, align 8
	%132 = getelementptr inbounds void (i32, float, float, float)*, void (i32, float, float, float)** @.jaze_gl-14._Uniform3f, i64 0
	%133 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 148
	%134 = bitcast void (i32, float, float, float)** %132 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %131, %..rawptr %134, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$193, i64 0, i32 0), i64 11}, %Type_Info* %133)
	%135 = load %..rawptr, %..rawptr* %1, align 8
	%136 = getelementptr inbounds void (i32, float, float, float, float)*, void (i32, float, float, float, float)** @.jaze_gl-14._Uniform4f, i64 0
	%137 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 150
	%138 = bitcast void (i32, float, float, float, float)** %136 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %135, %..rawptr %138, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$194, i64 0, i32 0), i64 11}, %Type_Info* %137)
	%139 = load %..rawptr, %..rawptr* %1, align 8
	%140 = getelementptr inbounds void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)** @.jaze_gl-14._UniformMatrix4fv, i64 0
	%141 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 152
	%142 = bitcast void (i32, i32, i32, float*)** %140 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %139, %..rawptr %142, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$195, i64 0, i32 0), i64 18}, %Type_Info* %141)
	%143 = load %..rawptr, %..rawptr* %1, align 8
	%144 = getelementptr inbounds i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-14._GetUniformLocation, i64 0
	%145 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 155
	%146 = bitcast i32 (i32, i8*)** %144 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %143, %..rawptr %146, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$196, i64 0, i32 0), i64 20}, %Type_Info* %145)
	%147 = load %..rawptr, %..rawptr* %1, align 8
	%148 = getelementptr inbounds i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-14._GetAttribLocation, i64 0
	%149 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 155
	%150 = bitcast i32 (i32, i8*)** %148 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %147, %..rawptr %150, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$197, i64 0, i32 0), i64 19}, %Type_Info* %149)
	%151 = load %..rawptr, %..rawptr* %1, align 8
	%152 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-14._PolygonMode, i64 0
	%153 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%154 = bitcast void (i32, i32)** %152 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %151, %..rawptr %154, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$198, i64 0, i32 0), i64 13}, %Type_Info* %153)
	; defer
	; SelectorExpr
	%155 = load %..rawptr, %..rawptr* %1, align 8
	call ccc void @FreeLibrary(%..rawptr %155)
	ret void
}

define void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %h, %..rawptr %p, %..string %name, %Type_Info* %info) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %Type_Info*, align 8
	%4 = alloca i8*, align 8
	%5 = alloca void ()*, align 8
	%6 = alloca %jaze_gl-14.DebugFunctionLoadStatus, align 8
	%7 = alloca {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, align 8
	%8 = alloca [1 x %jaze_gl-14.DebugFunctionLoadStatus], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %h, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	store %Type_Info* zeroinitializer, %Type_Info** %3
		store %Type_Info* %info, %Type_Info** %3
	; txt
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%9 = load %..string, %..string* %2, align 8
	%10 = call i8* @.strings-9.new_c_string(%..string %9)
	store i8* %10, i8** %4
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %5
		; SelectorExpr
	%11 = load i8*, i8** %4, align 8
	%12 = call ccc void ()* @wglGetProcAddress(i8* %11)
	store void ()* %12, void ()** %5
	; IfStmt
	%13 = load void ()*, void ()** %5, align 8
	%14 = icmp eq void ()* %13, zeroinitializer
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%15 = load %..rawptr, %..rawptr* %0, align 8
	%16 = load i8*, i8** %4, align 8
	%17 = call ccc void ()* @GetProcAddress(%..rawptr %15, i8* %16)
	store void ()* %17, void ()** %5
	br label %if.done-2

if.done-2:
	; AssignStmt
	%18 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%19 = bitcast %..rawptr %18 to void ()**
	%20 = getelementptr inbounds void ()*, void ()** %19, i64 0
	%21 = load void ()*, void ()** %5, align 8
	store void ()* %21, void ()** %20
	; status
	store %jaze_gl-14.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-14.DebugFunctionLoadStatus* %6
		store %jaze_gl-14.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-14.DebugFunctionLoadStatus* %6
	; AssignStmt
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 0
	%23 = load %..string, %..string* %2, align 8
	store %..string %23, %..string* %22
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 1
	%25 = load void ()*, void ()** %5, align 8
	; cast - cast
	%26 = bitcast void ()* %25 to %..rawptr
	; cast - cast
	%27 = ptrtoint %..rawptr %26 to i64
	store i64 %27, i64* %24
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 3
	store i1 false, i1* %28
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 2
	%30 = load %Type_Info*, %Type_Info** %3, align 8
	store %Type_Info* %30, %Type_Info** %29
	; AssignStmt
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 3
	%32 = load i32, i32* %31, align 4
	%33 = add i32 %32, 1
	store i32 %33, i32* %31
	; IfStmt
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	%36 = icmp ne i64 %35, 0
	br i1 %36, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%37 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 3
	store i1 true, i1* %37
	; AssignStmt
	; SelectorExpr
	%38 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 4
	%39 = load i32, i32* %38, align 4
	%40 = add i32 %39, 1
	store i32 %40, i32* %38
	br label %if.done-4

if.done-4:
	; append
	; SelectorExpr
	%41 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 0
	%42 = bitcast {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %41 to %..rawptr
	; SelectorExpr
	%43 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 0
	%44 = load {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %43, align 8
	%45 = load %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, align 8
	; variadic call argument generation
	store {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64} zeroinitializer, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7
	store [1 x %jaze_gl-14.DebugFunctionLoadStatus] zeroinitializer, [1 x %jaze_gl-14.DebugFunctionLoadStatus]* %8
	%46 = getelementptr inbounds [1 x %jaze_gl-14.DebugFunctionLoadStatus], [1 x %jaze_gl-14.DebugFunctionLoadStatus]* %8, i64 0, i32 0
	store %jaze_gl-14.DebugFunctionLoadStatus %45, %jaze_gl-14.DebugFunctionLoadStatus* %46
	%47 = getelementptr inbounds [1 x %jaze_gl-14.DebugFunctionLoadStatus], [1 x %jaze_gl-14.DebugFunctionLoadStatus]* %8, i64 0, i32 0
	%48 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 0
	store %jaze_gl-14.DebugFunctionLoadStatus* %47, %jaze_gl-14.DebugFunctionLoadStatus** %48
	%49 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 1
	store i64 1, i64* %49
	%50 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 2
	store i64 1, i64* %50
	%51 = load {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, align 8
	%52 = extractvalue {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64} %51, 0
	%53 = extractvalue {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64} %51, 1
	%54 = bitcast %jaze_gl-14.DebugFunctionLoadStatus* %52 to %..rawptr
	%55 = call i64 @.__dynamic_array_append(%..rawptr %42, i64 40, i64 8, %..rawptr %54, i64 %53)
	; defer
	; free
	%56 = load i8*, i8** %4, align 8
	%57 = bitcast i8* %56 to %..rawptr
	call void @.free_ptr(%..rawptr %57)
	ret void
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.DRAW_TO_WINDOW_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8193, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.DOUBLE_BUFFER_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8209, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.SUPPORT_OPENGL_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8208, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.ACCELERATION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8195, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.PIXEL_TYPE_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8211, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.COLOR_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8212, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.ALPHA_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8219, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.DEPTH_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8226, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.FRAMEBUFFER_SRGB_CAPABLE_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8361, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MAJOR_VERSION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8337, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MINOR_VERSION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8338, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_FLAGS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8340, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_PROFILE_MASK_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 37158, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define {i32*, i64, i64,%Allocator} @.jaze_wgl-15.PrepareAttribArray({%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %attribList) {
decls-0:
	%0 = alloca {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, align 8
	%1 = alloca {i32*, i64, i64,%Allocator}, align 8
	%2 = alloca %jaze_wgl-15.Attrib, align 4
	%3 = alloca i64, align 8
	%4 = alloca {i32*, i64, i64}, align 8
	%5 = alloca [1 x i32], align 4
	%6 = alloca {i32*, i64, i64}, align 8
	%7 = alloca [1 x i32], align 4
	%8 = alloca {i32*, i64, i64}, align 8
	%9 = alloca [1 x i32], align 4
	store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0
		store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %attribList, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0
	; array
	store {i32*, i64, i64,%Allocator} zeroinitializer, {i32*, i64, i64,%Allocator}* %1
		; RangeStmt
	; attr
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %2
		%10 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0, i64 0, i32 1
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%11 = load i64, i64* %3, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %3
	%13 = load i64, i64* %10, align 8
	%14 = icmp slt i64 %12, %13
	br i1 %14, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%15 = load i64, i64* %3, align 8
	%16 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0, i64 0, i32 0
	%17 = load %jaze_wgl-15.Attrib*, %jaze_wgl-15.Attrib** %16, align 8
	%18 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %17, i64 %15
	%19 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %18, align 4
	store %jaze_wgl-15.Attrib %19, %jaze_wgl-15.Attrib* %2
	; append
	%20 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%21 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %2, i64 0, i32 0
	%23 = load i32, i32* %22, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %4
	store [1 x i32] zeroinitializer, [1 x i32]* %5
	%24 = getelementptr inbounds [1 x i32], [1 x i32]* %5, i64 0, i32 0
	store i32 %23, i32* %24
	%25 = getelementptr inbounds [1 x i32], [1 x i32]* %5, i64 0, i32 0
	%26 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 0
	store i32* %25, i32** %26
	%27 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %27
	%28 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %28
	%29 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%30 = extractvalue {i32*, i64, i64} %29, 0
	%31 = extractvalue {i32*, i64, i64} %29, 1
	%32 = bitcast i32* %30 to %..rawptr
	%33 = call i64 @.__dynamic_array_append(%..rawptr %20, i64 4, i64 4, %..rawptr %32, i64 %31)
	; append
	%34 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%35 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %2, i64 0, i32 1
	%37 = load i32, i32* %36, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %6
	store [1 x i32] zeroinitializer, [1 x i32]* %7
	%38 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	store i32 %37, i32* %38
	%39 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	%40 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 0
	store i32* %39, i32** %40
	%41 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %41
	%42 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %42
	%43 = load {i32*, i64, i64}, {i32*, i64, i64}* %6, align 8
	%44 = extractvalue {i32*, i64, i64} %43, 0
	%45 = extractvalue {i32*, i64, i64} %43, 1
	%46 = bitcast i32* %44 to %..rawptr
	%47 = call i64 @.__dynamic_array_append(%..rawptr %34, i64 4, i64 4, %..rawptr %46, i64 %45)
	br label %for.index.loop-1

for.index.done-3:
	; append
	%48 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%49 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %8
	store [1 x i32] zeroinitializer, [1 x i32]* %9
	%50 = getelementptr inbounds [1 x i32], [1 x i32]* %9, i64 0, i32 0
	store i32 0, i32* %50
	%51 = getelementptr inbounds [1 x i32], [1 x i32]* %9, i64 0, i32 0
	%52 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 0
	store i32* %51, i32** %52
	%53 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %53
	%54 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %54
	%55 = load {i32*, i64, i64}, {i32*, i64, i64}* %8, align 8
	%56 = extractvalue {i32*, i64, i64} %55, 0
	%57 = extractvalue {i32*, i64, i64} %55, 1
	%58 = bitcast i32* %56 to %..rawptr
	%59 = call i64 @.__dynamic_array_append(%..rawptr %48, i64 4, i64 4, %..rawptr %58, i64 %57)
	; ReturnStmt
	%60 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	ret {i32*, i64, i64,%Allocator} %60
}

define void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %list, %..rawptr %p, %..string %name) {
decls-0:
	%0 = alloca %jaze_wgl-15.TryGetExtensionList*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %__Map_Header, align 8
	%4 = alloca %__Map_Key, align 8
	%5 = alloca %..rawptr, align 8
	store %jaze_wgl-15.TryGetExtensionList* zeroinitializer, %jaze_wgl-15.TryGetExtensionList** %0
		store %jaze_wgl-15.TryGetExtensionList* %list, %jaze_wgl-15.TryGetExtensionList** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%6 = load %jaze_wgl-15.TryGetExtensionList*, %jaze_wgl-15.TryGetExtensionList** %0, align 8
	%7 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %6, i64 0
	%8 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %7, i64 0, i32 0
	%9 = load %..string, %..string* %2, align 8
	%10 = load %..rawptr, %..rawptr* %1, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %3
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 0
	%12 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %8 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %12, %raw-6.Dynamic_Map** %11
	%13 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 1
	store i1 true, i1* %13
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 2
	store i64 40, i64* %14
	%15 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 3
	store i64 8, i64* %15
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 4
	store i64 32, i64* %16
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 5
	store i64 8, i64* %17
	%18 = load %__Map_Header, %__Map_Header* %3, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %4
	%19 = call i64 @.__default_hash_string(%..string %9)
	%20 = getelementptr inbounds %__Map_Key, %__Map_Key* %4, i64 0, i32 0
	store i64 %19, i64* %20
	%21 = getelementptr inbounds %__Map_Key, %__Map_Key* %4, i64 0, i32 1
	store %..string %9, %..string* %21
	%22 = load %__Map_Key, %__Map_Key* %4, align 8
	store %..rawptr zeroinitializer, %..rawptr* %5
	store %..rawptr %10, %..rawptr* %5
	%23 = bitcast %..rawptr* %5 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %18, %__Map_Key %22, %..rawptr %23)
	ret void
}

define void @.jaze_wgl-15.LoadExtensions(%..rawptr %GLContext, %..rawptr %WindowDC, %jaze_wgl-15.TryGetExtensionList %list) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %jaze_wgl-15.TryGetExtensionList, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca %..string, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %GLContext, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %WindowDC, %..rawptr* %1
	store %jaze_wgl-15.TryGetExtensionList zeroinitializer, %jaze_wgl-15.TryGetExtensionList* %2
		store %jaze_wgl-15.TryGetExtensionList %list, %jaze_wgl-15.TryGetExtensionList* %2
	; IfStmt
	; SelectorExpr
	%7 = load %..rawptr, %..rawptr* %1, align 8
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = call ccc i32 @wglMakeCurrent(%..rawptr %7, %..rawptr %8)
	%10 = icmp eq i32 %9, 1
	br i1 %10, label %if.then-1, label %if.done-5

if.then-1:
	; DeferStmt
	; RangeStmt
	; val
	store %..rawptr zeroinitializer, %..rawptr* %3
		; key
	store %..string zeroinitializer, %..string* %4
		; SelectorExpr
	%11 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %2, i64 0, i32 0
	%12 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %11, i64 0, i32 1
	%13 = getelementptr inbounds {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}* %12, i64 0, i32 1
	store %..string zeroinitializer, %..string* %5
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-2

for.index.loop-2:
	%14 = load i64, i64* %6, align 8
	%15 = add i64 %14, 1
	store i64 %15, i64* %6
	%16 = load i64, i64* %13, align 8
	%17 = icmp slt i64 %15, %16
	br i1 %17, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%18 = load i64, i64* %6, align 8
	%19 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %11, i64 0, i32 1
	%20 = getelementptr inbounds {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}* %19, i64 0, i32 0
	%21 = load {%__Map_Key, i64, %..rawptr}*, {%__Map_Key, i64, %..rawptr}** %20, align 8
	%22 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %21, i64 %18
	%23 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %22, i64 0, i32 2
	%24 = load %..rawptr, %..rawptr* %23, align 8
	%25 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %22, i64 0, i32 0
	%26 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	%27 = load %..string, %..string* %26, align 8
	store %..string %27, %..string* %5
	%28 = load %..string, %..string* %5, align 8
	store %..rawptr %24, %..rawptr* %3
	store %..string %28, %..string* %4
	%29 = load %..rawptr, %..rawptr* %3, align 8
	%30 = load %..string, %..string* %4, align 8
	call void @.jaze_wgl-15.LoadExtensions.set_proc_address-0(%..rawptr %29, %..string %30)
	br label %for.index.loop-2

for.index.done-4:
	; defer
	; SelectorExpr
	%31 = call ccc i32 @wglMakeCurrent(%..rawptr zeroinitializer, %..rawptr zeroinitializer)
	br label %if.done-5

if.done-5:
	ret void
}

define void @.jaze_wgl-15.LoadExtensions.set_proc_address-0(%..rawptr %p, %..string %name) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca void ()*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %p, %..rawptr* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; txt
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%4 = load %..string, %..string* %1, align 8
	%5 = call i8* @.strings-9.new_c_string(%..string %4)
	store i8* %5, i8** %2
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %3
		; SelectorExpr
	%6 = load i8*, i8** %2, align 8
	%7 = call ccc void ()* @wglGetProcAddress(i8* %6)
	store void ()* %7, void ()** %3
	; assert
	%8 = load void ()*, void ()** %3, align 8
	%9 = icmp ne void ()* %8, zeroinitializer
	%10 = icmp eq i1 %9, false
	br i1 %10, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$199, i64 0, i32 0), i64 35}, i64 155, i64 20, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$19a, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; AssignStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%12 = bitcast %..rawptr %11 to void ()**
	%13 = getelementptr inbounds void ()*, void ()** %12, i64 0
	%14 = load void ()*, void ()** %3, align 8
	store void ()* %14, void ()** %13
	; defer
	; free
	%15 = load i8*, i8** %2, align 8
	%16 = bitcast i8* %15 to %..rawptr
	call void @.free_ptr(%..rawptr %16)
	ret void
}

define void @.jaze_wgl-15.GetInfo(%jaze_gl-14.OpenGLVars_t* %vars, %..rawptr %dc) {
decls-0:
	%0 = alloca %jaze_gl-14.OpenGLVars_t*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i64, align 8
	%4 = alloca i32, align 4
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %..string, align 8
	%8 = alloca %..string, align 8
	%9 = alloca {%..string*, i64, i64}, align 8
	%10 = alloca [1 x %..string], align 8
	store %jaze_gl-14.OpenGLVars_t* zeroinitializer, %jaze_gl-14.OpenGLVars_t** %0
		store %jaze_gl-14.OpenGLVars_t* %vars, %jaze_gl-14.OpenGLVars_t** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %dc, %..rawptr* %1
	; wglExts
	store %..string zeroinitializer, %..string* %2
		; SelectorExpr
	%11 = load i8* (%..rawptr)*, i8* (%..rawptr)** @.jaze_wgl-15.GetExtensionsStringARB, align 8
	%12 = load %..rawptr, %..rawptr* %1, align 8
	%13 = call ccc i8* %11(%..rawptr %12)
	%14 = call %..string @.strings-9.to_odin_string(i8* %13)
	store %..string %14, %..string* %2
	; s
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; RangeStmt
	; r
	store i32 zeroinitializer, i32* %4
		; i
	store i64 zeroinitializer, i64* %5
		%15 = load %..string, %..string* %2, align 8
	%16 = extractvalue %..string %15, 1
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.string.loop-1

for.string.loop-1:
	%17 = load i64, i64* %6, align 8
	%18 = icmp slt i64 %17, %16
	br i1 %18, label %for.string.body-2, label %for.string.done-5

for.string.body-2:
	%19 = extractvalue %..string %15, 0
	%20 = getelementptr inbounds i8, i8* %19, i64 %17
	%21 = sub i64 %16, %17
	store %..string zeroinitializer, %..string* %7
	%22 = getelementptr inbounds %..string, %..string* %7, i64 0, i32 0
	%23 = getelementptr inbounds %..string, %..string* %7, i64 0, i32 1
	store i8* %20, i8** %22
	store i64 %21, i64* %23
	%24 = load %..string, %..string* %7, align 8
	%25 = call {i32, i64} @.__string_decode_rune(%..string %24)
	%26 = extractvalue {i32, i64} %25, 1
	%27 = add i64 %17, %26
	store i64 %27, i64* %6
	%28 = extractvalue {i32, i64} %25, 0
	store i32 %28, i32* %4
	store i64 %17, i64* %5
	; IfStmt
	%29 = load i32, i32* %4, align 4
	%30 = icmp eq i32 %29, 32
	br i1 %30, label %if.then-3, label %if.done-4

if.then-3:
	; append
	; SelectorExpr
	%31 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%32 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %31, i64 0
	%33 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %32, i64 0, i32 1
	%34 = bitcast {%..string*, i64, i64,%Allocator}* %33 to %..rawptr
	; SelectorExpr
	%35 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%36 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %35, i64 0
	%37 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %36, i64 0, i32 1
	%38 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %37, align 8
	; SliceExpr
	%39 = load i64, i64* %3, align 8
	%40 = load i64, i64* %5, align 8
	%41 = load %..string, %..string* %2, align 8
	%42 = extractvalue %..string %41, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$19b, i64 0, i32 0), i64 35}, i64 170, i64 47, i64 %39, i64 %40)
	%43 = extractvalue %..string %41, 0
	%44 = getelementptr inbounds i8, i8* %43, i64 %39
	%45 = sub i64 %40, %39
	store %..string zeroinitializer, %..string* %8
	%46 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	store i8* %44, i8** %46
	%47 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 1
	store i64 %45, i64* %47
	%48 = load %..string, %..string* %8, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %9
	store [1 x %..string] zeroinitializer, [1 x %..string]* %10
	%49 = getelementptr inbounds [1 x %..string], [1 x %..string]* %10, i64 0, i32 0
	store %..string %48, %..string* %49
	%50 = getelementptr inbounds [1 x %..string], [1 x %..string]* %10, i64 0, i32 0
	%51 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %9, i64 0, i32 0
	store %..string* %50, %..string** %51
	%52 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %9, i64 0, i32 1
	store i64 1, i64* %52
	%53 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %9, i64 0, i32 2
	store i64 1, i64* %53
	%54 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %9, align 8
	%55 = extractvalue {%..string*, i64, i64} %54, 0
	%56 = extractvalue {%..string*, i64, i64} %54, 1
	%57 = bitcast %..string* %55 to %..rawptr
	%58 = call i64 @.__dynamic_array_append(%..rawptr %34, i64 16, i64 8, %..rawptr %57, i64 %56)
	; AssignStmt
	; SelectorExpr
	%59 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%60 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %59, i64 0
	%61 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %60, i64 0, i32 13
	%62 = load i32, i32* %61, align 4
	%63 = add i32 %62, 1
	store i32 %63, i32* %61
	; AssignStmt
	%64 = load i64, i64* %5, align 8
	%65 = add i64 %64, 1
	store i64 %65, i64* %3
	br label %if.done-4

if.done-4:
	br label %for.string.loop-1

for.string.done-5:
	ret void
}

define void @.jaze_debug_windows-16.OpenGLExtensions(%..string %name, {%..string*, i64, i64,%Allocator} %extensions, i1* %show) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..string*, i64, i64,%Allocator}, align 8
	%2 = alloca i1*, align 8
	%3 = alloca %..string, align 8
	%4 = alloca i64, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	store {%..string*, i64, i64,%Allocator} zeroinitializer, {%..string*, i64, i64,%Allocator}* %1
		store {%..string*, i64, i64,%Allocator} %extensions, {%..string*, i64, i64,%Allocator}* %1
	store i1* zeroinitializer, i1** %2
		store i1* %show, i1** %2
	; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = load i1*, i1** %2, align 8
	%8 = call i1 @.imgui-12.Begin(%..string %6, i1* %7, i32 160)
	; RangeStmt
	; ext
	store %..string zeroinitializer, %..string* %3
		%9 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %1, i64 0, i32 1
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%10 = load i64, i64* %4, align 8
	%11 = add i64 %10, 1
	store i64 %11, i64* %4
	%12 = load i64, i64* %9, align 8
	%13 = icmp slt i64 %11, %12
	br i1 %13, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%14 = load i64, i64* %4, align 8
	%15 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %1, i64 0, i32 0
	%16 = load %..string*, %..string** %15, align 8
	%17 = getelementptr inbounds %..string, %..string* %16, i64 %14
	%18 = load %..string, %..string* %17, align 8
	store %..string %18, %..string* %3
	; SelectorExpr
	%19 = load %..string, %..string* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	%20 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-12.Text(%..string %19, {%..any*, i64, i64} %20)
	br label %for.index.loop-1

for.index.done-3:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.OpenGLTextureOverview(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	%3 = alloca %..any, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %__Map_Header, align 8
	%7 = alloca %__Map_Key, align 8
	%8 = alloca i1, align 1
	%9 = alloca {i1, i1}, align 1
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i1, i1}, align 1
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca %__Map_Header, align 8
	%17 = alloca %__Map_Key, align 8
	%18 = alloca i1, align 1
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%19 = load i1*, i1** %0, align 8
	%20 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$19c, i64 0, i32 0), i64 15}, i1* %19, i32 160)
	; RangeStmt
	; id
	store i32 zeroinitializer, i32* %1
		; SelectorExpr
	; SelectorExpr
	%21 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 1
	%22 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %21, i64 0, i32 1
	store i64 zeroinitializer, i64* %2
	store i64 -1, i64* %2
	br label %for.index.loop-1

for.index.loop-1:
	%23 = load i64, i64* %2, align 8
	%24 = add i64 %23, 1
	store i64 %24, i64* %2
	%25 = load i64, i64* %22, align 8
	%26 = icmp slt i64 %24, %25
	br i1 %26, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%27 = load i64, i64* %2, align 8
	%28 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %21, i64 0, i32 0
	%29 = load i32*, i32** %28, align 8
	%30 = getelementptr inbounds i32, i32* %29, i64 %27
	%31 = load i32, i32* %30, align 4
	store i32 %31, i32* %1
	; SelectorExpr
	%32 = load i32, i32* %1, align 4
	; cast - cast
	%33 = bitcast i32 %32 to i32
	call ccc void @igPushIdInt(i32 %33)
	; SelectorExpr
	%34 = load i32, i32* %1, align 4
	store %..any zeroinitializer, %..any* %3
	%35 = bitcast i32* %1 to %..rawptr
	%36 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 157
	%37 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%38 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %36, %Type_Info** %37
	store %..rawptr %35, %..rawptr* %38
	%39 = load %..any, %..any* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%40 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %39, %..any* %40
	%41 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %41, %..any** %42
	%43 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %43
	%44 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %44
	%45 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$19d, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %45)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%46 = call i1 @.imgui-12.Button(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$19e, i64 0, i32 0), i64 4}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %46, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	%47 = load i32, i32* %1, align 4
	store i32 %47, i32* @.jaze_debug_windows-16.CurrentViewTexture
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %6
	%48 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 0
	%49 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %49, %raw-6.Dynamic_Map** %48
	%50 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 1
	store i1 true, i1* %50
	%51 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 2
	store i64 40, i64* %51
	%52 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 3
	store i64 8, i64* %52
	%53 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 4
	store i64 32, i64* %53
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 5
	store i64 1, i64* %54
	%55 = load %__Map_Header, %__Map_Header* %6, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %7
	%56 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 0
	store i64 -2244582010140912990, i64* %56
	%57 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$19f, i64 0, i32 0), i64 13}, %..string* %57
	%58 = load %__Map_Key, %__Map_Key* %7, align 8
	store i1 zeroinitializer, i1* %8
	store i1 true, i1* %8
	%59 = bitcast i1* %8 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %55, %__Map_Key %58, %..rawptr %59)
	br label %if.done-4

if.done-4:
	; SelectorExpr
	call ccc void @igPopId()
	br label %for.index.loop-1

for.index.done-5:
	; SelectorExpr
	call ccc void @igEnd()
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %9
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%60 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%61 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %61, %raw-6.Dynamic_Map** %60
	%62 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %62
	%63 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %63
	%64 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %64
	%65 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %65
	%66 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 5
	store i64 1, i64* %66
	%67 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%68 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 -2244582010140912990, i64* %68
	%69 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1a0, i64 0, i32 0), i64 13}, %..string* %69
	%70 = load %__Map_Key, %__Map_Key* %11, align 8
	%71 = call %..rawptr @.__dynamic_map_get(%__Map_Header %67, %__Map_Key %70)
	%72 = icmp ne %..rawptr %71, null
	%73 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 1
	store i1 %72, i1* %73
	br i1 %72, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%74 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 0
	%75 = bitcast %..rawptr %71 to i1*
	%76 = load i1, i1* %75, align 1
	store i1 %76, i1* %74
	br label %map.get.done-7

map.get.done-7:
	%77 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 0
	%78 = load i1, i1* %77, align 1
	%79 = icmp eq i1 %78, true
	br i1 %79, label %if.then-8, label %if.done-11

if.then-8:
	; b
	store i1 zeroinitializer, i1* %12
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %13
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%80 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%81 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %81, %raw-6.Dynamic_Map** %80
	%82 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %82
	%83 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %83
	%84 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %84
	%85 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %85
	%86 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 5
	store i64 1, i64* %86
	%87 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%88 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 -2244582010140912990, i64* %88
	%89 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1a1, i64 0, i32 0), i64 13}, %..string* %89
	%90 = load %__Map_Key, %__Map_Key* %15, align 8
	%91 = call %..rawptr @.__dynamic_map_get(%__Map_Header %87, %__Map_Key %90)
	%92 = icmp ne %..rawptr %91, null
	%93 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 1
	store i1 %92, i1* %93
	br i1 %92, label %map.get.then-9, label %map.get.done-10

map.get.then-9:
	%94 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%95 = bitcast %..rawptr %91 to i1*
	%96 = load i1, i1* %95, align 1
	store i1 %96, i1* %94
	br label %map.get.done-10

map.get.done-10:
	%97 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%98 = load i1, i1* %97, align 1
	store i1 %98, i1* %12
	%99 = load i32, i32* @.jaze_debug_windows-16.CurrentViewTexture, align 4
	%100 = getelementptr inbounds i1, i1* %12, i64 0
	call void @.jaze_debug_windows-16.OpenGLTextureView(i32 %99, i1* %100)
	; AssignStmt
	; IndexExpr
	%101 = load i1, i1* %12, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 0
	%103 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %103, %raw-6.Dynamic_Map** %102
	%104 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 1
	store i1 true, i1* %104
	%105 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 2
	store i64 40, i64* %105
	%106 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 3
	store i64 8, i64* %106
	%107 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 4
	store i64 32, i64* %107
	%108 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 5
	store i64 1, i64* %108
	%109 = load %__Map_Header, %__Map_Header* %16, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %17
	%110 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 0
	store i64 -2244582010140912990, i64* %110
	%111 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1a2, i64 0, i32 0), i64 13}, %..string* %111
	%112 = load %__Map_Key, %__Map_Key* %17, align 8
	store i1 zeroinitializer, i1* %18
	store i1 %101, i1* %18
	%113 = bitcast i1* %18 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %109, %__Map_Key %112, %..rawptr %113)
	br label %if.done-11

if.done-11:
	ret void
}

define void @.jaze_debug_windows-16.OpenGLTextureView(i32 %textureId, i1* %show) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i1*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %textureId, i32* %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%2 = load i1*, i1** %1, align 8
	%3 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1a3, i64 0, i32 0), i64 12}, i1* %2, i32 160)
	; SelectorExpr
	call void @.imgui-12.Image(%..rawptr inttoptr (i64 1 to %..rawptr), %imgui-12.Vec2 {float 0x4059000000000000, float 0x4059000000000000}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, %imgui-12.Vec2 {float 0x3ff0000000000000, float 0x3ff0000000000000}, %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000}, %imgui-12.Vec4 {float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000})
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.OpenGLInfo(%jaze_gl-14.OpenGLVars_t* %vars, i1* %show) {
decls-0:
	%0 = alloca %jaze_gl-14.OpenGLVars_t*, align 8
	%1 = alloca i1*, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca %..any, align 8
	%4 = alloca %..any, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	%6 = alloca [2 x %..any], align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [2 x %..any], align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [1 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca {%..any*, i64, i64}, align 8
	%16 = alloca [1 x %..any], align 8
	%17 = alloca %..any, align 8
	%18 = alloca {%..any*, i64, i64}, align 8
	%19 = alloca [1 x %..any], align 8
	%20 = alloca %..any, align 8
	%21 = alloca {%..any*, i64, i64}, align 8
	%22 = alloca [1 x %..any], align 8
	%23 = alloca %..any, align 8
	%24 = alloca {%..any*, i64, i64}, align 8
	%25 = alloca [1 x %..any], align 8
	%26 = alloca %..any, align 8
	%27 = alloca {%..any*, i64, i64}, align 8
	%28 = alloca [1 x %..any], align 8
	%29 = alloca %__Map_Header, align 8
	%30 = alloca %__Map_Key, align 8
	%31 = alloca i1, align 1
	%32 = alloca %..any, align 8
	%33 = alloca {%..any*, i64, i64}, align 8
	%34 = alloca [1 x %..any], align 8
	%35 = alloca %__Map_Header, align 8
	%36 = alloca %__Map_Key, align 8
	%37 = alloca i1, align 1
	%38 = alloca %..any, align 8
	%39 = alloca %..any, align 8
	%40 = alloca {%..any*, i64, i64}, align 8
	%41 = alloca [2 x %..any], align 8
	%42 = alloca %..string, align 8
	%43 = alloca %jaze_gl-14.DebugFunctionLoadStatus, align 8
	%44 = alloca i64, align 8
	%45 = alloca {%..any*, i64, i64}, align 8
	%46 = alloca %..any, align 8
	%47 = alloca %..any, align 8
	%48 = alloca {%..any*, i64, i64}, align 8
	%49 = alloca [2 x %..any], align 8
	%50 = alloca %Type_Info.Procedure*, align 8
	%51 = alloca i1, align 1
	%52 = alloca {%Type_Info.Procedure*, i1}, align 8
	%53 = alloca %Type_Info.Tuple*, align 8
	%54 = alloca i1, align 1
	%55 = alloca {%Type_Info.Tuple*, i1}, align 8
	%56 = alloca %..any, align 8
	%57 = alloca {%..any*, i64, i64}, align 8
	%58 = alloca [1 x %..any], align 8
	%59 = alloca %..any, align 8
	%60 = alloca {%..any*, i64, i64}, align 8
	%61 = alloca [1 x %..any], align 8
	%62 = alloca %..any, align 8
	%63 = alloca i64, align 8
	%64 = alloca {%..any*, i64, i64}, align 8
	%65 = alloca [1 x %..any], align 8
	%66 = alloca %..string, align 8
	%67 = alloca i64, align 8
	%68 = alloca i64, align 8
	%69 = alloca {%..any*, i64, i64}, align 8
	%70 = alloca %..any, align 8
	%71 = alloca {%..any*, i64, i64}, align 8
	%72 = alloca [1 x %..any], align 8
	%73 = alloca %..any, align 8
	%74 = alloca i64, align 8
	%75 = alloca {%..any*, i64, i64}, align 8
	%76 = alloca [1 x %..any], align 8
	%77 = alloca %__Map_Header, align 8
	%78 = alloca %__Map_Key, align 8
	%79 = alloca i1, align 1
	%80 = alloca {i1, i1}, align 1
	%81 = alloca %__Map_Header, align 8
	%82 = alloca %__Map_Key, align 8
	%83 = alloca i1, align 1
	%84 = alloca {i1, i1}, align 1
	%85 = alloca %__Map_Header, align 8
	%86 = alloca %__Map_Key, align 8
	%87 = alloca %__Map_Header, align 8
	%88 = alloca %__Map_Key, align 8
	%89 = alloca i1, align 1
	%90 = alloca {i1, i1}, align 1
	%91 = alloca %__Map_Header, align 8
	%92 = alloca %__Map_Key, align 8
	%93 = alloca i1, align 1
	%94 = alloca {i1, i1}, align 1
	%95 = alloca %__Map_Header, align 8
	%96 = alloca %__Map_Key, align 8
	%97 = alloca %__Map_Header, align 8
	%98 = alloca %__Map_Key, align 8
	%99 = alloca i1, align 1
	%100 = alloca {i1, i1}, align 1
	%101 = alloca %__Map_Header, align 8
	%102 = alloca %__Map_Key, align 8
	%103 = alloca i1, align 1
	%104 = alloca {i1, i1}, align 1
	%105 = alloca %__Map_Header, align 8
	%106 = alloca %__Map_Key, align 8
	%107 = alloca %__Map_Header, align 8
	%108 = alloca %__Map_Key, align 8
	%109 = alloca i1, align 1
	store %jaze_gl-14.OpenGLVars_t* zeroinitializer, %jaze_gl-14.OpenGLVars_t** %0
		store %jaze_gl-14.OpenGLVars_t* %vars, %jaze_gl-14.OpenGLVars_t** %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%110 = load i1*, i1** %1, align 8
	%111 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$1a4, i64 0, i32 0), i64 11}, i1* %110, i32 160)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	%112 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1a5, i64 0, i32 0), i64 9}, {%..any*, i64, i64} %112)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	%113 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%114 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %113, i64 0
	%115 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %114, i64 0, i32 7
	%116 = load i32, i32* %115, align 4
	; SelectorExpr
	%117 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%118 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %117, i64 0
	%119 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %118, i64 0, i32 9
	%120 = load i32, i32* %119, align 4
	store %..any zeroinitializer, %..any* %3
	%121 = bitcast i32* %115 to %..rawptr
	%122 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%123 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%124 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %122, %Type_Info** %123
	store %..rawptr %121, %..rawptr* %124
	%125 = load %..any, %..any* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%126 = bitcast i32* %119 to %..rawptr
	%127 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%128 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%129 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %127, %Type_Info** %128
	store %..rawptr %126, %..rawptr* %129
	%130 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	store [2 x %..any] zeroinitializer, [2 x %..any]* %6
	%131 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	store %..any %125, %..any* %131
	%132 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 1
	store %..any %130, %..any* %132
	%133 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	%134 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 0
	store %..any* %133, %..any** %134
	%135 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 1
	store i64 2, i64* %135
	%136 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 2
	store i64 2, i64* %136
	%137 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1a6, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %137)
	; SelectorExpr
	; SelectorExpr
	%138 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%139 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %138, i64 0
	%140 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %139, i64 0, i32 8
	%141 = load i32, i32* %140, align 4
	; SelectorExpr
	%142 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%143 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %142, i64 0
	%144 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %143, i64 0, i32 8
	%145 = load i32, i32* %144, align 4
	store %..any zeroinitializer, %..any* %7
	%146 = bitcast i32* %140 to %..rawptr
	%147 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%148 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%149 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %147, %Type_Info** %148
	store %..rawptr %146, %..rawptr* %149
	%150 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%151 = bitcast i32* %144 to %..rawptr
	%152 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%153 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%154 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %152, %Type_Info** %153
	store %..rawptr %151, %..rawptr* %154
	%155 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [2 x %..any] zeroinitializer, [2 x %..any]* %10
	%156 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	store %..any %150, %..any* %156
	%157 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 1
	store %..any %155, %..any* %157
	%158 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	%159 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %158, %..any** %159
	%160 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 2, i64* %160
	%161 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 2, i64* %161
	%162 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1a7, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %162)
	; SelectorExpr
	; SelectorExpr
	%163 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%164 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %163, i64 0
	%165 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %164, i64 0, i32 3
	%166 = load %..string, %..string* %165, align 8
	store %..any zeroinitializer, %..any* %11
	%167 = bitcast %..string* %165 to %..rawptr
	%168 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%169 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%170 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %168, %Type_Info** %169
	store %..rawptr %167, %..rawptr* %170
	%171 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [1 x %..any] zeroinitializer, [1 x %..any]* %13
	%172 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	store %..any %171, %..any* %172
	%173 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	%174 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %173, %..any** %174
	%175 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 1, i64* %175
	%176 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 1, i64* %176
	%177 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$1a8, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %177)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%178 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 2
	%179 = load i64, i64* %178, align 8
	store %..any zeroinitializer, %..any* %14
	%180 = bitcast i64* %178 to %..rawptr
	%181 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%182 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%183 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %181, %Type_Info** %182
	store %..rawptr %180, %..rawptr* %183
	%184 = load %..any, %..any* %14, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %15
	store [1 x %..any] zeroinitializer, [1 x %..any]* %16
	%185 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	store %..any %184, %..any* %185
	%186 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	%187 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 0
	store %..any* %186, %..any** %187
	%188 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 1
	store i64 1, i64* %188
	%189 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 2
	store i64 1, i64* %189
	%190 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %15, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$1a9, i64 0, i32 0), i64 16}, {%..any*, i64, i64} %190)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; SelectorExpr
	%191 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%192 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %191, i64 0
	%193 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %192, i64 0, i32 4
	%194 = load %..string, %..string* %193, align 8
	store %..any zeroinitializer, %..any* %17
	%195 = bitcast %..string* %193 to %..rawptr
	%196 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%197 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%198 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %196, %Type_Info** %197
	store %..rawptr %195, %..rawptr* %198
	%199 = load %..any, %..any* %17, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %18
	store [1 x %..any] zeroinitializer, [1 x %..any]* %19
	%200 = getelementptr inbounds [1 x %..any], [1 x %..any]* %19, i64 0, i32 0
	store %..any %199, %..any* %200
	%201 = getelementptr inbounds [1 x %..any], [1 x %..any]* %19, i64 0, i32 0
	%202 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 0
	store %..any* %201, %..any** %202
	%203 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 1
	store i64 1, i64* %203
	%204 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 2
	store i64 1, i64* %204
	%205 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %18, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1aa, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %205)
	; SelectorExpr
	; SelectorExpr
	%206 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%207 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %206, i64 0
	%208 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %207, i64 0, i32 5
	%209 = load %..string, %..string* %208, align 8
	store %..any zeroinitializer, %..any* %20
	%210 = bitcast %..string* %208 to %..rawptr
	%211 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%212 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%213 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %211, %Type_Info** %212
	store %..rawptr %210, %..rawptr* %213
	%214 = load %..any, %..any* %20, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %21
	store [1 x %..any] zeroinitializer, [1 x %..any]* %22
	%215 = getelementptr inbounds [1 x %..any], [1 x %..any]* %22, i64 0, i32 0
	store %..any %214, %..any* %215
	%216 = getelementptr inbounds [1 x %..any], [1 x %..any]* %22, i64 0, i32 0
	%217 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 0
	store %..any* %216, %..any** %217
	%218 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 1
	store i64 1, i64* %218
	%219 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 2
	store i64 1, i64* %219
	%220 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %21, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1ab, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %220)
	; SelectorExpr
	; SelectorExpr
	%221 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%222 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %221, i64 0
	%223 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %222, i64 0, i32 11
	%224 = load i32, i32* %223, align 4
	store %..any zeroinitializer, %..any* %23
	%225 = bitcast i32* %223 to %..rawptr
	%226 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%227 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 0
	%228 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 1
	store %Type_Info* %226, %Type_Info** %227
	store %..rawptr %225, %..rawptr* %228
	%229 = load %..any, %..any* %23, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %24
	store [1 x %..any] zeroinitializer, [1 x %..any]* %25
	%230 = getelementptr inbounds [1 x %..any], [1 x %..any]* %25, i64 0, i32 0
	store %..any %229, %..any* %230
	%231 = getelementptr inbounds [1 x %..any], [1 x %..any]* %25, i64 0, i32 0
	%232 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 0
	store %..any* %231, %..any** %232
	%233 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 1
	store i64 1, i64* %233
	%234 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 2
	store i64 1, i64* %234
	%235 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %24, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1ac, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %235)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; SelectorExpr
	%236 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%237 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %236, i64 0
	%238 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %237, i64 0, i32 12
	%239 = load i32, i32* %238, align 4
	store %..any zeroinitializer, %..any* %26
	%240 = bitcast i32* %238 to %..rawptr
	%241 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%242 = getelementptr inbounds %..any, %..any* %26, i64 0, i32 0
	%243 = getelementptr inbounds %..any, %..any* %26, i64 0, i32 1
	store %Type_Info* %241, %Type_Info** %242
	store %..rawptr %240, %..rawptr* %243
	%244 = load %..any, %..any* %26, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %27
	store [1 x %..any] zeroinitializer, [1 x %..any]* %28
	%245 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	store %..any %244, %..any* %245
	%246 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	%247 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 0
	store %..any* %246, %..any** %247
	%248 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 1
	store i64 1, i64* %248
	%249 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 2
	store i64 1, i64* %249
	%250 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %27, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$1ad, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %250)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%251 = call i1 @.imgui-12.Button(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1ae, i64 0, i32 0), i64 9}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %251, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %29
	%252 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 0
	%253 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %253, %raw-6.Dynamic_Map** %252
	%254 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 1
	store i1 true, i1* %254
	%255 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 2
	store i64 40, i64* %255
	%256 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 3
	store i64 8, i64* %256
	%257 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 4
	store i64 32, i64* %257
	%258 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 5
	store i64 1, i64* %258
	%259 = load %__Map_Header, %__Map_Header* %29, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %30
	%260 = getelementptr inbounds %__Map_Key, %__Map_Key* %30, i64 0, i32 0
	store i64 9087275691730913177, i64* %260
	%261 = getelementptr inbounds %__Map_Key, %__Map_Key* %30, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1af, i64 0, i32 0), i64 20}, %..string* %261
	%262 = load %__Map_Key, %__Map_Key* %30, align 8
	store i1 zeroinitializer, i1* %31
	store i1 true, i1* %31
	%263 = bitcast i1* %31 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %259, %__Map_Key %262, %..rawptr %263)
	br label %if.done-2

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%264 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%265 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %264, i64 0
	%266 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %265, i64 0, i32 13
	%267 = load i32, i32* %266, align 4
	store %..any zeroinitializer, %..any* %32
	%268 = bitcast i32* %266 to %..rawptr
	%269 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%270 = getelementptr inbounds %..any, %..any* %32, i64 0, i32 0
	%271 = getelementptr inbounds %..any, %..any* %32, i64 0, i32 1
	store %Type_Info* %269, %Type_Info** %270
	store %..rawptr %268, %..rawptr* %271
	%272 = load %..any, %..any* %32, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %33
	store [1 x %..any] zeroinitializer, [1 x %..any]* %34
	%273 = getelementptr inbounds [1 x %..any], [1 x %..any]* %34, i64 0, i32 0
	store %..any %272, %..any* %273
	%274 = getelementptr inbounds [1 x %..any], [1 x %..any]* %34, i64 0, i32 0
	%275 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %33, i64 0, i32 0
	store %..any* %274, %..any** %275
	%276 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %33, i64 0, i32 1
	store i64 1, i64* %276
	%277 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %33, i64 0, i32 2
	store i64 1, i64* %277
	%278 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %33, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$1b0, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %278)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%279 = call i1 @.imgui-12.Button(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1b1, i64 0, i32 0), i64 9}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %279, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %35
	%280 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 0
	%281 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %281, %raw-6.Dynamic_Map** %280
	%282 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 1
	store i1 true, i1* %282
	%283 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 2
	store i64 40, i64* %283
	%284 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 3
	store i64 8, i64* %284
	%285 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 4
	store i64 32, i64* %285
	%286 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 5
	store i64 1, i64* %286
	%287 = load %__Map_Header, %__Map_Header* %35, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %36
	%288 = getelementptr inbounds %__Map_Key, %__Map_Key* %36, i64 0, i32 0
	store i64 1665422548027325, i64* %288
	%289 = getelementptr inbounds %__Map_Key, %__Map_Key* %36, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$1b2, i64 0, i32 0), i64 23}, %..string* %289
	%290 = load %__Map_Key, %__Map_Key* %36, align 8
	store i1 zeroinitializer, i1* %37
	store i1 true, i1* %37
	%291 = bitcast i1* %37 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %287, %__Map_Key %290, %..rawptr %291)
	br label %if.done-4

if.done-4:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%292 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 4
	%293 = load i32, i32* %292, align 4
	; SelectorExpr
	; SelectorExpr
	%294 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 3
	%295 = load i32, i32* %294, align 4
	store %..any zeroinitializer, %..any* %38
	%296 = bitcast i32* %292 to %..rawptr
	%297 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%298 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 0
	%299 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	store %Type_Info* %297, %Type_Info** %298
	store %..rawptr %296, %..rawptr* %299
	%300 = load %..any, %..any* %38, align 8
	store %..any zeroinitializer, %..any* %39
	%301 = bitcast i32* %294 to %..rawptr
	%302 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%303 = getelementptr inbounds %..any, %..any* %39, i64 0, i32 0
	%304 = getelementptr inbounds %..any, %..any* %39, i64 0, i32 1
	store %Type_Info* %302, %Type_Info** %303
	store %..rawptr %301, %..rawptr* %304
	%305 = load %..any, %..any* %39, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %40
	store [2 x %..any] zeroinitializer, [2 x %..any]* %41
	%306 = getelementptr inbounds [2 x %..any], [2 x %..any]* %41, i64 0, i32 0
	store %..any %300, %..any* %306
	%307 = getelementptr inbounds [2 x %..any], [2 x %..any]* %41, i64 0, i32 1
	store %..any %305, %..any* %307
	%308 = getelementptr inbounds [2 x %..any], [2 x %..any]* %41, i64 0, i32 0
	%309 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 0
	store %..any* %308, %..any** %309
	%310 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 1
	store i64 2, i64* %310
	%311 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 2
	store i64 2, i64* %311
	%312 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %40, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.__str$1b3, i64 0, i32 0), i64 33}, {%..any*, i64, i64} %312)
	; SelectorExpr
	call ccc void @igSeparator()
	; IfStmt
	; SelectorExpr
	%313 = call i1 @.imgui-12.CollapsingHeader(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$1b4, i64 0, i32 0), i64 16}, i32 0)
	br i1 %313, label %if.then-5, label %if.done-21

if.then-5:
	; SelectorExpr
	%314 = call i1 @.imgui-12.BeginChild(%..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1b5, i64 0, i32 0), i64 20}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, i1 true, i32 0)
	; SelectorExpr
	call ccc void @igColumns(i32 2, i8* zeroinitializer, i1 false)
	; suc
	store %..string zeroinitializer, %..string* %42
		; RangeStmt
	; status
	store %jaze_gl-14.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-14.DebugFunctionLoadStatus* %43
		; SelectorExpr
	; SelectorExpr
	%315 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 0
	%316 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %315, i64 0, i32 1
	store i64 zeroinitializer, i64* %44
	store i64 -1, i64* %44
	br label %for.index.loop-6

for.index.loop-6:
	%317 = load i64, i64* %44, align 8
	%318 = add i64 %317, 1
	store i64 %318, i64* %44
	%319 = load i64, i64* %316, align 8
	%320 = icmp slt i64 %318, %319
	br i1 %320, label %for.index.body-7, label %for.index.done-20

for.index.body-7:
	%321 = load i64, i64* %44, align 8
	%322 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %315, i64 0, i32 0
	%323 = load %jaze_gl-14.DebugFunctionLoadStatus*, %jaze_gl-14.DebugFunctionLoadStatus** %322, align 8
	%324 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %323, i64 %321
	%325 = load %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %324, align 8
	store %jaze_gl-14.DebugFunctionLoadStatus %325, %jaze_gl-14.DebugFunctionLoadStatus* %43
	; SelectorExpr
	; SelectorExpr
	%326 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %43, i64 0, i32 0
	%327 = load %..string, %..string* %326, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %45
	%328 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %45, align 8
	call void @.imgui-12.Text(%..string %327, {%..any*, i64, i64} %328)
	; IfStmt
	; SelectorExpr
	%329 = call ccc i1 @igIsItemHovered()
	br i1 %329, label %if.then-8, label %if.done-16

if.then-8:
	; SelectorExpr
	call ccc void @igBeginTooltip()
	; SelectorExpr
	call ccc void @igPushTextWrapPos(float 0x407c200000000000)
	; SelectorExpr
	; SelectorExpr
	%330 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %43, i64 0, i32 0
	%331 = load %..string, %..string* %330, align 8
	; SelectorExpr
	%332 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %43, i64 0, i32 1
	%333 = load i64, i64* %332, align 8
	store %..any zeroinitializer, %..any* %46
	%334 = bitcast %..string* %330 to %..rawptr
	%335 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%336 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 0
	%337 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 1
	store %Type_Info* %335, %Type_Info** %336
	store %..rawptr %334, %..rawptr* %337
	%338 = load %..any, %..any* %46, align 8
	store %..any zeroinitializer, %..any* %47
	%339 = bitcast i64* %332 to %..rawptr
	%340 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%341 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 0
	%342 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 1
	store %Type_Info* %340, %Type_Info** %341
	store %..rawptr %339, %..rawptr* %342
	%343 = load %..any, %..any* %47, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %48
	store [2 x %..any] zeroinitializer, [2 x %..any]* %49
	%344 = getelementptr inbounds [2 x %..any], [2 x %..any]* %49, i64 0, i32 0
	store %..any %338, %..any* %344
	%345 = getelementptr inbounds [2 x %..any], [2 x %..any]* %49, i64 0, i32 1
	store %..any %343, %..any* %345
	%346 = getelementptr inbounds [2 x %..any], [2 x %..any]* %49, i64 0, i32 0
	%347 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 0
	store %..any* %346, %..any** %347
	%348 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 1
	store i64 2, i64* %348
	%349 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 2
	store i64 2, i64* %349
	%350 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %48, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1b6, i64 0, i32 0), i64 9}, {%..any*, i64, i64} %350)
	; test1
	store %Type_Info.Procedure* zeroinitializer, %Type_Info.Procedure** %50
		; ok1
	store i1 zeroinitializer, i1* %51
		; SelectorExpr
	%351 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %43, i64 0, i32 2
	%352 = load %Type_Info*, %Type_Info** %351, align 8
	; cast - union_cast
	store {%Type_Info.Procedure*, i1} zeroinitializer, {%Type_Info.Procedure*, i1}* %52
	%353 = getelementptr inbounds %Type_Info, %Type_Info* %352, i64 0, i32 2 ; UnionTagPtr
	%354 = load i64, i64* %353, align 8
	%355 = icmp eq i64 %354, 10
	br i1 %355, label %union_cast.ok-9, label %union_cast.end-10

union_cast.ok-9:
	%356 = getelementptr inbounds {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %52, i64 0, i32 0
	%357 = getelementptr inbounds {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %52, i64 0, i32 1
	%358 = bitcast %Type_Info* %352 to %Type_Info.Procedure*
	store %Type_Info.Procedure* %358, %Type_Info.Procedure** %356
	store i1 true, i1* %357
	br label %union_cast.end-10

union_cast.end-10:
	%359 = load {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %52, align 8
	%360 = extractvalue {%Type_Info.Procedure*, i1} %359, 0
	%361 = extractvalue {%Type_Info.Procedure*, i1} %359, 1
	store %Type_Info.Procedure* %360, %Type_Info.Procedure** %50
	store i1 %361, i1* %51
	; test2
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %53
		; ok2
	store i1 zeroinitializer, i1* %54
		; SelectorExpr
	%362 = load %Type_Info.Procedure*, %Type_Info.Procedure** %50, align 8
	%363 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %362, i64 0
	%364 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %363, i64 0, i32 2
	%365 = load %Type_Info*, %Type_Info** %364, align 8
	; cast - union_cast
	store {%Type_Info.Tuple*, i1} zeroinitializer, {%Type_Info.Tuple*, i1}* %55
	%366 = getelementptr inbounds %Type_Info, %Type_Info* %365, i64 0, i32 2 ; UnionTagPtr
	%367 = load i64, i64* %366, align 8
	%368 = icmp eq i64 %367, 15
	br i1 %368, label %union_cast.ok-11, label %union_cast.end-12

union_cast.ok-11:
	%369 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %55, i64 0, i32 0
	%370 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %55, i64 0, i32 1
	%371 = bitcast %Type_Info* %365 to %Type_Info.Tuple*
	store %Type_Info.Tuple* %371, %Type_Info.Tuple** %369
	store i1 true, i1* %370
	br label %union_cast.end-12

union_cast.end-12:
	%372 = load {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %55, align 8
	%373 = extractvalue {%Type_Info.Tuple*, i1} %372, 0
	%374 = extractvalue {%Type_Info.Tuple*, i1} %372, 1
	store %Type_Info.Tuple* %373, %Type_Info.Tuple** %53
	store i1 %374, i1* %54
	; SelectorExpr
	%375 = load i1, i1* %51, align 1
	store %..any zeroinitializer, %..any* %56
	%376 = bitcast i1* %51 to %..rawptr
	%377 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%378 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 0
	%379 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 1
	store %Type_Info* %377, %Type_Info** %378
	store %..rawptr %376, %..rawptr* %379
	%380 = load %..any, %..any* %56, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %57
	store [1 x %..any] zeroinitializer, [1 x %..any]* %58
	%381 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	store %..any %380, %..any* %381
	%382 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	%383 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 0
	store %..any* %382, %..any** %383
	%384 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 1
	store i64 1, i64* %384
	%385 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 2
	store i64 1, i64* %385
	%386 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %57, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1b7, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %386)
	; SelectorExpr
	%387 = load i1, i1* %54, align 1
	store %..any zeroinitializer, %..any* %59
	%388 = bitcast i1* %54 to %..rawptr
	%389 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%390 = getelementptr inbounds %..any, %..any* %59, i64 0, i32 0
	%391 = getelementptr inbounds %..any, %..any* %59, i64 0, i32 1
	store %Type_Info* %389, %Type_Info** %390
	store %..rawptr %388, %..rawptr* %391
	%392 = load %..any, %..any* %59, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %60
	store [1 x %..any] zeroinitializer, [1 x %..any]* %61
	%393 = getelementptr inbounds [1 x %..any], [1 x %..any]* %61, i64 0, i32 0
	store %..any %392, %..any* %393
	%394 = getelementptr inbounds [1 x %..any], [1 x %..any]* %61, i64 0, i32 0
	%395 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 0
	store %..any* %394, %..any** %395
	%396 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 1
	store i64 1, i64* %396
	%397 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 2
	store i64 1, i64* %397
	%398 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %60, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1b8, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %398)
	; SelectorExpr
	; SelectorExpr
	%399 = load %Type_Info.Tuple*, %Type_Info.Tuple** %53, align 8
	%400 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %399, i64 0
	%401 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %400, i64 0, i32 2
	%402 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %401, i64 0, i32 1
	%403 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %402, align 8
	%404 = extractvalue {%..string*, i64, i64} %403, 1
	store %..any zeroinitializer, %..any* %62
	store i64 zeroinitializer, i64* %63
	store i64 %404, i64* %63
	%405 = bitcast i64* %63 to %..rawptr
	%406 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%407 = getelementptr inbounds %..any, %..any* %62, i64 0, i32 0
	%408 = getelementptr inbounds %..any, %..any* %62, i64 0, i32 1
	store %Type_Info* %406, %Type_Info** %407
	store %..rawptr %405, %..rawptr* %408
	%409 = load %..any, %..any* %62, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %64
	store [1 x %..any] zeroinitializer, [1 x %..any]* %65
	%410 = getelementptr inbounds [1 x %..any], [1 x %..any]* %65, i64 0, i32 0
	store %..any %409, %..any* %410
	%411 = getelementptr inbounds [1 x %..any], [1 x %..any]* %65, i64 0, i32 0
	%412 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %64, i64 0, i32 0
	store %..any* %411, %..any** %412
	%413 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %64, i64 0, i32 1
	store i64 1, i64* %413
	%414 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %64, i64 0, i32 2
	store i64 1, i64* %414
	%415 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %64, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1b9, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %415)
	; RangeStmt
	; info
	store %..string zeroinitializer, %..string* %66
		; SelectorExpr
	%416 = load %Type_Info.Tuple*, %Type_Info.Tuple** %53, align 8
	%417 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %416, i64 0
	%418 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %417, i64 0, i32 2
	%419 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %418, i64 0, i32 1
	%420 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %419, align 8
	store i64 zeroinitializer, i64* %67
	%421 = extractvalue {%..string*, i64, i64} %420, 1
	store i64 %421, i64* %67
	store i64 zeroinitializer, i64* %68
	store i64 -1, i64* %68
	br label %for.index.loop-13

for.index.loop-13:
	%422 = load i64, i64* %68, align 8
	%423 = add i64 %422, 1
	store i64 %423, i64* %68
	%424 = load i64, i64* %67, align 8
	%425 = icmp slt i64 %423, %424
	br i1 %425, label %for.index.body-14, label %for.index.done-15

for.index.body-14:
	%426 = load i64, i64* %68, align 8
	%427 = extractvalue {%..string*, i64, i64} %420, 0
	%428 = getelementptr inbounds %..string, %..string* %427, i64 %426
	%429 = load %..string, %..string* %428, align 8
	store %..string %429, %..string* %66
	; SelectorExpr
	%430 = load %..string, %..string* %66, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %69
	%431 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %69, align 8
	call void @.imgui-12.Text(%..string %430, {%..any*, i64, i64} %431)
	br label %for.index.loop-13

for.index.done-15:
	; SelectorExpr
	call ccc void @igPopTextWrapPos()
	; SelectorExpr
	call ccc void @igEndTooltip()
	br label %if.done-16

if.done-16:
	; SelectorExpr
	call ccc void @igNextColumn()
	; IfStmt
	; SelectorExpr
	%432 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %43, i64 0, i32 3
	%433 = load i1, i1* %432, align 1
	br i1 %433, label %if.then-17, label %if.else-18

if.then-17:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$1ba, i64 0, i32 0), i64 4}, %..string* %42
	br label %if.done-19

if.else-18:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1bb, i64 0, i32 0), i64 5}, %..string* %42
	br label %if.done-19

if.done-19:
	; SelectorExpr
	%434 = load %..string, %..string* %42, align 8
	store %..any zeroinitializer, %..any* %70
	%435 = bitcast %..string* %42 to %..rawptr
	%436 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%437 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 0
	%438 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 1
	store %Type_Info* %436, %Type_Info** %437
	store %..rawptr %435, %..rawptr* %438
	%439 = load %..any, %..any* %70, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %71
	store [1 x %..any] zeroinitializer, [1 x %..any]* %72
	%440 = getelementptr inbounds [1 x %..any], [1 x %..any]* %72, i64 0, i32 0
	store %..any %439, %..any* %440
	%441 = getelementptr inbounds [1 x %..any], [1 x %..any]* %72, i64 0, i32 0
	%442 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %71, i64 0, i32 0
	store %..any* %441, %..any** %442
	%443 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %71, i64 0, i32 1
	store i64 1, i64* %443
	%444 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %71, i64 0, i32 2
	store i64 1, i64* %444
	%445 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %71, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1bc, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %445)
	; SelectorExpr
	call ccc void @igNextColumn()
	br label %for.index.loop-6

for.index.done-20:
	; SelectorExpr
	call ccc void @igColumns(i32 1, i8* zeroinitializer, i1 false)
	; SelectorExpr
	call ccc void @igEndChild()
	br label %if.done-21

if.done-21:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%446 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.jaze_gl-14.DebugInfo, i64 0, i32 1
	%447 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %446, align 8
	%448 = extractvalue {i32*, i64, i64,%Allocator} %447, 1
	store %..any zeroinitializer, %..any* %73
	store i64 zeroinitializer, i64* %74
	store i64 %448, i64* %74
	%449 = bitcast i64* %74 to %..rawptr
	%450 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%451 = getelementptr inbounds %..any, %..any* %73, i64 0, i32 0
	%452 = getelementptr inbounds %..any, %..any* %73, i64 0, i32 1
	store %Type_Info* %450, %Type_Info** %451
	store %..rawptr %449, %..rawptr* %452
	%453 = load %..any, %..any* %73, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %75
	store [1 x %..any] zeroinitializer, [1 x %..any]* %76
	%454 = getelementptr inbounds [1 x %..any], [1 x %..any]* %76, i64 0, i32 0
	store %..any %453, %..any* %454
	%455 = getelementptr inbounds [1 x %..any], [1 x %..any]* %76, i64 0, i32 0
	%456 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %75, i64 0, i32 0
	store %..any* %455, %..any** %456
	%457 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %75, i64 0, i32 1
	store i64 1, i64* %457
	%458 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %75, i64 0, i32 2
	store i64 1, i64* %458
	%459 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %75, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$1bd, i64 0, i32 0), i64 29}, {%..any*, i64, i64} %459)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%460 = call i1 @.imgui-12.Button(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1be, i64 0, i32 0), i64 13}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %460, label %if.then-22, label %if.done-23

if.then-22:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %77
	%461 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 0
	%462 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %462, %raw-6.Dynamic_Map** %461
	%463 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 1
	store i1 true, i1* %463
	%464 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 2
	store i64 40, i64* %464
	%465 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 3
	store i64 8, i64* %465
	%466 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 4
	store i64 32, i64* %466
	%467 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 5
	store i64 1, i64* %467
	%468 = load %__Map_Header, %__Map_Header* %77, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %78
	%469 = getelementptr inbounds %__Map_Key, %__Map_Key* %78, i64 0, i32 0
	store i64 -1305467488239390059, i64* %469
	%470 = getelementptr inbounds %__Map_Key, %__Map_Key* %78, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1bf, i64 0, i32 0), i64 21}, %..string* %470
	%471 = load %__Map_Key, %__Map_Key* %78, align 8
	store i1 zeroinitializer, i1* %79
	store i1 true, i1* %79
	%472 = bitcast i1* %79 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %468, %__Map_Key %471, %..rawptr %472)
	br label %if.done-23

if.done-23:
	; SelectorExpr
	call ccc void @igEnd()
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %80
	store %__Map_Header zeroinitializer, %__Map_Header* %81
	%473 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 0
	%474 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %474, %raw-6.Dynamic_Map** %473
	%475 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 1
	store i1 true, i1* %475
	%476 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 2
	store i64 40, i64* %476
	%477 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 3
	store i64 8, i64* %477
	%478 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 4
	store i64 32, i64* %478
	%479 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 5
	store i64 1, i64* %479
	%480 = load %__Map_Header, %__Map_Header* %81, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %82
	%481 = getelementptr inbounds %__Map_Key, %__Map_Key* %82, i64 0, i32 0
	store i64 9087275691730913177, i64* %481
	%482 = getelementptr inbounds %__Map_Key, %__Map_Key* %82, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1c0, i64 0, i32 0), i64 20}, %..string* %482
	%483 = load %__Map_Key, %__Map_Key* %82, align 8
	%484 = call %..rawptr @.__dynamic_map_get(%__Map_Header %480, %__Map_Key %483)
	%485 = icmp ne %..rawptr %484, null
	%486 = getelementptr inbounds {i1, i1}, {i1, i1}* %80, i64 0, i32 1
	store i1 %485, i1* %486
	br i1 %485, label %map.get.then-24, label %map.get.done-25

map.get.then-24:
	%487 = getelementptr inbounds {i1, i1}, {i1, i1}* %80, i64 0, i32 0
	%488 = bitcast %..rawptr %484 to i1*
	%489 = load i1, i1* %488, align 1
	store i1 %489, i1* %487
	br label %map.get.done-25

map.get.done-25:
	%490 = getelementptr inbounds {i1, i1}, {i1, i1}* %80, i64 0, i32 0
	%491 = load i1, i1* %490, align 1
	%492 = icmp eq i1 %491, true
	br i1 %492, label %if.then-26, label %if.done-29

if.then-26:
	; b
	store i1 zeroinitializer, i1* %83
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %84
	store %__Map_Header zeroinitializer, %__Map_Header* %85
	%493 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 0
	%494 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %494, %raw-6.Dynamic_Map** %493
	%495 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 1
	store i1 true, i1* %495
	%496 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 2
	store i64 40, i64* %496
	%497 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 3
	store i64 8, i64* %497
	%498 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 4
	store i64 32, i64* %498
	%499 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 5
	store i64 1, i64* %499
	%500 = load %__Map_Header, %__Map_Header* %85, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %86
	%501 = getelementptr inbounds %__Map_Key, %__Map_Key* %86, i64 0, i32 0
	store i64 9087275691730913177, i64* %501
	%502 = getelementptr inbounds %__Map_Key, %__Map_Key* %86, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1c1, i64 0, i32 0), i64 20}, %..string* %502
	%503 = load %__Map_Key, %__Map_Key* %86, align 8
	%504 = call %..rawptr @.__dynamic_map_get(%__Map_Header %500, %__Map_Key %503)
	%505 = icmp ne %..rawptr %504, null
	%506 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 1
	store i1 %505, i1* %506
	br i1 %505, label %map.get.then-27, label %map.get.done-28

map.get.then-27:
	%507 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 0
	%508 = bitcast %..rawptr %504 to i1*
	%509 = load i1, i1* %508, align 1
	store i1 %509, i1* %507
	br label %map.get.done-28

map.get.done-28:
	%510 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 0
	%511 = load i1, i1* %510, align 1
	store i1 %511, i1* %83
	; SelectorExpr
	%512 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%513 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %512, i64 0
	%514 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %513, i64 0, i32 0
	%515 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %514, align 8
	%516 = getelementptr inbounds i1, i1* %83, i64 0
	call void @.jaze_debug_windows-16.OpenGLExtensions(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1c2, i64 0, i32 0), i64 15}, {%..string*, i64, i64,%Allocator} %515, i1* %516)
	; AssignStmt
	; IndexExpr
	%517 = load i1, i1* %83, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %87
	%518 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 0
	%519 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %519, %raw-6.Dynamic_Map** %518
	%520 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 1
	store i1 true, i1* %520
	%521 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 2
	store i64 40, i64* %521
	%522 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 3
	store i64 8, i64* %522
	%523 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 4
	store i64 32, i64* %523
	%524 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 5
	store i64 1, i64* %524
	%525 = load %__Map_Header, %__Map_Header* %87, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %88
	%526 = getelementptr inbounds %__Map_Key, %__Map_Key* %88, i64 0, i32 0
	store i64 9087275691730913177, i64* %526
	%527 = getelementptr inbounds %__Map_Key, %__Map_Key* %88, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1c3, i64 0, i32 0), i64 20}, %..string* %527
	%528 = load %__Map_Key, %__Map_Key* %88, align 8
	store i1 zeroinitializer, i1* %89
	store i1 %517, i1* %89
	%529 = bitcast i1* %89 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %525, %__Map_Key %528, %..rawptr %529)
	br label %if.done-29

if.done-29:
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %90
	store %__Map_Header zeroinitializer, %__Map_Header* %91
	%530 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 0
	%531 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %531, %raw-6.Dynamic_Map** %530
	%532 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 1
	store i1 true, i1* %532
	%533 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 2
	store i64 40, i64* %533
	%534 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 3
	store i64 8, i64* %534
	%535 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 4
	store i64 32, i64* %535
	%536 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 5
	store i64 1, i64* %536
	%537 = load %__Map_Header, %__Map_Header* %91, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %92
	%538 = getelementptr inbounds %__Map_Key, %__Map_Key* %92, i64 0, i32 0
	store i64 1665422548027325, i64* %538
	%539 = getelementptr inbounds %__Map_Key, %__Map_Key* %92, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$1c4, i64 0, i32 0), i64 23}, %..string* %539
	%540 = load %__Map_Key, %__Map_Key* %92, align 8
	%541 = call %..rawptr @.__dynamic_map_get(%__Map_Header %537, %__Map_Key %540)
	%542 = icmp ne %..rawptr %541, null
	%543 = getelementptr inbounds {i1, i1}, {i1, i1}* %90, i64 0, i32 1
	store i1 %542, i1* %543
	br i1 %542, label %map.get.then-30, label %map.get.done-31

map.get.then-30:
	%544 = getelementptr inbounds {i1, i1}, {i1, i1}* %90, i64 0, i32 0
	%545 = bitcast %..rawptr %541 to i1*
	%546 = load i1, i1* %545, align 1
	store i1 %546, i1* %544
	br label %map.get.done-31

map.get.done-31:
	%547 = getelementptr inbounds {i1, i1}, {i1, i1}* %90, i64 0, i32 0
	%548 = load i1, i1* %547, align 1
	%549 = icmp eq i1 %548, true
	br i1 %549, label %if.then-32, label %if.done-35

if.then-32:
	; b
	store i1 zeroinitializer, i1* %93
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %94
	store %__Map_Header zeroinitializer, %__Map_Header* %95
	%550 = getelementptr inbounds %__Map_Header, %__Map_Header* %95, i64 0, i32 0
	%551 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %551, %raw-6.Dynamic_Map** %550
	%552 = getelementptr inbounds %__Map_Header, %__Map_Header* %95, i64 0, i32 1
	store i1 true, i1* %552
	%553 = getelementptr inbounds %__Map_Header, %__Map_Header* %95, i64 0, i32 2
	store i64 40, i64* %553
	%554 = getelementptr inbounds %__Map_Header, %__Map_Header* %95, i64 0, i32 3
	store i64 8, i64* %554
	%555 = getelementptr inbounds %__Map_Header, %__Map_Header* %95, i64 0, i32 4
	store i64 32, i64* %555
	%556 = getelementptr inbounds %__Map_Header, %__Map_Header* %95, i64 0, i32 5
	store i64 1, i64* %556
	%557 = load %__Map_Header, %__Map_Header* %95, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %96
	%558 = getelementptr inbounds %__Map_Key, %__Map_Key* %96, i64 0, i32 0
	store i64 1665422548027325, i64* %558
	%559 = getelementptr inbounds %__Map_Key, %__Map_Key* %96, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$1c5, i64 0, i32 0), i64 23}, %..string* %559
	%560 = load %__Map_Key, %__Map_Key* %96, align 8
	%561 = call %..rawptr @.__dynamic_map_get(%__Map_Header %557, %__Map_Key %560)
	%562 = icmp ne %..rawptr %561, null
	%563 = getelementptr inbounds {i1, i1}, {i1, i1}* %94, i64 0, i32 1
	store i1 %562, i1* %563
	br i1 %562, label %map.get.then-33, label %map.get.done-34

map.get.then-33:
	%564 = getelementptr inbounds {i1, i1}, {i1, i1}* %94, i64 0, i32 0
	%565 = bitcast %..rawptr %561 to i1*
	%566 = load i1, i1* %565, align 1
	store i1 %566, i1* %564
	br label %map.get.done-34

map.get.done-34:
	%567 = getelementptr inbounds {i1, i1}, {i1, i1}* %94, i64 0, i32 0
	%568 = load i1, i1* %567, align 1
	store i1 %568, i1* %93
	; SelectorExpr
	%569 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%570 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %569, i64 0
	%571 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %570, i64 0, i32 1
	%572 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %571, align 8
	%573 = getelementptr inbounds i1, i1* %93, i64 0
	call void @.jaze_debug_windows-16.OpenGLExtensions(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1c6, i64 0, i32 0), i64 14}, {%..string*, i64, i64,%Allocator} %572, i1* %573)
	; AssignStmt
	; IndexExpr
	%574 = load i1, i1* %93, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %97
	%575 = getelementptr inbounds %__Map_Header, %__Map_Header* %97, i64 0, i32 0
	%576 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %576, %raw-6.Dynamic_Map** %575
	%577 = getelementptr inbounds %__Map_Header, %__Map_Header* %97, i64 0, i32 1
	store i1 true, i1* %577
	%578 = getelementptr inbounds %__Map_Header, %__Map_Header* %97, i64 0, i32 2
	store i64 40, i64* %578
	%579 = getelementptr inbounds %__Map_Header, %__Map_Header* %97, i64 0, i32 3
	store i64 8, i64* %579
	%580 = getelementptr inbounds %__Map_Header, %__Map_Header* %97, i64 0, i32 4
	store i64 32, i64* %580
	%581 = getelementptr inbounds %__Map_Header, %__Map_Header* %97, i64 0, i32 5
	store i64 1, i64* %581
	%582 = load %__Map_Header, %__Map_Header* %97, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %98
	%583 = getelementptr inbounds %__Map_Key, %__Map_Key* %98, i64 0, i32 0
	store i64 1665422548027325, i64* %583
	%584 = getelementptr inbounds %__Map_Key, %__Map_Key* %98, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$1c7, i64 0, i32 0), i64 23}, %..string* %584
	%585 = load %__Map_Key, %__Map_Key* %98, align 8
	store i1 zeroinitializer, i1* %99
	store i1 %574, i1* %99
	%586 = bitcast i1* %99 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %582, %__Map_Key %585, %..rawptr %586)
	br label %if.done-35

if.done-35:
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %100
	store %__Map_Header zeroinitializer, %__Map_Header* %101
	%587 = getelementptr inbounds %__Map_Header, %__Map_Header* %101, i64 0, i32 0
	%588 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %588, %raw-6.Dynamic_Map** %587
	%589 = getelementptr inbounds %__Map_Header, %__Map_Header* %101, i64 0, i32 1
	store i1 true, i1* %589
	%590 = getelementptr inbounds %__Map_Header, %__Map_Header* %101, i64 0, i32 2
	store i64 40, i64* %590
	%591 = getelementptr inbounds %__Map_Header, %__Map_Header* %101, i64 0, i32 3
	store i64 8, i64* %591
	%592 = getelementptr inbounds %__Map_Header, %__Map_Header* %101, i64 0, i32 4
	store i64 32, i64* %592
	%593 = getelementptr inbounds %__Map_Header, %__Map_Header* %101, i64 0, i32 5
	store i64 1, i64* %593
	%594 = load %__Map_Header, %__Map_Header* %101, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %102
	%595 = getelementptr inbounds %__Map_Key, %__Map_Key* %102, i64 0, i32 0
	store i64 -1305467488239390059, i64* %595
	%596 = getelementptr inbounds %__Map_Key, %__Map_Key* %102, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1c8, i64 0, i32 0), i64 21}, %..string* %596
	%597 = load %__Map_Key, %__Map_Key* %102, align 8
	%598 = call %..rawptr @.__dynamic_map_get(%__Map_Header %594, %__Map_Key %597)
	%599 = icmp ne %..rawptr %598, null
	%600 = getelementptr inbounds {i1, i1}, {i1, i1}* %100, i64 0, i32 1
	store i1 %599, i1* %600
	br i1 %599, label %map.get.then-36, label %map.get.done-37

map.get.then-36:
	%601 = getelementptr inbounds {i1, i1}, {i1, i1}* %100, i64 0, i32 0
	%602 = bitcast %..rawptr %598 to i1*
	%603 = load i1, i1* %602, align 1
	store i1 %603, i1* %601
	br label %map.get.done-37

map.get.done-37:
	%604 = getelementptr inbounds {i1, i1}, {i1, i1}* %100, i64 0, i32 0
	%605 = load i1, i1* %604, align 1
	%606 = icmp eq i1 %605, true
	br i1 %606, label %if.then-38, label %if.done-41

if.then-38:
	; b
	store i1 zeroinitializer, i1* %103
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %104
	store %__Map_Header zeroinitializer, %__Map_Header* %105
	%607 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 0
	%608 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %608, %raw-6.Dynamic_Map** %607
	%609 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 1
	store i1 true, i1* %609
	%610 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 2
	store i64 40, i64* %610
	%611 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 3
	store i64 8, i64* %611
	%612 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 4
	store i64 32, i64* %612
	%613 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 5
	store i64 1, i64* %613
	%614 = load %__Map_Header, %__Map_Header* %105, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %106
	%615 = getelementptr inbounds %__Map_Key, %__Map_Key* %106, i64 0, i32 0
	store i64 -1305467488239390059, i64* %615
	%616 = getelementptr inbounds %__Map_Key, %__Map_Key* %106, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1c9, i64 0, i32 0), i64 21}, %..string* %616
	%617 = load %__Map_Key, %__Map_Key* %106, align 8
	%618 = call %..rawptr @.__dynamic_map_get(%__Map_Header %614, %__Map_Key %617)
	%619 = icmp ne %..rawptr %618, null
	%620 = getelementptr inbounds {i1, i1}, {i1, i1}* %104, i64 0, i32 1
	store i1 %619, i1* %620
	br i1 %619, label %map.get.then-39, label %map.get.done-40

map.get.then-39:
	%621 = getelementptr inbounds {i1, i1}, {i1, i1}* %104, i64 0, i32 0
	%622 = bitcast %..rawptr %618 to i1*
	%623 = load i1, i1* %622, align 1
	store i1 %623, i1* %621
	br label %map.get.done-40

map.get.done-40:
	%624 = getelementptr inbounds {i1, i1}, {i1, i1}* %104, i64 0, i32 0
	%625 = load i1, i1* %624, align 1
	store i1 %625, i1* %103
	%626 = getelementptr inbounds i1, i1* %103, i64 0
	call void @.jaze_debug_windows-16.OpenGLTextureOverview(i1* %626)
	; AssignStmt
	; IndexExpr
	%627 = load i1, i1* %103, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %107
	%628 = getelementptr inbounds %__Map_Header, %__Map_Header* %107, i64 0, i32 0
	%629 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-16.GlobalDebugWndBools to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %629, %raw-6.Dynamic_Map** %628
	%630 = getelementptr inbounds %__Map_Header, %__Map_Header* %107, i64 0, i32 1
	store i1 true, i1* %630
	%631 = getelementptr inbounds %__Map_Header, %__Map_Header* %107, i64 0, i32 2
	store i64 40, i64* %631
	%632 = getelementptr inbounds %__Map_Header, %__Map_Header* %107, i64 0, i32 3
	store i64 8, i64* %632
	%633 = getelementptr inbounds %__Map_Header, %__Map_Header* %107, i64 0, i32 4
	store i64 32, i64* %633
	%634 = getelementptr inbounds %__Map_Header, %__Map_Header* %107, i64 0, i32 5
	store i64 1, i64* %634
	%635 = load %__Map_Header, %__Map_Header* %107, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %108
	%636 = getelementptr inbounds %__Map_Key, %__Map_Key* %108, i64 0, i32 0
	store i64 -1305467488239390059, i64* %636
	%637 = getelementptr inbounds %__Map_Key, %__Map_Key* %108, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1ca, i64 0, i32 0), i64 21}, %..string* %637
	%638 = load %__Map_Key, %__Map_Key* %108, align 8
	store i1 zeroinitializer, i1* %109
	store i1 %627, i1* %109
	%639 = bitcast i1* %109 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %635, %__Map_Key %638, %..rawptr %639)
	br label %if.done-41

if.done-41:
	ret void
}

define void @.jaze_debug_windows-16.Win32VarsInfo(%main-2.Win32Vars_t* %vars, i1* %show) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca i1*, align 8
	%2 = alloca %..any, align 8
	%3 = alloca i64, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %..any, align 8
	%7 = alloca i64, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [1 x %..any], align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [2 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca i64, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [1 x %..any], align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%18 = load i1*, i1** %1, align 8
	%19 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1cb, i64 0, i32 0), i64 14}, i1* %18, i32 160)
	; SelectorExpr
	; SelectorExpr
	%20 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%21 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %20, i64 0
	%22 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %21, i64 0, i32 1
	%23 = load %..rawptr, %..rawptr* %22, align 8
	; cast - cast
	%24 = ptrtoint %..rawptr %23 to i64
	store %..any zeroinitializer, %..any* %2
	store i64 zeroinitializer, i64* %3
	store i64 %24, i64* %3
	%25 = bitcast i64* %3 to %..rawptr
	%26 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%27 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %2, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%30 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %29, %..any* %30
	%31 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%32 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %31, %..any** %32
	%33 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %33
	%34 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %34
	%35 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1cc, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %35)
	; SelectorExpr
	; SelectorExpr
	%36 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%37 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %36, i64 0
	%38 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %37, i64 0, i32 2
	%39 = load %..rawptr, %..rawptr* %38, align 8
	; cast - cast
	%40 = ptrtoint %..rawptr %39 to i64
	store %..any zeroinitializer, %..any* %6
	store i64 zeroinitializer, i64* %7
	store i64 %40, i64* %7
	%41 = bitcast i64* %7 to %..rawptr
	%42 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%43 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%44 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %42, %Type_Info** %43
	store %..rawptr %41, %..rawptr* %44
	%45 = load %..any, %..any* %6, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [1 x %..any] zeroinitializer, [1 x %..any]* %9
	%46 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	store %..any %45, %..any* %46
	%47 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	%48 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %47, %..any** %48
	%49 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %49
	%50 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %50
	%51 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1cd, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %51)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%52 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%53 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %52, i64 0
	%54 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %53, i64 0, i32 3
	%55 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %54, i64 0, i32 1, i32 0
	%56 = load float, float* %55, align 4
	; SelectorExpr
	; SelectorExpr
	%57 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %57, i64 0
	%59 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %58, i64 0, i32 3
	%60 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %59, i64 0, i32 1, i32 1
	%61 = load float, float* %60, align 4
	store %..any zeroinitializer, %..any* %10
	%62 = bitcast float* %55 to %..rawptr
	%63 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%64 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%65 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %63, %Type_Info** %64
	store %..rawptr %62, %..rawptr* %65
	%66 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%67 = bitcast float* %60 to %..rawptr
	%68 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%69 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%70 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %68, %Type_Info** %69
	store %..rawptr %67, %..rawptr* %70
	%71 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [2 x %..any] zeroinitializer, [2 x %..any]* %13
	%72 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	store %..any %66, %..any* %72
	%73 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 1
	store %..any %71, %..any* %73
	%74 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %74, %..any** %75
	%76 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 2, i64* %76
	%77 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 2, i64* %77
	%78 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$1ce, i64 0, i32 0), i64 35}, {%..any*, i64, i64} %78)
	; SelectorExpr
	; SelectorExpr
	%79 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%80 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %79, i64 0
	%81 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %80, i64 0, i32 4
	%82 = load %..rawptr, %..rawptr* %81, align 8
	; cast - cast
	%83 = ptrtoint %..rawptr %82 to i64
	store %..any zeroinitializer, %..any* %14
	store i64 zeroinitializer, i64* %15
	store i64 %83, i64* %15
	%84 = bitcast i64* %15 to %..rawptr
	%85 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%86 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%87 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %85, %Type_Info** %86
	store %..rawptr %84, %..rawptr* %87
	%88 = load %..any, %..any* %14, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [1 x %..any] zeroinitializer, [1 x %..any]* %17
	%89 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	store %..any %88, %..any* %89
	%90 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	%91 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %90, %..any** %91
	%92 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 1, i64* %92
	%93 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 1, i64* %93
	%94 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1cf, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %94)
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.ShowXinputInfoWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [1 x %..any], align 8
	%4 = alloca %..any, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	%6 = alloca [1 x %..any], align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [2 x %..any], align 8
	%11 = alloca %jaze_xinput-18.DebugFunctionLoadStatus, align 8
	%12 = alloca i64, align 8
	%13 = alloca {%..any*, i64, i64}, align 8
	%14 = alloca %..any, align 8
	%15 = alloca %..any, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [2 x %..any], align 8
	%18 = alloca i64, align 8
	%19 = alloca i64, align 8
	%20 = alloca i64, align 8
	%21 = alloca %jaze_xinput-18.Capabilities, align 1
	%22 = alloca i32, align 4
	%23 = alloca %..any, align 8
	%24 = alloca i64, align 8
	%25 = alloca %..any, align 8
	%26 = alloca %..string, align 8
	%27 = alloca {%..any*, i64, i64}, align 8
	%28 = alloca [2 x %..any], align 8
	%29 = alloca {%..any*, i64, i64}, align 8
	%30 = alloca %..any, align 8
	%31 = alloca {%..any*, i64, i64}, align 8
	%32 = alloca [1 x %..any], align 8
	%33 = alloca {%..any*, i64, i64}, align 8
	%34 = alloca %..any, align 8
	%35 = alloca i1, align 1
	%36 = alloca {%..any*, i64, i64}, align 8
	%37 = alloca [1 x %..any], align 8
	%38 = alloca %..any, align 8
	%39 = alloca i1, align 1
	%40 = alloca {%..any*, i64, i64}, align 8
	%41 = alloca [1 x %..any], align 8
	%42 = alloca %..any, align 8
	%43 = alloca i1, align 1
	%44 = alloca {%..any*, i64, i64}, align 8
	%45 = alloca [1 x %..any], align 8
	%46 = alloca %..any, align 8
	%47 = alloca i1, align 1
	%48 = alloca {%..any*, i64, i64}, align 8
	%49 = alloca [1 x %..any], align 8
	%50 = alloca %..any, align 8
	%51 = alloca i1, align 1
	%52 = alloca {%..any*, i64, i64}, align 8
	%53 = alloca [1 x %..any], align 8
	%54 = alloca {%..any*, i64, i64}, align 8
	%55 = alloca %..string, align 8
	%56 = alloca %..any, align 8
	%57 = alloca {%..any*, i64, i64}, align 8
	%58 = alloca [1 x %..any], align 8
	%59 = alloca %..string, align 8
	%60 = alloca %..any, align 8
	%61 = alloca {%..any*, i64, i64}, align 8
	%62 = alloca [1 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%63 = load i1*, i1** %0, align 8
	%64 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$1d0, i64 0, i32 0), i64 11}, i1* %63, i32 160)
	; SelectorExpr
	; SelectorExpr
	%65 = load i64, i64* @.jaze_xinput-18.Version, align 8
	store %..any zeroinitializer, %..any* %1
	%66 = bitcast i64* @.jaze_xinput-18.Version to %..rawptr
	%67 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 158
	%68 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%69 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	store %Type_Info* %67, %Type_Info** %68
	store %..rawptr %66, %..rawptr* %69
	%70 = load %..any, %..any* %1, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	store [1 x %..any] zeroinitializer, [1 x %..any]* %3
	%71 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	store %..any %70, %..any* %71
	%72 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 0
	store %..any* %72, %..any** %73
	%74 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %74
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %75
	%76 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$1d1, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %76)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%77 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 1
	%78 = load i64, i64* %77, align 8
	; cast - cast
	store %..any zeroinitializer, %..any* %4
	%79 = bitcast i64* %77 to %..rawptr
	%80 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%81 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%82 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %80, %Type_Info** %81
	store %..rawptr %79, %..rawptr* %82
	%83 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	store [1 x %..any] zeroinitializer, [1 x %..any]* %6
	%84 = getelementptr inbounds [1 x %..any], [1 x %..any]* %6, i64 0, i32 0
	store %..any %83, %..any* %84
	%85 = getelementptr inbounds [1 x %..any], [1 x %..any]* %6, i64 0, i32 0
	%86 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 0
	store %..any* %85, %..any** %86
	%87 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 1
	store i64 1, i64* %87
	%88 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 2
	store i64 1, i64* %88
	%89 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1d2, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %89)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%90 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 3
	%91 = load i32, i32* %90, align 4
	; SelectorExpr
	; SelectorExpr
	%92 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 2
	%93 = load i32, i32* %92, align 4
	store %..any zeroinitializer, %..any* %7
	%94 = bitcast i32* %90 to %..rawptr
	%95 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%96 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%97 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %95, %Type_Info** %96
	store %..rawptr %94, %..rawptr* %97
	%98 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%99 = bitcast i32* %92 to %..rawptr
	%100 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%101 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%102 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %100, %Type_Info** %101
	store %..rawptr %99, %..rawptr* %102
	%103 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [2 x %..any] zeroinitializer, [2 x %..any]* %10
	%104 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	store %..any %98, %..any* %104
	%105 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 1
	store %..any %103, %..any* %105
	%106 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	%107 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %106, %..any** %107
	%108 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 2, i64* %108
	%109 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 2, i64* %109
	%110 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.__str$1d3, i64 0, i32 0), i64 33}, {%..any*, i64, i64} %110)
	; IfStmt
	; SelectorExpr
	%111 = call i1 @.imgui-12.CollapsingHeader(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$1d4, i64 0, i32 0), i64 16}, i32 0)
	br i1 %111, label %if.then-1, label %if.done-5

if.then-1:
	; SelectorExpr
	%112 = call i1 @.imgui-12.BeginChild(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1d5, i64 0, i32 0), i64 9}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, i1 true, i32 0)
	; SelectorExpr
	call ccc void @igColumns(i32 2, i8* zeroinitializer, i1 false)
	; RangeStmt
	; status
	store %jaze_xinput-18.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-18.DebugFunctionLoadStatus* %11
		; SelectorExpr
	; SelectorExpr
	%113 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 0
	%114 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %113, i64 0, i32 1
	store i64 zeroinitializer, i64* %12
	store i64 -1, i64* %12
	br label %for.index.loop-2

for.index.loop-2:
	%115 = load i64, i64* %12, align 8
	%116 = add i64 %115, 1
	store i64 %116, i64* %12
	%117 = load i64, i64* %114, align 8
	%118 = icmp slt i64 %116, %117
	br i1 %118, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%119 = load i64, i64* %12, align 8
	%120 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %113, i64 0, i32 0
	%121 = load %jaze_xinput-18.DebugFunctionLoadStatus*, %jaze_xinput-18.DebugFunctionLoadStatus** %120, align 8
	%122 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %121, i64 %119
	%123 = load %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %122, align 8
	store %jaze_xinput-18.DebugFunctionLoadStatus %123, %jaze_xinput-18.DebugFunctionLoadStatus* %11
	; SelectorExpr
	; SelectorExpr
	%124 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %11, i64 0, i32 0
	%125 = load %..string, %..string* %124, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %13
	%126 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %13, align 8
	call void @.imgui-12.Text(%..string %125, {%..any*, i64, i64} %126)
	; SelectorExpr
	call ccc void @igNextColumn()
	; SelectorExpr
	; SelectorExpr
	%127 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %11, i64 0, i32 3
	%128 = load i1, i1* %127, align 1
	; SelectorExpr
	%129 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %11, i64 0, i32 1
	%130 = load i64, i64* %129, align 8
	store %..any zeroinitializer, %..any* %14
	%131 = bitcast i1* %127 to %..rawptr
	%132 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%133 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%134 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %132, %Type_Info** %133
	store %..rawptr %131, %..rawptr* %134
	%135 = load %..any, %..any* %14, align 8
	store %..any zeroinitializer, %..any* %15
	%136 = bitcast i64* %129 to %..rawptr
	%137 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%138 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%139 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	store %Type_Info* %137, %Type_Info** %138
	store %..rawptr %136, %..rawptr* %139
	%140 = load %..any, %..any* %15, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [2 x %..any] zeroinitializer, [2 x %..any]* %17
	%141 = getelementptr inbounds [2 x %..any], [2 x %..any]* %17, i64 0, i32 0
	store %..any %135, %..any* %141
	%142 = getelementptr inbounds [2 x %..any], [2 x %..any]* %17, i64 0, i32 1
	store %..any %140, %..any* %142
	%143 = getelementptr inbounds [2 x %..any], [2 x %..any]* %17, i64 0, i32 0
	%144 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %143, %..any** %144
	%145 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 2, i64* %145
	%146 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 2, i64* %146
	%147 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1d6, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %147)
	; SelectorExpr
	call ccc void @igNextColumn()
	br label %for.index.loop-2

for.index.done-4:
	; SelectorExpr
	call ccc void @igColumns(i32 1, i8* zeroinitializer, i1 false)
	; SelectorExpr
	call ccc void @igEndChild()
	br label %if.done-5

if.done-5:
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %18
		store i64 zeroinitializer, i64* %19
	store i64 0, i64* %19
	store i64 zeroinitializer, i64* %20
	store i64 0, i64* %20
	br label %for.interval.loop-6

for.interval.loop-6:
	%148 = load i64, i64* %19, align 8
	%149 = icmp slt i64 %148, 4
	br i1 %149, label %for.interval.body-7, label %for.interval.done-13

for.interval.body-7:
	%150 = load i64, i64* %19, align 8
	%151 = load i64, i64* %20, align 8
	%152 = load i64, i64* %19, align 8
	%153 = add i64 %152, 1
	store i64 %153, i64* %19
	%154 = load i64, i64* %20, align 8
	%155 = add i64 %154, 1
	store i64 %155, i64* %20
	store i64 %150, i64* %18
	; cap
	store %jaze_xinput-18.Capabilities zeroinitializer, %jaze_xinput-18.Capabilities* %21
		; err
	store i32 zeroinitializer, i32* %22
		; SelectorExpr
	%156 = load i64, i64* %18, align 8
	; cast - cast
	%157 = trunc i64 %156 to i32
	%158 = call {%jaze_xinput-18.Capabilities, i32} @.jaze_xinput-18.GetCapabilities-2686136290224(i32 %157)
	%159 = extractvalue {%jaze_xinput-18.Capabilities, i32} %158, 0
	%160 = extractvalue {%jaze_xinput-18.Capabilities, i32} %158, 1
	store %jaze_xinput-18.Capabilities %159, %jaze_xinput-18.Capabilities* %21
	store i32 %160, i32* %22
	; SelectorExpr
	%161 = load i64, i64* %18, align 8
	%162 = add i64 %161, 1
	; TernaryExpr
	%163 = load i32, i32* %22, align 4
	%164 = icmp eq i32 %163, 0
	br i1 %164, label %if.then-8, label %if.else-9

if.then-8:
	br label %if.done-10

if.else-9:
	br label %if.done-10

if.done-10:
	%165 = phi %..string [ {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1d7, i64 0, i32 0), i64 9}, %if.then-8 ], [ {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1d8, i64 0, i32 0), i64 13}, %if.else-9 ]
	store %..any zeroinitializer, %..any* %23
	store i64 zeroinitializer, i64* %24
	store i64 %162, i64* %24
	%166 = bitcast i64* %24 to %..rawptr
	%167 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%168 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 0
	%169 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 1
	store %Type_Info* %167, %Type_Info** %168
	store %..rawptr %166, %..rawptr* %169
	%170 = load %..any, %..any* %23, align 8
	store %..any zeroinitializer, %..any* %25
	store %..string zeroinitializer, %..string* %26
	store %..string %165, %..string* %26
	%171 = bitcast %..string* %26 to %..rawptr
	%172 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%173 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 0
	%174 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 1
	store %Type_Info* %172, %Type_Info** %173
	store %..rawptr %171, %..rawptr* %174
	%175 = load %..any, %..any* %25, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %27
	store [2 x %..any] zeroinitializer, [2 x %..any]* %28
	%176 = getelementptr inbounds [2 x %..any], [2 x %..any]* %28, i64 0, i32 0
	store %..any %170, %..any* %176
	%177 = getelementptr inbounds [2 x %..any], [2 x %..any]* %28, i64 0, i32 1
	store %..any %175, %..any* %177
	%178 = getelementptr inbounds [2 x %..any], [2 x %..any]* %28, i64 0, i32 0
	%179 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 0
	store %..any* %178, %..any** %179
	%180 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 1
	store i64 2, i64* %180
	%181 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 2
	store i64 2, i64* %181
	%182 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %27, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1d9, i64 0, i32 0), i64 15}, {%..any*, i64, i64} %182)
	; IfStmt
	%183 = load i32, i32* %22, align 4
	%184 = icmp eq i32 %183, 0
	br i1 %184, label %if.then-11, label %if.done-12

if.then-11:
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %29
	%185 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %29, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1da, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %185)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	%186 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %21, i64 0, i32 1
	%187 = load i8, i8* %186, align 8
	store %..any zeroinitializer, %..any* %30
	%188 = bitcast i8* %186 to %..rawptr
	%189 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 160
	%190 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 0
	%191 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 1
	store %Type_Info* %189, %Type_Info** %190
	store %..rawptr %188, %..rawptr* %191
	%192 = load %..any, %..any* %30, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %31
	store [1 x %..any] zeroinitializer, [1 x %..any]* %32
	%193 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	store %..any %192, %..any* %193
	%194 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	%195 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 0
	store %..any* %194, %..any** %195
	%196 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 1
	store i64 1, i64* %196
	%197 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 2
	store i64 1, i64* %197
	%198 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %31, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1db, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %198)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %33
	%199 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %33, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$1dc, i64 0, i32 0), i64 6}, {%..any*, i64, i64} %199)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	%200 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %21, i64 0, i32 2
	%201 = load i16, i16* %200, align 8
	%202 = and i16 %201, 4
	%203 = icmp eq i16 %202, 4
	store %..any zeroinitializer, %..any* %34
	store i1 zeroinitializer, i1* %35
	store i1 %203, i1* %35
	%204 = bitcast i1* %35 to %..rawptr
	%205 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%206 = getelementptr inbounds %..any, %..any* %34, i64 0, i32 0
	%207 = getelementptr inbounds %..any, %..any* %34, i64 0, i32 1
	store %Type_Info* %205, %Type_Info** %206
	store %..rawptr %204, %..rawptr* %207
	%208 = load %..any, %..any* %34, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %36
	store [1 x %..any] zeroinitializer, [1 x %..any]* %37
	%209 = getelementptr inbounds [1 x %..any], [1 x %..any]* %37, i64 0, i32 0
	store %..any %208, %..any* %209
	%210 = getelementptr inbounds [1 x %..any], [1 x %..any]* %37, i64 0, i32 0
	%211 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 0
	store %..any* %210, %..any** %211
	%212 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 1
	store i64 1, i64* %212
	%213 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 2
	store i64 1, i64* %213
	%214 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %36, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1dd, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %214)
	; SelectorExpr
	; SelectorExpr
	%215 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %21, i64 0, i32 2
	%216 = load i16, i16* %215, align 8
	%217 = and i16 %216, 1
	%218 = icmp eq i16 %217, 1
	store %..any zeroinitializer, %..any* %38
	store i1 zeroinitializer, i1* %39
	store i1 %218, i1* %39
	%219 = bitcast i1* %39 to %..rawptr
	%220 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%221 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 0
	%222 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	store %Type_Info* %220, %Type_Info** %221
	store %..rawptr %219, %..rawptr* %222
	%223 = load %..any, %..any* %38, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %40
	store [1 x %..any] zeroinitializer, [1 x %..any]* %41
	%224 = getelementptr inbounds [1 x %..any], [1 x %..any]* %41, i64 0, i32 0
	store %..any %223, %..any* %224
	%225 = getelementptr inbounds [1 x %..any], [1 x %..any]* %41, i64 0, i32 0
	%226 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 0
	store %..any* %225, %..any** %226
	%227 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 1
	store i64 1, i64* %227
	%228 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 2
	store i64 1, i64* %228
	%229 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %40, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1de, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %229)
	; SelectorExpr
	; SelectorExpr
	%230 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %21, i64 0, i32 2
	%231 = load i16, i16* %230, align 8
	%232 = and i16 %231, 2
	%233 = icmp eq i16 %232, 2
	store %..any zeroinitializer, %..any* %42
	store i1 zeroinitializer, i1* %43
	store i1 %233, i1* %43
	%234 = bitcast i1* %43 to %..rawptr
	%235 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%236 = getelementptr inbounds %..any, %..any* %42, i64 0, i32 0
	%237 = getelementptr inbounds %..any, %..any* %42, i64 0, i32 1
	store %Type_Info* %235, %Type_Info** %236
	store %..rawptr %234, %..rawptr* %237
	%238 = load %..any, %..any* %42, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %44
	store [1 x %..any] zeroinitializer, [1 x %..any]* %45
	%239 = getelementptr inbounds [1 x %..any], [1 x %..any]* %45, i64 0, i32 0
	store %..any %238, %..any* %239
	%240 = getelementptr inbounds [1 x %..any], [1 x %..any]* %45, i64 0, i32 0
	%241 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %44, i64 0, i32 0
	store %..any* %240, %..any** %241
	%242 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %44, i64 0, i32 1
	store i64 1, i64* %242
	%243 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %44, i64 0, i32 2
	store i64 1, i64* %243
	%244 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %44, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1df, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %244)
	; SelectorExpr
	; SelectorExpr
	%245 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %21, i64 0, i32 2
	%246 = load i16, i16* %245, align 8
	%247 = and i16 %246, 8
	%248 = icmp eq i16 %247, 8
	store %..any zeroinitializer, %..any* %46
	store i1 zeroinitializer, i1* %47
	store i1 %248, i1* %47
	%249 = bitcast i1* %47 to %..rawptr
	%250 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%251 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 0
	%252 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 1
	store %Type_Info* %250, %Type_Info** %251
	store %..rawptr %249, %..rawptr* %252
	%253 = load %..any, %..any* %46, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %48
	store [1 x %..any] zeroinitializer, [1 x %..any]* %49
	%254 = getelementptr inbounds [1 x %..any], [1 x %..any]* %49, i64 0, i32 0
	store %..any %253, %..any* %254
	%255 = getelementptr inbounds [1 x %..any], [1 x %..any]* %49, i64 0, i32 0
	%256 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 0
	store %..any* %255, %..any** %256
	%257 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 1
	store i64 1, i64* %257
	%258 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 2
	store i64 1, i64* %258
	%259 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %48, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1e0, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %259)
	; SelectorExpr
	; SelectorExpr
	%260 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %21, i64 0, i32 2
	%261 = load i16, i16* %260, align 8
	%262 = and i16 %261, 16
	%263 = icmp eq i16 %262, 16
	store %..any zeroinitializer, %..any* %50
	store i1 zeroinitializer, i1* %51
	store i1 %263, i1* %51
	%264 = bitcast i1* %51 to %..rawptr
	%265 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%266 = getelementptr inbounds %..any, %..any* %50, i64 0, i32 0
	%267 = getelementptr inbounds %..any, %..any* %50, i64 0, i32 1
	store %Type_Info* %265, %Type_Info** %266
	store %..rawptr %264, %..rawptr* %267
	%268 = load %..any, %..any* %50, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %52
	store [1 x %..any] zeroinitializer, [1 x %..any]* %53
	%269 = getelementptr inbounds [1 x %..any], [1 x %..any]* %53, i64 0, i32 0
	store %..any %268, %..any* %269
	%270 = getelementptr inbounds [1 x %..any], [1 x %..any]* %53, i64 0, i32 0
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 0
	store %..any* %270, %..any** %271
	%272 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 1
	store i64 1, i64* %272
	%273 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 2
	store i64 1, i64* %273
	%274 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %52, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1e1, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %274)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %54
	%275 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %54, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1e2, i64 0, i32 0), i64 20}, {%..any*, i64, i64} %275)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %55
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$1e3, i64 0, i32 0), i64 3}, %..string* %55
	%276 = load %..string, %..string* %55, align 8
	store %..any zeroinitializer, %..any* %56
	%277 = bitcast %..string* %55 to %..rawptr
	%278 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%279 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 0
	%280 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 1
	store %Type_Info* %278, %Type_Info** %279
	store %..rawptr %277, %..rawptr* %280
	%281 = load %..any, %..any* %56, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %57
	store [1 x %..any] zeroinitializer, [1 x %..any]* %58
	%282 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	store %..any %281, %..any* %282
	%283 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	%284 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 0
	store %..any* %283, %..any** %284
	%285 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 1
	store i64 1, i64* %285
	%286 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 2
	store i64 1, i64* %286
	%287 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %57, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1e4, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %287)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %59
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$1e5, i64 0, i32 0), i64 3}, %..string* %59
	%288 = load %..string, %..string* %59, align 8
	store %..any zeroinitializer, %..any* %60
	%289 = bitcast %..string* %59 to %..rawptr
	%290 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%291 = getelementptr inbounds %..any, %..any* %60, i64 0, i32 0
	%292 = getelementptr inbounds %..any, %..any* %60, i64 0, i32 1
	store %Type_Info* %290, %Type_Info** %291
	store %..rawptr %289, %..rawptr* %292
	%293 = load %..any, %..any* %60, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %61
	store [1 x %..any] zeroinitializer, [1 x %..any]* %62
	%294 = getelementptr inbounds [1 x %..any], [1 x %..any]* %62, i64 0, i32 0
	store %..any %293, %..any* %294
	%295 = getelementptr inbounds [1 x %..any], [1 x %..any]* %62, i64 0, i32 0
	%296 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %61, i64 0, i32 0
	store %..any* %295, %..any** %296
	%297 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %61, i64 0, i32 1
	store i64 1, i64* %297
	%298 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %61, i64 0, i32 2
	store i64 1, i64* %298
	%299 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %61, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1e6, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %299)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	br label %if.done-12

if.done-12:
	; SelectorExpr
	call ccc void @igSeparator()
	br label %for.interval.loop-6

for.interval.done-13:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.ShowXinputStateWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %jaze_xinput-18.State, align 4
	%5 = alloca i32, align 4
	%6 = alloca %..any, align 8
	%7 = alloca i64, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..string, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [2 x %..any], align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca %..any, align 8
	%14 = alloca i1, align 1
	%15 = alloca {%..any*, i64, i64}, align 8
	%16 = alloca [1 x %..any], align 8
	%17 = alloca %..any, align 8
	%18 = alloca i1, align 1
	%19 = alloca {%..any*, i64, i64}, align 8
	%20 = alloca [1 x %..any], align 8
	%21 = alloca %..any, align 8
	%22 = alloca i1, align 1
	%23 = alloca {%..any*, i64, i64}, align 8
	%24 = alloca [1 x %..any], align 8
	%25 = alloca %..any, align 8
	%26 = alloca i1, align 1
	%27 = alloca {%..any*, i64, i64}, align 8
	%28 = alloca [1 x %..any], align 8
	%29 = alloca %..any, align 8
	%30 = alloca i1, align 1
	%31 = alloca {%..any*, i64, i64}, align 8
	%32 = alloca [1 x %..any], align 8
	%33 = alloca %..any, align 8
	%34 = alloca i1, align 1
	%35 = alloca {%..any*, i64, i64}, align 8
	%36 = alloca [1 x %..any], align 8
	%37 = alloca %..any, align 8
	%38 = alloca i1, align 1
	%39 = alloca {%..any*, i64, i64}, align 8
	%40 = alloca [1 x %..any], align 8
	%41 = alloca %..any, align 8
	%42 = alloca i1, align 1
	%43 = alloca {%..any*, i64, i64}, align 8
	%44 = alloca [1 x %..any], align 8
	%45 = alloca %..any, align 8
	%46 = alloca i1, align 1
	%47 = alloca {%..any*, i64, i64}, align 8
	%48 = alloca [1 x %..any], align 8
	%49 = alloca %..any, align 8
	%50 = alloca i1, align 1
	%51 = alloca {%..any*, i64, i64}, align 8
	%52 = alloca [1 x %..any], align 8
	%53 = alloca %..any, align 8
	%54 = alloca i1, align 1
	%55 = alloca {%..any*, i64, i64}, align 8
	%56 = alloca [1 x %..any], align 8
	%57 = alloca %..any, align 8
	%58 = alloca i1, align 1
	%59 = alloca {%..any*, i64, i64}, align 8
	%60 = alloca [1 x %..any], align 8
	%61 = alloca %..any, align 8
	%62 = alloca i1, align 1
	%63 = alloca {%..any*, i64, i64}, align 8
	%64 = alloca [1 x %..any], align 8
	%65 = alloca %..any, align 8
	%66 = alloca i1, align 1
	%67 = alloca {%..any*, i64, i64}, align 8
	%68 = alloca [1 x %..any], align 8
	%69 = alloca {%..any*, i64, i64}, align 8
	%70 = alloca %..any, align 8
	%71 = alloca %..any, align 8
	%72 = alloca float, align 4
	%73 = alloca {%..any*, i64, i64}, align 8
	%74 = alloca [2 x %..any], align 8
	%75 = alloca %..any, align 8
	%76 = alloca %..any, align 8
	%77 = alloca float, align 4
	%78 = alloca {%..any*, i64, i64}, align 8
	%79 = alloca [2 x %..any], align 8
	%80 = alloca {%..any*, i64, i64}, align 8
	%81 = alloca %..any, align 8
	%82 = alloca %..any, align 8
	%83 = alloca {%..any*, i64, i64}, align 8
	%84 = alloca [2 x %..any], align 8
	%85 = alloca %..any, align 8
	%86 = alloca %..any, align 8
	%87 = alloca {%..any*, i64, i64}, align 8
	%88 = alloca [2 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%89 = load i1*, i1** %0, align 8
	%90 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1e7, i64 0, i32 0), i64 12}, i1* %89, i32 160)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %1
		store i64 zeroinitializer, i64* %2
	store i64 0, i64* %2
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	br label %for.interval.loop-1

for.interval.loop-1:
	%91 = load i64, i64* %2, align 8
	%92 = icmp slt i64 %91, 4
	br i1 %92, label %for.interval.body-2, label %for.interval.done-8

for.interval.body-2:
	%93 = load i64, i64* %2, align 8
	%94 = load i64, i64* %3, align 8
	%95 = load i64, i64* %2, align 8
	%96 = add i64 %95, 1
	store i64 %96, i64* %2
	%97 = load i64, i64* %3, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %3
	store i64 %93, i64* %1
	; state
	store %jaze_xinput-18.State zeroinitializer, %jaze_xinput-18.State* %4
		; err
	store i32 zeroinitializer, i32* %5
		; SelectorExpr
	%99 = load i64, i64* %1, align 8
	; cast - cast
	%100 = trunc i64 %99 to i32
	%101 = call {%jaze_xinput-18.State, i32} @.jaze_xinput-18.GetState(i32 %100)
	%102 = extractvalue {%jaze_xinput-18.State, i32} %101, 0
	%103 = extractvalue {%jaze_xinput-18.State, i32} %101, 1
	store %jaze_xinput-18.State %102, %jaze_xinput-18.State* %4
	store i32 %103, i32* %5
	; SelectorExpr
	%104 = load i64, i64* %1, align 8
	%105 = add i64 %104, 1
	; TernaryExpr
	%106 = load i32, i32* %5, align 4
	%107 = icmp eq i32 %106, 0
	br i1 %107, label %if.then-3, label %if.else-4

if.then-3:
	br label %if.done-5

if.else-4:
	br label %if.done-5

if.done-5:
	%108 = phi %..string [ {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1e8, i64 0, i32 0), i64 9}, %if.then-3 ], [ {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1e9, i64 0, i32 0), i64 13}, %if.else-4 ]
	store %..any zeroinitializer, %..any* %6
	store i64 zeroinitializer, i64* %7
	store i64 %105, i64* %7
	%109 = bitcast i64* %7 to %..rawptr
	%110 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%111 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%112 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %110, %Type_Info** %111
	store %..rawptr %109, %..rawptr* %112
	%113 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %8
	store %..string zeroinitializer, %..string* %9
	store %..string %108, %..string* %9
	%114 = bitcast %..string* %9 to %..rawptr
	%115 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%116 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%117 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %115, %Type_Info** %116
	store %..rawptr %114, %..rawptr* %117
	%118 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [2 x %..any] zeroinitializer, [2 x %..any]* %11
	%119 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 0
	store %..any %113, %..any* %119
	%120 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 1
	store %..any %118, %..any* %120
	%121 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 0
	%122 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %121, %..any** %122
	%123 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 2, i64* %123
	%124 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 2, i64* %124
	%125 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1ea, i64 0, i32 0), i64 15}, {%..any*, i64, i64} %125)
	; IfStmt
	%126 = load i32, i32* %5, align 4
	%127 = icmp eq i32 %126, 0
	br i1 %127, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	%128 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1eb, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %128)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%129 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%130 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %129, i64 0, i32 0
	%131 = load i16, i16* %130, align 2
	%132 = and i16 %131, 1
	%133 = icmp eq i16 %132, 1
	store %..any zeroinitializer, %..any* %13
	store i1 zeroinitializer, i1* %14
	store i1 %133, i1* %14
	%134 = bitcast i1* %14 to %..rawptr
	%135 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%136 = getelementptr inbounds %..any, %..any* %13, i64 0, i32 0
	%137 = getelementptr inbounds %..any, %..any* %13, i64 0, i32 1
	store %Type_Info* %135, %Type_Info** %136
	store %..rawptr %134, %..rawptr* %137
	%138 = load %..any, %..any* %13, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %15
	store [1 x %..any] zeroinitializer, [1 x %..any]* %16
	%139 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	store %..any %138, %..any* %139
	%140 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	%141 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 0
	store %..any* %140, %..any** %141
	%142 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 1
	store i64 1, i64* %142
	%143 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 2
	store i64 1, i64* %143
	%144 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %15, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ec, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %144)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%145 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%146 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %145, i64 0, i32 0
	%147 = load i16, i16* %146, align 2
	%148 = and i16 %147, 2
	%149 = icmp eq i16 %148, 2
	store %..any zeroinitializer, %..any* %17
	store i1 zeroinitializer, i1* %18
	store i1 %149, i1* %18
	%150 = bitcast i1* %18 to %..rawptr
	%151 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%152 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%153 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %151, %Type_Info** %152
	store %..rawptr %150, %..rawptr* %153
	%154 = load %..any, %..any* %17, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %19
	store [1 x %..any] zeroinitializer, [1 x %..any]* %20
	%155 = getelementptr inbounds [1 x %..any], [1 x %..any]* %20, i64 0, i32 0
	store %..any %154, %..any* %155
	%156 = getelementptr inbounds [1 x %..any], [1 x %..any]* %20, i64 0, i32 0
	%157 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 0
	store %..any* %156, %..any** %157
	%158 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 1
	store i64 1, i64* %158
	%159 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 2
	store i64 1, i64* %159
	%160 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %19, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ed, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %160)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%161 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%162 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %161, i64 0, i32 0
	%163 = load i16, i16* %162, align 2
	%164 = and i16 %163, 4
	%165 = icmp eq i16 %164, 4
	store %..any zeroinitializer, %..any* %21
	store i1 zeroinitializer, i1* %22
	store i1 %165, i1* %22
	%166 = bitcast i1* %22 to %..rawptr
	%167 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%168 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 0
	%169 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 1
	store %Type_Info* %167, %Type_Info** %168
	store %..rawptr %166, %..rawptr* %169
	%170 = load %..any, %..any* %21, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %23
	store [1 x %..any] zeroinitializer, [1 x %..any]* %24
	%171 = getelementptr inbounds [1 x %..any], [1 x %..any]* %24, i64 0, i32 0
	store %..any %170, %..any* %171
	%172 = getelementptr inbounds [1 x %..any], [1 x %..any]* %24, i64 0, i32 0
	%173 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 0
	store %..any* %172, %..any** %173
	%174 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 1
	store i64 1, i64* %174
	%175 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 2
	store i64 1, i64* %175
	%176 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %23, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ee, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %176)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%177 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%178 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %177, i64 0, i32 0
	%179 = load i16, i16* %178, align 2
	%180 = and i16 %179, 8
	%181 = icmp eq i16 %180, 8
	store %..any zeroinitializer, %..any* %25
	store i1 zeroinitializer, i1* %26
	store i1 %181, i1* %26
	%182 = bitcast i1* %26 to %..rawptr
	%183 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%184 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 0
	%185 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 1
	store %Type_Info* %183, %Type_Info** %184
	store %..rawptr %182, %..rawptr* %185
	%186 = load %..any, %..any* %25, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %27
	store [1 x %..any] zeroinitializer, [1 x %..any]* %28
	%187 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	store %..any %186, %..any* %187
	%188 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	%189 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 0
	store %..any* %188, %..any** %189
	%190 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 1
	store i64 1, i64* %190
	%191 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 2
	store i64 1, i64* %191
	%192 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %27, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ef, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %192)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%193 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%194 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %193, i64 0, i32 0
	%195 = load i16, i16* %194, align 2
	%196 = and i16 %195, 16
	%197 = icmp eq i16 %196, 16
	store %..any zeroinitializer, %..any* %29
	store i1 zeroinitializer, i1* %30
	store i1 %197, i1* %30
	%198 = bitcast i1* %30 to %..rawptr
	%199 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%200 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 0
	%201 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 1
	store %Type_Info* %199, %Type_Info** %200
	store %..rawptr %198, %..rawptr* %201
	%202 = load %..any, %..any* %29, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %31
	store [1 x %..any] zeroinitializer, [1 x %..any]* %32
	%203 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	store %..any %202, %..any* %203
	%204 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	%205 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 0
	store %..any* %204, %..any** %205
	%206 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 1
	store i64 1, i64* %206
	%207 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 2
	store i64 1, i64* %207
	%208 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %31, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f0, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %208)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%209 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%210 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %209, i64 0, i32 0
	%211 = load i16, i16* %210, align 2
	%212 = and i16 %211, 32
	%213 = icmp eq i16 %212, 32
	store %..any zeroinitializer, %..any* %33
	store i1 zeroinitializer, i1* %34
	store i1 %213, i1* %34
	%214 = bitcast i1* %34 to %..rawptr
	%215 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%216 = getelementptr inbounds %..any, %..any* %33, i64 0, i32 0
	%217 = getelementptr inbounds %..any, %..any* %33, i64 0, i32 1
	store %Type_Info* %215, %Type_Info** %216
	store %..rawptr %214, %..rawptr* %217
	%218 = load %..any, %..any* %33, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %35
	store [1 x %..any] zeroinitializer, [1 x %..any]* %36
	%219 = getelementptr inbounds [1 x %..any], [1 x %..any]* %36, i64 0, i32 0
	store %..any %218, %..any* %219
	%220 = getelementptr inbounds [1 x %..any], [1 x %..any]* %36, i64 0, i32 0
	%221 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %35, i64 0, i32 0
	store %..any* %220, %..any** %221
	%222 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %35, i64 0, i32 1
	store i64 1, i64* %222
	%223 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %35, i64 0, i32 2
	store i64 1, i64* %223
	%224 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %35, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f1, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %224)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%225 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%226 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %225, i64 0, i32 0
	%227 = load i16, i16* %226, align 2
	%228 = and i16 %227, 64
	%229 = icmp eq i16 %228, 64
	store %..any zeroinitializer, %..any* %37
	store i1 zeroinitializer, i1* %38
	store i1 %229, i1* %38
	%230 = bitcast i1* %38 to %..rawptr
	%231 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%232 = getelementptr inbounds %..any, %..any* %37, i64 0, i32 0
	%233 = getelementptr inbounds %..any, %..any* %37, i64 0, i32 1
	store %Type_Info* %231, %Type_Info** %232
	store %..rawptr %230, %..rawptr* %233
	%234 = load %..any, %..any* %37, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %39
	store [1 x %..any] zeroinitializer, [1 x %..any]* %40
	%235 = getelementptr inbounds [1 x %..any], [1 x %..any]* %40, i64 0, i32 0
	store %..any %234, %..any* %235
	%236 = getelementptr inbounds [1 x %..any], [1 x %..any]* %40, i64 0, i32 0
	%237 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 0
	store %..any* %236, %..any** %237
	%238 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 1
	store i64 1, i64* %238
	%239 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 2
	store i64 1, i64* %239
	%240 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %39, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f2, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %240)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%241 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%242 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %241, i64 0, i32 0
	%243 = load i16, i16* %242, align 2
	%244 = and i16 %243, 128
	%245 = icmp eq i16 %244, 128
	store %..any zeroinitializer, %..any* %41
	store i1 zeroinitializer, i1* %42
	store i1 %245, i1* %42
	%246 = bitcast i1* %42 to %..rawptr
	%247 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%248 = getelementptr inbounds %..any, %..any* %41, i64 0, i32 0
	%249 = getelementptr inbounds %..any, %..any* %41, i64 0, i32 1
	store %Type_Info* %247, %Type_Info** %248
	store %..rawptr %246, %..rawptr* %249
	%250 = load %..any, %..any* %41, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %43
	store [1 x %..any] zeroinitializer, [1 x %..any]* %44
	%251 = getelementptr inbounds [1 x %..any], [1 x %..any]* %44, i64 0, i32 0
	store %..any %250, %..any* %251
	%252 = getelementptr inbounds [1 x %..any], [1 x %..any]* %44, i64 0, i32 0
	%253 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %43, i64 0, i32 0
	store %..any* %252, %..any** %253
	%254 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %43, i64 0, i32 1
	store i64 1, i64* %254
	%255 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %43, i64 0, i32 2
	store i64 1, i64* %255
	%256 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %43, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f3, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %256)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%257 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%258 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %257, i64 0, i32 0
	%259 = load i16, i16* %258, align 2
	%260 = and i16 %259, 256
	%261 = icmp eq i16 %260, 256
	store %..any zeroinitializer, %..any* %45
	store i1 zeroinitializer, i1* %46
	store i1 %261, i1* %46
	%262 = bitcast i1* %46 to %..rawptr
	%263 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%264 = getelementptr inbounds %..any, %..any* %45, i64 0, i32 0
	%265 = getelementptr inbounds %..any, %..any* %45, i64 0, i32 1
	store %Type_Info* %263, %Type_Info** %264
	store %..rawptr %262, %..rawptr* %265
	%266 = load %..any, %..any* %45, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %47
	store [1 x %..any] zeroinitializer, [1 x %..any]* %48
	%267 = getelementptr inbounds [1 x %..any], [1 x %..any]* %48, i64 0, i32 0
	store %..any %266, %..any* %267
	%268 = getelementptr inbounds [1 x %..any], [1 x %..any]* %48, i64 0, i32 0
	%269 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %47, i64 0, i32 0
	store %..any* %268, %..any** %269
	%270 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %47, i64 0, i32 1
	store i64 1, i64* %270
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %47, i64 0, i32 2
	store i64 1, i64* %271
	%272 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %47, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f4, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %272)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%273 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%274 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %273, i64 0, i32 0
	%275 = load i16, i16* %274, align 2
	%276 = and i16 %275, 512
	%277 = icmp eq i16 %276, 512
	store %..any zeroinitializer, %..any* %49
	store i1 zeroinitializer, i1* %50
	store i1 %277, i1* %50
	%278 = bitcast i1* %50 to %..rawptr
	%279 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%280 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 0
	%281 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 1
	store %Type_Info* %279, %Type_Info** %280
	store %..rawptr %278, %..rawptr* %281
	%282 = load %..any, %..any* %49, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %51
	store [1 x %..any] zeroinitializer, [1 x %..any]* %52
	%283 = getelementptr inbounds [1 x %..any], [1 x %..any]* %52, i64 0, i32 0
	store %..any %282, %..any* %283
	%284 = getelementptr inbounds [1 x %..any], [1 x %..any]* %52, i64 0, i32 0
	%285 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %51, i64 0, i32 0
	store %..any* %284, %..any** %285
	%286 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %51, i64 0, i32 1
	store i64 1, i64* %286
	%287 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %51, i64 0, i32 2
	store i64 1, i64* %287
	%288 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %51, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f5, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %288)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%289 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%290 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %289, i64 0, i32 0
	%291 = load i16, i16* %290, align 2
	%292 = and i16 %291, 4096
	%293 = icmp eq i16 %292, 4096
	store %..any zeroinitializer, %..any* %53
	store i1 zeroinitializer, i1* %54
	store i1 %293, i1* %54
	%294 = bitcast i1* %54 to %..rawptr
	%295 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%296 = getelementptr inbounds %..any, %..any* %53, i64 0, i32 0
	%297 = getelementptr inbounds %..any, %..any* %53, i64 0, i32 1
	store %Type_Info* %295, %Type_Info** %296
	store %..rawptr %294, %..rawptr* %297
	%298 = load %..any, %..any* %53, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %55
	store [1 x %..any] zeroinitializer, [1 x %..any]* %56
	%299 = getelementptr inbounds [1 x %..any], [1 x %..any]* %56, i64 0, i32 0
	store %..any %298, %..any* %299
	%300 = getelementptr inbounds [1 x %..any], [1 x %..any]* %56, i64 0, i32 0
	%301 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %55, i64 0, i32 0
	store %..any* %300, %..any** %301
	%302 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %55, i64 0, i32 1
	store i64 1, i64* %302
	%303 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %55, i64 0, i32 2
	store i64 1, i64* %303
	%304 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %55, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f6, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %304)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%305 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%306 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %305, i64 0, i32 0
	%307 = load i16, i16* %306, align 2
	%308 = and i16 %307, 8192
	%309 = icmp eq i16 %308, 8192
	store %..any zeroinitializer, %..any* %57
	store i1 zeroinitializer, i1* %58
	store i1 %309, i1* %58
	%310 = bitcast i1* %58 to %..rawptr
	%311 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%312 = getelementptr inbounds %..any, %..any* %57, i64 0, i32 0
	%313 = getelementptr inbounds %..any, %..any* %57, i64 0, i32 1
	store %Type_Info* %311, %Type_Info** %312
	store %..rawptr %310, %..rawptr* %313
	%314 = load %..any, %..any* %57, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %59
	store [1 x %..any] zeroinitializer, [1 x %..any]* %60
	%315 = getelementptr inbounds [1 x %..any], [1 x %..any]* %60, i64 0, i32 0
	store %..any %314, %..any* %315
	%316 = getelementptr inbounds [1 x %..any], [1 x %..any]* %60, i64 0, i32 0
	%317 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %59, i64 0, i32 0
	store %..any* %316, %..any** %317
	%318 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %59, i64 0, i32 1
	store i64 1, i64* %318
	%319 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %59, i64 0, i32 2
	store i64 1, i64* %319
	%320 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %59, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f7, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %320)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%321 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%322 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %321, i64 0, i32 0
	%323 = load i16, i16* %322, align 2
	%324 = and i16 %323, 16384
	%325 = icmp eq i16 %324, 16384
	store %..any zeroinitializer, %..any* %61
	store i1 zeroinitializer, i1* %62
	store i1 %325, i1* %62
	%326 = bitcast i1* %62 to %..rawptr
	%327 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%328 = getelementptr inbounds %..any, %..any* %61, i64 0, i32 0
	%329 = getelementptr inbounds %..any, %..any* %61, i64 0, i32 1
	store %Type_Info* %327, %Type_Info** %328
	store %..rawptr %326, %..rawptr* %329
	%330 = load %..any, %..any* %61, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %63
	store [1 x %..any] zeroinitializer, [1 x %..any]* %64
	%331 = getelementptr inbounds [1 x %..any], [1 x %..any]* %64, i64 0, i32 0
	store %..any %330, %..any* %331
	%332 = getelementptr inbounds [1 x %..any], [1 x %..any]* %64, i64 0, i32 0
	%333 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %63, i64 0, i32 0
	store %..any* %332, %..any** %333
	%334 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %63, i64 0, i32 1
	store i64 1, i64* %334
	%335 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %63, i64 0, i32 2
	store i64 1, i64* %335
	%336 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %63, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f8, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %336)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%337 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%338 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %337, i64 0, i32 0
	%339 = load i16, i16* %338, align 2
	%340 = and i16 %339, 32768
	%341 = icmp eq i16 %340, 32768
	store %..any zeroinitializer, %..any* %65
	store i1 zeroinitializer, i1* %66
	store i1 %341, i1* %66
	%342 = bitcast i1* %66 to %..rawptr
	%343 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%344 = getelementptr inbounds %..any, %..any* %65, i64 0, i32 0
	%345 = getelementptr inbounds %..any, %..any* %65, i64 0, i32 1
	store %Type_Info* %343, %Type_Info** %344
	store %..rawptr %342, %..rawptr* %345
	%346 = load %..any, %..any* %65, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %67
	store [1 x %..any] zeroinitializer, [1 x %..any]* %68
	%347 = getelementptr inbounds [1 x %..any], [1 x %..any]* %68, i64 0, i32 0
	store %..any %346, %..any* %347
	%348 = getelementptr inbounds [1 x %..any], [1 x %..any]* %68, i64 0, i32 0
	%349 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 0
	store %..any* %348, %..any** %349
	%350 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 1
	store i64 1, i64* %350
	%351 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 2
	store i64 1, i64* %351
	%352 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %67, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1f9, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %352)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %69
	%353 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %69, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1fa, i64 0, i32 0), i64 15}, {%..any*, i64, i64} %353)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%354 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%355 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %354, i64 0, i32 1
	%356 = load i8, i8* %355, align 1
	; SelectorExpr
	; SelectorExpr
	%357 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%358 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %357, i64 0, i32 1
	%359 = load i8, i8* %358, align 1
	; cast - cast
	%360 = uitofp i8 %359 to float
	%361 = fdiv float %360, 0x406fe00000000000
	%362 = fmul float %361, 0x4059000000000000
	store %..any zeroinitializer, %..any* %70
	%363 = bitcast i8* %355 to %..rawptr
	%364 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%365 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 0
	%366 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 1
	store %Type_Info* %364, %Type_Info** %365
	store %..rawptr %363, %..rawptr* %366
	%367 = load %..any, %..any* %70, align 8
	store %..any zeroinitializer, %..any* %71
	store float zeroinitializer, float* %72
	store float %362, float* %72
	%368 = bitcast float* %72 to %..rawptr
	%369 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%370 = getelementptr inbounds %..any, %..any* %71, i64 0, i32 0
	%371 = getelementptr inbounds %..any, %..any* %71, i64 0, i32 1
	store %Type_Info* %369, %Type_Info** %370
	store %..rawptr %368, %..rawptr* %371
	%372 = load %..any, %..any* %71, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %73
	store [2 x %..any] zeroinitializer, [2 x %..any]* %74
	%373 = getelementptr inbounds [2 x %..any], [2 x %..any]* %74, i64 0, i32 0
	store %..any %367, %..any* %373
	%374 = getelementptr inbounds [2 x %..any], [2 x %..any]* %74, i64 0, i32 1
	store %..any %372, %..any* %374
	%375 = getelementptr inbounds [2 x %..any], [2 x %..any]* %74, i64 0, i32 0
	%376 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %73, i64 0, i32 0
	store %..any* %375, %..any** %376
	%377 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %73, i64 0, i32 1
	store i64 2, i64* %377
	%378 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %73, i64 0, i32 2
	store i64 2, i64* %378
	%379 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %73, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fb, i64 0, i32 0), i64 25}, {%..any*, i64, i64} %379)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%380 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%381 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %380, i64 0, i32 2
	%382 = load i8, i8* %381, align 1
	; SelectorExpr
	; SelectorExpr
	%383 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%384 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %383, i64 0, i32 2
	%385 = load i8, i8* %384, align 1
	; cast - cast
	%386 = uitofp i8 %385 to float
	%387 = fdiv float %386, 0x406fe00000000000
	%388 = fmul float %387, 0x4059000000000000
	store %..any zeroinitializer, %..any* %75
	%389 = bitcast i8* %381 to %..rawptr
	%390 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%391 = getelementptr inbounds %..any, %..any* %75, i64 0, i32 0
	%392 = getelementptr inbounds %..any, %..any* %75, i64 0, i32 1
	store %Type_Info* %390, %Type_Info** %391
	store %..rawptr %389, %..rawptr* %392
	%393 = load %..any, %..any* %75, align 8
	store %..any zeroinitializer, %..any* %76
	store float zeroinitializer, float* %77
	store float %388, float* %77
	%394 = bitcast float* %77 to %..rawptr
	%395 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%396 = getelementptr inbounds %..any, %..any* %76, i64 0, i32 0
	%397 = getelementptr inbounds %..any, %..any* %76, i64 0, i32 1
	store %Type_Info* %395, %Type_Info** %396
	store %..rawptr %394, %..rawptr* %397
	%398 = load %..any, %..any* %76, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %78
	store [2 x %..any] zeroinitializer, [2 x %..any]* %79
	%399 = getelementptr inbounds [2 x %..any], [2 x %..any]* %79, i64 0, i32 0
	store %..any %393, %..any* %399
	%400 = getelementptr inbounds [2 x %..any], [2 x %..any]* %79, i64 0, i32 1
	store %..any %398, %..any* %400
	%401 = getelementptr inbounds [2 x %..any], [2 x %..any]* %79, i64 0, i32 0
	%402 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %78, i64 0, i32 0
	store %..any* %401, %..any** %402
	%403 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %78, i64 0, i32 1
	store i64 2, i64* %403
	%404 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %78, i64 0, i32 2
	store i64 2, i64* %404
	%405 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %78, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fc, i64 0, i32 0), i64 25}, {%..any*, i64, i64} %405)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %80
	%406 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %80, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1fd, i64 0, i32 0), i64 13}, {%..any*, i64, i64} %406)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%407 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%408 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %407, i64 0, i32 3
	%409 = load i16, i16* %408, align 2
	; SelectorExpr
	; SelectorExpr
	%410 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%411 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %410, i64 0, i32 4
	%412 = load i16, i16* %411, align 2
	store %..any zeroinitializer, %..any* %81
	%413 = bitcast i16* %408 to %..rawptr
	%414 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%415 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%416 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	store %Type_Info* %414, %Type_Info** %415
	store %..rawptr %413, %..rawptr* %416
	%417 = load %..any, %..any* %81, align 8
	store %..any zeroinitializer, %..any* %82
	%418 = bitcast i16* %411 to %..rawptr
	%419 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%420 = getelementptr inbounds %..any, %..any* %82, i64 0, i32 0
	%421 = getelementptr inbounds %..any, %..any* %82, i64 0, i32 1
	store %Type_Info* %419, %Type_Info** %420
	store %..rawptr %418, %..rawptr* %421
	%422 = load %..any, %..any* %82, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %83
	store [2 x %..any] zeroinitializer, [2 x %..any]* %84
	%423 = getelementptr inbounds [2 x %..any], [2 x %..any]* %84, i64 0, i32 0
	store %..any %417, %..any* %423
	%424 = getelementptr inbounds [2 x %..any], [2 x %..any]* %84, i64 0, i32 1
	store %..any %422, %..any* %424
	%425 = getelementptr inbounds [2 x %..any], [2 x %..any]* %84, i64 0, i32 0
	%426 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %83, i64 0, i32 0
	store %..any* %425, %..any** %426
	%427 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %83, i64 0, i32 1
	store i64 2, i64* %427
	%428 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %83, i64 0, i32 2
	store i64 2, i64* %428
	%429 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %83, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1fe, i64 0, i32 0), i64 21}, {%..any*, i64, i64} %429)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%430 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%431 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %430, i64 0, i32 5
	%432 = load i16, i16* %431, align 2
	; SelectorExpr
	; SelectorExpr
	%433 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %4, i64 0, i32 1
	%434 = getelementptr inbounds %jaze_xinput-18.GamepadState, %jaze_xinput-18.GamepadState* %433, i64 0, i32 6
	%435 = load i16, i16* %434, align 2
	store %..any zeroinitializer, %..any* %85
	%436 = bitcast i16* %431 to %..rawptr
	%437 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%438 = getelementptr inbounds %..any, %..any* %85, i64 0, i32 0
	%439 = getelementptr inbounds %..any, %..any* %85, i64 0, i32 1
	store %Type_Info* %437, %Type_Info** %438
	store %..rawptr %436, %..rawptr* %439
	%440 = load %..any, %..any* %85, align 8
	store %..any zeroinitializer, %..any* %86
	%441 = bitcast i16* %434 to %..rawptr
	%442 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%443 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%444 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	store %Type_Info* %442, %Type_Info** %443
	store %..rawptr %441, %..rawptr* %444
	%445 = load %..any, %..any* %86, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %87
	store [2 x %..any] zeroinitializer, [2 x %..any]* %88
	%446 = getelementptr inbounds [2 x %..any], [2 x %..any]* %88, i64 0, i32 0
	store %..any %440, %..any* %446
	%447 = getelementptr inbounds [2 x %..any], [2 x %..any]* %88, i64 0, i32 1
	store %..any %445, %..any* %447
	%448 = getelementptr inbounds [2 x %..any], [2 x %..any]* %88, i64 0, i32 0
	%449 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %87, i64 0, i32 0
	store %..any* %448, %..any** %449
	%450 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %87, i64 0, i32 1
	store i64 2, i64* %450
	%451 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %87, i64 0, i32 2
	store i64 2, i64* %451
	%452 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %87, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1ff, i64 0, i32 0), i64 21}, {%..any*, i64, i64} %452)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	br label %if.done-7

if.done-7:
	br label %for.interval.loop-1

for.interval.done-8:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.ShowTimeDataWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca %jaze_time-20.TimeData, align 8
	%2 = alloca %..any, align 8
	%3 = alloca {%..any*, i64, i64}, align 8
	%4 = alloca [1 x %..any], align 8
	%5 = alloca %..any, align 8
	%6 = alloca {%..any*, i64, i64}, align 8
	%7 = alloca [1 x %..any], align 8
	%8 = alloca %..any, align 8
	%9 = alloca double, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [1 x %..any], align 8
	%12 = alloca %..any, align 8
	%13 = alloca {%..any*, i64, i64}, align 8
	%14 = alloca [1 x %..any], align 8
	%15 = alloca %..any, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [1 x %..any], align 8
	%18 = alloca %..any, align 8
	%19 = alloca {%..any*, i64, i64}, align 8
	%20 = alloca [1 x %..any], align 8
	%21 = alloca %..any, align 8
	%22 = alloca {%..any*, i64, i64}, align 8
	%23 = alloca [1 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%24 = load i1*, i1** %0, align 8
	%25 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$200, i64 0, i32 0), i64 9}, i1* %24, i32 160)
	; data
	store %jaze_time-20.TimeData zeroinitializer, %jaze_time-20.TimeData* %1
		; SelectorExpr
	%26 = call %jaze_time-20.TimeData @.jaze_time-20.GetTimeData()
	store %jaze_time-20.TimeData %26, %jaze_time-20.TimeData* %1
	; SelectorExpr
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 0
	%28 = load double, double* %27, align 8
	store %..any zeroinitializer, %..any* %2
	%29 = bitcast double* %27 to %..rawptr
	%30 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%31 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %2, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %3
	store [1 x %..any] zeroinitializer, [1 x %..any]* %4
	%34 = getelementptr inbounds [1 x %..any], [1 x %..any]* %4, i64 0, i32 0
	store %..any %33, %..any* %34
	%35 = getelementptr inbounds [1 x %..any], [1 x %..any]* %4, i64 0, i32 0
	%36 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %3, i64 0, i32 0
	store %..any* %35, %..any** %36
	%37 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %3, i64 0, i32 1
	store i64 1, i64* %37
	%38 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %3, i64 0, i32 2
	store i64 1, i64* %38
	%39 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %3, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.__str$201, i64 0, i32 0), i64 28}, {%..any*, i64, i64} %39)
	; SelectorExpr
	; SelectorExpr
	%40 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 1
	%41 = load double, double* %40, align 8
	store %..any zeroinitializer, %..any* %5
	%42 = bitcast double* %40 to %..rawptr
	%43 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%44 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%45 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %43, %Type_Info** %44
	store %..rawptr %42, %..rawptr* %45
	%46 = load %..any, %..any* %5, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %6
	store [1 x %..any] zeroinitializer, [1 x %..any]* %7
	%47 = getelementptr inbounds [1 x %..any], [1 x %..any]* %7, i64 0, i32 0
	store %..any %46, %..any* %47
	%48 = getelementptr inbounds [1 x %..any], [1 x %..any]* %7, i64 0, i32 0
	%49 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 0
	store %..any* %48, %..any** %49
	%50 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %50
	%51 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %51
	%52 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %6, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$202, i64 0, i32 0), i64 31}, {%..any*, i64, i64} %52)
	; SelectorExpr
	; SelectorExpr
	%53 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 1
	%54 = load double, double* %53, align 8
	; SelectorExpr
	%55 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 0
	%56 = load double, double* %55, align 8
	%57 = fmul double %54, %56
	store %..any zeroinitializer, %..any* %8
	store double zeroinitializer, double* %9
	store double %57, double* %9
	%58 = bitcast double* %9 to %..rawptr
	%59 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%60 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%61 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %59, %Type_Info** %60
	store %..rawptr %58, %..rawptr* %61
	%62 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [1 x %..any] zeroinitializer, [1 x %..any]* %11
	%63 = getelementptr inbounds [1 x %..any], [1 x %..any]* %11, i64 0, i32 0
	store %..any %62, %..any* %63
	%64 = getelementptr inbounds [1 x %..any], [1 x %..any]* %11, i64 0, i32 0
	%65 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %64, %..any** %65
	%66 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 1, i64* %66
	%67 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 1, i64* %67
	%68 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.__str$203, i64 0, i32 0), i64 31}, {%..any*, i64, i64} %68)
	; SelectorExpr
	; SelectorExpr
	%69 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 2
	%70 = load double, double* %69, align 8
	store %..any zeroinitializer, %..any* %12
	%71 = bitcast double* %69 to %..rawptr
	%72 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%73 = getelementptr inbounds %..any, %..any* %12, i64 0, i32 0
	%74 = getelementptr inbounds %..any, %..any* %12, i64 0, i32 1
	store %Type_Info* %72, %Type_Info** %73
	store %..rawptr %71, %..rawptr* %74
	%75 = load %..any, %..any* %12, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %13
	store [1 x %..any] zeroinitializer, [1 x %..any]* %14
	%76 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	store %..any %75, %..any* %76
	%77 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	%78 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 0
	store %..any* %77, %..any** %78
	%79 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 1
	store i64 1, i64* %79
	%80 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 2
	store i64 1, i64* %80
	%81 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %13, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.__str$204, i64 0, i32 0), i64 28}, {%..any*, i64, i64} %81)
	; SelectorExpr
	; SelectorExpr
	%82 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 3
	%83 = load i64, i64* %82, align 8
	store %..any zeroinitializer, %..any* %15
	%84 = bitcast i64* %82 to %..rawptr
	%85 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%86 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%87 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	store %Type_Info* %85, %Type_Info** %86
	store %..rawptr %84, %..rawptr* %87
	%88 = load %..any, %..any* %15, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [1 x %..any] zeroinitializer, [1 x %..any]* %17
	%89 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	store %..any %88, %..any* %89
	%90 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	%91 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %90, %..any** %91
	%92 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 1, i64* %92
	%93 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 1, i64* %93
	%94 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.__str$205, i64 0, i32 0), i64 28}, {%..any*, i64, i64} %94)
	; SelectorExpr
	call ccc void @igNewLine()
	; SelectorExpr
	; SelectorExpr
	%95 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 4
	%96 = load i64, i64* %95, align 8
	store %..any zeroinitializer, %..any* %18
	%97 = bitcast i64* %95 to %..rawptr
	%98 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%99 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%100 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %98, %Type_Info** %99
	store %..rawptr %97, %..rawptr* %100
	%101 = load %..any, %..any* %18, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %19
	store [1 x %..any] zeroinitializer, [1 x %..any]* %20
	%102 = getelementptr inbounds [1 x %..any], [1 x %..any]* %20, i64 0, i32 0
	store %..any %101, %..any* %102
	%103 = getelementptr inbounds [1 x %..any], [1 x %..any]* %20, i64 0, i32 0
	%104 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 0
	store %..any* %103, %..any** %104
	%105 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 1
	store i64 1, i64* %105
	%106 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 2
	store i64 1, i64* %106
	%107 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %19, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$206, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %107)
	; SelectorExpr
	; SelectorExpr
	%108 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* %1, i64 0, i32 5
	%109 = load i64, i64* %108, align 8
	store %..any zeroinitializer, %..any* %21
	%110 = bitcast i64* %108 to %..rawptr
	%111 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%112 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 0
	%113 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 1
	store %Type_Info* %111, %Type_Info** %112
	store %..rawptr %110, %..rawptr* %113
	%114 = load %..any, %..any* %21, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %22
	store [1 x %..any] zeroinitializer, [1 x %..any]* %23
	%115 = getelementptr inbounds [1 x %..any], [1 x %..any]* %23, i64 0, i32 0
	store %..any %114, %..any* %115
	%116 = getelementptr inbounds [1 x %..any], [1 x %..any]* %23, i64 0, i32 0
	%117 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %22, i64 0, i32 0
	store %..any* %116, %..any** %117
	%118 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %22, i64 0, i32 1
	store i64 1, i64* %118
	%119 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %22, i64 0, i32 2
	store i64 1, i64* %119
	%120 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %22, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$207, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %120)
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.ShowCatalogWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca {%..string*, i64, i64}, align 8
	%2 = alloca %jaze_catalog-21.Catalog*, align 8
	%3 = alloca %..any, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %..any, align 8
	%7 = alloca {%..any*, i64, i64}, align 8
	%8 = alloca [1 x %..any], align 8
	%9 = alloca %..any, align 8
	%10 = alloca i64, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [2 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca float, align 4
	%16 = alloca %..any, align 8
	%17 = alloca float, align 4
	%18 = alloca {%..any*, i64, i64}, align 8
	%19 = alloca [2 x %..any], align 8
	%20 = alloca {%..any*, i64, i64}, align 8
	%21 = alloca %..string, align 8
	%22 = alloca i64, align 8
	%23 = alloca {%..any*, i64, i64}, align 8
	%24 = alloca %jaze_asset-22.Asset*, align 8
	%25 = alloca %..string, align 8
	%26 = alloca i64, align 8
	%27 = alloca %..any, align 8
	%28 = alloca {%..any*, i64, i64}, align 8
	%29 = alloca [1 x %..any], align 8
	%30 = alloca %..any, align 8
	%31 = alloca float, align 4
	%32 = alloca {%..any*, i64, i64}, align 8
	%33 = alloca [1 x %..any], align 8
	%34 = alloca %jaze_asset-22.Asset.Texture*, align 8
	%35 = alloca %..any, align 8
	%36 = alloca {%..any*, i64, i64}, align 8
	%37 = alloca [1 x %..any], align 8
	%38 = alloca %..any, align 8
	%39 = alloca {%..any*, i64, i64}, align 8
	%40 = alloca [1 x %..any], align 8
	%41 = alloca %..any, align 8
	%42 = alloca {%..any*, i64, i64}, align 8
	%43 = alloca [1 x %..any], align 8
	%44 = alloca %..any, align 8
	%45 = alloca {%..any*, i64, i64}, align 8
	%46 = alloca [1 x %..any], align 8
	%47 = alloca %jaze_asset-22.Asset.Shader*, align 8
	%48 = alloca %..any, align 8
	%49 = alloca {%..any*, i64, i64}, align 8
	%50 = alloca [1 x %..any], align 8
	%51 = alloca %..any, align 8
	%52 = alloca {%..any*, i64, i64}, align 8
	%53 = alloca [1 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%54 = load i1*, i1** %0, align 8
	%55 = call i1 @.imgui-12.Begin(%..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$208, i64 0, i32 0), i64 8}, i1* %54, i32 160)
	; SelectorExpr
	%56 = getelementptr inbounds i32, i32* @.jaze_debug_windows-16.ChosenCatalog, i64 0
	; SliceExpr
	; SelectorExpr
	; SelectorExpr
	%57 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 0
	%58 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %57, align 8
	%59 = extractvalue {%..string*, i64, i64,%Allocator} %58, 1
	%60 = extractvalue {%..string*, i64, i64,%Allocator} %58, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$209, i64 0, i32 0), i64 45}, i64 299, i64 78, i64 0, i64 %59, i64 %60)
	%61 = extractvalue {%..string*, i64, i64,%Allocator} %58, 0
	%62 = getelementptr inbounds %..string, %..string* %61, i64 0
	%63 = sub i64 %59, 0
	%64 = sub i64 %60, 0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %1
	%65 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1, i64 0, i32 0
	store %..string* %62, %..string** %65
	%66 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1, i64 0, i32 1
	store i64 %63, i64* %66
	%67 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1, i64 0, i32 2
	store i64 %64, i64* %67
	%68 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%69 = call i1 @.imgui-12.Combo(%..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$20a, i64 0, i32 0), i64 7}, i32* %56, {%..string*, i64, i64} %68, i32 -1)
	; SelectorExpr
	call ccc void @igSeparator()
	; cat
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %2
		; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%70 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 1
	%71 = load {%jaze_catalog-21.Catalog**, i64, i64,%Allocator}, {%jaze_catalog-21.Catalog**, i64, i64,%Allocator}* %70, align 8
	%72 = extractvalue {%jaze_catalog-21.Catalog**, i64, i64,%Allocator} %71, 0
	%73 = extractvalue {%jaze_catalog-21.Catalog**, i64, i64,%Allocator} %71, 1
	%74 = load i32, i32* @.jaze_debug_windows-16.ChosenCatalog, align 4
	%75 = sext i32 %74 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$20b, i64 0, i32 0), i64 45}, i64 301, i64 43, i64 %75, i64 %73)
	%76 = getelementptr inbounds %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %72, i64 %75
	%77 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %76, align 8
	store %jaze_catalog-21.Catalog* %77, %jaze_catalog-21.Catalog** %2
	; SelectorExpr
	; SelectorExpr
	%78 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%79 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %78, i64 0
	%80 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %79, i64 0, i32 3
	%81 = load %..string, %..string* %80, align 8
	store %..any zeroinitializer, %..any* %3
	%82 = bitcast %..string* %80 to %..rawptr
	%83 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%84 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%85 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %83, %Type_Info** %84
	store %..rawptr %82, %..rawptr* %85
	%86 = load %..any, %..any* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%87 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %86, %..any* %87
	%88 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%89 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %88, %..any** %89
	%90 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %90
	%91 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %91
	%92 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$20c, i64 0, i32 0), i64 19}, {%..any*, i64, i64} %92)
	; SelectorExpr
	; SelectorExpr
	%93 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%94 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %93, i64 0
	%95 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %94, i64 0, i32 4
	%96 = load i64, i64* %95, align 8
	store %..any zeroinitializer, %..any* %6
	%97 = bitcast i64* %95 to %..rawptr
	%98 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 162
	%99 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%100 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %98, %Type_Info** %99
	store %..rawptr %97, %..rawptr* %100
	%101 = load %..any, %..any* %6, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %7
	store [1 x %..any] zeroinitializer, [1 x %..any]* %8
	%102 = getelementptr inbounds [1 x %..any], [1 x %..any]* %8, i64 0, i32 0
	store %..any %101, %..any* %102
	%103 = getelementptr inbounds [1 x %..any], [1 x %..any]* %8, i64 0, i32 0
	%104 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %7, i64 0, i32 0
	store %..any* %103, %..any** %104
	%105 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %7, i64 0, i32 1
	store i64 1, i64* %105
	%106 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %7, i64 0, i32 2
	store i64 1, i64* %106
	%107 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %7, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$20d, i64 0, i32 0), i64 19}, {%..any*, i64, i64} %107)
	; SelectorExpr
	; SelectorExpr
	%108 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%109 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %108, i64 0
	%110 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %109, i64 0, i32 0
	%111 = load {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %110, align 8
	; len: map
	%112 = extractvalue {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}} %111, 1
	%113 = extractvalue {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator} %112, 1
	; SelectorExpr
	%114 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%115 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %114, i64 0
	%116 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %115, i64 0, i32 5
	%117 = load i64, i64* %116, align 8
	store %..any zeroinitializer, %..any* %9
	store i64 zeroinitializer, i64* %10
	store i64 %113, i64* %10
	%118 = bitcast i64* %10 to %..rawptr
	%119 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%120 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%121 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %119, %Type_Info** %120
	store %..rawptr %118, %..rawptr* %121
	%122 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %11
	%123 = bitcast i64* %116 to %..rawptr
	%124 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%125 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%126 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %124, %Type_Info** %125
	store %..rawptr %123, %..rawptr* %126
	%127 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [2 x %..any] zeroinitializer, [2 x %..any]* %13
	%128 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	store %..any %122, %..any* %128
	%129 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 1
	store %..any %127, %..any* %129
	%130 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	%131 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %130, %..any** %131
	%132 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 2, i64* %132
	%133 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 2, i64* %133
	%134 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$20e, i64 0, i32 0), i64 23}, {%..any*, i64, i64} %134)
	; SelectorExpr
	; SelectorExpr
	%135 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%136 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %135, i64 0
	%137 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %136, i64 0, i32 7
	%138 = load i64, i64* %137, align 8
	; cast - cast
	%139 = uitofp i64 %138 to float
	%140 = fdiv float %139, 0x4090000000000000
	; SelectorExpr
	%141 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%142 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %141, i64 0
	%143 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %142, i64 0, i32 6
	%144 = load i64, i64* %143, align 8
	; cast - cast
	%145 = uitofp i64 %144 to float
	%146 = fdiv float %145, 0x4090000000000000
	store %..any zeroinitializer, %..any* %14
	store float zeroinitializer, float* %15
	store float %140, float* %15
	%147 = bitcast float* %15 to %..rawptr
	%148 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%149 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%150 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %148, %Type_Info** %149
	store %..rawptr %147, %..rawptr* %150
	%151 = load %..any, %..any* %14, align 8
	store %..any zeroinitializer, %..any* %16
	store float zeroinitializer, float* %17
	store float %146, float* %17
	%152 = bitcast float* %17 to %..rawptr
	%153 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%154 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 0
	%155 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 1
	store %Type_Info* %153, %Type_Info** %154
	store %..rawptr %152, %..rawptr* %155
	%156 = load %..any, %..any* %16, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %18
	store [2 x %..any] zeroinitializer, [2 x %..any]* %19
	%157 = getelementptr inbounds [2 x %..any], [2 x %..any]* %19, i64 0, i32 0
	store %..any %151, %..any* %157
	%158 = getelementptr inbounds [2 x %..any], [2 x %..any]* %19, i64 0, i32 1
	store %..any %156, %..any* %158
	%159 = getelementptr inbounds [2 x %..any], [2 x %..any]* %19, i64 0, i32 0
	%160 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 0
	store %..any* %159, %..any** %160
	%161 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 1
	store i64 2, i64* %161
	%162 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 2
	store i64 2, i64* %162
	%163 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %18, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$20f, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %163)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %20
	%164 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %20, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$210, i64 0, i32 0), i64 21}, {%..any*, i64, i64} %164)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; RangeStmt
	; ext
	store %..string zeroinitializer, %..string* %21
		; SelectorExpr
	%165 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%166 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %165, i64 0
	%167 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %166, i64 0, i32 1
	%168 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %167, i64 0, i32 1
	store i64 zeroinitializer, i64* %22
	store i64 -1, i64* %22
	br label %for.index.loop-1

for.index.loop-1:
	%169 = load i64, i64* %22, align 8
	%170 = add i64 %169, 1
	store i64 %170, i64* %22
	%171 = load i64, i64* %168, align 8
	%172 = icmp slt i64 %170, %171
	br i1 %172, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%173 = load i64, i64* %22, align 8
	%174 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %167, i64 0, i32 0
	%175 = load %..string*, %..string** %174, align 8
	%176 = getelementptr inbounds %..string, %..string* %175, i64 %173
	%177 = load %..string, %..string* %176, align 8
	store %..string %177, %..string* %21
	; SelectorExpr
	%178 = load %..string, %..string* %21, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %23
	%179 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %23, align 8
	call void @.imgui-12.Text(%..string %178, {%..any*, i64, i64} %179)
	br label %for.index.loop-1

for.index.done-3:
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	%180 = call i1 @.imgui-12.BeginChild(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$211, i64 0, i32 0), i64 5}, %imgui-12.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, i1 true, i32 0)
	; RangeStmt
	; val
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %24
		; SelectorExpr
	%181 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %2, align 8
	%182 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %181, i64 0
	%183 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %182, i64 0, i32 0
	%184 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %183, i64 0, i32 1
	%185 = getelementptr inbounds {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}* %184, i64 0, i32 1
	store %..string zeroinitializer, %..string* %25
	store i64 zeroinitializer, i64* %26
	store i64 -1, i64* %26
	br label %for.index.loop-4

for.index.loop-4:
	%186 = load i64, i64* %26, align 8
	%187 = add i64 %186, 1
	store i64 %187, i64* %26
	%188 = load i64, i64* %185, align 8
	%189 = icmp slt i64 %187, %188
	br i1 %189, label %for.index.body-5, label %for.index.done-13

for.index.body-5:
	%190 = load i64, i64* %26, align 8
	%191 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %183, i64 0, i32 1
	%192 = getelementptr inbounds {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}* %191, i64 0, i32 0
	%193 = load {%__Map_Key, i64, %jaze_asset-22.Asset*}*, {%__Map_Key, i64, %jaze_asset-22.Asset*}** %192, align 8
	%194 = getelementptr inbounds {%__Map_Key, i64, %jaze_asset-22.Asset*}, {%__Map_Key, i64, %jaze_asset-22.Asset*}* %193, i64 %190
	%195 = getelementptr inbounds {%__Map_Key, i64, %jaze_asset-22.Asset*}, {%__Map_Key, i64, %jaze_asset-22.Asset*}* %194, i64 0, i32 2
	%196 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %195, align 8
	%197 = getelementptr inbounds {%__Map_Key, i64, %jaze_asset-22.Asset*}, {%__Map_Key, i64, %jaze_asset-22.Asset*}* %194, i64 0, i32 0
	%198 = getelementptr inbounds %__Map_Key, %__Map_Key* %197, i64 0, i32 1
	%199 = load %..string, %..string* %198, align 8
	store %..string %199, %..string* %25
	%200 = load %..string, %..string* %25, align 8
	store %jaze_asset-22.Asset* %196, %jaze_asset-22.Asset** %24
	%201 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %24, align 8
	%202 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %201, i64 0
	%203 = load %jaze_asset-22.Asset, %jaze_asset-22.Asset* %202, align 8
	call void @.jaze_debug_windows-16.ShowCatalogWindow.PrintName-0(%jaze_asset-22.Asset %203)
	; IfStmt
	; SelectorExpr
	%204 = call ccc i1 @igIsItemHovered()
	br i1 %204, label %if.then-6, label %if.done-12

if.then-6:
	; SelectorExpr
	call ccc void @igBeginTooltip()
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%205 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %24, align 8
	%206 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %205, i64 0
	%207 = bitcast %jaze_asset-22.Asset* %206 to i8*
	%208 = getelementptr inbounds i8, i8* %207, i64 0
	%209 = bitcast i8* %208 to %jaze_asset-22.FileInfo_t*
	%210 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %209, i64 0, i32 2
	%211 = load %..string, %..string* %210, align 8
	store %..any zeroinitializer, %..any* %27
	%212 = bitcast %..string* %210 to %..rawptr
	%213 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%214 = getelementptr inbounds %..any, %..any* %27, i64 0, i32 0
	%215 = getelementptr inbounds %..any, %..any* %27, i64 0, i32 1
	store %Type_Info* %213, %Type_Info** %214
	store %..rawptr %212, %..rawptr* %215
	%216 = load %..any, %..any* %27, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %28
	store [1 x %..any] zeroinitializer, [1 x %..any]* %29
	%217 = getelementptr inbounds [1 x %..any], [1 x %..any]* %29, i64 0, i32 0
	store %..any %216, %..any* %217
	%218 = getelementptr inbounds [1 x %..any], [1 x %..any]* %29, i64 0, i32 0
	%219 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %28, i64 0, i32 0
	store %..any* %218, %..any** %219
	%220 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %28, i64 0, i32 1
	store i64 1, i64* %220
	%221 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %28, i64 0, i32 2
	store i64 1, i64* %221
	%222 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %28, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$212, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %222)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%223 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %24, align 8
	%224 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %223, i64 0
	%225 = bitcast %jaze_asset-22.Asset* %224 to i8*
	%226 = getelementptr inbounds i8, i8* %225, i64 0
	%227 = bitcast i8* %226 to %jaze_asset-22.FileInfo_t*
	%228 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %227, i64 0, i32 3
	%229 = load i64, i64* %228, align 8
	; cast - cast
	%230 = uitofp i64 %229 to float
	%231 = fdiv float %230, 0x4090000000000000
	store %..any zeroinitializer, %..any* %30
	store float zeroinitializer, float* %31
	store float %231, float* %31
	%232 = bitcast float* %31 to %..rawptr
	%233 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%234 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 0
	%235 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 1
	store %Type_Info* %233, %Type_Info** %234
	store %..rawptr %232, %..rawptr* %235
	%236 = load %..any, %..any* %30, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %32
	store [1 x %..any] zeroinitializer, [1 x %..any]* %33
	%237 = getelementptr inbounds [1 x %..any], [1 x %..any]* %33, i64 0, i32 0
	store %..any %236, %..any* %237
	%238 = getelementptr inbounds [1 x %..any], [1 x %..any]* %33, i64 0, i32 0
	%239 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %32, i64 0, i32 0
	store %..any* %238, %..any** %239
	%240 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %32, i64 0, i32 1
	store i64 1, i64* %240
	%241 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %32, i64 0, i32 2
	store i64 1, i64* %241
	%242 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %32, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$213, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %242)
	; TypeMatchStmt
	%243 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %24, align 8
	; get union's tag
	%244 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %243, i64 0, i32 2 ; UnionTagPtr
	%245 = load i64, i64* %244, align 8
	%246 = bitcast %jaze_asset-22.Asset* %243 to %..rawptr
	%247 = icmp eq i64 %245, 1
	br i1 %247, label %typematch.body-8, label %typematch.next-7

typematch.next-7:
	%248 = icmp eq i64 %245, 2
	br i1 %248, label %typematch.body-10, label %typematch.next-9

typematch.body-8:
	%249 = bitcast %..rawptr %246 to %jaze_asset-22.Asset.Texture*
	store %jaze_asset-22.Asset.Texture* zeroinitializer, %jaze_asset-22.Asset.Texture** %34
	store %jaze_asset-22.Asset.Texture* %249, %jaze_asset-22.Asset.Texture** %34
	; SelectorExpr
	; SelectorExpr
	%250 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %34, align 8
	%251 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %250, i64 0
	%252 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %251, i64 0, i32 2
	%253 = load i32, i32* %252, align 4
	store %..any zeroinitializer, %..any* %35
	%254 = bitcast i32* %252 to %..rawptr
	%255 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 157
	%256 = getelementptr inbounds %..any, %..any* %35, i64 0, i32 0
	%257 = getelementptr inbounds %..any, %..any* %35, i64 0, i32 1
	store %Type_Info* %255, %Type_Info** %256
	store %..rawptr %254, %..rawptr* %257
	%258 = load %..any, %..any* %35, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %36
	store [1 x %..any] zeroinitializer, [1 x %..any]* %37
	%259 = getelementptr inbounds [1 x %..any], [1 x %..any]* %37, i64 0, i32 0
	store %..any %258, %..any* %259
	%260 = getelementptr inbounds [1 x %..any], [1 x %..any]* %37, i64 0, i32 0
	%261 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 0
	store %..any* %260, %..any** %261
	%262 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 1
	store i64 1, i64* %262
	%263 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 2
	store i64 1, i64* %263
	%264 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %36, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$214, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %264)
	; SelectorExpr
	; SelectorExpr
	%265 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %34, align 8
	%266 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %265, i64 0
	%267 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %266, i64 0, i32 3
	%268 = load i32, i32* %267, align 4
	store %..any zeroinitializer, %..any* %38
	%269 = bitcast i32* %267 to %..rawptr
	%270 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%271 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 0
	%272 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	store %Type_Info* %270, %Type_Info** %271
	store %..rawptr %269, %..rawptr* %272
	%273 = load %..any, %..any* %38, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %39
	store [1 x %..any] zeroinitializer, [1 x %..any]* %40
	%274 = getelementptr inbounds [1 x %..any], [1 x %..any]* %40, i64 0, i32 0
	store %..any %273, %..any* %274
	%275 = getelementptr inbounds [1 x %..any], [1 x %..any]* %40, i64 0, i32 0
	%276 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 0
	store %..any* %275, %..any** %276
	%277 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 1
	store i64 1, i64* %277
	%278 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 2
	store i64 1, i64* %278
	%279 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %39, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$215, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %279)
	; SelectorExpr
	; SelectorExpr
	%280 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %34, align 8
	%281 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %280, i64 0
	%282 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %281, i64 0, i32 4
	%283 = load i32, i32* %282, align 4
	store %..any zeroinitializer, %..any* %41
	%284 = bitcast i32* %282 to %..rawptr
	%285 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%286 = getelementptr inbounds %..any, %..any* %41, i64 0, i32 0
	%287 = getelementptr inbounds %..any, %..any* %41, i64 0, i32 1
	store %Type_Info* %285, %Type_Info** %286
	store %..rawptr %284, %..rawptr* %287
	%288 = load %..any, %..any* %41, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %42
	store [1 x %..any] zeroinitializer, [1 x %..any]* %43
	%289 = getelementptr inbounds [1 x %..any], [1 x %..any]* %43, i64 0, i32 0
	store %..any %288, %..any* %289
	%290 = getelementptr inbounds [1 x %..any], [1 x %..any]* %43, i64 0, i32 0
	%291 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %42, i64 0, i32 0
	store %..any* %290, %..any** %291
	%292 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %42, i64 0, i32 1
	store i64 1, i64* %292
	%293 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %42, i64 0, i32 2
	store i64 1, i64* %293
	%294 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %42, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$216, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %294)
	; SelectorExpr
	; SelectorExpr
	%295 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %34, align 8
	%296 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %295, i64 0
	%297 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %296, i64 0, i32 5
	%298 = load i32, i32* %297, align 4
	store %..any zeroinitializer, %..any* %44
	%299 = bitcast i32* %297 to %..rawptr
	%300 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%301 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 0
	%302 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 1
	store %Type_Info* %300, %Type_Info** %301
	store %..rawptr %299, %..rawptr* %302
	%303 = load %..any, %..any* %44, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %45
	store [1 x %..any] zeroinitializer, [1 x %..any]* %46
	%304 = getelementptr inbounds [1 x %..any], [1 x %..any]* %46, i64 0, i32 0
	store %..any %303, %..any* %304
	%305 = getelementptr inbounds [1 x %..any], [1 x %..any]* %46, i64 0, i32 0
	%306 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %45, i64 0, i32 0
	store %..any* %305, %..any** %306
	%307 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %45, i64 0, i32 1
	store i64 1, i64* %307
	%308 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %45, i64 0, i32 2
	store i64 1, i64* %308
	%309 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %45, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$217, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %309)
	br label %typematch.done-11

typematch.next-9:
	br label %typematch.done-11

typematch.body-10:
	%310 = bitcast %..rawptr %246 to %jaze_asset-22.Asset.Shader*
	store %jaze_asset-22.Asset.Shader* zeroinitializer, %jaze_asset-22.Asset.Shader** %47
	store %jaze_asset-22.Asset.Shader* %310, %jaze_asset-22.Asset.Shader** %47
	; SelectorExpr
	; SelectorExpr
	%311 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %47, align 8
	%312 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %311, i64 0
	%313 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %312, i64 0, i32 2
	%314 = load i32, i32* %313, align 4
	store %..any zeroinitializer, %..any* %48
	%315 = bitcast i32* %313 to %..rawptr
	%316 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	%317 = getelementptr inbounds %..any, %..any* %48, i64 0, i32 0
	%318 = getelementptr inbounds %..any, %..any* %48, i64 0, i32 1
	store %Type_Info* %316, %Type_Info** %317
	store %..rawptr %315, %..rawptr* %318
	%319 = load %..any, %..any* %48, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %49
	store [1 x %..any] zeroinitializer, [1 x %..any]* %50
	%320 = getelementptr inbounds [1 x %..any], [1 x %..any]* %50, i64 0, i32 0
	store %..any %319, %..any* %320
	%321 = getelementptr inbounds [1 x %..any], [1 x %..any]* %50, i64 0, i32 0
	%322 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %49, i64 0, i32 0
	store %..any* %321, %..any** %322
	%323 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %49, i64 0, i32 1
	store i64 1, i64* %323
	%324 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %49, i64 0, i32 2
	store i64 1, i64* %324
	%325 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %49, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$218, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %325)
	; SelectorExpr
	; SelectorExpr
	%326 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %47, align 8
	%327 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %326, i64 0
	%328 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %327, i64 0, i32 3
	%329 = load i32, i32* %328, align 8
	store %..any zeroinitializer, %..any* %51
	%330 = bitcast i32* %328 to %..rawptr
	%331 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 173
	%332 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 0
	%333 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 1
	store %Type_Info* %331, %Type_Info** %332
	store %..rawptr %330, %..rawptr* %333
	%334 = load %..any, %..any* %51, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %52
	store [1 x %..any] zeroinitializer, [1 x %..any]* %53
	%335 = getelementptr inbounds [1 x %..any], [1 x %..any]* %53, i64 0, i32 0
	store %..any %334, %..any* %335
	%336 = getelementptr inbounds [1 x %..any], [1 x %..any]* %53, i64 0, i32 0
	%337 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 0
	store %..any* %336, %..any** %337
	%338 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 1
	store i64 1, i64* %338
	%339 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 2
	store i64 1, i64* %339
	%340 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %52, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$219, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %340)
	br label %typematch.done-11

typematch.done-11:
	; SelectorExpr
	call ccc void @igEndTooltip()
	br label %if.done-12

if.done-12:
	br label %for.index.loop-4

for.index.done-13:
	; SelectorExpr
	call ccc void @igEndChild()
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.ShowCatalogWindow.PrintName-0(%jaze_asset-22.Asset %asset) {
decls-0:
	%0 = alloca %jaze_asset-22.Asset, align 8
	%1 = alloca %jaze_asset-22.Asset.Texture, align 8
	%2 = alloca %..any, align 8
	%3 = alloca %..any, align 8
	%4 = alloca %..string, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..string, align 8
	%7 = alloca {%..any*, i64, i64}, align 8
	%8 = alloca [3 x %..any], align 8
	%9 = alloca %jaze_asset-22.Asset.Shader, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca %..string, align 8
	%13 = alloca %..any, align 8
	%14 = alloca %..string, align 8
	%15 = alloca {%..any*, i64, i64}, align 8
	%16 = alloca [3 x %..any], align 8
	%17 = alloca %jaze_asset-22.Asset, align 8
	%18 = alloca %..any, align 8
	%19 = alloca %..any, align 8
	%20 = alloca %..string, align 8
	%21 = alloca {%..any*, i64, i64}, align 8
	%22 = alloca [2 x %..any], align 8
	store %jaze_asset-22.Asset zeroinitializer, %jaze_asset-22.Asset* %0
		store %jaze_asset-22.Asset %asset, %jaze_asset-22.Asset* %0
	; TypeMatchStmt
	%23 = load %jaze_asset-22.Asset, %jaze_asset-22.Asset* %0, align 8
	; get union's tag
	%24 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %0, i64 0, i32 2 ; UnionTagPtr
	%25 = load i64, i64* %24, align 8
	%26 = bitcast %jaze_asset-22.Asset* %0 to %..rawptr
	%27 = icmp eq i64 %25, 1
	br i1 %27, label %typematch.body-2, label %typematch.next-1

typematch.next-1:
	%28 = icmp eq i64 %25, 2
	br i1 %28, label %typematch.body-10, label %typematch.next-9

typematch.body-2:
	%29 = bitcast %..rawptr %26 to %jaze_asset-22.Asset.Texture*
	%30 = load %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %29, align 8
	store %jaze_asset-22.Asset.Texture zeroinitializer, %jaze_asset-22.Asset.Texture* %1
	store %jaze_asset-22.Asset.Texture %30, %jaze_asset-22.Asset.Texture* %1
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %1, i64 0, i32 0
	%32 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %31, i64 0, i32 0
	%33 = load %..string, %..string* %32, align 8
	; TernaryExpr
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %1, i64 0, i32 1
	%35 = load i1, i1* %34, align 1
	br i1 %35, label %if.then-3, label %if.else-4

if.then-3:
	br label %if.done-5

if.else-4:
	br label %if.done-5

if.done-5:
	%36 = phi %..string [ {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$21a, i64 0, i32 0), i64 8}, %if.then-3 ], [ zeroinitializer, %if.else-4 ]
	; TernaryExpr
	; SelectorExpr
	%37 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %1, i64 0, i32 2
	%38 = load i32, i32* %37, align 4
	%39 = icmp ne i32 %38, 0
	br i1 %39, label %if.then-6, label %if.else-7

if.then-6:
	br label %if.done-8

if.else-7:
	br label %if.done-8

if.done-8:
	%40 = phi %..string [ {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$21b, i64 0, i32 0), i64 10}, %if.then-6 ], [ zeroinitializer, %if.else-7 ]
	store %..any zeroinitializer, %..any* %2
	%41 = bitcast %..string* %32 to %..rawptr
	%42 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%43 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%44 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	store %Type_Info* %42, %Type_Info** %43
	store %..rawptr %41, %..rawptr* %44
	%45 = load %..any, %..any* %2, align 8
	store %..any zeroinitializer, %..any* %3
	store %..string zeroinitializer, %..string* %4
	store %..string %36, %..string* %4
	%46 = bitcast %..string* %4 to %..rawptr
	%47 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%48 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%49 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %47, %Type_Info** %48
	store %..rawptr %46, %..rawptr* %49
	%50 = load %..any, %..any* %3, align 8
	store %..any zeroinitializer, %..any* %5
	store %..string zeroinitializer, %..string* %6
	store %..string %40, %..string* %6
	%51 = bitcast %..string* %6 to %..rawptr
	%52 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%53 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%54 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %52, %Type_Info** %53
	store %..rawptr %51, %..rawptr* %54
	%55 = load %..any, %..any* %5, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %7
	store [3 x %..any] zeroinitializer, [3 x %..any]* %8
	%56 = getelementptr inbounds [3 x %..any], [3 x %..any]* %8, i64 0, i32 0
	store %..any %45, %..any* %56
	%57 = getelementptr inbounds [3 x %..any], [3 x %..any]* %8, i64 0, i32 1
	store %..any %50, %..any* %57
	%58 = getelementptr inbounds [3 x %..any], [3 x %..any]* %8, i64 0, i32 2
	store %..any %55, %..any* %58
	%59 = getelementptr inbounds [3 x %..any], [3 x %..any]* %8, i64 0, i32 0
	%60 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %7, i64 0, i32 0
	store %..any* %59, %..any** %60
	%61 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %7, i64 0, i32 1
	store i64 3, i64* %61
	%62 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %7, i64 0, i32 2
	store i64 3, i64* %62
	%63 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %7, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$21c, i64 0, i32 0), i64 7}, {%..any*, i64, i64} %63)
	br label %typematch.done-20

typematch.next-9:
	store %jaze_asset-22.Asset zeroinitializer, %jaze_asset-22.Asset* %17
	store %jaze_asset-22.Asset %23, %jaze_asset-22.Asset* %17
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%64 = bitcast %jaze_asset-22.Asset* %17 to i8*
	%65 = getelementptr inbounds i8, i8* %64, i64 0
	%66 = bitcast i8* %65 to %jaze_asset-22.FileInfo_t*
	%67 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %66, i64 0, i32 0
	%68 = load %..string, %..string* %67, align 8
	; TernaryExpr
	; SelectorExpr
	%69 = bitcast %jaze_asset-22.Asset* %17 to i8*
	%70 = getelementptr inbounds i8, i8* %69, i64 56
	%71 = bitcast i8* %70 to i1*
	%72 = load i1, i1* %71, align 1
	br i1 %72, label %if.then-17, label %if.else-18

typematch.body-10:
	%73 = bitcast %..rawptr %26 to %jaze_asset-22.Asset.Shader*
	%74 = load %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %73, align 8
	store %jaze_asset-22.Asset.Shader zeroinitializer, %jaze_asset-22.Asset.Shader* %9
	store %jaze_asset-22.Asset.Shader %74, %jaze_asset-22.Asset.Shader* %9
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%75 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %9, i64 0, i32 0
	%76 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %75, i64 0, i32 0
	%77 = load %..string, %..string* %76, align 8
	; TernaryExpr
	; SelectorExpr
	%78 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %9, i64 0, i32 1
	%79 = load i1, i1* %78, align 1
	br i1 %79, label %if.then-11, label %if.else-12

if.then-11:
	br label %if.done-13

if.else-12:
	br label %if.done-13

if.done-13:
	%80 = phi %..string [ {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$21d, i64 0, i32 0), i64 8}, %if.then-11 ], [ zeroinitializer, %if.else-12 ]
	; TernaryExpr
	; SelectorExpr
	%81 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %9, i64 0, i32 2
	%82 = load i32, i32* %81, align 4
	%83 = icmp ne i32 %82, 0
	br i1 %83, label %if.then-14, label %if.else-15

if.then-14:
	br label %if.done-16

if.else-15:
	br label %if.done-16

if.done-16:
	%84 = phi %..string [ {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$21e, i64 0, i32 0), i64 10}, %if.then-14 ], [ zeroinitializer, %if.else-15 ]
	store %..any zeroinitializer, %..any* %10
	%85 = bitcast %..string* %76 to %..rawptr
	%86 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%87 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%88 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %86, %Type_Info** %87
	store %..rawptr %85, %..rawptr* %88
	%89 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	store %..string zeroinitializer, %..string* %12
	store %..string %80, %..string* %12
	%90 = bitcast %..string* %12 to %..rawptr
	%91 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%92 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%93 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %91, %Type_Info** %92
	store %..rawptr %90, %..rawptr* %93
	%94 = load %..any, %..any* %11, align 8
	store %..any zeroinitializer, %..any* %13
	store %..string zeroinitializer, %..string* %14
	store %..string %84, %..string* %14
	%95 = bitcast %..string* %14 to %..rawptr
	%96 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%97 = getelementptr inbounds %..any, %..any* %13, i64 0, i32 0
	%98 = getelementptr inbounds %..any, %..any* %13, i64 0, i32 1
	store %Type_Info* %96, %Type_Info** %97
	store %..rawptr %95, %..rawptr* %98
	%99 = load %..any, %..any* %13, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %15
	store [3 x %..any] zeroinitializer, [3 x %..any]* %16
	%100 = getelementptr inbounds [3 x %..any], [3 x %..any]* %16, i64 0, i32 0
	store %..any %89, %..any* %100
	%101 = getelementptr inbounds [3 x %..any], [3 x %..any]* %16, i64 0, i32 1
	store %..any %94, %..any* %101
	%102 = getelementptr inbounds [3 x %..any], [3 x %..any]* %16, i64 0, i32 2
	store %..any %99, %..any* %102
	%103 = getelementptr inbounds [3 x %..any], [3 x %..any]* %16, i64 0, i32 0
	%104 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 0
	store %..any* %103, %..any** %104
	%105 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 1
	store i64 3, i64* %105
	%106 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 2
	store i64 3, i64* %106
	%107 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %15, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$21f, i64 0, i32 0), i64 7}, {%..any*, i64, i64} %107)
	br label %typematch.done-20

if.then-17:
	br label %if.done-19

if.else-18:
	br label %if.done-19

if.done-19:
	%108 = phi %..string [ {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$220, i64 0, i32 0), i64 8}, %if.then-17 ], [ zeroinitializer, %if.else-18 ]
	store %..any zeroinitializer, %..any* %18
	%109 = bitcast %..string* %67 to %..rawptr
	%110 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%111 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%112 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %110, %Type_Info** %111
	store %..rawptr %109, %..rawptr* %112
	%113 = load %..any, %..any* %18, align 8
	store %..any zeroinitializer, %..any* %19
	store %..string zeroinitializer, %..string* %20
	store %..string %108, %..string* %20
	%114 = bitcast %..string* %20 to %..rawptr
	%115 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%116 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 0
	%117 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 1
	store %Type_Info* %115, %Type_Info** %116
	store %..rawptr %114, %..rawptr* %117
	%118 = load %..any, %..any* %19, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %21
	store [2 x %..any] zeroinitializer, [2 x %..any]* %22
	%119 = getelementptr inbounds [2 x %..any], [2 x %..any]* %22, i64 0, i32 0
	store %..any %113, %..any* %119
	%120 = getelementptr inbounds [2 x %..any], [2 x %..any]* %22, i64 0, i32 1
	store %..any %118, %..any* %120
	%121 = getelementptr inbounds [2 x %..any], [2 x %..any]* %22, i64 0, i32 0
	%122 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 0
	store %..any* %121, %..any** %122
	%123 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 1
	store i64 2, i64* %123
	%124 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 2
	store i64 2, i64* %124
	%125 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %21, align 8
	call void @.imgui-12.Text(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$221, i64 0, i32 0), i64 5}, {%..any*, i64, i64} %125)
	br label %typematch.done-20

typematch.done-20:
	ret void
}

define void @.jaze_imgui-17.SetStyle() {
decls-0:
	%0 = alloca %imgui-12.GuiStyle*, align 8
	; style
	store %imgui-12.GuiStyle* zeroinitializer, %imgui-12.GuiStyle** %0
		%1 = call ccc %imgui-12.GuiStyle* @igGetStyle()
	store %imgui-12.GuiStyle* %1, %imgui-12.GuiStyle** %0
	; AssignStmt
	; SelectorExpr
	%2 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%3 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %2, i64 0
	%4 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %3, i64 0, i32 3
	store float 0x4000000000000000, float* %4
	; AssignStmt
	; SelectorExpr
	%5 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%6 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %5, i64 0
	%7 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %6, i64 0, i32 5
	store float 0x4000000000000000, float* %7
	; AssignStmt
	; SelectorExpr
	%8 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%9 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %8, i64 0
	%10 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %9, i64 0, i32 7
	store float 0x4000000000000000, float* %10
	; AssignStmt
	; SelectorExpr
	%11 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%12 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %11, i64 0
	%13 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %12, i64 0, i32 16
	store float 0x4000000000000000, float* %13
	; AssignStmt
	; SelectorExpr
	%14 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%15 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %14, i64 0
	%16 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %15, i64 0, i32 13
	store float 0x402e000000000000, float* %16
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%17 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%18 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %17, i64 0
	%19 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %18, i64 0, i32 22
	%20 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %19, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$222, i64 0, i32 0), i64 37}, i64 33, i64 25, i64 0, i64 43)
	store %imgui-12.Vec4 {float 0x3fcc1c1c00000000, float 0x3fcc1c1c00000000, float 0x3fcc1c1c00000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %20
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%21 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%22 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %21, i64 0
	%23 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %22, i64 0, i32 22
	%24 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %23, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$223, i64 0, i32 0), i64 37}, i64 34, i64 25, i64 1, i64 43)
	store %imgui-12.Vec4 {float 0x3fe6969680000000, float 0x3fe6969680000000, float 0x3fe6969680000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %24
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%25 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%26 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %25, i64 0
	%27 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %26, i64 0, i32 22
	%28 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %27, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$224, i64 0, i32 0), i64 37}, i64 36, i64 25, i64 2, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3fee1e1e00000000}, %imgui-12.Vec4* %28
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%29 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%30 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %29, i64 0
	%31 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %30, i64 0, i32 22
	%32 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %31, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$225, i64 0, i32 0), i64 37}, i64 37, i64 25, i64 3, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x0000000000000000}, %imgui-12.Vec4* %32
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%33 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%34 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %33, i64 0
	%35 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %34, i64 0, i32 22
	%36 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %35, i64 0, i32 4
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$226, i64 0, i32 0), i64 37}, i64 39, i64 25, i64 4, i64 43)
	store %imgui-12.Vec4 {float 0x3fef5f5f40000000, float 0x3fef5f5f40000000, float 0x3fef5f5f40000000, float 0x3fee1e1e00000000}, %imgui-12.Vec4* %36
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%37 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%38 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %37, i64 0
	%39 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %38, i64 0, i32 22
	%40 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %39, i64 0, i32 5
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$227, i64 0, i32 0), i64 37}, i64 41, i64 25, i64 5, i64 43)
	store %imgui-12.Vec4 {float 0x3fe1919180000000, float 0x3fe1919180000000, float 0x3fe1919180000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %40
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%41 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%42 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %41, i64 0
	%43 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %42, i64 0, i32 22
	%44 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %43, i64 0, i32 6
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$228, i64 0, i32 0), i64 37}, i64 42, i64 25, i64 6, i64 43)
	store %imgui-12.Vec4 {float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3fa4141400000000}, %imgui-12.Vec4* %44
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%45 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%46 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %45, i64 0
	%47 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %46, i64 0, i32 22
	%48 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %47, i64 0, i32 7
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$229, i64 0, i32 0), i64 37}, i64 44, i64 25, i64 7, i64 43)
	store %imgui-12.Vec4 {float 0x3feafafae0000000, float 0x3feafafae0000000, float 0x3feafafae0000000, float 0x3fdcdcdcc0000000}, %imgui-12.Vec4* %48
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%49 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%50 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %49, i64 0
	%51 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %50, i64 0, i32 22
	%52 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %51, i64 0, i32 10
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$22a, i64 0, i32 0), i64 37}, i64 46, i64 25, i64 10, i64 43)
	store %imgui-12.Vec4 {float 0x3fe9191900000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %52
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%53 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%54 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %53, i64 0
	%55 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %54, i64 0, i32 22
	%56 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %55, i64 0, i32 11
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$22b, i64 0, i32 0), i64 37}, i64 47, i64 25, i64 11, i64 43)
	store %imgui-12.Vec4 {float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fe9999980000000, float 0x3fd9999980000000}, %imgui-12.Vec4* %56
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%57 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%58 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %57, i64 0
	%59 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %58, i64 0, i32 22
	%60 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %59, i64 0, i32 12
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$22c, i64 0, i32 0), i64 37}, i64 48, i64 25, i64 12, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %60
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%61 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%62 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %61, i64 0
	%63 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %62, i64 0, i32 22
	%64 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %63, i64 0, i32 13
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$22d, i64 0, i32 0), i64 37}, i64 50, i64 25, i64 13, i64 43)
	store %imgui-12.Vec4 {float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %64
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%65 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%66 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %65, i64 0
	%67 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %66, i64 0, i32 22
	%68 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %67, i64 0, i32 14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$22e, i64 0, i32 0), i64 37}, i64 52, i64 25, i64 14, i64 43)
	store %imgui-12.Vec4 {float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee9e9e80000000}, %imgui-12.Vec4* %68
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%69 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%70 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %69, i64 0
	%71 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %70, i64 0, i32 22
	%72 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %71, i64 0, i32 15
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$22f, i64 0, i32 0), i64 37}, i64 53, i64 25, i64 15, i64 43)
	store %imgui-12.Vec4 {float 0x3fe9999980000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fd3535340000000}, %imgui-12.Vec4* %72
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%73 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%74 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %73, i64 0
	%75 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %74, i64 0, i32 22
	%76 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %75, i64 0, i32 16
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$230, i64 0, i32 0), i64 37}, i64 54, i64 25, i64 16, i64 43)
	store %imgui-12.Vec4 {float 0x3fee1e1e00000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fd9999980000000}, %imgui-12.Vec4* %76
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%77 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%78 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %77, i64 0
	%79 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %78, i64 0, i32 22
	%80 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %79, i64 0, i32 17
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$231, i64 0, i32 0), i64 37}, i64 55, i64 25, i64 17, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3fe0101000000000, float 0x3fe0101000000000, float 0x3fd9999980000000}, %imgui-12.Vec4* %80
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%81 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%82 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %81, i64 0
	%83 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %82, i64 0, i32 22
	%84 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %83, i64 0, i32 18
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$232, i64 0, i32 0), i64 37}, i64 57, i64 25, i64 18, i64 43)
	store %imgui-12.Vec4 {float 0x3fecdcdcc0000000, float 0x3fecdcdcc0000000, float 0x3fecdcdcc0000000, float 0x3fef9f9f80000000}, %imgui-12.Vec4* %84
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%85 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%86 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %85, i64 0
	%87 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %86, i64 0, i32 22
	%88 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %87, i64 0, i32 19
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$233, i64 0, i32 0), i64 37}, i64 59, i64 25, i64 19, i64 43)
	store %imgui-12.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fef9f9f80000000}, %imgui-12.Vec4* %88
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%89 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%90 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %89, i64 0
	%91 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %90, i64 0, i32 22
	%92 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %91, i64 0, i32 20
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$234, i64 0, i32 0), i64 37}, i64 61, i64 25, i64 20, i64 43)
	store %imgui-12.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000}, %imgui-12.Vec4* %92
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%93 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%94 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %93, i64 0
	%95 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %94, i64 0, i32 22
	%96 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %95, i64 0, i32 21
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$235, i64 0, i32 0), i64 37}, i64 62, i64 25, i64 21, i64 43)
	store %imgui-12.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %96
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%97 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%98 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %97, i64 0
	%99 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %98, i64 0, i32 22
	%100 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %99, i64 0, i32 22
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$236, i64 0, i32 0), i64 37}, i64 64, i64 25, i64 22, i64 43)
	store %imgui-12.Vec4 {float 0x3fe9191900000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3fe3333320000000}, %imgui-12.Vec4* %100
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%102 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %101, i64 0
	%103 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %102, i64 0, i32 22
	%104 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %103, i64 0, i32 23
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$237, i64 0, i32 0), i64 37}, i64 65, i64 25, i64 23, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %104
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%105 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%106 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %105, i64 0
	%107 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %106, i64 0, i32 22
	%108 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %107, i64 0, i32 25
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$238, i64 0, i32 0), i64 37}, i64 67, i64 25, i64 25, i64 43)
	store %imgui-12.Vec4 {float 0x3fee1e1e00000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fdcdcdcc0000000}, %imgui-12.Vec4* %108
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%109 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%110 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %109, i64 0
	%111 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %110, i64 0, i32 22
	%112 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %111, i64 0, i32 26
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$239, i64 0, i32 0), i64 37}, i64 68, i64 25, i64 26, i64 43)
	store %imgui-12.Vec4 {float 0x3fee1e1e00000000, float 0x3fdcdcdcc0000000, float 0x3fe3737360000000, float 0x3fe9999980000000}, %imgui-12.Vec4* %112
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%113 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%114 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %113, i64 0
	%115 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %114, i64 0, i32 22
	%116 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %115, i64 0, i32 27
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$23a, i64 0, i32 0), i64 37}, i64 69, i64 25, i64 27, i64 43)
	store %imgui-12.Vec4 {float 0x3febdbdbc0000000, float 0x3fe0f0f0e0000000, float 0x3fe2323220000000, float 0x3fe9999980000000}, %imgui-12.Vec4* %116
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%117 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%118 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %117, i64 0
	%119 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %118, i64 0, i32 22
	%120 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %119, i64 0, i32 31
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$23b, i64 0, i32 0), i64 37}, i64 71, i64 25, i64 31, i64 43)
	store %imgui-12.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fd3535340000000}, %imgui-12.Vec4* %120
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%121 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%122 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %121, i64 0
	%123 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %122, i64 0, i32 22
	%124 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %123, i64 0, i32 32
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$23c, i64 0, i32 0), i64 37}, i64 72, i64 25, i64 32, i64 43)
	store %imgui-12.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe3333320000000}, %imgui-12.Vec4* %124
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%125 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%126 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %125, i64 0
	%127 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %126, i64 0, i32 22
	%128 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %127, i64 0, i32 33
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$23d, i64 0, i32 0), i64 37}, i64 73, i64 25, i64 33, i64 43)
	store %imgui-12.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fecdcdcc0000000}, %imgui-12.Vec4* %128
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%129 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%130 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %129, i64 0
	%131 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %130, i64 0, i32 22
	%132 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %131, i64 0, i32 37
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$23e, i64 0, i32 0), i64 37}, i64 75, i64 25, i64 37, i64 43)
	store %imgui-12.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %132
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%133 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%134 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %133, i64 0
	%135 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %134, i64 0, i32 22
	%136 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %135, i64 0, i32 40
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$23f, i64 0, i32 0), i64 37}, i64 76, i64 25, i64 40, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x3fdd1d1d00000000, float 0x0000000000000000, float 0x3ff0000000000000}, %imgui-12.Vec4* %136
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%137 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%138 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %137, i64 0
	%139 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %138, i64 0, i32 22
	%140 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %139, i64 0, i32 41
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$240, i64 0, i32 0), i64 37}, i64 78, i64 25, i64 41, i64 43)
	store %imgui-12.Vec4 {float 0x3ff0000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3fd6565640000000}, %imgui-12.Vec4* %140
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%141 = load %imgui-12.GuiStyle*, %imgui-12.GuiStyle** %0, align 8
	%142 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %141, i64 0
	%143 = getelementptr inbounds %imgui-12.GuiStyle, %imgui-12.GuiStyle* %142, i64 0, i32 22
	%144 = getelementptr inbounds [43 x %imgui-12.Vec4], [43 x %imgui-12.Vec4]* %143, i64 0, i32 42
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$241, i64 0, i32 0), i64 37}, i64 80, i64 25, i64 42, i64 43)
	store %imgui-12.Vec4 {float 0x3fc9999980000000, float 0x3fc9999980000000, float 0x3fc9999980000000, float 0x3fd6969680000000}, %imgui-12.Vec4* %144
	ret void
}

define void @.jaze_imgui-17.Init(%..rawptr %windowHandle) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %imgui-12.GuiIO*, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %..string, align 8
	%4 = alloca i32, align 4
	%5 = alloca i1, align 1
	%6 = alloca i32, align 4
	%7 = alloca i1, align 1
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca i32, align 4
	%11 = alloca %__Map_Header, align 8
	%12 = alloca %__Map_Key, align 8
	%13 = alloca i32, align 4
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca i32, align 4
	%17 = alloca %__Map_Header, align 8
	%18 = alloca %__Map_Key, align 8
	%19 = alloca i32, align 4
	%20 = alloca %__Map_Header, align 8
	%21 = alloca %__Map_Key, align 8
	%22 = alloca i32, align 4
	%23 = alloca {i32, i1}, align 4
	%24 = alloca %__Map_Header, align 8
	%25 = alloca %__Map_Key, align 8
	%26 = alloca {i32, i1}, align 4
	%27 = alloca %__Map_Header, align 8
	%28 = alloca %__Map_Key, align 8
	%29 = alloca {i32, i1}, align 4
	%30 = alloca %__Map_Header, align 8
	%31 = alloca %__Map_Key, align 8
	%32 = alloca {i32, i1}, align 4
	%33 = alloca %__Map_Header, align 8
	%34 = alloca %__Map_Key, align 8
	%35 = alloca {i32, i1}, align 4
	%36 = alloca %__Map_Header, align 8
	%37 = alloca %__Map_Key, align 8
	%38 = alloca {i32, i1}, align 4
	%39 = alloca %__Map_Header, align 8
	%40 = alloca %__Map_Key, align 8
	%41 = alloca i8*, align 8
	%42 = alloca i32, align 4
	%43 = alloca i32, align 4
	%44 = alloca i32, align 4
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %windowHandle, %..rawptr* %0
	; io
	store %imgui-12.GuiIO* zeroinitializer, %imgui-12.GuiIO** %1
		%45 = call ccc %imgui-12.GuiIO* @igGetIO()
	store %imgui-12.GuiIO* %45, %imgui-12.GuiIO** %1
	; AssignStmt
	; SelectorExpr
	%46 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%47 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %46, i64 0
	%48 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %47, i64 0, i32 28
	%49 = load %..rawptr, %..rawptr* %0, align 8
	store %..rawptr %49, %..rawptr* %48
	; AssignStmt
	; SelectorExpr
	%50 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%51 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %50, i64 0
	%52 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %51, i64 0, i32 22
	store void (%imgui-12.DrawData*)* @.jaze_imgui-17.RenderProc, void (%imgui-12.DrawData*)** %52
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%53 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%54 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %53, i64 0
	%55 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %54, i64 0, i32 8
	%56 = getelementptr inbounds [19 x i32], [19 x i32]* %55, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$242, i64 0, i32 0), i64 37}, i64 88, i64 22, i64 0, i64 19)
	store i32 9, i32* %56
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%57 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%58 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %57, i64 0
	%59 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %58, i64 0, i32 8
	%60 = getelementptr inbounds [19 x i32], [19 x i32]* %59, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$243, i64 0, i32 0), i64 37}, i64 89, i64 22, i64 1, i64 19)
	store i32 37, i32* %60
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%61 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%62 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %61, i64 0
	%63 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %62, i64 0, i32 8
	%64 = getelementptr inbounds [19 x i32], [19 x i32]* %63, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$244, i64 0, i32 0), i64 37}, i64 90, i64 22, i64 2, i64 19)
	store i32 39, i32* %64
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%65 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%66 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %65, i64 0
	%67 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %66, i64 0, i32 8
	%68 = getelementptr inbounds [19 x i32], [19 x i32]* %67, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$245, i64 0, i32 0), i64 37}, i64 91, i64 22, i64 3, i64 19)
	store i32 38, i32* %68
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%69 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%70 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %69, i64 0
	%71 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %70, i64 0, i32 8
	%72 = getelementptr inbounds [19 x i32], [19 x i32]* %71, i64 0, i32 4
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$246, i64 0, i32 0), i64 37}, i64 92, i64 22, i64 4, i64 19)
	store i32 40, i32* %72
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%73 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%74 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %73, i64 0
	%75 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %74, i64 0, i32 8
	%76 = getelementptr inbounds [19 x i32], [19 x i32]* %75, i64 0, i32 5
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$247, i64 0, i32 0), i64 37}, i64 93, i64 22, i64 5, i64 19)
	store i32 34, i32* %76
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%77 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%78 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %77, i64 0
	%79 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %78, i64 0, i32 8
	%80 = getelementptr inbounds [19 x i32], [19 x i32]* %79, i64 0, i32 6
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$248, i64 0, i32 0), i64 37}, i64 94, i64 22, i64 6, i64 19)
	store i32 33, i32* %80
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%81 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%82 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %81, i64 0
	%83 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %82, i64 0, i32 8
	%84 = getelementptr inbounds [19 x i32], [19 x i32]* %83, i64 0, i32 7
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$249, i64 0, i32 0), i64 37}, i64 95, i64 22, i64 7, i64 19)
	store i32 36, i32* %84
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%85 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%86 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %85, i64 0
	%87 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %86, i64 0, i32 8
	%88 = getelementptr inbounds [19 x i32], [19 x i32]* %87, i64 0, i32 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$24a, i64 0, i32 0), i64 37}, i64 96, i64 22, i64 8, i64 19)
	store i32 35, i32* %88
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%89 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%90 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %89, i64 0
	%91 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %90, i64 0, i32 8
	%92 = getelementptr inbounds [19 x i32], [19 x i32]* %91, i64 0, i32 9
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$24b, i64 0, i32 0), i64 37}, i64 97, i64 22, i64 9, i64 19)
	store i32 46, i32* %92
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%93 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%94 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %93, i64 0
	%95 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %94, i64 0, i32 8
	%96 = getelementptr inbounds [19 x i32], [19 x i32]* %95, i64 0, i32 10
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$24c, i64 0, i32 0), i64 37}, i64 98, i64 22, i64 10, i64 19)
	store i32 8, i32* %96
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%97 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%98 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %97, i64 0
	%99 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %98, i64 0, i32 8
	%100 = getelementptr inbounds [19 x i32], [19 x i32]* %99, i64 0, i32 11
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$24d, i64 0, i32 0), i64 37}, i64 99, i64 22, i64 11, i64 19)
	store i32 13, i32* %100
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%102 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %101, i64 0
	%103 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %102, i64 0, i32 8
	%104 = getelementptr inbounds [19 x i32], [19 x i32]* %103, i64 0, i32 12
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$24e, i64 0, i32 0), i64 37}, i64 100, i64 22, i64 12, i64 19)
	store i32 27, i32* %104
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%105 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%106 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %105, i64 0
	%107 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %106, i64 0, i32 8
	%108 = getelementptr inbounds [19 x i32], [19 x i32]* %107, i64 0, i32 13
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$24f, i64 0, i32 0), i64 37}, i64 101, i64 22, i64 13, i64 19)
	store i32 65, i32* %108
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%109 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%110 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %109, i64 0
	%111 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %110, i64 0, i32 8
	%112 = getelementptr inbounds [19 x i32], [19 x i32]* %111, i64 0, i32 14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$250, i64 0, i32 0), i64 37}, i64 102, i64 22, i64 14, i64 19)
	store i32 67, i32* %112
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%113 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%114 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %113, i64 0
	%115 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %114, i64 0, i32 8
	%116 = getelementptr inbounds [19 x i32], [19 x i32]* %115, i64 0, i32 15
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$251, i64 0, i32 0), i64 37}, i64 103, i64 22, i64 15, i64 19)
	store i32 86, i32* %116
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%117 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%118 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %117, i64 0
	%119 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %118, i64 0, i32 8
	%120 = getelementptr inbounds [19 x i32], [19 x i32]* %119, i64 0, i32 16
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$252, i64 0, i32 0), i64 37}, i64 104, i64 22, i64 16, i64 19)
	store i32 88, i32* %120
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%121 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%122 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %121, i64 0
	%123 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %122, i64 0, i32 8
	%124 = getelementptr inbounds [19 x i32], [19 x i32]* %123, i64 0, i32 17
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$253, i64 0, i32 0), i64 37}, i64 105, i64 22, i64 17, i64 19)
	store i32 89, i32* %124
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%125 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%126 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %125, i64 0
	%127 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %126, i64 0, i32 8
	%128 = getelementptr inbounds [19 x i32], [19 x i32]* %127, i64 0, i32 18
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$254, i64 0, i32 0), i64 37}, i64 106, i64 22, i64 18, i64 19)
	store i32 90, i32* %128
	; vertexShaderString
	store %..string zeroinitializer, %..string* %2
		store %..string {i8* getelementptr inbounds ([320 x i8], [320 x i8]* @.__str$255, i64 0, i32 0), i64 320}, %..string* %2
	; fragmentShaderString
	store %..string zeroinitializer, %..string* %3
		store %..string {i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.__str$256, i64 0, i32 0), i64 235}, %..string* %3
	; AssignStmt
	; SelectorExpr
	%129 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	; SelectorExpr
	%130 = call %jaze_gl-14.Program @.jaze_gl-14.CreateProgram()
	store %jaze_gl-14.Program %130, %jaze_gl-14.Program* %129
	; vertexShader
	store i32 zeroinitializer, i32* %4
		; ok1
	store i1 zeroinitializer, i1* %5
		; SelectorExpr
	%131 = load %..string, %..string* %2, align 8
	%132 = call {i32, i1} @.jaze_gl_util-30.CreateAndCompileShader(i32 35633, %..string %131)
	%133 = extractvalue {i32, i1} %132, 0
	%134 = extractvalue {i32, i1} %132, 1
	store i32 %133, i32* %4
	store i1 %134, i1* %5
	; fragmentShader
	store i32 zeroinitializer, i32* %6
		; ok2
	store i1 zeroinitializer, i1* %7
		; SelectorExpr
	%135 = load %..string, %..string* %3, align 8
	%136 = call {i32, i1} @.jaze_gl_util-30.CreateAndCompileShader(i32 35632, %..string %135)
	%137 = extractvalue {i32, i1} %136, 0
	%138 = extractvalue {i32, i1} %136, 1
	store i32 %137, i32* %6
	store i1 %138, i1* %7
	; IfStmt
	%139 = load i1, i1* %5, align 1
	br i1 %139, label %cmp.or-1, label %if.then-2

cmp.or-1:
	%140 = load i1, i1* %7, align 1
	br i1 %140, label %if.done-3, label %if.then-2

if.then-2:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$257, i64 0, i32 0), i64 37}, i64 140, i64 15, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$258, i64 0, i32 0), i64 6})
	br label %if.done-3

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%141 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%142 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %141, align 8
	%143 = load i32, i32* %4, align 4
	call void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %142, i32 %143)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%144 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%145 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %144, i64 0, i32 3
	%146 = load i32, i32* %4, align 4
	store i32 %146, i32* %145
	; SelectorExpr
	; SelectorExpr
	%147 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%148 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %147, align 8
	%149 = load i32, i32* %6, align 4
	call void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %148, i32 %149)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%150 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%151 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %150, i64 0, i32 4
	%152 = load i32, i32* %6, align 4
	store i32 %152, i32* %151
	; SelectorExpr
	; SelectorExpr
	%153 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%154 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %153, align 8
	call void @.jaze_gl-14.LinkProgram(%jaze_gl-14.Program %154)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%155 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%156 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %155, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%157 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%158 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %157, align 8
	%159 = call i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %158, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$259, i64 0, i32 0), i64 7})
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%160 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%161 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %156 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %161, %raw-6.Dynamic_Map** %160
	%162 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %162
	%163 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %163
	%164 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %164
	%165 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %165
	%166 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 5
	store i64 4, i64* %166
	%167 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%168 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 2829778445906215252, i64* %168
	%169 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$25a, i64 0, i32 0), i64 7}, %..string* %169
	%170 = load %__Map_Key, %__Map_Key* %9, align 8
	store i32 zeroinitializer, i32* %10
	store i32 %159, i32* %10
	%171 = bitcast i32* %10 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %167, %__Map_Key %170, %..rawptr %171)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%172 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%173 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %172, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%174 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%175 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %174, align 8
	%176 = call i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %175, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$25b, i64 0, i32 0), i64 7})
	store %__Map_Header zeroinitializer, %__Map_Header* %11
	%177 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 0
	%178 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %173 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %178, %raw-6.Dynamic_Map** %177
	%179 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 1
	store i1 true, i1* %179
	%180 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 2
	store i64 40, i64* %180
	%181 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 3
	store i64 8, i64* %181
	%182 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 4
	store i64 32, i64* %182
	%183 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 5
	store i64 4, i64* %183
	%184 = load %__Map_Header, %__Map_Header* %11, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %12
	%185 = getelementptr inbounds %__Map_Key, %__Map_Key* %12, i64 0, i32 0
	store i64 -9017138883755609675, i64* %185
	%186 = getelementptr inbounds %__Map_Key, %__Map_Key* %12, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$25c, i64 0, i32 0), i64 7}, %..string* %186
	%187 = load %__Map_Key, %__Map_Key* %12, align 8
	store i32 zeroinitializer, i32* %13
	store i32 %176, i32* %13
	%188 = bitcast i32* %13 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %184, %__Map_Key %187, %..rawptr %188)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%189 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%190 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %189, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%191 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%192 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %191, align 8
	%193 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %192, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$25d, i64 0, i32 0), i64 8})
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%194 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%195 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %190 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %195, %raw-6.Dynamic_Map** %194
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %196
	%197 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %197
	%198 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %198
	%199 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %199
	%200 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 5
	store i64 4, i64* %200
	%201 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%202 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 -4512294542364210646, i64* %202
	%203 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$25e, i64 0, i32 0), i64 8}, %..string* %203
	%204 = load %__Map_Key, %__Map_Key* %15, align 8
	store i32 zeroinitializer, i32* %16
	store i32 %193, i32* %16
	%205 = bitcast i32* %16 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %201, %__Map_Key %204, %..rawptr %205)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%206 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%207 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %206, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%208 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%209 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %208, align 8
	%210 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %209, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$25f, i64 0, i32 0), i64 2})
	store %__Map_Header zeroinitializer, %__Map_Header* %17
	%211 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 0
	%212 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %207 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %212, %raw-6.Dynamic_Map** %211
	%213 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 1
	store i1 true, i1* %213
	%214 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 2
	store i64 40, i64* %214
	%215 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 3
	store i64 8, i64* %215
	%216 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 4
	store i64 32, i64* %216
	%217 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 5
	store i64 4, i64* %217
	%218 = load %__Map_Header, %__Map_Header* %17, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %18
	%219 = getelementptr inbounds %__Map_Key, %__Map_Key* %18, i64 0, i32 0
	store i64 662345837686521650, i64* %219
	%220 = getelementptr inbounds %__Map_Key, %__Map_Key* %18, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$260, i64 0, i32 0), i64 2}, %..string* %220
	%221 = load %__Map_Key, %__Map_Key* %18, align 8
	store i32 zeroinitializer, i32* %19
	store i32 %210, i32* %19
	%222 = bitcast i32* %19 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %218, %__Map_Key %221, %..rawptr %222)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%223 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%224 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %223, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%225 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%226 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %225, align 8
	%227 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %226, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$261, i64 0, i32 0), i64 5})
	store %__Map_Header zeroinitializer, %__Map_Header* %20
	%228 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 0
	%229 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %224 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %229, %raw-6.Dynamic_Map** %228
	%230 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 1
	store i1 true, i1* %230
	%231 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 2
	store i64 40, i64* %231
	%232 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 3
	store i64 8, i64* %232
	%233 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 4
	store i64 32, i64* %233
	%234 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 5
	store i64 4, i64* %234
	%235 = load %__Map_Header, %__Map_Header* %20, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %21
	%236 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 0
	store i64 3769135706557701272, i64* %236
	%237 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$262, i64 0, i32 0), i64 5}, %..string* %237
	%238 = load %__Map_Key, %__Map_Key* %21, align 8
	store i32 zeroinitializer, i32* %22
	store i32 %227, i32* %22
	%239 = bitcast i32* %22 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %235, %__Map_Key %238, %..rawptr %239)
	; AssignStmt
	; SelectorExpr
	%240 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 2
	; SelectorExpr
	%241 = call i32 @.jaze_gl-14.GenBuffer()
	; cast - cast
	store i32 %241, i32* %240
	; AssignStmt
	; SelectorExpr
	%242 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 3
	; SelectorExpr
	%243 = call i32 @.jaze_gl-14.GenBuffer()
	; cast - cast
	store i32 %243, i32* %242
	; AssignStmt
	; SelectorExpr
	%244 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 4
	; SelectorExpr
	%245 = call i32 @.jaze_gl-14.GenVertexArray()
	store i32 %245, i32* %244
	; SelectorExpr
	; SelectorExpr
	%246 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 2
	%247 = load i32, i32* %246, align 4
	call void @.jaze_gl-14.BindBuffer-2686136247936(i32 %247)
	; SelectorExpr
	; SelectorExpr
	%248 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 3
	%249 = load i32, i32* %248, align 4
	call void @.jaze_gl-14.BindBuffer-2686136248304(i32 %249)
	; SelectorExpr
	; SelectorExpr
	%250 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 4
	%251 = load i32, i32* %250, align 4
	call void @.jaze_gl-14.BindVertexArray(i32 %251)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%252 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%253 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %252, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %23
	store %__Map_Header zeroinitializer, %__Map_Header* %24
	%254 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 0
	%255 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %253 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %255, %raw-6.Dynamic_Map** %254
	%256 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 1
	store i1 true, i1* %256
	%257 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 2
	store i64 40, i64* %257
	%258 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 3
	store i64 8, i64* %258
	%259 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 4
	store i64 32, i64* %259
	%260 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 5
	store i64 4, i64* %260
	%261 = load %__Map_Header, %__Map_Header* %24, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %25
	%262 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 0
	store i64 -4512294542364210646, i64* %262
	%263 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$263, i64 0, i32 0), i64 8}, %..string* %263
	%264 = load %__Map_Key, %__Map_Key* %25, align 8
	%265 = call %..rawptr @.__dynamic_map_get(%__Map_Header %261, %__Map_Key %264)
	%266 = icmp ne %..rawptr %265, null
	%267 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 1
	store i1 %266, i1* %267
	br i1 %266, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%268 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 0
	%269 = bitcast %..rawptr %265 to i32*
	%270 = load i32, i32* %269, align 4
	store i32 %270, i32* %268
	br label %map.get.done-5

map.get.done-5:
	%271 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 0
	%272 = load i32, i32* %271, align 4
	; cast - cast
	%273 = bitcast i32 %272 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %273)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%274 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%275 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %274, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %26
	store %__Map_Header zeroinitializer, %__Map_Header* %27
	%276 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 0
	%277 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %275 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %277, %raw-6.Dynamic_Map** %276
	%278 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 1
	store i1 true, i1* %278
	%279 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 2
	store i64 40, i64* %279
	%280 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 3
	store i64 8, i64* %280
	%281 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 4
	store i64 32, i64* %281
	%282 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 5
	store i64 4, i64* %282
	%283 = load %__Map_Header, %__Map_Header* %27, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %28
	%284 = getelementptr inbounds %__Map_Key, %__Map_Key* %28, i64 0, i32 0
	store i64 662345837686521650, i64* %284
	%285 = getelementptr inbounds %__Map_Key, %__Map_Key* %28, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$264, i64 0, i32 0), i64 2}, %..string* %285
	%286 = load %__Map_Key, %__Map_Key* %28, align 8
	%287 = call %..rawptr @.__dynamic_map_get(%__Map_Header %283, %__Map_Key %286)
	%288 = icmp ne %..rawptr %287, null
	%289 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 1
	store i1 %288, i1* %289
	br i1 %288, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%290 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 0
	%291 = bitcast %..rawptr %287 to i32*
	%292 = load i32, i32* %291, align 4
	store i32 %292, i32* %290
	br label %map.get.done-7

map.get.done-7:
	%293 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 0
	%294 = load i32, i32* %293, align 4
	; cast - cast
	%295 = bitcast i32 %294 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %295)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%296 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%297 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %296, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %29
	store %__Map_Header zeroinitializer, %__Map_Header* %30
	%298 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 0
	%299 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %297 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %299, %raw-6.Dynamic_Map** %298
	%300 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 1
	store i1 true, i1* %300
	%301 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 2
	store i64 40, i64* %301
	%302 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 3
	store i64 8, i64* %302
	%303 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 4
	store i64 32, i64* %303
	%304 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 5
	store i64 4, i64* %304
	%305 = load %__Map_Header, %__Map_Header* %30, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %31
	%306 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 0
	store i64 3769135706557701272, i64* %306
	%307 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$265, i64 0, i32 0), i64 5}, %..string* %307
	%308 = load %__Map_Key, %__Map_Key* %31, align 8
	%309 = call %..rawptr @.__dynamic_map_get(%__Map_Header %305, %__Map_Key %308)
	%310 = icmp ne %..rawptr %309, null
	%311 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 1
	store i1 %310, i1* %311
	br i1 %310, label %map.get.then-8, label %map.get.done-9

map.get.then-8:
	%312 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 0
	%313 = bitcast %..rawptr %309 to i32*
	%314 = load i32, i32* %313, align 4
	store i32 %314, i32* %312
	br label %map.get.done-9

map.get.done-9:
	%315 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 0
	%316 = load i32, i32* %315, align 4
	; cast - cast
	%317 = bitcast i32 %316 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %317)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%318 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%319 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %318, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %32
	store %__Map_Header zeroinitializer, %__Map_Header* %33
	%320 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 0
	%321 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %319 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %321, %raw-6.Dynamic_Map** %320
	%322 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 1
	store i1 true, i1* %322
	%323 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 2
	store i64 40, i64* %323
	%324 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 3
	store i64 8, i64* %324
	%325 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 4
	store i64 32, i64* %325
	%326 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 5
	store i64 4, i64* %326
	%327 = load %__Map_Header, %__Map_Header* %33, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %34
	%328 = getelementptr inbounds %__Map_Key, %__Map_Key* %34, i64 0, i32 0
	store i64 -4512294542364210646, i64* %328
	%329 = getelementptr inbounds %__Map_Key, %__Map_Key* %34, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$266, i64 0, i32 0), i64 8}, %..string* %329
	%330 = load %__Map_Key, %__Map_Key* %34, align 8
	%331 = call %..rawptr @.__dynamic_map_get(%__Map_Header %327, %__Map_Key %330)
	%332 = icmp ne %..rawptr %331, null
	%333 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 1
	store i1 %332, i1* %333
	br i1 %332, label %map.get.then-10, label %map.get.done-11

map.get.then-10:
	%334 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 0
	%335 = bitcast %..rawptr %331 to i32*
	%336 = load i32, i32* %335, align 4
	store i32 %336, i32* %334
	br label %map.get.done-11

map.get.done-11:
	%337 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 0
	%338 = load i32, i32* %337, align 4
	; cast - cast
	%339 = bitcast i32 %338 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %339, i32 2, i32 5126, i1 false, i32 20, %..rawptr null)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%340 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%341 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %340, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %35
	store %__Map_Header zeroinitializer, %__Map_Header* %36
	%342 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 0
	%343 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %341 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %343, %raw-6.Dynamic_Map** %342
	%344 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 1
	store i1 true, i1* %344
	%345 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 2
	store i64 40, i64* %345
	%346 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 3
	store i64 8, i64* %346
	%347 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 4
	store i64 32, i64* %347
	%348 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 5
	store i64 4, i64* %348
	%349 = load %__Map_Header, %__Map_Header* %36, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %37
	%350 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 0
	store i64 662345837686521650, i64* %350
	%351 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$267, i64 0, i32 0), i64 2}, %..string* %351
	%352 = load %__Map_Key, %__Map_Key* %37, align 8
	%353 = call %..rawptr @.__dynamic_map_get(%__Map_Header %349, %__Map_Key %352)
	%354 = icmp ne %..rawptr %353, null
	%355 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 1
	store i1 %354, i1* %355
	br i1 %354, label %map.get.then-12, label %map.get.done-13

map.get.then-12:
	%356 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 0
	%357 = bitcast %..rawptr %353 to i32*
	%358 = load i32, i32* %357, align 4
	store i32 %358, i32* %356
	br label %map.get.done-13

map.get.done-13:
	%359 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 0
	%360 = load i32, i32* %359, align 4
	; cast - cast
	%361 = bitcast i32 %360 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %361, i32 2, i32 5126, i1 false, i32 20, %..rawptr inttoptr (i64 8 to %..rawptr))
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%362 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%363 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %362, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %38
	store %__Map_Header zeroinitializer, %__Map_Header* %39
	%364 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 0
	%365 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %363 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %365, %raw-6.Dynamic_Map** %364
	%366 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 1
	store i1 true, i1* %366
	%367 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 2
	store i64 40, i64* %367
	%368 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 3
	store i64 8, i64* %368
	%369 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 4
	store i64 32, i64* %369
	%370 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 5
	store i64 4, i64* %370
	%371 = load %__Map_Header, %__Map_Header* %39, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %40
	%372 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 0
	store i64 3769135706557701272, i64* %372
	%373 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$268, i64 0, i32 0), i64 5}, %..string* %373
	%374 = load %__Map_Key, %__Map_Key* %40, align 8
	%375 = call %..rawptr @.__dynamic_map_get(%__Map_Header %371, %__Map_Key %374)
	%376 = icmp ne %..rawptr %375, null
	%377 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 1
	store i1 %376, i1* %377
	br i1 %376, label %map.get.then-14, label %map.get.done-15

map.get.then-14:
	%378 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 0
	%379 = bitcast %..rawptr %375 to i32*
	%380 = load i32, i32* %379, align 4
	store i32 %380, i32* %378
	br label %map.get.done-15

map.get.done-15:
	%381 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 0
	%382 = load i32, i32* %381, align 4
	; cast - cast
	%383 = bitcast i32 %382 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %383, i32 4, i32 5121, i1 true, i32 20, %..rawptr inttoptr (i64 16 to %..rawptr))
	; pixels
	store i8* zeroinitializer, i8** %41
		; width
	store i32 zeroinitializer, i32* %42
		; height
	store i32 zeroinitializer, i32* %43
		; bytePer
	store i32 zeroinitializer, i32* %44
		; SelectorExpr
	%384 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%385 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %384, i64 0
	%386 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %385, i64 0, i32 12
	%387 = load %imgui-12.FontAtlas*, %imgui-12.FontAtlas** %386, align 8
	%388 = getelementptr inbounds i8*, i8** %41, i64 0
	%389 = getelementptr inbounds i32, i32* %42, i64 0
	%390 = getelementptr inbounds i32, i32* %43, i64 0
	%391 = getelementptr inbounds i32, i32* %44, i64 0
	call ccc void @ImFontAtlas_GetTexDataAsRGBA32(%imgui-12.FontAtlas* %387, i8** %388, i32* %389, i32* %390, i32* %391)
	; AssignStmt
	; SelectorExpr
	%392 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 5
	; SelectorExpr
	%393 = call i32 @.jaze_gl-14.GenTexture()
	store i32 %393, i32* %392
	; SelectorExpr
	; SelectorExpr
	%394 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 5
	%395 = load i32, i32* %394, align 4
	call void @.jaze_gl-14.BindTexture(i32 3553, i32 %395)
	; SelectorExpr
	call void @.jaze_gl-14.TexParameteri(i32 3553, i32 10241, i32 9729)
	; SelectorExpr
	call void @.jaze_gl-14.TexParameteri(i32 3553, i32 10240, i32 9729)
	; SelectorExpr
	%396 = load i32, i32* %42, align 4
	%397 = load i32, i32* %43, align 4
	%398 = load i8*, i8** %41, align 8
	%399 = bitcast i8* %398 to %..rawptr
	call void @.jaze_gl-14.TexImage2D(i32 3553, i32 0, i32 6408, i32 %396, i32 %397, i32 6408, i32 5121, %..rawptr %399)
	; SelectorExpr
	%400 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%401 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %400, i64 0
	%402 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %401, i64 0, i32 12
	%403 = load %imgui-12.FontAtlas*, %imgui-12.FontAtlas** %402, align 8
	; SelectorExpr
	%404 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 5
	%405 = getelementptr inbounds i32, i32* %404, i64 0
	; cast - cast
	%406 = bitcast i32* %405 to %..rawptr
	call ccc void @ImFontAtlas_SetTexID(%imgui-12.FontAtlas* %403, %..rawptr %406)
	call void @.jaze_imgui-17.SetStyle()
	ret void
}

define void @.jaze_imgui-17.BeginNewFrame(double %deltaTime) {
decls-0:
	%0 = alloca double, align 8
	%1 = alloca %imgui-12.GuiIO*, align 8
	%2 = alloca %windows-7.Rect, align 4
	%3 = alloca %windows-7.Point, align 4
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store double zeroinitializer, double* %0
		store double %deltaTime, double* %0
	; io
	store %imgui-12.GuiIO* zeroinitializer, %imgui-12.GuiIO** %1
		%10 = call ccc %imgui-12.GuiIO* @igGetIO()
	store %imgui-12.GuiIO* %10, %imgui-12.GuiIO** %1
	; rect
	store %windows-7.Rect zeroinitializer, %windows-7.Rect* %2
		; SelectorExpr
	; SelectorExpr
	%11 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%12 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %11, i64 0
	%13 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %12, i64 0, i32 28
	%14 = load %..rawptr, %..rawptr* %13, align 8
	; cast - cast
	%15 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %2, i64 0
	%16 = call ccc i32 @GetClientRect(%..rawptr %14, %windows-7.Rect* %15)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%17 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%18 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %17, i64 0
	%19 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %18, i64 0, i32 0
	%20 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %19, i64 0, i32 0
	; SelectorExpr
	%21 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %2, i64 0, i32 2
	%22 = load i32, i32* %21, align 4
	; cast - cast
	%23 = sitofp i32 %22 to float
	store float %23, float* %20
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%25 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %24, i64 0
	%26 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %25, i64 0, i32 0
	%27 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %26, i64 0, i32 1
	; SelectorExpr
	%28 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %2, i64 0, i32 3
	%29 = load i32, i32* %28, align 4
	; cast - cast
	%30 = sitofp i32 %29 to float
	store float %30, float* %27
	; IfStmt
	; SelectorExpr
	%31 = call ccc %..rawptr @GetActiveWindow()
	; SelectorExpr
	%32 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%33 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %32, i64 0
	%34 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %33, i64 0, i32 28
	%35 = load %..rawptr, %..rawptr* %34, align 8
	; cast - cast
	%36 = icmp eq %..rawptr %31, %35
	br i1 %36, label %if.then-1, label %if.else-13

if.then-1:
	; pos
	store %windows-7.Point zeroinitializer, %windows-7.Point* %3
		; SelectorExpr
	%37 = getelementptr inbounds %windows-7.Point, %windows-7.Point* %3, i64 0
	%38 = call ccc i32 @GetCursorPos(%windows-7.Point* %37)
	; SelectorExpr
	; SelectorExpr
	%39 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%40 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %39, i64 0
	%41 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %40, i64 0, i32 28
	%42 = load %..rawptr, %..rawptr* %41, align 8
	; cast - cast
	%43 = getelementptr inbounds %windows-7.Point, %windows-7.Point* %3, i64 0
	%44 = call ccc i32 @ScreenToClient(%..rawptr %42, %windows-7.Point* %43)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%45 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%46 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %45, i64 0
	%47 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %46, i64 0, i32 29
	%48 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %47, i64 0, i32 0
	; SelectorExpr
	%49 = getelementptr inbounds %windows-7.Point, %windows-7.Point* %3, i64 0, i32 0
	%50 = load i32, i32* %49, align 4
	; cast - cast
	%51 = sitofp i32 %50 to float
	store float %51, float* %48
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%52 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%53 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %52, i64 0
	%54 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %53, i64 0, i32 29
	%55 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %54, i64 0, i32 1
	; SelectorExpr
	%56 = getelementptr inbounds %windows-7.Point, %windows-7.Point* %3, i64 0, i32 1
	%57 = load i32, i32* %56, align 4
	; cast - cast
	%58 = sitofp i32 %57 to float
	store float %58, float* %55
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%59 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%60 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %59, i64 0
	%61 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %60, i64 0, i32 30
	%62 = getelementptr inbounds [5 x i1], [5 x i1]* %61, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$269, i64 0, i32 0), i64 37}, i64 202, i64 22, i64 0, i64 5)
	; SelectorExpr
	%63 = call i1 @.windows-7.is_key_down(i32 1)
	store i1 %63, i1* %62
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%64 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%65 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %64, i64 0
	%66 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %65, i64 0, i32 30
	%67 = getelementptr inbounds [5 x i1], [5 x i1]* %66, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$26a, i64 0, i32 0), i64 37}, i64 203, i64 22, i64 1, i64 5)
	; SelectorExpr
	%68 = call i1 @.windows-7.is_key_down(i32 2)
	store i1 %68, i1* %67
	; AssignStmt
	; SelectorExpr
	%69 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%70 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %69, i64 0
	%71 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %70, i64 0, i32 31
	; SelectorExpr
	%72 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 1
	%73 = load i32, i32* %72, align 4
	; cast - cast
	%74 = sitofp i32 %73 to float
	store float %74, float* %71
	; AssignStmt
	; SelectorExpr
	%75 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%76 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %75, i64 0
	%77 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %76, i64 0, i32 33
	; SelectorExpr
	%78 = call i1 @.windows-7.is_key_down(i32 162)
	; SelectorExpr
	%79 = call i1 @.windows-7.is_key_down(i32 162)
	br i1 %79, label %logical.cmp.done-3, label %logical.cmp.rhs-2

logical.cmp.rhs-2:
	; SelectorExpr
	%80 = call i1 @.windows-7.is_key_down(i32 163)
	br label %logical.cmp.done-3

logical.cmp.done-3:
	%81 = phi i1 [ true, %if.then-1 ], [ %80, %logical.cmp.rhs-2 ]
	store i1 %81, i1* %77
	; AssignStmt
	; SelectorExpr
	%82 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%83 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %82, i64 0
	%84 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %83, i64 0, i32 34
	; SelectorExpr
	%85 = call i1 @.windows-7.is_key_down(i32 160)
	; SelectorExpr
	%86 = call i1 @.windows-7.is_key_down(i32 160)
	br i1 %86, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; SelectorExpr
	%87 = call i1 @.windows-7.is_key_down(i32 161)
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%88 = phi i1 [ true, %logical.cmp.done-3 ], [ %87, %logical.cmp.rhs-4 ]
	store i1 %88, i1* %84
	; AssignStmt
	; SelectorExpr
	%89 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%90 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %89, i64 0
	%91 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %90, i64 0, i32 35
	; SelectorExpr
	%92 = call i1 @.windows-7.is_key_down(i32 164)
	; SelectorExpr
	%93 = call i1 @.windows-7.is_key_down(i32 164)
	br i1 %93, label %logical.cmp.done-7, label %logical.cmp.rhs-6

logical.cmp.rhs-6:
	; SelectorExpr
	%94 = call i1 @.windows-7.is_key_down(i32 165)
	br label %logical.cmp.done-7

logical.cmp.done-7:
	%95 = phi i1 [ true, %logical.cmp.done-5 ], [ %94, %logical.cmp.rhs-6 ]
	store i1 %95, i1* %91
	; AssignStmt
	; SelectorExpr
	%96 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%97 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %96, i64 0
	%98 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %97, i64 0, i32 36
	; SelectorExpr
	%99 = call i1 @.windows-7.is_key_down(i32 91)
	; SelectorExpr
	%100 = call i1 @.windows-7.is_key_down(i32 91)
	br i1 %100, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; SelectorExpr
	%101 = call i1 @.windows-7.is_key_down(i32 92)
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%102 = phi i1 [ true, %logical.cmp.done-7 ], [ %101, %logical.cmp.rhs-8 ]
	store i1 %102, i1* %98
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %4
		store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.interval.loop-10

for.interval.loop-10:
	%103 = load i64, i64* %5, align 8
	%104 = icmp slt i64 %103, 257
	br i1 %104, label %for.interval.body-11, label %for.interval.done-12

for.interval.body-11:
	%105 = load i64, i64* %5, align 8
	%106 = load i64, i64* %6, align 8
	%107 = load i64, i64* %5, align 8
	%108 = add i64 %107, 1
	store i64 %108, i64* %5
	%109 = load i64, i64* %6, align 8
	%110 = add i64 %109, 1
	store i64 %110, i64* %6
	store i64 %105, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%111 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%112 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %111, i64 0
	%113 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %112, i64 0, i32 37
	%114 = load i64, i64* %4, align 8
	%115 = trunc i64 %114 to i32
	%116 = getelementptr inbounds [512 x i1], [512 x i1]* %113, i64 0, i32 %115
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$26b, i64 0, i32 0), i64 37}, i64 213, i64 25, i64 %114, i64 512)
	; SelectorExpr
	%117 = load i64, i64* %4, align 8
	; cast - cast
	%118 = trunc i64 %117 to i32
	%119 = call i1 @.windows-7.is_key_down(i32 %118)
	store i1 %119, i1* %116
	br label %for.interval.loop-10

for.interval.done-12:
	br label %if.done-17

if.else-13:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%120 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%121 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %120, i64 0
	%122 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %121, i64 0, i32 30
	%123 = getelementptr inbounds [5 x i1], [5 x i1]* %122, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$26c, i64 0, i32 0), i64 37}, i64 216, i64 22, i64 0, i64 5)
	store i1 false, i1* %123
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%124 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%125 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %124, i64 0
	%126 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %125, i64 0, i32 30
	%127 = getelementptr inbounds [5 x i1], [5 x i1]* %126, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$26d, i64 0, i32 0), i64 37}, i64 217, i64 22, i64 1, i64 5)
	store i1 false, i1* %127
	; AssignStmt
	; SelectorExpr
	%128 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%129 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %128, i64 0
	%130 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %129, i64 0, i32 33
	store i1 false, i1* %130
	; AssignStmt
	; SelectorExpr
	%131 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%132 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %131, i64 0
	%133 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %132, i64 0, i32 34
	store i1 false, i1* %133
	; AssignStmt
	; SelectorExpr
	%134 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%135 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %134, i64 0
	%136 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %135, i64 0, i32 35
	store i1 false, i1* %136
	; AssignStmt
	; SelectorExpr
	%137 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%138 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %137, i64 0
	%139 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %138, i64 0, i32 36
	store i1 false, i1* %139
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %7
		store i64 zeroinitializer, i64* %8
	store i64 0, i64* %8
	store i64 zeroinitializer, i64* %9
	store i64 0, i64* %9
	br label %for.interval.loop-14

for.interval.loop-14:
	%140 = load i64, i64* %8, align 8
	%141 = icmp slt i64 %140, 256
	br i1 %141, label %for.interval.body-15, label %for.interval.done-16

for.interval.body-15:
	%142 = load i64, i64* %8, align 8
	%143 = load i64, i64* %9, align 8
	%144 = load i64, i64* %8, align 8
	%145 = add i64 %144, 1
	store i64 %145, i64* %8
	%146 = load i64, i64* %9, align 8
	%147 = add i64 %146, 1
	store i64 %147, i64* %9
	store i64 %142, i64* %7
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%148 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%149 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %148, i64 0
	%150 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %149, i64 0, i32 37
	%151 = load i64, i64* %7, align 8
	%152 = trunc i64 %151 to i32
	%153 = getelementptr inbounds [512 x i1], [512 x i1]* %150, i64 0, i32 %152
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$26e, i64 0, i32 0), i64 37}, i64 224, i64 25, i64 %151, i64 512)
	store i1 false, i1* %153
	br label %for.interval.loop-14

for.interval.done-16:
	br label %if.done-17

if.done-17:
	; AssignStmt
	; SelectorExpr
	%154 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 1
	store i32 0, i32* %154
	; AssignStmt
	; SelectorExpr
	%155 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%156 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %155, i64 0
	%157 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %156, i64 0, i32 1
	%158 = load double, double* %0, align 8
	; cast - cast
	%159 = fptrunc double %158 to float
	store float %159, float* %157
	call ccc void @igNewFrame()
	ret void
}

define ccc void @.jaze_imgui-17.RenderProc(%imgui-12.DrawData* %data) {
decls-0:
	%0 = alloca %imgui-12.DrawData*, align 8
	%1 = alloca %imgui-12.GuiIO*, align 8
	%2 = alloca %windows-7.Rect, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca [4 x [4 x float]], align 4
	%6 = alloca [4 x [4 x float]], align 4
	%7 = alloca [4 x float], align 4
	%8 = alloca [4 x float], align 4
	%9 = alloca {i32, i1}, align 4
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca {i32, i1}, align 4
	%13 = alloca %__Map_Header, align 8
	%14 = alloca %__Map_Key, align 8
	%15 = alloca {%imgui-12.DrawList**, i64, i64}, align 8
	%16 = alloca {%imgui-12.DrawList**, i64, i64}, align 8
	%17 = alloca i32, align 4
	%18 = alloca %imgui-12.DrawList*, align 8
	%19 = alloca i16*, align 8
	%20 = alloca i32, align 4
	%21 = alloca %imgui-12.DrawCmd*, align 8
	store %imgui-12.DrawData* zeroinitializer, %imgui-12.DrawData** %0
		store %imgui-12.DrawData* %data, %imgui-12.DrawData** %0
	; io
	store %imgui-12.GuiIO* zeroinitializer, %imgui-12.GuiIO** %1
		%22 = call ccc %imgui-12.GuiIO* @igGetIO()
	store %imgui-12.GuiIO* %22, %imgui-12.GuiIO** %1
	; rect
	store %windows-7.Rect zeroinitializer, %windows-7.Rect* %2
		; SelectorExpr
	; SelectorExpr
	%23 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%24 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %23, i64 0
	%25 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %24, i64 0, i32 28
	%26 = load %..rawptr, %..rawptr* %25, align 8
	; cast - cast
	%27 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %2, i64 0
	%28 = call ccc i32 @GetClientRect(%..rawptr %26, %windows-7.Rect* %27)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%29 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%30 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %29, i64 0
	%31 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %30, i64 0, i32 0
	%32 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %31, i64 0, i32 0
	; SelectorExpr
	%33 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %2, i64 0, i32 2
	%34 = load i32, i32* %33, align 4
	; cast - cast
	%35 = sitofp i32 %34 to float
	store float %35, float* %32
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%36 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%37 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %36, i64 0
	%38 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %37, i64 0, i32 0
	%39 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %38, i64 0, i32 1
	; SelectorExpr
	%40 = getelementptr inbounds %windows-7.Rect, %windows-7.Rect* %2, i64 0, i32 3
	%41 = load i32, i32* %40, align 4
	; cast - cast
	%42 = sitofp i32 %41 to float
	store float %42, float* %39
	; width
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	; SelectorExpr
	%43 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%44 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %43, i64 0
	%45 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %44, i64 0, i32 0
	%46 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %45, i64 0, i32 0
	%47 = load float, float* %46, align 4
	; SelectorExpr
	; SelectorExpr
	%48 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%49 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %48, i64 0
	%50 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %49, i64 0, i32 15
	%51 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %50, i64 0, i32 0
	%52 = load float, float* %51, align 4
	%53 = fmul float %47, %52
	; cast - cast
	%54 = fptosi float %53 to i32
	store i32 %54, i32* %3
	; height
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	; SelectorExpr
	%55 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%56 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %55, i64 0
	%57 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %56, i64 0, i32 0
	%58 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %57, i64 0, i32 1
	%59 = load float, float* %58, align 4
	; SelectorExpr
	; SelectorExpr
	%60 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%61 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %60, i64 0
	%62 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %61, i64 0, i32 15
	%63 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %62, i64 0, i32 1
	%64 = load float, float* %63, align 4
	%65 = fmul float %59, %64
	; cast - cast
	%66 = fptosi float %65 to i32
	store i32 %66, i32* %4
	; IfStmt
	%67 = load i32, i32* %4, align 4
	%68 = icmp eq i32 %67, 0
	br i1 %68, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%69 = load i32, i32* %3, align 4
	%70 = icmp eq i32 %69, 0
	br i1 %70, label %if.then-2, label %if.done-3

if.then-2:
	br label %if.done-3

if.done-3:
	; SelectorExpr
	call void @.jaze_gl-14.Enable(i32 3042)
	; SelectorExpr
	call void @.jaze_gl-14.BlendEquation(i32 32774)
	; SelectorExpr
	call void @.jaze_gl-14.BlendFunc(i32 770, i32 771)
	; SelectorExpr
	call void @.jaze_gl-14.Disable(i32 2884)
	; SelectorExpr
	call void @.jaze_gl-14.Disable(i32 2929)
	; SelectorExpr
	call void @.jaze_gl-14.Enable(i32 3089)
	; SelectorExpr
	call void @.jaze_gl-14.ActiveTexture(i32 33984)
	; SelectorExpr
	%71 = load i32, i32* %3, align 4
	%72 = load i32, i32* %4, align 4
	call ccc void @glViewport(i32 0, i32 0, i32 %71, i32 %72)
	; ortho_projection
	store [4 x [4 x float]] zeroinitializer, [4 x [4 x float]]* %5
		; CompoundLit
	store [4 x [4 x float]] zeroinitializer, [4 x [4 x float]]* %6
	store [4 x [4 x float]] [[4 x float] zeroinitializer, [4 x float] zeroinitializer, [4 x float] [float 0x0000000000000000, float 0x0000000000000000, float 0xbff0000000000000, float 0x0000000000000000], [4 x float] [float 0xbff0000000000000, float 0x3ff0000000000000, float 0x0000000000000000, float 0x3ff0000000000000]], [4 x [4 x float]]* %6
	; CompoundLit
	store [4 x float] zeroinitializer, [4 x float]* %7
	store [4 x float] [float zeroinitializer, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000], [4 x float]* %7
	; SelectorExpr
	; SelectorExpr
	%73 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%74 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %73, i64 0
	%75 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %74, i64 0, i32 0
	%76 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %75, i64 0, i32 0
	%77 = load float, float* %76, align 4
	%78 = fdiv float 0x4000000000000000, %77
	%79 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i32 0
	store float %78, float* %79
	%80 = load [4 x float], [4 x float]* %7, align 4
	%81 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %6, i64 0, i32 0
	store [4 x float] %80, [4 x float]* %81
	; CompoundLit
	store [4 x float] zeroinitializer, [4 x float]* %8
	store [4 x float] [float 0x0000000000000000, float zeroinitializer, float 0x0000000000000000, float 0x0000000000000000], [4 x float]* %8
	; SelectorExpr
	; SelectorExpr
	%82 = load %imgui-12.GuiIO*, %imgui-12.GuiIO** %1, align 8
	%83 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %82, i64 0
	%84 = getelementptr inbounds %imgui-12.GuiIO, %imgui-12.GuiIO* %83, i64 0, i32 0
	%85 = getelementptr inbounds %imgui-12.Vec2, %imgui-12.Vec2* %84, i64 0, i32 1
	%86 = load float, float* %85, align 4
	%87 = fsub float 0x0000000000000000, %86
	%88 = fdiv float 0x4000000000000000, %87
	%89 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i32 1
	store float %88, float* %89
	%90 = load [4 x float], [4 x float]* %8, align 4
	%91 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %6, i64 0, i32 1
	store [4 x float] %90, [4 x float]* %91
	%92 = load [4 x [4 x float]], [4 x [4 x float]]* %6, align 4
	store [4 x [4 x float]] %92, [4 x [4 x float]]* %5
	; SelectorExpr
	; SelectorExpr
	%93 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%94 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %93, align 8
	call void @.jaze_gl-14.UseProgram(%jaze_gl-14.Program %94)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%95 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%96 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %95, i64 0, i32 0
	store {i32, i1} zeroinitializer, {i32, i1}* %9
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%97 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%98 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %96 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %98, %raw-6.Dynamic_Map** %97
	%99 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %99
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %100
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %101
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %102
	%103 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 5
	store i64 4, i64* %103
	%104 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%105 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 2829778445906215252, i64* %105
	%106 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$26f, i64 0, i32 0), i64 7}, %..string* %106
	%107 = load %__Map_Key, %__Map_Key* %11, align 8
	%108 = call %..rawptr @.__dynamic_map_get(%__Map_Header %104, %__Map_Key %107)
	%109 = icmp ne %..rawptr %108, null
	%110 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 1
	store i1 %109, i1* %110
	br i1 %109, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%111 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 0
	%112 = bitcast %..rawptr %108 to i32*
	%113 = load i32, i32* %112, align 4
	store i32 %113, i32* %111
	br label %map.get.done-5

map.get.done-5:
	%114 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 0
	%115 = load i32, i32* %114, align 4
	call void @.jaze_gl-14.Uniform-2686136250880(i32 %115, i32 0)
	; SelectorExpr
	%116 = load void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)** @.jaze_gl-14._UniformMatrix4fv, align 8
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%117 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 0
	%118 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %117, i64 0, i32 0
	store {i32, i1} zeroinitializer, {i32, i1}* %12
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	%119 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 0
	%120 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %118 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %120, %raw-6.Dynamic_Map** %119
	%121 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 1
	store i1 true, i1* %121
	%122 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 2
	store i64 40, i64* %122
	%123 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 3
	store i64 8, i64* %123
	%124 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 4
	store i64 32, i64* %124
	%125 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 5
	store i64 4, i64* %125
	%126 = load %__Map_Header, %__Map_Header* %13, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %14
	%127 = getelementptr inbounds %__Map_Key, %__Map_Key* %14, i64 0, i32 0
	store i64 -9017138883755609675, i64* %127
	%128 = getelementptr inbounds %__Map_Key, %__Map_Key* %14, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$270, i64 0, i32 0), i64 7}, %..string* %128
	%129 = load %__Map_Key, %__Map_Key* %14, align 8
	%130 = call %..rawptr @.__dynamic_map_get(%__Map_Header %126, %__Map_Key %129)
	%131 = icmp ne %..rawptr %130, null
	%132 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 1
	store i1 %131, i1* %132
	br i1 %131, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%133 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 0
	%134 = bitcast %..rawptr %130 to i32*
	%135 = load i32, i32* %134, align 4
	store i32 %135, i32* %133
	br label %map.get.done-7

map.get.done-7:
	%136 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 0
	%137 = load i32, i32* %136, align 4
	; IndexExpr
	; IndexExpr
	%138 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %5, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$271, i64 0, i32 0), i64 37}, i64 267, i64 89, i64 0, i64 4)
	%139 = getelementptr inbounds [4 x float], [4 x float]* %138, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$272, i64 0, i32 0), i64 37}, i64 267, i64 92, i64 0, i64 4)
	%140 = getelementptr inbounds float, float* %139, i64 0
	call ccc void %116(i32 %137, i32 1, i32 0, float* %140)
	; SelectorExpr
	; SelectorExpr
	%141 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 4
	%142 = load i32, i32* %141, align 4
	call void @.jaze_gl-14.BindVertexArray(i32 %142)
	; newList
	store {%imgui-12.DrawList**, i64, i64} zeroinitializer, {%imgui-12.DrawList**, i64, i64}* %15
		; slice_ptr
	; SelectorExpr
	%143 = load %imgui-12.DrawData*, %imgui-12.DrawData** %0, align 8
	%144 = getelementptr inbounds %imgui-12.DrawData, %imgui-12.DrawData* %143, i64 0
	%145 = getelementptr inbounds %imgui-12.DrawData, %imgui-12.DrawData* %144, i64 0, i32 1
	%146 = load %imgui-12.DrawList**, %imgui-12.DrawList*** %145, align 8
	; SelectorExpr
	%147 = load %imgui-12.DrawData*, %imgui-12.DrawData** %0, align 8
	%148 = getelementptr inbounds %imgui-12.DrawData, %imgui-12.DrawData* %147, i64 0
	%149 = getelementptr inbounds %imgui-12.DrawData, %imgui-12.DrawData* %148, i64 0, i32 2
	%150 = load i32, i32* %149, align 4
	%151 = sext i32 %150 to i64
	store {%imgui-12.DrawList**, i64, i64} zeroinitializer, {%imgui-12.DrawList**, i64, i64}* %16
	%152 = getelementptr inbounds {%imgui-12.DrawList**, i64, i64}, {%imgui-12.DrawList**, i64, i64}* %16, i64 0, i32 0
	store %imgui-12.DrawList** %146, %imgui-12.DrawList*** %152
	%153 = getelementptr inbounds {%imgui-12.DrawList**, i64, i64}, {%imgui-12.DrawList**, i64, i64}* %16, i64 0, i32 1
	store i64 %151, i64* %153
	%154 = getelementptr inbounds {%imgui-12.DrawList**, i64, i64}, {%imgui-12.DrawList**, i64, i64}* %16, i64 0, i32 2
	store i64 %151, i64* %154
	%155 = load {%imgui-12.DrawList**, i64, i64}, {%imgui-12.DrawList**, i64, i64}* %16, align 8
	store {%imgui-12.DrawList**, i64, i64} %155, {%imgui-12.DrawList**, i64, i64}* %15
	; ForStmt
	; n
	store i32 zeroinitializer, i32* %17
		store i32 0, i32* %17
	br label %for.loop-8

for.loop-8:
	%156 = load i32, i32* %17, align 4
	; SelectorExpr
	%157 = load %imgui-12.DrawData*, %imgui-12.DrawData** %0, align 8
	%158 = getelementptr inbounds %imgui-12.DrawData, %imgui-12.DrawData* %157, i64 0
	%159 = getelementptr inbounds %imgui-12.DrawData, %imgui-12.DrawData* %158, i64 0, i32 2
	%160 = load i32, i32* %159, align 4
	%161 = icmp slt i32 %156, %160
	br i1 %161, label %for.body-9, label %for.done-13

for.body-9:
	; list
	store %imgui-12.DrawList* zeroinitializer, %imgui-12.DrawList** %18
		; IndexExpr
	%162 = load {%imgui-12.DrawList**, i64, i64}, {%imgui-12.DrawList**, i64, i64}* %15, align 8
	%163 = extractvalue {%imgui-12.DrawList**, i64, i64} %162, 0
	%164 = extractvalue {%imgui-12.DrawList**, i64, i64} %162, 1
	%165 = load i32, i32* %17, align 4
	%166 = sext i32 %165 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$273, i64 0, i32 0), i64 37}, i64 272, i64 25, i64 %166, i64 %164)
	%167 = getelementptr inbounds %imgui-12.DrawList*, %imgui-12.DrawList** %163, i64 %166
	%168 = load %imgui-12.DrawList*, %imgui-12.DrawList** %167, align 8
	store %imgui-12.DrawList* %168, %imgui-12.DrawList** %18
	; idxBufferOffset
	store i16* zeroinitializer, i16** %19
		store i16* zeroinitializer, i16** %19
	; SelectorExpr
	; SelectorExpr
	%169 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 2
	%170 = load i32, i32* %169, align 4
	call void @.jaze_gl-14.BindBuffer-2686136247936(i32 %170)
	; SelectorExpr
	%171 = load %imgui-12.DrawList*, %imgui-12.DrawList** %18, align 8
	%172 = call ccc i32 @ImDrawList_GetVertexBufferSize(%imgui-12.DrawList* %171)
	%173 = mul i32 %172, 20
	; cast - cast
	%174 = load %imgui-12.DrawList*, %imgui-12.DrawList** %18, align 8
	%175 = call ccc %imgui-12.DrawVert* @ImDrawList_GetVertexPtr(%imgui-12.DrawList* %174, i32 0)
	%176 = bitcast %imgui-12.DrawVert* %175 to %..rawptr
	call void @.jaze_gl-14.BufferData(i32 34962, i32 %173, %..rawptr %176, i32 35040)
	; SelectorExpr
	; SelectorExpr
	%177 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.jaze_imgui-17.State, i64 0, i32 3
	%178 = load i32, i32* %177, align 4
	call void @.jaze_gl-14.BindBuffer-2686136248304(i32 %178)
	; SelectorExpr
	%179 = load %imgui-12.DrawList*, %imgui-12.DrawList** %18, align 8
	%180 = call ccc i32 @ImDrawList_GetIndexBufferSize(%imgui-12.DrawList* %179)
	%181 = mul i32 %180, 2
	; cast - cast
	%182 = load %imgui-12.DrawList*, %imgui-12.DrawList** %18, align 8
	%183 = call ccc i16* @ImDrawList_GetIndexPtr(%imgui-12.DrawList* %182, i32 0)
	%184 = bitcast i16* %183 to %..rawptr
	call void @.jaze_gl-14.BufferData(i32 34963, i32 %181, %..rawptr %184, i32 35040)
	; ForStmt
	; j
	store i32 zeroinitializer, i32* %20
		store i32 0, i32* %20
	br label %for.loop-10

for.loop-10:
	%185 = load i32, i32* %20, align 4
	%186 = load %imgui-12.DrawList*, %imgui-12.DrawList** %18, align 8
	%187 = call ccc i32 @ImDrawList_GetCmdSize(%imgui-12.DrawList* %186)
	%188 = icmp slt i32 %185, %187
	br i1 %188, label %for.body-11, label %for.done-12

for.body-11:
	; cmd
	store %imgui-12.DrawCmd* zeroinitializer, %imgui-12.DrawCmd** %21
		%189 = load %imgui-12.DrawList*, %imgui-12.DrawList** %18, align 8
	%190 = load i32, i32* %20, align 4
	%191 = call ccc %imgui-12.DrawCmd* @ImDrawList_GetCmdPtr(%imgui-12.DrawList* %189, i32 %190)
	store %imgui-12.DrawCmd* %191, %imgui-12.DrawCmd** %21
	; SelectorExpr
	; SelectorExpr
	%192 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%193 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %192, i64 0
	%194 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %193, i64 0, i32 2
	%195 = load %..rawptr, %..rawptr* %194, align 8
	; cast - cast
	%196 = bitcast %..rawptr %195 to i32*
	%197 = getelementptr inbounds i32, i32* %196, i64 0
	%198 = load i32, i32* %197, align 4
	; cast - cast
	call void @.jaze_gl-14.BindTexture(i32 3553, i32 %198)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%199 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%200 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %199, i64 0
	%201 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %200, i64 0, i32 1
	%202 = getelementptr inbounds %imgui-12.Vec4, %imgui-12.Vec4* %201, i64 0, i32 0
	%203 = load float, float* %202, align 4
	; cast - cast
	%204 = fptosi float %203 to i32
	%205 = load i32, i32* %4, align 4
	; SelectorExpr
	; SelectorExpr
	%206 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%207 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %206, i64 0
	%208 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %207, i64 0, i32 1
	%209 = getelementptr inbounds %imgui-12.Vec4, %imgui-12.Vec4* %208, i64 0, i32 3
	%210 = load float, float* %209, align 4
	; cast - cast
	%211 = fptosi float %210 to i32
	%212 = sub i32 %205, %211
	; SelectorExpr
	; SelectorExpr
	%213 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%214 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %213, i64 0
	%215 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %214, i64 0, i32 1
	%216 = getelementptr inbounds %imgui-12.Vec4, %imgui-12.Vec4* %215, i64 0, i32 2
	%217 = load float, float* %216, align 4
	; SelectorExpr
	; SelectorExpr
	%218 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%219 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %218, i64 0
	%220 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %219, i64 0, i32 1
	%221 = getelementptr inbounds %imgui-12.Vec4, %imgui-12.Vec4* %220, i64 0, i32 0
	%222 = load float, float* %221, align 4
	%223 = fsub float %217, %222
	; cast - cast
	%224 = fptosi float %223 to i32
	; SelectorExpr
	; SelectorExpr
	%225 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%226 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %225, i64 0
	%227 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %226, i64 0, i32 1
	%228 = getelementptr inbounds %imgui-12.Vec4, %imgui-12.Vec4* %227, i64 0, i32 3
	%229 = load float, float* %228, align 4
	; SelectorExpr
	; SelectorExpr
	%230 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%231 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %230, i64 0
	%232 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %231, i64 0, i32 1
	%233 = getelementptr inbounds %imgui-12.Vec4, %imgui-12.Vec4* %232, i64 0, i32 1
	%234 = load float, float* %233, align 4
	%235 = fsub float %229, %234
	; cast - cast
	%236 = fptosi float %235 to i32
	call ccc void @glScissor(i32 %204, i32 %212, i32 %224, i32 %236)
	; SelectorExpr
	; SelectorExpr
	%237 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%238 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %237, i64 0
	%239 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %238, i64 0, i32 0
	%240 = load i32, i32* %239, align 4
	; cast - cast
	%241 = bitcast i32 %240 to i32
	%242 = load i16*, i16** %19, align 8
	%243 = bitcast i16* %242 to %..rawptr
	call void @.jaze_gl-14.DrawElements(i32 4, i32 %241, i32 5123, %..rawptr %243)
	; AssignStmt
	; SelectorExpr
	%244 = load %imgui-12.DrawCmd*, %imgui-12.DrawCmd** %21, align 8
	%245 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %244, i64 0
	%246 = getelementptr inbounds %imgui-12.DrawCmd, %imgui-12.DrawCmd* %245, i64 0, i32 0
	%247 = load i32, i32* %246, align 4
	%248 = load i16*, i16** %19, align 8
	%249 = zext i32 %247 to i64
	%250 = getelementptr inbounds i16, i16* %248, i64 %249
	store i16* %250, i16** %19
	; AssignStmt
	%251 = load i32, i32* %20, align 4
	%252 = add i32 %251, 1
	store i32 %252, i32* %20
	br label %for.loop-10

for.done-12:
	; AssignStmt
	%253 = load i32, i32* %17, align 4
	%254 = add i32 %253, 1
	store i32 %254, i32* %17
	br label %for.loop-8

for.done-13:
	; SelectorExpr
	%255 = load i32, i32* %3, align 4
	%256 = load i32, i32* %4, align 4
	call ccc void @glScissor(i32 0, i32 0, i32 %255, i32 %256)
	ret void
}

define void @.jaze_xinput-18.Enable(i1 %enable) {
decls-0:
	%0 = alloca i1, align 1
	store i1 zeroinitializer, i1* %0
		store i1 %enable, i1* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_xinput-18._Enable, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_xinput-18._Enable, align 8
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define {%jaze_xinput-18.Capabilities, i32} @.jaze_xinput-18.GetCapabilities-2686136290224(i32 %user) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca {%jaze_xinput-18.Capabilities, i32}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %user, i32* %0
	; ReturnStmt
	%2 = load i32, i32* %0, align 8
	%3 = call {%jaze_xinput-18.Capabilities, i32} @.jaze_xinput-18.GetCapabilities-2686136290592(i32 %2, i1 false)
	%4 = extractvalue {%jaze_xinput-18.Capabilities, i32} %3, 0
	%5 = extractvalue {%jaze_xinput-18.Capabilities, i32} %3, 1
	store {%jaze_xinput-18.Capabilities, i32} zeroinitializer, {%jaze_xinput-18.Capabilities, i32}* %1
	%6 = getelementptr inbounds {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %1, i64 0, i32 0
	store %jaze_xinput-18.Capabilities %4, %jaze_xinput-18.Capabilities* %6
	%7 = getelementptr inbounds {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %1, i64 0, i32 1
	store i32 %5, i32* %7
	%8 = load {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %1, align 4
	ret {%jaze_xinput-18.Capabilities, i32} %8
}

define {%jaze_xinput-18.Capabilities, i32} @.jaze_xinput-18.GetCapabilities-2686136290592(i32 %user, i1 %onlyGamepads) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i1, align 1
	%2 = alloca %jaze_xinput-18.Capabilities, align 1
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {%jaze_xinput-18.Capabilities, i32}, align 4
	%6 = alloca {%jaze_xinput-18.Capabilities, i32}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %user, i32* %0
	store i1 zeroinitializer, i1* %1
		store i1 %onlyGamepads, i1* %1
	; IfStmt
	%7 = load i32 (i32, i32, %jaze_xinput-18.Capabilities*)*, i32 (i32, i32, %jaze_xinput-18.Capabilities*)** @.jaze_xinput-18._GetCapabilities, align 8
	%8 = icmp ne i32 (i32, i32, %jaze_xinput-18.Capabilities*)* %7, zeroinitializer
	br i1 %8, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store %jaze_xinput-18.Capabilities zeroinitializer, %jaze_xinput-18.Capabilities* %2
		store %jaze_xinput-18.Capabilities zeroinitializer, %jaze_xinput-18.Capabilities* %2
	; _u
	store i32 zeroinitializer, i32* %3
		%9 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %9, i32* %3
	; err
	store i32 zeroinitializer, i32* %4
		%10 = load i32 (i32, i32, %jaze_xinput-18.Capabilities*)*, i32 (i32, i32, %jaze_xinput-18.Capabilities*)** @.jaze_xinput-18._GetCapabilities, align 8
	%11 = load i32, i32* %0, align 8
	; cast - cast
	%12 = load i1, i1* %1, align 1
	; cast - cast
	%13 = zext i1 %12 to i32
	%14 = getelementptr inbounds %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %2, i64 0
	%15 = call ccc i32 %10(i32 %11, i32 %13, %jaze_xinput-18.Capabilities* %14)
	store i32 %15, i32* %4
	; ReturnStmt
	%16 = load %jaze_xinput-18.Capabilities, %jaze_xinput-18.Capabilities* %2, align 1
	%17 = load i32, i32* %4, align 4
	; cast - cast
	store {%jaze_xinput-18.Capabilities, i32} zeroinitializer, {%jaze_xinput-18.Capabilities, i32}* %5
	%18 = getelementptr inbounds {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %5, i64 0, i32 0
	store %jaze_xinput-18.Capabilities %16, %jaze_xinput-18.Capabilities* %18
	%19 = getelementptr inbounds {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %5, i64 0, i32 1
	store i32 %17, i32* %19
	%20 = load {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %5, align 4
	ret {%jaze_xinput-18.Capabilities, i32} %20

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	store {%jaze_xinput-18.Capabilities, i32} zeroinitializer, {%jaze_xinput-18.Capabilities, i32}* %6
	%21 = getelementptr inbounds {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %6, i64 0, i32 0
	store %jaze_xinput-18.Capabilities zeroinitializer, %jaze_xinput-18.Capabilities* %21
	%22 = getelementptr inbounds {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %6, i64 0, i32 1
	store i32 1167, i32* %22
	%23 = load {%jaze_xinput-18.Capabilities, i32}, {%jaze_xinput-18.Capabilities, i32}* %6, align 4
	ret {%jaze_xinput-18.Capabilities, i32} %23
}

define {%jaze_xinput-18.State, i32} @.jaze_xinput-18.GetState(i32 %user) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_xinput-18.State, align 4
	%2 = alloca i32, align 4
	%3 = alloca {%jaze_xinput-18.State, i32}, align 4
	%4 = alloca {%jaze_xinput-18.State, i32}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %user, i32* %0
	; IfStmt
	%5 = load i32 (i32, %jaze_xinput-18.State*)*, i32 (i32, %jaze_xinput-18.State*)** @.jaze_xinput-18._GetState, align 8
	%6 = icmp ne i32 (i32, %jaze_xinput-18.State*)* %5, zeroinitializer
	br i1 %6, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store %jaze_xinput-18.State zeroinitializer, %jaze_xinput-18.State* %1
		store %jaze_xinput-18.State zeroinitializer, %jaze_xinput-18.State* %1
	; err
	store i32 zeroinitializer, i32* %2
		%7 = load i32 (i32, %jaze_xinput-18.State*)*, i32 (i32, %jaze_xinput-18.State*)** @.jaze_xinput-18._GetState, align 8
	%8 = load i32, i32* %0, align 8
	; cast - cast
	%9 = getelementptr inbounds %jaze_xinput-18.State, %jaze_xinput-18.State* %1, i64 0
	%10 = call ccc i32 %7(i32 %8, %jaze_xinput-18.State* %9)
	store i32 %10, i32* %2
	; ReturnStmt
	%11 = load %jaze_xinput-18.State, %jaze_xinput-18.State* %1, align 4
	%12 = load i32, i32* %2, align 4
	; cast - cast
	store {%jaze_xinput-18.State, i32} zeroinitializer, {%jaze_xinput-18.State, i32}* %3
	%13 = getelementptr inbounds {%jaze_xinput-18.State, i32}, {%jaze_xinput-18.State, i32}* %3, i64 0, i32 0
	store %jaze_xinput-18.State %11, %jaze_xinput-18.State* %13
	%14 = getelementptr inbounds {%jaze_xinput-18.State, i32}, {%jaze_xinput-18.State, i32}* %3, i64 0, i32 1
	store i32 %12, i32* %14
	%15 = load {%jaze_xinput-18.State, i32}, {%jaze_xinput-18.State, i32}* %3, align 4
	ret {%jaze_xinput-18.State, i32} %15

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	store {%jaze_xinput-18.State, i32} zeroinitializer, {%jaze_xinput-18.State, i32}* %4
	%16 = getelementptr inbounds {%jaze_xinput-18.State, i32}, {%jaze_xinput-18.State, i32}* %4, i64 0, i32 0
	store %jaze_xinput-18.State zeroinitializer, %jaze_xinput-18.State* %16
	%17 = getelementptr inbounds {%jaze_xinput-18.State, i32}, {%jaze_xinput-18.State, i32}* %4, i64 0, i32 1
	store i32 1167, i32* %17
	%18 = load {%jaze_xinput-18.State, i32}, {%jaze_xinput-18.State, i32}* %4, align 4
	ret {%jaze_xinput-18.State, i32} %18
}

define i1 @.jaze_xinput-18.Init() {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca %..rawptr, align 8
	; lib1_4
	store %..string zeroinitializer, %..string* %0
		store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$274, i64 0, i32 0), i64 14}, %..string* %0
	; lib1_3
	store %..string zeroinitializer, %..string* %1
		store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$275, i64 0, i32 0), i64 14}, %..string* %1
	; lib9_1_0
	store %..string zeroinitializer, %..string* %2
		store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$276, i64 0, i32 0), i64 16}, %..string* %2
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %3
		; SelectorExpr
	; IndexExpr
	%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 0
	%7 = extractvalue %..string %5, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$277, i64 0, i32 0), i64 38}, i64 245, i64 39, i64 0, i64 %7)
	%8 = getelementptr inbounds i8, i8* %6, i64 0
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	%10 = call ccc %..rawptr @LoadLibraryA(i8* %9)
	store %..rawptr %10, %..rawptr* %3
	; AssignStmt
	store i64 1, i64* @.jaze_xinput-18.Version
	; IfStmt
	%11 = load %..rawptr, %..rawptr* %3, align 8
	%12 = icmp eq %..rawptr %11, zeroinitializer
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	; IndexExpr
	%13 = load %..string, %..string* %1, align 8
	%14 = extractvalue %..string %13, 0
	%15 = extractvalue %..string %13, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$278, i64 0, i32 0), i64 38}, i64 249, i64 42, i64 0, i64 %15)
	%16 = getelementptr inbounds i8, i8* %14, i64 0
	%17 = getelementptr inbounds i8, i8* %16, i64 0
	%18 = call ccc %..rawptr @LoadLibraryA(i8* %17)
	store %..rawptr %18, %..rawptr* %3
	; AssignStmt
	store i64 2, i64* @.jaze_xinput-18.Version
	br label %if.done-2

if.done-2:
	; IfStmt
	%19 = load %..rawptr, %..rawptr* %3, align 8
	%20 = icmp eq %..rawptr %19, zeroinitializer
	br i1 %20, label %if.then-3, label %if.done-4

if.then-3:
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	; IndexExpr
	%21 = load %..string, %..string* %2, align 8
	%22 = extractvalue %..string %21, 0
	%23 = extractvalue %..string %21, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$279, i64 0, i32 0), i64 38}, i64 254, i64 45, i64 0, i64 %23)
	%24 = getelementptr inbounds i8, i8* %22, i64 0
	%25 = getelementptr inbounds i8, i8* %24, i64 0
	%26 = call ccc %..rawptr @LoadLibraryA(i8* %25)
	store %..rawptr %26, %..rawptr* %4
	; AssignStmt
	store i64 3, i64* @.jaze_xinput-18.Version
	br label %if.done-4

if.done-4:
	; IfStmt
	%27 = load %..rawptr, %..rawptr* %3, align 8
	%28 = icmp eq %..rawptr %27, zeroinitializer
	br i1 %28, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	store i64 4, i64* @.jaze_xinput-18.Version
	; ReturnStmt
	ret i1 false

if.done-6:
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 1
	%30 = load %..rawptr, %..rawptr* %3, align 8
	; cast - cast
	%31 = ptrtoint %..rawptr %30 to i64
	store i64 %31, i64* %29
	%32 = load %..rawptr, %..rawptr* %3, align 8
	%33 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_xinput-18._Enable, i64 0
	%34 = bitcast void (i32)** %33 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %32, %..rawptr %34, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$27a, i64 0, i32 0), i64 12})
	%35 = load %..rawptr, %..rawptr* %3, align 8
	%36 = getelementptr inbounds i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)*, i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)** @.jaze_xinput-18._GetBatteryInformation, i64 0
	%37 = bitcast i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)** %36 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %35, %..rawptr %37, %..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$27b, i64 0, i32 0), i64 27})
	%38 = load %..rawptr, %..rawptr* %3, align 8
	%39 = getelementptr inbounds i32 (i32, i32, %jaze_xinput-18.Capabilities*)*, i32 (i32, i32, %jaze_xinput-18.Capabilities*)** @.jaze_xinput-18._GetCapabilities, i64 0
	%40 = bitcast i32 (i32, i32, %jaze_xinput-18.Capabilities*)** %39 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %38, %..rawptr %40, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$27c, i64 0, i32 0), i64 21})
	%41 = load %..rawptr, %..rawptr* %3, align 8
	%42 = getelementptr inbounds i32 (i32, i32, %jaze_xinput-18.KeyStroke*)*, i32 (i32, i32, %jaze_xinput-18.KeyStroke*)** @.jaze_xinput-18._GetKeystroke, i64 0
	%43 = bitcast i32 (i32, i32, %jaze_xinput-18.KeyStroke*)** %42 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %41, %..rawptr %43, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$27d, i64 0, i32 0), i64 18})
	%44 = load %..rawptr, %..rawptr* %3, align 8
	%45 = getelementptr inbounds i32 (i32, %jaze_xinput-18.State*)*, i32 (i32, %jaze_xinput-18.State*)** @.jaze_xinput-18._GetState, i64 0
	%46 = bitcast i32 (i32, %jaze_xinput-18.State*)** %45 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %44, %..rawptr %46, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$27e, i64 0, i32 0), i64 14})
	%47 = load %..rawptr, %..rawptr* %3, align 8
	%48 = getelementptr inbounds i32 (i32, %jaze_xinput-18.VibrationState)*, i32 (i32, %jaze_xinput-18.VibrationState)** @.jaze_xinput-18._SetState, i64 0
	%49 = bitcast i32 (i32, %jaze_xinput-18.VibrationState)** %48 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %47, %..rawptr %49, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$27f, i64 0, i32 0), i64 14})
	; ReturnStmt
	ret i1 true
}

define void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %h, %..rawptr %p, %..string %name) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i8*, align 8
	%4 = alloca void ()*, align 8
	%5 = alloca %jaze_xinput-18.DebugFunctionLoadStatus, align 8
	%6 = alloca {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, align 8
	%7 = alloca [1 x %jaze_xinput-18.DebugFunctionLoadStatus], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %h, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; txt
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%8 = load %..string, %..string* %2, align 8
	%9 = call i8* @.strings-9.new_c_string(%..string %8)
	store i8* %9, i8** %3
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %4
		; SelectorExpr
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i8*, i8** %3, align 8
	%12 = call ccc void ()* @GetProcAddress(%..rawptr %10, i8* %11)
	store void ()* %12, void ()** %4
	; AssignStmt
	%13 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%14 = bitcast %..rawptr %13 to void ()**
	%15 = getelementptr inbounds void ()*, void ()** %14, i64 0
	%16 = load void ()*, void ()** %4, align 8
	store void ()* %16, void ()** %15
	; status
	store %jaze_xinput-18.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-18.DebugFunctionLoadStatus* %5
		store %jaze_xinput-18.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-18.DebugFunctionLoadStatus* %5
	; AssignStmt
	; SelectorExpr
	%17 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 0
	%18 = load %..string, %..string* %2, align 8
	store %..string %18, %..string* %17
	; AssignStmt
	; SelectorExpr
	%19 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 1
	%20 = load void ()*, void ()** %4, align 8
	; cast - cast
	%21 = bitcast void ()* %20 to %..rawptr
	; cast - cast
	%22 = ptrtoint %..rawptr %21 to i64
	store i64 %22, i64* %19
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 3
	store i1 false, i1* %23
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 2
	%25 = load i32, i32* %24, align 4
	%26 = add i32 %25, 1
	store i32 %26, i32* %24
	; IfStmt
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	%29 = icmp ne i64 %28, 0
	br i1 %29, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%30 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 3
	store i1 true, i1* %30
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 3
	%32 = load i32, i32* %31, align 4
	%33 = add i32 %32, 1
	store i32 %33, i32* %31
	br label %if.done-2

if.done-2:
	; append
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 0
	%35 = bitcast {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %34 to %..rawptr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.jaze_xinput-18.DebugInfo, i64 0, i32 0
	%37 = load {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %36, align 8
	%38 = load %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, align 8
	; variadic call argument generation
	store {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64} zeroinitializer, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6
	store [1 x %jaze_xinput-18.DebugFunctionLoadStatus] zeroinitializer, [1 x %jaze_xinput-18.DebugFunctionLoadStatus]* %7
	%39 = getelementptr inbounds [1 x %jaze_xinput-18.DebugFunctionLoadStatus], [1 x %jaze_xinput-18.DebugFunctionLoadStatus]* %7, i64 0, i32 0
	store %jaze_xinput-18.DebugFunctionLoadStatus %38, %jaze_xinput-18.DebugFunctionLoadStatus* %39
	%40 = getelementptr inbounds [1 x %jaze_xinput-18.DebugFunctionLoadStatus], [1 x %jaze_xinput-18.DebugFunctionLoadStatus]* %7, i64 0, i32 0
	%41 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 0
	store %jaze_xinput-18.DebugFunctionLoadStatus* %40, %jaze_xinput-18.DebugFunctionLoadStatus** %41
	%42 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %42
	%43 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %43
	%44 = load {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, align 8
	%45 = extractvalue {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64} %44, 0
	%46 = extractvalue {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64} %44, 1
	%47 = bitcast %jaze_xinput-18.DebugFunctionLoadStatus* %45 to %..rawptr
	%48 = call i64 @.__dynamic_array_append(%..rawptr %35, i64 40, i64 8, %..rawptr %47, i64 %46)
	; defer
	; free
	%49 = load i8*, i8** %3, align 8
	%50 = bitcast i8* %49 to %..rawptr
	call void @.free_ptr(%..rawptr %50)
	ret void
}

define void @.jaze_render-19.Draw({[0 x <8 x i8>], [2 x float]} %window) {
decls-0:
	%0 = alloca {[0 x <8 x i8>], [2 x float]}, align 8
	%1 = alloca [4 x {[0 x <16 x i8>], [4 x float]}], align 16
	%2 = alloca [4 x {[0 x <16 x i8>], [4 x float]}], align 16
	%3 = alloca [4 x {[0 x <16 x i8>], [4 x float]}], align 16
	store {[0 x <8 x i8>], [2 x float]} zeroinitializer, {[0 x <8 x i8>], [2 x float]}* %0
		store {[0 x <8 x i8>], [2 x float]} %window, {[0 x <8 x i8>], [2 x float]}* %0
	; SelectorExpr
	%4 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	call void @.jaze_gl-14.UseProgram(%jaze_gl-14.Program %4)
	; SelectorExpr
	%5 = load i32, i32* @.jaze_render-19.vao, align 4
	call void @.jaze_gl-14.BindVertexArray(i32 %5)
	; model
	store [4 x {[0 x <16 x i8>], [4 x float]}] zeroinitializer, [4 x {[0 x <16 x i8>], [4 x float]}]* %1
		; SelectorExpr
	%6 = call float @.jaze_render-19.Draw.d2a-0(float 0xc04b800000000000)
	%7 = call [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_rotate({[0 x <8 x i8>], [3 x float]} {[0 x <8 x i8>] zeroinitializer, [3 x float][float 0x3ff0000000000000, float 0x0000000000000000, float 0x0000000000000000]}, float %6)
	store [4 x {[0 x <16 x i8>], [4 x float]}] %7, [4 x {[0 x <16 x i8>], [4 x float]}]* %1
	; view
	store [4 x {[0 x <16 x i8>], [4 x float]}] zeroinitializer, [4 x {[0 x <16 x i8>], [4 x float]}]* %2
		; SelectorExpr
	%8 = call [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.mat4_translate({[0 x <8 x i8>], [3 x float]} {[0 x <8 x i8>] zeroinitializer, [3 x float][float 0x0000000000000000, float 0x0000000000000000, float 0xc008000000000000]})
	store [4 x {[0 x <16 x i8>], [4 x float]}] %8, [4 x {[0 x <16 x i8>], [4 x float]}]* %2
	; proj
	store [4 x {[0 x <16 x i8>], [4 x float]}] zeroinitializer, [4 x {[0 x <16 x i8>], [4 x float]}]* %3
		; SelectorExpr
	%9 = call float @.jaze_render-19.Draw.d2a-0(float 0x4056800000000000)
	; SelectorExpr
	%10 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %0, i64 0, i32 1, i32 0
	%11 = load float, float* %10, align 4
	; SelectorExpr
	%12 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %0, i64 0, i32 1, i32 1
	%13 = load float, float* %12, align 4
	%14 = fdiv float %11, %13
	%15 = call [4 x {[0 x <16 x i8>], [4 x float]}] @.math-10.perspective(float %9, float %14, float 0x3fb9999980000000, float 0x4059000000000000)
	store [4 x {[0 x <16 x i8>], [4 x float]}] %15, [4 x {[0 x <16 x i8>], [4 x float]}]* %3
	; SelectorExpr
	%16 = load i32, i32* @.jaze_render-19.texture, align 4
	call void @.jaze_gl-14.BindTexture(i32 3553, i32 %16)
	; SelectorExpr
	call void @.jaze_gl-14.DrawElements(i32 4, i32 6, i32 5125, %..rawptr zeroinitializer)
	; SelectorExpr
	call void @.jaze_gl-14.PolygonMode(i32 1032, i32 6913)
	; SelectorExpr
	call void @.jaze_gl-14.DrawElements(i32 4, i32 6, i32 5125, %..rawptr zeroinitializer)
	; SelectorExpr
	call void @.jaze_gl-14.PolygonMode(i32 1032, i32 6914)
	ret void
}

define float @.jaze_render-19.Draw.d2a-0(float %d) {
decls-0:
	%0 = alloca float, align 4
	store float zeroinitializer, float* %0
		store float %d, float* %0
	; ReturnStmt
	%1 = load float, float* %0, align 4
	%2 = fmul float %1, 0x3f91df46a0000000
	ret float %2
}

define void @.jaze_render-19.Init(%jaze_catalog-21.Catalog* %shaderCat, %jaze_catalog-21.Catalog* %textureCat) {
decls-0:
	%0 = alloca %jaze_catalog-21.Catalog*, align 8
	%1 = alloca %jaze_catalog-21.Catalog*, align 8
	%2 = alloca %jaze_asset-22.Asset*, align 8
	%3 = alloca i64, align 8
	%4 = alloca %jaze_asset-22.Asset*, align 8
	%5 = alloca i64, align 8
	%6 = alloca %jaze_asset-22.Asset*, align 8
	%7 = alloca i64, align 8
	%8 = alloca %jaze_asset-22.Asset.Shader*, align 8
	%9 = alloca {%jaze_asset-22.Asset.Shader*, i1}, align 8
	%10 = alloca %jaze_asset-22.Asset.Shader*, align 8
	%11 = alloca {%jaze_asset-22.Asset.Shader*, i1}, align 8
	%12 = alloca %jaze_asset-22.Asset.Texture*, align 8
	%13 = alloca {%jaze_asset-22.Asset.Texture*, i1}, align 8
	%14 = alloca i32, align 4
	%15 = alloca i32, align 4
	%16 = alloca [20 x float], align 4
	%17 = alloca [6 x i32], align 4
	%18 = alloca %__Map_Header, align 8
	%19 = alloca %__Map_Key, align 8
	%20 = alloca i32, align 4
	%21 = alloca %__Map_Header, align 8
	%22 = alloca %__Map_Key, align 8
	%23 = alloca i32, align 4
	%24 = alloca %__Map_Header, align 8
	%25 = alloca %__Map_Key, align 8
	%26 = alloca i32, align 4
	%27 = alloca {i32, i1}, align 4
	%28 = alloca %__Map_Header, align 8
	%29 = alloca %__Map_Key, align 8
	%30 = alloca {i32, i1}, align 4
	%31 = alloca %__Map_Header, align 8
	%32 = alloca %__Map_Key, align 8
	%33 = alloca {i32, i1}, align 4
	%34 = alloca %__Map_Header, align 8
	%35 = alloca %__Map_Key, align 8
	%36 = alloca {i32, i1}, align 4
	%37 = alloca %__Map_Header, align 8
	%38 = alloca %__Map_Key, align 8
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %0
		store %jaze_catalog-21.Catalog* %shaderCat, %jaze_catalog-21.Catalog** %0
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %1
		store %jaze_catalog-21.Catalog* %textureCat, %jaze_catalog-21.Catalog** %1
	; vertexAsset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %2
		; ok1
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%39 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%40 = call {%jaze_asset-22.Asset*, i64} @.jaze_catalog-21.Find(%jaze_catalog-21.Catalog* %39, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$280, i64 0, i32 0), i64 9})
	%41 = extractvalue {%jaze_asset-22.Asset*, i64} %40, 0
	%42 = extractvalue {%jaze_asset-22.Asset*, i64} %40, 1
	store %jaze_asset-22.Asset* %41, %jaze_asset-22.Asset** %2
	store i64 %42, i64* %3
	; fragAsset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %4
		; ok2
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%43 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%44 = call {%jaze_asset-22.Asset*, i64} @.jaze_catalog-21.Find(%jaze_catalog-21.Catalog* %43, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$281, i64 0, i32 0), i64 9})
	%45 = extractvalue {%jaze_asset-22.Asset*, i64} %44, 0
	%46 = extractvalue {%jaze_asset-22.Asset*, i64} %44, 1
	store %jaze_asset-22.Asset* %45, %jaze_asset-22.Asset** %4
	store i64 %46, i64* %5
	; textureAsset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %6
		; ok3
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%47 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %1, align 8
	%48 = call {%jaze_asset-22.Asset*, i64} @.jaze_catalog-21.Find(%jaze_catalog-21.Catalog* %47, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$282, i64 0, i32 0), i64 4})
	%49 = extractvalue {%jaze_asset-22.Asset*, i64} %48, 0
	%50 = extractvalue {%jaze_asset-22.Asset*, i64} %48, 1
	store %jaze_asset-22.Asset* %49, %jaze_asset-22.Asset** %6
	store i64 %50, i64* %7
	; IfStmt
	%51 = load i64, i64* %3, align 8
	%52 = icmp ne i64 %51, 0
	br i1 %52, label %if.then-3, label %cmp.or-1

cmp.or-1:
	%53 = load i64, i64* %5, align 8
	%54 = icmp ne i64 %53, 0
	br i1 %54, label %if.then-3, label %cmp.or-2

cmp.or-2:
	%55 = load i64, i64* %7, align 8
	%56 = icmp ne i64 %55, 0
	br i1 %56, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$283, i64 0, i32 0), i64 38}, i64 41, i64 15, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$284, i64 0, i32 0), i64 32})
	br label %if.done-4

if.done-4:
	; vertex
	store %jaze_asset-22.Asset.Shader* zeroinitializer, %jaze_asset-22.Asset.Shader** %8
		%57 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	; cast - union_cast
	store {%jaze_asset-22.Asset.Shader*, i1} zeroinitializer, {%jaze_asset-22.Asset.Shader*, i1}* %9
	%58 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %57, i64 0, i32 2 ; UnionTagPtr
	%59 = load i64, i64* %58, align 8
	%60 = icmp eq i64 %59, 2
	br i1 %60, label %union_cast.ok-5, label %union_cast.end-6

union_cast.ok-5:
	%61 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %9, i64 0, i32 0
	%62 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %9, i64 0, i32 1
	%63 = bitcast %jaze_asset-22.Asset* %57 to %jaze_asset-22.Asset.Shader*
	store %jaze_asset-22.Asset.Shader* %63, %jaze_asset-22.Asset.Shader** %61
	store i1 true, i1* %62
	br label %union_cast.end-6

union_cast.end-6:
	%64 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %9, i64 0, i32 1
	%65 = load i1, i1* %64, align 1
	%66 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 176
	%67 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	call void @.__union_cast_check(i1 %65, %..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$285, i64 0, i32 0), i64 38}, i64 44, i64 15, %Type_Info* %66, %Type_Info* %67)
	%68 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %9, i64 0, i32 0
	%69 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %68, align 8
	store %jaze_asset-22.Asset.Shader* %69, %jaze_asset-22.Asset.Shader** %8
	; frag
	store %jaze_asset-22.Asset.Shader* zeroinitializer, %jaze_asset-22.Asset.Shader** %10
		%70 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %4, align 8
	; cast - union_cast
	store {%jaze_asset-22.Asset.Shader*, i1} zeroinitializer, {%jaze_asset-22.Asset.Shader*, i1}* %11
	%71 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %70, i64 0, i32 2 ; UnionTagPtr
	%72 = load i64, i64* %71, align 8
	%73 = icmp eq i64 %72, 2
	br i1 %73, label %union_cast.ok-7, label %union_cast.end-8

union_cast.ok-7:
	%74 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %11, i64 0, i32 0
	%75 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %11, i64 0, i32 1
	%76 = bitcast %jaze_asset-22.Asset* %70 to %jaze_asset-22.Asset.Shader*
	store %jaze_asset-22.Asset.Shader* %76, %jaze_asset-22.Asset.Shader** %74
	store i1 true, i1* %75
	br label %union_cast.end-8

union_cast.end-8:
	%77 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %11, i64 0, i32 1
	%78 = load i1, i1* %77, align 1
	%79 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 176
	%80 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	call void @.__union_cast_check(i1 %78, %..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$286, i64 0, i32 0), i64 38}, i64 45, i64 13, %Type_Info* %79, %Type_Info* %80)
	%81 = getelementptr inbounds {%jaze_asset-22.Asset.Shader*, i1}, {%jaze_asset-22.Asset.Shader*, i1}* %11, i64 0, i32 0
	%82 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %81, align 8
	store %jaze_asset-22.Asset.Shader* %82, %jaze_asset-22.Asset.Shader** %10
	; texturea
	store %jaze_asset-22.Asset.Texture* zeroinitializer, %jaze_asset-22.Asset.Texture** %12
		%83 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %6, align 8
	; cast - union_cast
	store {%jaze_asset-22.Asset.Texture*, i1} zeroinitializer, {%jaze_asset-22.Asset.Texture*, i1}* %13
	%84 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %83, i64 0, i32 2 ; UnionTagPtr
	%85 = load i64, i64* %84, align 8
	%86 = icmp eq i64 %85, 1
	br i1 %86, label %union_cast.ok-9, label %union_cast.end-10

union_cast.ok-9:
	%87 = getelementptr inbounds {%jaze_asset-22.Asset.Texture*, i1}, {%jaze_asset-22.Asset.Texture*, i1}* %13, i64 0, i32 0
	%88 = getelementptr inbounds {%jaze_asset-22.Asset.Texture*, i1}, {%jaze_asset-22.Asset.Texture*, i1}* %13, i64 0, i32 1
	%89 = bitcast %jaze_asset-22.Asset* %83 to %jaze_asset-22.Asset.Texture*
	store %jaze_asset-22.Asset.Texture* %89, %jaze_asset-22.Asset.Texture** %87
	store i1 true, i1* %88
	br label %union_cast.end-10

union_cast.end-10:
	%90 = getelementptr inbounds {%jaze_asset-22.Asset.Texture*, i1}, {%jaze_asset-22.Asset.Texture*, i1}* %13, i64 0, i32 1
	%91 = load i1, i1* %90, align 1
	%92 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 176
	%93 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 164
	call void @.__union_cast_check(i1 %91, %..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$287, i64 0, i32 0), i64 38}, i64 46, i64 17, %Type_Info* %92, %Type_Info* %93)
	%94 = getelementptr inbounds {%jaze_asset-22.Asset.Texture*, i1}, {%jaze_asset-22.Asset.Texture*, i1}* %13, i64 0, i32 0
	%95 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %94, align 8
	store %jaze_asset-22.Asset.Texture* %95, %jaze_asset-22.Asset.Texture** %12
	; AssignStmt
	; SelectorExpr
	%96 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %12, align 8
	%97 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %96, i64 0
	%98 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %97, i64 0, i32 2
	%99 = load i32, i32* %98, align 4
	store i32 %99, i32* @.jaze_render-19.texture
	; AssignStmt
	; SelectorExpr
	%100 = call %jaze_gl-14.Program @.jaze_gl-14.CreateProgram()
	store %jaze_gl-14.Program %100, %jaze_gl-14.Program* @.jaze_render-19.mainProgram
	; SelectorExpr
	%101 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	; SelectorExpr
	%102 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %8, align 8
	%103 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %102, i64 0
	%104 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %103, i64 0, i32 2
	%105 = load i32, i32* %104, align 4
	call void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %101, i32 %105)
	; SelectorExpr
	%106 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	; SelectorExpr
	%107 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %10, align 8
	%108 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %107, i64 0
	%109 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %108, i64 0, i32 2
	%110 = load i32, i32* %109, align 4
	call void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %106, i32 %110)
	; SelectorExpr
	%111 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	call void @.jaze_gl-14.BindFragDataLocation(%jaze_gl-14.Program %111, i32 0, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$288, i64 0, i32 0), i64 8})
	; SelectorExpr
	%112 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	call void @.jaze_gl-14.LinkProgram(%jaze_gl-14.Program %112)
	; SelectorExpr
	%113 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	call void @.jaze_gl-14.UseProgram(%jaze_gl-14.Program %113)
	; AssignStmt
	; SelectorExpr
	%114 = call i32 @.jaze_gl-14.GenVertexArray()
	store i32 %114, i32* @.jaze_render-19.vao
	; SelectorExpr
	%115 = load i32, i32* @.jaze_render-19.vao, align 4
	call void @.jaze_gl-14.BindVertexArray(i32 %115)
	; vbo
	store i32 zeroinitializer, i32* %14
		; SelectorExpr
	%116 = call i32 @.jaze_gl-14.GenVBO()
	store i32 %116, i32* %14
	; SelectorExpr
	%117 = load i32, i32* %14, align 4
	call void @.jaze_gl-14.BindBuffer-2686136247936(i32 %117)
	; ebo
	store i32 zeroinitializer, i32* %15
		; SelectorExpr
	%118 = call i32 @.jaze_gl-14.GenEBO()
	store i32 %118, i32* %15
	; SelectorExpr
	%119 = load i32, i32* %15, align 4
	call void @.jaze_gl-14.BindBuffer-2686136248304(i32 %119)
	; vertices
	store [20 x float] zeroinitializer, [20 x float]* %16
		store [20 x float] [float 0x3fe0000000000000, float 0x3fe0000000000000, float 0x0000000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3fe0000000000000, float 0xbfe0000000000000, float 0x0000000000000000, float 0x3ff0000000000000, float 0x0000000000000000, float 0xbfe0000000000000, float 0xbfe0000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0xbfe0000000000000, float 0x3fe0000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3ff0000000000000], [20 x float]* %16
	; elements
	store [6 x i32] zeroinitializer, [6 x i32]* %17
		store [6 x i32] [i32 0, i32 1, i32 3, i32 1, i32 2, i32 3], [6 x i32]* %17
	; SelectorExpr
	; IndexExpr
	%120 = getelementptr inbounds [20 x float], [20 x float]* %16, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$289, i64 0, i32 0), i64 38}, i64 86, i64 83, i64 0, i64 20)
	%121 = getelementptr inbounds float, float* %120, i64 0
	%122 = bitcast float* %121 to %..rawptr
	call void @.jaze_gl-14.BufferData(i32 34962, i32 80, %..rawptr %122, i32 35044)
	; SelectorExpr
	; IndexExpr
	%123 = getelementptr inbounds [6 x i32], [6 x i32]* %17, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$28a, i64 0, i32 0), i64 38}, i64 87, i64 83, i64 0, i64 6)
	%124 = getelementptr inbounds i32, i32* %123, i64 0
	%125 = bitcast i32* %124 to %..rawptr
	call void @.jaze_gl-14.BufferData(i32 34963, i32 24, %..rawptr %125, i32 35044)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%126 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 0
	; SelectorExpr
	%127 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	%128 = call i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %127, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$28b, i64 0, i32 0), i64 5})
	store %__Map_Header zeroinitializer, %__Map_Header* %18
	%129 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 0
	%130 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %126 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %130, %raw-6.Dynamic_Map** %129
	%131 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 1
	store i1 true, i1* %131
	%132 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 2
	store i64 40, i64* %132
	%133 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 3
	store i64 8, i64* %133
	%134 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 4
	store i64 32, i64* %134
	%135 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 5
	store i64 4, i64* %135
	%136 = load %__Map_Header, %__Map_Header* %18, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %19
	%137 = getelementptr inbounds %__Map_Key, %__Map_Key* %19, i64 0, i32 0
	store i64 8644027876048135736, i64* %137
	%138 = getelementptr inbounds %__Map_Key, %__Map_Key* %19, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$28c, i64 0, i32 0), i64 5}, %..string* %138
	%139 = load %__Map_Key, %__Map_Key* %19, align 8
	store i32 zeroinitializer, i32* %20
	store i32 %128, i32* %20
	%140 = bitcast i32* %20 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %136, %__Map_Key %139, %..rawptr %140)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%141 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 1
	; SelectorExpr
	%142 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	%143 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %142, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$28d, i64 0, i32 0), i64 8})
	store %__Map_Header zeroinitializer, %__Map_Header* %21
	%144 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 0
	%145 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %141 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %145, %raw-6.Dynamic_Map** %144
	%146 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 1
	store i1 true, i1* %146
	%147 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 2
	store i64 40, i64* %147
	%148 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 3
	store i64 8, i64* %148
	%149 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 4
	store i64 32, i64* %149
	%150 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 5
	store i64 4, i64* %150
	%151 = load %__Map_Header, %__Map_Header* %21, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %22
	%152 = getelementptr inbounds %__Map_Key, %__Map_Key* %22, i64 0, i32 0
	store i64 -4512294542364210646, i64* %152
	%153 = getelementptr inbounds %__Map_Key, %__Map_Key* %22, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$28e, i64 0, i32 0), i64 8}, %..string* %153
	%154 = load %__Map_Key, %__Map_Key* %22, align 8
	store i32 zeroinitializer, i32* %23
	store i32 %143, i32* %23
	%155 = bitcast i32* %23 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %151, %__Map_Key %154, %..rawptr %155)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%156 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 1
	; SelectorExpr
	%157 = load %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, align 8
	%158 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %157, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$28f, i64 0, i32 0), i64 2})
	store %__Map_Header zeroinitializer, %__Map_Header* %24
	%159 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 0
	%160 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %156 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %160, %raw-6.Dynamic_Map** %159
	%161 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 1
	store i1 true, i1* %161
	%162 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 2
	store i64 40, i64* %162
	%163 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 3
	store i64 8, i64* %163
	%164 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 4
	store i64 32, i64* %164
	%165 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 5
	store i64 4, i64* %165
	%166 = load %__Map_Header, %__Map_Header* %24, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %25
	%167 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 0
	store i64 662345837686521650, i64* %167
	%168 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$290, i64 0, i32 0), i64 2}, %..string* %168
	%169 = load %__Map_Key, %__Map_Key* %25, align 8
	store i32 zeroinitializer, i32* %26
	store i32 %158, i32* %26
	%170 = bitcast i32* %26 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %166, %__Map_Key %169, %..rawptr %170)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%171 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %27
	store %__Map_Header zeroinitializer, %__Map_Header* %28
	%172 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 0
	%173 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %171 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %173, %raw-6.Dynamic_Map** %172
	%174 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 1
	store i1 true, i1* %174
	%175 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 2
	store i64 40, i64* %175
	%176 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 3
	store i64 8, i64* %176
	%177 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 4
	store i64 32, i64* %177
	%178 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 5
	store i64 4, i64* %178
	%179 = load %__Map_Header, %__Map_Header* %28, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %29
	%180 = getelementptr inbounds %__Map_Key, %__Map_Key* %29, i64 0, i32 0
	store i64 -4512294542364210646, i64* %180
	%181 = getelementptr inbounds %__Map_Key, %__Map_Key* %29, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$291, i64 0, i32 0), i64 8}, %..string* %181
	%182 = load %__Map_Key, %__Map_Key* %29, align 8
	%183 = call %..rawptr @.__dynamic_map_get(%__Map_Header %179, %__Map_Key %182)
	%184 = icmp ne %..rawptr %183, null
	%185 = getelementptr inbounds {i32, i1}, {i32, i1}* %27, i64 0, i32 1
	store i1 %184, i1* %185
	br i1 %184, label %map.get.then-11, label %map.get.done-12

map.get.then-11:
	%186 = getelementptr inbounds {i32, i1}, {i32, i1}* %27, i64 0, i32 0
	%187 = bitcast %..rawptr %183 to i32*
	%188 = load i32, i32* %187, align 4
	store i32 %188, i32* %186
	br label %map.get.done-12

map.get.done-12:
	%189 = getelementptr inbounds {i32, i1}, {i32, i1}* %27, i64 0, i32 0
	%190 = load i32, i32* %189, align 4
	; cast - cast
	%191 = bitcast i32 %190 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %191, i32 3, i32 5126, i1 false, i32 20, %..rawptr zeroinitializer)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%192 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %30
	store %__Map_Header zeroinitializer, %__Map_Header* %31
	%193 = getelementptr inbounds %__Map_Header, %__Map_Header* %31, i64 0, i32 0
	%194 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %192 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %194, %raw-6.Dynamic_Map** %193
	%195 = getelementptr inbounds %__Map_Header, %__Map_Header* %31, i64 0, i32 1
	store i1 true, i1* %195
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %31, i64 0, i32 2
	store i64 40, i64* %196
	%197 = getelementptr inbounds %__Map_Header, %__Map_Header* %31, i64 0, i32 3
	store i64 8, i64* %197
	%198 = getelementptr inbounds %__Map_Header, %__Map_Header* %31, i64 0, i32 4
	store i64 32, i64* %198
	%199 = getelementptr inbounds %__Map_Header, %__Map_Header* %31, i64 0, i32 5
	store i64 4, i64* %199
	%200 = load %__Map_Header, %__Map_Header* %31, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %32
	%201 = getelementptr inbounds %__Map_Key, %__Map_Key* %32, i64 0, i32 0
	store i64 662345837686521650, i64* %201
	%202 = getelementptr inbounds %__Map_Key, %__Map_Key* %32, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$292, i64 0, i32 0), i64 2}, %..string* %202
	%203 = load %__Map_Key, %__Map_Key* %32, align 8
	%204 = call %..rawptr @.__dynamic_map_get(%__Map_Header %200, %__Map_Key %203)
	%205 = icmp ne %..rawptr %204, null
	%206 = getelementptr inbounds {i32, i1}, {i32, i1}* %30, i64 0, i32 1
	store i1 %205, i1* %206
	br i1 %205, label %map.get.then-13, label %map.get.done-14

map.get.then-13:
	%207 = getelementptr inbounds {i32, i1}, {i32, i1}* %30, i64 0, i32 0
	%208 = bitcast %..rawptr %204 to i32*
	%209 = load i32, i32* %208, align 4
	store i32 %209, i32* %207
	br label %map.get.done-14

map.get.done-14:
	%210 = getelementptr inbounds {i32, i1}, {i32, i1}* %30, i64 0, i32 0
	%211 = load i32, i32* %210, align 4
	; cast - cast
	%212 = bitcast i32 %211 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %212, i32 2, i32 5126, i1 false, i32 20, %..rawptr inttoptr (i64 12 to %..rawptr))
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%213 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %33
	store %__Map_Header zeroinitializer, %__Map_Header* %34
	%214 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 0
	%215 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %213 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %215, %raw-6.Dynamic_Map** %214
	%216 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 1
	store i1 true, i1* %216
	%217 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 2
	store i64 40, i64* %217
	%218 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 3
	store i64 8, i64* %218
	%219 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 4
	store i64 32, i64* %219
	%220 = getelementptr inbounds %__Map_Header, %__Map_Header* %34, i64 0, i32 5
	store i64 4, i64* %220
	%221 = load %__Map_Header, %__Map_Header* %34, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %35
	%222 = getelementptr inbounds %__Map_Key, %__Map_Key* %35, i64 0, i32 0
	store i64 -4512294542364210646, i64* %222
	%223 = getelementptr inbounds %__Map_Key, %__Map_Key* %35, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$293, i64 0, i32 0), i64 8}, %..string* %223
	%224 = load %__Map_Key, %__Map_Key* %35, align 8
	%225 = call %..rawptr @.__dynamic_map_get(%__Map_Header %221, %__Map_Key %224)
	%226 = icmp ne %..rawptr %225, null
	%227 = getelementptr inbounds {i32, i1}, {i32, i1}* %33, i64 0, i32 1
	store i1 %226, i1* %227
	br i1 %226, label %map.get.then-15, label %map.get.done-16

map.get.then-15:
	%228 = getelementptr inbounds {i32, i1}, {i32, i1}* %33, i64 0, i32 0
	%229 = bitcast %..rawptr %225 to i32*
	%230 = load i32, i32* %229, align 4
	store i32 %230, i32* %228
	br label %map.get.done-16

map.get.done-16:
	%231 = getelementptr inbounds {i32, i1}, {i32, i1}* %33, i64 0, i32 0
	%232 = load i32, i32* %231, align 4
	; cast - cast
	%233 = bitcast i32 %232 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %233)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%234 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* @.jaze_render-19.mainProgram, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %36
	store %__Map_Header zeroinitializer, %__Map_Header* %37
	%235 = getelementptr inbounds %__Map_Header, %__Map_Header* %37, i64 0, i32 0
	%236 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %234 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %236, %raw-6.Dynamic_Map** %235
	%237 = getelementptr inbounds %__Map_Header, %__Map_Header* %37, i64 0, i32 1
	store i1 true, i1* %237
	%238 = getelementptr inbounds %__Map_Header, %__Map_Header* %37, i64 0, i32 2
	store i64 40, i64* %238
	%239 = getelementptr inbounds %__Map_Header, %__Map_Header* %37, i64 0, i32 3
	store i64 8, i64* %239
	%240 = getelementptr inbounds %__Map_Header, %__Map_Header* %37, i64 0, i32 4
	store i64 32, i64* %240
	%241 = getelementptr inbounds %__Map_Header, %__Map_Header* %37, i64 0, i32 5
	store i64 4, i64* %241
	%242 = load %__Map_Header, %__Map_Header* %37, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %38
	%243 = getelementptr inbounds %__Map_Key, %__Map_Key* %38, i64 0, i32 0
	store i64 662345837686521650, i64* %243
	%244 = getelementptr inbounds %__Map_Key, %__Map_Key* %38, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$294, i64 0, i32 0), i64 2}, %..string* %244
	%245 = load %__Map_Key, %__Map_Key* %38, align 8
	%246 = call %..rawptr @.__dynamic_map_get(%__Map_Header %242, %__Map_Key %245)
	%247 = icmp ne %..rawptr %246, null
	%248 = getelementptr inbounds {i32, i1}, {i32, i1}* %36, i64 0, i32 1
	store i1 %247, i1* %248
	br i1 %247, label %map.get.then-17, label %map.get.done-18

map.get.then-17:
	%249 = getelementptr inbounds {i32, i1}, {i32, i1}* %36, i64 0, i32 0
	%250 = bitcast %..rawptr %246 to i32*
	%251 = load i32, i32* %250, align 4
	store i32 %251, i32* %249
	br label %map.get.done-18

map.get.done-18:
	%252 = getelementptr inbounds {i32, i1}, {i32, i1}* %36, i64 0, i32 0
	%253 = load i32, i32* %252, align 4
	; cast - cast
	%254 = bitcast i32 %253 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %254)
	ret void
}

define void @.jaze_time-20.Init() {
decls-0:
	; SelectorExpr
	; SelectorExpr
	%0 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 4
	%1 = getelementptr inbounds i64, i64* %0, i64 0
	%2 = call ccc i32 @QueryPerformanceFrequency(i64* %1)
	; SelectorExpr
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 5
	%4 = getelementptr inbounds i64, i64* %3, i64 0
	%5 = call ccc i32 @QueryPerformanceCounter(i64* %4)
	; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 0
	store double 0x3ff0000000000000, double* %6
	ret void
}

define void @.jaze_time-20.Update() {
decls-0:
	%0 = alloca i64, align 8
	; newTime
	store i64 zeroinitializer, i64* %0
		; SelectorExpr
	%1 = getelementptr inbounds i64, i64* %0, i64 0
	%2 = call ccc i32 @QueryPerformanceCounter(i64* %1)
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 1
	%4 = load i64, i64* %0, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 5
	%6 = load i64, i64* %5, align 8
	%7 = sub i64 %4, %6
	; cast - cast
	%8 = sitofp i64 %7 to double
	store double %8, double* %3
	; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 5
	%10 = load i64, i64* %0, align 8
	store i64 %10, i64* %9
	; AssignStmt
	; SelectorExpr
	%11 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 1
	; SelectorExpr
	%12 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 4
	%13 = load i64, i64* %12, align 8
	; cast - cast
	%14 = sitofp i64 %13 to double
	%15 = load double, double* %11, align 8
	%16 = fdiv double %15, %14
	store double %16, double* %11
	; AssignStmt
	; SelectorExpr
	%17 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 2
	; SelectorExpr
	%18 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 1
	%19 = load double, double* %18, align 8
	%20 = load double, double* %17, align 8
	%21 = fadd double %20, %19
	store double %21, double* %17
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 3
	%23 = load i64, i64* %22, align 8
	%24 = add i64 %23, 1
	store i64 %24, i64* %22
	ret void
}

define double @.jaze_time-20.GetDeltaTime() {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 1
	%1 = load double, double* %0, align 8
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 0
	%3 = load double, double* %2, align 8
	%4 = fmul double %1, %3
	ret double %4
}

define double @.jaze_time-20.GetUnscaledDeltaTime() {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 1
	%1 = load double, double* %0, align 8
	ret double %1
}

define double @.jaze_time-20.GetTimeSinceStart() {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = getelementptr inbounds %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, i64 0, i32 2
	%1 = load double, double* %0, align 8
	ret double %1
}

define %jaze_time-20.TimeData @.jaze_time-20.GetTimeData() {
decls-0:
	; ReturnStmt
	%0 = load %jaze_time-20.TimeData, %jaze_time-20.TimeData* @.jaze_time-20._Time, align 8
	ret %jaze_time-20.TimeData %0
}

define {%jaze_catalog-21.Catalog*, i64} @.jaze_catalog-21.CreateNew-2686136301616(i64 %kind, %..string %path, %..string %acceptedExtensions) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %..string, align 8
	%3 = alloca {%jaze_catalog-21.Catalog*, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %kind, i64* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %path, %..string* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %acceptedExtensions, %..string* %2
	; ReturnStmt
	%4 = load i64, i64* %0, align 8
	%5 = load %..string, %..string* %1, align 8
	%6 = load %..string, %..string* %1, align 8
	%7 = load %..string, %..string* %2, align 8
	%8 = call {%jaze_catalog-21.Catalog*, i64} @.jaze_catalog-21.CreateNew-2686136301984(i64 %4, %..string %5, %..string %6, %..string %7)
	%9 = extractvalue {%jaze_catalog-21.Catalog*, i64} %8, 0
	%10 = extractvalue {%jaze_catalog-21.Catalog*, i64} %8, 1
	store {%jaze_catalog-21.Catalog*, i64} zeroinitializer, {%jaze_catalog-21.Catalog*, i64}* %3
	%11 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %3, i64 0, i32 0
	store %jaze_catalog-21.Catalog* %9, %jaze_catalog-21.Catalog** %11
	%12 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %12
	%13 = load {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %3, align 8
	ret {%jaze_catalog-21.Catalog*, i64} %13
}

define {%jaze_catalog-21.Catalog*, i64} @.jaze_catalog-21.CreateNew-2686136301984(i64 %kind, %..string %identifier, %..string %path, %..string %acceptedExtensions) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %..string, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i32, align 4
	%6 = alloca %jaze_catalog-21.Catalog*, align 8
	%7 = alloca {i8*, i64, i64}, align 8
	%8 = alloca {i8*, i64, i64}, align 8
	%9 = alloca {i8*, i64, i64}, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca %..string, align 8
	%13 = alloca {%..any*, i64, i64}, align 8
	%14 = alloca [2 x %..any], align 8
	%15 = alloca %jaze_win32-13.FindData, align 4
	%16 = alloca {i8*, i64, i64}, align 8
	%17 = alloca %..any, align 8
	%18 = alloca %..any, align 8
	%19 = alloca %..string, align 8
	%20 = alloca {%..any*, i64, i64}, align 8
	%21 = alloca [2 x %..any], align 8
	%22 = alloca %..rawptr, align 8
	%23 = alloca {i8*, i64, i64}, align 8
	%24 = alloca {i8*, i64, i64}, align 8
	%25 = alloca {i8*, i64, i64}, align 8
	%26 = alloca %..string, align 8
	%27 = alloca %..string, align 8
	%28 = alloca i64, align 8
	%29 = alloca %jaze_asset-22.FileInfo_t, align 8
	%30 = alloca {%..string*, i64, i64}, align 8
	%31 = alloca [1 x %..string], align 8
	%32 = alloca {%jaze_catalog-21.Catalog**, i64, i64}, align 8
	%33 = alloca [1 x %jaze_catalog-21.Catalog*], align 8
	%34 = alloca {%jaze_catalog-21.Catalog*, i64}, align 8
	%35 = alloca {%jaze_catalog-21.Catalog*, i64}, align 8
	%36 = alloca {%jaze_catalog-21.Catalog*, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %kind, i64* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %identifier, %..string* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %path, %..string* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %acceptedExtensions, %..string* %3
	; pstr
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%37 = load %..string, %..string* %2, align 8
	%38 = call i8* @.strings-9.new_c_string(%..string %37)
	store i8* %38, i8** %4
	; DeferStmt
	; attr
	store i32 zeroinitializer, i32* %5
		; SelectorExpr
	%39 = load i8*, i8** %4, align 8
	%40 = call ccc i32 @GetFileAttributesA(i8* %39)
	store i32 %40, i32* %5
	; IfStmt
	%41 = load i32, i32* %5, align 4
	%42 = call i1 @.jaze_catalog-21._IsDirectory(i32 %41)
	br i1 %42, label %if.then-1, label %if.else-28

if.then-1:
	; res
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %6
		; new
	%43 = call %..rawptr @.alloc_align(i64 184, i64 8)
	%44 = bitcast %..rawptr %43 to %jaze_catalog-21.Catalog*
	store %jaze_catalog-21.Catalog* %44, %jaze_catalog-21.Catalog** %6
	; AssignStmt
	; SelectorExpr
	%45 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%46 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %45, i64 0
	%47 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %46, i64 0, i32 2
	%48 = load %..string, %..string* %1, align 8
	store %..string %48, %..string* %47
	; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %7
		; make
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$295, i64 0, i32 0), i64 39}, i64 113, i64 33, i64 0, i64 260, i64 260)
	%49 = mul i64 1, 260
	%50 = call %..rawptr @.alloc_align(i64 %49, i64 1)
	%51 = bitcast %..rawptr %50 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %8
	%52 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	store i8* %51, i8** %52
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 1
	store i64 260, i64* %53
	%54 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 2
	store i64 260, i64* %54
	%55 = load {i8*, i64, i64}, {i8*, i64, i64}* %8, align 8
	store {i8*, i64, i64} %55, {i8*, i64, i64}* %7
	; AssignStmt
	; SelectorExpr
	%56 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%57 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %56, i64 0
	%58 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %57, i64 0, i32 3
	; SelectorExpr
	; SliceExpr
	%59 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	%60 = extractvalue {i8*, i64, i64} %59, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$296, i64 0, i32 0), i64 39}, i64 114, i64 35, i64 0, i64 0, i64 %60)
	%61 = extractvalue {i8*, i64, i64} %59, 0
	%62 = getelementptr inbounds i8, i8* %61, i64 0
	%63 = sub i64 0, 0
	%64 = sub i64 %60, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %9
	%65 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 0
	store i8* %62, i8** %65
	%66 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 1
	store i64 %63, i64* %66
	%67 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 2
	store i64 %64, i64* %67
	%68 = load {i8*, i64, i64}, {i8*, i64, i64}* %9, align 8
	%69 = load %..string, %..string* %2, align 8
	; TernaryExpr
	; IndexExpr
	%70 = load %..string, %..string* %2, align 8
	%71 = extractvalue %..string %70, 0
	%72 = extractvalue %..string %70, 1
	%73 = load %..string, %..string* %2, align 8
	%74 = extractvalue %..string %73, 1
	%75 = sub i64 %74, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$297, i64 0, i32 0), i64 39}, i64 114, i64 61, i64 %75, i64 %72)
	%76 = getelementptr inbounds i8, i8* %71, i64 %75
	%77 = load i8, i8* %76, align 1
	%78 = icmp eq i8 %77, 47
	br i1 %78, label %if.then-2, label %if.else-3

if.then-2:
	br label %if.done-4

if.else-3:
	br label %if.done-4

if.done-4:
	%79 = phi %..string [ zeroinitializer, %if.then-2 ], [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$298, i64 0, i32 0), i64 1}, %if.else-3 ]
	store %..any zeroinitializer, %..any* %10
	%80 = bitcast %..string* %2 to %..rawptr
	%81 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%82 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%83 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %81, %Type_Info** %82
	store %..rawptr %80, %..rawptr* %83
	%84 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	store %..string zeroinitializer, %..string* %12
	store %..string %79, %..string* %12
	%85 = bitcast %..string* %12 to %..rawptr
	%86 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%87 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%88 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %86, %Type_Info** %87
	store %..rawptr %85, %..rawptr* %88
	%89 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %13
	store [2 x %..any] zeroinitializer, [2 x %..any]* %14
	%90 = getelementptr inbounds [2 x %..any], [2 x %..any]* %14, i64 0, i32 0
	store %..any %84, %..any* %90
	%91 = getelementptr inbounds [2 x %..any], [2 x %..any]* %14, i64 0, i32 1
	store %..any %89, %..any* %91
	%92 = getelementptr inbounds [2 x %..any], [2 x %..any]* %14, i64 0, i32 0
	%93 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 0
	store %..any* %92, %..any** %93
	%94 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 1
	store i64 2, i64* %94
	%95 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 2
	store i64 2, i64* %95
	%96 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %13, align 8
	%97 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %68, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$299, i64 0, i32 0), i64 4}, {%..any*, i64, i64} %96)
	store %..string %97, %..string* %58
	; AssignStmt
	; SelectorExpr
	%98 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%99 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %98, i64 0
	%100 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %99, i64 0, i32 4
	%101 = load i64, i64* %0, align 8
	store i64 %101, i64* %100
	%102 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%103 = load %..string, %..string* %3, align 8
	call void @.jaze_catalog-21.CreateNew-2686136301984.ExtractAcceptedExtensions-3(%jaze_catalog-21.Catalog* %102, %..string %103)
	; data
	store %jaze_win32-13.FindData zeroinitializer, %jaze_win32-13.FindData* %15
		store %jaze_win32-13.FindData zeroinitializer, %jaze_win32-13.FindData* %15
	; SelectorExpr
	; SliceExpr
	%104 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	%105 = extractvalue {i8*, i64, i64} %104, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$29a, i64 0, i32 0), i64 39}, i64 118, i64 24, i64 0, i64 0, i64 %105)
	%106 = extractvalue {i8*, i64, i64} %104, 0
	%107 = getelementptr inbounds i8, i8* %106, i64 0
	%108 = sub i64 0, 0
	%109 = sub i64 %105, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %16
	%110 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %16, i64 0, i32 0
	store i8* %107, i8** %110
	%111 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %16, i64 0, i32 1
	store i64 %108, i64* %111
	%112 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %16, i64 0, i32 2
	store i64 %109, i64* %112
	%113 = load {i8*, i64, i64}, {i8*, i64, i64}* %16, align 8
	%114 = load %..string, %..string* %2, align 8
	; TernaryExpr
	; IndexExpr
	%115 = load %..string, %..string* %2, align 8
	%116 = extractvalue %..string %115, 0
	%117 = extractvalue %..string %115, 1
	%118 = load %..string, %..string* %2, align 8
	%119 = extractvalue %..string %118, 1
	%120 = sub i64 %119, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$29b, i64 0, i32 0), i64 39}, i64 118, i64 50, i64 %120, i64 %117)
	%121 = getelementptr inbounds i8, i8* %116, i64 %120
	%122 = load i8, i8* %121, align 1
	%123 = icmp eq i8 %122, 92
	br i1 %123, label %if.then-5, label %if.else-6

if.then-5:
	br label %if.done-7

if.else-6:
	br label %if.done-7

if.done-7:
	%124 = phi %..string [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$29c, i64 0, i32 0), i64 1}, %if.then-5 ], [ {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$29d, i64 0, i32 0), i64 2}, %if.else-6 ]
	store %..any zeroinitializer, %..any* %17
	%125 = bitcast %..string* %2 to %..rawptr
	%126 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%127 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%128 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %126, %Type_Info** %127
	store %..rawptr %125, %..rawptr* %128
	%129 = load %..any, %..any* %17, align 8
	store %..any zeroinitializer, %..any* %18
	store %..string zeroinitializer, %..string* %19
	store %..string %124, %..string* %19
	%130 = bitcast %..string* %19 to %..rawptr
	%131 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%132 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%133 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %131, %Type_Info** %132
	store %..rawptr %130, %..rawptr* %133
	%134 = load %..any, %..any* %18, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %20
	store [2 x %..any] zeroinitializer, [2 x %..any]* %21
	%135 = getelementptr inbounds [2 x %..any], [2 x %..any]* %21, i64 0, i32 0
	store %..any %129, %..any* %135
	%136 = getelementptr inbounds [2 x %..any], [2 x %..any]* %21, i64 0, i32 1
	store %..any %134, %..any* %136
	%137 = getelementptr inbounds [2 x %..any], [2 x %..any]* %21, i64 0, i32 0
	%138 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %20, i64 0, i32 0
	store %..any* %137, %..any** %138
	%139 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %20, i64 0, i32 1
	store i64 2, i64* %139
	%140 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %20, i64 0, i32 2
	store i64 2, i64* %140
	%141 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %20, align 8
	%142 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %113, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$29e, i64 0, i32 0), i64 4}, {%..any*, i64, i64} %141)
	; fileH
	store %..rawptr zeroinitializer, %..rawptr* %22
		; SelectorExpr
	; IndexExpr
	%143 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	%144 = extractvalue {i8*, i64, i64} %143, 0
	%145 = extractvalue {i8*, i64, i64} %143, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$29f, i64 0, i32 0), i64 39}, i64 119, i64 41, i64 0, i64 %145)
	%146 = getelementptr inbounds i8, i8* %144, i64 0
	%147 = getelementptr inbounds i8, i8* %146, i64 0
	%148 = getelementptr inbounds %jaze_win32-13.FindData, %jaze_win32-13.FindData* %15, i64 0
	%149 = call ccc %..rawptr @FindFirstFileA(i8* %147, %jaze_win32-13.FindData* %148)
	store %..rawptr %149, %..rawptr* %22
	; IfStmt
	%150 = load %..rawptr, %..rawptr* %22, align 8
	%151 = icmp ne %..rawptr %150, inttoptr (i64 18446744073709551615 to %..rawptr)
	br i1 %151, label %if.then-8, label %if.else-26

if.then-8:
	; ForStmt
	br label %for.loop-9

for.loop-9:
	; SelectorExpr
	%152 = load %..rawptr, %..rawptr* %22, align 8
	%153 = getelementptr inbounds %jaze_win32-13.FindData, %jaze_win32-13.FindData* %15, i64 0
	%154 = call ccc i32 @FindNextFileA(%..rawptr %152, %jaze_win32-13.FindData* %153)
	%155 = icmp eq i32 %154, 1
	br i1 %155, label %for.body-10, label %for.done-25

for.body-10:
	; IfStmt
	; SelectorExpr
	%156 = getelementptr inbounds %jaze_win32-13.FindData, %jaze_win32-13.FindData* %15, i64 0, i32 0
	%157 = load i32, i32* %156, align 4
	%158 = call i1 @.jaze_catalog-21._IsDirectory(i32 %157)
	br i1 %158, label %if.then-11, label %if.done-12

if.then-11:
	; continue
	br label %for.loop-9

if.done-12:
	; nameBuf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %23
		; make
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2a0, i64 0, i32 0), i64 39}, i64 126, i64 41, i64 0, i64 260, i64 260)
	%159 = mul i64 1, 260
	%160 = call %..rawptr @.alloc_align(i64 %159, i64 1)
	%161 = bitcast %..rawptr %160 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %24
	%162 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 0
	store i8* %161, i8** %162
	%163 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 1
	store i64 260, i64* %163
	%164 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 2
	store i64 260, i64* %164
	%165 = load {i8*, i64, i64}, {i8*, i64, i64}* %24, align 8
	store {i8*, i64, i64} %165, {i8*, i64, i64}* %23
	; copy
	%166 = load {i8*, i64, i64}, {i8*, i64, i64}* %23, align 8
	; SliceExpr
	; SelectorExpr
	%167 = getelementptr inbounds %jaze_win32-13.FindData, %jaze_win32-13.FindData* %15, i64 0, i32 8
	%168 = load [260 x i8], [260 x i8]* %167, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2a1, i64 0, i32 0), i64 39}, i64 127, i64 44, i64 0, i64 260, i64 260)
	%169 = getelementptr inbounds [260 x i8], [260 x i8]* %167, i64 0, i32 0
	%170 = getelementptr inbounds i8, i8* %169, i64 0
	%171 = sub i64 260, 0
	%172 = sub i64 260, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %25
	%173 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %25, i64 0, i32 0
	store i8* %170, i8** %173
	%174 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %25, i64 0, i32 1
	store i64 %171, i64* %174
	%175 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %25, i64 0, i32 2
	store i64 %172, i64* %175
	%176 = load {i8*, i64, i64}, {i8*, i64, i64}* %25, align 8
	%177 = extractvalue {i8*, i64, i64} %166, 0
	%178 = bitcast i8* %177 to %..rawptr
	%179 = extractvalue {i8*, i64, i64} %176, 0
	%180 = bitcast i8* %179 to %..rawptr
	%181 = extractvalue {i8*, i64, i64} %166, 1
	%182 = extractvalue {i8*, i64, i64} %176, 1
	%183 = icmp slt i64 %181, %182
	%184 = select i1 %183, i64 %181, i64 %182
	%185 = mul i64 %184, 1
	%186 = call %..rawptr @.__mem_copy(%..rawptr %178, %..rawptr %180, i64 %185)
	; str
	store %..string zeroinitializer, %..string* %26
		; SelectorExpr
	; IndexExpr
	%187 = load {i8*, i64, i64}, {i8*, i64, i64}* %23, align 8
	%188 = extractvalue {i8*, i64, i64} %187, 0
	%189 = extractvalue {i8*, i64, i64} %187, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2a2, i64 0, i32 0), i64 39}, i64 128, i64 56, i64 0, i64 %189)
	%190 = getelementptr inbounds i8, i8* %188, i64 0
	%191 = getelementptr inbounds i8, i8* %190, i64 0
	%192 = call %..string @.strings-9.to_odin_string(i8* %191)
	store %..string %192, %..string* %26
	; RangeStmt
	; ext
	store %..string zeroinitializer, %..string* %27
		; SelectorExpr
	%193 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%194 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %193, i64 0
	%195 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %194, i64 0, i32 1
	%196 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %195, i64 0, i32 1
	store i64 zeroinitializer, i64* %28
	store i64 -1, i64* %28
	br label %for.index.loop-13

for.index.loop-13:
	%197 = load i64, i64* %28, align 8
	%198 = add i64 %197, 1
	store i64 %198, i64* %28
	%199 = load i64, i64* %196, align 8
	%200 = icmp slt i64 %198, %199
	br i1 %200, label %for.index.body-14, label %for.index.done-24

for.index.body-14:
	%201 = load i64, i64* %28, align 8
	%202 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %195, i64 0, i32 0
	%203 = load %..string*, %..string** %202, align 8
	%204 = getelementptr inbounds %..string, %..string* %203, i64 %201
	%205 = load %..string, %..string* %204, align 8
	store %..string %205, %..string* %27
	; IfStmt
	%206 = load %..string, %..string* %26, align 8
	%207 = call %..string @.jaze_catalog-21._GetFileExtension(%..string %206)
	%208 = load %..string, %..string* %27, align 8
	%209 = call i1 @.__string_eq(%..string %207, %..string %208)
	br i1 %209, label %if.then-15, label %if.done-23

if.then-15:
	; file
	store %jaze_asset-22.FileInfo_t zeroinitializer, %jaze_asset-22.FileInfo_t* %29
		; SelectorExpr
	%210 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%211 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %210, i64 0
	%212 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %211, i64 0, i32 3
	%213 = load %..string, %..string* %212, align 8
	%214 = load %..string, %..string* %26, align 8
	%215 = load %jaze_win32-13.FindData, %jaze_win32-13.FindData* %15, align 4
	%216 = call %jaze_asset-22.FileInfo_t @.jaze_catalog-21._CreateFileInfo(%..string %213, %..string %214, %jaze_win32-13.FindData %215)
	store %jaze_asset-22.FileInfo_t %216, %jaze_asset-22.FileInfo_t* %29
	; AssignStmt
	; SelectorExpr
	%217 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%218 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %217, i64 0
	%219 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %218, i64 0, i32 6
	; SelectorExpr
	%220 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %29, i64 0, i32 3
	%221 = load i64, i64* %220, align 8
	; cast - cast
	%222 = bitcast i64 %221 to i64
	%223 = load i64, i64* %219, align 8
	%224 = add i64 %223, %222
	store i64 %224, i64* %219
	; MatchStmt
	%225 = load i64, i64* %0, align 8
	%226 = icmp eq i64 %225, 0
	br i1 %226, label %match.case.body-17, label %match.case.next-16

match.case.next-16:
	%227 = icmp eq i64 %225, 1
	br i1 %227, label %match.fall.body-19, label %match.case.next-18

match.case.body-17:
	%228 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%229 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %29, align 8
	call void @.jaze_catalog-21.CreateNew-2686136301984.AddTexture-0(%jaze_catalog-21.Catalog* %228, %jaze_asset-22.FileInfo_t %229)
	br label %match.done-22

match.case.next-18:
	%230 = icmp eq i64 %225, 2
	br i1 %230, label %match.fall.body-21, label %match.case.next-20

match.fall.body-19:
	%231 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%232 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %29, align 8
	call void @.jaze_catalog-21.CreateNew-2686136301984.AddShader-1(%jaze_catalog-21.Catalog* %231, %jaze_asset-22.FileInfo_t %232)
	br label %match.done-22

match.case.next-20:
	br label %match.done-22

match.fall.body-21:
	%233 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%234 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %29, align 8
	call void @.jaze_catalog-21.CreateNew-2686136301984.AddSound-2(%jaze_catalog-21.Catalog* %233, %jaze_asset-22.FileInfo_t %234)
	br label %match.done-22

match.done-22:
	; break
	br label %for.index.done-24

if.done-23:
	br label %for.index.loop-13

for.index.done-24:
	; SelectorExpr
	%235 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%236 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %235, i64 0
	%237 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %236, i64 0, i32 5
	%238 = load i64, i64* %237, align 8
	%239 = add i64 %238, 1
	store i64 %239, i64* %237
	br label %for.loop-9

for.done-25:
	; SelectorExpr
	%240 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 2
	%241 = load i64, i64* %240, align 8
	%242 = add i64 %241, 1
	store i64 %242, i64* %240
	; append
	; SelectorExpr
	%243 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 0
	%244 = bitcast {%..string*, i64, i64,%Allocator}* %243 to %..rawptr
	; SelectorExpr
	%245 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 0
	%246 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %245, align 8
	; SelectorExpr
	%247 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%248 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %247, i64 0
	%249 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %248, i64 0, i32 2
	%250 = load %..string, %..string* %249, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %30
	store [1 x %..string] zeroinitializer, [1 x %..string]* %31
	%251 = getelementptr inbounds [1 x %..string], [1 x %..string]* %31, i64 0, i32 0
	store %..string %250, %..string* %251
	%252 = getelementptr inbounds [1 x %..string], [1 x %..string]* %31, i64 0, i32 0
	%253 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %30, i64 0, i32 0
	store %..string* %252, %..string** %253
	%254 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %30, i64 0, i32 1
	store i64 1, i64* %254
	%255 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %30, i64 0, i32 2
	store i64 1, i64* %255
	%256 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %30, align 8
	%257 = extractvalue {%..string*, i64, i64} %256, 0
	%258 = extractvalue {%..string*, i64, i64} %256, 1
	%259 = bitcast %..string* %257 to %..rawptr
	%260 = call i64 @.__dynamic_array_append(%..rawptr %244, i64 16, i64 8, %..rawptr %259, i64 %258)
	; append
	; SelectorExpr
	%261 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 1
	%262 = bitcast {%jaze_catalog-21.Catalog**, i64, i64,%Allocator}* %261 to %..rawptr
	; SelectorExpr
	%263 = getelementptr inbounds %jaze_catalog-21.DebugInfo_t, %jaze_catalog-21.DebugInfo_t* @.jaze_catalog-21.DebugInfo, i64 0, i32 1
	%264 = load {%jaze_catalog-21.Catalog**, i64, i64,%Allocator}, {%jaze_catalog-21.Catalog**, i64, i64,%Allocator}* %263, align 8
	%265 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	; variadic call argument generation
	store {%jaze_catalog-21.Catalog**, i64, i64} zeroinitializer, {%jaze_catalog-21.Catalog**, i64, i64}* %32
	store [1 x %jaze_catalog-21.Catalog*] zeroinitializer, [1 x %jaze_catalog-21.Catalog*]* %33
	%266 = getelementptr inbounds [1 x %jaze_catalog-21.Catalog*], [1 x %jaze_catalog-21.Catalog*]* %33, i64 0, i32 0
	store %jaze_catalog-21.Catalog* %265, %jaze_catalog-21.Catalog** %266
	%267 = getelementptr inbounds [1 x %jaze_catalog-21.Catalog*], [1 x %jaze_catalog-21.Catalog*]* %33, i64 0, i32 0
	%268 = getelementptr inbounds {%jaze_catalog-21.Catalog**, i64, i64}, {%jaze_catalog-21.Catalog**, i64, i64}* %32, i64 0, i32 0
	store %jaze_catalog-21.Catalog** %267, %jaze_catalog-21.Catalog*** %268
	%269 = getelementptr inbounds {%jaze_catalog-21.Catalog**, i64, i64}, {%jaze_catalog-21.Catalog**, i64, i64}* %32, i64 0, i32 1
	store i64 1, i64* %269
	%270 = getelementptr inbounds {%jaze_catalog-21.Catalog**, i64, i64}, {%jaze_catalog-21.Catalog**, i64, i64}* %32, i64 0, i32 2
	store i64 1, i64* %270
	%271 = load {%jaze_catalog-21.Catalog**, i64, i64}, {%jaze_catalog-21.Catalog**, i64, i64}* %32, align 8
	%272 = extractvalue {%jaze_catalog-21.Catalog**, i64, i64} %271, 0
	%273 = extractvalue {%jaze_catalog-21.Catalog**, i64, i64} %271, 1
	%274 = bitcast %jaze_catalog-21.Catalog** %272 to %..rawptr
	%275 = call i64 @.__dynamic_array_append(%..rawptr %262, i64 8, i64 8, %..rawptr %274, i64 %273)
	; ReturnStmt
	%276 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	store {%jaze_catalog-21.Catalog*, i64} zeroinitializer, {%jaze_catalog-21.Catalog*, i64}* %34
	%277 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %34, i64 0, i32 0
	store %jaze_catalog-21.Catalog* %276, %jaze_catalog-21.Catalog** %277
	%278 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %34, i64 0, i32 1
	store i64 0, i64* %278
	%279 = load {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %34, align 8
	; defer
	; free
	%280 = load i8*, i8** %4, align 8
	%281 = bitcast i8* %280 to %..rawptr
	call void @.free_ptr(%..rawptr %281)
	ret {%jaze_catalog-21.Catalog*, i64} %279

if.else-26:
	; free
	%282 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %6, align 8
	%283 = bitcast %jaze_catalog-21.Catalog* %282 to %..rawptr
	call void @.free_ptr(%..rawptr %283)
	; ReturnStmt
	store {%jaze_catalog-21.Catalog*, i64} zeroinitializer, {%jaze_catalog-21.Catalog*, i64}* %35
	%284 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %35, i64 0, i32 0
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %284
	%285 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %35, i64 0, i32 1
	store i64 2, i64* %285
	%286 = load {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %35, align 8
	; defer
	; free
	%287 = load i8*, i8** %4, align 8
	%288 = bitcast i8* %287 to %..rawptr
	call void @.free_ptr(%..rawptr %288)
	ret {%jaze_catalog-21.Catalog*, i64} %286

if.done-27:
	br label %if.done-29

if.else-28:
	; ReturnStmt
	store {%jaze_catalog-21.Catalog*, i64} zeroinitializer, {%jaze_catalog-21.Catalog*, i64}* %36
	%289 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %36, i64 0, i32 0
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %289
	%290 = getelementptr inbounds {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %36, i64 0, i32 1
	store i64 1, i64* %290
	%291 = load {%jaze_catalog-21.Catalog*, i64}, {%jaze_catalog-21.Catalog*, i64}* %36, align 8
	; defer
	; free
	%292 = load i8*, i8** %4, align 8
	%293 = bitcast i8* %292 to %..rawptr
	call void @.free_ptr(%..rawptr %293)
	ret {%jaze_catalog-21.Catalog*, i64} %291

if.done-29:
	unreachable
}

define void @.jaze_catalog-21.CreateNew-2686136301984.AddTexture-0(%jaze_catalog-21.Catalog* %res, %jaze_asset-22.FileInfo_t %file) {
decls-0:
	%0 = alloca %jaze_catalog-21.Catalog*, align 8
	%1 = alloca %jaze_asset-22.FileInfo_t, align 8
	%2 = alloca %jaze_asset-22.Asset*, align 8
	%3 = alloca %jaze_asset-22.Asset.Texture, align 8
	%4 = alloca i8*, align 8
	%5 = alloca %jaze_asset-22.Asset, align 8
	%6 = alloca %__Map_Header, align 8
	%7 = alloca %__Map_Key, align 8
	%8 = alloca %jaze_asset-22.Asset*, align 8
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %0
		store %jaze_catalog-21.Catalog* %res, %jaze_catalog-21.Catalog** %0
	store %jaze_asset-22.FileInfo_t zeroinitializer, %jaze_asset-22.FileInfo_t* %1
		store %jaze_asset-22.FileInfo_t %file, %jaze_asset-22.FileInfo_t* %1
	; asset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %2
		; new
	%9 = call %..rawptr @.alloc_align(i64 424, i64 8)
	%10 = bitcast %..rawptr %9 to %jaze_asset-22.Asset*
	store %jaze_asset-22.Asset* %10, %jaze_asset-22.Asset** %2
	; texture
	store %jaze_asset-22.Asset.Texture zeroinitializer, %jaze_asset-22.Asset.Texture* %3
		store %jaze_asset-22.Asset.Texture zeroinitializer, %jaze_asset-22.Asset.Texture* %3
	; AssignStmt
	; SelectorExpr
	%11 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %3, i64 0, i32 0
	%12 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %1, align 8
	store %jaze_asset-22.FileInfo_t %12, %jaze_asset-22.FileInfo_t* %11
	; AssignStmt
	; SelectorExpr
	%13 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %3, i64 0, i32 1
	store i1 false, i1* %13
	; c_str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	; SelectorExpr
	%14 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %1, i64 0, i32 2
	%15 = load %..string, %..string* %14, align 8
	%16 = call i8* @.strings-9.new_c_string(%..string %15)
	store i8* %16, i8** %4
	; DeferStmt
	; SelectorExpr
	%17 = load i8*, i8** %4, align 8
	; SelectorExpr
	%18 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %3, i64 0, i32 3
	%19 = getelementptr inbounds i32, i32* %18, i64 0
	; SelectorExpr
	%20 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %3, i64 0, i32 4
	%21 = getelementptr inbounds i32, i32* %20, i64 0
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %3, i64 0, i32 5
	%23 = getelementptr inbounds i32, i32* %22, i64 0
	%24 = call ccc i32 @stbi_info(i8* %17, i32* %19, i32* %21, i32* %23)
	; AssignStmt
	%25 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	%26 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %25, i64 0
	%27 = load %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %3, align 8
	; union - child to parent
	store %jaze_asset-22.Asset zeroinitializer, %jaze_asset-22.Asset* %5
	%28 = bitcast %jaze_asset-22.Asset* %5 to %jaze_asset-22.Asset.Texture*
	store %jaze_asset-22.Asset.Texture %27, %jaze_asset-22.Asset.Texture* %28
	%29 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %5, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %29
	%30 = load %jaze_asset-22.Asset, %jaze_asset-22.Asset* %5, align 8
	store %jaze_asset-22.Asset %30, %jaze_asset-22.Asset* %26
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%31 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%32 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %31, i64 0
	%33 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %32, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%34 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	%35 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %34, i64 0
	%36 = bitcast %jaze_asset-22.Asset* %35 to i8*
	%37 = getelementptr inbounds i8, i8* %36, i64 0
	%38 = bitcast i8* %37 to %jaze_asset-22.FileInfo_t*
	%39 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %38, i64 0, i32 0
	%40 = load %..string, %..string* %39, align 8
	%41 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %6
	%42 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 0
	%43 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %33 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %43, %raw-6.Dynamic_Map** %42
	%44 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 1
	store i1 true, i1* %44
	%45 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 2
	store i64 40, i64* %45
	%46 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 3
	store i64 8, i64* %46
	%47 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 4
	store i64 32, i64* %47
	%48 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 5
	store i64 8, i64* %48
	%49 = load %__Map_Header, %__Map_Header* %6, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %7
	%50 = call i64 @.__default_hash_string(%..string %40)
	%51 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 0
	store i64 %50, i64* %51
	%52 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 1
	store %..string %40, %..string* %52
	%53 = load %__Map_Key, %__Map_Key* %7, align 8
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %8
	store %jaze_asset-22.Asset* %41, %jaze_asset-22.Asset** %8
	%54 = bitcast %jaze_asset-22.Asset** %8 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %49, %__Map_Key %53, %..rawptr %54)
	; defer
	; free
	%55 = load i8*, i8** %4, align 8
	%56 = bitcast i8* %55 to %..rawptr
	call void @.free_ptr(%..rawptr %56)
	ret void
}

define void @.jaze_catalog-21.CreateNew-2686136301984.AddShader-1(%jaze_catalog-21.Catalog* %res, %jaze_asset-22.FileInfo_t %file) {
decls-0:
	%0 = alloca %jaze_catalog-21.Catalog*, align 8
	%1 = alloca %jaze_asset-22.FileInfo_t, align 8
	%2 = alloca %jaze_asset-22.Asset*, align 8
	%3 = alloca %jaze_asset-22.Asset.Shader, align 8
	%4 = alloca %jaze_asset-22.Asset, align 8
	%5 = alloca %__Map_Header, align 8
	%6 = alloca %__Map_Key, align 8
	%7 = alloca %jaze_asset-22.Asset*, align 8
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %0
		store %jaze_catalog-21.Catalog* %res, %jaze_catalog-21.Catalog** %0
	store %jaze_asset-22.FileInfo_t zeroinitializer, %jaze_asset-22.FileInfo_t* %1
		store %jaze_asset-22.FileInfo_t %file, %jaze_asset-22.FileInfo_t* %1
	; asset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %2
		; new
	%8 = call %..rawptr @.alloc_align(i64 424, i64 8)
	%9 = bitcast %..rawptr %8 to %jaze_asset-22.Asset*
	store %jaze_asset-22.Asset* %9, %jaze_asset-22.Asset** %2
	; shader
	store %jaze_asset-22.Asset.Shader zeroinitializer, %jaze_asset-22.Asset.Shader* %3
		store %jaze_asset-22.Asset.Shader zeroinitializer, %jaze_asset-22.Asset.Shader* %3
	; AssignStmt
	; SelectorExpr
	%10 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 0
	%11 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %1, align 8
	store %jaze_asset-22.FileInfo_t %11, %jaze_asset-22.FileInfo_t* %10
	; AssignStmt
	; SelectorExpr
	%12 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 1
	store i1 false, i1* %12
	; MatchStmt
	; SelectorExpr
	; SelectorExpr
	%13 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 0
	%14 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %13, i64 0, i32 1
	%15 = load %..string, %..string* %14, align 8
	%16 = call i1 @.__string_eq(%..string %15, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2a3, i64 0, i32 0), i64 3})
	br i1 %16, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%17 = call i1 @.__string_eq(%..string %15, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a4, i64 0, i32 0), i64 6})
	br i1 %17, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; AssignStmt
	; SelectorExpr
	%18 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 3
	store i32 35633, i32* %18
	br label %match.done-13

match.case.next-3:
	%19 = call i1 @.__string_eq(%..string %15, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a5, i64 0, i32 0), i64 5})
	br i1 %19, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	; AssignStmt
	; SelectorExpr
	%20 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 3
	store i32 35633, i32* %20
	br label %match.done-13

match.case.next-5:
	%21 = call i1 @.__string_eq(%..string %15, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2a6, i64 0, i32 0), i64 3})
	br i1 %21, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	; AssignStmt
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 3
	store i32 35633, i32* %22
	br label %match.done-13

match.case.next-7:
	%23 = call i1 @.__string_eq(%..string %15, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a7, i64 0, i32 0), i64 5})
	br i1 %23, label %match.fall.body-10, label %match.case.next-9

match.fall.body-8:
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 3
	store i32 35632, i32* %24
	br label %match.done-13

match.case.next-9:
	%25 = call i1 @.__string_eq(%..string %15, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a8, i64 0, i32 0), i64 6})
	br i1 %25, label %match.fall.body-12, label %match.case.next-11

match.fall.body-10:
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 3
	store i32 35632, i32* %26
	br label %match.done-13

match.case.next-11:
	br label %match.done-13

match.fall.body-12:
	; AssignStmt
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0, i32 3
	store i32 35632, i32* %27
	br label %match.done-13

match.done-13:
	; AssignStmt
	%28 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	%29 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %28, i64 0
	%30 = load %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, align 8
	; union - child to parent
	store %jaze_asset-22.Asset zeroinitializer, %jaze_asset-22.Asset* %4
	%31 = bitcast %jaze_asset-22.Asset* %4 to %jaze_asset-22.Asset.Shader*
	store %jaze_asset-22.Asset.Shader %30, %jaze_asset-22.Asset.Shader* %31
	%32 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %4, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %32
	%33 = load %jaze_asset-22.Asset, %jaze_asset-22.Asset* %4, align 8
	store %jaze_asset-22.Asset %33, %jaze_asset-22.Asset* %29
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%34 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%35 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %34, i64 0
	%36 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %35, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%37 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	%38 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %37, i64 0
	%39 = bitcast %jaze_asset-22.Asset* %38 to i8*
	%40 = getelementptr inbounds i8, i8* %39, i64 0
	%41 = bitcast i8* %40 to %jaze_asset-22.FileInfo_t*
	%42 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %41, i64 0, i32 0
	%43 = load %..string, %..string* %42, align 8
	%44 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	%45 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 0
	%46 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %36 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %46, %raw-6.Dynamic_Map** %45
	%47 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 1
	store i1 true, i1* %47
	%48 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 2
	store i64 40, i64* %48
	%49 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 3
	store i64 8, i64* %49
	%50 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 4
	store i64 32, i64* %50
	%51 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 5
	store i64 8, i64* %51
	%52 = load %__Map_Header, %__Map_Header* %5, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	%53 = call i64 @.__default_hash_string(%..string %43)
	%54 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 0
	store i64 %53, i64* %54
	%55 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 1
	store %..string %43, %..string* %55
	%56 = load %__Map_Key, %__Map_Key* %6, align 8
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %7
	store %jaze_asset-22.Asset* %44, %jaze_asset-22.Asset** %7
	%57 = bitcast %jaze_asset-22.Asset** %7 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %52, %__Map_Key %56, %..rawptr %57)
	ret void
}

define void @.jaze_catalog-21.CreateNew-2686136301984.AddSound-2(%jaze_catalog-21.Catalog* %res, %jaze_asset-22.FileInfo_t %file) {
decls-0:
	%0 = alloca %jaze_catalog-21.Catalog*, align 8
	%1 = alloca %jaze_asset-22.FileInfo_t, align 8
	%2 = alloca %jaze_asset-22.Asset*, align 8
	%3 = alloca %jaze_asset-22.Asset.Sound, align 8
	%4 = alloca %jaze_asset-22.Asset, align 8
	%5 = alloca %__Map_Header, align 8
	%6 = alloca %__Map_Key, align 8
	%7 = alloca %jaze_asset-22.Asset*, align 8
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %0
		store %jaze_catalog-21.Catalog* %res, %jaze_catalog-21.Catalog** %0
	store %jaze_asset-22.FileInfo_t zeroinitializer, %jaze_asset-22.FileInfo_t* %1
		store %jaze_asset-22.FileInfo_t %file, %jaze_asset-22.FileInfo_t* %1
	; asset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %2
		; new
	%8 = call %..rawptr @.alloc_align(i64 424, i64 8)
	%9 = bitcast %..rawptr %8 to %jaze_asset-22.Asset*
	store %jaze_asset-22.Asset* %9, %jaze_asset-22.Asset** %2
	; sound
	store %jaze_asset-22.Asset.Sound zeroinitializer, %jaze_asset-22.Asset.Sound* %3
		store %jaze_asset-22.Asset.Sound zeroinitializer, %jaze_asset-22.Asset.Sound* %3
	; AssignStmt
	; SelectorExpr
	%10 = getelementptr inbounds %jaze_asset-22.Asset.Sound, %jaze_asset-22.Asset.Sound* %3, i64 0, i32 0
	%11 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %1, align 8
	store %jaze_asset-22.FileInfo_t %11, %jaze_asset-22.FileInfo_t* %10
	; AssignStmt
	; SelectorExpr
	%12 = getelementptr inbounds %jaze_asset-22.Asset.Sound, %jaze_asset-22.Asset.Sound* %3, i64 0, i32 1
	store i1 false, i1* %12
	; AssignStmt
	%13 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	%14 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %13, i64 0
	%15 = load %jaze_asset-22.Asset.Sound, %jaze_asset-22.Asset.Sound* %3, align 8
	; union - child to parent
	store %jaze_asset-22.Asset zeroinitializer, %jaze_asset-22.Asset* %4
	%16 = bitcast %jaze_asset-22.Asset* %4 to %jaze_asset-22.Asset.Sound*
	store %jaze_asset-22.Asset.Sound %15, %jaze_asset-22.Asset.Sound* %16
	%17 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %4, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %17
	%18 = load %jaze_asset-22.Asset, %jaze_asset-22.Asset* %4, align 8
	store %jaze_asset-22.Asset %18, %jaze_asset-22.Asset* %14
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%19 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%20 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %19, i64 0
	%21 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %20, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%22 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	%23 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %22, i64 0
	%24 = bitcast %jaze_asset-22.Asset* %23 to i8*
	%25 = getelementptr inbounds i8, i8* %24, i64 0
	%26 = bitcast i8* %25 to %jaze_asset-22.FileInfo_t*
	%27 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %26, i64 0, i32 0
	%28 = load %..string, %..string* %27, align 8
	%29 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %2, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	%30 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 0
	%31 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %21 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %31, %raw-6.Dynamic_Map** %30
	%32 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 1
	store i1 true, i1* %32
	%33 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 2
	store i64 40, i64* %33
	%34 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 3
	store i64 8, i64* %34
	%35 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 4
	store i64 32, i64* %35
	%36 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 5
	store i64 8, i64* %36
	%37 = load %__Map_Header, %__Map_Header* %5, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	%38 = call i64 @.__default_hash_string(%..string %28)
	%39 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 0
	store i64 %38, i64* %39
	%40 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 1
	store %..string %28, %..string* %40
	%41 = load %__Map_Key, %__Map_Key* %6, align 8
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %7
	store %jaze_asset-22.Asset* %29, %jaze_asset-22.Asset** %7
	%42 = bitcast %jaze_asset-22.Asset** %7 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %37, %__Map_Key %41, %..rawptr %42)
	ret void
}

define void @.jaze_catalog-21.CreateNew-2686136301984.ExtractAcceptedExtensions-3(%jaze_catalog-21.Catalog* %res, %..string %acceptedExtensions) {
decls-0:
	%0 = alloca %jaze_catalog-21.Catalog*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca {%..string*, i64, i64}, align 8
	%7 = alloca [1 x %..string], align 8
	%8 = alloca %..string, align 8
	%9 = alloca {%..string*, i64, i64}, align 8
	%10 = alloca [1 x %..string], align 8
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %0
		store %jaze_catalog-21.Catalog* %res, %jaze_catalog-21.Catalog** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %acceptedExtensions, %..string* %1
	; IfStmt
	%11 = load %..string, %..string* %1, align 8
	%12 = call i1 @.__string_ne(%..string %11, %..string zeroinitializer)
	br i1 %12, label %if.then-1, label %if.done-9

if.then-1:
	; strlen
	store i64 zeroinitializer, i64* %2
		%13 = load %..string, %..string* %1, align 8
	%14 = extractvalue %..string %13, 1
	store i64 %14, i64* %2
	; last
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	br label %for.loop-2

for.loop-2:
	%15 = load i64, i64* %4, align 8
	%16 = load i64, i64* %2, align 8
	%17 = icmp slt i64 %15, %16
	br i1 %17, label %for.body-3, label %for.done-8

for.body-3:
	; IfStmt
	; IndexExpr
	%18 = load %..string, %..string* %1, align 8
	%19 = extractvalue %..string %18, 0
	%20 = extractvalue %..string %18, 1
	%21 = load i64, i64* %4, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2a9, i64 0, i32 0), i64 39}, i64 94, i64 39, i64 %21, i64 %20)
	%22 = getelementptr inbounds i8, i8* %19, i64 %21
	%23 = load i8, i8* %22, align 1
	%24 = icmp eq i8 %23, 44
	br i1 %24, label %if.then-4, label %if.done-5

if.then-4:
	; append
	; SelectorExpr
	%25 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%26 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %25, i64 0
	%27 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %26, i64 0, i32 1
	%28 = bitcast {%..string*, i64, i64,%Allocator}* %27 to %..rawptr
	; SelectorExpr
	%29 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%30 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %29, i64 0
	%31 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %30, i64 0, i32 1
	%32 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %31, align 8
	; SliceExpr
	%33 = load i64, i64* %3, align 8
	%34 = load i64, i64* %4, align 8
	%35 = load %..string, %..string* %1, align 8
	%36 = extractvalue %..string %35, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2aa, i64 0, i32 0), i64 39}, i64 95, i64 70, i64 %33, i64 %34)
	%37 = extractvalue %..string %35, 0
	%38 = getelementptr inbounds i8, i8* %37, i64 %33
	%39 = sub i64 %34, %33
	store %..string zeroinitializer, %..string* %5
	%40 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	store i8* %38, i8** %40
	%41 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i64 %39, i64* %41
	%42 = load %..string, %..string* %5, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %6
	store [1 x %..string] zeroinitializer, [1 x %..string]* %7
	%43 = getelementptr inbounds [1 x %..string], [1 x %..string]* %7, i64 0, i32 0
	store %..string %42, %..string* %43
	%44 = getelementptr inbounds [1 x %..string], [1 x %..string]* %7, i64 0, i32 0
	%45 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6, i64 0, i32 0
	store %..string* %44, %..string** %45
	%46 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %46
	%47 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %47
	%48 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %6, align 8
	%49 = extractvalue {%..string*, i64, i64} %48, 0
	%50 = extractvalue {%..string*, i64, i64} %48, 1
	%51 = bitcast %..string* %49 to %..rawptr
	%52 = call i64 @.__dynamic_array_append(%..rawptr %28, i64 16, i64 8, %..rawptr %51, i64 %50)
	; AssignStmt
	%53 = load i64, i64* %4, align 8
	%54 = add i64 %53, 1
	store i64 %54, i64* %3
	br label %if.done-5

if.done-5:
	; IfStmt
	%55 = load i64, i64* %4, align 8
	%56 = load i64, i64* %2, align 8
	%57 = sub i64 %56, 1
	%58 = icmp eq i64 %55, %57
	br i1 %58, label %if.then-6, label %if.done-7

if.then-6:
	; append
	; SelectorExpr
	%59 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%60 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %59, i64 0
	%61 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %60, i64 0, i32 1
	%62 = bitcast {%..string*, i64, i64,%Allocator}* %61 to %..rawptr
	; SelectorExpr
	%63 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%64 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %63, i64 0
	%65 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %64, i64 0, i32 1
	%66 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %65, align 8
	; SliceExpr
	%67 = load i64, i64* %3, align 8
	%68 = load i64, i64* %4, align 8
	%69 = add i64 %68, 1
	%70 = load %..string, %..string* %1, align 8
	%71 = extractvalue %..string %70, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2ab, i64 0, i32 0), i64 39}, i64 100, i64 70, i64 %67, i64 %69)
	%72 = extractvalue %..string %70, 0
	%73 = getelementptr inbounds i8, i8* %72, i64 %67
	%74 = sub i64 %69, %67
	store %..string zeroinitializer, %..string* %8
	%75 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	store i8* %73, i8** %75
	%76 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 1
	store i64 %74, i64* %76
	%77 = load %..string, %..string* %8, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %9
	store [1 x %..string] zeroinitializer, [1 x %..string]* %10
	%78 = getelementptr inbounds [1 x %..string], [1 x %..string]* %10, i64 0, i32 0
	store %..string %77, %..string* %78
	%79 = getelementptr inbounds [1 x %..string], [1 x %..string]* %10, i64 0, i32 0
	%80 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %9, i64 0, i32 0
	store %..string* %79, %..string** %80
	%81 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %9, i64 0, i32 1
	store i64 1, i64* %81
	%82 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %9, i64 0, i32 2
	store i64 1, i64* %82
	%83 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %9, align 8
	%84 = extractvalue {%..string*, i64, i64} %83, 0
	%85 = extractvalue {%..string*, i64, i64} %83, 1
	%86 = bitcast %..string* %84 to %..rawptr
	%87 = call i64 @.__dynamic_array_append(%..rawptr %62, i64 16, i64 8, %..rawptr %86, i64 %85)
	br label %if.done-7

if.done-7:
	%88 = load i64, i64* %4, align 8
	%89 = add i64 %88, 1
	store i64 %89, i64* %4
	br label %for.loop-2

for.done-8:
	br label %if.done-9

if.done-9:
	ret void
}

define {%jaze_asset-22.Asset*, i64} @.jaze_catalog-21.Find(%jaze_catalog-21.Catalog* %catalog, %..string %assetName) {
decls-0:
	%0 = alloca %jaze_catalog-21.Catalog*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i1, align 1
	%3 = alloca {%jaze_asset-22.Asset*, i1}, align 8
	%4 = alloca %__Map_Header, align 8
	%5 = alloca %__Map_Key, align 8
	%6 = alloca %jaze_asset-22.Asset*, align 8
	%7 = alloca {%jaze_asset-22.Asset*, i1}, align 8
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca %jaze_asset-22.Asset.Texture*, align 8
	%11 = alloca %jaze_asset-22.Asset.Shader*, align 8
	%12 = alloca {%jaze_asset-22.Asset*, i64}, align 8
	%13 = alloca {%jaze_asset-22.Asset*, i64}, align 8
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %0
		store %jaze_catalog-21.Catalog* %catalog, %jaze_catalog-21.Catalog** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %assetName, %..string* %1
	; ok
	store i1 zeroinitializer, i1* %2
		; IndexExpr
	; SelectorExpr
	%14 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%15 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %14, i64 0
	%16 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %15, i64 0, i32 0
	%17 = load %..string, %..string* %1, align 8
	store {%jaze_asset-22.Asset*, i1} zeroinitializer, {%jaze_asset-22.Asset*, i1}* %3
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 0
	%19 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %16 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %19, %raw-6.Dynamic_Map** %18
	%20 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 1
	store i1 true, i1* %20
	%21 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 2
	store i64 40, i64* %21
	%22 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 3
	store i64 8, i64* %22
	%23 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 4
	store i64 32, i64* %23
	%24 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 5
	store i64 8, i64* %24
	%25 = load %__Map_Header, %__Map_Header* %4, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %5
	%26 = call i64 @.__default_hash_string(%..string %17)
	%27 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 0
	store i64 %26, i64* %27
	%28 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 1
	store %..string %17, %..string* %28
	%29 = load %__Map_Key, %__Map_Key* %5, align 8
	%30 = call %..rawptr @.__dynamic_map_get(%__Map_Header %25, %__Map_Key %29)
	%31 = icmp ne %..rawptr %30, null
	%32 = getelementptr inbounds {%jaze_asset-22.Asset*, i1}, {%jaze_asset-22.Asset*, i1}* %3, i64 0, i32 1
	store i1 %31, i1* %32
	br i1 %31, label %map.get.then-1, label %map.get.done-2

map.get.then-1:
	%33 = getelementptr inbounds {%jaze_asset-22.Asset*, i1}, {%jaze_asset-22.Asset*, i1}* %3, i64 0, i32 0
	%34 = bitcast %..rawptr %30 to %jaze_asset-22.Asset**
	%35 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %34, align 8
	store %jaze_asset-22.Asset* %35, %jaze_asset-22.Asset** %33
	br label %map.get.done-2

map.get.done-2:
	%36 = load {%jaze_asset-22.Asset*, i1}, {%jaze_asset-22.Asset*, i1}* %3, align 8
	%37 = extractvalue {%jaze_asset-22.Asset*, i1} %36, 0
	%38 = extractvalue {%jaze_asset-22.Asset*, i1} %36, 1
	store i1 %38, i1* %2
	; IfStmt
	%39 = load i1, i1* %2, align 1
	br i1 %39, label %if.then-3, label %if.done-13

if.then-3:
	; asset
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %6
		; IndexExpr
	; SelectorExpr
	%40 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	%41 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %40, i64 0
	%42 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %41, i64 0, i32 0
	%43 = load %..string, %..string* %1, align 8
	store {%jaze_asset-22.Asset*, i1} zeroinitializer, {%jaze_asset-22.Asset*, i1}* %7
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%44 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%45 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %jaze_asset-22.Asset*}*, i64, i64,%Allocator}}* %42 to %raw-6.Dynamic_Map*
	store %raw-6.Dynamic_Map* %45, %raw-6.Dynamic_Map** %44
	%46 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %46
	%47 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %47
	%48 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %48
	%49 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %49
	%50 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 5
	store i64 8, i64* %50
	%51 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%52 = call i64 @.__default_hash_string(%..string %43)
	%53 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 %52, i64* %53
	%54 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string %43, %..string* %54
	%55 = load %__Map_Key, %__Map_Key* %9, align 8
	%56 = call %..rawptr @.__dynamic_map_get(%__Map_Header %51, %__Map_Key %55)
	%57 = icmp ne %..rawptr %56, null
	%58 = getelementptr inbounds {%jaze_asset-22.Asset*, i1}, {%jaze_asset-22.Asset*, i1}* %7, i64 0, i32 1
	store i1 %57, i1* %58
	br i1 %57, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%59 = getelementptr inbounds {%jaze_asset-22.Asset*, i1}, {%jaze_asset-22.Asset*, i1}* %7, i64 0, i32 0
	%60 = bitcast %..rawptr %56 to %jaze_asset-22.Asset**
	%61 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %60, align 8
	store %jaze_asset-22.Asset* %61, %jaze_asset-22.Asset** %59
	br label %map.get.done-5

map.get.done-5:
	%62 = getelementptr inbounds {%jaze_asset-22.Asset*, i1}, {%jaze_asset-22.Asset*, i1}* %7, i64 0, i32 0
	%63 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %62, align 8
	store %jaze_asset-22.Asset* %63, %jaze_asset-22.Asset** %6
	; IfStmt
	; SelectorExpr
	%64 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %6, align 8
	%65 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %64, i64 0
	%66 = bitcast %jaze_asset-22.Asset* %65 to i8*
	%67 = getelementptr inbounds i8, i8* %66, i64 56
	%68 = bitcast i8* %67 to i1*
	%69 = load i1, i1* %68, align 1
	br i1 %69, label %if.done-12, label %if.then-6

if.then-6:
	; TypeMatchStmt
	%70 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %6, align 8
	; get union's tag
	%71 = getelementptr inbounds %jaze_asset-22.Asset, %jaze_asset-22.Asset* %70, i64 0, i32 2 ; UnionTagPtr
	%72 = load i64, i64* %71, align 8
	%73 = bitcast %jaze_asset-22.Asset* %70 to %..rawptr
	%74 = icmp eq i64 %72, 1
	br i1 %74, label %typematch.body-8, label %typematch.next-7

typematch.next-7:
	%75 = icmp eq i64 %72, 2
	br i1 %75, label %typematch.body-10, label %typematch.next-9

typematch.body-8:
	%76 = bitcast %..rawptr %73 to %jaze_asset-22.Asset.Texture*
	store %jaze_asset-22.Asset.Texture* zeroinitializer, %jaze_asset-22.Asset.Texture** %10
	store %jaze_asset-22.Asset.Texture* %76, %jaze_asset-22.Asset.Texture** %10
	%77 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %10, align 8
	call void @.jaze_catalog-21.Find.LoadTexture-0(%jaze_asset-22.Asset.Texture* %77)
	br label %typematch.done-11

typematch.next-9:
	br label %typematch.done-11

typematch.body-10:
	%78 = bitcast %..rawptr %73 to %jaze_asset-22.Asset.Shader*
	store %jaze_asset-22.Asset.Shader* zeroinitializer, %jaze_asset-22.Asset.Shader** %11
	store %jaze_asset-22.Asset.Shader* %78, %jaze_asset-22.Asset.Shader** %11
	%79 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %11, align 8
	%80 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %0, align 8
	call void @.jaze_catalog-21.Find.LoadShader-1(%jaze_asset-22.Asset.Shader* %79, %jaze_catalog-21.Catalog* %80)
	br label %typematch.done-11

typematch.done-11:
	br label %if.done-12

if.done-12:
	; ReturnStmt
	%81 = load %jaze_asset-22.Asset*, %jaze_asset-22.Asset** %6, align 8
	store {%jaze_asset-22.Asset*, i64} zeroinitializer, {%jaze_asset-22.Asset*, i64}* %12
	%82 = getelementptr inbounds {%jaze_asset-22.Asset*, i64}, {%jaze_asset-22.Asset*, i64}* %12, i64 0, i32 0
	store %jaze_asset-22.Asset* %81, %jaze_asset-22.Asset** %82
	%83 = getelementptr inbounds {%jaze_asset-22.Asset*, i64}, {%jaze_asset-22.Asset*, i64}* %12, i64 0, i32 1
	store i64 0, i64* %83
	%84 = load {%jaze_asset-22.Asset*, i64}, {%jaze_asset-22.Asset*, i64}* %12, align 8
	ret {%jaze_asset-22.Asset*, i64} %84

if.done-13:
	; ReturnStmt
	store {%jaze_asset-22.Asset*, i64} zeroinitializer, {%jaze_asset-22.Asset*, i64}* %13
	%85 = getelementptr inbounds {%jaze_asset-22.Asset*, i64}, {%jaze_asset-22.Asset*, i64}* %13, i64 0, i32 0
	store %jaze_asset-22.Asset* zeroinitializer, %jaze_asset-22.Asset** %85
	%86 = getelementptr inbounds {%jaze_asset-22.Asset*, i64}, {%jaze_asset-22.Asset*, i64}* %13, i64 0, i32 1
	store i64 2, i64* %86
	%87 = load {%jaze_asset-22.Asset*, i64}, {%jaze_asset-22.Asset*, i64}* %13, align 8
	ret {%jaze_asset-22.Asset*, i64} %87
}

define void @.jaze_catalog-21.Find.LoadTexture-0(%jaze_asset-22.Asset.Texture* %e) {
decls-0:
	%0 = alloca %jaze_asset-22.Asset.Texture*, align 8
	%1 = alloca i8*, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca i8*, align 8
	store %jaze_asset-22.Asset.Texture* zeroinitializer, %jaze_asset-22.Asset.Texture** %0
		store %jaze_asset-22.Asset.Texture* %e, %jaze_asset-22.Asset.Texture** %0
	; IfStmt
	; SelectorExpr
	%6 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%7 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %6, i64 0
	%8 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %7, i64 0, i32 2
	%9 = load i32, i32* %8, align 4
	%10 = icmp eq i32 %9, 0
	br i1 %10, label %if.then-1, label %if.done-7

if.then-1:
	; c_str
	store i8* zeroinitializer, i8** %1
		; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%11 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%12 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %11, i64 0
	%13 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %12, i64 0, i32 0
	%14 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %13, i64 0, i32 2
	%15 = load %..string, %..string* %14, align 8
	%16 = call i8* @.strings-9.new_c_string(%..string %15)
	store i8* %16, i8** %1
	; DeferStmt
	; w
	store i32 zeroinitializer, i32* %2
		; h
	store i32 zeroinitializer, i32* %3
		; c
	store i32 zeroinitializer, i32* %4
		; data
	store i8* zeroinitializer, i8** %5
		; SelectorExpr
	%17 = load i8*, i8** %1, align 8
	%18 = getelementptr inbounds i32, i32* %2, i64 0
	%19 = getelementptr inbounds i32, i32* %3, i64 0
	%20 = getelementptr inbounds i32, i32* %4, i64 0
	%21 = call ccc i8* @stbi_load(i8* %17, i32* %18, i32* %19, i32* %20, i32 0)
	store i8* %21, i8** %5
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%22 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%23 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %22, i64 0
	%24 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %23, i64 0, i32 3
	%25 = load i32, i32* %2, align 4
	store i32 %25, i32* %24
	; AssignStmt
	; SelectorExpr
	%26 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%27 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %26, i64 0
	%28 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %27, i64 0, i32 4
	%29 = load i32, i32* %3, align 4
	store i32 %29, i32* %28
	; AssignStmt
	; SelectorExpr
	%30 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%31 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %30, i64 0
	%32 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %31, i64 0, i32 5
	%33 = load i32, i32* %4, align 4
	store i32 %33, i32* %32
	; AssignStmt
	; SelectorExpr
	%34 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%35 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %34, i64 0
	%36 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %35, i64 0, i32 2
	; SelectorExpr
	%37 = call i32 @.jaze_gl-14.GenTexture()
	store i32 %37, i32* %36
	; SelectorExpr
	; SelectorExpr
	%38 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%39 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %38, i64 0
	%40 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %39, i64 0, i32 2
	%41 = load i32, i32* %40, align 4
	call void @.jaze_gl-14.BindTexture(i32 3553, i32 %41)
	; SelectorExpr
	call void @.jaze_gl-14.TexParameteri(i32 3553, i32 10241, i32 9729)
	; SelectorExpr
	call void @.jaze_gl-14.TexParameteri(i32 3553, i32 10240, i32 9729)
	; MatchStmt
	; SelectorExpr
	%42 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%43 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %42, i64 0
	%44 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %43, i64 0, i32 5
	%45 = load i32, i32* %44, align 4
	%46 = icmp eq i32 %45, 3
	br i1 %46, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%47 = icmp eq i32 %45, 4
	br i1 %47, label %match.fall.body-5, label %match.case.next-4

match.case.body-3:
	; SelectorExpr
	; SelectorExpr
	%48 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%49 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %48, i64 0
	%50 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %49, i64 0, i32 3
	%51 = load i32, i32* %50, align 4
	; SelectorExpr
	%52 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%53 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %52, i64 0
	%54 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %53, i64 0, i32 4
	%55 = load i32, i32* %54, align 4
	%56 = load i8*, i8** %5, align 8
	%57 = bitcast i8* %56 to %..rawptr
	call void @.jaze_gl-14.TexImage2D(i32 3553, i32 0, i32 6408, i32 %51, i32 %55, i32 6407, i32 5121, %..rawptr %57)
	br label %match.done-6

match.case.next-4:
	br label %match.done-6

match.fall.body-5:
	; SelectorExpr
	; SelectorExpr
	%58 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%59 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %58, i64 0
	%60 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %59, i64 0, i32 3
	%61 = load i32, i32* %60, align 4
	; SelectorExpr
	%62 = load %jaze_asset-22.Asset.Texture*, %jaze_asset-22.Asset.Texture** %0, align 8
	%63 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %62, i64 0
	%64 = getelementptr inbounds %jaze_asset-22.Asset.Texture, %jaze_asset-22.Asset.Texture* %63, i64 0, i32 4
	%65 = load i32, i32* %64, align 4
	%66 = load i8*, i8** %5, align 8
	%67 = bitcast i8* %66 to %..rawptr
	call void @.jaze_gl-14.TexImage2D(i32 3553, i32 0, i32 6408, i32 %61, i32 %65, i32 6408, i32 5121, %..rawptr %67)
	br label %match.done-6

match.done-6:
	; defer
	; SelectorExpr
	%68 = load i8*, i8** %5, align 8
	%69 = bitcast i8* %68 to %..rawptr
	call ccc void @stbi_image_free(%..rawptr %69)
	; defer
	; free
	%70 = load i8*, i8** %1, align 8
	%71 = bitcast i8* %70 to %..rawptr
	call void @.free_ptr(%..rawptr %71)
	br label %if.done-7

if.done-7:
	ret void
}

define void @.jaze_catalog-21.Find.LoadShader-1(%jaze_asset-22.Asset.Shader* %e, %jaze_catalog-21.Catalog* %cat) {
decls-0:
	%0 = alloca %jaze_asset-22.Asset.Shader*, align 8
	%1 = alloca %jaze_catalog-21.Catalog*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %jaze_asset-22.Asset.Shader* zeroinitializer, %jaze_asset-22.Asset.Shader** %0
		store %jaze_asset-22.Asset.Shader* %e, %jaze_asset-22.Asset.Shader** %0
	store %jaze_catalog-21.Catalog* zeroinitializer, %jaze_catalog-21.Catalog** %1
		store %jaze_catalog-21.Catalog* %cat, %jaze_catalog-21.Catalog** %1
	; IfStmt
	; SelectorExpr
	%3 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%4 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %3, i64 0
	%5 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %4, i64 0, i32 1
	%6 = load i1, i1* %5, align 1
	br i1 %6, label %if.done-2, label %if.then-1

if.then-1:
	; AssignStmt
	; SelectorExpr
	%7 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%8 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %7, i64 0
	%9 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %8, i64 0, i32 1
	store i1 true, i1* %9
	; data
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
		; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%10 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%11 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %10, i64 0
	%12 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %11, i64 0, i32 0
	%13 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %12, i64 0, i32 2
	%14 = load %..string, %..string* %13, align 8
	%15 = call {{i8*, i64, i64}, i1} @.os_windows-23.read_entire_file(%..string %14)
	%16 = extractvalue {{i8*, i64, i64}, i1} %15, 0
	%17 = extractvalue {{i8*, i64, i64}, i1} %15, 1
	store {i8*, i64, i64} %16, {i8*, i64, i64}* %2
	; AssignStmt
	; SelectorExpr
	%18 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%19 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %18, i64 0
	%20 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %19, i64 0, i32 5
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	store {i8*, i64, i64} %21, {i8*, i64, i64}* %20
	; AssignStmt
	; SelectorExpr
	%22 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%23 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %22, i64 0
	%24 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %23, i64 0, i32 4
	; SelectorExpr
	; IndexExpr
	%25 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%26 = extractvalue {i8*, i64, i64} %25, 0
	%27 = extractvalue {i8*, i64, i64} %25, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2ac, i64 0, i32 0), i64 39}, i64 201, i64 53, i64 0, i64 %27)
	%28 = getelementptr inbounds i8, i8* %26, i64 0
	%29 = getelementptr inbounds i8, i8* %28, i64 0
	%30 = call %..string @.strings-9.to_odin_string(i8* %29)
	store %..string %30, %..string* %24
	; AssignStmt
	; SelectorExpr
	%31 = load %jaze_catalog-21.Catalog*, %jaze_catalog-21.Catalog** %1, align 8
	%32 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %31, i64 0
	%33 = getelementptr inbounds %jaze_catalog-21.Catalog, %jaze_catalog-21.Catalog* %32, i64 0, i32 7
	%34 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%35 = extractvalue {i8*, i64, i64} %34, 1
	; cast - cast
	%36 = bitcast i64 %35 to i64
	%37 = load i64, i64* %33, align 8
	%38 = add i64 %37, %36
	store i64 %38, i64* %33
	br label %if.done-2

if.done-2:
	; IfStmt
	; SelectorExpr
	%39 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%40 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %39, i64 0
	%41 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %40, i64 0, i32 2
	%42 = load i32, i32* %41, align 4
	%43 = icmp eq i32 %42, 0
	br i1 %43, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%44 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%45 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %44, i64 0
	%46 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %45, i64 0, i32 2
	; SelectorExpr
	; SelectorExpr
	%47 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%48 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %47, i64 0
	%49 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %48, i64 0, i32 3
	%50 = load i32, i32* %49, align 8
	; SelectorExpr
	%51 = load %jaze_asset-22.Asset.Shader*, %jaze_asset-22.Asset.Shader** %0, align 8
	%52 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %51, i64 0
	%53 = getelementptr inbounds %jaze_asset-22.Asset.Shader, %jaze_asset-22.Asset.Shader* %52, i64 0, i32 4
	%54 = load %..string, %..string* %53, align 8
	%55 = call {i32, i1} @.jaze_gl_util-30.CreateAndCompileShader(i32 %50, %..string %54)
	%56 = extractvalue {i32, i1} %55, 0
	%57 = extractvalue {i32, i1} %55, 1
	store i32 %56, i32* %46
	br label %if.done-4

if.done-4:
	ret void
}

define %..string @.jaze_catalog-21._GetFileExtension(%..string %filename) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %filename, %..string* %0
	; strLen
	store i64 zeroinitializer, i64* %1
		%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 1
	store i64 %6, i64* %1
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %2
		%7 = load i64, i64* %1, align 8
	%8 = sub i64 %7, 1
	store i64 %8, i64* %2
	br label %for.loop-1

for.loop-1:
	%9 = load i64, i64* %2, align 8
	%10 = icmp sgt i64 %9, 0
	br i1 %10, label %for.body-2, label %for.done-8

for.body-2:
	; IfStmt
	; IndexExpr
	%11 = load %..string, %..string* %0, align 8
	%12 = extractvalue %..string %11, 0
	%13 = extractvalue %..string %11, 1
	%14 = load i64, i64* %2, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2ad, i64 0, i32 0), i64 39}, i64 238, i64 21, i64 %14, i64 %13)
	%15 = getelementptr inbounds i8, i8* %12, i64 %14
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 46
	br i1 %17, label %if.then-3, label %if.done-7

if.then-3:
	; res
	store %..string zeroinitializer, %..string* %3
		; SliceExpr
	%18 = load i64, i64* %2, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load %..string, %..string* %0, align 8
	%21 = extractvalue %..string %20, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2ae, i64 0, i32 0), i64 39}, i64 239, i64 28, i64 %18, i64 %19)
	%22 = extractvalue %..string %20, 0
	%23 = getelementptr inbounds i8, i8* %22, i64 %18
	%24 = sub i64 %19, %18
	store %..string zeroinitializer, %..string* %4
	%25 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 0
	store i8* %23, i8** %25
	%26 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 1
	store i64 %24, i64* %26
	%27 = load %..string, %..string* %4, align 8
	store %..string %27, %..string* %3
	; IfStmt
	%28 = load %..string, %..string* %3, align 8
	%29 = call i1 @.__string_eq(%..string %28, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2af, i64 0, i32 0), i64 1})
	br i1 %29, label %if.then-4, label %if.else-5

if.then-4:
	; ReturnStmt
	ret %..string zeroinitializer

if.else-5:
	; ReturnStmt
	%30 = load %..string, %..string* %3, align 8
	ret %..string %30

if.done-6:
	br label %if.done-7

if.done-7:
	%31 = load i64, i64* %2, align 8
	%32 = sub i64 %31, 1
	store i64 %32, i64* %2
	br label %for.loop-1

for.done-8:
	; ReturnStmt
	ret %..string zeroinitializer
}

define %..string @.jaze_catalog-21._GetFileNameWithoutExtension(%..string %filename) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %filename, %..string* %0
	; extlen
	store i64 zeroinitializer, i64* %1
		%4 = load %..string, %..string* %0, align 8
	%5 = call %..string @.jaze_catalog-21._GetFileExtension(%..string %4)
	%6 = extractvalue %..string %5, 1
	store i64 %6, i64* %1
	; namelen
	store i64 zeroinitializer, i64* %2
		%7 = load %..string, %..string* %0, align 8
	%8 = extractvalue %..string %7, 1
	store i64 %8, i64* %2
	; ReturnStmt
	; SliceExpr
	%9 = load i64, i64* %2, align 8
	%10 = load i64, i64* %1, align 8
	%11 = sub i64 %9, %10
	%12 = load %..string, %..string* %0, align 8
	%13 = extractvalue %..string %12, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2b0, i64 0, i32 0), i64 39}, i64 254, i64 20, i64 0, i64 %11)
	%14 = extractvalue %..string %12, 0
	%15 = getelementptr inbounds i8, i8* %14, i64 0
	%16 = sub i64 %11, 0
	store %..string zeroinitializer, %..string* %3
	%17 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 0
	store i8* %15, i8** %17
	%18 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 1
	store i64 %16, i64* %18
	%19 = load %..string, %..string* %3, align 8
	ret %..string %19
}

define i1 @.jaze_catalog-21._IsDirectory(i32 %attr) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %attr, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 4
	; cast - cast
	%2 = bitcast i32 %1 to i32
	%3 = icmp ne i32 %2, -1
	%4 = load i32, i32* %0, align 4
	; cast - cast
	%5 = bitcast i32 %4 to i32
	%6 = icmp ne i32 %5, -1
	br i1 %6, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%7 = load i32, i32* %0, align 4
	%8 = and i32 %7, 16
	%9 = icmp eq i32 %8, 16
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%10 = phi i1 [ false, %decls-0 ], [ %9, %logical.cmp.rhs-1 ]
	ret i1 %10
}

define %jaze_asset-22.FileInfo_t @.jaze_catalog-21._CreateFileInfo(%..string %path, %..string %filename, %jaze_win32-13.FindData %data) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %jaze_win32-13.FindData, align 4
	%3 = alloca %jaze_asset-22.FileInfo_t, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [2 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %path, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %filename, %..string* %1
	store %jaze_win32-13.FindData zeroinitializer, %jaze_win32-13.FindData* %2
		store %jaze_win32-13.FindData %data, %jaze_win32-13.FindData* %2
	; file
	store %jaze_asset-22.FileInfo_t zeroinitializer, %jaze_asset-22.FileInfo_t* %3
		store %jaze_asset-22.FileInfo_t zeroinitializer, %jaze_asset-22.FileInfo_t* %3
	; AssignStmt
	; SelectorExpr
	%11 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %3, i64 0, i32 0
	%12 = load %..string, %..string* %1, align 8
	%13 = call %..string @.jaze_catalog-21._GetFileNameWithoutExtension(%..string %12)
	store %..string %13, %..string* %11
	; AssignStmt
	; SelectorExpr
	%14 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %3, i64 0, i32 1
	%15 = load %..string, %..string* %1, align 8
	%16 = call %..string @.jaze_catalog-21._GetFileExtension(%..string %15)
	store %..string %16, %..string* %14
	; pathBuf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
		; make
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2b1, i64 0, i32 0), i64 39}, i64 266, i64 33, i64 0, i64 260, i64 260)
	%17 = mul i64 1, 260
	%18 = call %..rawptr @.alloc_align(i64 %17, i64 1)
	%19 = bitcast %..rawptr %18 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%20 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %19, i8** %20
	%21 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 260, i64* %21
	%22 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 260, i64* %22
	%23 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	store {i8*, i64, i64} %23, {i8*, i64, i64}* %4
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %3, i64 0, i32 2
	; SelectorExpr
	; SliceExpr
	%25 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%26 = extractvalue {i8*, i64, i64} %25, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2b2, i64 0, i32 0), i64 39}, i64 267, i64 36, i64 0, i64 0, i64 %26)
	%27 = extractvalue {i8*, i64, i64} %25, 0
	%28 = getelementptr inbounds i8, i8* %27, i64 0
	%29 = sub i64 0, 0
	%30 = sub i64 %26, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%31 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %28, i8** %31
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %29, i64* %32
	%33 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %30, i64* %33
	%34 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%35 = load %..string, %..string* %0, align 8
	%36 = load %..string, %..string* %1, align 8
	store %..any zeroinitializer, %..any* %7
	%37 = bitcast %..string* %0 to %..rawptr
	%38 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%39 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%40 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %38, %Type_Info** %39
	store %..rawptr %37, %..rawptr* %40
	%41 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%42 = bitcast %..string* %1 to %..rawptr
	%43 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%44 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%45 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %43, %Type_Info** %44
	store %..rawptr %42, %..rawptr* %45
	%46 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [2 x %..any] zeroinitializer, [2 x %..any]* %10
	%47 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	store %..any %41, %..any* %47
	%48 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 1
	store %..any %46, %..any* %48
	%49 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	%50 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %49, %..any** %50
	%51 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 2, i64* %51
	%52 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 2, i64* %52
	%53 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	%54 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %34, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2b3, i64 0, i32 0), i64 4}, {%..any*, i64, i64} %53)
	store %..string %54, %..string* %24
	; AssignStmt
	; SelectorExpr
	%55 = getelementptr inbounds %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %3, i64 0, i32 3
	; SelectorExpr
	%56 = getelementptr inbounds %jaze_win32-13.FindData, %jaze_win32-13.FindData* %2, i64 0, i32 4
	%57 = load i32, i32* %56, align 4
	; cast - cast
	%58 = zext i32 %57 to i64
	%59 = mul i64 %58, 4294967296
	; cast - cast
	; SelectorExpr
	%60 = getelementptr inbounds %jaze_win32-13.FindData, %jaze_win32-13.FindData* %2, i64 0, i32 5
	%61 = load i32, i32* %60, align 4
	; cast - cast
	%62 = zext i32 %61 to i64
	%63 = add i64 %59, %62
	store i64 %63, i64* %55
	; ReturnStmt
	%64 = load %jaze_asset-22.FileInfo_t, %jaze_asset-22.FileInfo_t* %3, align 8
	ret %jaze_asset-22.FileInfo_t %64
}

define {i64, i64} @.os_windows-23.open(%..string %path, i64 %mode, i32 %perm) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i32, align 4
	%3 = alloca {i64, i64}, align 8
	%4 = alloca i32, align 4
	%5 = alloca i32, align 4
	%6 = alloca %windows-7.Security_Attributes*, align 8
	%7 = alloca %windows-7.Security_Attributes, align 4
	%8 = alloca i32, align 4
	%9 = alloca [300 x i8], align 1
	%10 = alloca {i8*, i64, i64}, align 8
	%11 = alloca i8*, align 8
	%12 = alloca {i8*, i64, i64}, align 8
	%13 = alloca i64, align 8
	%14 = alloca {i64, i64}, align 8
	%15 = alloca i32, align 4
	%16 = alloca {i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %path, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %mode, i64* %1
	store i32 zeroinitializer, i32* %2
		store i32 %perm, i32* %2
	; IfStmt
	%17 = load %..string, %..string* %0, align 8
	%18 = extractvalue %..string %17, 1
	%19 = icmp eq i64 %18, 0
	br i1 %19, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i64, i64} zeroinitializer, {i64, i64}* %3
	%20 = getelementptr inbounds {i64, i64}, {i64, i64}* %3, i64 0, i32 0
	store i64 -1, i64* %20
	%21 = getelementptr inbounds {i64, i64}, {i64, i64}* %3, i64 0, i32 1
	store i64 2, i64* %21
	%22 = load {i64, i64}, {i64, i64}* %3, align 8
	ret {i64, i64} %22

if.done-2:
	; access
	store i32 zeroinitializer, i32* %4
		; MatchStmt
	%23 = load i64, i64* %1, align 8
	%24 = and i64 %23, 3
	%25 = icmp eq i64 %24, 0
	br i1 %25, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%26 = icmp eq i64 %24, 1
	br i1 %26, label %match.fall.body-6, label %match.case.next-5

match.case.body-4:
	; AssignStmt
	store i32 2147483648, i32* %4
	br label %match.done-9

match.case.next-5:
	%27 = icmp eq i64 %24, 2
	br i1 %27, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	; AssignStmt
	store i32 1073741824, i32* %4
	br label %match.done-9

match.case.next-7:
	br label %match.done-9

match.fall.body-8:
	; AssignStmt
	store i32 3221225472, i32* %4
	br label %match.done-9

match.done-9:
	; IfStmt
	%28 = load i64, i64* %1, align 8
	%29 = and i64 %28, 64
	%30 = icmp ne i64 %29, 0
	br i1 %30, label %if.then-10, label %if.done-11

if.then-10:
	; AssignStmt
	%31 = load i32, i32* %4, align 4
	%32 = or i32 %31, 1073741824
	store i32 %32, i32* %4
	br label %if.done-11

if.done-11:
	; IfStmt
	%33 = load i64, i64* %1, align 8
	%34 = and i64 %33, 1024
	%35 = icmp ne i64 %34, 0
	br i1 %35, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%36 = load i32, i32* %4, align 4
	%37 = xor i32 1073741824, -1
	%38 = and i32 %36, %37
	store i32 %38, i32* %4
	; AssignStmt
	%39 = load i32, i32* %4, align 4
	%40 = or i32 %39, 4
	store i32 %40, i32* %4
	br label %if.done-13

if.done-13:
	; share_mode
	store i32 zeroinitializer, i32* %5
		store i32 3, i32* %5
	; sa
	store %windows-7.Security_Attributes* zeroinitializer, %windows-7.Security_Attributes** %6
		store %windows-7.Security_Attributes* zeroinitializer, %windows-7.Security_Attributes** %6
	; sa_inherit
	store %windows-7.Security_Attributes zeroinitializer, %windows-7.Security_Attributes* %7
		store %windows-7.Security_Attributes {i32 20, %..rawptr zeroinitializer, i32 1}, %windows-7.Security_Attributes* %7
	; IfStmt
	%41 = load i64, i64* %1, align 8
	%42 = and i64 %41, 524288
	%43 = icmp eq i64 %42, 0
	br i1 %43, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	%44 = getelementptr inbounds %windows-7.Security_Attributes, %windows-7.Security_Attributes* %7, i64 0
	store %windows-7.Security_Attributes* %44, %windows-7.Security_Attributes** %6
	br label %if.done-15

if.done-15:
	; create_mode
	store i32 zeroinitializer, i32* %8
		; MatchStmt
	%45 = load i64, i64* %1, align 8
	%46 = and i64 %45, 192
	%47 = icmp eq i64 %46, 192
	%48 = icmp eq i1 true, %47
	br i1 %48, label %match.case.body-17, label %match.case.next-16

match.case.next-16:
	%49 = load i64, i64* %1, align 8
	%50 = and i64 %49, 576
	%51 = icmp eq i64 %50, 576
	%52 = icmp eq i1 true, %51
	br i1 %52, label %match.fall.body-19, label %match.case.next-18

match.case.body-17:
	; AssignStmt
	store i32 1, i32* %8
	br label %match.done-24

match.case.next-18:
	%53 = load i64, i64* %1, align 8
	%54 = and i64 %53, 64
	%55 = icmp eq i64 %54, 64
	%56 = icmp eq i1 true, %55
	br i1 %56, label %match.fall.body-21, label %match.case.next-20

match.fall.body-19:
	; AssignStmt
	store i32 2, i32* %8
	br label %match.done-24

match.case.next-20:
	%57 = load i64, i64* %1, align 8
	%58 = and i64 %57, 512
	%59 = icmp eq i64 %58, 512
	%60 = icmp eq i1 true, %59
	br i1 %60, label %match.fall.body-23, label %match.case.next-22

match.fall.body-21:
	; AssignStmt
	store i32 4, i32* %8
	br label %match.done-24

match.case.next-22:
	; AssignStmt
	store i32 3, i32* %8
	br label %match.done-24

match.fall.body-23:
	; AssignStmt
	store i32 5, i32* %8
	br label %match.done-24

match.done-24:
	; buf
	store [300 x i8] zeroinitializer, [300 x i8]* %9
		; copy
	; SliceExpr
	%61 = load [300 x i8], [300 x i8]* %9, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2b4, i64 0, i32 0), i64 32}, i64 98, i64 10, i64 0, i64 300, i64 300)
	%62 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i32 0
	%63 = getelementptr inbounds i8, i8* %62, i64 0
	%64 = sub i64 300, 0
	%65 = sub i64 300, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %10
	%66 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 0
	store i8* %63, i8** %66
	%67 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 1
	store i64 %64, i64* %67
	%68 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 2
	store i64 %65, i64* %68
	%69 = load {i8*, i64, i64}, {i8*, i64, i64}* %10, align 8
	%70 = load %..string, %..string* %0, align 8
	; cast - cast
	%71 = extractvalue %..string %70, 0
	store i8* zeroinitializer, i8** %11
	store i8* %71, i8** %11
	%72 = extractvalue %..string %70, 1
	%73 = sub i64 %72, 0
	%74 = sub i64 %72, 0
	%75 = load i8*, i8** %11, align 8
	%76 = getelementptr inbounds i8, i8* %75, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %12
	%77 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 0
	store i8* %76, i8** %77
	%78 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 1
	store i64 %73, i64* %78
	%79 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 2
	store i64 %74, i64* %79
	%80 = load {i8*, i64, i64}, {i8*, i64, i64}* %12, align 8
	%81 = extractvalue {i8*, i64, i64} %69, 0
	%82 = bitcast i8* %81 to %..rawptr
	%83 = extractvalue {i8*, i64, i64} %80, 0
	%84 = bitcast i8* %83 to %..rawptr
	%85 = extractvalue {i8*, i64, i64} %69, 1
	%86 = extractvalue {i8*, i64, i64} %80, 1
	%87 = icmp slt i64 %85, %86
	%88 = select i1 %87, i64 %85, i64 %86
	%89 = mul i64 %88, 1
	%90 = call %..rawptr @.__mem_copy(%..rawptr %82, %..rawptr %84, i64 %89)
	; handle
	store i64 zeroinitializer, i64* %13
		; SelectorExpr
	; IndexExpr
	%91 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2b5, i64 0, i32 0), i64 32}, i64 100, i64 47, i64 0, i64 300)
	%92 = getelementptr inbounds i8, i8* %91, i64 0
	%93 = load i32, i32* %4, align 4
	%94 = load i32, i32* %5, align 4
	%95 = load %windows-7.Security_Attributes*, %windows-7.Security_Attributes** %6, align 8
	%96 = load i32, i32* %8, align 4
	%97 = bitcast %windows-7.Security_Attributes* %95 to %..rawptr
	%98 = call ccc %..rawptr @CreateFileA(i8* %92, i32 %93, i32 %94, %..rawptr %97, i32 %96, i32 128, %..rawptr zeroinitializer)
	; cast - cast
	%99 = ptrtoint %..rawptr %98 to i64
	store i64 %99, i64* %13
	; IfStmt
	%100 = load i64, i64* %13, align 8
	%101 = icmp ne i64 %100, -1
	br i1 %101, label %if.then-25, label %if.done-26

if.then-25:
	; ReturnStmt
	%102 = load i64, i64* %13, align 8
	store {i64, i64} zeroinitializer, {i64, i64}* %14
	%103 = getelementptr inbounds {i64, i64}, {i64, i64}* %14, i64 0, i32 0
	store i64 %102, i64* %103
	%104 = getelementptr inbounds {i64, i64}, {i64, i64}* %14, i64 0, i32 1
	store i64 0, i64* %104
	%105 = load {i64, i64}, {i64, i64}* %14, align 8
	ret {i64, i64} %105

if.done-26:
	; err
	store i32 zeroinitializer, i32* %15
		; SelectorExpr
	%106 = call ccc i32 @GetLastError()
	store i32 %106, i32* %15
	; ReturnStmt
	%107 = load i32, i32* %15, align 4
	; cast - cast
	%108 = sext i32 %107 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %16
	%109 = getelementptr inbounds {i64, i64}, {i64, i64}* %16, i64 0, i32 0
	store i64 -1, i64* %109
	%110 = getelementptr inbounds {i64, i64}, {i64, i64}* %16, i64 0, i32 1
	store i64 %108, i64* %110
	%111 = load {i64, i64}, {i64, i64}* %16, align 8
	ret {i64, i64} %111
}

define void @.os_windows-23.close(i64 %fd) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	; SelectorExpr
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = inttoptr i64 %1 to %..rawptr
	%3 = call ccc i32 @CloseHandle(%..rawptr %2)
	ret void
}

define {i64, i64} @.os_windows-23.write(i64 %fd, {i8*, i64, i64} %data) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {i64, i64}, align 8
	%6 = alloca {i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %1
	; bytes_written
	store i32 zeroinitializer, i32* %2
		; e
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	%7 = load i64, i64* %0, align 8
	; cast - cast
	%8 = inttoptr i64 %7 to %..rawptr
	; IndexExpr
	%9 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%10 = extractvalue {i8*, i64, i64} %9, 0
	%11 = extractvalue {i8*, i64, i64} %9, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2b6, i64 0, i32 0), i64 32}, i64 114, i64 51, i64 0, i64 %11)
	%12 = getelementptr inbounds i8, i8* %10, i64 0
	%13 = getelementptr inbounds i8, i8* %12, i64 0
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%15 = extractvalue {i8*, i64, i64} %14, 1
	; cast - cast
	%16 = trunc i64 %15 to i32
	%17 = getelementptr inbounds i32, i32* %2, i64 0
	%18 = bitcast i8* %13 to %..rawptr
	%19 = call ccc i32 @WriteFile(%..rawptr %8, %..rawptr %18, i32 %16, i32* %17, %..rawptr zeroinitializer)
	store i32 %19, i32* %3
	; IfStmt
	%20 = load i32, i32* %3, align 4
	%21 = icmp eq i32 %20, 0
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; err
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	%22 = call ccc i32 @GetLastError()
	store i32 %22, i32* %4
	; ReturnStmt
	%23 = load i32, i32* %4, align 4
	; cast - cast
	%24 = sext i32 %23 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %5
	%25 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 0
	store i64 0, i64* %25
	%26 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 1
	store i64 %24, i64* %26
	%27 = load {i64, i64}, {i64, i64}* %5, align 8
	ret {i64, i64} %27

if.done-2:
	; ReturnStmt
	%28 = load i32, i32* %2, align 4
	; cast - cast
	%29 = sext i32 %28 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %6
	%30 = getelementptr inbounds {i64, i64}, {i64, i64}* %6, i64 0, i32 0
	store i64 %29, i64* %30
	%31 = getelementptr inbounds {i64, i64}, {i64, i64}* %6, i64 0, i32 1
	store i64 0, i64* %31
	%32 = load {i64, i64}, {i64, i64}* %6, align 8
	ret {i64, i64} %32
}

define i64 @.os_windows-23.get_std_handle(i64 %h) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..rawptr, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %h, i64* %0
	; fd
	store %..rawptr zeroinitializer, %..rawptr* %1
		; SelectorExpr
	%2 = load i64, i64* %0, align 8
	; cast - cast
	%3 = trunc i64 %2 to i32
	%4 = call ccc %..rawptr @GetStdHandle(i32 %3)
	store %..rawptr %4, %..rawptr* %1
	; SelectorExpr
	%5 = load %..rawptr, %..rawptr* %1, align 8
	%6 = call ccc i32 @SetHandleInformation(%..rawptr %5, i32 1, i32 0)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%8 = ptrtoint %..rawptr %7 to i64
	ret i64 %8
}

define {{i8*, i64, i64}, i1} @.os_windows-23.read_entire_file(%..string %name) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca [300 x i8], align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca i8*, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca {{i8*, i64, i64}, i1}, align 8
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca {{i8*, i64, i64}, i1}, align 8
	%11 = alloca {i8*, i64, i64}, align 8
	%12 = alloca {i8*, i64, i64}, align 8
	%13 = alloca {{i8*, i64, i64}, i1}, align 8
	%14 = alloca i32, align 4
	%15 = alloca i64, align 8
	%16 = alloca i64, align 8
	%17 = alloca i32, align 4
	%18 = alloca {{i8*, i64, i64}, i1}, align 8
	%19 = alloca {{i8*, i64, i64}, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	; buf
	store [300 x i8] zeroinitializer, [300 x i8]* %1
		; copy
	; SliceExpr
	%20 = load [300 x i8], [300 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2b7, i64 0, i32 0), i64 32}, i64 200, i64 10, i64 0, i64 300, i64 300)
	%21 = getelementptr inbounds [300 x i8], [300 x i8]* %1, i64 0, i32 0
	%22 = getelementptr inbounds i8, i8* %21, i64 0
	%23 = sub i64 300, 0
	%24 = sub i64 300, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %22, i8** %25
	%26 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %23, i64* %26
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %24, i64* %27
	%28 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%29 = load %..string, %..string* %0, align 8
	; cast - cast
	%30 = extractvalue %..string %29, 0
	store i8* zeroinitializer, i8** %3
	store i8* %30, i8** %3
	%31 = extractvalue %..string %29, 1
	%32 = sub i64 %31, 0
	%33 = sub i64 %31, 0
	%34 = load i8*, i8** %3, align 8
	%35 = getelementptr inbounds i8, i8* %34, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%36 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %35, i8** %36
	%37 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %32, i64* %37
	%38 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %33, i64* %38
	%39 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%40 = extractvalue {i8*, i64, i64} %28, 0
	%41 = bitcast i8* %40 to %..rawptr
	%42 = extractvalue {i8*, i64, i64} %39, 0
	%43 = bitcast i8* %42 to %..rawptr
	%44 = extractvalue {i8*, i64, i64} %28, 1
	%45 = extractvalue {i8*, i64, i64} %39, 1
	%46 = icmp slt i64 %44, %45
	%47 = select i1 %46, i64 %44, i64 %45
	%48 = mul i64 %47, 1
	%49 = call %..rawptr @.__mem_copy(%..rawptr %41, %..rawptr %43, i64 %48)
	; fd
	store i64 zeroinitializer, i64* %5
		; err
	store i64 zeroinitializer, i64* %6
		%50 = load %..string, %..string* %0, align 8
	%51 = call {i64, i64} @.os_windows-23.open(%..string %50, i64 0, i32 0)
	%52 = extractvalue {i64, i64} %51, 0
	%53 = extractvalue {i64, i64} %51, 1
	store i64 %52, i64* %5
	store i64 %53, i64* %6
	; IfStmt
	%54 = load i64, i64* %6, align 8
	%55 = icmp ne i64 %54, 0
	br i1 %55, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {{i8*, i64, i64}, i1} zeroinitializer, {{i8*, i64, i64}, i1}* %7
	%56 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %7, i64 0, i32 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %56
	%57 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %7, i64 0, i32 1
	store i1 false, i1* %57
	%58 = load {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %7, align 8
	ret {{i8*, i64, i64}, i1} %58

if.done-2:
	; DeferStmt
	; length
	store i64 zeroinitializer, i64* %8
		; IfStmt
	; ok
	store i1 zeroinitializer, i1* %9
		; SelectorExpr
	%59 = load i64, i64* %5, align 8
	; cast - cast
	%60 = inttoptr i64 %59 to %..rawptr
	%61 = getelementptr inbounds i64, i64* %8, i64 0
	%62 = call ccc i32 @GetFileSizeEx(%..rawptr %60, i64* %61)
	%63 = icmp ne i32 %62, 0
	store i1 %63, i1* %9
	%64 = load i1, i1* %9, align 1
	br i1 %64, label %if.done-4, label %if.then-3

if.then-3:
	; ReturnStmt
	store {{i8*, i64, i64}, i1} zeroinitializer, {{i8*, i64, i64}, i1}* %10
	%65 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %10, i64 0, i32 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %65
	%66 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %10, i64 0, i32 1
	store i1 false, i1* %66
	%67 = load {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %10, align 8
	; defer
	%68 = load i64, i64* %5, align 8
	call void @.os_windows-23.close(i64 %68)
	ret {{i8*, i64, i64}, i1} %67

if.done-4:
	; data
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %11
		; make
	%69 = load i64, i64* %8, align 8
	%70 = bitcast i64 %69 to i64
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2b8, i64 0, i32 0), i64 32}, i64 213, i64 23, i64 0, i64 %70, i64 %70)
	%71 = mul i64 1, %70
	%72 = call %..rawptr @.alloc_align(i64 %71, i64 1)
	%73 = bitcast %..rawptr %72 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %12
	%74 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 0
	store i8* %73, i8** %74
	%75 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 1
	store i64 %70, i64* %75
	%76 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 2
	store i64 %70, i64* %76
	%77 = load {i8*, i64, i64}, {i8*, i64, i64}* %12, align 8
	store {i8*, i64, i64} %77, {i8*, i64, i64}* %11
	; IfStmt
	%78 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	%79 = extractvalue {i8*, i64, i64} %78, 0
	%80 = extractvalue {i8*, i64, i64} %78, 2
	%81 = bitcast %..rawptr null to i8*
	%82 = icmp eq i8* %79, %81
	%83 = icmp eq i64 %80, 0
	%84 = or i1 %82, %83
	br i1 %84, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	store {{i8*, i64, i64}, i1} zeroinitializer, {{i8*, i64, i64}, i1}* %13
	%85 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %13, i64 0, i32 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %85
	%86 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %13, i64 0, i32 1
	store i1 false, i1* %86
	%87 = load {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %13, align 8
	; defer
	%88 = load i64, i64* %5, align 8
	call void @.os_windows-23.close(i64 %88)
	ret {{i8*, i64, i64}, i1} %87

if.done-6:
	; single_read_length
	store i32 zeroinitializer, i32* %14
		; total_read
	store i64 zeroinitializer, i64* %15
		; ForStmt
	br label %for.loop-7

for.loop-7:
	%89 = load i64, i64* %15, align 8
	%90 = load i64, i64* %8, align 8
	%91 = icmp slt i64 %89, %90
	br i1 %91, label %for.body-8, label %for.done-14

for.body-8:
	; remaining
	store i64 zeroinitializer, i64* %16
		%92 = load i64, i64* %8, align 8
	%93 = load i64, i64* %15, align 8
	%94 = sub i64 %92, %93
	store i64 %94, i64* %16
	; to_read
	store i32 zeroinitializer, i32* %17
		; IfStmt
	%95 = load i64, i64* %16, align 8
	%96 = icmp sle i64 %95, 4294967295
	br i1 %96, label %if.then-9, label %if.else-10

if.then-9:
	; AssignStmt
	%97 = load i64, i64* %16, align 8
	; cast - cast
	%98 = trunc i64 %97 to i32
	store i32 %98, i32* %17
	br label %if.done-11

if.else-10:
	; AssignStmt
	store i32 4294967295, i32* %17
	br label %if.done-11

if.done-11:
	; SelectorExpr
	%99 = load i64, i64* %5, align 8
	; cast - cast
	%100 = inttoptr i64 %99 to %..rawptr
	; IndexExpr
	%101 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	%102 = extractvalue {i8*, i64, i64} %101, 0
	%103 = extractvalue {i8*, i64, i64} %101, 1
	%104 = load i64, i64* %15, align 8
	%105 = bitcast i64 %104 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2b9, i64 0, i32 0), i64 32}, i64 231, i64 46, i64 %105, i64 %103)
	%106 = getelementptr inbounds i8, i8* %102, i64 %105
	%107 = getelementptr inbounds i8, i8* %106, i64 0
	%108 = load i32, i32* %17, align 4
	%109 = getelementptr inbounds i32, i32* %14, i64 0
	%110 = bitcast i8* %107 to %..rawptr
	%111 = call ccc i32 @ReadFile(%..rawptr %100, %..rawptr %110, i32 %108, i32* %109, %..rawptr zeroinitializer)
	; IfStmt
	%112 = load i32, i32* %14, align 4
	%113 = icmp sle i32 %112, 0
	br i1 %113, label %if.then-12, label %if.done-13

if.then-12:
	; free
	%114 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	%115 = extractvalue {i8*, i64, i64} %114, 0
	%116 = bitcast i8* %115 to %..rawptr
	call void @.free_ptr(%..rawptr %116)
	; ReturnStmt
	store {{i8*, i64, i64}, i1} zeroinitializer, {{i8*, i64, i64}, i1}* %18
	%117 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %18, i64 0, i32 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %117
	%118 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %18, i64 0, i32 1
	store i1 false, i1* %118
	%119 = load {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %18, align 8
	; defer
	%120 = load i64, i64* %5, align 8
	call void @.os_windows-23.close(i64 %120)
	ret {{i8*, i64, i64}, i1} %119

if.done-13:
	; AssignStmt
	%121 = load i32, i32* %14, align 4
	; cast - cast
	%122 = sext i32 %121 to i64
	%123 = load i64, i64* %15, align 8
	%124 = add i64 %123, %122
	store i64 %124, i64* %15
	br label %for.loop-7

for.done-14:
	; ReturnStmt
	%125 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	store {{i8*, i64, i64}, i1} zeroinitializer, {{i8*, i64, i64}, i1}* %19
	%126 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %19, i64 0, i32 0
	store {i8*, i64, i64} %125, {i8*, i64, i64}* %126
	%127 = getelementptr inbounds {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %19, i64 0, i32 1
	store i1 true, i1* %127
	%128 = load {{i8*, i64, i64}, i1}, {{i8*, i64, i64}, i1}* %19, align 8
	; defer
	%129 = load i64, i64* %5, align 8
	call void @.os_windows-23.close(i64 %129)
	ret {{i8*, i64, i64}, i1} %128
}

define %..rawptr @.os_windows-23.heap_alloc(i64 %size) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%1 = call ccc %..rawptr @GetProcessHeap()
	%2 = load i64, i64* %0, align 8
	%3 = call ccc %..rawptr @HeapAlloc(%..rawptr %1, i32 8, i64 %2)
	ret %..rawptr %3
}

define %..rawptr @.os_windows-23.heap_resize(%..rawptr %ptr, i64 %new_size) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %new_size, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp eq i64 %2, 0
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	%4 = load %..rawptr, %..rawptr* %0, align 8
	call void @.os_windows-23.heap_free(%..rawptr %4)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = icmp eq %..rawptr %5, zeroinitializer
	br i1 %6, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%7 = load i64, i64* %1, align 8
	%8 = call %..rawptr @.os_windows-23.heap_alloc(i64 %7)
	ret %..rawptr %8

if.done-4:
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%9 = call ccc %..rawptr @GetProcessHeap()
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = call ccc %..rawptr @HeapReAlloc(%..rawptr %9, i32 8, %..rawptr %10, i64 %11)
	ret %..rawptr %12
}

define void @.os_windows-23.heap_free(%..rawptr %ptr) {
decls-0:
	%0 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	; IfStmt
	%1 = load %..rawptr, %..rawptr* %0, align 8
	%2 = icmp eq %..rawptr %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%3 = call ccc %..rawptr @GetProcessHeap()
	%4 = load %..rawptr, %..rawptr* %0, align 8
	%5 = call ccc i32 @HeapFree(%..rawptr %3, i32 0, %..rawptr %4)
	ret void
}

define i64 @.os_windows-23.current_thread_id() {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = call ccc i32 @GetCurrentThreadId()
	; cast - cast
	%1 = zext i32 %0 to i64
	ret i64 %1
}

define i1 @.types-27.is_string(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca i1, align 1
	%2 = alloca {%Type_Info.String*, i1}, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%3 = load %Type_Info*, %Type_Info** %0, align 8
	%4 = icmp eq %Type_Info* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; ok
	store i1 zeroinitializer, i1* %1
		%5 = load %Type_Info*, %Type_Info** %0, align 8
	%6 = call %Type_Info* @.type_info_base(%Type_Info* %5)
	; cast - union_cast
	store {%Type_Info.String*, i1} zeroinitializer, {%Type_Info.String*, i1}* %2
	%7 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	%8 = load i64, i64* %7, align 8
	%9 = icmp eq i64 %8, 6
	br i1 %9, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%10 = getelementptr inbounds {%Type_Info.String*, i1}, {%Type_Info.String*, i1}* %2, i64 0, i32 0
	%11 = getelementptr inbounds {%Type_Info.String*, i1}, {%Type_Info.String*, i1}* %2, i64 0, i32 1
	%12 = bitcast %Type_Info* %6 to %Type_Info.String*
	store %Type_Info.String* %12, %Type_Info.String** %10
	store i1 true, i1* %11
	br label %union_cast.end-4

union_cast.end-4:
	%13 = load {%Type_Info.String*, i1}, {%Type_Info.String*, i1}* %2, align 8
	%14 = extractvalue {%Type_Info.String*, i1} %13, 0
	%15 = extractvalue {%Type_Info.String*, i1} %13, 1
	store i1 %15, i1* %1
	; ReturnStmt
	%16 = load i1, i1* %1, align 1
	ret i1 %16
}

define %..string @.strconv-28.append_float({i8*, i64, i64} %buf, double %f, i8 %fmt, i64 %prec, i64 %bit_size) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca double, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store double zeroinitializer, double* %1
		store double %f, double* %1
	store i8 zeroinitializer, i8* %2
		store i8 %fmt, i8* %2
	store i64 zeroinitializer, i64* %3
		store i64 %prec, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	; ReturnStmt
	%6 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%7 = load double, double* %1, align 8
	%8 = load i8, i8* %2, align 1
	%9 = load i64, i64* %3, align 8
	%10 = load i64, i64* %4, align 8
	%11 = call {i8*, i64, i64} @.strconv-28.generic_ftoa({i8*, i64, i64} %6, double %7, i8 %8, i64 %9, i64 %10)
	; cast - cast
	%12 = extractvalue {i8*, i64, i64} %11, 0
	%13 = extractvalue {i8*, i64, i64} %11, 1
	store %..string zeroinitializer, %..string* %5
	%14 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%15 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i8* %12, i8** %14
	store i64 %13, i64* %15
	%16 = load %..string, %..string* %5, align 8
	ret %..string %16
}

define {i8*, i64, i64} @.strconv-28.generic_ftoa({i8*, i64, i64} %buf, double %val, i8 %fmt, i64 %prec, i64 %bit_size) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca double, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca %strconv-28.Float_Info*, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	%9 = alloca i64, align 8
	%10 = alloca i64, align 8
	%11 = alloca %..string, align 8
	%12 = alloca i8*, align 8
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca %decimal-32.Decimal, align 8
	%15 = alloca %decimal-32.Decimal*, align 8
	%16 = alloca %strconv-28.Decimal_Slice, align 8
	%17 = alloca i1, align 1
	%18 = alloca %strconv-28.Decimal_Slice, align 8
	%19 = alloca {i8*, i64, i64}, align 8
	%20 = alloca %strconv-28.Decimal_Slice, align 8
	%21 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store double zeroinitializer, double* %1
		store double %val, double* %1
	store i8 zeroinitializer, i8* %2
		store i8 %fmt, i8* %2
	store i64 zeroinitializer, i64* %3
		store i64 %prec, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	; bits
	store i64 zeroinitializer, i64* %5
		; flt
	store %strconv-28.Float_Info* zeroinitializer, %strconv-28.Float_Info** %6
		; MatchStmt
	%22 = load i64, i64* %4, align 8
	%23 = icmp eq i64 %22, 32
	br i1 %23, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%24 = icmp eq i64 %22, 64
	br i1 %24, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; AssignStmt
	%25 = load double, double* %1, align 8
	; cast - cast
	%26 = fptrunc double %25 to float
	; cast - transmute
	%27 = bitcast float %26 to i32
	; cast - cast
	%28 = zext i32 %27 to i64
	store i64 %28, i64* %5
	; AssignStmt
	%29 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* @.strconv-28.f32_info, i64 0
	store %strconv-28.Float_Info* %29, %strconv-28.Float_Info** %6
	br label %match.done-5

match.case.next-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ba, i64 0, i32 0), i64 29}, i64 116, i64 9, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$2bb, i64 0, i32 0), i64 25})
	br label %match.done-5

match.fall.body-4:
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %7
	%30 = load double, double* %1, align 8
	%31 = bitcast double %30 to i64
	store i64 %31, i64* %7
	%32 = load i64, i64* %7, align 8
	store i64 %32, i64* %5
	; AssignStmt
	%33 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* @.strconv-28.f64_info, i64 0
	store %strconv-28.Float_Info* %33, %strconv-28.Float_Info** %6
	br label %match.done-5

match.done-5:
	; neg
	store i1 zeroinitializer, i1* %8
		%34 = load i64, i64* %5, align 8
	; SelectorExpr
	%35 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%36 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %35, i64 0
	%37 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %36, i64 0, i32 1
	%38 = load i64, i64* %37, align 8
	; SelectorExpr
	%39 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%40 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %39, i64 0
	%41 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %40, i64 0, i32 0
	%42 = load i64, i64* %41, align 8
	%43 = add i64 %38, %42
	%44 = bitcast i64 %43 to i64
	%45 = lshr i64 %34, %44
	%46 = icmp ne i64 %45, 0
	store i1 %46, i1* %8
	; exp
	store i64 zeroinitializer, i64* %9
		%47 = load i64, i64* %5, align 8
	; SelectorExpr
	%48 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%49 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %48, i64 0
	%50 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %49, i64 0, i32 0
	%51 = load i64, i64* %50, align 8
	%52 = bitcast i64 %51 to i64
	%53 = lshr i64 %47, %52
	; cast - cast
	%54 = bitcast i64 %53 to i64
	; SelectorExpr
	%55 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%56 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %55, i64 0
	%57 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %56, i64 0, i32 1
	%58 = load i64, i64* %57, align 8
	%59 = bitcast i64 %58 to i64
	%60 = shl i64 1, %59
	%61 = sub i64 %60, 1
	%62 = and i64 %54, %61
	store i64 %62, i64* %9
	; mant
	store i64 zeroinitializer, i64* %10
		%63 = load i64, i64* %5, align 8
	; SelectorExpr
	%64 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%65 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %64, i64 0
	%66 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %65, i64 0, i32 0
	%67 = load i64, i64* %66, align 8
	%68 = bitcast i64 %67 to i64
	%69 = shl i64 1, %68
	%70 = sub i64 %69, 1
	%71 = and i64 %63, %70
	store i64 %71, i64* %10
	; MatchStmt
	%72 = load i64, i64* %9, align 8
	; SelectorExpr
	%73 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%74 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %73, i64 0
	%75 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %74, i64 0, i32 1
	%76 = load i64, i64* %75, align 8
	%77 = bitcast i64 %76 to i64
	%78 = shl i64 1, %77
	%79 = sub i64 %78, 1
	%80 = icmp eq i64 %72, %79
	br i1 %80, label %match.case.body-7, label %match.case.next-6

match.case.next-6:
	%81 = icmp eq i64 %72, 0
	br i1 %81, label %match.fall.body-15, label %match.case.next-14

match.case.body-7:
	; s
	store %..string zeroinitializer, %..string* %11
		; IfStmt
	%82 = load i64, i64* %10, align 8
	%83 = icmp ne i64 %82, 0
	br i1 %83, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2bc, i64 0, i32 0), i64 3}, %..string* %11
	br label %if.done-13

if.else-9:
	; IfStmt
	%84 = load i1, i1* %8, align 1
	br i1 %84, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2bd, i64 0, i32 0), i64 4}, %..string* %11
	br label %if.done-12

if.else-11:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2be, i64 0, i32 0), i64 4}, %..string* %11
	br label %if.done-12

if.done-12:
	br label %if.done-13

if.done-13:
	; append
	%85 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%86 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%87 = load %..string, %..string* %11, align 8
	; cast - cast
	%88 = extractvalue %..string %87, 0
	store i8* zeroinitializer, i8** %12
	store i8* %88, i8** %12
	%89 = extractvalue %..string %87, 1
	%90 = sub i64 %89, 0
	%91 = sub i64 %89, 0
	%92 = load i8*, i8** %12, align 8
	%93 = getelementptr inbounds i8, i8* %92, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%94 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %93, i8** %94
	%95 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %90, i64* %95
	%96 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %91, i64* %96
	%97 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%98 = extractvalue {i8*, i64, i64} %97, 0
	%99 = extractvalue {i8*, i64, i64} %97, 1
	%100 = bitcast i8* %98 to %..rawptr
	%101 = call i64 @.__slice_append(%..rawptr %85, i64 1, i64 1, %..rawptr %100, i64 %99)
	; ReturnStmt
	%102 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %102

match.case.next-14:
	; AssignStmt
	; SelectorExpr
	%103 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%104 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %103, i64 0
	%105 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %104, i64 0, i32 0
	%106 = load i64, i64* %105, align 8
	%107 = bitcast i64 %106 to i64
	%108 = shl i64 1, %107
	%109 = load i64, i64* %10, align 8
	%110 = or i64 %109, %108
	store i64 %110, i64* %10
	br label %match.done-16

match.fall.body-15:
	%111 = load i64, i64* %9, align 8
	%112 = add i64 %111, 1
	store i64 %112, i64* %9
	br label %match.done-16

match.done-16:
	; AssignStmt
	; SelectorExpr
	%113 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%114 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %113, i64 0
	%115 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %114, i64 0, i32 2
	%116 = load i64, i64* %115, align 8
	%117 = load i64, i64* %9, align 8
	%118 = add i64 %117, %116
	store i64 %118, i64* %9
	; d_
	store %decimal-32.Decimal zeroinitializer, %decimal-32.Decimal* %14
		; d
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %15
		%119 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %14, i64 0
	store %decimal-32.Decimal* %119, %decimal-32.Decimal** %15
	%120 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%121 = load i64, i64* %10, align 8
	call void @.decimal-32.assign(%decimal-32.Decimal* %120, i64 %121)
	%122 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%123 = load i64, i64* %9, align 8
	; SelectorExpr
	%124 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	%125 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %124, i64 0
	%126 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %125, i64 0, i32 0
	%127 = load i64, i64* %126, align 8
	; cast - cast
	%128 = bitcast i64 %127 to i64
	%129 = sub i64 %123, %128
	call void @.decimal-32.shift(%decimal-32.Decimal* %122, i64 %129)
	; digs
	store %strconv-28.Decimal_Slice zeroinitializer, %strconv-28.Decimal_Slice* %16
		; shortest
	store i1 zeroinitializer, i1* %17
		%130 = load i64, i64* %3, align 8
	%131 = icmp slt i64 %130, 0
	store i1 %131, i1* %17
	; IfStmt
	%132 = load i1, i1* %17, align 1
	br i1 %132, label %if.then-17, label %if.else-28

if.then-17:
	%133 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%134 = load i64, i64* %10, align 8
	%135 = load i64, i64* %9, align 8
	%136 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %6, align 8
	call void @.strconv-28.round_shortest(%decimal-32.Decimal* %133, i64 %134, i64 %135, %strconv-28.Float_Info* %136)
	; AssignStmt
	; CompoundLit
	store %strconv-28.Decimal_Slice zeroinitializer, %strconv-28.Decimal_Slice* %18
	store %strconv-28.Decimal_Slice {{i8*, i64, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i1 zeroinitializer}, %strconv-28.Decimal_Slice* %18
	; SliceExpr
	; SelectorExpr
	%137 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%138 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %137, i64 0
	%139 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %138, i64 0, i32 2
	%140 = load [384 x i8], [384 x i8]* %139, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2bf, i64 0, i32 0), i64 29}, i64 153, i64 41, i64 0, i64 384, i64 384)
	%141 = getelementptr inbounds [384 x i8], [384 x i8]* %139, i64 0, i32 0
	%142 = getelementptr inbounds i8, i8* %141, i64 0
	%143 = sub i64 384, 0
	%144 = sub i64 384, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %19
	%145 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 0
	store i8* %142, i8** %145
	%146 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 1
	store i64 %143, i64* %146
	%147 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 2
	store i64 %144, i64* %147
	%148 = load {i8*, i64, i64}, {i8*, i64, i64}* %19, align 8
	%149 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %18, i64 0, i32 0
	store {i8*, i64, i64} %148, {i8*, i64, i64}* %149
	; SelectorExpr
	%150 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%151 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %150, i64 0
	%152 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %151, i64 0, i32 0
	%153 = load i64, i64* %152, align 8
	%154 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %18, i64 0, i32 1
	store i64 %153, i64* %154
	; SelectorExpr
	%155 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%156 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %155, i64 0
	%157 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %156, i64 0, i32 1
	%158 = load i64, i64* %157, align 8
	%159 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %18, i64 0, i32 2
	store i64 %158, i64* %159
	%160 = load %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %18, align 8
	store %strconv-28.Decimal_Slice %160, %strconv-28.Decimal_Slice* %16
	; MatchStmt
	%161 = load i8, i8* %2, align 1
	%162 = icmp eq i8 %161, 101
	br i1 %162, label %match.case.body-20, label %match.case.next-18

match.case.next-18:
	%163 = icmp eq i8 %161, 69
	br i1 %163, label %match.case.body-20, label %match.case.next-19

match.case.next-19:
	%164 = icmp eq i8 %161, 102
	br i1 %164, label %match.fall.body-23, label %match.case.next-21

match.case.body-20:
	; AssignStmt
	; SelectorExpr
	%165 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %16, i64 0, i32 1
	%166 = load i64, i64* %165, align 8
	%167 = sub i64 %166, 1
	store i64 %167, i64* %3
	br label %match.done-27

match.case.next-21:
	%168 = icmp eq i8 %161, 70
	br i1 %168, label %match.fall.body-23, label %match.case.next-22

match.case.next-22:
	%169 = icmp eq i8 %161, 103
	br i1 %169, label %match.fall.body-26, label %match.case.next-24

match.fall.body-23:
	; AssignStmt
	; max
	; SelectorExpr
	%170 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %16, i64 0, i32 1
	%171 = load i64, i64* %170, align 8
	; SelectorExpr
	%172 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %16, i64 0, i32 2
	%173 = load i64, i64* %172, align 8
	%174 = sub i64 %171, %173
	%175 = icmp sgt i64 %174, 0
	%176 = select i1 %175, i64 %174, i64 0
	store i64 %176, i64* %3
	br label %match.done-27

match.case.next-24:
	%177 = icmp eq i8 %161, 71
	br i1 %177, label %match.fall.body-26, label %match.case.next-25

match.case.next-25:
	br label %match.done-27

match.fall.body-26:
	; AssignStmt
	; SelectorExpr
	%178 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %16, i64 0, i32 1
	%179 = load i64, i64* %178, align 8
	store i64 %179, i64* %3
	br label %match.done-27

match.done-27:
	br label %if.done-41

if.else-28:
	; MatchStmt
	%180 = load i8, i8* %2, align 1
	%181 = icmp eq i8 %180, 101
	br i1 %181, label %match.case.body-31, label %match.case.next-29

match.case.next-29:
	%182 = icmp eq i8 %180, 69
	br i1 %182, label %match.case.body-31, label %match.case.next-30

match.case.next-30:
	%183 = icmp eq i8 %180, 102
	br i1 %183, label %match.fall.body-34, label %match.case.next-32

match.case.body-31:
	%184 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%185 = load i64, i64* %3, align 8
	%186 = add i64 %185, 1
	call void @.decimal-32.round(%decimal-32.Decimal* %184, i64 %186)
	br label %match.done-40

match.case.next-32:
	%187 = icmp eq i8 %180, 70
	br i1 %187, label %match.fall.body-34, label %match.case.next-33

match.case.next-33:
	%188 = icmp eq i8 %180, 103
	br i1 %188, label %match.fall.body-37, label %match.case.next-35

match.fall.body-34:
	%189 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	; SelectorExpr
	%190 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%191 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %190, i64 0
	%192 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %191, i64 0, i32 1
	%193 = load i64, i64* %192, align 8
	%194 = load i64, i64* %3, align 8
	%195 = add i64 %193, %194
	call void @.decimal-32.round(%decimal-32.Decimal* %189, i64 %195)
	br label %match.done-40

match.case.next-35:
	%196 = icmp eq i8 %180, 71
	br i1 %196, label %match.fall.body-37, label %match.case.next-36

match.case.next-36:
	br label %match.done-40

match.fall.body-37:
	; IfStmt
	%197 = load i64, i64* %3, align 8
	%198 = icmp eq i64 %197, 0
	br i1 %198, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	store i64 1, i64* %3
	br label %if.done-39

if.done-39:
	%199 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%200 = load i64, i64* %3, align 8
	call void @.decimal-32.round(%decimal-32.Decimal* %199, i64 %200)
	br label %match.done-40

match.done-40:
	; AssignStmt
	; CompoundLit
	store %strconv-28.Decimal_Slice zeroinitializer, %strconv-28.Decimal_Slice* %20
	store %strconv-28.Decimal_Slice {{i8*, i64, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i1 zeroinitializer}, %strconv-28.Decimal_Slice* %20
	; SliceExpr
	; SelectorExpr
	%201 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%202 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %201, i64 0
	%203 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %202, i64 0, i32 2
	%204 = load [384 x i8], [384 x i8]* %203, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c0, i64 0, i32 0), i64 29}, i64 170, i64 41, i64 0, i64 384, i64 384)
	%205 = getelementptr inbounds [384 x i8], [384 x i8]* %203, i64 0, i32 0
	%206 = getelementptr inbounds i8, i8* %205, i64 0
	%207 = sub i64 384, 0
	%208 = sub i64 384, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %21
	%209 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 0
	store i8* %206, i8** %209
	%210 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 1
	store i64 %207, i64* %210
	%211 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 2
	store i64 %208, i64* %211
	%212 = load {i8*, i64, i64}, {i8*, i64, i64}* %21, align 8
	%213 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %20, i64 0, i32 0
	store {i8*, i64, i64} %212, {i8*, i64, i64}* %213
	; SelectorExpr
	%214 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%215 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %214, i64 0
	%216 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %215, i64 0, i32 0
	%217 = load i64, i64* %216, align 8
	%218 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %20, i64 0, i32 1
	store i64 %217, i64* %218
	; SelectorExpr
	%219 = load %decimal-32.Decimal*, %decimal-32.Decimal** %15, align 8
	%220 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %219, i64 0
	%221 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %220, i64 0, i32 1
	%222 = load i64, i64* %221, align 8
	%223 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %20, i64 0, i32 2
	store i64 %222, i64* %223
	%224 = load %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %20, align 8
	store %strconv-28.Decimal_Slice %224, %strconv-28.Decimal_Slice* %16
	br label %if.done-41

if.done-41:
	; ReturnStmt
	%225 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%226 = load i1, i1* %17, align 1
	%227 = load i1, i1* %8, align 1
	%228 = load %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %16, align 8
	%229 = load i64, i64* %3, align 8
	%230 = load i8, i8* %2, align 1
	%231 = call {i8*, i64, i64} @.strconv-28.format_digits({i8*, i64, i64} %225, i1 %226, i1 %227, %strconv-28.Decimal_Slice %228, i64 %229, i8 %230)
	ret {i8*, i64, i64} %231
}

define {i8*, i64, i64} @.strconv-28.format_digits({i8*, i64, i64} %buf, i1 %shortest, i1 %neg, %strconv-28.Decimal_Slice %digs, i64 %prec, i8 %fmt) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i1, align 1
	%2 = alloca i1, align 1
	%3 = alloca %strconv-28.Decimal_Slice, align 8
	%4 = alloca i64, align 8
	%5 = alloca i8, align 1
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca [1 x i8], align 1
	%8 = alloca i64, align 8
	%9 = alloca {i8*, i64, i64}, align 8
	%10 = alloca {i8*, i64, i64}, align 8
	%11 = alloca [1 x i8], align 1
	%12 = alloca {i8*, i64, i64}, align 8
	%13 = alloca [1 x i8], align 1
	%14 = alloca {i8*, i64, i64}, align 8
	%15 = alloca [1 x i8], align 1
	%16 = alloca i64, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	%19 = alloca i8, align 1
	%20 = alloca i64, align 8
	%21 = alloca {i8*, i64, i64}, align 8
	%22 = alloca [1 x i8], align 1
	%23 = alloca [2 x i8], align 1
	%24 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store i1 zeroinitializer, i1* %1
		store i1 %shortest, i1* %1
	store i1 zeroinitializer, i1* %2
		store i1 %neg, i1* %2
	store %strconv-28.Decimal_Slice zeroinitializer, %strconv-28.Decimal_Slice* %3
		store %strconv-28.Decimal_Slice %digs, %strconv-28.Decimal_Slice* %3
	store i64 zeroinitializer, i64* %4
		store i64 %prec, i64* %4
	store i8 zeroinitializer, i8* %5
		store i8 %fmt, i8* %5
	; MatchStmt
	%25 = load i8, i8* %5, align 1
	%26 = icmp eq i8 %25, 102
	br i1 %26, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%27 = icmp eq i8 %25, 70
	br i1 %27, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%28 = icmp eq i8 %25, 101
	br i1 %28, label %match.fall.body-23, label %match.case.next-21

match.case.body-3:
	; append
	%29 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; TernaryExpr
	%31 = load i1, i1* %2, align 1
	br i1 %31, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%32 = phi i8 [ 45, %if.then-4 ], [ 43, %if.else-5 ]
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%33 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %32, i8* %33
	%34 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%35 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %34, i8** %35
	%36 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %36
	%37 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %37
	%38 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%39 = extractvalue {i8*, i64, i64} %38, 0
	%40 = extractvalue {i8*, i64, i64} %38, 1
	%41 = bitcast i8* %39 to %..rawptr
	%42 = call i64 @.__slice_append(%..rawptr %29, i64 1, i64 1, %..rawptr %41, i64 %40)
	; IfStmt
	; SelectorExpr
	%43 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 2
	%44 = load i64, i64* %43, align 8
	%45 = icmp sgt i64 %44, 0
	br i1 %45, label %if.then-7, label %if.else-11

if.then-7:
	; m
	store i64 zeroinitializer, i64* %8
		; min
	; SelectorExpr
	%46 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 1
	%47 = load i64, i64* %46, align 8
	; SelectorExpr
	%48 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 2
	%49 = load i64, i64* %48, align 8
	%50 = icmp slt i64 %47, %49
	%51 = select i1 %50, i64 %47, i64 %49
	store i64 %51, i64* %8
	; append
	%52 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%53 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%54 = load i64, i64* %8, align 8
	; SelectorExpr
	%55 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 0
	%56 = load {i8*, i64, i64}, {i8*, i64, i64}* %55, align 8
	%57 = extractvalue {i8*, i64, i64} %56, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c1, i64 0, i32 0), i64 29}, i64 185, i64 29, i64 0, i64 %54, i64 %57)
	%58 = extractvalue {i8*, i64, i64} %56, 0
	%59 = getelementptr inbounds i8, i8* %58, i64 0
	%60 = sub i64 %54, 0
	%61 = sub i64 %57, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %9
	%62 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 0
	store i8* %59, i8** %62
	%63 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 1
	store i64 %60, i64* %63
	%64 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 2
	store i64 %61, i64* %64
	%65 = load {i8*, i64, i64}, {i8*, i64, i64}* %9, align 8
	%66 = extractvalue {i8*, i64, i64} %65, 0
	%67 = extractvalue {i8*, i64, i64} %65, 1
	%68 = bitcast i8* %66 to %..rawptr
	%69 = call i64 @.__slice_append(%..rawptr %52, i64 1, i64 1, %..rawptr %68, i64 %67)
	; ForStmt
	br label %for.loop-8

for.loop-8:
	%70 = load i64, i64* %8, align 8
	; SelectorExpr
	%71 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 2
	%72 = load i64, i64* %71, align 8
	%73 = icmp slt i64 %70, %72
	br i1 %73, label %for.body-9, label %for.done-10

for.body-9:
	; append
	%74 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%75 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %10
	store [1 x i8] zeroinitializer, [1 x i8]* %11
	%76 = getelementptr inbounds [1 x i8], [1 x i8]* %11, i64 0, i32 0
	store i8 48, i8* %76
	%77 = getelementptr inbounds [1 x i8], [1 x i8]* %11, i64 0, i32 0
	%78 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 0
	store i8* %77, i8** %78
	%79 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 1
	store i64 1, i64* %79
	%80 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 2
	store i64 1, i64* %80
	%81 = load {i8*, i64, i64}, {i8*, i64, i64}* %10, align 8
	%82 = extractvalue {i8*, i64, i64} %81, 0
	%83 = extractvalue {i8*, i64, i64} %81, 1
	%84 = bitcast i8* %82 to %..rawptr
	%85 = call i64 @.__slice_append(%..rawptr %74, i64 1, i64 1, %..rawptr %84, i64 %83)
	%86 = load i64, i64* %8, align 8
	%87 = add i64 %86, 1
	store i64 %87, i64* %8
	br label %for.loop-8

for.done-10:
	br label %if.done-12

if.else-11:
	; append
	%88 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%89 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %12
	store [1 x i8] zeroinitializer, [1 x i8]* %13
	%90 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	store i8 48, i8* %90
	%91 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	%92 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 0
	store i8* %91, i8** %92
	%93 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 1
	store i64 1, i64* %93
	%94 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 2
	store i64 1, i64* %94
	%95 = load {i8*, i64, i64}, {i8*, i64, i64}* %12, align 8
	%96 = extractvalue {i8*, i64, i64} %95, 0
	%97 = extractvalue {i8*, i64, i64} %95, 1
	%98 = bitcast i8* %96 to %..rawptr
	%99 = call i64 @.__slice_append(%..rawptr %88, i64 1, i64 1, %..rawptr %98, i64 %97)
	br label %if.done-12

if.done-12:
	; IfStmt
	%100 = load i64, i64* %4, align 8
	%101 = icmp sgt i64 %100, 0
	br i1 %101, label %if.then-13, label %if.done-20

if.then-13:
	; append
	%102 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%103 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %14
	store [1 x i8] zeroinitializer, [1 x i8]* %15
	%104 = getelementptr inbounds [1 x i8], [1 x i8]* %15, i64 0, i32 0
	store i8 46, i8* %104
	%105 = getelementptr inbounds [1 x i8], [1 x i8]* %15, i64 0, i32 0
	%106 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 0
	store i8* %105, i8** %106
	%107 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 1
	store i64 1, i64* %107
	%108 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 2
	store i64 1, i64* %108
	%109 = load {i8*, i64, i64}, {i8*, i64, i64}* %14, align 8
	%110 = extractvalue {i8*, i64, i64} %109, 0
	%111 = extractvalue {i8*, i64, i64} %109, 1
	%112 = bitcast i8* %110 to %..rawptr
	%113 = call i64 @.__slice_append(%..rawptr %102, i64 1, i64 1, %..rawptr %112, i64 %111)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %16
		store i64 zeroinitializer, i64* %17
	store i64 0, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 0, i64* %18
	br label %for.interval.loop-14

for.interval.loop-14:
	%114 = load i64, i64* %4, align 8
	%115 = load i64, i64* %17, align 8
	%116 = icmp slt i64 %115, %114
	br i1 %116, label %for.interval.body-15, label %for.interval.done-19

for.interval.body-15:
	%117 = load i64, i64* %17, align 8
	%118 = load i64, i64* %18, align 8
	%119 = load i64, i64* %17, align 8
	%120 = add i64 %119, 1
	store i64 %120, i64* %17
	%121 = load i64, i64* %18, align 8
	%122 = add i64 %121, 1
	store i64 %122, i64* %18
	store i64 %117, i64* %16
	; c
	store i8 zeroinitializer, i8* %19
		store i8 48, i8* %19
	; IfStmt
	; j
	store i64 zeroinitializer, i64* %20
		; SelectorExpr
	%123 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 2
	%124 = load i64, i64* %123, align 8
	%125 = load i64, i64* %16, align 8
	%126 = add i64 %124, %125
	store i64 %126, i64* %20
	%127 = load i64, i64* %20, align 8
	%128 = icmp sle i64 0, %127
	br i1 %128, label %cmp.and-16, label %if.done-18

cmp.and-16:
	%129 = load i64, i64* %20, align 8
	; SelectorExpr
	%130 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 1
	%131 = load i64, i64* %130, align 8
	%132 = icmp slt i64 %129, %131
	br i1 %132, label %if.then-17, label %if.done-18

if.then-17:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%133 = getelementptr inbounds %strconv-28.Decimal_Slice, %strconv-28.Decimal_Slice* %3, i64 0, i32 0
	%134 = load {i8*, i64, i64}, {i8*, i64, i64}* %133, align 8
	%135 = extractvalue {i8*, i64, i64} %134, 0
	%136 = extractvalue {i8*, i64, i64} %134, 1
	%137 = load i64, i64* %20, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c2, i64 0, i32 0), i64 29}, i64 200, i64 22, i64 %137, i64 %136)
	%138 = getelementptr inbounds i8, i8* %135, i64 %137
	%139 = load i8, i8* %138, align 1
	store i8 %139, i8* %19
	br label %if.done-18

if.done-18:
	; append
	%140 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%141 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%142 = load i8, i8* %19, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %21
	store [1 x i8] zeroinitializer, [1 x i8]* %22
	%143 = getelementptr inbounds [1 x i8], [1 x i8]* %22, i64 0, i32 0
	store i8 %142, i8* %143
	%144 = getelementptr inbounds [1 x i8], [1 x i8]* %22, i64 0, i32 0
	%145 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 0
	store i8* %144, i8** %145
	%146 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 1
	store i64 1, i64* %146
	%147 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 2
	store i64 1, i64* %147
	%148 = load {i8*, i64, i64}, {i8*, i64, i64}* %21, align 8
	%149 = extractvalue {i8*, i64, i64} %148, 0
	%150 = extractvalue {i8*, i64, i64} %148, 1
	%151 = bitcast i8* %149 to %..rawptr
	%152 = call i64 @.__slice_append(%..rawptr %140, i64 1, i64 1, %..rawptr %151, i64 %150)
	br label %for.interval.loop-14

for.interval.done-19:
	br label %if.done-20

if.done-20:
	; ReturnStmt
	%153 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %153

match.case.next-21:
	%154 = icmp eq i8 %25, 69
	br i1 %154, label %match.fall.body-23, label %match.case.next-22

match.case.next-22:
	%155 = icmp eq i8 %25, 103
	br i1 %155, label %match.fall.body-26, label %match.case.next-24

match.fall.body-23:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c3, i64 0, i32 0), i64 29}, i64 209, i64 9, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$2c4, i64 0, i32 0), i64 48})
	; ReturnStmt
	%156 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %156

match.case.next-24:
	%157 = icmp eq i8 %25, 71
	br i1 %157, label %match.fall.body-26, label %match.case.next-25

match.case.next-25:
	br label %match.done-27

match.fall.body-26:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c5, i64 0, i32 0), i64 29}, i64 213, i64 9, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$2c6, i64 0, i32 0), i64 48})
	; ReturnStmt
	%158 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %158

match.done-27:
	; c
	store [2 x i8] zeroinitializer, [2 x i8]* %23
		; AssignStmt
	; IndexExpr
	%159 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c7, i64 0, i32 0), i64 29}, i64 218, i64 4, i64 0, i64 2)
	store i8 37, i8* %159
	; AssignStmt
	; IndexExpr
	%160 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c8, i64 0, i32 0), i64 29}, i64 219, i64 4, i64 1, i64 2)
	%161 = load i8, i8* %5, align 1
	store i8 %161, i8* %160
	; append
	%162 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%163 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%164 = load [2 x i8], [2 x i8]* %23, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2c9, i64 0, i32 0), i64 29}, i64 220, i64 17, i64 0, i64 2, i64 2)
	%165 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i32 0
	%166 = getelementptr inbounds i8, i8* %165, i64 0
	%167 = sub i64 2, 0
	%168 = sub i64 2, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %24
	%169 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 0
	store i8* %166, i8** %169
	%170 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 1
	store i64 %167, i64* %170
	%171 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 2
	store i64 %168, i64* %171
	%172 = load {i8*, i64, i64}, {i8*, i64, i64}* %24, align 8
	%173 = extractvalue {i8*, i64, i64} %172, 0
	%174 = extractvalue {i8*, i64, i64} %172, 1
	%175 = bitcast i8* %173 to %..rawptr
	%176 = call i64 @.__slice_append(%..rawptr %162, i64 1, i64 1, %..rawptr %175, i64 %174)
	; ReturnStmt
	%177 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %177
}

define void @.strconv-28.round_shortest(%decimal-32.Decimal* %d, i64 %mant, i64 %exp, %strconv-28.Float_Info* %flt) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %strconv-28.Float_Info*, align 8
	%4 = alloca i64, align 8
	%5 = alloca %decimal-32.Decimal, align 8
	%6 = alloca %decimal-32.Decimal*, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca %decimal-32.Decimal, align 8
	%10 = alloca %decimal-32.Decimal*, align 8
	%11 = alloca i1, align 1
	%12 = alloca i64, align 8
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i8, align 1
	%17 = alloca i8, align 1
	%18 = alloca i1, align 1
	%19 = alloca i1, align 1
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %d, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %mant, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %exp, i64* %2
	store %strconv-28.Float_Info* zeroinitializer, %strconv-28.Float_Info** %3
		store %strconv-28.Float_Info* %flt, %strconv-28.Float_Info** %3
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp eq i64 %20, 0
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ReturnStmt
	ret void

if.done-2:
	; minexp
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%25 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %3, align 8
	%26 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %25, i64 0
	%27 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %26, i64 0, i32 2
	%28 = load i64, i64* %27, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %4
	; IfStmt
	%30 = load i64, i64* %2, align 8
	%31 = load i64, i64* %4, align 8
	%32 = icmp sgt i64 %30, %31
	br i1 %32, label %cmp.and-3, label %if.done-5

cmp.and-3:
	; SelectorExpr
	%33 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %34, i64 0, i32 1
	%36 = load i64, i64* %35, align 8
	; SelectorExpr
	%37 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%38 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %37, i64 0
	%39 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %38, i64 0, i32 0
	%40 = load i64, i64* %39, align 8
	%41 = sub i64 %36, %40
	%42 = mul i64 332, %41
	%43 = load i64, i64* %2, align 8
	; SelectorExpr
	%44 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %3, align 8
	%45 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %44, i64 0
	%46 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %45, i64 0, i32 0
	%47 = load i64, i64* %46, align 8
	; cast - cast
	%48 = bitcast i64 %47 to i64
	%49 = sub i64 %43, %48
	%50 = mul i64 100, %49
	%51 = icmp sge i64 %42, %50
	br i1 %51, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	ret void

if.done-5:
	; upper_
	store %decimal-32.Decimal zeroinitializer, %decimal-32.Decimal* %5
		; upper
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %6
		%52 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %5, i64 0
	store %decimal-32.Decimal* %52, %decimal-32.Decimal** %6
	%53 = load %decimal-32.Decimal*, %decimal-32.Decimal** %6, align 8
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 2, %54
	%56 = sub i64 %55, 1
	call void @.decimal-32.assign(%decimal-32.Decimal* %53, i64 %56)
	%57 = load %decimal-32.Decimal*, %decimal-32.Decimal** %6, align 8
	%58 = load i64, i64* %2, align 8
	; SelectorExpr
	%59 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %3, align 8
	%60 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %59, i64 0
	%61 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %60, i64 0, i32 0
	%62 = load i64, i64* %61, align 8
	; cast - cast
	%63 = bitcast i64 %62 to i64
	%64 = sub i64 %58, %63
	%65 = sub i64 %64, 1
	call void @.decimal-32.shift(%decimal-32.Decimal* %57, i64 %65)
	; mantlo
	store i64 zeroinitializer, i64* %7
		; explo
	store i64 zeroinitializer, i64* %8
		; IfStmt
	%66 = load i64, i64* %1, align 8
	; SelectorExpr
	%67 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %3, align 8
	%68 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %67, i64 0
	%69 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %68, i64 0, i32 0
	%70 = load i64, i64* %69, align 8
	%71 = bitcast i64 %70 to i64
	%72 = shl i64 1, %71
	%73 = icmp ugt i64 %66, %72
	br i1 %73, label %if.then-7, label %cmp.or-6

cmp.or-6:
	%74 = load i64, i64* %2, align 8
	%75 = load i64, i64* %4, align 8
	%76 = icmp eq i64 %74, %75
	br i1 %76, label %if.then-7, label %if.else-8

if.then-7:
	; AssignStmt
	%77 = load i64, i64* %1, align 8
	%78 = sub i64 %77, 1
	store i64 %78, i64* %7
	; AssignStmt
	%79 = load i64, i64* %2, align 8
	store i64 %79, i64* %8
	br label %if.done-9

if.else-8:
	; AssignStmt
	%80 = load i64, i64* %1, align 8
	%81 = mul i64 2, %80
	%82 = sub i64 %81, 1
	store i64 %82, i64* %7
	; AssignStmt
	%83 = load i64, i64* %2, align 8
	%84 = sub i64 %83, 1
	store i64 %84, i64* %8
	br label %if.done-9

if.done-9:
	; lower_
	store %decimal-32.Decimal zeroinitializer, %decimal-32.Decimal* %9
		; lower
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %10
		%85 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %9, i64 0
	store %decimal-32.Decimal* %85, %decimal-32.Decimal** %10
	%86 = load %decimal-32.Decimal*, %decimal-32.Decimal** %10, align 8
	%87 = load i64, i64* %7, align 8
	%88 = mul i64 2, %87
	%89 = add i64 %88, 1
	call void @.decimal-32.assign(%decimal-32.Decimal* %86, i64 %89)
	%90 = load %decimal-32.Decimal*, %decimal-32.Decimal** %10, align 8
	%91 = load i64, i64* %8, align 8
	; SelectorExpr
	%92 = load %strconv-28.Float_Info*, %strconv-28.Float_Info** %3, align 8
	%93 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %92, i64 0
	%94 = getelementptr inbounds %strconv-28.Float_Info, %strconv-28.Float_Info* %93, i64 0, i32 0
	%95 = load i64, i64* %94, align 8
	; cast - cast
	%96 = bitcast i64 %95 to i64
	%97 = sub i64 %91, %96
	%98 = sub i64 %97, 1
	call void @.decimal-32.shift(%decimal-32.Decimal* %90, i64 %98)
	; inclusive
	store i1 zeroinitializer, i1* %11
		%99 = load i64, i64* %1, align 8
	%100 = urem i64 %99, 2
	%101 = icmp eq i64 %100, 0
	store i1 %101, i1* %11
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %12
		store i64 zeroinitializer, i64* %13
	store i64 0, i64* %13
	store i64 zeroinitializer, i64* %14
	store i64 0, i64* %14
	br label %for.interval.loop-10

for.interval.loop-10:
	; SelectorExpr
	%102 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%103 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %102, i64 0
	%104 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %103, i64 0, i32 0
	%105 = load i64, i64* %104, align 8
	%106 = load i64, i64* %13, align 8
	%107 = icmp slt i64 %106, %105
	br i1 %107, label %for.interval.body-11, label %for.interval.done-34

for.interval.body-11:
	%108 = load i64, i64* %13, align 8
	%109 = load i64, i64* %14, align 8
	%110 = load i64, i64* %13, align 8
	%111 = add i64 %110, 1
	store i64 %111, i64* %13
	%112 = load i64, i64* %14, align 8
	%113 = add i64 %112, 1
	store i64 %113, i64* %14
	store i64 %108, i64* %12
	; l
	store i8 zeroinitializer, i8* %15
		store i8 48, i8* %15
	; IfStmt
	%114 = load i64, i64* %12, align 8
	; SelectorExpr
	%115 = load %decimal-32.Decimal*, %decimal-32.Decimal** %10, align 8
	%116 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %115, i64 0
	%117 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %116, i64 0, i32 0
	%118 = load i64, i64* %117, align 8
	%119 = icmp slt i64 %114, %118
	br i1 %119, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%120 = load %decimal-32.Decimal*, %decimal-32.Decimal** %10, align 8
	%121 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %120, i64 0
	%122 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %121, i64 0, i32 2
	%123 = load i64, i64* %12, align 8
	%124 = trunc i64 %123 to i32
	%125 = getelementptr inbounds [384 x i8], [384 x i8]* %122, i64 0, i32 %124
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ca, i64 0, i32 0), i64 29}, i64 264, i64 21, i64 %123, i64 384)
	%126 = load i8, i8* %125, align 1
	store i8 %126, i8* %15
	br label %if.done-13

if.done-13:
	; m
	store i8 zeroinitializer, i8* %16
		; IndexExpr
	; SelectorExpr
	%127 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%128 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %127, i64 0
	%129 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %128, i64 0, i32 2
	%130 = load i64, i64* %12, align 8
	%131 = trunc i64 %130 to i32
	%132 = getelementptr inbounds [384 x i8], [384 x i8]* %129, i64 0, i32 %131
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2cb, i64 0, i32 0), i64 29}, i64 266, i64 17, i64 %130, i64 384)
	%133 = load i8, i8* %132, align 1
	store i8 %133, i8* %16
	; u
	store i8 zeroinitializer, i8* %17
		store i8 48, i8* %17
	; IfStmt
	%134 = load i64, i64* %12, align 8
	; SelectorExpr
	%135 = load %decimal-32.Decimal*, %decimal-32.Decimal** %6, align 8
	%136 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %135, i64 0
	%137 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %136, i64 0, i32 0
	%138 = load i64, i64* %137, align 8
	%139 = icmp slt i64 %134, %138
	br i1 %139, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%140 = load %decimal-32.Decimal*, %decimal-32.Decimal** %6, align 8
	%141 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %140, i64 0
	%142 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %141, i64 0, i32 2
	%143 = load i64, i64* %12, align 8
	%144 = trunc i64 %143 to i32
	%145 = getelementptr inbounds [384 x i8], [384 x i8]* %142, i64 0, i32 %144
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2cc, i64 0, i32 0), i64 29}, i64 269, i64 21, i64 %143, i64 384)
	%146 = load i8, i8* %145, align 1
	store i8 %146, i8* %17
	br label %if.done-15

if.done-15:
	; ok_round_down
	store i1 zeroinitializer, i1* %18
		%147 = load i8, i8* %15, align 1
	%148 = load i8, i8* %16, align 1
	%149 = icmp ne i8 %147, %148
	%150 = load i8, i8* %15, align 1
	%151 = load i8, i8* %16, align 1
	%152 = icmp ne i8 %150, %151
	br i1 %152, label %logical.cmp.done-19, label %logical.cmp.rhs-16

logical.cmp.rhs-16:
	%153 = load i1, i1* %11, align 1
	%154 = load i1, i1* %11, align 1
	br i1 %154, label %logical.cmp.rhs-17, label %logical.cmp.done-18

logical.cmp.rhs-17:
	%155 = load i64, i64* %12, align 8
	%156 = add i64 %155, 1
	; SelectorExpr
	%157 = load %decimal-32.Decimal*, %decimal-32.Decimal** %10, align 8
	%158 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %157, i64 0
	%159 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %158, i64 0, i32 0
	%160 = load i64, i64* %159, align 8
	%161 = icmp eq i64 %156, %160
	br label %logical.cmp.done-18

logical.cmp.done-18:
	%162 = phi i1 [ false, %logical.cmp.rhs-16 ], [ %161, %logical.cmp.rhs-17 ]
	br label %logical.cmp.done-19

logical.cmp.done-19:
	%163 = phi i1 [ true, %if.done-15 ], [ %162, %logical.cmp.done-18 ]
	store i1 %163, i1* %18
	; ok_round_up
	store i1 zeroinitializer, i1* %19
		%164 = load i8, i8* %16, align 1
	%165 = load i8, i8* %17, align 1
	%166 = icmp ne i8 %164, %165
	%167 = load i8, i8* %16, align 1
	%168 = load i8, i8* %17, align 1
	%169 = icmp ne i8 %167, %168
	br i1 %169, label %logical.cmp.rhs-20, label %logical.cmp.done-26

logical.cmp.rhs-20:
	%170 = load i1, i1* %11, align 1
	%171 = load i1, i1* %11, align 1
	br i1 %171, label %logical.cmp.done-22, label %logical.cmp.rhs-21

logical.cmp.rhs-21:
	%172 = load i8, i8* %16, align 1
	%173 = add i8 %172, 1
	%174 = load i8, i8* %17, align 1
	%175 = icmp ult i8 %173, %174
	br label %logical.cmp.done-22

logical.cmp.done-22:
	%176 = phi i1 [ true, %logical.cmp.rhs-20 ], [ %175, %logical.cmp.rhs-21 ]
	%177 = load i1, i1* %11, align 1
	br i1 %177, label %logical.cmp.done-25, label %cmp.or-23

cmp.or-23:
	%178 = load i8, i8* %16, align 1
	%179 = add i8 %178, 1
	%180 = load i8, i8* %17, align 1
	%181 = icmp ult i8 %179, %180
	br i1 %181, label %logical.cmp.done-25, label %logical.cmp.rhs-24

logical.cmp.rhs-24:
	%182 = load i64, i64* %12, align 8
	%183 = add i64 %182, 1
	; SelectorExpr
	%184 = load %decimal-32.Decimal*, %decimal-32.Decimal** %6, align 8
	%185 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %184, i64 0
	%186 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %185, i64 0, i32 0
	%187 = load i64, i64* %186, align 8
	%188 = icmp slt i64 %183, %187
	br label %logical.cmp.done-25

logical.cmp.done-25:
	%189 = phi i1 [ true, %logical.cmp.done-22 ], [ true, %cmp.or-23 ], [ %188, %logical.cmp.rhs-24 ]
	br label %logical.cmp.done-26

logical.cmp.done-26:
	%190 = phi i1 [ false, %logical.cmp.done-19 ], [ %189, %logical.cmp.done-25 ]
	store i1 %190, i1* %19
	; IfStmt
	%191 = load i1, i1* %18, align 1
	br i1 %191, label %cmp.and-27, label %if.done-29

cmp.and-27:
	%192 = load i1, i1* %19, align 1
	br i1 %192, label %if.then-28, label %if.done-29

if.then-28:
	%193 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%194 = load i64, i64* %12, align 8
	%195 = add i64 %194, 1
	call void @.decimal-32.round(%decimal-32.Decimal* %193, i64 %195)
	; ReturnStmt
	ret void

if.done-29:
	; IfStmt
	%196 = load i1, i1* %18, align 1
	br i1 %196, label %if.then-30, label %if.done-31

if.then-30:
	%197 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%198 = load i64, i64* %12, align 8
	%199 = add i64 %198, 1
	call void @.decimal-32.round_down(%decimal-32.Decimal* %197, i64 %199)
	; ReturnStmt
	ret void

if.done-31:
	; IfStmt
	%200 = load i1, i1* %19, align 1
	br i1 %200, label %if.then-32, label %if.done-33

if.then-32:
	%201 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%202 = load i64, i64* %12, align 8
	%203 = add i64 %202, 1
	call void @.decimal-32.round_up(%decimal-32.Decimal* %201, i64 %203)
	; ReturnStmt
	ret void

if.done-33:
	br label %for.interval.loop-10

for.interval.done-34:
	ret void
}

define {i64, i1} @.strconv-28.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i1, align 1
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i8, align 1
	%5 = alloca i16, align 2
	%6 = alloca i32, align 4
	%7 = alloca i64, align 8
	%8 = alloca {i64, i1}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %u, i64* %0
	store i1 zeroinitializer, i1* %1
		store i1 %is_signed, i1* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	; neg
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; IfStmt
	%9 = load i1, i1* %1, align 1
	br i1 %9, label %if.then-1, label %if.done-19

if.then-1:
	; MatchStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 8
	br i1 %11, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%12 = icmp eq i64 %10, 16
	br i1 %12, label %match.fall.body-7, label %match.case.next-6

match.case.body-3:
	; i
	store i8 zeroinitializer, i8* %4
		%13 = load i64, i64* %0, align 8
	; cast - cast
	%14 = trunc i64 %13 to i8
	store i8 %14, i8* %4
	; AssignStmt
	%15 = load i8, i8* %4, align 1
	%16 = icmp slt i8 %15, 0
	store i1 %16, i1* %3
	; IfStmt
	%17 = load i1, i1* %3, align 1
	br i1 %17, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%18 = load i8, i8* %4, align 1
	%19 = sub i8 0, %18
	store i8 %19, i8* %4
	br label %if.done-5

if.done-5:
	; AssignStmt
	%20 = load i8, i8* %4, align 1
	; cast - cast
	%21 = sext i8 %20 to i64
	store i64 %21, i64* %0
	br label %match.done-18

match.case.next-6:
	%22 = icmp eq i64 %10, 32
	br i1 %22, label %match.fall.body-11, label %match.case.next-10

match.fall.body-7:
	; i
	store i16 zeroinitializer, i16* %5
		%23 = load i64, i64* %0, align 8
	; cast - cast
	%24 = trunc i64 %23 to i16
	store i16 %24, i16* %5
	; AssignStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 0
	store i1 %26, i1* %3
	; IfStmt
	%27 = load i1, i1* %3, align 1
	br i1 %27, label %if.then-8, label %if.done-9

if.then-8:
	; AssignStmt
	%28 = load i16, i16* %5, align 2
	%29 = sub i16 0, %28
	store i16 %29, i16* %5
	br label %if.done-9

if.done-9:
	; AssignStmt
	%30 = load i16, i16* %5, align 2
	; cast - cast
	%31 = sext i16 %30 to i64
	store i64 %31, i64* %0
	br label %match.done-18

match.case.next-10:
	%32 = icmp eq i64 %10, 64
	br i1 %32, label %match.fall.body-15, label %match.case.next-14

match.fall.body-11:
	; i
	store i32 zeroinitializer, i32* %6
		%33 = load i64, i64* %0, align 8
	; cast - cast
	%34 = trunc i64 %33 to i32
	store i32 %34, i32* %6
	; AssignStmt
	%35 = load i32, i32* %6, align 4
	%36 = icmp slt i32 %35, 0
	store i1 %36, i1* %3
	; IfStmt
	%37 = load i1, i1* %3, align 1
	br i1 %37, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%38 = load i32, i32* %6, align 4
	%39 = sub i32 0, %38
	store i32 %39, i32* %6
	br label %if.done-13

if.done-13:
	; AssignStmt
	%40 = load i32, i32* %6, align 4
	; cast - cast
	%41 = sext i32 %40 to i64
	store i64 %41, i64* %0
	br label %match.done-18

match.case.next-14:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2cd, i64 0, i32 0), i64 29}, i64 320, i64 10, %..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$2ce, i64 0, i32 0), i64 41})
	br label %match.done-18

match.fall.body-15:
	; i
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %0, align 8
	; cast - cast
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load i64, i64* %7, align 8
	%45 = icmp slt i64 %44, 0
	store i1 %45, i1* %3
	; IfStmt
	%46 = load i1, i1* %3, align 1
	br i1 %46, label %if.then-16, label %if.done-17

if.then-16:
	; AssignStmt
	%47 = load i64, i64* %7, align 8
	%48 = sub i64 0, %47
	store i64 %48, i64* %7
	br label %if.done-17

if.done-17:
	; AssignStmt
	%49 = load i64, i64* %7, align 8
	; cast - cast
	%50 = bitcast i64 %49 to i64
	store i64 %50, i64* %0
	br label %match.done-18

match.done-18:
	br label %if.done-19

if.done-19:
	; ReturnStmt
	%51 = load i64, i64* %0, align 8
	%52 = load i1, i1* %3, align 1
	store {i64, i1} zeroinitializer, {i64, i1}* %8
	%53 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 0
	store i64 %51, i64* %53
	%54 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 1
	store i1 %52, i1* %54
	%55 = load {i64, i1}, {i64, i1}* %8, align 8
	ret {i64, i1} %55
}

define %..string @.strconv-28.append_bits({i8*, i64, i64} %buf, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, i64 %flags) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i64, align 8
	%7 = alloca [65 x i8], align 1
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca i64, align 8
	%11 = alloca i64, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %base, i64* %2
	store i1 zeroinitializer, i1* %3
		store i1 %is_signed, i1* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	store %..string zeroinitializer, %..string* %5
		store %..string %digits, %..string* %5
	store i64 zeroinitializer, i64* %6
		store i64 %flags, i64* %6
	; IfStmt
	%15 = load i64, i64* %2, align 8
	%16 = icmp slt i64 %15, 2
	br i1 %16, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%17 = load i64, i64* %2, align 8
	%18 = icmp sgt i64 %17, 32
	br i1 %18, label %if.then-2, label %if.done-3

if.then-2:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2cf, i64 0, i32 0), i64 29}, i64 336, i64 9, %..string {i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.__str$2d0, i64 0, i32 0), i64 43})
	br label %if.done-3

if.done-3:
	; a
	store [65 x i8] zeroinitializer, [65 x i8]* %7
		; i
	store i64 zeroinitializer, i64* %8
		store i64 65, i64* %8
	; neg
	store i1 zeroinitializer, i1* %9
		; AssignStmt
	%19 = load i64, i64* %1, align 8
	%20 = load i1, i1* %3, align 1
	%21 = load i64, i64* %4, align 8
	%22 = call {i64, i1} @.strconv-28.is_integer_negative(i64 %19, i1 %20, i64 %21)
	%23 = extractvalue {i64, i1} %22, 0
	%24 = extractvalue {i64, i1} %22, 1
	store i64 %23, i64* %1
	store i1 %24, i1* %9
	; ForStmt
	; b
	store i64 zeroinitializer, i64* %10
		%25 = load i64, i64* %2, align 8
	; cast - cast
	%26 = bitcast i64 %25 to i64
	store i64 %26, i64* %10
	br label %for.loop-4

for.loop-4:
	%27 = load i64, i64* %1, align 8
	%28 = load i64, i64* %10, align 8
	%29 = icmp uge i64 %27, %28
	br i1 %29, label %for.body-5, label %for.done-6

for.body-5:
	%30 = load i64, i64* %8, align 8
	%31 = sub i64 %30, 1
	store i64 %31, i64* %8
	; q
	store i64 zeroinitializer, i64* %11
		%32 = load i64, i64* %1, align 8
	%33 = load i64, i64* %10, align 8
	%34 = udiv i64 %32, %33
	store i64 %34, i64* %11
	; AssignStmt
	; IndexExpr
	%35 = load i64, i64* %8, align 8
	%36 = trunc i64 %35 to i32
	%37 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %36
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d1, i64 0, i32 0), i64 29}, i64 348, i64 5, i64 %35, i64 65)
	; IndexExpr
	%38 = load %..string, %..string* %5, align 8
	%39 = extractvalue %..string %38, 0
	%40 = extractvalue %..string %38, 1
	%41 = load i64, i64* %1, align 8
	%42 = load i64, i64* %11, align 8
	%43 = load i64, i64* %10, align 8
	%44 = mul i64 %42, %43
	%45 = sub i64 %41, %44
	; cast - cast
	%46 = bitcast i64 %45 to i64
	%47 = bitcast i64 %46 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d2, i64 0, i32 0), i64 29}, i64 348, i64 17, i64 %47, i64 %40)
	%48 = getelementptr inbounds i8, i8* %39, i64 %47
	%49 = load i8, i8* %48, align 1
	store i8 %49, i8* %37
	; AssignStmt
	%50 = load i64, i64* %11, align 8
	store i64 %50, i64* %1
	br label %for.loop-4

for.done-6:
	%51 = load i64, i64* %8, align 8
	%52 = sub i64 %51, 1
	store i64 %52, i64* %8
	; AssignStmt
	; IndexExpr
	%53 = load i64, i64* %8, align 8
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d3, i64 0, i32 0), i64 29}, i64 353, i64 4, i64 %53, i64 65)
	; IndexExpr
	%56 = load %..string, %..string* %5, align 8
	%57 = extractvalue %..string %56, 0
	%58 = extractvalue %..string %56, 1
	%59 = load i64, i64* %1, align 8
	; cast - cast
	%60 = bitcast i64 %59 to i64
	%61 = bitcast i64 %60 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d4, i64 0, i32 0), i64 29}, i64 353, i64 16, i64 %61, i64 %58)
	%62 = getelementptr inbounds i8, i8* %57, i64 %61
	%63 = load i8, i8* %62, align 1
	store i8 %63, i8* %55
	; IfStmt
	%64 = load i64, i64* %6, align 8
	%65 = and i64 %64, 1
	%66 = icmp ne i64 %65, 0
	br i1 %66, label %if.then-7, label %if.done-21

if.then-7:
	; ok
	store i1 zeroinitializer, i1* %12
		store i1 true, i1* %12
	; MatchStmt
	%67 = load i64, i64* %2, align 8
	%68 = icmp eq i64 %67, 2
	br i1 %68, label %match.case.body-9, label %match.case.next-8

match.case.next-8:
	%69 = icmp eq i64 %67, 8
	br i1 %69, label %match.fall.body-11, label %match.case.next-10

match.case.body-9:
	%70 = load i64, i64* %8, align 8
	%71 = sub i64 %70, 1
	store i64 %71, i64* %8
	; AssignStmt
	; IndexExpr
	%72 = load i64, i64* %8, align 8
	%73 = trunc i64 %72 to i32
	%74 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %73
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d5, i64 0, i32 0), i64 29}, i64 358, i64 19, i64 %72, i64 65)
	store i8 98, i8* %74
	br label %match.done-18

match.case.next-10:
	%75 = icmp eq i64 %67, 10
	br i1 %75, label %match.fall.body-13, label %match.case.next-12

match.fall.body-11:
	%76 = load i64, i64* %8, align 8
	%77 = sub i64 %76, 1
	store i64 %77, i64* %8
	; AssignStmt
	; IndexExpr
	%78 = load i64, i64* %8, align 8
	%79 = trunc i64 %78 to i32
	%80 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %79
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d6, i64 0, i32 0), i64 29}, i64 359, i64 19, i64 %78, i64 65)
	store i8 111, i8* %80
	br label %match.done-18

match.case.next-12:
	%81 = icmp eq i64 %67, 12
	br i1 %81, label %match.fall.body-15, label %match.case.next-14

match.fall.body-13:
	%82 = load i64, i64* %8, align 8
	%83 = sub i64 %82, 1
	store i64 %83, i64* %8
	; AssignStmt
	; IndexExpr
	%84 = load i64, i64* %8, align 8
	%85 = trunc i64 %84 to i32
	%86 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %85
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d7, i64 0, i32 0), i64 29}, i64 360, i64 19, i64 %84, i64 65)
	store i8 100, i8* %86
	br label %match.done-18

match.case.next-14:
	%87 = icmp eq i64 %67, 16
	br i1 %87, label %match.fall.body-17, label %match.case.next-16

match.fall.body-15:
	%88 = load i64, i64* %8, align 8
	%89 = sub i64 %88, 1
	store i64 %89, i64* %8
	; AssignStmt
	; IndexExpr
	%90 = load i64, i64* %8, align 8
	%91 = trunc i64 %90 to i32
	%92 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %91
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d8, i64 0, i32 0), i64 29}, i64 361, i64 19, i64 %90, i64 65)
	store i8 122, i8* %92
	br label %match.done-18

match.case.next-16:
	; AssignStmt
	store i1 false, i1* %12
	br label %match.done-18

match.fall.body-17:
	%93 = load i64, i64* %8, align 8
	%94 = sub i64 %93, 1
	store i64 %94, i64* %8
	; AssignStmt
	; IndexExpr
	%95 = load i64, i64* %8, align 8
	%96 = trunc i64 %95 to i32
	%97 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %96
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2d9, i64 0, i32 0), i64 29}, i64 362, i64 19, i64 %95, i64 65)
	store i8 120, i8* %97
	br label %match.done-18

match.done-18:
	; IfStmt
	%98 = load i1, i1* %12, align 1
	br i1 %98, label %if.then-19, label %if.done-20

if.then-19:
	%99 = load i64, i64* %8, align 8
	%100 = sub i64 %99, 1
	store i64 %100, i64* %8
	; AssignStmt
	; IndexExpr
	%101 = load i64, i64* %8, align 8
	%102 = trunc i64 %101 to i32
	%103 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %102
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2da, i64 0, i32 0), i64 29}, i64 367, i64 6, i64 %101, i64 65)
	store i8 48, i8* %103
	br label %if.done-20

if.done-20:
	br label %if.done-21

if.done-21:
	; IfStmt
	%104 = load i1, i1* %9, align 1
	br i1 %104, label %if.then-22, label %if.else-23

if.then-22:
	%105 = load i64, i64* %8, align 8
	%106 = sub i64 %105, 1
	store i64 %106, i64* %8
	; AssignStmt
	; IndexExpr
	%107 = load i64, i64* %8, align 8
	%108 = trunc i64 %107 to i32
	%109 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %108
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2db, i64 0, i32 0), i64 29}, i64 372, i64 10, i64 %107, i64 65)
	store i8 45, i8* %109
	br label %if.done-29

if.else-23:
	; IfStmt
	%110 = load i64, i64* %6, align 8
	%111 = and i64 %110, 2
	%112 = icmp ne i64 %111, 0
	br i1 %112, label %if.then-24, label %if.else-25

if.then-24:
	%113 = load i64, i64* %8, align 8
	%114 = sub i64 %113, 1
	store i64 %114, i64* %8
	; AssignStmt
	; IndexExpr
	%115 = load i64, i64* %8, align 8
	%116 = trunc i64 %115 to i32
	%117 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %116
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2dc, i64 0, i32 0), i64 29}, i64 374, i64 10, i64 %115, i64 65)
	store i8 43, i8* %117
	br label %if.done-28

if.else-25:
	; IfStmt
	%118 = load i64, i64* %6, align 8
	%119 = and i64 %118, 4
	%120 = icmp ne i64 %119, 0
	br i1 %120, label %if.then-26, label %if.done-27

if.then-26:
	%121 = load i64, i64* %8, align 8
	%122 = sub i64 %121, 1
	store i64 %122, i64* %8
	; AssignStmt
	; IndexExpr
	%123 = load i64, i64* %8, align 8
	%124 = trunc i64 %123 to i32
	%125 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %124
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2dd, i64 0, i32 0), i64 29}, i64 376, i64 10, i64 %123, i64 65)
	store i8 32, i8* %125
	br label %if.done-27

if.done-27:
	br label %if.done-28

if.done-28:
	br label %if.done-29

if.done-29:
	; append
	%126 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%127 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%128 = load i64, i64* %8, align 8
	%129 = load [65 x i8], [65 x i8]* %7, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2de, i64 0, i32 0), i64 29}, i64 380, i64 17, i64 %128, i64 65, i64 65)
	%130 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 0
	%131 = getelementptr inbounds i8, i8* %130, i64 %128
	%132 = sub i64 65, %128
	%133 = sub i64 65, %128
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%134 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %131, i8** %134
	%135 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %132, i64* %135
	%136 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %133, i64* %136
	%137 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%138 = extractvalue {i8*, i64, i64} %137, 0
	%139 = extractvalue {i8*, i64, i64} %137, 1
	%140 = bitcast i8* %138 to %..rawptr
	%141 = call i64 @.__slice_append(%..rawptr %126, i64 1, i64 1, %..rawptr %140, i64 %139)
	; ReturnStmt
	%142 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; cast - cast
	%143 = extractvalue {i8*, i64, i64} %142, 0
	%144 = extractvalue {i8*, i64, i64} %142, 1
	store %..string zeroinitializer, %..string* %14
	%145 = getelementptr inbounds %..string, %..string* %14, i64 0, i32 0
	%146 = getelementptr inbounds %..string, %..string* %14, i64 0, i32 1
	store i8* %143, i8** %145
	store i64 %144, i64* %146
	%147 = load %..string, %..string* %14, align 8
	ret %..string %147
}

define {i32, i1} @.jaze_gl_util-30.CreateAndCompileShader(i32 %type, %..string %source) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [1 x %..any], align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..string, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [1 x %..any], align 8
	%14 = alloca %..string, align 8
	%15 = alloca %..any, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [1 x %..any], align 8
	%18 = alloca {i32, i1}, align 4
	%19 = alloca {i32, i1}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %type, i32* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %source, %..string* %1
	; shader
	store i32 zeroinitializer, i32* %2
		; AssignStmt
	; SelectorExpr
	%20 = load i32, i32* %0, align 8
	%21 = call i32 @.jaze_gl-14.CreateShader(i32 %20)
	store i32 %21, i32* %2
	; SelectorExpr
	%22 = load i32, i32* %2, align 4
	%23 = load %..string, %..string* %1, align 8
	call void @.jaze_gl-14.ShaderSource-2686136262656(i32 %22, %..string %23)
	; SelectorExpr
	%24 = load i32, i32* %2, align 4
	call void @.jaze_gl-14.CompileShader(i32 %24)
	; success
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	%25 = load i32, i32* %2, align 4
	%26 = call i32 @.jaze_gl-14.GetShaderValue(i32 %25, i32 35713)
	store i32 %26, i32* %3
	; IfStmt
	%27 = load i32, i32* %3, align 4
	%28 = icmp eq i32 %27, 0
	br i1 %28, label %if.then-1, label %if.done-2

if.then-1:
	; logSize
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	%29 = load i32, i32* %2, align 4
	%30 = call i32 @.jaze_gl-14.GetShaderValue(i32 %29, i32 35716)
	store i32 %30, i32* %4
	; logBytes
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
		; make
	%31 = load i32, i32* %4, align 4
	%32 = sext i32 %31 to i64
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2df, i64 0, i32 0), i64 39}, i64 14, i64 34, i64 0, i64 %32, i64 %32)
	%33 = mul i64 1, %32
	%34 = call %..rawptr @.alloc_align(i64 %33, i64 1)
	%35 = bitcast %..rawptr %34 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%36 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %35, i8** %36
	%37 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %32, i64* %37
	%38 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %32, i64* %38
	%39 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	store {i8*, i64, i64} %39, {i8*, i64, i64}* %5
	; SelectorExpr
	%40 = load void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)** @.jaze_gl-14._GetShaderInfoLog, align 8
	%41 = load i32, i32* %2, align 4
	; cast - cast
	%42 = load i32, i32* %4, align 4
	%43 = getelementptr inbounds i32, i32* %4, i64 0
	; IndexExpr
	%44 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%45 = extractvalue {i8*, i64, i64} %44, 0
	%46 = extractvalue {i8*, i64, i64} %44, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2e0, i64 0, i32 0), i64 39}, i64 15, i64 76, i64 0, i64 %46)
	%47 = getelementptr inbounds i8, i8* %45, i64 0
	%48 = getelementptr inbounds i8, i8* %47, i64 0
	call ccc void %40(i32 %41, i32 %42, i32* %43, i8* %48)
	; SelectorExpr
	%49 = load i32, i32* %0, align 8
	store %..any zeroinitializer, %..any* %7
	%50 = bitcast i32* %0 to %..rawptr
	%51 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 173
	%52 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%53 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %51, %Type_Info** %52
	store %..rawptr %50, %..rawptr* %53
	%54 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [1 x %..any] zeroinitializer, [1 x %..any]* %9
	%55 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	store %..any %54, %..any* %55
	%56 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	%57 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %56, %..any** %57
	%58 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %58
	%59 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %59
	%60 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%61 = call i64 @.fmt-4.printf(%..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.__str$2e1, i64 0, i32 0), i64 28}, {%..any*, i64, i64} %60)
	; SelectorExpr
	; SelectorExpr
	; IndexExpr
	%62 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%63 = extractvalue {i8*, i64, i64} %62, 0
	%64 = extractvalue {i8*, i64, i64} %62, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.__str$2e2, i64 0, i32 0), i64 39}, i64 18, i64 52, i64 0, i64 %64)
	%65 = getelementptr inbounds i8, i8* %63, i64 0
	%66 = getelementptr inbounds i8, i8* %65, i64 0
	%67 = call %..string @.strings-9.to_odin_string(i8* %66)
	store %..any zeroinitializer, %..any* %10
	store %..string zeroinitializer, %..string* %11
	store %..string %67, %..string* %11
	%68 = bitcast %..string* %11 to %..rawptr
	%69 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%70 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%71 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %69, %Type_Info** %70
	store %..rawptr %68, %..rawptr* %71
	%72 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [1 x %..any] zeroinitializer, [1 x %..any]* %13
	%73 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	store %..any %72, %..any* %73
	%74 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %74, %..any** %75
	%76 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 1, i64* %76
	%77 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 1, i64* %77
	%78 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%79 = call i64 @.fmt-4.print({%..any*, i64, i64} %78)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %14
	store %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$2e3, i64 0, i32 0), i64 26}, %..string* %14
	%80 = load %..string, %..string* %14, align 8
	store %..any zeroinitializer, %..any* %15
	%81 = bitcast %..string* %14 to %..rawptr
	%82 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%83 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%84 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	store %Type_Info* %82, %Type_Info** %83
	store %..rawptr %81, %..rawptr* %84
	%85 = load %..any, %..any* %15, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [1 x %..any] zeroinitializer, [1 x %..any]* %17
	%86 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	store %..any %85, %..any* %86
	%87 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	%88 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %87, %..any** %88
	%89 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 1, i64* %89
	%90 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 1, i64* %90
	%91 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	%92 = call i64 @.fmt-4.println({%..any*, i64, i64} %91)
	; ReturnStmt
	%93 = load i32, i32* %2, align 4
	store {i32, i1} zeroinitializer, {i32, i1}* %18
	%94 = getelementptr inbounds {i32, i1}, {i32, i1}* %18, i64 0, i32 0
	store i32 %93, i32* %94
	%95 = getelementptr inbounds {i32, i1}, {i32, i1}* %18, i64 0, i32 1
	store i1 false, i1* %95
	%96 = load {i32, i1}, {i32, i1}* %18, align 4
	ret {i32, i1} %96

if.done-2:
	; ReturnStmt
	%97 = load i32, i32* %2, align 4
	store {i32, i1} zeroinitializer, {i32, i1}* %19
	%98 = getelementptr inbounds {i32, i1}, {i32, i1}* %19, i64 0, i32 0
	store i32 %97, i32* %98
	%99 = getelementptr inbounds {i32, i1}, {i32, i1}* %19, i64 0, i32 1
	store i1 true, i1* %99
	%100 = load {i32, i1}, {i32, i1}* %19, align 4
	ret {i32, i1} %100
}

define void @.decimal-32.trim(%decimal-32.Decimal* %a) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	; ForStmt
	br label %for.loop-1

for.loop-1:
	; SelectorExpr
	%1 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%2 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %1, i64 0
	%3 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %2, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	%5 = icmp sgt i64 %4, 0
	br i1 %5, label %cmp.and-2, label %for.done-4

cmp.and-2:
	; IndexExpr
	; SelectorExpr
	%6 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%7 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %6, i64 0
	%8 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %7, i64 0, i32 2
	; SelectorExpr
	%9 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%10 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %9, i64 0
	%11 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %10, i64 0, i32 0
	%12 = load i64, i64* %11, align 8
	%13 = sub i64 %12, 1
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [384 x i8], [384 x i8]* %8, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2e4, i64 0, i32 0), i64 29}, i64 52, i64 32, i64 %13, i64 384)
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 48
	br i1 %17, label %for.body-3, label %for.done-4

for.body-3:
	; SelectorExpr
	%18 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%19 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %18, i64 0
	%20 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %19, i64 0, i32 0
	%21 = load i64, i64* %20, align 8
	%22 = sub i64 %21, 1
	store i64 %22, i64* %20
	br label %for.loop-1

for.done-4:
	; IfStmt
	; SelectorExpr
	%23 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%24 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %23, i64 0
	%25 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %24, i64 0, i32 0
	%26 = load i64, i64* %25, align 8
	%27 = icmp eq i64 %26, 0
	br i1 %27, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%28 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%29 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %28, i64 0
	%30 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %29, i64 0, i32 1
	store i64 0, i64* %30
	br label %if.done-6

if.done-6:
	ret void
}

define void @.decimal-32.assign(%decimal-32.Decimal* %a, i64 %i) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca [32 x i8], align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %i, i64* %1
	; buf
	store [32 x i8] zeroinitializer, [32 x i8]* %2
		; n
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%5 = load i64, i64* %1, align 8
	%6 = icmp ugt i64 %5, 0
	br i1 %6, label %for.body-2, label %for.done-3

for.body-2:
	; j
	store i64 zeroinitializer, i64* %4
		%7 = load i64, i64* %1, align 8
	%8 = udiv i64 %7, 10
	store i64 %8, i64* %4
	; AssignStmt
	%9 = load i64, i64* %4, align 8
	%10 = mul i64 10, %9
	%11 = load i64, i64* %1, align 8
	%12 = sub i64 %11, %10
	store i64 %12, i64* %1
	; AssignStmt
	; IndexExpr
	%13 = load i64, i64* %3, align 8
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2e5, i64 0, i32 0), i64 29}, i64 67, i64 7, i64 %13, i64 32)
	%16 = load i64, i64* %1, align 8
	%17 = add i64 48, %16
	; cast - cast
	%18 = trunc i64 %17 to i8
	store i8 %18, i8* %15
	%19 = load i64, i64* %3, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %3
	; AssignStmt
	%21 = load i64, i64* %4, align 8
	store i64 %21, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ForStmt
	%25 = load i64, i64* %3, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %3
	br label %for.loop-4

for.loop-4:
	%27 = load i64, i64* %3, align 8
	%28 = icmp sge i64 %27, 0
	br i1 %28, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%29 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%30 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %29, i64 0
	%31 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %30, i64 0, i32 2
	; SelectorExpr
	%32 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%33 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %32, i64 0
	%34 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %33, i64 0, i32 0
	%35 = load i64, i64* %34, align 8
	%36 = trunc i64 %35 to i32
	%37 = getelementptr inbounds [384 x i8], [384 x i8]* %31, i64 0, i32 %36
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2e6, i64 0, i32 0), i64 29}, i64 74, i64 14, i64 %35, i64 384)
	; IndexExpr
	%38 = load i64, i64* %3, align 8
	%39 = trunc i64 %38 to i32
	%40 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i32 %39
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2e7, i64 0, i32 0), i64 29}, i64 74, i64 27, i64 %38, i64 32)
	%41 = load i8, i8* %40, align 1
	store i8 %41, i8* %37
	; SelectorExpr
	%42 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%43 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %42, i64 0
	%44 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %43, i64 0, i32 0
	%45 = load i64, i64* %44, align 8
	%46 = add i64 %45, 1
	store i64 %46, i64* %44
	%47 = load i64, i64* %3, align 8
	%48 = sub i64 %47, 1
	store i64 %48, i64* %3
	br label %for.loop-4

for.done-6:
	; AssignStmt
	; SelectorExpr
	%49 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%50 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %49, i64 0
	%51 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %50, i64 0, i32 1
	; SelectorExpr
	%52 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%53 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %52, i64 0
	%54 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %53, i64 0, i32 0
	%55 = load i64, i64* %54, align 8
	store i64 %55, i64* %51
	%56 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	call void @.decimal-32.trim(%decimal-32.Decimal* %56)
	ret void
}

define void @.decimal-32.shift_right(%decimal-32.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; r
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; w
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; n
	store i64 zeroinitializer, i64* %4
		; ForStmt
	br label %for.loop-1

for.loop-1:
	%10 = load i64, i64* %4, align 8
	%11 = load i64, i64* %1, align 8
	%12 = lshr i64 %10, %11
	%13 = icmp eq i64 %12, 0
	br i1 %13, label %for.body-2, label %for.done-10

for.body-2:
	; IfStmt
	%14 = load i64, i64* %2, align 8
	; SelectorExpr
	%15 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%16 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %15, i64 0
	%17 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %16, i64 0, i32 0
	%18 = load i64, i64* %17, align 8
	%19 = icmp sge i64 %14, %18
	br i1 %19, label %if.then-3, label %if.done-9

if.then-3:
	; IfStmt
	%20 = load i64, i64* %4, align 8
	%21 = icmp eq i64 %20, 0
	br i1 %21, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ReturnStmt
	ret void

if.done-5:
	; ForStmt
	br label %for.loop-6

for.loop-6:
	%25 = load i64, i64* %4, align 8
	%26 = load i64, i64* %1, align 8
	%27 = lshr i64 %25, %26
	%28 = icmp eq i64 %27, 0
	br i1 %28, label %for.body-7, label %for.done-8

for.body-7:
	; AssignStmt
	%29 = load i64, i64* %4, align 8
	%30 = mul i64 %29, 10
	store i64 %30, i64* %4
	%31 = load i64, i64* %2, align 8
	%32 = add i64 %31, 1
	store i64 %32, i64* %2
	br label %for.loop-6

for.done-8:
	; break
	br label %for.done-10

if.done-9:
	; c
	store i64 zeroinitializer, i64* %5
		; IndexExpr
	; SelectorExpr
	%33 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %34, i64 0, i32 2
	%36 = load i64, i64* %2, align 8
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %37
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2e8, i64 0, i32 0), i64 29}, i64 102, i64 27, i64 %36, i64 384)
	%39 = load i8, i8* %38, align 1
	; cast - cast
	%40 = zext i8 %39 to i64
	store i64 %40, i64* %5
	; AssignStmt
	%41 = load i64, i64* %4, align 8
	%42 = mul i64 %41, 10
	%43 = load i64, i64* %5, align 8
	%44 = add i64 %42, %43
	%45 = sub i64 %44, 48
	store i64 %45, i64* %4
	%46 = load i64, i64* %2, align 8
	%47 = add i64 %46, 1
	store i64 %47, i64* %2
	br label %for.loop-1

for.done-10:
	; AssignStmt
	; SelectorExpr
	%48 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %49, i64 0, i32 1
	%51 = load i64, i64* %2, align 8
	%52 = sub i64 %51, 1
	%53 = load i64, i64* %50, align 8
	%54 = sub i64 %53, %52
	store i64 %54, i64* %50
	; mask
	store i64 zeroinitializer, i64* %6
		%55 = load i64, i64* %1, align 8
	%56 = shl i64 1, %55
	%57 = bitcast i64 %56 to i64
	%58 = sub i64 %57, 1
	%59 = bitcast i64 %58 to i64
	store i64 %59, i64* %6
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%60 = load i64, i64* %2, align 8
	; SelectorExpr
	%61 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%62 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %61, i64 0
	%63 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %62, i64 0, i32 0
	%64 = load i64, i64* %63, align 8
	%65 = icmp slt i64 %60, %64
	br i1 %65, label %for.body-12, label %for.done-13

for.body-12:
	; c
	store i64 zeroinitializer, i64* %7
		; IndexExpr
	; SelectorExpr
	%66 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%67 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %66, i64 0
	%68 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %67, i64 0, i32 2
	%69 = load i64, i64* %2, align 8
	%70 = trunc i64 %69 to i32
	%71 = getelementptr inbounds [384 x i8], [384 x i8]* %68, i64 0, i32 %70
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2e9, i64 0, i32 0), i64 29}, i64 110, i64 27, i64 %69, i64 384)
	%72 = load i8, i8* %71, align 1
	; cast - cast
	%73 = zext i8 %72 to i64
	store i64 %73, i64* %7
	; dig
	store i64 zeroinitializer, i64* %8
		%74 = load i64, i64* %4, align 8
	%75 = load i64, i64* %1, align 8
	%76 = lshr i64 %74, %75
	store i64 %76, i64* %8
	; AssignStmt
	%77 = load i64, i64* %6, align 8
	%78 = load i64, i64* %4, align 8
	%79 = and i64 %78, %77
	store i64 %79, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%80 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%81 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %80, i64 0
	%82 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %81, i64 0, i32 2
	%83 = load i64, i64* %3, align 8
	%84 = trunc i64 %83 to i32
	%85 = getelementptr inbounds [384 x i8], [384 x i8]* %82, i64 0, i32 %84
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ea, i64 0, i32 0), i64 29}, i64 113, i64 12, i64 %83, i64 384)
	%86 = load i64, i64* %8, align 8
	%87 = add i64 48, %86
	; cast - cast
	%88 = trunc i64 %87 to i8
	store i8 %88, i8* %85
	%89 = load i64, i64* %3, align 8
	%90 = add i64 %89, 1
	store i64 %90, i64* %3
	; AssignStmt
	%91 = load i64, i64* %4, align 8
	%92 = mul i64 %91, 10
	%93 = load i64, i64* %7, align 8
	%94 = add i64 %92, %93
	%95 = sub i64 %94, 48
	store i64 %95, i64* %4
	%96 = load i64, i64* %2, align 8
	%97 = add i64 %96, 1
	store i64 %97, i64* %2
	br label %for.loop-11

for.done-13:
	; ForStmt
	br label %for.loop-14

for.loop-14:
	%98 = load i64, i64* %4, align 8
	%99 = icmp ugt i64 %98, 0
	br i1 %99, label %for.body-15, label %for.done-21

for.body-15:
	; dig
	store i64 zeroinitializer, i64* %9
		%100 = load i64, i64* %4, align 8
	%101 = load i64, i64* %1, align 8
	%102 = lshr i64 %100, %101
	store i64 %102, i64* %9
	; AssignStmt
	%103 = load i64, i64* %6, align 8
	%104 = load i64, i64* %4, align 8
	%105 = and i64 %104, %103
	store i64 %105, i64* %4
	; IfStmt
	%106 = load i64, i64* %3, align 8
	%107 = icmp slt i64 %106, 384
	br i1 %107, label %if.then-16, label %if.else-17

if.then-16:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%108 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%109 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %108, i64 0
	%110 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %109, i64 0, i32 2
	%111 = load i64, i64* %3, align 8
	%112 = trunc i64 %111 to i32
	%113 = getelementptr inbounds [384 x i8], [384 x i8]* %110, i64 0, i32 %112
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2eb, i64 0, i32 0), i64 29}, i64 122, i64 13, i64 %111, i64 384)
	%114 = load i64, i64* %9, align 8
	%115 = add i64 48, %114
	; cast - cast
	%116 = trunc i64 %115 to i8
	store i8 %116, i8* %113
	%117 = load i64, i64* %3, align 8
	%118 = add i64 %117, 1
	store i64 %118, i64* %3
	br label %if.done-20

if.else-17:
	; IfStmt
	%119 = load i64, i64* %9, align 8
	%120 = icmp ugt i64 %119, 0
	br i1 %120, label %if.then-18, label %if.done-19

if.then-18:
	; AssignStmt
	; SelectorExpr
	%121 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%122 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %121, i64 0
	%123 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %122, i64 0, i32 4
	store i1 true, i1* %123
	br label %if.done-19

if.done-19:
	br label %if.done-20

if.done-20:
	; AssignStmt
	%124 = load i64, i64* %4, align 8
	%125 = mul i64 %124, 10
	store i64 %125, i64* %4
	br label %for.loop-14

for.done-21:
	; AssignStmt
	; SelectorExpr
	%126 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%127 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %126, i64 0
	%128 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %127, i64 0, i32 0
	%129 = load i64, i64* %3, align 8
	store i64 %129, i64* %128
	%130 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	call void @.decimal-32.trim(%decimal-32.Decimal* %130)
	ret void
}

define void @.decimal-32.shift_left(%decimal-32.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; delta
	store i64 zeroinitializer, i64* %2
		%10 = load i64, i64* %1, align 8
	%11 = udiv i64 %10, 4
	; cast - cast
	%12 = bitcast i64 %11 to i64
	store i64 %12, i64* %2
	; r
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%13 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%14 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %13, i64 0
	%15 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %14, i64 0, i32 0
	%16 = load i64, i64* %15, align 8
	store i64 %16, i64* %3
	; w
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%17 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%18 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %17, i64 0
	%19 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %18, i64 0, i32 0
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %2, align 8
	%22 = add i64 %20, %21
	store i64 %22, i64* %4
	; n
	store i64 zeroinitializer, i64* %5
		; ForStmt
	%23 = load i64, i64* %3, align 8
	%24 = sub i64 %23, 1
	store i64 %24, i64* %3
	br label %for.loop-1

for.loop-1:
	%25 = load i64, i64* %3, align 8
	%26 = icmp sge i64 %25, 0
	br i1 %26, label %for.body-2, label %for.done-8

for.body-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%27 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%28 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %27, i64 0
	%29 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %28, i64 0, i32 2
	%30 = load i64, i64* %3, align 8
	%31 = trunc i64 %30 to i32
	%32 = getelementptr inbounds [384 x i8], [384 x i8]* %29, i64 0, i32 %31
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ec, i64 0, i32 0), i64 29}, i64 143, i64 28, i64 %30, i64 384)
	%33 = load i8, i8* %32, align 1
	; cast - cast
	%34 = zext i8 %33 to i64
	%35 = sub i64 %34, 48
	%36 = load i64, i64* %1, align 8
	%37 = shl i64 %35, %36
	%38 = load i64, i64* %5, align 8
	%39 = add i64 %38, %37
	store i64 %39, i64* %5
	; quo
	store i64 zeroinitializer, i64* %6
		%40 = load i64, i64* %5, align 8
	%41 = udiv i64 %40, 10
	store i64 %41, i64* %6
	; rem
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %5, align 8
	%43 = load i64, i64* %6, align 8
	%44 = mul i64 10, %43
	%45 = sub i64 %42, %44
	store i64 %45, i64* %7
	%46 = load i64, i64* %4, align 8
	%47 = sub i64 %46, 1
	store i64 %47, i64* %4
	; IfStmt
	%48 = load i64, i64* %4, align 8
	%49 = icmp slt i64 %48, 384
	br i1 %49, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%50 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%51 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %50, i64 0
	%52 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %51, i64 0, i32 2
	%53 = load i64, i64* %4, align 8
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [384 x i8], [384 x i8]* %52, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ed, i64 0, i32 0), i64 29}, i64 148, i64 13, i64 %53, i64 384)
	%56 = load i64, i64* %7, align 8
	%57 = add i64 48, %56
	; cast - cast
	%58 = trunc i64 %57 to i8
	store i8 %58, i8* %55
	br label %if.done-7

if.else-4:
	; IfStmt
	%59 = load i64, i64* %7, align 8
	%60 = icmp ne i64 %59, 0
	br i1 %60, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%61 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%62 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %61, i64 0
	%63 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %62, i64 0, i32 4
	store i1 true, i1* %63
	br label %if.done-6

if.done-6:
	br label %if.done-7

if.done-7:
	; AssignStmt
	%64 = load i64, i64* %6, align 8
	store i64 %64, i64* %5
	%65 = load i64, i64* %3, align 8
	%66 = sub i64 %65, 1
	store i64 %66, i64* %3
	br label %for.loop-1

for.done-8:
	; ForStmt
	br label %for.loop-9

for.loop-9:
	%67 = load i64, i64* %5, align 8
	%68 = icmp ugt i64 %67, 0
	br i1 %68, label %for.body-10, label %for.done-16

for.body-10:
	; quo
	store i64 zeroinitializer, i64* %8
		%69 = load i64, i64* %5, align 8
	%70 = udiv i64 %69, 10
	store i64 %70, i64* %8
	; rem
	store i64 zeroinitializer, i64* %9
		%71 = load i64, i64* %5, align 8
	%72 = load i64, i64* %8, align 8
	%73 = mul i64 10, %72
	%74 = sub i64 %71, %73
	store i64 %74, i64* %9
	%75 = load i64, i64* %4, align 8
	%76 = sub i64 %75, 1
	store i64 %76, i64* %4
	; IfStmt
	%77 = load i64, i64* %4, align 8
	%78 = icmp slt i64 %77, 384
	br i1 %78, label %if.then-11, label %if.else-12

if.then-11:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%79 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%80 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %79, i64 0
	%81 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %80, i64 0, i32 2
	%82 = load i64, i64* %4, align 8
	%83 = trunc i64 %82 to i32
	%84 = getelementptr inbounds [384 x i8], [384 x i8]* %81, i64 0, i32 %83
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ee, i64 0, i32 0), i64 29}, i64 160, i64 13, i64 %82, i64 384)
	%85 = load i64, i64* %9, align 8
	%86 = add i64 48, %85
	; cast - cast
	%87 = trunc i64 %86 to i8
	store i8 %87, i8* %84
	br label %if.done-15

if.else-12:
	; IfStmt
	%88 = load i64, i64* %9, align 8
	%89 = icmp ne i64 %88, 0
	br i1 %89, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; SelectorExpr
	%90 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%91 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %90, i64 0
	%92 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %91, i64 0, i32 4
	store i1 true, i1* %92
	br label %if.done-14

if.done-14:
	br label %if.done-15

if.done-15:
	; AssignStmt
	%93 = load i64, i64* %8, align 8
	store i64 %93, i64* %5
	br label %for.loop-9

for.done-16:
	; AssignStmt
	; SelectorExpr
	%94 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%95 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %94, i64 0
	%96 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %95, i64 0, i32 0
	%97 = load i64, i64* %2, align 8
	%98 = load i64, i64* %96, align 8
	%99 = add i64 %98, %97
	store i64 %99, i64* %96
	; AssignStmt
	; SelectorExpr
	%100 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%101 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %100, i64 0
	%102 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %101, i64 0, i32 0
	; min
	; SelectorExpr
	%103 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%104 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %103, i64 0
	%105 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %104, i64 0, i32 0
	%106 = load i64, i64* %105, align 8
	%107 = icmp slt i64 %106, 384
	%108 = select i1 %107, i64 %106, i64 384
	store i64 %108, i64* %102
	; AssignStmt
	; SelectorExpr
	%109 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%110 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %109, i64 0
	%111 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %110, i64 0, i32 1
	%112 = load i64, i64* %2, align 8
	%113 = load i64, i64* %111, align 8
	%114 = add i64 %113, %112
	store i64 %114, i64* %111
	%115 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	call void @.decimal-32.trim(%decimal-32.Decimal* %115)
	ret void
}

define void @.decimal-32.shift(%decimal-32.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; MatchStmt
	; SelectorExpr
	%2 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%3 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %2, i64 0
	%4 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %3, i64 0, i32 0
	%5 = load i64, i64* %4, align 8
	%6 = icmp eq i64 %5, 0
	%7 = icmp eq i1 true, %6
	br i1 %7, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%8 = load i64, i64* %1, align 8
	%9 = icmp sgt i64 %8, 0
	%10 = icmp eq i1 true, %9
	br i1 %10, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	br label %match.done-13

match.case.next-3:
	%11 = load i64, i64* %1, align 8
	%12 = icmp slt i64 %11, 0
	%13 = icmp eq i1 true, %12
	br i1 %13, label %match.fall.body-9, label %match.case.next-8

match.fall.body-4:
	; ForStmt
	br label %for.loop-5

for.loop-5:
	%14 = load i64, i64* %1, align 8
	%15 = icmp sgt i64 %14, 60
	br i1 %15, label %for.body-6, label %for.done-7

for.body-6:
	%16 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	call void @.decimal-32.shift_left(%decimal-32.Decimal* %16, i64 60)
	; AssignStmt
	%17 = load i64, i64* %1, align 8
	%18 = sub i64 %17, 60
	store i64 %18, i64* %1
	br label %for.loop-5

for.done-7:
	%19 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%20 = load i64, i64* %1, align 8
	; cast - cast
	%21 = bitcast i64 %20 to i64
	call void @.decimal-32.shift_left(%decimal-32.Decimal* %19, i64 %21)
	br label %match.done-13

match.case.next-8:
	br label %match.done-13

match.fall.body-9:
	; ForStmt
	br label %for.loop-10

for.loop-10:
	%22 = load i64, i64* %1, align 8
	%23 = icmp slt i64 %22, -60
	br i1 %23, label %for.body-11, label %for.done-12

for.body-11:
	%24 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	call void @.decimal-32.shift_right(%decimal-32.Decimal* %24, i64 60)
	; AssignStmt
	%25 = load i64, i64* %1, align 8
	%26 = add i64 %25, 60
	store i64 %26, i64* %1
	br label %for.loop-10

for.done-12:
	%27 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%28 = load i64, i64* %1, align 8
	%29 = sub i64 0, %28
	; cast - cast
	%30 = bitcast i64 %29 to i64
	call void @.decimal-32.shift_right(%decimal-32.Decimal* %27, i64 %30)
	br label %match.done-13

match.done-13:
	ret void
}

define i1 @.decimal-32.can_round_up(%decimal-32.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret i1 false

if.done-3:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	%10 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%11 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %10, i64 0
	%12 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %11, i64 0, i32 2
	%13 = load i64, i64* %1, align 8
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [384 x i8], [384 x i8]* %12, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2ef, i64 0, i32 0), i64 29}, i64 196, i64 14, i64 %13, i64 384)
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 53
	br i1 %17, label %cmp.and-4, label %if.done-10

cmp.and-4:
	%18 = load i64, i64* %1, align 8
	%19 = add i64 %18, 1
	; SelectorExpr
	%20 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%21 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %20, i64 0
	%22 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %21, i64 0, i32 0
	%23 = load i64, i64* %22, align 8
	%24 = icmp eq i64 %19, %23
	br i1 %24, label %if.then-5, label %if.done-10

if.then-5:
	; IfStmt
	; SelectorExpr
	%25 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%26 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %25, i64 0
	%27 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %26, i64 0, i32 4
	%28 = load i1, i1* %27, align 1
	br i1 %28, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	ret i1 true

if.done-7:
	; ReturnStmt
	%29 = load i64, i64* %1, align 8
	%30 = icmp sgt i64 %29, 0
	%31 = load i64, i64* %1, align 8
	%32 = icmp sgt i64 %31, 0
	br i1 %32, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; IndexExpr
	; SelectorExpr
	%33 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %34, i64 0, i32 2
	%36 = load i64, i64* %1, align 8
	%37 = sub i64 %36, 1
	%38 = trunc i64 %37 to i32
	%39 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %38
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2f0, i64 0, i32 0), i64 29}, i64 200, i64 30, i64 %37, i64 384)
	%40 = load i8, i8* %39, align 1
	%41 = sub i8 %40, 48
	%42 = urem i8 %41, 2
	%43 = icmp ne i8 %42, 0
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%44 = phi i1 [ false, %if.done-7 ], [ %43, %logical.cmp.rhs-8 ]
	ret i1 %44

if.done-10:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%45 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%46 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %45, i64 0
	%47 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %46, i64 0, i32 2
	%48 = load i64, i64* %1, align 8
	%49 = trunc i64 %48 to i32
	%50 = getelementptr inbounds [384 x i8], [384 x i8]* %47, i64 0, i32 %49
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2f1, i64 0, i32 0), i64 29}, i64 203, i64 18, i64 %48, i64 384)
	%51 = load i8, i8* %50, align 1
	%52 = icmp uge i8 %51, 53
	ret i1 %52
}

define void @.decimal-32.round(%decimal-32.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; IfStmt
	%10 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = call i1 @.decimal-32.can_round_up(%decimal-32.Decimal* %10, i64 %11)
	br i1 %12, label %if.then-4, label %if.else-5

if.then-4:
	%13 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%14 = load i64, i64* %1, align 8
	call void @.decimal-32.round_up(%decimal-32.Decimal* %13, i64 %14)
	br label %if.done-6

if.else-5:
	%15 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%16 = load i64, i64* %1, align 8
	call void @.decimal-32.round_down(%decimal-32.Decimal* %15, i64 %16)
	br label %if.done-6

if.done-6:
	ret void
}

define void @.decimal-32.round_up(%decimal-32.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i8, align 1
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%4 = load i64, i64* %1, align 8
	%5 = icmp slt i64 %4, 0
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %8, i64 0, i32 0
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	br i1 %11, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %2
		%12 = load i64, i64* %1, align 8
	%13 = sub i64 %12, 1
	store i64 %13, i64* %2
	br label %for.loop-4

for.loop-4:
	%14 = load i64, i64* %2, align 8
	%15 = icmp sge i64 %14, 0
	br i1 %15, label %for.body-5, label %for.done-8

for.body-5:
	; IfStmt
	; c
	store i8 zeroinitializer, i8* %3
		; IndexExpr
	; SelectorExpr
	%16 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%17 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %16, i64 0
	%18 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %17, i64 0, i32 2
	%19 = load i64, i64* %2, align 8
	%20 = trunc i64 %19 to i32
	%21 = getelementptr inbounds [384 x i8], [384 x i8]* %18, i64 0, i32 %20
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2f2, i64 0, i32 0), i64 29}, i64 219, i64 20, i64 %19, i64 384)
	%22 = load i8, i8* %21, align 1
	store i8 %22, i8* %3
	%23 = load i8, i8* %3, align 1
	%24 = icmp ult i8 %23, 57
	br i1 %24, label %if.then-6, label %if.done-7

if.then-6:
	; IndexExpr
	; SelectorExpr
	%25 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%26 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %25, i64 0
	%27 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %26, i64 0, i32 2
	%28 = load i64, i64* %2, align 8
	%29 = trunc i64 %28 to i32
	%30 = getelementptr inbounds [384 x i8], [384 x i8]* %27, i64 0, i32 %29
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2f3, i64 0, i32 0), i64 29}, i64 220, i64 13, i64 %28, i64 384)
	%31 = load i8, i8* %30, align 1
	%32 = add i8 %31, 1
	store i8 %32, i8* %30
	; AssignStmt
	; SelectorExpr
	%33 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %34, i64 0, i32 0
	%36 = load i64, i64* %2, align 8
	%37 = add i64 %36, 1
	store i64 %37, i64* %35
	; ReturnStmt
	ret void

if.done-7:
	%38 = load i64, i64* %2, align 8
	%39 = sub i64 %38, 1
	store i64 %39, i64* %2
	br label %for.loop-4

for.done-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%40 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%41 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %40, i64 0
	%42 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %41, i64 0, i32 2
	%43 = getelementptr inbounds [384 x i8], [384 x i8]* %42, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$2f4, i64 0, i32 0), i64 29}, i64 227, i64 11, i64 0, i64 384)
	store i8 49, i8* %43
	; AssignStmt
	; SelectorExpr
	%44 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%45 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %44, i64 0
	%46 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %45, i64 0, i32 0
	store i64 1, i64* %46
	; SelectorExpr
	%47 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%48 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %47, i64 0
	%49 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %48, i64 0, i32 1
	%50 = load i64, i64* %49, align 8
	%51 = add i64 %50, 1
	store i64 %51, i64* %49
	ret void
}

define void @.decimal-32.round_down(%decimal-32.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-32.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-32.Decimal* zeroinitializer, %decimal-32.Decimal** %0
		store %decimal-32.Decimal* %a, %decimal-32.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; AssignStmt
	; SelectorExpr
	%10 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	%11 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %10, i64 0
	%12 = getelementptr inbounds %decimal-32.Decimal, %decimal-32.Decimal* %11, i64 0, i32 0
	%13 = load i64, i64* %1, align 8
	store i64 %13, i64* %12
	%14 = load %decimal-32.Decimal*, %decimal-32.Decimal** %0, align 8
	call void @.decimal-32.trim(%decimal-32.Decimal* %14)
	ret void
}

define void @.__$startup_runtime() noinline {
decls-0:
	%0 = call i64 @.os_windows-23.get_std_handle(i64 -11)
	%1 = call i64 @.os_windows-23.get_std_handle(i64 -12)
	store i64 %0, i64* @.os_windows-23.stdout
	store i64 %1, i64* @.os_windows-23.stderr
	%2 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%3 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 0
	store %Type_Info* %2, %Type_Info** %3
	%4 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 1
	store i64 202, i64* %4
	%5 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 2
	store i64 202, i64* %5
	%6 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%7 = bitcast %Type_Info* %6 to i8*
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = bitcast i8* %8 to i64*
	store i64 8, i64* %9
	%10 = bitcast %Type_Info* %6 to i8*
	%11 = getelementptr inbounds i8, i8* %10, i64 8
	%12 = bitcast i8* %11 to i64*
	store i64 8, i64* %12
	; Type_Info_Pointer
	%13 = bitcast %Type_Info* %6 to %Type_Info.Pointer*
	%14 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%15 = bitcast %Type_Info* %14 to %Type_Info*
	%16 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %13, i64 0, i32 2
	store %Type_Info* %15, %Type_Info** %16
	%17 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %17
	%18 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%19 = bitcast %Type_Info* %18 to i8*
	%20 = getelementptr inbounds i8, i8* %19, i64 0
	%21 = bitcast i8* %20 to i64*
	store i64 40, i64* %21
	%22 = bitcast %Type_Info* %18 to i8*
	%23 = getelementptr inbounds i8, i8* %22, i64 8
	%24 = bitcast i8* %23 to i64*
	store i64 8, i64* %24
	; Type_Info_Named
	%25 = bitcast %Type_Info* %18 to %Type_Info.Named*
	%26 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%27 = bitcast %Type_Info* %26 to %Type_Info*
	%28 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %25, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2f5, i64 0, i32 0), i64 5}, %..string* %28
	%29 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %25, i64 0, i32 3
	store %Type_Info* %27, %Type_Info** %29
	%30 = getelementptr inbounds %Type_Info, %Type_Info* %18, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %30
	%31 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%32 = bitcast %Type_Info* %31 to i8*
	%33 = getelementptr inbounds i8, i8* %32, i64 0
	%34 = bitcast i8* %33 to i64*
	store i64 40, i64* %34
	%35 = bitcast %Type_Info* %31 to i8*
	%36 = getelementptr inbounds i8, i8* %35, i64 8
	%37 = bitcast i8* %36 to i64*
	store i64 8, i64* %37
	; Type_Info_Struct
	%38 = bitcast %Type_Info* %31 to %Type_Info.Struct*
	%39 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %38, i64 0, i32 2
	%40 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %39, i64 0, i32 3
	store i1 false, i1* %40
	%41 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %39, i64 0, i32 4
	store i1 true, i1* %41
	%42 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %39, i64 0, i32 5
	store i1 false, i1* %42
	%43 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 0
	%44 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 0
	%45 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 0
	%46 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%47 = bitcast %Type_Info* %46 to %Type_Info*
	%48 = getelementptr inbounds %Type_Info*, %Type_Info** %43, i64 0
	%49 = getelementptr inbounds i64, i64* %45, i64 0
	%50 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %50, %Type_Info** %48
	%51 = getelementptr inbounds %..string, %..string* %44, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2f6, i64 0, i32 0), i64 4}, %..string* %51
	store i64 0, i64* %49
	%52 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%53 = bitcast %Type_Info* %52 to %Type_Info*
	%54 = getelementptr inbounds %Type_Info*, %Type_Info** %43, i64 1
	%55 = getelementptr inbounds i64, i64* %45, i64 1
	%56 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %56, %Type_Info** %54
	%57 = getelementptr inbounds %..string, %..string* %44, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2f7, i64 0, i32 0), i64 5}, %..string* %57
	store i64 8, i64* %55
	%58 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%59 = bitcast %Type_Info* %58 to %Type_Info*
	%60 = getelementptr inbounds %Type_Info*, %Type_Info** %43, i64 2
	%61 = getelementptr inbounds i64, i64* %45, i64 2
	%62 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	store %Type_Info* %62, %Type_Info** %60
	%63 = getelementptr inbounds %..string, %..string* %44, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2f8, i64 0, i32 0), i64 4}, %..string* %63
	store i64 16, i64* %61
	%64 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%65 = bitcast %Type_Info* %64 to %Type_Info*
	%66 = getelementptr inbounds %Type_Info*, %Type_Info** %43, i64 3
	%67 = getelementptr inbounds i64, i64* %45, i64 3
	%68 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %68, %Type_Info** %66
	%69 = getelementptr inbounds %..string, %..string* %44, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2f9, i64 0, i32 0), i64 4}, %..string* %69
	store i64 32, i64* %67
	%70 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %39, i64 0, i32 0
	%71 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %70, i64 0, i32 0
	store %Type_Info** %43, %Type_Info*** %71
	%72 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %70, i64 0, i32 1
	store i64 4, i64* %72
	%73 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %70, i64 0, i32 2
	store i64 4, i64* %73
	%74 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %39, i64 0, i32 1
	%75 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %74, i64 0, i32 0
	store %..string* %44, %..string** %75
	%76 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %74, i64 0, i32 1
	store i64 4, i64* %76
	%77 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %74, i64 0, i32 2
	store i64 4, i64* %77
	%78 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %39, i64 0, i32 2
	%79 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %78, i64 0, i32 0
	store i64* %45, i64** %79
	%80 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %78, i64 0, i32 1
	store i64 4, i64* %80
	%81 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %78, i64 0, i32 2
	store i64 4, i64* %81
	%82 = getelementptr inbounds %Type_Info, %Type_Info* %31, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %82
	%83 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%84 = bitcast %Type_Info* %83 to i8*
	%85 = getelementptr inbounds i8, i8* %84, i64 0
	%86 = bitcast i8* %85 to i64*
	store i64 8, i64* %86
	%87 = bitcast %Type_Info* %83 to i8*
	%88 = getelementptr inbounds i8, i8* %87, i64 8
	%89 = bitcast i8* %88 to i64*
	store i64 8, i64* %89
	; Type_Info_Basic
	%90 = bitcast %Type_Info* %83 to %Type_Info.Integer*
	%91 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %90, i64 0, i32 2
	store i1 true, i1* %91
	%92 = getelementptr inbounds %Type_Info, %Type_Info* %83, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %92
	%93 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%94 = bitcast %Type_Info* %93 to i8*
	%95 = getelementptr inbounds i8, i8* %94, i64 0
	%96 = bitcast i8* %95 to i64*
	store i64 16, i64* %96
	%97 = bitcast %Type_Info* %93 to i8*
	%98 = getelementptr inbounds i8, i8* %97, i64 8
	%99 = bitcast i8* %98 to i64*
	store i64 8, i64* %99
	; Type_Info_Basic
	%100 = bitcast %Type_Info* %93 to %Type_Info.String*
	%101 = getelementptr inbounds %Type_Info, %Type_Info* %93, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %101
	%102 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%103 = bitcast %Type_Info* %102 to i8*
	%104 = getelementptr inbounds i8, i8* %103, i64 0
	%105 = bitcast i8* %104 to i64*
	store i64 8, i64* %105
	%106 = bitcast %Type_Info* %102 to i8*
	%107 = getelementptr inbounds i8, i8* %106, i64 8
	%108 = bitcast i8* %107 to i64*
	store i64 8, i64* %108
	; Type_Info_Pointer
	%109 = bitcast %Type_Info* %102 to %Type_Info.Pointer*
	%110 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%111 = bitcast %Type_Info* %110 to %Type_Info*
	%112 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %109, i64 0, i32 2
	store %Type_Info* %111, %Type_Info** %112
	%113 = getelementptr inbounds %Type_Info, %Type_Info* %102, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %113
	%114 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%115 = bitcast %Type_Info* %114 to i8*
	%116 = getelementptr inbounds i8, i8* %115, i64 0
	%117 = bitcast i8* %116 to i64*
	store i64 1, i64* %117
	%118 = bitcast %Type_Info* %114 to i8*
	%119 = getelementptr inbounds i8, i8* %118, i64 8
	%120 = bitcast i8* %119 to i64*
	store i64 1, i64* %120
	; Type_Info_Basic
	%121 = bitcast %Type_Info* %114 to %Type_Info.Integer*
	%122 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %121, i64 0, i32 2
	store i1 false, i1* %122
	%123 = getelementptr inbounds %Type_Info, %Type_Info* %114, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %123
	%124 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%125 = bitcast %Type_Info* %124 to i8*
	%126 = getelementptr inbounds i8, i8* %125, i64 0
	%127 = bitcast i8* %126 to i64*
	store i64 8, i64* %127
	%128 = bitcast %Type_Info* %124 to i8*
	%129 = getelementptr inbounds i8, i8* %128, i64 8
	%130 = bitcast i8* %129 to i64*
	store i64 8, i64* %130
	; Type_Info_Pointer
	%131 = bitcast %Type_Info* %124 to %Type_Info.Pointer*
	%132 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%133 = bitcast %Type_Info* %132 to %Type_Info*
	%134 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %131, i64 0, i32 2
	store %Type_Info* %133, %Type_Info** %134
	%135 = getelementptr inbounds %Type_Info, %Type_Info* %124, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %135
	%136 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%137 = bitcast %Type_Info* %136 to i8*
	%138 = getelementptr inbounds i8, i8* %137, i64 0
	%139 = bitcast i8* %138 to i64*
	store i64 144, i64* %139
	%140 = bitcast %Type_Info* %136 to i8*
	%141 = getelementptr inbounds i8, i8* %140, i64 8
	%142 = bitcast i8* %141 to i64*
	store i64 8, i64* %142
	; Type_Info_Named
	%143 = bitcast %Type_Info* %136 to %Type_Info.Named*
	%144 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%145 = bitcast %Type_Info* %144 to %Type_Info*
	%146 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %143, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2fa, i64 0, i32 0), i64 9}, %..string* %146
	%147 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %143, i64 0, i32 3
	store %Type_Info* %145, %Type_Info** %147
	%148 = getelementptr inbounds %Type_Info, %Type_Info* %136, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %148
	%149 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%150 = bitcast %Type_Info* %149 to i8*
	%151 = getelementptr inbounds i8, i8* %150, i64 0
	%152 = bitcast i8* %151 to i64*
	store i64 144, i64* %152
	%153 = bitcast %Type_Info* %149 to i8*
	%154 = getelementptr inbounds i8, i8* %153, i64 8
	%155 = bitcast i8* %154 to i64*
	store i64 8, i64* %155
	; Type_Info_Union
	%156 = bitcast %Type_Info* %149 to %Type_Info.Union*
	%157 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %156, i64 0, i32 2
	%158 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 4
	%159 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 4
	%160 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 4
	%161 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%162 = bitcast %Type_Info* %161 to %Type_Info*
	%163 = getelementptr inbounds %Type_Info*, %Type_Info** %158, i64 0
	%164 = getelementptr inbounds i64, i64* %160, i64 0
	%165 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %165, %Type_Info** %163
	%166 = getelementptr inbounds %..string, %..string* %159, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2fb, i64 0, i32 0), i64 4}, %..string* %166
	store i64 0, i64* %164
	%167 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%168 = bitcast %Type_Info* %167 to %Type_Info*
	%169 = getelementptr inbounds %Type_Info*, %Type_Info** %158, i64 1
	%170 = getelementptr inbounds i64, i64* %160, i64 1
	%171 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %171, %Type_Info** %169
	%172 = getelementptr inbounds %..string, %..string* %159, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2fc, i64 0, i32 0), i64 5}, %..string* %172
	store i64 8, i64* %170
	%173 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %157, i64 0, i32 0
	%174 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %173, i64 0, i32 0
	store %Type_Info** %158, %Type_Info*** %174
	%175 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %173, i64 0, i32 1
	store i64 2, i64* %175
	%176 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %173, i64 0, i32 2
	store i64 2, i64* %176
	%177 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %157, i64 0, i32 1
	%178 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %177, i64 0, i32 0
	store %..string* %159, %..string** %178
	%179 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %177, i64 0, i32 1
	store i64 2, i64* %179
	%180 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %177, i64 0, i32 2
	store i64 2, i64* %180
	%181 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %157, i64 0, i32 2
	%182 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %181, i64 0, i32 0
	store i64* %160, i64** %182
	%183 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %181, i64 0, i32 1
	store i64 2, i64* %183
	%184 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %181, i64 0, i32 2
	store i64 2, i64* %184
	%185 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %156, i64 0, i32 3
	%186 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %156, i64 0, i32 4
	%187 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 6
	%188 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 6
	%189 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%190 = bitcast %Type_Info* %189 to %Type_Info*
	%191 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 0
	%192 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	store %Type_Info* %192, %Type_Info** %191
	%193 = getelementptr inbounds %..string, %..string* %187, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2fd, i64 0, i32 0), i64 5}, %..string* %193
	%194 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%195 = bitcast %Type_Info* %194 to %Type_Info*
	%196 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 1
	%197 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	store %Type_Info* %197, %Type_Info** %196
	%198 = getelementptr inbounds %..string, %..string* %187, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2fe, i64 0, i32 0), i64 7}, %..string* %198
	%199 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%200 = bitcast %Type_Info* %199 to %Type_Info*
	%201 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 2
	%202 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	store %Type_Info* %202, %Type_Info** %201
	%203 = getelementptr inbounds %..string, %..string* %187, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2ff, i64 0, i32 0), i64 5}, %..string* %203
	%204 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%205 = bitcast %Type_Info* %204 to %Type_Info*
	%206 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 3
	%207 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	store %Type_Info* %207, %Type_Info** %206
	%208 = getelementptr inbounds %..string, %..string* %187, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$300, i64 0, i32 0), i64 7}, %..string* %208
	%209 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%210 = bitcast %Type_Info* %209 to %Type_Info*
	%211 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 4
	%212 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	store %Type_Info* %212, %Type_Info** %211
	%213 = getelementptr inbounds %..string, %..string* %187, i64 4
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$301, i64 0, i32 0), i64 10}, %..string* %213
	%214 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%215 = bitcast %Type_Info* %214 to %Type_Info*
	%216 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 5
	%217 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	store %Type_Info* %217, %Type_Info** %216
	%218 = getelementptr inbounds %..string, %..string* %187, i64 5
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$302, i64 0, i32 0), i64 6}, %..string* %218
	%219 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%220 = bitcast %Type_Info* %219 to %Type_Info*
	%221 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 6
	%222 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	store %Type_Info* %222, %Type_Info** %221
	%223 = getelementptr inbounds %..string, %..string* %187, i64 6
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$303, i64 0, i32 0), i64 7}, %..string* %223
	%224 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%225 = bitcast %Type_Info* %224 to %Type_Info*
	%226 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 7
	%227 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	store %Type_Info* %227, %Type_Info** %226
	%228 = getelementptr inbounds %..string, %..string* %187, i64 7
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$304, i64 0, i32 0), i64 3}, %..string* %228
	%229 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%230 = bitcast %Type_Info* %229 to %Type_Info*
	%231 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 8
	%232 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	store %Type_Info* %232, %Type_Info** %231
	%233 = getelementptr inbounds %..string, %..string* %187, i64 8
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$305, i64 0, i32 0), i64 7}, %..string* %233
	%234 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%235 = bitcast %Type_Info* %234 to %Type_Info*
	%236 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 9
	%237 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	store %Type_Info* %237, %Type_Info** %236
	%238 = getelementptr inbounds %..string, %..string* %187, i64 9
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$306, i64 0, i32 0), i64 9}, %..string* %238
	%239 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%240 = bitcast %Type_Info* %239 to %Type_Info*
	%241 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 10
	%242 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	store %Type_Info* %242, %Type_Info** %241
	%243 = getelementptr inbounds %..string, %..string* %187, i64 10
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$307, i64 0, i32 0), i64 5}, %..string* %243
	%244 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%245 = bitcast %Type_Info* %244 to %Type_Info*
	%246 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 11
	%247 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	store %Type_Info* %247, %Type_Info** %246
	%248 = getelementptr inbounds %..string, %..string* %187, i64 11
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$308, i64 0, i32 0), i64 13}, %..string* %248
	%249 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%250 = bitcast %Type_Info* %249 to %Type_Info*
	%251 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 12
	%252 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	store %Type_Info* %252, %Type_Info** %251
	%253 = getelementptr inbounds %..string, %..string* %187, i64 12
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$309, i64 0, i32 0), i64 5}, %..string* %253
	%254 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%255 = bitcast %Type_Info* %254 to %Type_Info*
	%256 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 13
	%257 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	store %Type_Info* %257, %Type_Info** %256
	%258 = getelementptr inbounds %..string, %..string* %187, i64 13
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$30a, i64 0, i32 0), i64 6}, %..string* %258
	%259 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%260 = bitcast %Type_Info* %259 to %Type_Info*
	%261 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 14
	%262 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	store %Type_Info* %262, %Type_Info** %261
	%263 = getelementptr inbounds %..string, %..string* %187, i64 14
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$30b, i64 0, i32 0), i64 5}, %..string* %263
	%264 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%265 = bitcast %Type_Info* %264 to %Type_Info*
	%266 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 15
	%267 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	store %Type_Info* %267, %Type_Info** %266
	%268 = getelementptr inbounds %..string, %..string* %187, i64 15
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$30c, i64 0, i32 0), i64 6}, %..string* %268
	%269 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%270 = bitcast %Type_Info* %269 to %Type_Info*
	%271 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 16
	%272 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	store %Type_Info* %272, %Type_Info** %271
	%273 = getelementptr inbounds %..string, %..string* %187, i64 16
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$30d, i64 0, i32 0), i64 9}, %..string* %273
	%274 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%275 = bitcast %Type_Info* %274 to %Type_Info*
	%276 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 17
	%277 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	store %Type_Info* %277, %Type_Info** %276
	%278 = getelementptr inbounds %..string, %..string* %187, i64 17
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$30e, i64 0, i32 0), i64 5}, %..string* %278
	%279 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%280 = bitcast %Type_Info* %279 to %Type_Info*
	%281 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 18
	%282 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	store %Type_Info* %282, %Type_Info** %281
	%283 = getelementptr inbounds %..string, %..string* %187, i64 18
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$30f, i64 0, i32 0), i64 4}, %..string* %283
	%284 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%285 = bitcast %Type_Info* %284 to %Type_Info*
	%286 = getelementptr inbounds %Type_Info*, %Type_Info** %188, i64 19
	%287 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	store %Type_Info* %287, %Type_Info** %286
	%288 = getelementptr inbounds %..string, %..string* %187, i64 19
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$310, i64 0, i32 0), i64 3}, %..string* %288
	%289 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %185, i64 0, i32 0
	store %..string* %187, %..string** %289
	%290 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %185, i64 0, i32 1
	store i64 20, i64* %290
	%291 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %185, i64 0, i32 2
	store i64 20, i64* %291
	%292 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %186, i64 0, i32 0
	store %Type_Info** %188, %Type_Info*** %292
	%293 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %186, i64 0, i32 1
	store i64 20, i64* %293
	%294 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %186, i64 0, i32 2
	store i64 20, i64* %294
	%295 = getelementptr inbounds %Type_Info, %Type_Info* %149, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %295
	%296 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%297 = bitcast %Type_Info* %296 to i8*
	%298 = getelementptr inbounds i8, i8* %297, i64 0
	%299 = bitcast i8* %298 to i64*
	store i64 24, i64* %299
	%300 = bitcast %Type_Info* %296 to i8*
	%301 = getelementptr inbounds i8, i8* %300, i64 8
	%302 = bitcast i8* %301 to i64*
	store i64 8, i64* %302
	; Type_Info_Named
	%303 = bitcast %Type_Info* %296 to %Type_Info.Named*
	%304 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%305 = bitcast %Type_Info* %304 to %Type_Info*
	%306 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %303, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$311, i64 0, i32 0), i64 7}, %..string* %306
	%307 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %303, i64 0, i32 3
	store %Type_Info* %305, %Type_Info** %307
	%308 = getelementptr inbounds %Type_Info, %Type_Info* %296, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %308
	%309 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%310 = bitcast %Type_Info* %309 to i8*
	%311 = getelementptr inbounds i8, i8* %310, i64 0
	%312 = bitcast i8* %311 to i64*
	store i64 24, i64* %312
	%313 = bitcast %Type_Info* %309 to i8*
	%314 = getelementptr inbounds i8, i8* %313, i64 8
	%315 = bitcast i8* %314 to i64*
	store i64 8, i64* %315
	; Type_Info_Struct
	%316 = bitcast %Type_Info* %309 to %Type_Info.Struct*
	%317 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %316, i64 0, i32 2
	%318 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 3
	store i1 false, i1* %318
	%319 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 4
	store i1 true, i1* %319
	%320 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 5
	store i1 false, i1* %320
	%321 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 26
	%322 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 26
	%323 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 6
	%324 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%325 = bitcast %Type_Info* %324 to %Type_Info*
	%326 = getelementptr inbounds %Type_Info*, %Type_Info** %321, i64 0
	%327 = getelementptr inbounds i64, i64* %323, i64 0
	%328 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %328, %Type_Info** %326
	%329 = getelementptr inbounds %..string, %..string* %322, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$312, i64 0, i32 0), i64 4}, %..string* %329
	store i64 0, i64* %327
	%330 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%331 = bitcast %Type_Info* %330 to %Type_Info*
	%332 = getelementptr inbounds %Type_Info*, %Type_Info** %321, i64 1
	%333 = getelementptr inbounds i64, i64* %323, i64 1
	%334 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %334, %Type_Info** %332
	%335 = getelementptr inbounds %..string, %..string* %322, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$313, i64 0, i32 0), i64 5}, %..string* %335
	store i64 8, i64* %333
	%336 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%337 = bitcast %Type_Info* %336 to %Type_Info*
	%338 = getelementptr inbounds %Type_Info*, %Type_Info** %321, i64 2
	%339 = getelementptr inbounds i64, i64* %323, i64 2
	%340 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %340, %Type_Info** %338
	%341 = getelementptr inbounds %..string, %..string* %322, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$314, i64 0, i32 0), i64 6}, %..string* %341
	store i64 16, i64* %339
	%342 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 0
	%343 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %342, i64 0, i32 0
	store %Type_Info** %321, %Type_Info*** %343
	%344 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %342, i64 0, i32 1
	store i64 3, i64* %344
	%345 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %342, i64 0, i32 2
	store i64 3, i64* %345
	%346 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 1
	%347 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %346, i64 0, i32 0
	store %..string* %322, %..string** %347
	%348 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %346, i64 0, i32 1
	store i64 3, i64* %348
	%349 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %346, i64 0, i32 2
	store i64 3, i64* %349
	%350 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 2
	%351 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %350, i64 0, i32 0
	store i64* %323, i64** %351
	%352 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %350, i64 0, i32 1
	store i64 3, i64* %352
	%353 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %350, i64 0, i32 2
	store i64 3, i64* %353
	%354 = getelementptr inbounds %Type_Info, %Type_Info* %309, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %354
	%355 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%356 = bitcast %Type_Info* %355 to i8*
	%357 = getelementptr inbounds i8, i8* %356, i64 0
	%358 = bitcast i8* %357 to i64*
	store i64 1, i64* %358
	%359 = bitcast %Type_Info* %355 to i8*
	%360 = getelementptr inbounds i8, i8* %359, i64 8
	%361 = bitcast i8* %360 to i64*
	store i64 1, i64* %361
	; Type_Info_Basic
	%362 = bitcast %Type_Info* %355 to %Type_Info.Boolean*
	%363 = getelementptr inbounds %Type_Info, %Type_Info* %355, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %363
	%364 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%365 = bitcast %Type_Info* %364 to i8*
	%366 = getelementptr inbounds i8, i8* %365, i64 0
	%367 = bitcast i8* %366 to i64*
	store i64 16, i64* %367
	%368 = bitcast %Type_Info* %364 to i8*
	%369 = getelementptr inbounds i8, i8* %368, i64 8
	%370 = bitcast i8* %369 to i64*
	store i64 8, i64* %370
	; Type_Info_Named
	%371 = bitcast %Type_Info* %364 to %Type_Info.Named*
	%372 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%373 = bitcast %Type_Info* %372 to %Type_Info*
	%374 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %371, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$315, i64 0, i32 0), i64 5}, %..string* %374
	%375 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %371, i64 0, i32 3
	store %Type_Info* %373, %Type_Info** %375
	%376 = getelementptr inbounds %Type_Info, %Type_Info* %364, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %376
	%377 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%378 = bitcast %Type_Info* %377 to i8*
	%379 = getelementptr inbounds i8, i8* %378, i64 0
	%380 = bitcast i8* %379 to i64*
	store i64 16, i64* %380
	%381 = bitcast %Type_Info* %377 to i8*
	%382 = getelementptr inbounds i8, i8* %381, i64 8
	%383 = bitcast i8* %382 to i64*
	store i64 8, i64* %383
	; Type_Info_Struct
	%384 = bitcast %Type_Info* %377 to %Type_Info.Struct*
	%385 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %384, i64 0, i32 2
	%386 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %385, i64 0, i32 3
	store i1 false, i1* %386
	%387 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %385, i64 0, i32 4
	store i1 true, i1* %387
	%388 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %385, i64 0, i32 5
	store i1 false, i1* %388
	%389 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 29
	%390 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 29
	%391 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 9
	%392 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%393 = bitcast %Type_Info* %392 to %Type_Info*
	%394 = getelementptr inbounds %Type_Info*, %Type_Info** %389, i64 0
	%395 = getelementptr inbounds i64, i64* %391, i64 0
	%396 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %396, %Type_Info** %394
	%397 = getelementptr inbounds %..string, %..string* %390, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$316, i64 0, i32 0), i64 4}, %..string* %397
	store i64 0, i64* %395
	%398 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%399 = bitcast %Type_Info* %398 to %Type_Info*
	%400 = getelementptr inbounds %Type_Info*, %Type_Info** %389, i64 1
	%401 = getelementptr inbounds i64, i64* %391, i64 1
	%402 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %402, %Type_Info** %400
	%403 = getelementptr inbounds %..string, %..string* %390, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$317, i64 0, i32 0), i64 5}, %..string* %403
	store i64 8, i64* %401
	%404 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %385, i64 0, i32 0
	%405 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %404, i64 0, i32 0
	store %Type_Info** %389, %Type_Info*** %405
	%406 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %404, i64 0, i32 1
	store i64 2, i64* %406
	%407 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %404, i64 0, i32 2
	store i64 2, i64* %407
	%408 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %385, i64 0, i32 1
	%409 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %408, i64 0, i32 0
	store %..string* %390, %..string** %409
	%410 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %408, i64 0, i32 1
	store i64 2, i64* %410
	%411 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %408, i64 0, i32 2
	store i64 2, i64* %411
	%412 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %385, i64 0, i32 2
	%413 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %412, i64 0, i32 0
	store i64* %391, i64** %413
	%414 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %412, i64 0, i32 1
	store i64 2, i64* %414
	%415 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %412, i64 0, i32 2
	store i64 2, i64* %415
	%416 = getelementptr inbounds %Type_Info, %Type_Info* %377, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %416
	%417 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%418 = bitcast %Type_Info* %417 to i8*
	%419 = getelementptr inbounds i8, i8* %418, i64 0
	%420 = bitcast i8* %419 to i64*
	store i64 16, i64* %420
	%421 = bitcast %Type_Info* %417 to i8*
	%422 = getelementptr inbounds i8, i8* %421, i64 8
	%423 = bitcast i8* %422 to i64*
	store i64 8, i64* %423
	; Type_Info_Named
	%424 = bitcast %Type_Info* %417 to %Type_Info.Named*
	%425 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%426 = bitcast %Type_Info* %425 to %Type_Info*
	%427 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %424, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$318, i64 0, i32 0), i64 7}, %..string* %427
	%428 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %424, i64 0, i32 3
	store %Type_Info* %426, %Type_Info** %428
	%429 = getelementptr inbounds %Type_Info, %Type_Info* %417, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %429
	%430 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%431 = bitcast %Type_Info* %430 to i8*
	%432 = getelementptr inbounds i8, i8* %431, i64 0
	%433 = bitcast i8* %432 to i64*
	store i64 16, i64* %433
	%434 = bitcast %Type_Info* %430 to i8*
	%435 = getelementptr inbounds i8, i8* %434, i64 8
	%436 = bitcast i8* %435 to i64*
	store i64 8, i64* %436
	; Type_Info_Struct
	%437 = bitcast %Type_Info* %430 to %Type_Info.Struct*
	%438 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %437, i64 0, i32 2
	%439 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %438, i64 0, i32 3
	store i1 false, i1* %439
	%440 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %438, i64 0, i32 4
	store i1 true, i1* %440
	%441 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %438, i64 0, i32 5
	store i1 false, i1* %441
	%442 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 31
	%443 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 31
	%444 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 11
	%445 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%446 = bitcast %Type_Info* %445 to %Type_Info*
	%447 = getelementptr inbounds %Type_Info*, %Type_Info** %442, i64 0
	%448 = getelementptr inbounds i64, i64* %444, i64 0
	%449 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %449, %Type_Info** %447
	%450 = getelementptr inbounds %..string, %..string* %443, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$319, i64 0, i32 0), i64 4}, %..string* %450
	store i64 0, i64* %448
	%451 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%452 = bitcast %Type_Info* %451 to %Type_Info*
	%453 = getelementptr inbounds %Type_Info*, %Type_Info** %442, i64 1
	%454 = getelementptr inbounds i64, i64* %444, i64 1
	%455 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %455, %Type_Info** %453
	%456 = getelementptr inbounds %..string, %..string* %443, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$31a, i64 0, i32 0), i64 5}, %..string* %456
	store i64 8, i64* %454
	%457 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %438, i64 0, i32 0
	%458 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %457, i64 0, i32 0
	store %Type_Info** %442, %Type_Info*** %458
	%459 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %457, i64 0, i32 1
	store i64 2, i64* %459
	%460 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %457, i64 0, i32 2
	store i64 2, i64* %460
	%461 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %438, i64 0, i32 1
	%462 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %461, i64 0, i32 0
	store %..string* %443, %..string** %462
	%463 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %461, i64 0, i32 1
	store i64 2, i64* %463
	%464 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %461, i64 0, i32 2
	store i64 2, i64* %464
	%465 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %438, i64 0, i32 2
	%466 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %465, i64 0, i32 0
	store i64* %444, i64** %466
	%467 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %465, i64 0, i32 1
	store i64 2, i64* %467
	%468 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %465, i64 0, i32 2
	store i64 2, i64* %468
	%469 = getelementptr inbounds %Type_Info, %Type_Info* %430, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %469
	%470 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%471 = bitcast %Type_Info* %470 to i8*
	%472 = getelementptr inbounds i8, i8* %471, i64 0
	%473 = bitcast i8* %472 to i64*
	store i64 16, i64* %473
	%474 = bitcast %Type_Info* %470 to i8*
	%475 = getelementptr inbounds i8, i8* %474, i64 8
	%476 = bitcast i8* %475 to i64*
	store i64 8, i64* %476
	; Type_Info_Named
	%477 = bitcast %Type_Info* %470 to %Type_Info.Named*
	%478 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%479 = bitcast %Type_Info* %478 to %Type_Info*
	%480 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %477, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$31b, i64 0, i32 0), i64 10}, %..string* %480
	%481 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %477, i64 0, i32 3
	store %Type_Info* %479, %Type_Info** %481
	%482 = getelementptr inbounds %Type_Info, %Type_Info* %470, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %482
	%483 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%484 = bitcast %Type_Info* %483 to i8*
	%485 = getelementptr inbounds i8, i8* %484, i64 0
	%486 = bitcast i8* %485 to i64*
	store i64 16, i64* %486
	%487 = bitcast %Type_Info* %483 to i8*
	%488 = getelementptr inbounds i8, i8* %487, i64 8
	%489 = bitcast i8* %488 to i64*
	store i64 8, i64* %489
	; Type_Info_Struct
	%490 = bitcast %Type_Info* %483 to %Type_Info.Struct*
	%491 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %490, i64 0, i32 2
	%492 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %491, i64 0, i32 3
	store i1 false, i1* %492
	%493 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %491, i64 0, i32 4
	store i1 true, i1* %493
	%494 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %491, i64 0, i32 5
	store i1 false, i1* %494
	%495 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 33
	%496 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 33
	%497 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 13
	%498 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%499 = bitcast %Type_Info* %498 to %Type_Info*
	%500 = getelementptr inbounds %Type_Info*, %Type_Info** %495, i64 0
	%501 = getelementptr inbounds i64, i64* %497, i64 0
	%502 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %502, %Type_Info** %500
	%503 = getelementptr inbounds %..string, %..string* %496, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$31c, i64 0, i32 0), i64 4}, %..string* %503
	store i64 0, i64* %501
	%504 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%505 = bitcast %Type_Info* %504 to %Type_Info*
	%506 = getelementptr inbounds %Type_Info*, %Type_Info** %495, i64 1
	%507 = getelementptr inbounds i64, i64* %497, i64 1
	%508 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %508, %Type_Info** %506
	%509 = getelementptr inbounds %..string, %..string* %496, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$31d, i64 0, i32 0), i64 5}, %..string* %509
	store i64 8, i64* %507
	%510 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %491, i64 0, i32 0
	%511 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %510, i64 0, i32 0
	store %Type_Info** %495, %Type_Info*** %511
	%512 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %510, i64 0, i32 1
	store i64 2, i64* %512
	%513 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %510, i64 0, i32 2
	store i64 2, i64* %513
	%514 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %491, i64 0, i32 1
	%515 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %514, i64 0, i32 0
	store %..string* %496, %..string** %515
	%516 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %514, i64 0, i32 1
	store i64 2, i64* %516
	%517 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %514, i64 0, i32 2
	store i64 2, i64* %517
	%518 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %491, i64 0, i32 2
	%519 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %518, i64 0, i32 0
	store i64* %497, i64** %519
	%520 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %518, i64 0, i32 1
	store i64 2, i64* %520
	%521 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %518, i64 0, i32 2
	store i64 2, i64* %521
	%522 = getelementptr inbounds %Type_Info, %Type_Info* %483, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %522
	%523 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%524 = bitcast %Type_Info* %523 to i8*
	%525 = getelementptr inbounds i8, i8* %524, i64 0
	%526 = bitcast i8* %525 to i64*
	store i64 16, i64* %526
	%527 = bitcast %Type_Info* %523 to i8*
	%528 = getelementptr inbounds i8, i8* %527, i64 8
	%529 = bitcast i8* %528 to i64*
	store i64 8, i64* %529
	; Type_Info_Named
	%530 = bitcast %Type_Info* %523 to %Type_Info.Named*
	%531 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%532 = bitcast %Type_Info* %531 to %Type_Info*
	%533 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %530, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$31e, i64 0, i32 0), i64 6}, %..string* %533
	%534 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %530, i64 0, i32 3
	store %Type_Info* %532, %Type_Info** %534
	%535 = getelementptr inbounds %Type_Info, %Type_Info* %523, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %535
	%536 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%537 = bitcast %Type_Info* %536 to i8*
	%538 = getelementptr inbounds i8, i8* %537, i64 0
	%539 = bitcast i8* %538 to i64*
	store i64 16, i64* %539
	%540 = bitcast %Type_Info* %536 to i8*
	%541 = getelementptr inbounds i8, i8* %540, i64 8
	%542 = bitcast i8* %541 to i64*
	store i64 8, i64* %542
	; Type_Info_Struct
	%543 = bitcast %Type_Info* %536 to %Type_Info.Struct*
	%544 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %543, i64 0, i32 2
	%545 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %544, i64 0, i32 3
	store i1 false, i1* %545
	%546 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %544, i64 0, i32 4
	store i1 true, i1* %546
	%547 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %544, i64 0, i32 5
	store i1 false, i1* %547
	%548 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 35
	%549 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 35
	%550 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 15
	%551 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%552 = bitcast %Type_Info* %551 to %Type_Info*
	%553 = getelementptr inbounds %Type_Info*, %Type_Info** %548, i64 0
	%554 = getelementptr inbounds i64, i64* %550, i64 0
	%555 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %555, %Type_Info** %553
	%556 = getelementptr inbounds %..string, %..string* %549, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$31f, i64 0, i32 0), i64 4}, %..string* %556
	store i64 0, i64* %554
	%557 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%558 = bitcast %Type_Info* %557 to %Type_Info*
	%559 = getelementptr inbounds %Type_Info*, %Type_Info** %548, i64 1
	%560 = getelementptr inbounds i64, i64* %550, i64 1
	%561 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %561, %Type_Info** %559
	%562 = getelementptr inbounds %..string, %..string* %549, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$320, i64 0, i32 0), i64 5}, %..string* %562
	store i64 8, i64* %560
	%563 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %544, i64 0, i32 0
	%564 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %563, i64 0, i32 0
	store %Type_Info** %548, %Type_Info*** %564
	%565 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %563, i64 0, i32 1
	store i64 2, i64* %565
	%566 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %563, i64 0, i32 2
	store i64 2, i64* %566
	%567 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %544, i64 0, i32 1
	%568 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %567, i64 0, i32 0
	store %..string* %549, %..string** %568
	%569 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %567, i64 0, i32 1
	store i64 2, i64* %569
	%570 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %567, i64 0, i32 2
	store i64 2, i64* %570
	%571 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %544, i64 0, i32 2
	%572 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %571, i64 0, i32 0
	store i64* %550, i64** %572
	%573 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %571, i64 0, i32 1
	store i64 2, i64* %573
	%574 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %571, i64 0, i32 2
	store i64 2, i64* %574
	%575 = getelementptr inbounds %Type_Info, %Type_Info* %536, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %575
	%576 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%577 = bitcast %Type_Info* %576 to i8*
	%578 = getelementptr inbounds i8, i8* %577, i64 0
	%579 = bitcast i8* %578 to i64*
	store i64 16, i64* %579
	%580 = bitcast %Type_Info* %576 to i8*
	%581 = getelementptr inbounds i8, i8* %580, i64 8
	%582 = bitcast i8* %581 to i64*
	store i64 8, i64* %582
	; Type_Info_Named
	%583 = bitcast %Type_Info* %576 to %Type_Info.Named*
	%584 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%585 = bitcast %Type_Info* %584 to %Type_Info*
	%586 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %583, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$321, i64 0, i32 0), i64 7}, %..string* %586
	%587 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %583, i64 0, i32 3
	store %Type_Info* %585, %Type_Info** %587
	%588 = getelementptr inbounds %Type_Info, %Type_Info* %576, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %588
	%589 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%590 = bitcast %Type_Info* %589 to i8*
	%591 = getelementptr inbounds i8, i8* %590, i64 0
	%592 = bitcast i8* %591 to i64*
	store i64 16, i64* %592
	%593 = bitcast %Type_Info* %589 to i8*
	%594 = getelementptr inbounds i8, i8* %593, i64 8
	%595 = bitcast i8* %594 to i64*
	store i64 8, i64* %595
	; Type_Info_Struct
	%596 = bitcast %Type_Info* %589 to %Type_Info.Struct*
	%597 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %596, i64 0, i32 2
	%598 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %597, i64 0, i32 3
	store i1 false, i1* %598
	%599 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %597, i64 0, i32 4
	store i1 true, i1* %599
	%600 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %597, i64 0, i32 5
	store i1 false, i1* %600
	%601 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 37
	%602 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 37
	%603 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 17
	%604 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%605 = bitcast %Type_Info* %604 to %Type_Info*
	%606 = getelementptr inbounds %Type_Info*, %Type_Info** %601, i64 0
	%607 = getelementptr inbounds i64, i64* %603, i64 0
	%608 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %608, %Type_Info** %606
	%609 = getelementptr inbounds %..string, %..string* %602, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$322, i64 0, i32 0), i64 4}, %..string* %609
	store i64 0, i64* %607
	%610 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%611 = bitcast %Type_Info* %610 to %Type_Info*
	%612 = getelementptr inbounds %Type_Info*, %Type_Info** %601, i64 1
	%613 = getelementptr inbounds i64, i64* %603, i64 1
	%614 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %614, %Type_Info** %612
	%615 = getelementptr inbounds %..string, %..string* %602, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$323, i64 0, i32 0), i64 5}, %..string* %615
	store i64 8, i64* %613
	%616 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %597, i64 0, i32 0
	%617 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %616, i64 0, i32 0
	store %Type_Info** %601, %Type_Info*** %617
	%618 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %616, i64 0, i32 1
	store i64 2, i64* %618
	%619 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %616, i64 0, i32 2
	store i64 2, i64* %619
	%620 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %597, i64 0, i32 1
	%621 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %620, i64 0, i32 0
	store %..string* %602, %..string** %621
	%622 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %620, i64 0, i32 1
	store i64 2, i64* %622
	%623 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %620, i64 0, i32 2
	store i64 2, i64* %623
	%624 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %597, i64 0, i32 2
	%625 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %624, i64 0, i32 0
	store i64* %603, i64** %625
	%626 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %624, i64 0, i32 1
	store i64 2, i64* %626
	%627 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %624, i64 0, i32 2
	store i64 2, i64* %627
	%628 = getelementptr inbounds %Type_Info, %Type_Info* %589, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %628
	%629 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%630 = bitcast %Type_Info* %629 to i8*
	%631 = getelementptr inbounds i8, i8* %630, i64 0
	%632 = bitcast i8* %631 to i64*
	store i64 16, i64* %632
	%633 = bitcast %Type_Info* %629 to i8*
	%634 = getelementptr inbounds i8, i8* %633, i64 8
	%635 = bitcast i8* %634 to i64*
	store i64 8, i64* %635
	; Type_Info_Named
	%636 = bitcast %Type_Info* %629 to %Type_Info.Named*
	%637 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%638 = bitcast %Type_Info* %637 to %Type_Info*
	%639 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %636, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$324, i64 0, i32 0), i64 3}, %..string* %639
	%640 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %636, i64 0, i32 3
	store %Type_Info* %638, %Type_Info** %640
	%641 = getelementptr inbounds %Type_Info, %Type_Info* %629, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %641
	%642 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%643 = bitcast %Type_Info* %642 to i8*
	%644 = getelementptr inbounds i8, i8* %643, i64 0
	%645 = bitcast i8* %644 to i64*
	store i64 16, i64* %645
	%646 = bitcast %Type_Info* %642 to i8*
	%647 = getelementptr inbounds i8, i8* %646, i64 8
	%648 = bitcast i8* %647 to i64*
	store i64 8, i64* %648
	; Type_Info_Struct
	%649 = bitcast %Type_Info* %642 to %Type_Info.Struct*
	%650 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %649, i64 0, i32 2
	%651 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %650, i64 0, i32 3
	store i1 false, i1* %651
	%652 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %650, i64 0, i32 4
	store i1 true, i1* %652
	%653 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %650, i64 0, i32 5
	store i1 false, i1* %653
	%654 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 39
	%655 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 39
	%656 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 19
	%657 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%658 = bitcast %Type_Info* %657 to %Type_Info*
	%659 = getelementptr inbounds %Type_Info*, %Type_Info** %654, i64 0
	%660 = getelementptr inbounds i64, i64* %656, i64 0
	%661 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %661, %Type_Info** %659
	%662 = getelementptr inbounds %..string, %..string* %655, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$325, i64 0, i32 0), i64 4}, %..string* %662
	store i64 0, i64* %660
	%663 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%664 = bitcast %Type_Info* %663 to %Type_Info*
	%665 = getelementptr inbounds %Type_Info*, %Type_Info** %654, i64 1
	%666 = getelementptr inbounds i64, i64* %656, i64 1
	%667 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %667, %Type_Info** %665
	%668 = getelementptr inbounds %..string, %..string* %655, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$326, i64 0, i32 0), i64 5}, %..string* %668
	store i64 8, i64* %666
	%669 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %650, i64 0, i32 0
	%670 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %669, i64 0, i32 0
	store %Type_Info** %654, %Type_Info*** %670
	%671 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %669, i64 0, i32 1
	store i64 2, i64* %671
	%672 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %669, i64 0, i32 2
	store i64 2, i64* %672
	%673 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %650, i64 0, i32 1
	%674 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %673, i64 0, i32 0
	store %..string* %655, %..string** %674
	%675 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %673, i64 0, i32 1
	store i64 2, i64* %675
	%676 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %673, i64 0, i32 2
	store i64 2, i64* %676
	%677 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %650, i64 0, i32 2
	%678 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %677, i64 0, i32 0
	store i64* %656, i64** %678
	%679 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %677, i64 0, i32 1
	store i64 2, i64* %679
	%680 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %677, i64 0, i32 2
	store i64 2, i64* %680
	%681 = getelementptr inbounds %Type_Info, %Type_Info* %642, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %681
	%682 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%683 = bitcast %Type_Info* %682 to i8*
	%684 = getelementptr inbounds i8, i8* %683, i64 0
	%685 = bitcast i8* %684 to i64*
	store i64 24, i64* %685
	%686 = bitcast %Type_Info* %682 to i8*
	%687 = getelementptr inbounds i8, i8* %686, i64 8
	%688 = bitcast i8* %687 to i64*
	store i64 8, i64* %688
	; Type_Info_Named
	%689 = bitcast %Type_Info* %682 to %Type_Info.Named*
	%690 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 21
	%691 = bitcast %Type_Info* %690 to %Type_Info*
	%692 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %689, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$327, i64 0, i32 0), i64 7}, %..string* %692
	%693 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %689, i64 0, i32 3
	store %Type_Info* %691, %Type_Info** %693
	%694 = getelementptr inbounds %Type_Info, %Type_Info* %682, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %694
	%695 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 21
	%696 = bitcast %Type_Info* %695 to i8*
	%697 = getelementptr inbounds i8, i8* %696, i64 0
	%698 = bitcast i8* %697 to i64*
	store i64 24, i64* %698
	%699 = bitcast %Type_Info* %695 to i8*
	%700 = getelementptr inbounds i8, i8* %699, i64 8
	%701 = bitcast i8* %700 to i64*
	store i64 8, i64* %701
	; Type_Info_Struct
	%702 = bitcast %Type_Info* %695 to %Type_Info.Struct*
	%703 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %702, i64 0, i32 2
	%704 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %703, i64 0, i32 3
	store i1 false, i1* %704
	%705 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %703, i64 0, i32 4
	store i1 true, i1* %705
	%706 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %703, i64 0, i32 5
	store i1 false, i1* %706
	%707 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 41
	%708 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 41
	%709 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 21
	%710 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%711 = bitcast %Type_Info* %710 to %Type_Info*
	%712 = getelementptr inbounds %Type_Info*, %Type_Info** %707, i64 0
	%713 = getelementptr inbounds i64, i64* %709, i64 0
	%714 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %714, %Type_Info** %712
	%715 = getelementptr inbounds %..string, %..string* %708, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$328, i64 0, i32 0), i64 4}, %..string* %715
	store i64 0, i64* %713
	%716 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%717 = bitcast %Type_Info* %716 to %Type_Info*
	%718 = getelementptr inbounds %Type_Info*, %Type_Info** %707, i64 1
	%719 = getelementptr inbounds i64, i64* %709, i64 1
	%720 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %720, %Type_Info** %718
	%721 = getelementptr inbounds %..string, %..string* %708, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$329, i64 0, i32 0), i64 5}, %..string* %721
	store i64 8, i64* %719
	%722 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%723 = bitcast %Type_Info* %722 to %Type_Info*
	%724 = getelementptr inbounds %Type_Info*, %Type_Info** %707, i64 2
	%725 = getelementptr inbounds i64, i64* %709, i64 2
	%726 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %726, %Type_Info** %724
	%727 = getelementptr inbounds %..string, %..string* %708, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$32a, i64 0, i32 0), i64 4}, %..string* %727
	store i64 16, i64* %725
	%728 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %703, i64 0, i32 0
	%729 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %728, i64 0, i32 0
	store %Type_Info** %707, %Type_Info*** %729
	%730 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %728, i64 0, i32 1
	store i64 3, i64* %730
	%731 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %728, i64 0, i32 2
	store i64 3, i64* %731
	%732 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %703, i64 0, i32 1
	%733 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %732, i64 0, i32 0
	store %..string* %708, %..string** %733
	%734 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %732, i64 0, i32 1
	store i64 3, i64* %734
	%735 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %732, i64 0, i32 2
	store i64 3, i64* %735
	%736 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %703, i64 0, i32 2
	%737 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %736, i64 0, i32 0
	store i64* %709, i64** %737
	%738 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %736, i64 0, i32 1
	store i64 3, i64* %738
	%739 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %736, i64 0, i32 2
	store i64 3, i64* %739
	%740 = getelementptr inbounds %Type_Info, %Type_Info* %695, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %740
	%741 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%742 = bitcast %Type_Info* %741 to i8*
	%743 = getelementptr inbounds i8, i8* %742, i64 0
	%744 = bitcast i8* %743 to i64*
	store i64 8, i64* %744
	%745 = bitcast %Type_Info* %741 to i8*
	%746 = getelementptr inbounds i8, i8* %745, i64 8
	%747 = bitcast i8* %746 to i64*
	store i64 8, i64* %747
	; Type_Info_Pointer
	%748 = bitcast %Type_Info* %741 to %Type_Info.Pointer*
	%749 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%750 = bitcast %Type_Info* %749 to %Type_Info*
	%751 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %748, i64 0, i32 2
	store %Type_Info* %750, %Type_Info** %751
	%752 = getelementptr inbounds %Type_Info, %Type_Info* %741, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %752
	%753 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%754 = bitcast %Type_Info* %753 to i8*
	%755 = getelementptr inbounds i8, i8* %754, i64 0
	%756 = bitcast i8* %755 to i64*
	store i64 48, i64* %756
	%757 = bitcast %Type_Info* %753 to i8*
	%758 = getelementptr inbounds i8, i8* %757, i64 8
	%759 = bitcast i8* %758 to i64*
	store i64 8, i64* %759
	; Type_Info_Named
	%760 = bitcast %Type_Info* %753 to %Type_Info.Named*
	%761 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 23
	%762 = bitcast %Type_Info* %761 to %Type_Info*
	%763 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %760, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$32b, i64 0, i32 0), i64 9}, %..string* %763
	%764 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %760, i64 0, i32 3
	store %Type_Info* %762, %Type_Info** %764
	%765 = getelementptr inbounds %Type_Info, %Type_Info* %753, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %765
	%766 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 23
	%767 = bitcast %Type_Info* %766 to i8*
	%768 = getelementptr inbounds i8, i8* %767, i64 0
	%769 = bitcast i8* %768 to i64*
	store i64 48, i64* %769
	%770 = bitcast %Type_Info* %766 to i8*
	%771 = getelementptr inbounds i8, i8* %770, i64 8
	%772 = bitcast i8* %771 to i64*
	store i64 8, i64* %772
	; Type_Info_Struct
	%773 = bitcast %Type_Info* %766 to %Type_Info.Struct*
	%774 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %773, i64 0, i32 2
	%775 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %774, i64 0, i32 3
	store i1 false, i1* %775
	%776 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %774, i64 0, i32 4
	store i1 true, i1* %776
	%777 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %774, i64 0, i32 5
	store i1 false, i1* %777
	%778 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 44
	%779 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 44
	%780 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 24
	%781 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%782 = bitcast %Type_Info* %781 to %Type_Info*
	%783 = getelementptr inbounds %Type_Info*, %Type_Info** %778, i64 0
	%784 = getelementptr inbounds i64, i64* %780, i64 0
	%785 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %785, %Type_Info** %783
	%786 = getelementptr inbounds %..string, %..string* %779, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$32c, i64 0, i32 0), i64 4}, %..string* %786
	store i64 0, i64* %784
	%787 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%788 = bitcast %Type_Info* %787 to %Type_Info*
	%789 = getelementptr inbounds %Type_Info*, %Type_Info** %778, i64 1
	%790 = getelementptr inbounds i64, i64* %780, i64 1
	%791 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %791, %Type_Info** %789
	%792 = getelementptr inbounds %..string, %..string* %779, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$32d, i64 0, i32 0), i64 5}, %..string* %792
	store i64 8, i64* %790
	%793 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%794 = bitcast %Type_Info* %793 to %Type_Info*
	%795 = getelementptr inbounds %Type_Info*, %Type_Info** %778, i64 2
	%796 = getelementptr inbounds i64, i64* %780, i64 2
	%797 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %797, %Type_Info** %795
	%798 = getelementptr inbounds %..string, %..string* %779, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$32e, i64 0, i32 0), i64 6}, %..string* %798
	store i64 16, i64* %796
	%799 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%800 = bitcast %Type_Info* %799 to %Type_Info*
	%801 = getelementptr inbounds %Type_Info*, %Type_Info** %778, i64 3
	%802 = getelementptr inbounds i64, i64* %780, i64 3
	%803 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %803, %Type_Info** %801
	%804 = getelementptr inbounds %..string, %..string* %779, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$32f, i64 0, i32 0), i64 7}, %..string* %804
	store i64 24, i64* %802
	%805 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%806 = bitcast %Type_Info* %805 to %Type_Info*
	%807 = getelementptr inbounds %Type_Info*, %Type_Info** %778, i64 4
	%808 = getelementptr inbounds i64, i64* %780, i64 4
	%809 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %809, %Type_Info** %807
	%810 = getelementptr inbounds %..string, %..string* %779, i64 4
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$330, i64 0, i32 0), i64 8}, %..string* %810
	store i64 32, i64* %808
	%811 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	%812 = bitcast %Type_Info* %811 to %Type_Info*
	%813 = getelementptr inbounds %Type_Info*, %Type_Info** %778, i64 5
	%814 = getelementptr inbounds i64, i64* %780, i64 5
	%815 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	store %Type_Info* %815, %Type_Info** %813
	%816 = getelementptr inbounds %..string, %..string* %779, i64 5
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$331, i64 0, i32 0), i64 10}, %..string* %816
	store i64 40, i64* %814
	%817 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %774, i64 0, i32 0
	%818 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %817, i64 0, i32 0
	store %Type_Info** %778, %Type_Info*** %818
	%819 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %817, i64 0, i32 1
	store i64 6, i64* %819
	%820 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %817, i64 0, i32 2
	store i64 6, i64* %820
	%821 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %774, i64 0, i32 1
	%822 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %821, i64 0, i32 0
	store %..string* %779, %..string** %822
	%823 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %821, i64 0, i32 1
	store i64 6, i64* %823
	%824 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %821, i64 0, i32 2
	store i64 6, i64* %824
	%825 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %774, i64 0, i32 2
	%826 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %825, i64 0, i32 0
	store i64* %780, i64** %826
	%827 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %825, i64 0, i32 1
	store i64 6, i64* %827
	%828 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %825, i64 0, i32 2
	store i64 6, i64* %828
	%829 = getelementptr inbounds %Type_Info, %Type_Info* %766, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %829
	%830 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%831 = bitcast %Type_Info* %830 to i8*
	%832 = getelementptr inbounds i8, i8* %831, i64 0
	%833 = bitcast i8* %832 to i64*
	store i64 8, i64* %833
	%834 = bitcast %Type_Info* %830 to i8*
	%835 = getelementptr inbounds i8, i8* %834, i64 8
	%836 = bitcast i8* %835 to i64*
	store i64 8, i64* %836
	; Type_Info_Pointer
	%837 = bitcast %Type_Info* %830 to %Type_Info.Pointer*
	%838 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%839 = bitcast %Type_Info* %838 to %Type_Info*
	%840 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %837, i64 0, i32 2
	store %Type_Info* %839, %Type_Info** %840
	%841 = getelementptr inbounds %Type_Info, %Type_Info* %830, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %841
	%842 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%843 = bitcast %Type_Info* %842 to i8*
	%844 = getelementptr inbounds i8, i8* %843, i64 0
	%845 = bitcast i8* %844 to i64*
	store i64 8, i64* %845
	%846 = bitcast %Type_Info* %842 to i8*
	%847 = getelementptr inbounds i8, i8* %846, i64 8
	%848 = bitcast i8* %847 to i64*
	store i64 8, i64* %848
	; Type_Info_Pointer
	%849 = bitcast %Type_Info* %842 to %Type_Info.Pointer*
	%850 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%851 = bitcast %Type_Info* %850 to %Type_Info*
	%852 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %849, i64 0, i32 2
	store %Type_Info* %851, %Type_Info** %852
	%853 = getelementptr inbounds %Type_Info, %Type_Info* %842, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %853
	%854 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	%855 = bitcast %Type_Info* %854 to i8*
	%856 = getelementptr inbounds i8, i8* %855, i64 0
	%857 = bitcast i8* %856 to i64*
	store i64 8, i64* %857
	%858 = bitcast %Type_Info* %854 to i8*
	%859 = getelementptr inbounds i8, i8* %858, i64 8
	%860 = bitcast i8* %859 to i64*
	store i64 8, i64* %860
	; Type_Info_Named
	%861 = bitcast %Type_Info* %854 to %Type_Info.Named*
	%862 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 25
	%863 = bitcast %Type_Info* %862 to %Type_Info*
	%864 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %861, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$332, i64 0, i32 0), i64 18}, %..string* %864
	%865 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %861, i64 0, i32 3
	store %Type_Info* %863, %Type_Info** %865
	%866 = getelementptr inbounds %Type_Info, %Type_Info* %854, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %866
	%867 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 25
	%868 = bitcast %Type_Info* %867 to i8*
	%869 = getelementptr inbounds i8, i8* %868, i64 0
	%870 = bitcast i8* %869 to i64*
	store i64 8, i64* %870
	%871 = bitcast %Type_Info* %867 to i8*
	%872 = getelementptr inbounds i8, i8* %871, i64 8
	%873 = bitcast i8* %872 to i64*
	store i64 8, i64* %873
	; Type_Info_Enum
	%874 = bitcast %Type_Info* %867 to %Type_Info.Enum*
	%875 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%876 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %874, i64 0, i32 2
	store %Type_Info* %875, %Type_Info** %876
	%877 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 0
	%878 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 0
	%879 = bitcast {[0 x <8 x i8>], [8 x i8]}* %878 to i64*
	store i64 0, i64* %879
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$333, i64 0, i32 0), i64 4}, %..string* %877
	%880 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 1
	%881 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 1
	%882 = bitcast {[0 x <8 x i8>], [8 x i8]}* %881 to i64*
	store i64 1, i64* %882
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$334, i64 0, i32 0), i64 1}, %..string* %880
	%883 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 2
	%884 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 2
	%885 = bitcast {[0 x <8 x i8>], [8 x i8]}* %884 to i64*
	store i64 2, i64* %885
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$335, i64 0, i32 0), i64 3}, %..string* %883
	%886 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 3
	%887 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 3
	%888 = bitcast {[0 x <8 x i8>], [8 x i8]}* %887 to i64*
	store i64 3, i64* %888
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$336, i64 0, i32 0), i64 4}, %..string* %886
	%889 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %874, i64 0, i32 3
	%890 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 0
	%891 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %889, i64 0, i32 0
	store %..string* %890, %..string** %891
	%892 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %889, i64 0, i32 1
	store i64 4, i64* %892
	%893 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %874, i64 0, i32 4
	%894 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 0
	%895 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %893, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %894, {[0 x <8 x i8>], [8 x i8]}** %895
	%896 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %893, i64 0, i32 1
	store i64 4, i64* %896
	%897 = getelementptr inbounds %Type_Info, %Type_Info* %867, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %897
	%898 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%899 = bitcast %Type_Info* %898 to i8*
	%900 = getelementptr inbounds i8, i8* %899, i64 0
	%901 = bitcast i8* %900 to i64*
	store i64 40, i64* %901
	%902 = bitcast %Type_Info* %898 to i8*
	%903 = getelementptr inbounds i8, i8* %902, i64 8
	%904 = bitcast i8* %903 to i64*
	store i64 8, i64* %904
	; Type_Info_Named
	%905 = bitcast %Type_Info* %898 to %Type_Info.Named*
	%906 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%907 = bitcast %Type_Info* %906 to %Type_Info*
	%908 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %905, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$337, i64 0, i32 0), i64 5}, %..string* %908
	%909 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %905, i64 0, i32 3
	store %Type_Info* %907, %Type_Info** %909
	%910 = getelementptr inbounds %Type_Info, %Type_Info* %898, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %910
	%911 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%912 = bitcast %Type_Info* %911 to i8*
	%913 = getelementptr inbounds i8, i8* %912, i64 0
	%914 = bitcast i8* %913 to i64*
	store i64 40, i64* %914
	%915 = bitcast %Type_Info* %911 to i8*
	%916 = getelementptr inbounds i8, i8* %915, i64 8
	%917 = bitcast i8* %916 to i64*
	store i64 8, i64* %917
	; Type_Info_Struct
	%918 = bitcast %Type_Info* %911 to %Type_Info.Struct*
	%919 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %918, i64 0, i32 2
	%920 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %919, i64 0, i32 3
	store i1 false, i1* %920
	%921 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %919, i64 0, i32 4
	store i1 true, i1* %921
	%922 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %919, i64 0, i32 5
	store i1 false, i1* %922
	%923 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 50
	%924 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 50
	%925 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 30
	%926 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%927 = bitcast %Type_Info* %926 to %Type_Info*
	%928 = getelementptr inbounds %Type_Info*, %Type_Info** %923, i64 0
	%929 = getelementptr inbounds i64, i64* %925, i64 0
	%930 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %930, %Type_Info** %928
	%931 = getelementptr inbounds %..string, %..string* %924, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$338, i64 0, i32 0), i64 4}, %..string* %931
	store i64 0, i64* %929
	%932 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%933 = bitcast %Type_Info* %932 to %Type_Info*
	%934 = getelementptr inbounds %Type_Info*, %Type_Info** %923, i64 1
	%935 = getelementptr inbounds i64, i64* %925, i64 1
	%936 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %936, %Type_Info** %934
	%937 = getelementptr inbounds %..string, %..string* %924, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$339, i64 0, i32 0), i64 5}, %..string* %937
	store i64 8, i64* %935
	%938 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%939 = bitcast %Type_Info* %938 to %Type_Info*
	%940 = getelementptr inbounds %Type_Info*, %Type_Info** %923, i64 2
	%941 = getelementptr inbounds i64, i64* %925, i64 2
	%942 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %942, %Type_Info** %940
	%943 = getelementptr inbounds %..string, %..string* %924, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$33a, i64 0, i32 0), i64 4}, %..string* %943
	store i64 16, i64* %941
	%944 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%945 = bitcast %Type_Info* %944 to %Type_Info*
	%946 = getelementptr inbounds %Type_Info*, %Type_Info** %923, i64 3
	%947 = getelementptr inbounds i64, i64* %925, i64 3
	%948 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %948, %Type_Info** %946
	%949 = getelementptr inbounds %..string, %..string* %924, i64 3
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$33b, i64 0, i32 0), i64 9}, %..string* %949
	store i64 24, i64* %947
	%950 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%951 = bitcast %Type_Info* %950 to %Type_Info*
	%952 = getelementptr inbounds %Type_Info*, %Type_Info** %923, i64 4
	%953 = getelementptr inbounds i64, i64* %925, i64 4
	%954 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %954, %Type_Info** %952
	%955 = getelementptr inbounds %..string, %..string* %924, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$33c, i64 0, i32 0), i64 5}, %..string* %955
	store i64 32, i64* %953
	%956 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %919, i64 0, i32 0
	%957 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %956, i64 0, i32 0
	store %Type_Info** %923, %Type_Info*** %957
	%958 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %956, i64 0, i32 1
	store i64 5, i64* %958
	%959 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %956, i64 0, i32 2
	store i64 5, i64* %959
	%960 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %919, i64 0, i32 1
	%961 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %960, i64 0, i32 0
	store %..string* %924, %..string** %961
	%962 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %960, i64 0, i32 1
	store i64 5, i64* %962
	%963 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %960, i64 0, i32 2
	store i64 5, i64* %963
	%964 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %919, i64 0, i32 2
	%965 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %964, i64 0, i32 0
	store i64* %925, i64** %965
	%966 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %964, i64 0, i32 1
	store i64 5, i64* %966
	%967 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %964, i64 0, i32 2
	store i64 5, i64* %967
	%968 = getelementptr inbounds %Type_Info, %Type_Info* %911, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %968
	%969 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%970 = bitcast %Type_Info* %969 to i8*
	%971 = getelementptr inbounds i8, i8* %970, i64 0
	%972 = bitcast i8* %971 to i64*
	store i64 8, i64* %972
	%973 = bitcast %Type_Info* %969 to i8*
	%974 = getelementptr inbounds i8, i8* %973, i64 8
	%975 = bitcast i8* %974 to i64*
	store i64 8, i64* %975
	; Type_Info_Pointer
	%976 = bitcast %Type_Info* %969 to %Type_Info.Pointer*
	%977 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%978 = bitcast %Type_Info* %977 to %Type_Info*
	%979 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %976, i64 0, i32 2
	store %Type_Info* %978, %Type_Info** %979
	%980 = getelementptr inbounds %Type_Info, %Type_Info* %969, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %980
	%981 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%982 = bitcast %Type_Info* %981 to i8*
	%983 = getelementptr inbounds i8, i8* %982, i64 0
	%984 = bitcast i8* %983 to i64*
	store i64 32, i64* %984
	%985 = bitcast %Type_Info* %981 to i8*
	%986 = getelementptr inbounds i8, i8* %985, i64 8
	%987 = bitcast i8* %986 to i64*
	store i64 8, i64* %987
	; Type_Info_Named
	%988 = bitcast %Type_Info* %981 to %Type_Info.Named*
	%989 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%990 = bitcast %Type_Info* %989 to %Type_Info*
	%991 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %988, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$33d, i64 0, i32 0), i64 13}, %..string* %991
	%992 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %988, i64 0, i32 3
	store %Type_Info* %990, %Type_Info** %992
	%993 = getelementptr inbounds %Type_Info, %Type_Info* %981, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %993
	%994 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%995 = bitcast %Type_Info* %994 to i8*
	%996 = getelementptr inbounds i8, i8* %995, i64 0
	%997 = bitcast i8* %996 to i64*
	store i64 32, i64* %997
	%998 = bitcast %Type_Info* %994 to i8*
	%999 = getelementptr inbounds i8, i8* %998, i64 8
	%1000 = bitcast i8* %999 to i64*
	store i64 8, i64* %1000
	; Type_Info_Struct
	%1001 = bitcast %Type_Info* %994 to %Type_Info.Struct*
	%1002 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1001, i64 0, i32 2
	%1003 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1002, i64 0, i32 3
	store i1 false, i1* %1003
	%1004 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1002, i64 0, i32 4
	store i1 true, i1* %1004
	%1005 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1002, i64 0, i32 5
	store i1 false, i1* %1005
	%1006 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 55
	%1007 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 55
	%1008 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 35
	%1009 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1010 = bitcast %Type_Info* %1009 to %Type_Info*
	%1011 = getelementptr inbounds %Type_Info*, %Type_Info** %1006, i64 0
	%1012 = getelementptr inbounds i64, i64* %1008, i64 0
	%1013 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1013, %Type_Info** %1011
	%1014 = getelementptr inbounds %..string, %..string* %1007, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$33e, i64 0, i32 0), i64 4}, %..string* %1014
	store i64 0, i64* %1012
	%1015 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1016 = bitcast %Type_Info* %1015 to %Type_Info*
	%1017 = getelementptr inbounds %Type_Info*, %Type_Info** %1006, i64 1
	%1018 = getelementptr inbounds i64, i64* %1008, i64 1
	%1019 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1019, %Type_Info** %1017
	%1020 = getelementptr inbounds %..string, %..string* %1007, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$33f, i64 0, i32 0), i64 5}, %..string* %1020
	store i64 8, i64* %1018
	%1021 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1022 = bitcast %Type_Info* %1021 to %Type_Info*
	%1023 = getelementptr inbounds %Type_Info*, %Type_Info** %1006, i64 2
	%1024 = getelementptr inbounds i64, i64* %1008, i64 2
	%1025 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %1025, %Type_Info** %1023
	%1026 = getelementptr inbounds %..string, %..string* %1007, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$340, i64 0, i32 0), i64 4}, %..string* %1026
	store i64 16, i64* %1024
	%1027 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1028 = bitcast %Type_Info* %1027 to %Type_Info*
	%1029 = getelementptr inbounds %Type_Info*, %Type_Info** %1006, i64 3
	%1030 = getelementptr inbounds i64, i64* %1008, i64 3
	%1031 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1031, %Type_Info** %1029
	%1032 = getelementptr inbounds %..string, %..string* %1007, i64 3
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$341, i64 0, i32 0), i64 9}, %..string* %1032
	store i64 24, i64* %1030
	%1033 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1002, i64 0, i32 0
	%1034 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1033, i64 0, i32 0
	store %Type_Info** %1006, %Type_Info*** %1034
	%1035 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1033, i64 0, i32 1
	store i64 4, i64* %1035
	%1036 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1033, i64 0, i32 2
	store i64 4, i64* %1036
	%1037 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1002, i64 0, i32 1
	%1038 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1037, i64 0, i32 0
	store %..string* %1007, %..string** %1038
	%1039 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1037, i64 0, i32 1
	store i64 4, i64* %1039
	%1040 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1037, i64 0, i32 2
	store i64 4, i64* %1040
	%1041 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1002, i64 0, i32 2
	%1042 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1041, i64 0, i32 0
	store i64* %1008, i64** %1042
	%1043 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1041, i64 0, i32 1
	store i64 4, i64* %1043
	%1044 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1041, i64 0, i32 2
	store i64 4, i64* %1044
	%1045 = getelementptr inbounds %Type_Info, %Type_Info* %994, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1045
	%1046 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1047 = bitcast %Type_Info* %1046 to i8*
	%1048 = getelementptr inbounds i8, i8* %1047, i64 0
	%1049 = bitcast i8* %1048 to i64*
	store i64 8, i64* %1049
	%1050 = bitcast %Type_Info* %1046 to i8*
	%1051 = getelementptr inbounds i8, i8* %1050, i64 8
	%1052 = bitcast i8* %1051 to i64*
	store i64 8, i64* %1052
	; Type_Info_Pointer
	%1053 = bitcast %Type_Info* %1046 to %Type_Info.Pointer*
	%1054 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1055 = bitcast %Type_Info* %1054 to %Type_Info*
	%1056 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1053, i64 0, i32 2
	store %Type_Info* %1055, %Type_Info** %1056
	%1057 = getelementptr inbounds %Type_Info, %Type_Info* %1046, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1057
	%1058 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%1059 = bitcast %Type_Info* %1058 to i8*
	%1060 = getelementptr inbounds i8, i8* %1059, i64 0
	%1061 = bitcast i8* %1060 to i64*
	store i64 32, i64* %1061
	%1062 = bitcast %Type_Info* %1058 to i8*
	%1063 = getelementptr inbounds i8, i8* %1062, i64 8
	%1064 = bitcast i8* %1063 to i64*
	store i64 8, i64* %1064
	; Type_Info_Named
	%1065 = bitcast %Type_Info* %1058 to %Type_Info.Named*
	%1066 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%1067 = bitcast %Type_Info* %1066 to %Type_Info*
	%1068 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1065, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$342, i64 0, i32 0), i64 5}, %..string* %1068
	%1069 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1065, i64 0, i32 3
	store %Type_Info* %1067, %Type_Info** %1069
	%1070 = getelementptr inbounds %Type_Info, %Type_Info* %1058, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1070
	%1071 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%1072 = bitcast %Type_Info* %1071 to i8*
	%1073 = getelementptr inbounds i8, i8* %1072, i64 0
	%1074 = bitcast i8* %1073 to i64*
	store i64 32, i64* %1074
	%1075 = bitcast %Type_Info* %1071 to i8*
	%1076 = getelementptr inbounds i8, i8* %1075, i64 8
	%1077 = bitcast i8* %1076 to i64*
	store i64 8, i64* %1077
	; Type_Info_Struct
	%1078 = bitcast %Type_Info* %1071 to %Type_Info.Struct*
	%1079 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1078, i64 0, i32 2
	%1080 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1079, i64 0, i32 3
	store i1 false, i1* %1080
	%1081 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1079, i64 0, i32 4
	store i1 true, i1* %1081
	%1082 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1079, i64 0, i32 5
	store i1 false, i1* %1082
	%1083 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 59
	%1084 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 59
	%1085 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 39
	%1086 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1087 = bitcast %Type_Info* %1086 to %Type_Info*
	%1088 = getelementptr inbounds %Type_Info*, %Type_Info** %1083, i64 0
	%1089 = getelementptr inbounds i64, i64* %1085, i64 0
	%1090 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1090, %Type_Info** %1088
	%1091 = getelementptr inbounds %..string, %..string* %1084, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$343, i64 0, i32 0), i64 4}, %..string* %1091
	store i64 0, i64* %1089
	%1092 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1093 = bitcast %Type_Info* %1092 to %Type_Info*
	%1094 = getelementptr inbounds %Type_Info*, %Type_Info** %1083, i64 1
	%1095 = getelementptr inbounds i64, i64* %1085, i64 1
	%1096 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1096, %Type_Info** %1094
	%1097 = getelementptr inbounds %..string, %..string* %1084, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$344, i64 0, i32 0), i64 5}, %..string* %1097
	store i64 8, i64* %1095
	%1098 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1099 = bitcast %Type_Info* %1098 to %Type_Info*
	%1100 = getelementptr inbounds %Type_Info*, %Type_Info** %1083, i64 2
	%1101 = getelementptr inbounds i64, i64* %1085, i64 2
	%1102 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %1102, %Type_Info** %1100
	%1103 = getelementptr inbounds %..string, %..string* %1084, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$345, i64 0, i32 0), i64 4}, %..string* %1103
	store i64 16, i64* %1101
	%1104 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1105 = bitcast %Type_Info* %1104 to %Type_Info*
	%1106 = getelementptr inbounds %Type_Info*, %Type_Info** %1083, i64 3
	%1107 = getelementptr inbounds i64, i64* %1085, i64 3
	%1108 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1108, %Type_Info** %1106
	%1109 = getelementptr inbounds %..string, %..string* %1084, i64 3
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$346, i64 0, i32 0), i64 9}, %..string* %1109
	store i64 24, i64* %1107
	%1110 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1079, i64 0, i32 0
	%1111 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1110, i64 0, i32 0
	store %Type_Info** %1083, %Type_Info*** %1111
	%1112 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1110, i64 0, i32 1
	store i64 4, i64* %1112
	%1113 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1110, i64 0, i32 2
	store i64 4, i64* %1113
	%1114 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1079, i64 0, i32 1
	%1115 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1114, i64 0, i32 0
	store %..string* %1084, %..string** %1115
	%1116 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1114, i64 0, i32 1
	store i64 4, i64* %1116
	%1117 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1114, i64 0, i32 2
	store i64 4, i64* %1117
	%1118 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1079, i64 0, i32 2
	%1119 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1118, i64 0, i32 0
	store i64* %1085, i64** %1119
	%1120 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1118, i64 0, i32 1
	store i64 4, i64* %1120
	%1121 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1118, i64 0, i32 2
	store i64 4, i64* %1121
	%1122 = getelementptr inbounds %Type_Info, %Type_Info* %1071, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1122
	%1123 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1124 = bitcast %Type_Info* %1123 to i8*
	%1125 = getelementptr inbounds i8, i8* %1124, i64 0
	%1126 = bitcast i8* %1125 to i64*
	store i64 8, i64* %1126
	%1127 = bitcast %Type_Info* %1123 to i8*
	%1128 = getelementptr inbounds i8, i8* %1127, i64 8
	%1129 = bitcast i8* %1128 to i64*
	store i64 8, i64* %1129
	; Type_Info_Pointer
	%1130 = bitcast %Type_Info* %1123 to %Type_Info.Pointer*
	%1131 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1132 = bitcast %Type_Info* %1131 to %Type_Info*
	%1133 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1130, i64 0, i32 2
	store %Type_Info* %1132, %Type_Info** %1133
	%1134 = getelementptr inbounds %Type_Info, %Type_Info* %1123, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1134
	%1135 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%1136 = bitcast %Type_Info* %1135 to i8*
	%1137 = getelementptr inbounds i8, i8* %1136, i64 0
	%1138 = bitcast i8* %1137 to i64*
	store i64 40, i64* %1138
	%1139 = bitcast %Type_Info* %1135 to i8*
	%1140 = getelementptr inbounds i8, i8* %1139, i64 8
	%1141 = bitcast i8* %1140 to i64*
	store i64 8, i64* %1141
	; Type_Info_Named
	%1142 = bitcast %Type_Info* %1135 to %Type_Info.Named*
	%1143 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%1144 = bitcast %Type_Info* %1143 to %Type_Info*
	%1145 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1142, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$347, i64 0, i32 0), i64 6}, %..string* %1145
	%1146 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1142, i64 0, i32 3
	store %Type_Info* %1144, %Type_Info** %1146
	%1147 = getelementptr inbounds %Type_Info, %Type_Info* %1135, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1147
	%1148 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%1149 = bitcast %Type_Info* %1148 to i8*
	%1150 = getelementptr inbounds i8, i8* %1149, i64 0
	%1151 = bitcast i8* %1150 to i64*
	store i64 40, i64* %1151
	%1152 = bitcast %Type_Info* %1148 to i8*
	%1153 = getelementptr inbounds i8, i8* %1152, i64 8
	%1154 = bitcast i8* %1153 to i64*
	store i64 8, i64* %1154
	; Type_Info_Struct
	%1155 = bitcast %Type_Info* %1148 to %Type_Info.Struct*
	%1156 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1155, i64 0, i32 2
	%1157 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1156, i64 0, i32 3
	store i1 false, i1* %1157
	%1158 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1156, i64 0, i32 4
	store i1 true, i1* %1158
	%1159 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1156, i64 0, i32 5
	store i1 false, i1* %1159
	%1160 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 63
	%1161 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 63
	%1162 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 43
	%1163 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1164 = bitcast %Type_Info* %1163 to %Type_Info*
	%1165 = getelementptr inbounds %Type_Info*, %Type_Info** %1160, i64 0
	%1166 = getelementptr inbounds i64, i64* %1162, i64 0
	%1167 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1167, %Type_Info** %1165
	%1168 = getelementptr inbounds %..string, %..string* %1161, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$348, i64 0, i32 0), i64 4}, %..string* %1168
	store i64 0, i64* %1166
	%1169 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1170 = bitcast %Type_Info* %1169 to %Type_Info*
	%1171 = getelementptr inbounds %Type_Info*, %Type_Info** %1160, i64 1
	%1172 = getelementptr inbounds i64, i64* %1162, i64 1
	%1173 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1173, %Type_Info** %1171
	%1174 = getelementptr inbounds %..string, %..string* %1161, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$349, i64 0, i32 0), i64 5}, %..string* %1174
	store i64 8, i64* %1172
	%1175 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1176 = bitcast %Type_Info* %1175 to %Type_Info*
	%1177 = getelementptr inbounds %Type_Info*, %Type_Info** %1160, i64 2
	%1178 = getelementptr inbounds i64, i64* %1162, i64 2
	%1179 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %1179, %Type_Info** %1177
	%1180 = getelementptr inbounds %..string, %..string* %1161, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$34a, i64 0, i32 0), i64 4}, %..string* %1180
	store i64 16, i64* %1178
	%1181 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1182 = bitcast %Type_Info* %1181 to %Type_Info*
	%1183 = getelementptr inbounds %Type_Info*, %Type_Info** %1160, i64 3
	%1184 = getelementptr inbounds i64, i64* %1162, i64 3
	%1185 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1185, %Type_Info** %1183
	%1186 = getelementptr inbounds %..string, %..string* %1161, i64 3
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$34b, i64 0, i32 0), i64 9}, %..string* %1186
	store i64 24, i64* %1184
	%1187 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1188 = bitcast %Type_Info* %1187 to %Type_Info*
	%1189 = getelementptr inbounds %Type_Info*, %Type_Info** %1160, i64 4
	%1190 = getelementptr inbounds i64, i64* %1162, i64 4
	%1191 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1191, %Type_Info** %1189
	%1192 = getelementptr inbounds %..string, %..string* %1161, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$34c, i64 0, i32 0), i64 5}, %..string* %1192
	store i64 32, i64* %1190
	%1193 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1156, i64 0, i32 0
	%1194 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1193, i64 0, i32 0
	store %Type_Info** %1160, %Type_Info*** %1194
	%1195 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1193, i64 0, i32 1
	store i64 5, i64* %1195
	%1196 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1193, i64 0, i32 2
	store i64 5, i64* %1196
	%1197 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1156, i64 0, i32 1
	%1198 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1197, i64 0, i32 0
	store %..string* %1161, %..string** %1198
	%1199 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1197, i64 0, i32 1
	store i64 5, i64* %1199
	%1200 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1197, i64 0, i32 2
	store i64 5, i64* %1200
	%1201 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1156, i64 0, i32 2
	%1202 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1201, i64 0, i32 0
	store i64* %1162, i64** %1202
	%1203 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1201, i64 0, i32 1
	store i64 5, i64* %1203
	%1204 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1201, i64 0, i32 2
	store i64 5, i64* %1204
	%1205 = getelementptr inbounds %Type_Info, %Type_Info* %1148, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1205
	%1206 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1207 = bitcast %Type_Info* %1206 to i8*
	%1208 = getelementptr inbounds i8, i8* %1207, i64 0
	%1209 = bitcast i8* %1208 to i64*
	store i64 8, i64* %1209
	%1210 = bitcast %Type_Info* %1206 to i8*
	%1211 = getelementptr inbounds i8, i8* %1210, i64 8
	%1212 = bitcast i8* %1211 to i64*
	store i64 8, i64* %1212
	; Type_Info_Pointer
	%1213 = bitcast %Type_Info* %1206 to %Type_Info.Pointer*
	%1214 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1215 = bitcast %Type_Info* %1214 to %Type_Info*
	%1216 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1213, i64 0, i32 2
	store %Type_Info* %1215, %Type_Info** %1216
	%1217 = getelementptr inbounds %Type_Info, %Type_Info* %1206, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1217
	%1218 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%1219 = bitcast %Type_Info* %1218 to i8*
	%1220 = getelementptr inbounds i8, i8* %1219, i64 0
	%1221 = bitcast i8* %1220 to i64*
	store i64 96, i64* %1221
	%1222 = bitcast %Type_Info* %1218 to i8*
	%1223 = getelementptr inbounds i8, i8* %1222, i64 8
	%1224 = bitcast i8* %1223 to i64*
	store i64 8, i64* %1224
	; Type_Info_Named
	%1225 = bitcast %Type_Info* %1218 to %Type_Info.Named*
	%1226 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1227 = bitcast %Type_Info* %1226 to %Type_Info*
	%1228 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1225, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$34d, i64 0, i32 0), i64 5}, %..string* %1228
	%1229 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1225, i64 0, i32 3
	store %Type_Info* %1227, %Type_Info** %1229
	%1230 = getelementptr inbounds %Type_Info, %Type_Info* %1218, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1230
	%1231 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1232 = bitcast %Type_Info* %1231 to i8*
	%1233 = getelementptr inbounds i8, i8* %1232, i64 0
	%1234 = bitcast i8* %1233 to i64*
	store i64 96, i64* %1234
	%1235 = bitcast %Type_Info* %1231 to i8*
	%1236 = getelementptr inbounds i8, i8* %1235, i64 8
	%1237 = bitcast i8* %1236 to i64*
	store i64 8, i64* %1237
	; Type_Info_Struct
	%1238 = bitcast %Type_Info* %1231 to %Type_Info.Struct*
	%1239 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1238, i64 0, i32 2
	%1240 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1239, i64 0, i32 3
	store i1 false, i1* %1240
	%1241 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1239, i64 0, i32 4
	store i1 true, i1* %1241
	%1242 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1239, i64 0, i32 5
	store i1 false, i1* %1242
	%1243 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 68
	%1244 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 68
	%1245 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 48
	%1246 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1247 = bitcast %Type_Info* %1246 to %Type_Info*
	%1248 = getelementptr inbounds %Type_Info*, %Type_Info** %1243, i64 0
	%1249 = getelementptr inbounds i64, i64* %1245, i64 0
	%1250 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1250, %Type_Info** %1248
	%1251 = getelementptr inbounds %..string, %..string* %1244, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$34e, i64 0, i32 0), i64 4}, %..string* %1251
	store i64 0, i64* %1249
	%1252 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1253 = bitcast %Type_Info* %1252 to %Type_Info*
	%1254 = getelementptr inbounds %Type_Info*, %Type_Info** %1243, i64 1
	%1255 = getelementptr inbounds i64, i64* %1245, i64 1
	%1256 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1256, %Type_Info** %1254
	%1257 = getelementptr inbounds %..string, %..string* %1244, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$34f, i64 0, i32 0), i64 5}, %..string* %1257
	store i64 8, i64* %1255
	%1258 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%1259 = bitcast %Type_Info* %1258 to %Type_Info*
	%1260 = getelementptr inbounds %Type_Info*, %Type_Info** %1243, i64 2
	%1261 = getelementptr inbounds i64, i64* %1245, i64 2
	%1262 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	store %Type_Info* %1262, %Type_Info** %1260
	%1263 = getelementptr inbounds %..string, %..string* %1244, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$350, i64 0, i32 0), i64 6}, %..string* %1263
	store i64 16, i64* %1261
	%1264 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1239, i64 0, i32 0
	%1265 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1264, i64 0, i32 0
	store %Type_Info** %1243, %Type_Info*** %1265
	%1266 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1264, i64 0, i32 1
	store i64 3, i64* %1266
	%1267 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1264, i64 0, i32 2
	store i64 3, i64* %1267
	%1268 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1239, i64 0, i32 1
	%1269 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1268, i64 0, i32 0
	store %..string* %1244, %..string** %1269
	%1270 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1268, i64 0, i32 1
	store i64 3, i64* %1270
	%1271 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1268, i64 0, i32 2
	store i64 3, i64* %1271
	%1272 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1239, i64 0, i32 2
	%1273 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1272, i64 0, i32 0
	store i64* %1245, i64** %1273
	%1274 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1272, i64 0, i32 1
	store i64 3, i64* %1274
	%1275 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1272, i64 0, i32 2
	store i64 3, i64* %1275
	%1276 = getelementptr inbounds %Type_Info, %Type_Info* %1231, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1276
	%1277 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%1278 = bitcast %Type_Info* %1277 to i8*
	%1279 = getelementptr inbounds i8, i8* %1278, i64 0
	%1280 = bitcast i8* %1279 to i64*
	store i64 80, i64* %1280
	%1281 = bitcast %Type_Info* %1277 to i8*
	%1282 = getelementptr inbounds i8, i8* %1281, i64 8
	%1283 = bitcast i8* %1282 to i64*
	store i64 8, i64* %1283
	; Type_Info_Named
	%1284 = bitcast %Type_Info* %1277 to %Type_Info.Named*
	%1285 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%1286 = bitcast %Type_Info* %1285 to %Type_Info*
	%1287 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1284, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$351, i64 0, i32 0), i64 16}, %..string* %1287
	%1288 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1284, i64 0, i32 3
	store %Type_Info* %1286, %Type_Info** %1288
	%1289 = getelementptr inbounds %Type_Info, %Type_Info* %1277, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1289
	%1290 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%1291 = bitcast %Type_Info* %1290 to i8*
	%1292 = getelementptr inbounds i8, i8* %1291, i64 0
	%1293 = bitcast i8* %1292 to i64*
	store i64 80, i64* %1293
	%1294 = bitcast %Type_Info* %1290 to i8*
	%1295 = getelementptr inbounds i8, i8* %1294, i64 8
	%1296 = bitcast i8* %1295 to i64*
	store i64 8, i64* %1296
	; Type_Info_Struct
	%1297 = bitcast %Type_Info* %1290 to %Type_Info.Struct*
	%1298 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1297, i64 0, i32 2
	%1299 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1298, i64 0, i32 3
	store i1 false, i1* %1299
	%1300 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1298, i64 0, i32 4
	store i1 true, i1* %1300
	%1301 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1298, i64 0, i32 5
	store i1 false, i1* %1301
	%1302 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 71
	%1303 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 71
	%1304 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 51
	%1305 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%1306 = bitcast %Type_Info* %1305 to %Type_Info*
	%1307 = getelementptr inbounds %Type_Info*, %Type_Info** %1302, i64 0
	%1308 = getelementptr inbounds i64, i64* %1304, i64 0
	%1309 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	store %Type_Info* %1309, %Type_Info** %1307
	%1310 = getelementptr inbounds %..string, %..string* %1303, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$352, i64 0, i32 0), i64 5}, %..string* %1310
	store i64 0, i64* %1308
	%1311 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1312 = bitcast %Type_Info* %1311 to %Type_Info*
	%1313 = getelementptr inbounds %Type_Info*, %Type_Info** %1302, i64 1
	%1314 = getelementptr inbounds i64, i64* %1304, i64 1
	%1315 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	store %Type_Info* %1315, %Type_Info** %1313
	%1316 = getelementptr inbounds %..string, %..string* %1303, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$353, i64 0, i32 0), i64 5}, %..string* %1316
	store i64 24, i64* %1314
	%1317 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	%1318 = bitcast %Type_Info* %1317 to %Type_Info*
	%1319 = getelementptr inbounds %Type_Info*, %Type_Info** %1302, i64 2
	%1320 = getelementptr inbounds i64, i64* %1304, i64 2
	%1321 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	store %Type_Info* %1321, %Type_Info** %1319
	%1322 = getelementptr inbounds %..string, %..string* %1303, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$354, i64 0, i32 0), i64 7}, %..string* %1322
	store i64 48, i64* %1320
	%1323 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%1324 = bitcast %Type_Info* %1323 to %Type_Info*
	%1325 = getelementptr inbounds %Type_Info*, %Type_Info** %1302, i64 3
	%1326 = getelementptr inbounds i64, i64* %1304, i64 3
	%1327 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %1327, %Type_Info** %1325
	%1328 = getelementptr inbounds %..string, %..string* %1303, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$355, i64 0, i32 0), i64 6}, %..string* %1328
	store i64 72, i64* %1326
	%1329 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%1330 = bitcast %Type_Info* %1329 to %Type_Info*
	%1331 = getelementptr inbounds %Type_Info*, %Type_Info** %1302, i64 4
	%1332 = getelementptr inbounds i64, i64* %1304, i64 4
	%1333 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %1333, %Type_Info** %1331
	%1334 = getelementptr inbounds %..string, %..string* %1303, i64 4
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$356, i64 0, i32 0), i64 7}, %..string* %1334
	store i64 73, i64* %1332
	%1335 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%1336 = bitcast %Type_Info* %1335 to %Type_Info*
	%1337 = getelementptr inbounds %Type_Info*, %Type_Info** %1302, i64 5
	%1338 = getelementptr inbounds i64, i64* %1304, i64 5
	%1339 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %1339, %Type_Info** %1337
	%1340 = getelementptr inbounds %..string, %..string* %1303, i64 5
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$357, i64 0, i32 0), i64 12}, %..string* %1340
	store i64 74, i64* %1338
	%1341 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1298, i64 0, i32 0
	%1342 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1341, i64 0, i32 0
	store %Type_Info** %1302, %Type_Info*** %1342
	%1343 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1341, i64 0, i32 1
	store i64 6, i64* %1343
	%1344 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1341, i64 0, i32 2
	store i64 6, i64* %1344
	%1345 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1298, i64 0, i32 1
	%1346 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1345, i64 0, i32 0
	store %..string* %1303, %..string** %1346
	%1347 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1345, i64 0, i32 1
	store i64 6, i64* %1347
	%1348 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1345, i64 0, i32 2
	store i64 6, i64* %1348
	%1349 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1298, i64 0, i32 2
	%1350 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1349, i64 0, i32 0
	store i64* %1304, i64** %1350
	%1351 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1349, i64 0, i32 1
	store i64 6, i64* %1351
	%1352 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1349, i64 0, i32 2
	store i64 6, i64* %1352
	%1353 = getelementptr inbounds %Type_Info, %Type_Info* %1290, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1353
	%1354 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%1355 = bitcast %Type_Info* %1354 to i8*
	%1356 = getelementptr inbounds i8, i8* %1355, i64 0
	%1357 = bitcast i8* %1356 to i64*
	store i64 24, i64* %1357
	%1358 = bitcast %Type_Info* %1354 to i8*
	%1359 = getelementptr inbounds i8, i8* %1358, i64 8
	%1360 = bitcast i8* %1359 to i64*
	store i64 8, i64* %1360
	; Type_Info_Slice
	%1361 = bitcast %Type_Info* %1354 to %Type_Info.Slice*
	%1362 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1363 = bitcast %Type_Info* %1362 to %Type_Info*
	%1364 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1361, i64 0, i32 2
	store %Type_Info* %1363, %Type_Info** %1364
	%1365 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1361, i64 0, i32 3
	store i64 8, i64* %1365
	%1366 = getelementptr inbounds %Type_Info, %Type_Info* %1354, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1366
	%1367 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1368 = bitcast %Type_Info* %1367 to i8*
	%1369 = getelementptr inbounds i8, i8* %1368, i64 0
	%1370 = bitcast i8* %1369 to i64*
	store i64 8, i64* %1370
	%1371 = bitcast %Type_Info* %1367 to i8*
	%1372 = getelementptr inbounds i8, i8* %1371, i64 8
	%1373 = bitcast i8* %1372 to i64*
	store i64 8, i64* %1373
	; Type_Info_Pointer
	%1374 = bitcast %Type_Info* %1367 to %Type_Info.Pointer*
	%1375 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1376 = bitcast %Type_Info* %1375 to %Type_Info*
	%1377 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1374, i64 0, i32 2
	store %Type_Info* %1376, %Type_Info** %1377
	%1378 = getelementptr inbounds %Type_Info, %Type_Info* %1367, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1378
	%1379 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1380 = bitcast %Type_Info* %1379 to i8*
	%1381 = getelementptr inbounds i8, i8* %1380, i64 0
	%1382 = bitcast i8* %1381 to i64*
	store i64 8, i64* %1382
	%1383 = bitcast %Type_Info* %1379 to i8*
	%1384 = getelementptr inbounds i8, i8* %1383, i64 8
	%1385 = bitcast i8* %1384 to i64*
	store i64 8, i64* %1385
	; Type_Info_Pointer
	%1386 = bitcast %Type_Info* %1379 to %Type_Info.Pointer*
	%1387 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1388 = bitcast %Type_Info* %1387 to %Type_Info*
	%1389 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1386, i64 0, i32 2
	store %Type_Info* %1388, %Type_Info** %1389
	%1390 = getelementptr inbounds %Type_Info, %Type_Info* %1379, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1390
	%1391 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1392 = bitcast %Type_Info* %1391 to i8*
	%1393 = getelementptr inbounds i8, i8* %1392, i64 0
	%1394 = bitcast i8* %1393 to i64*
	store i64 24, i64* %1394
	%1395 = bitcast %Type_Info* %1391 to i8*
	%1396 = getelementptr inbounds i8, i8* %1395, i64 8
	%1397 = bitcast i8* %1396 to i64*
	store i64 8, i64* %1397
	; Type_Info_Slice
	%1398 = bitcast %Type_Info* %1391 to %Type_Info.Slice*
	%1399 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1400 = bitcast %Type_Info* %1399 to %Type_Info*
	%1401 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1398, i64 0, i32 2
	store %Type_Info* %1400, %Type_Info** %1401
	%1402 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1398, i64 0, i32 3
	store i64 16, i64* %1402
	%1403 = getelementptr inbounds %Type_Info, %Type_Info* %1391, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1403
	%1404 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1405 = bitcast %Type_Info* %1404 to i8*
	%1406 = getelementptr inbounds i8, i8* %1405, i64 0
	%1407 = bitcast i8* %1406 to i64*
	store i64 8, i64* %1407
	%1408 = bitcast %Type_Info* %1404 to i8*
	%1409 = getelementptr inbounds i8, i8* %1408, i64 8
	%1410 = bitcast i8* %1409 to i64*
	store i64 8, i64* %1410
	; Type_Info_Pointer
	%1411 = bitcast %Type_Info* %1404 to %Type_Info.Pointer*
	%1412 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1413 = bitcast %Type_Info* %1412 to %Type_Info*
	%1414 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1411, i64 0, i32 2
	store %Type_Info* %1413, %Type_Info** %1414
	%1415 = getelementptr inbounds %Type_Info, %Type_Info* %1404, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1415
	%1416 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	%1417 = bitcast %Type_Info* %1416 to i8*
	%1418 = getelementptr inbounds i8, i8* %1417, i64 0
	%1419 = bitcast i8* %1418 to i64*
	store i64 24, i64* %1419
	%1420 = bitcast %Type_Info* %1416 to i8*
	%1421 = getelementptr inbounds i8, i8* %1420, i64 8
	%1422 = bitcast i8* %1421 to i64*
	store i64 8, i64* %1422
	; Type_Info_Slice
	%1423 = bitcast %Type_Info* %1416 to %Type_Info.Slice*
	%1424 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1425 = bitcast %Type_Info* %1424 to %Type_Info*
	%1426 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1423, i64 0, i32 2
	store %Type_Info* %1425, %Type_Info** %1426
	%1427 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1423, i64 0, i32 3
	store i64 8, i64* %1427
	%1428 = getelementptr inbounds %Type_Info, %Type_Info* %1416, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1428
	%1429 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%1430 = bitcast %Type_Info* %1429 to i8*
	%1431 = getelementptr inbounds i8, i8* %1430, i64 0
	%1432 = bitcast i8* %1431 to i64*
	store i64 8, i64* %1432
	%1433 = bitcast %Type_Info* %1429 to i8*
	%1434 = getelementptr inbounds i8, i8* %1433, i64 8
	%1435 = bitcast i8* %1434 to i64*
	store i64 8, i64* %1435
	; Type_Info_Pointer
	%1436 = bitcast %Type_Info* %1429 to %Type_Info.Pointer*
	%1437 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1438 = bitcast %Type_Info* %1437 to %Type_Info*
	%1439 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1436, i64 0, i32 2
	store %Type_Info* %1438, %Type_Info** %1439
	%1440 = getelementptr inbounds %Type_Info, %Type_Info* %1429, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1440
	%1441 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%1442 = bitcast %Type_Info* %1441 to i8*
	%1443 = getelementptr inbounds i8, i8* %1442, i64 0
	%1444 = bitcast i8* %1443 to i64*
	store i64 96, i64* %1444
	%1445 = bitcast %Type_Info* %1441 to i8*
	%1446 = getelementptr inbounds i8, i8* %1445, i64 8
	%1447 = bitcast i8* %1446 to i64*
	store i64 8, i64* %1447
	; Type_Info_Named
	%1448 = bitcast %Type_Info* %1441 to %Type_Info.Named*
	%1449 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1450 = bitcast %Type_Info* %1449 to %Type_Info*
	%1451 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1448, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$358, i64 0, i32 0), i64 6}, %..string* %1451
	%1452 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1448, i64 0, i32 3
	store %Type_Info* %1450, %Type_Info** %1452
	%1453 = getelementptr inbounds %Type_Info, %Type_Info* %1441, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1453
	%1454 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1455 = bitcast %Type_Info* %1454 to i8*
	%1456 = getelementptr inbounds i8, i8* %1455, i64 0
	%1457 = bitcast i8* %1456 to i64*
	store i64 96, i64* %1457
	%1458 = bitcast %Type_Info* %1454 to i8*
	%1459 = getelementptr inbounds i8, i8* %1458, i64 8
	%1460 = bitcast i8* %1459 to i64*
	store i64 8, i64* %1460
	; Type_Info_Struct
	%1461 = bitcast %Type_Info* %1454 to %Type_Info.Struct*
	%1462 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1461, i64 0, i32 2
	%1463 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1462, i64 0, i32 3
	store i1 false, i1* %1463
	%1464 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1462, i64 0, i32 4
	store i1 true, i1* %1464
	%1465 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1462, i64 0, i32 5
	store i1 false, i1* %1465
	%1466 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 77
	%1467 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 77
	%1468 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 57
	%1469 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1470 = bitcast %Type_Info* %1469 to %Type_Info*
	%1471 = getelementptr inbounds %Type_Info*, %Type_Info** %1466, i64 0
	%1472 = getelementptr inbounds i64, i64* %1468, i64 0
	%1473 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1473, %Type_Info** %1471
	%1474 = getelementptr inbounds %..string, %..string* %1467, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$359, i64 0, i32 0), i64 4}, %..string* %1474
	store i64 0, i64* %1472
	%1475 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1476 = bitcast %Type_Info* %1475 to %Type_Info*
	%1477 = getelementptr inbounds %Type_Info*, %Type_Info** %1466, i64 1
	%1478 = getelementptr inbounds i64, i64* %1468, i64 1
	%1479 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1479, %Type_Info** %1477
	%1480 = getelementptr inbounds %..string, %..string* %1467, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$35a, i64 0, i32 0), i64 5}, %..string* %1480
	store i64 8, i64* %1478
	%1481 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%1482 = bitcast %Type_Info* %1481 to %Type_Info*
	%1483 = getelementptr inbounds %Type_Info*, %Type_Info** %1466, i64 2
	%1484 = getelementptr inbounds i64, i64* %1468, i64 2
	%1485 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	store %Type_Info* %1485, %Type_Info** %1483
	%1486 = getelementptr inbounds %..string, %..string* %1467, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$35b, i64 0, i32 0), i64 6}, %..string* %1486
	store i64 16, i64* %1484
	%1487 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1462, i64 0, i32 0
	%1488 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1487, i64 0, i32 0
	store %Type_Info** %1466, %Type_Info*** %1488
	%1489 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1487, i64 0, i32 1
	store i64 3, i64* %1489
	%1490 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1487, i64 0, i32 2
	store i64 3, i64* %1490
	%1491 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1462, i64 0, i32 1
	%1492 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1491, i64 0, i32 0
	store %..string* %1467, %..string** %1492
	%1493 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1491, i64 0, i32 1
	store i64 3, i64* %1493
	%1494 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1491, i64 0, i32 2
	store i64 3, i64* %1494
	%1495 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1462, i64 0, i32 2
	%1496 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1495, i64 0, i32 0
	store i64* %1468, i64** %1496
	%1497 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1495, i64 0, i32 1
	store i64 3, i64* %1497
	%1498 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1495, i64 0, i32 2
	store i64 3, i64* %1498
	%1499 = getelementptr inbounds %Type_Info, %Type_Info* %1454, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1499
	%1500 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%1501 = bitcast %Type_Info* %1500 to i8*
	%1502 = getelementptr inbounds i8, i8* %1501, i64 0
	%1503 = bitcast i8* %1502 to i64*
	store i64 96, i64* %1503
	%1504 = bitcast %Type_Info* %1500 to i8*
	%1505 = getelementptr inbounds i8, i8* %1504, i64 8
	%1506 = bitcast i8* %1505 to i64*
	store i64 8, i64* %1506
	; Type_Info_Named
	%1507 = bitcast %Type_Info* %1500 to %Type_Info.Named*
	%1508 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1509 = bitcast %Type_Info* %1508 to %Type_Info*
	%1510 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1507, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$35c, i64 0, i32 0), i64 9}, %..string* %1510
	%1511 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1507, i64 0, i32 3
	store %Type_Info* %1509, %Type_Info** %1511
	%1512 = getelementptr inbounds %Type_Info, %Type_Info* %1500, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1512
	%1513 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1514 = bitcast %Type_Info* %1513 to i8*
	%1515 = getelementptr inbounds i8, i8* %1514, i64 0
	%1516 = bitcast i8* %1515 to i64*
	store i64 96, i64* %1516
	%1517 = bitcast %Type_Info* %1513 to i8*
	%1518 = getelementptr inbounds i8, i8* %1517, i64 8
	%1519 = bitcast i8* %1518 to i64*
	store i64 8, i64* %1519
	; Type_Info_Struct
	%1520 = bitcast %Type_Info* %1513 to %Type_Info.Struct*
	%1521 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1520, i64 0, i32 2
	%1522 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1521, i64 0, i32 3
	store i1 false, i1* %1522
	%1523 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1521, i64 0, i32 4
	store i1 true, i1* %1523
	%1524 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1521, i64 0, i32 5
	store i1 false, i1* %1524
	%1525 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 80
	%1526 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 80
	%1527 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 60
	%1528 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1529 = bitcast %Type_Info* %1528 to %Type_Info*
	%1530 = getelementptr inbounds %Type_Info*, %Type_Info** %1525, i64 0
	%1531 = getelementptr inbounds i64, i64* %1527, i64 0
	%1532 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1532, %Type_Info** %1530
	%1533 = getelementptr inbounds %..string, %..string* %1526, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$35d, i64 0, i32 0), i64 4}, %..string* %1533
	store i64 0, i64* %1531
	%1534 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1535 = bitcast %Type_Info* %1534 to %Type_Info*
	%1536 = getelementptr inbounds %Type_Info*, %Type_Info** %1525, i64 1
	%1537 = getelementptr inbounds i64, i64* %1527, i64 1
	%1538 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1538, %Type_Info** %1536
	%1539 = getelementptr inbounds %..string, %..string* %1526, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$35e, i64 0, i32 0), i64 5}, %..string* %1539
	store i64 8, i64* %1537
	%1540 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%1541 = bitcast %Type_Info* %1540 to %Type_Info*
	%1542 = getelementptr inbounds %Type_Info*, %Type_Info** %1525, i64 2
	%1543 = getelementptr inbounds i64, i64* %1527, i64 2
	%1544 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	store %Type_Info* %1544, %Type_Info** %1542
	%1545 = getelementptr inbounds %..string, %..string* %1526, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$35f, i64 0, i32 0), i64 6}, %..string* %1545
	store i64 16, i64* %1543
	%1546 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1521, i64 0, i32 0
	%1547 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1546, i64 0, i32 0
	store %Type_Info** %1525, %Type_Info*** %1547
	%1548 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1546, i64 0, i32 1
	store i64 3, i64* %1548
	%1549 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1546, i64 0, i32 2
	store i64 3, i64* %1549
	%1550 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1521, i64 0, i32 1
	%1551 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1550, i64 0, i32 0
	store %..string* %1526, %..string** %1551
	%1552 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1550, i64 0, i32 1
	store i64 3, i64* %1552
	%1553 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1550, i64 0, i32 2
	store i64 3, i64* %1553
	%1554 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1521, i64 0, i32 2
	%1555 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1554, i64 0, i32 0
	store i64* %1527, i64** %1555
	%1556 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1554, i64 0, i32 1
	store i64 3, i64* %1556
	%1557 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1554, i64 0, i32 2
	store i64 3, i64* %1557
	%1558 = getelementptr inbounds %Type_Info, %Type_Info* %1513, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1558
	%1559 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%1560 = bitcast %Type_Info* %1559 to i8*
	%1561 = getelementptr inbounds i8, i8* %1560, i64 0
	%1562 = bitcast i8* %1561 to i64*
	store i64 136, i64* %1562
	%1563 = bitcast %Type_Info* %1559 to i8*
	%1564 = getelementptr inbounds i8, i8* %1563, i64 8
	%1565 = bitcast i8* %1564 to i64*
	store i64 8, i64* %1565
	; Type_Info_Named
	%1566 = bitcast %Type_Info* %1559 to %Type_Info.Named*
	%1567 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	%1568 = bitcast %Type_Info* %1567 to %Type_Info*
	%1569 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1566, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$360, i64 0, i32 0), i64 5}, %..string* %1569
	%1570 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1566, i64 0, i32 3
	store %Type_Info* %1568, %Type_Info** %1570
	%1571 = getelementptr inbounds %Type_Info, %Type_Info* %1559, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1571
	%1572 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	%1573 = bitcast %Type_Info* %1572 to i8*
	%1574 = getelementptr inbounds i8, i8* %1573, i64 0
	%1575 = bitcast i8* %1574 to i64*
	store i64 136, i64* %1575
	%1576 = bitcast %Type_Info* %1572 to i8*
	%1577 = getelementptr inbounds i8, i8* %1576, i64 8
	%1578 = bitcast i8* %1577 to i64*
	store i64 8, i64* %1578
	; Type_Info_Struct
	%1579 = bitcast %Type_Info* %1572 to %Type_Info.Struct*
	%1580 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1579, i64 0, i32 2
	%1581 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1580, i64 0, i32 3
	store i1 false, i1* %1581
	%1582 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1580, i64 0, i32 4
	store i1 true, i1* %1582
	%1583 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1580, i64 0, i32 5
	store i1 false, i1* %1583
	%1584 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 83
	%1585 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 83
	%1586 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 63
	%1587 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1588 = bitcast %Type_Info* %1587 to %Type_Info*
	%1589 = getelementptr inbounds %Type_Info*, %Type_Info** %1584, i64 0
	%1590 = getelementptr inbounds i64, i64* %1586, i64 0
	%1591 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1591, %Type_Info** %1589
	%1592 = getelementptr inbounds %..string, %..string* %1585, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$361, i64 0, i32 0), i64 4}, %..string* %1592
	store i64 0, i64* %1590
	%1593 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1594 = bitcast %Type_Info* %1593 to %Type_Info*
	%1595 = getelementptr inbounds %Type_Info*, %Type_Info** %1584, i64 1
	%1596 = getelementptr inbounds i64, i64* %1586, i64 1
	%1597 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1597, %Type_Info** %1595
	%1598 = getelementptr inbounds %..string, %..string* %1585, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$362, i64 0, i32 0), i64 5}, %..string* %1598
	store i64 8, i64* %1596
	%1599 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	%1600 = bitcast %Type_Info* %1599 to %Type_Info*
	%1601 = getelementptr inbounds %Type_Info*, %Type_Info** %1584, i64 2
	%1602 = getelementptr inbounds i64, i64* %1586, i64 2
	%1603 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	store %Type_Info* %1603, %Type_Info** %1601
	%1604 = getelementptr inbounds %..string, %..string* %1585, i64 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$363, i64 0, i32 0), i64 13}, %..string* %1604
	store i64 16, i64* %1602
	%1605 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1606 = bitcast %Type_Info* %1605 to %Type_Info*
	%1607 = getelementptr inbounds %Type_Info*, %Type_Info** %1584, i64 3
	%1608 = getelementptr inbounds i64, i64* %1586, i64 3
	%1609 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	store %Type_Info* %1609, %Type_Info** %1607
	%1610 = getelementptr inbounds %..string, %..string* %1585, i64 3
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$364, i64 0, i32 0), i64 13}, %..string* %1610
	store i64 88, i64* %1608
	%1611 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%1612 = bitcast %Type_Info* %1611 to %Type_Info*
	%1613 = getelementptr inbounds %Type_Info*, %Type_Info** %1584, i64 4
	%1614 = getelementptr inbounds i64, i64* %1586, i64 4
	%1615 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	store %Type_Info* %1615, %Type_Info** %1613
	%1616 = getelementptr inbounds %..string, %..string* %1585, i64 4
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$365, i64 0, i32 0), i64 13}, %..string* %1616
	store i64 112, i64* %1614
	%1617 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1580, i64 0, i32 0
	%1618 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1617, i64 0, i32 0
	store %Type_Info** %1584, %Type_Info*** %1618
	%1619 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1617, i64 0, i32 1
	store i64 5, i64* %1619
	%1620 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1617, i64 0, i32 2
	store i64 5, i64* %1620
	%1621 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1580, i64 0, i32 1
	%1622 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1621, i64 0, i32 0
	store %..string* %1585, %..string** %1622
	%1623 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1621, i64 0, i32 1
	store i64 5, i64* %1623
	%1624 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1621, i64 0, i32 2
	store i64 5, i64* %1624
	%1625 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1580, i64 0, i32 2
	%1626 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1625, i64 0, i32 0
	store i64* %1586, i64** %1626
	%1627 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1625, i64 0, i32 1
	store i64 5, i64* %1627
	%1628 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1625, i64 0, i32 2
	store i64 5, i64* %1628
	%1629 = getelementptr inbounds %Type_Info, %Type_Info* %1572, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1629
	%1630 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	%1631 = bitcast %Type_Info* %1630 to i8*
	%1632 = getelementptr inbounds i8, i8* %1631, i64 0
	%1633 = bitcast i8* %1632 to i64*
	store i64 72, i64* %1633
	%1634 = bitcast %Type_Info* %1630 to i8*
	%1635 = getelementptr inbounds i8, i8* %1634, i64 8
	%1636 = bitcast i8* %1635 to i64*
	store i64 8, i64* %1636
	; Type_Info_Struct
	%1637 = bitcast %Type_Info* %1630 to %Type_Info.Struct*
	%1638 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1637, i64 0, i32 2
	%1639 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1638, i64 0, i32 3
	store i1 false, i1* %1639
	%1640 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1638, i64 0, i32 4
	store i1 false, i1* %1640
	%1641 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1638, i64 0, i32 5
	store i1 false, i1* %1641
	%1642 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 88
	%1643 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 88
	%1644 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 68
	%1645 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%1646 = bitcast %Type_Info* %1645 to %Type_Info*
	%1647 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 0
	%1648 = getelementptr inbounds i64, i64* %1644, i64 0
	%1649 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	store %Type_Info* %1649, %Type_Info** %1647
	%1650 = getelementptr inbounds %..string, %..string* %1643, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$366, i64 0, i32 0), i64 5}, %..string* %1650
	store i64 0, i64* %1648
	%1651 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1652 = bitcast %Type_Info* %1651 to %Type_Info*
	%1653 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 1
	%1654 = getelementptr inbounds i64, i64* %1644, i64 1
	%1655 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	store %Type_Info* %1655, %Type_Info** %1653
	%1656 = getelementptr inbounds %..string, %..string* %1643, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$367, i64 0, i32 0), i64 5}, %..string* %1656
	store i64 24, i64* %1654
	%1657 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	%1658 = bitcast %Type_Info* %1657 to %Type_Info*
	%1659 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 2
	%1660 = getelementptr inbounds i64, i64* %1644, i64 2
	%1661 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	store %Type_Info* %1661, %Type_Info** %1659
	%1662 = getelementptr inbounds %..string, %..string* %1643, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$368, i64 0, i32 0), i64 7}, %..string* %1662
	store i64 48, i64* %1660
	%1663 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1638, i64 0, i32 0
	%1664 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1663, i64 0, i32 0
	store %Type_Info** %1642, %Type_Info*** %1664
	%1665 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1663, i64 0, i32 1
	store i64 3, i64* %1665
	%1666 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1663, i64 0, i32 2
	store i64 3, i64* %1666
	%1667 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1638, i64 0, i32 1
	%1668 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1667, i64 0, i32 0
	store %..string* %1643, %..string** %1668
	%1669 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1667, i64 0, i32 1
	store i64 3, i64* %1669
	%1670 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1667, i64 0, i32 2
	store i64 3, i64* %1670
	%1671 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1638, i64 0, i32 2
	%1672 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1671, i64 0, i32 0
	store i64* %1644, i64** %1672
	%1673 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1671, i64 0, i32 1
	store i64 3, i64* %1673
	%1674 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1671, i64 0, i32 2
	store i64 3, i64* %1674
	%1675 = getelementptr inbounds %Type_Info, %Type_Info* %1630, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1675
	%1676 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%1677 = bitcast %Type_Info* %1676 to i8*
	%1678 = getelementptr inbounds i8, i8* %1677, i64 0
	%1679 = bitcast i8* %1678 to i64*
	store i64 24, i64* %1679
	%1680 = bitcast %Type_Info* %1676 to i8*
	%1681 = getelementptr inbounds i8, i8* %1680, i64 8
	%1682 = bitcast i8* %1681 to i64*
	store i64 8, i64* %1682
	; Type_Info_Slice
	%1683 = bitcast %Type_Info* %1676 to %Type_Info.Slice*
	%1684 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1685 = bitcast %Type_Info* %1684 to %Type_Info*
	%1686 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1683, i64 0, i32 2
	store %Type_Info* %1685, %Type_Info** %1686
	%1687 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1683, i64 0, i32 3
	store i64 8, i64* %1687
	%1688 = getelementptr inbounds %Type_Info, %Type_Info* %1676, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1688
	%1689 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1690 = bitcast %Type_Info* %1689 to i8*
	%1691 = getelementptr inbounds i8, i8* %1690, i64 0
	%1692 = bitcast i8* %1691 to i64*
	store i64 8, i64* %1692
	%1693 = bitcast %Type_Info* %1689 to i8*
	%1694 = getelementptr inbounds i8, i8* %1693, i64 8
	%1695 = bitcast i8* %1694 to i64*
	store i64 8, i64* %1695
	; Type_Info_Pointer
	%1696 = bitcast %Type_Info* %1689 to %Type_Info.Pointer*
	%1697 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1698 = bitcast %Type_Info* %1697 to %Type_Info*
	%1699 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1696, i64 0, i32 2
	store %Type_Info* %1698, %Type_Info** %1699
	%1700 = getelementptr inbounds %Type_Info, %Type_Info* %1689, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1700
	%1701 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1702 = bitcast %Type_Info* %1701 to i8*
	%1703 = getelementptr inbounds i8, i8* %1702, i64 0
	%1704 = bitcast i8* %1703 to i64*
	store i64 8, i64* %1704
	%1705 = bitcast %Type_Info* %1701 to i8*
	%1706 = getelementptr inbounds i8, i8* %1705, i64 8
	%1707 = bitcast i8* %1706 to i64*
	store i64 8, i64* %1707
	; Type_Info_Pointer
	%1708 = bitcast %Type_Info* %1701 to %Type_Info.Pointer*
	%1709 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1710 = bitcast %Type_Info* %1709 to %Type_Info*
	%1711 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1708, i64 0, i32 2
	store %Type_Info* %1710, %Type_Info** %1711
	%1712 = getelementptr inbounds %Type_Info, %Type_Info* %1701, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1712
	%1713 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1714 = bitcast %Type_Info* %1713 to i8*
	%1715 = getelementptr inbounds i8, i8* %1714, i64 0
	%1716 = bitcast i8* %1715 to i64*
	store i64 24, i64* %1716
	%1717 = bitcast %Type_Info* %1713 to i8*
	%1718 = getelementptr inbounds i8, i8* %1717, i64 8
	%1719 = bitcast i8* %1718 to i64*
	store i64 8, i64* %1719
	; Type_Info_Slice
	%1720 = bitcast %Type_Info* %1713 to %Type_Info.Slice*
	%1721 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1722 = bitcast %Type_Info* %1721 to %Type_Info*
	%1723 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1720, i64 0, i32 2
	store %Type_Info* %1722, %Type_Info** %1723
	%1724 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1720, i64 0, i32 3
	store i64 16, i64* %1724
	%1725 = getelementptr inbounds %Type_Info, %Type_Info* %1713, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1725
	%1726 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1727 = bitcast %Type_Info* %1726 to i8*
	%1728 = getelementptr inbounds i8, i8* %1727, i64 0
	%1729 = bitcast i8* %1728 to i64*
	store i64 8, i64* %1729
	%1730 = bitcast %Type_Info* %1726 to i8*
	%1731 = getelementptr inbounds i8, i8* %1730, i64 8
	%1732 = bitcast i8* %1731 to i64*
	store i64 8, i64* %1732
	; Type_Info_Pointer
	%1733 = bitcast %Type_Info* %1726 to %Type_Info.Pointer*
	%1734 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1735 = bitcast %Type_Info* %1734 to %Type_Info*
	%1736 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1733, i64 0, i32 2
	store %Type_Info* %1735, %Type_Info** %1736
	%1737 = getelementptr inbounds %Type_Info, %Type_Info* %1726, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1737
	%1738 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	%1739 = bitcast %Type_Info* %1738 to i8*
	%1740 = getelementptr inbounds i8, i8* %1739, i64 0
	%1741 = bitcast i8* %1740 to i64*
	store i64 24, i64* %1741
	%1742 = bitcast %Type_Info* %1738 to i8*
	%1743 = getelementptr inbounds i8, i8* %1742, i64 8
	%1744 = bitcast i8* %1743 to i64*
	store i64 8, i64* %1744
	; Type_Info_Slice
	%1745 = bitcast %Type_Info* %1738 to %Type_Info.Slice*
	%1746 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1747 = bitcast %Type_Info* %1746 to %Type_Info*
	%1748 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1745, i64 0, i32 2
	store %Type_Info* %1747, %Type_Info** %1748
	%1749 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1745, i64 0, i32 3
	store i64 8, i64* %1749
	%1750 = getelementptr inbounds %Type_Info, %Type_Info* %1738, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1750
	%1751 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%1752 = bitcast %Type_Info* %1751 to i8*
	%1753 = getelementptr inbounds i8, i8* %1752, i64 0
	%1754 = bitcast i8* %1753 to i64*
	store i64 8, i64* %1754
	%1755 = bitcast %Type_Info* %1751 to i8*
	%1756 = getelementptr inbounds i8, i8* %1755, i64 8
	%1757 = bitcast i8* %1756 to i64*
	store i64 8, i64* %1757
	; Type_Info_Pointer
	%1758 = bitcast %Type_Info* %1751 to %Type_Info.Pointer*
	%1759 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1760 = bitcast %Type_Info* %1759 to %Type_Info*
	%1761 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1758, i64 0, i32 2
	store %Type_Info* %1760, %Type_Info** %1761
	%1762 = getelementptr inbounds %Type_Info, %Type_Info* %1751, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1762
	%1763 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1764 = bitcast %Type_Info* %1763 to i8*
	%1765 = getelementptr inbounds i8, i8* %1764, i64 0
	%1766 = bitcast i8* %1765 to i64*
	store i64 24, i64* %1766
	%1767 = bitcast %Type_Info* %1763 to i8*
	%1768 = getelementptr inbounds i8, i8* %1767, i64 8
	%1769 = bitcast i8* %1768 to i64*
	store i64 8, i64* %1769
	; Type_Info_Slice
	%1770 = bitcast %Type_Info* %1763 to %Type_Info.Slice*
	%1771 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1772 = bitcast %Type_Info* %1771 to %Type_Info*
	%1773 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1770, i64 0, i32 2
	store %Type_Info* %1772, %Type_Info** %1773
	%1774 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1770, i64 0, i32 3
	store i64 16, i64* %1774
	%1775 = getelementptr inbounds %Type_Info, %Type_Info* %1763, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1775
	%1776 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1777 = bitcast %Type_Info* %1776 to i8*
	%1778 = getelementptr inbounds i8, i8* %1777, i64 0
	%1779 = bitcast i8* %1778 to i64*
	store i64 8, i64* %1779
	%1780 = bitcast %Type_Info* %1776 to i8*
	%1781 = getelementptr inbounds i8, i8* %1780, i64 8
	%1782 = bitcast i8* %1781 to i64*
	store i64 8, i64* %1782
	; Type_Info_Pointer
	%1783 = bitcast %Type_Info* %1776 to %Type_Info.Pointer*
	%1784 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1785 = bitcast %Type_Info* %1784 to %Type_Info*
	%1786 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1783, i64 0, i32 2
	store %Type_Info* %1785, %Type_Info** %1786
	%1787 = getelementptr inbounds %Type_Info, %Type_Info* %1776, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1787
	%1788 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%1789 = bitcast %Type_Info* %1788 to i8*
	%1790 = getelementptr inbounds i8, i8* %1789, i64 0
	%1791 = bitcast i8* %1790 to i64*
	store i64 24, i64* %1791
	%1792 = bitcast %Type_Info* %1788 to i8*
	%1793 = getelementptr inbounds i8, i8* %1792, i64 8
	%1794 = bitcast i8* %1793 to i64*
	store i64 8, i64* %1794
	; Type_Info_Slice
	%1795 = bitcast %Type_Info* %1788 to %Type_Info.Slice*
	%1796 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1797 = bitcast %Type_Info* %1796 to %Type_Info*
	%1798 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1795, i64 0, i32 2
	store %Type_Info* %1797, %Type_Info** %1798
	%1799 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1795, i64 0, i32 3
	store i64 8, i64* %1799
	%1800 = getelementptr inbounds %Type_Info, %Type_Info* %1788, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1800
	%1801 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1802 = bitcast %Type_Info* %1801 to i8*
	%1803 = getelementptr inbounds i8, i8* %1802, i64 0
	%1804 = bitcast i8* %1803 to i64*
	store i64 8, i64* %1804
	%1805 = bitcast %Type_Info* %1801 to i8*
	%1806 = getelementptr inbounds i8, i8* %1805, i64 8
	%1807 = bitcast i8* %1806 to i64*
	store i64 8, i64* %1807
	; Type_Info_Pointer
	%1808 = bitcast %Type_Info* %1801 to %Type_Info.Pointer*
	%1809 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1810 = bitcast %Type_Info* %1809 to %Type_Info*
	%1811 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1808, i64 0, i32 2
	store %Type_Info* %1810, %Type_Info** %1811
	%1812 = getelementptr inbounds %Type_Info, %Type_Info* %1801, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1812
	%1813 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1814 = bitcast %Type_Info* %1813 to i8*
	%1815 = getelementptr inbounds i8, i8* %1814, i64 0
	%1816 = bitcast i8* %1815 to i64*
	store i64 8, i64* %1816
	%1817 = bitcast %Type_Info* %1813 to i8*
	%1818 = getelementptr inbounds i8, i8* %1817, i64 8
	%1819 = bitcast i8* %1818 to i64*
	store i64 8, i64* %1819
	; Type_Info_Pointer
	%1820 = bitcast %Type_Info* %1813 to %Type_Info.Pointer*
	%1821 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1822 = bitcast %Type_Info* %1821 to %Type_Info*
	%1823 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1820, i64 0, i32 2
	store %Type_Info* %1822, %Type_Info** %1823
	%1824 = getelementptr inbounds %Type_Info, %Type_Info* %1813, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1824
	%1825 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%1826 = bitcast %Type_Info* %1825 to i8*
	%1827 = getelementptr inbounds i8, i8* %1826, i64 0
	%1828 = bitcast i8* %1827 to i64*
	store i64 72, i64* %1828
	%1829 = bitcast %Type_Info* %1825 to i8*
	%1830 = getelementptr inbounds i8, i8* %1829, i64 8
	%1831 = bitcast i8* %1830 to i64*
	store i64 8, i64* %1831
	; Type_Info_Named
	%1832 = bitcast %Type_Info* %1825 to %Type_Info.Named*
	%1833 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	%1834 = bitcast %Type_Info* %1833 to %Type_Info*
	%1835 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1832, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$369, i64 0, i32 0), i64 4}, %..string* %1835
	%1836 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1832, i64 0, i32 3
	store %Type_Info* %1834, %Type_Info** %1836
	%1837 = getelementptr inbounds %Type_Info, %Type_Info* %1825, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1837
	%1838 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	%1839 = bitcast %Type_Info* %1838 to i8*
	%1840 = getelementptr inbounds i8, i8* %1839, i64 0
	%1841 = bitcast i8* %1840 to i64*
	store i64 72, i64* %1841
	%1842 = bitcast %Type_Info* %1838 to i8*
	%1843 = getelementptr inbounds i8, i8* %1842, i64 8
	%1844 = bitcast i8* %1843 to i64*
	store i64 8, i64* %1844
	; Type_Info_Struct
	%1845 = bitcast %Type_Info* %1838 to %Type_Info.Struct*
	%1846 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1845, i64 0, i32 2
	%1847 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1846, i64 0, i32 3
	store i1 false, i1* %1847
	%1848 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1846, i64 0, i32 4
	store i1 true, i1* %1848
	%1849 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1846, i64 0, i32 5
	store i1 false, i1* %1849
	%1850 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 91
	%1851 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 91
	%1852 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 71
	%1853 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1854 = bitcast %Type_Info* %1853 to %Type_Info*
	%1855 = getelementptr inbounds %Type_Info*, %Type_Info** %1850, i64 0
	%1856 = getelementptr inbounds i64, i64* %1852, i64 0
	%1857 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1857, %Type_Info** %1855
	%1858 = getelementptr inbounds %..string, %..string* %1851, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$36a, i64 0, i32 0), i64 4}, %..string* %1858
	store i64 0, i64* %1856
	%1859 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%1860 = bitcast %Type_Info* %1859 to %Type_Info*
	%1861 = getelementptr inbounds %Type_Info*, %Type_Info** %1850, i64 1
	%1862 = getelementptr inbounds i64, i64* %1852, i64 1
	%1863 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %1863, %Type_Info** %1861
	%1864 = getelementptr inbounds %..string, %..string* %1851, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$36b, i64 0, i32 0), i64 5}, %..string* %1864
	store i64 8, i64* %1862
	%1865 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1866 = bitcast %Type_Info* %1865 to %Type_Info*
	%1867 = getelementptr inbounds %Type_Info*, %Type_Info** %1850, i64 2
	%1868 = getelementptr inbounds i64, i64* %1852, i64 2
	%1869 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %1869, %Type_Info** %1867
	%1870 = getelementptr inbounds %..string, %..string* %1851, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$36c, i64 0, i32 0), i64 4}, %..string* %1870
	store i64 16, i64* %1868
	%1871 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1872 = bitcast %Type_Info* %1871 to %Type_Info*
	%1873 = getelementptr inbounds %Type_Info*, %Type_Info** %1850, i64 3
	%1874 = getelementptr inbounds i64, i64* %1852, i64 3
	%1875 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	store %Type_Info* %1875, %Type_Info** %1873
	%1876 = getelementptr inbounds %..string, %..string* %1851, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$36d, i64 0, i32 0), i64 5}, %..string* %1876
	store i64 24, i64* %1874
	%1877 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	%1878 = bitcast %Type_Info* %1877 to %Type_Info*
	%1879 = getelementptr inbounds %Type_Info*, %Type_Info** %1850, i64 4
	%1880 = getelementptr inbounds i64, i64* %1852, i64 4
	%1881 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	store %Type_Info* %1881, %Type_Info** %1879
	%1882 = getelementptr inbounds %..string, %..string* %1851, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$36e, i64 0, i32 0), i64 6}, %..string* %1882
	store i64 48, i64* %1880
	%1883 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1846, i64 0, i32 0
	%1884 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1883, i64 0, i32 0
	store %Type_Info** %1850, %Type_Info*** %1884
	%1885 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1883, i64 0, i32 1
	store i64 5, i64* %1885
	%1886 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1883, i64 0, i32 2
	store i64 5, i64* %1886
	%1887 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1846, i64 0, i32 1
	%1888 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1887, i64 0, i32 0
	store %..string* %1851, %..string** %1888
	%1889 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1887, i64 0, i32 1
	store i64 5, i64* %1889
	%1890 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1887, i64 0, i32 2
	store i64 5, i64* %1890
	%1891 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1846, i64 0, i32 2
	%1892 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1891, i64 0, i32 0
	store i64* %1852, i64** %1892
	%1893 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1891, i64 0, i32 1
	store i64 5, i64* %1893
	%1894 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1891, i64 0, i32 2
	store i64 5, i64* %1894
	%1895 = getelementptr inbounds %Type_Info, %Type_Info* %1838, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1895
	%1896 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1897 = bitcast %Type_Info* %1896 to i8*
	%1898 = getelementptr inbounds i8, i8* %1897, i64 0
	%1899 = bitcast i8* %1898 to i64*
	store i64 8, i64* %1899
	%1900 = bitcast %Type_Info* %1896 to i8*
	%1901 = getelementptr inbounds i8, i8* %1900, i64 8
	%1902 = bitcast i8* %1901 to i64*
	store i64 8, i64* %1902
	; Type_Info_Pointer
	%1903 = bitcast %Type_Info* %1896 to %Type_Info.Pointer*
	%1904 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%1905 = bitcast %Type_Info* %1904 to %Type_Info*
	%1906 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1903, i64 0, i32 2
	store %Type_Info* %1905, %Type_Info** %1906
	%1907 = getelementptr inbounds %Type_Info, %Type_Info* %1896, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1907
	%1908 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	%1909 = bitcast %Type_Info* %1908 to i8*
	%1910 = getelementptr inbounds i8, i8* %1909, i64 0
	%1911 = bitcast i8* %1910 to i64*
	store i64 24, i64* %1911
	%1912 = bitcast %Type_Info* %1908 to i8*
	%1913 = getelementptr inbounds i8, i8* %1912, i64 8
	%1914 = bitcast i8* %1913 to i64*
	store i64 8, i64* %1914
	; Type_Info_Slice
	%1915 = bitcast %Type_Info* %1908 to %Type_Info.Slice*
	%1916 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1917 = bitcast %Type_Info* %1916 to %Type_Info*
	%1918 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1915, i64 0, i32 2
	store %Type_Info* %1917, %Type_Info** %1918
	%1919 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1915, i64 0, i32 3
	store i64 16, i64* %1919
	%1920 = getelementptr inbounds %Type_Info, %Type_Info* %1908, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1920
	%1921 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1922 = bitcast %Type_Info* %1921 to i8*
	%1923 = getelementptr inbounds i8, i8* %1922, i64 0
	%1924 = bitcast i8* %1923 to i64*
	store i64 8, i64* %1924
	%1925 = bitcast %Type_Info* %1921 to i8*
	%1926 = getelementptr inbounds i8, i8* %1925, i64 8
	%1927 = bitcast i8* %1926 to i64*
	store i64 8, i64* %1927
	; Type_Info_Pointer
	%1928 = bitcast %Type_Info* %1921 to %Type_Info.Pointer*
	%1929 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%1930 = bitcast %Type_Info* %1929 to %Type_Info*
	%1931 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1928, i64 0, i32 2
	store %Type_Info* %1930, %Type_Info** %1931
	%1932 = getelementptr inbounds %Type_Info, %Type_Info* %1921, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1932
	%1933 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	%1934 = bitcast %Type_Info* %1933 to i8*
	%1935 = getelementptr inbounds i8, i8* %1934, i64 0
	%1936 = bitcast i8* %1935 to i64*
	store i64 24, i64* %1936
	%1937 = bitcast %Type_Info* %1933 to i8*
	%1938 = getelementptr inbounds i8, i8* %1937, i64 8
	%1939 = bitcast i8* %1938 to i64*
	store i64 8, i64* %1939
	; Type_Info_Slice
	%1940 = bitcast %Type_Info* %1933 to %Type_Info.Slice*
	%1941 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	%1942 = bitcast %Type_Info* %1941 to %Type_Info*
	%1943 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1940, i64 0, i32 2
	store %Type_Info* %1942, %Type_Info** %1943
	%1944 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1940, i64 0, i32 3
	store i64 8, i64* %1944
	%1945 = getelementptr inbounds %Type_Info, %Type_Info* %1933, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1945
	%1946 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	%1947 = bitcast %Type_Info* %1946 to i8*
	%1948 = getelementptr inbounds i8, i8* %1947, i64 0
	%1949 = bitcast i8* %1948 to i64*
	store i64 8, i64* %1949
	%1950 = bitcast %Type_Info* %1946 to i8*
	%1951 = getelementptr inbounds i8, i8* %1950, i64 8
	%1952 = bitcast i8* %1951 to i64*
	store i64 8, i64* %1952
	; Type_Info_Named
	%1953 = bitcast %Type_Info* %1946 to %Type_Info.Named*
	%1954 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	%1955 = bitcast %Type_Info* %1954 to %Type_Info*
	%1956 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1953, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$36f, i64 0, i32 0), i64 20}, %..string* %1956
	%1957 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1953, i64 0, i32 3
	store %Type_Info* %1955, %Type_Info** %1957
	%1958 = getelementptr inbounds %Type_Info, %Type_Info* %1946, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1958
	%1959 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	%1960 = bitcast %Type_Info* %1959 to i8*
	%1961 = getelementptr inbounds i8, i8* %1960, i64 0
	%1962 = bitcast i8* %1961 to i64*
	store i64 8, i64* %1962
	%1963 = bitcast %Type_Info* %1959 to i8*
	%1964 = getelementptr inbounds i8, i8* %1963, i64 8
	%1965 = bitcast i8* %1964 to i64*
	store i64 8, i64* %1965
	; Type_Info_RawUnion
	%1966 = bitcast %Type_Info* %1959 to %Type_Info.Raw_Union*
	%1967 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %1966, i64 0, i32 2
	%1968 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 96
	%1969 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 96
	%1970 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 76
	%1971 = getelementptr inbounds %Type_Info*, %Type_Info** %1968, i64 0
	%1972 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	store %Type_Info* %1972, %Type_Info** %1971
	%1973 = getelementptr inbounds %..string, %..string* %1969, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$370, i64 0, i32 0), i64 1}, %..string* %1973
	%1974 = getelementptr inbounds %Type_Info*, %Type_Info** %1968, i64 1
	%1975 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	store %Type_Info* %1975, %Type_Info** %1974
	%1976 = getelementptr inbounds %..string, %..string* %1969, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$371, i64 0, i32 0), i64 1}, %..string* %1976
	%1977 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1967, i64 0, i32 0
	%1978 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1977, i64 0, i32 0
	store %Type_Info** %1968, %Type_Info*** %1978
	%1979 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1977, i64 0, i32 1
	store i64 2, i64* %1979
	%1980 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1977, i64 0, i32 2
	store i64 2, i64* %1980
	%1981 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1967, i64 0, i32 1
	%1982 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1981, i64 0, i32 0
	store %..string* %1969, %..string** %1982
	%1983 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1981, i64 0, i32 1
	store i64 2, i64* %1983
	%1984 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1981, i64 0, i32 2
	store i64 2, i64* %1984
	%1985 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1967, i64 0, i32 2
	%1986 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1985, i64 0, i32 0
	store i64* %1970, i64** %1986
	%1987 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1985, i64 0, i32 1
	store i64 2, i64* %1987
	%1988 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1985, i64 0, i32 2
	store i64 2, i64* %1988
	%1989 = getelementptr inbounds %Type_Info, %Type_Info* %1959, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1989
	%1990 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%1991 = bitcast %Type_Info* %1990 to i8*
	%1992 = getelementptr inbounds i8, i8* %1991, i64 0
	%1993 = bitcast i8* %1992 to i64*
	store i64 8, i64* %1993
	%1994 = bitcast %Type_Info* %1990 to i8*
	%1995 = getelementptr inbounds i8, i8* %1994, i64 8
	%1996 = bitcast i8* %1995 to i64*
	store i64 8, i64* %1996
	; Type_Info_Basic
	%1997 = bitcast %Type_Info* %1990 to %Type_Info.Float*
	%1998 = getelementptr inbounds %Type_Info, %Type_Info* %1990, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %1998
	%1999 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%2000 = bitcast %Type_Info* %1999 to i8*
	%2001 = getelementptr inbounds i8, i8* %2000, i64 0
	%2002 = bitcast i8* %2001 to i64*
	store i64 8, i64* %2002
	%2003 = bitcast %Type_Info* %1999 to i8*
	%2004 = getelementptr inbounds i8, i8* %2003, i64 8
	%2005 = bitcast i8* %2004 to i64*
	store i64 8, i64* %2005
	; Type_Info_Basic
	%2006 = bitcast %Type_Info* %1999 to %Type_Info.Integer*
	%2007 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2006, i64 0, i32 2
	store i1 true, i1* %2007
	%2008 = getelementptr inbounds %Type_Info, %Type_Info* %1999, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2008
	%2009 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	%2010 = bitcast %Type_Info* %2009 to i8*
	%2011 = getelementptr inbounds i8, i8* %2010, i64 0
	%2012 = bitcast i8* %2011 to i64*
	store i64 8, i64* %2012
	%2013 = bitcast %Type_Info* %2009 to i8*
	%2014 = getelementptr inbounds i8, i8* %2013, i64 8
	%2015 = bitcast i8* %2014 to i64*
	store i64 8, i64* %2015
	; Type_Info_Pointer
	%2016 = bitcast %Type_Info* %2009 to %Type_Info.Pointer*
	%2017 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	%2018 = bitcast %Type_Info* %2017 to %Type_Info*
	%2019 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2016, i64 0, i32 2
	store %Type_Info* %2018, %Type_Info** %2019
	%2020 = getelementptr inbounds %Type_Info, %Type_Info* %2009, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2020
	%2021 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%2022 = bitcast %Type_Info* %2021 to i8*
	%2023 = getelementptr inbounds i8, i8* %2022, i64 0
	%2024 = bitcast i8* %2023 to i64*
	store i64 48, i64* %2024
	%2025 = bitcast %Type_Info* %2021 to i8*
	%2026 = getelementptr inbounds i8, i8* %2025, i64 8
	%2027 = bitcast i8* %2026 to i64*
	store i64 8, i64* %2027
	; Type_Info_Named
	%2028 = bitcast %Type_Info* %2021 to %Type_Info.Named*
	%2029 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%2030 = bitcast %Type_Info* %2029 to %Type_Info*
	%2031 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2028, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$372, i64 0, i32 0), i64 3}, %..string* %2031
	%2032 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2028, i64 0, i32 3
	store %Type_Info* %2030, %Type_Info** %2032
	%2033 = getelementptr inbounds %Type_Info, %Type_Info* %2021, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2033
	%2034 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%2035 = bitcast %Type_Info* %2034 to i8*
	%2036 = getelementptr inbounds i8, i8* %2035, i64 0
	%2037 = bitcast i8* %2036 to i64*
	store i64 48, i64* %2037
	%2038 = bitcast %Type_Info* %2034 to i8*
	%2039 = getelementptr inbounds i8, i8* %2038, i64 8
	%2040 = bitcast i8* %2039 to i64*
	store i64 8, i64* %2040
	; Type_Info_Struct
	%2041 = bitcast %Type_Info* %2034 to %Type_Info.Struct*
	%2042 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %2041, i64 0, i32 2
	%2043 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2042, i64 0, i32 3
	store i1 false, i1* %2043
	%2044 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2042, i64 0, i32 4
	store i1 true, i1* %2044
	%2045 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2042, i64 0, i32 5
	store i1 false, i1* %2045
	%2046 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 98
	%2047 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 98
	%2048 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 78
	%2049 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%2050 = bitcast %Type_Info* %2049 to %Type_Info*
	%2051 = getelementptr inbounds %Type_Info*, %Type_Info** %2046, i64 0
	%2052 = getelementptr inbounds i64, i64* %2048, i64 0
	%2053 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2053, %Type_Info** %2051
	%2054 = getelementptr inbounds %..string, %..string* %2047, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$373, i64 0, i32 0), i64 4}, %..string* %2054
	store i64 0, i64* %2052
	%2055 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%2056 = bitcast %Type_Info* %2055 to %Type_Info*
	%2057 = getelementptr inbounds %Type_Info*, %Type_Info** %2046, i64 1
	%2058 = getelementptr inbounds i64, i64* %2048, i64 1
	%2059 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2059, %Type_Info** %2057
	%2060 = getelementptr inbounds %..string, %..string* %2047, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$374, i64 0, i32 0), i64 5}, %..string* %2060
	store i64 8, i64* %2058
	%2061 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2062 = bitcast %Type_Info* %2061 to %Type_Info*
	%2063 = getelementptr inbounds %Type_Info*, %Type_Info** %2046, i64 2
	%2064 = getelementptr inbounds i64, i64* %2048, i64 2
	%2065 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %2065, %Type_Info** %2063
	%2066 = getelementptr inbounds %..string, %..string* %2047, i64 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$375, i64 0, i32 0), i64 3}, %..string* %2066
	store i64 16, i64* %2064
	%2067 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2068 = bitcast %Type_Info* %2067 to %Type_Info*
	%2069 = getelementptr inbounds %Type_Info*, %Type_Info** %2046, i64 3
	%2070 = getelementptr inbounds i64, i64* %2048, i64 3
	%2071 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %2071, %Type_Info** %2069
	%2072 = getelementptr inbounds %..string, %..string* %2047, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$376, i64 0, i32 0), i64 5}, %..string* %2072
	store i64 24, i64* %2070
	%2073 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2074 = bitcast %Type_Info* %2073 to %Type_Info*
	%2075 = getelementptr inbounds %Type_Info*, %Type_Info** %2046, i64 4
	%2076 = getelementptr inbounds i64, i64* %2048, i64 4
	%2077 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	store %Type_Info* %2077, %Type_Info** %2075
	%2078 = getelementptr inbounds %..string, %..string* %2047, i64 4
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$377, i64 0, i32 0), i64 16}, %..string* %2078
	store i64 32, i64* %2076
	%2079 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%2080 = bitcast %Type_Info* %2079 to %Type_Info*
	%2081 = getelementptr inbounds %Type_Info*, %Type_Info** %2046, i64 5
	%2082 = getelementptr inbounds i64, i64* %2048, i64 5
	%2083 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2083, %Type_Info** %2081
	%2084 = getelementptr inbounds %..string, %..string* %2047, i64 5
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$378, i64 0, i32 0), i64 5}, %..string* %2084
	store i64 40, i64* %2082
	%2085 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2042, i64 0, i32 0
	%2086 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2085, i64 0, i32 0
	store %Type_Info** %2046, %Type_Info*** %2086
	%2087 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2085, i64 0, i32 1
	store i64 6, i64* %2087
	%2088 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2085, i64 0, i32 2
	store i64 6, i64* %2088
	%2089 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2042, i64 0, i32 1
	%2090 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2089, i64 0, i32 0
	store %..string* %2047, %..string** %2090
	%2091 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2089, i64 0, i32 1
	store i64 6, i64* %2091
	%2092 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2089, i64 0, i32 2
	store i64 6, i64* %2092
	%2093 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2042, i64 0, i32 2
	%2094 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %2093, i64 0, i32 0
	store i64* %2048, i64** %2094
	%2095 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %2093, i64 0, i32 1
	store i64 6, i64* %2095
	%2096 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %2093, i64 0, i32 2
	store i64 6, i64* %2096
	%2097 = getelementptr inbounds %Type_Info, %Type_Info* %2034, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %2097
	%2098 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2099 = bitcast %Type_Info* %2098 to i8*
	%2100 = getelementptr inbounds i8, i8* %2099, i64 0
	%2101 = bitcast i8* %2100 to i64*
	store i64 8, i64* %2101
	%2102 = bitcast %Type_Info* %2098 to i8*
	%2103 = getelementptr inbounds i8, i8* %2102, i64 8
	%2104 = bitcast i8* %2103 to i64*
	store i64 8, i64* %2104
	; Type_Info_Pointer
	%2105 = bitcast %Type_Info* %2098 to %Type_Info.Pointer*
	%2106 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2107 = bitcast %Type_Info* %2106 to %Type_Info*
	%2108 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2105, i64 0, i32 2
	store %Type_Info* %2107, %Type_Info** %2108
	%2109 = getelementptr inbounds %Type_Info, %Type_Info* %2098, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2109
	%2110 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2111 = bitcast %Type_Info* %2110 to i8*
	%2112 = getelementptr inbounds i8, i8* %2111, i64 0
	%2113 = bitcast i8* %2112 to i64*
	store i64 8, i64* %2113
	%2114 = bitcast %Type_Info* %2110 to i8*
	%2115 = getelementptr inbounds i8, i8* %2114, i64 8
	%2116 = bitcast i8* %2115 to i64*
	store i64 8, i64* %2116
	; Type_Info_Pointer
	%2117 = bitcast %Type_Info* %2110 to %Type_Info.Pointer*
	%2118 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2119 = bitcast %Type_Info* %2118 to %Type_Info*
	%2120 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2117, i64 0, i32 2
	store %Type_Info* %2119, %Type_Info** %2120
	%2121 = getelementptr inbounds %Type_Info, %Type_Info* %2110, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2121
	%2122 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2123 = bitcast %Type_Info* %2122 to i8*
	%2124 = getelementptr inbounds i8, i8* %2123, i64 0
	%2125 = bitcast i8* %2124 to i64*
	store i64 8, i64* %2125
	%2126 = bitcast %Type_Info* %2122 to i8*
	%2127 = getelementptr inbounds i8, i8* %2126, i64 8
	%2128 = bitcast i8* %2127 to i64*
	store i64 8, i64* %2128
	; Type_Info_Pointer
	%2129 = bitcast %Type_Info* %2122 to %Type_Info.Pointer*
	%2130 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2131 = bitcast %Type_Info* %2130 to %Type_Info*
	%2132 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2129, i64 0, i32 2
	store %Type_Info* %2131, %Type_Info** %2132
	%2133 = getelementptr inbounds %Type_Info, %Type_Info* %2122, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2133
	%2134 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%2135 = bitcast %Type_Info* %2134 to i8*
	%2136 = getelementptr inbounds i8, i8* %2135, i64 0
	%2137 = bitcast i8* %2136 to i64*
	store i64 8, i64* %2137
	%2138 = bitcast %Type_Info* %2134 to i8*
	%2139 = getelementptr inbounds i8, i8* %2138, i64 8
	%2140 = bitcast i8* %2139 to i64*
	store i64 8, i64* %2140
	; Type_Info_Pointer
	%2141 = bitcast %Type_Info* %2134 to %Type_Info.Pointer*
	%2142 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%2143 = bitcast %Type_Info* %2142 to %Type_Info*
	%2144 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2141, i64 0, i32 2
	store %Type_Info* %2143, %Type_Info** %2144
	%2145 = getelementptr inbounds %Type_Info, %Type_Info* %2134, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2145
	%2146 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%2147 = bitcast %Type_Info* %2146 to i8*
	%2148 = getelementptr inbounds i8, i8* %2147, i64 0
	%2149 = bitcast i8* %2148 to i64*
	store i64 8, i64* %2149
	%2150 = bitcast %Type_Info* %2146 to i8*
	%2151 = getelementptr inbounds i8, i8* %2150, i64 8
	%2152 = bitcast i8* %2151 to i64*
	store i64 8, i64* %2152
	; Type_Info_Pointer
	%2153 = bitcast %Type_Info* %2146 to %Type_Info.Pointer*
	%2154 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%2155 = bitcast %Type_Info* %2154 to %Type_Info*
	%2156 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2153, i64 0, i32 2
	store %Type_Info* %2155, %Type_Info** %2156
	%2157 = getelementptr inbounds %Type_Info, %Type_Info* %2146, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2157
	%2158 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2159 = bitcast %Type_Info* %2158 to i8*
	%2160 = getelementptr inbounds i8, i8* %2159, i64 0
	%2161 = bitcast i8* %2160 to i64*
	store i64 8, i64* %2161
	%2162 = bitcast %Type_Info* %2158 to i8*
	%2163 = getelementptr inbounds i8, i8* %2162, i64 8
	%2164 = bitcast i8* %2163 to i64*
	store i64 8, i64* %2164
	; Type_Info_Pointer
	%2165 = bitcast %Type_Info* %2158 to %Type_Info.Pointer*
	%2166 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2167 = bitcast %Type_Info* %2166 to %Type_Info*
	%2168 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2165, i64 0, i32 2
	store %Type_Info* %2167, %Type_Info** %2168
	%2169 = getelementptr inbounds %Type_Info, %Type_Info* %2158, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2169
	%2170 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2171 = bitcast %Type_Info* %2170 to i8*
	%2172 = getelementptr inbounds i8, i8* %2171, i64 0
	%2173 = bitcast i8* %2172 to i64*
	store i64 4, i64* %2173
	%2174 = bitcast %Type_Info* %2170 to i8*
	%2175 = getelementptr inbounds i8, i8* %2174, i64 8
	%2176 = bitcast i8* %2175 to i64*
	store i64 4, i64* %2176
	; Type_Info_Basic
	%2177 = bitcast %Type_Info* %2170 to %Type_Info.Integer*
	%2178 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2177, i64 0, i32 2
	store i1 true, i1* %2178
	%2179 = getelementptr inbounds %Type_Info, %Type_Info* %2170, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2179
	%2180 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	%2181 = bitcast %Type_Info* %2180 to i8*
	%2182 = getelementptr inbounds i8, i8* %2181, i64 0
	%2183 = bitcast i8* %2182 to i64*
	store i64 8, i64* %2183
	%2184 = bitcast %Type_Info* %2180 to i8*
	%2185 = getelementptr inbounds i8, i8* %2184, i64 8
	%2186 = bitcast i8* %2185 to i64*
	store i64 8, i64* %2186
	; Type_Info_Named
	%2187 = bitcast %Type_Info* %2180 to %Type_Info.Named*
	%2188 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 60
	%2189 = bitcast %Type_Info* %2188 to %Type_Info*
	%2190 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2187, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$379, i64 0, i32 0), i64 11}, %..string* %2190
	%2191 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2187, i64 0, i32 3
	store %Type_Info* %2189, %Type_Info** %2191
	%2192 = getelementptr inbounds %Type_Info, %Type_Info* %2180, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2192
	%2193 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 60
	%2194 = bitcast %Type_Info* %2193 to i8*
	%2195 = getelementptr inbounds i8, i8* %2194, i64 0
	%2196 = bitcast i8* %2195 to i64*
	store i64 8, i64* %2196
	%2197 = bitcast %Type_Info* %2193 to i8*
	%2198 = getelementptr inbounds i8, i8* %2197, i64 8
	%2199 = bitcast i8* %2198 to i64*
	store i64 8, i64* %2199
	; Type_Info_Enum
	%2200 = bitcast %Type_Info* %2193 to %Type_Info.Enum*
	%2201 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2202 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2200, i64 0, i32 2
	store %Type_Info* %2201, %Type_Info** %2202
	%2203 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 0
	%2204 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 0
	%2205 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2204 to i64*
	store i64 33350, i64* %2205
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$37a, i64 0, i32 0), i64 3}, %..string* %2203
	%2206 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 1
	%2207 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 1
	%2208 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2207 to i64*
	store i64 33351, i64* %2208
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$37b, i64 0, i32 0), i64 12}, %..string* %2206
	%2209 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 2
	%2210 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 2
	%2211 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2210 to i64*
	store i64 33352, i64* %2211
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$37c, i64 0, i32 0), i64 14}, %..string* %2209
	%2212 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 3
	%2213 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 3
	%2214 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2213 to i64*
	store i64 33353, i64* %2214
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$37d, i64 0, i32 0), i64 10}, %..string* %2212
	%2215 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 4
	%2216 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 4
	%2217 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2216 to i64*
	store i64 33354, i64* %2217
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$37e, i64 0, i32 0), i64 11}, %..string* %2215
	%2218 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 5
	%2219 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 5
	%2220 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2219 to i64*
	store i64 33355, i64* %2220
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$37f, i64 0, i32 0), i64 5}, %..string* %2218
	%2221 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 6
	%2222 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 6
	%2223 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2222 to i64*
	store i64 4352, i64* %2223
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$380, i64 0, i32 0), i64 8}, %..string* %2221
	%2224 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2200, i64 0, i32 3
	%2225 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 0
	%2226 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2224, i64 0, i32 0
	store %..string* %2225, %..string** %2226
	%2227 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2224, i64 0, i32 1
	store i64 7, i64* %2227
	%2228 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2200, i64 0, i32 4
	%2229 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 0
	%2230 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %2228, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %2229, {[0 x <8 x i8>], [8 x i8]}** %2230
	%2231 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %2228, i64 0, i32 1
	store i64 7, i64* %2231
	%2232 = getelementptr inbounds %Type_Info, %Type_Info* %2193, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %2232
	%2233 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	%2234 = bitcast %Type_Info* %2233 to i8*
	%2235 = getelementptr inbounds i8, i8* %2234, i64 0
	%2236 = bitcast i8* %2235 to i64*
	store i64 8, i64* %2236
	%2237 = bitcast %Type_Info* %2233 to i8*
	%2238 = getelementptr inbounds i8, i8* %2237, i64 8
	%2239 = bitcast i8* %2238 to i64*
	store i64 8, i64* %2239
	; Type_Info_Named
	%2240 = bitcast %Type_Info* %2233 to %Type_Info.Named*
	%2241 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 62
	%2242 = bitcast %Type_Info* %2241 to %Type_Info*
	%2243 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2240, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$381, i64 0, i32 0), i64 9}, %..string* %2243
	%2244 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2240, i64 0, i32 3
	store %Type_Info* %2242, %Type_Info** %2244
	%2245 = getelementptr inbounds %Type_Info, %Type_Info* %2233, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2245
	%2246 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 62
	%2247 = bitcast %Type_Info* %2246 to i8*
	%2248 = getelementptr inbounds i8, i8* %2247, i64 0
	%2249 = bitcast i8* %2248 to i64*
	store i64 8, i64* %2249
	%2250 = bitcast %Type_Info* %2246 to i8*
	%2251 = getelementptr inbounds i8, i8* %2250, i64 8
	%2252 = bitcast i8* %2251 to i64*
	store i64 8, i64* %2252
	; Type_Info_Enum
	%2253 = bitcast %Type_Info* %2246 to %Type_Info.Enum*
	%2254 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2255 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2253, i64 0, i32 2
	store %Type_Info* %2254, %Type_Info** %2255
	%2256 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 0
	%2257 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 0
	%2258 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2257 to i64*
	store i64 33356, i64* %2258
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$382, i64 0, i32 0), i64 5}, %..string* %2256
	%2259 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 1
	%2260 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 1
	%2261 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2260 to i64*
	store i64 33357, i64* %2261
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$383, i64 0, i32 0), i64 18}, %..string* %2259
	%2262 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 2
	%2263 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 2
	%2264 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2263 to i64*
	store i64 33358, i64* %2264
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$384, i64 0, i32 0), i64 17}, %..string* %2262
	%2265 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 3
	%2266 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 3
	%2267 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2266 to i64*
	store i64 33359, i64* %2267
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$385, i64 0, i32 0), i64 11}, %..string* %2265
	%2268 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 4
	%2269 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 4
	%2270 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2269 to i64*
	store i64 33360, i64* %2270
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$386, i64 0, i32 0), i64 11}, %..string* %2268
	%2271 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 5
	%2272 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 5
	%2273 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2272 to i64*
	store i64 33384, i64* %2273
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$387, i64 0, i32 0), i64 6}, %..string* %2271
	%2274 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 6
	%2275 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 6
	%2276 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2275 to i64*
	store i64 33385, i64* %2276
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$388, i64 0, i32 0), i64 9}, %..string* %2274
	%2277 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 7
	%2278 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 7
	%2279 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2278 to i64*
	store i64 33386, i64* %2279
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$389, i64 0, i32 0), i64 8}, %..string* %2277
	%2280 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 8
	%2281 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 8
	%2282 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2281 to i64*
	store i64 33361, i64* %2282
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$38a, i64 0, i32 0), i64 5}, %..string* %2280
	%2283 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 9
	%2284 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 9
	%2285 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2284 to i64*
	store i64 4352, i64* %2285
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$38b, i64 0, i32 0), i64 8}, %..string* %2283
	%2286 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2253, i64 0, i32 3
	%2287 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 0
	%2288 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2286, i64 0, i32 0
	store %..string* %2287, %..string** %2288
	%2289 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2286, i64 0, i32 1
	store i64 10, i64* %2289
	%2290 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2253, i64 0, i32 4
	%2291 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 0
	%2292 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %2290, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %2291, {[0 x <8 x i8>], [8 x i8]}** %2292
	%2293 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %2290, i64 0, i32 1
	store i64 10, i64* %2293
	%2294 = getelementptr inbounds %Type_Info, %Type_Info* %2246, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %2294
	%2295 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	%2296 = bitcast %Type_Info* %2295 to i8*
	%2297 = getelementptr inbounds i8, i8* %2296, i64 0
	%2298 = bitcast i8* %2297 to i64*
	store i64 8, i64* %2298
	%2299 = bitcast %Type_Info* %2295 to i8*
	%2300 = getelementptr inbounds i8, i8* %2299, i64 8
	%2301 = bitcast i8* %2300 to i64*
	store i64 8, i64* %2301
	; Type_Info_Named
	%2302 = bitcast %Type_Info* %2295 to %Type_Info.Named*
	%2303 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	%2304 = bitcast %Type_Info* %2303 to %Type_Info*
	%2305 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2302, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$38c, i64 0, i32 0), i64 13}, %..string* %2305
	%2306 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2302, i64 0, i32 3
	store %Type_Info* %2304, %Type_Info** %2306
	%2307 = getelementptr inbounds %Type_Info, %Type_Info* %2295, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2307
	%2308 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	%2309 = bitcast %Type_Info* %2308 to i8*
	%2310 = getelementptr inbounds i8, i8* %2309, i64 0
	%2311 = bitcast i8* %2310 to i64*
	store i64 8, i64* %2311
	%2312 = bitcast %Type_Info* %2308 to i8*
	%2313 = getelementptr inbounds i8, i8* %2312, i64 8
	%2314 = bitcast i8* %2313 to i64*
	store i64 8, i64* %2314
	; Type_Info_Enum
	%2315 = bitcast %Type_Info* %2308 to %Type_Info.Enum*
	%2316 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2317 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2315, i64 0, i32 2
	store %Type_Info* %2316, %Type_Info** %2317
	%2318 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 0
	%2319 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 0
	%2320 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2319 to i64*
	store i64 37190, i64* %2320
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$38d, i64 0, i32 0), i64 4}, %..string* %2318
	%2321 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 1
	%2322 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 1
	%2323 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2322 to i64*
	store i64 37191, i64* %2323
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$38e, i64 0, i32 0), i64 6}, %..string* %2321
	%2324 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 2
	%2325 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 2
	%2326 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2325 to i64*
	store i64 37192, i64* %2326
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$38f, i64 0, i32 0), i64 3}, %..string* %2324
	%2327 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 3
	%2328 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 3
	%2329 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2328 to i64*
	store i64 33387, i64* %2329
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$390, i64 0, i32 0), i64 12}, %..string* %2327
	%2330 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 4
	%2331 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 4
	%2332 = bitcast {[0 x <8 x i8>], [8 x i8]}* %2331 to i64*
	store i64 4352, i64* %2332
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$391, i64 0, i32 0), i64 8}, %..string* %2330
	%2333 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2315, i64 0, i32 3
	%2334 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 0
	%2335 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2333, i64 0, i32 0
	store %..string* %2334, %..string** %2335
	%2336 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2333, i64 0, i32 1
	store i64 5, i64* %2336
	%2337 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %2315, i64 0, i32 4
	%2338 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 0
	%2339 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %2337, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %2338, {[0 x <8 x i8>], [8 x i8]}** %2339
	%2340 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %2337, i64 0, i32 1
	store i64 5, i64* %2340
	%2341 = getelementptr inbounds %Type_Info, %Type_Info* %2308, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %2341
	%2342 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%2343 = bitcast %Type_Info* %2342 to i8*
	%2344 = getelementptr inbounds i8, i8* %2343, i64 0
	%2345 = bitcast i8* %2344 to i64*
	store i64 8, i64* %2345
	%2346 = bitcast %Type_Info* %2342 to i8*
	%2347 = getelementptr inbounds i8, i8* %2346, i64 8
	%2348 = bitcast i8* %2347 to i64*
	store i64 8, i64* %2348
	; Type_Info_Pointer
	%2349 = bitcast %Type_Info* %2342 to %Type_Info.Pointer*
	%2350 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%2351 = bitcast %Type_Info* %2350 to %Type_Info*
	%2352 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2349, i64 0, i32 2
	store %Type_Info* %2351, %Type_Info** %2352
	%2353 = getelementptr inbounds %Type_Info, %Type_Info* %2342, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2353
	%2354 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%2355 = bitcast %Type_Info* %2354 to i8*
	%2356 = getelementptr inbounds i8, i8* %2355, i64 0
	%2357 = bitcast i8* %2356 to i64*
	store i64 8, i64* %2357
	%2358 = bitcast %Type_Info* %2354 to i8*
	%2359 = getelementptr inbounds i8, i8* %2358, i64 8
	%2360 = bitcast i8* %2359 to i64*
	store i64 8, i64* %2360
	; Type_Info_Pointer
	%2361 = bitcast %Type_Info* %2354 to %Type_Info.Pointer*
	%2362 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%2363 = bitcast %Type_Info* %2362 to %Type_Info*
	%2364 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2361, i64 0, i32 2
	store %Type_Info* %2363, %Type_Info** %2364
	%2365 = getelementptr inbounds %Type_Info, %Type_Info* %2354, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2365
	%2366 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%2367 = bitcast %Type_Info* %2366 to i8*
	%2368 = getelementptr inbounds i8, i8* %2367, i64 0
	%2369 = bitcast i8* %2368 to i64*
	store i64 8, i64* %2369
	%2370 = bitcast %Type_Info* %2366 to i8*
	%2371 = getelementptr inbounds i8, i8* %2370, i64 8
	%2372 = bitcast i8* %2371 to i64*
	store i64 8, i64* %2372
	; Type_Info_Basic
	%2373 = bitcast %Type_Info* %2366 to %Type_Info.Integer*
	%2374 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2373, i64 0, i32 2
	store i1 false, i1* %2374
	%2375 = getelementptr inbounds %Type_Info, %Type_Info* %2366, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2375
	%2376 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%2377 = bitcast %Type_Info* %2376 to i8*
	%2378 = getelementptr inbounds i8, i8* %2377, i64 0
	%2379 = bitcast i8* %2378 to i64*
	store i64 8, i64* %2379
	%2380 = bitcast %Type_Info* %2376 to i8*
	%2381 = getelementptr inbounds i8, i8* %2380, i64 8
	%2382 = bitcast i8* %2381 to i64*
	store i64 8, i64* %2382
	; Type_Info_Pointer
	%2383 = bitcast %Type_Info* %2376 to %Type_Info.Pointer*
	%2384 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%2385 = bitcast %Type_Info* %2384 to %Type_Info*
	%2386 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2383, i64 0, i32 2
	store %Type_Info* %2385, %Type_Info** %2386
	%2387 = getelementptr inbounds %Type_Info, %Type_Info* %2376, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2387
	%2388 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%2389 = bitcast %Type_Info* %2388 to i8*
	%2390 = getelementptr inbounds i8, i8* %2389, i64 0
	%2391 = bitcast i8* %2390 to i64*
	store i64 8, i64* %2391
	%2392 = bitcast %Type_Info* %2388 to i8*
	%2393 = getelementptr inbounds i8, i8* %2392, i64 8
	%2394 = bitcast i8* %2393 to i64*
	store i64 8, i64* %2394
	; Type_Info_Pointer
	%2395 = bitcast %Type_Info* %2388 to %Type_Info.Pointer*
	%2396 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%2397 = bitcast %Type_Info* %2396 to %Type_Info*
	%2398 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2395, i64 0, i32 2
	store %Type_Info* %2397, %Type_Info** %2398
	%2399 = getelementptr inbounds %Type_Info, %Type_Info* %2388, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2399
	%2400 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%2401 = bitcast %Type_Info* %2400 to i8*
	%2402 = getelementptr inbounds i8, i8* %2401, i64 0
	%2403 = bitcast i8* %2402 to i64*
	store i64 8, i64* %2403
	%2404 = bitcast %Type_Info* %2400 to i8*
	%2405 = getelementptr inbounds i8, i8* %2404, i64 8
	%2406 = bitcast i8* %2405 to i64*
	store i64 8, i64* %2406
	; Type_Info_Pointer
	%2407 = bitcast %Type_Info* %2400 to %Type_Info.Pointer*
	%2408 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%2409 = bitcast %Type_Info* %2408 to %Type_Info*
	%2410 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2407, i64 0, i32 2
	store %Type_Info* %2409, %Type_Info** %2410
	%2411 = getelementptr inbounds %Type_Info, %Type_Info* %2400, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2411
	%2412 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%2413 = bitcast %Type_Info* %2412 to i8*
	%2414 = getelementptr inbounds i8, i8* %2413, i64 0
	%2415 = bitcast i8* %2414 to i64*
	store i64 8, i64* %2415
	%2416 = bitcast %Type_Info* %2412 to i8*
	%2417 = getelementptr inbounds i8, i8* %2416, i64 8
	%2418 = bitcast i8* %2417 to i64*
	store i64 8, i64* %2418
	; Type_Info_Pointer
	%2419 = bitcast %Type_Info* %2412 to %Type_Info.Pointer*
	%2420 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%2421 = bitcast %Type_Info* %2420 to %Type_Info*
	%2422 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2419, i64 0, i32 2
	store %Type_Info* %2421, %Type_Info** %2422
	%2423 = getelementptr inbounds %Type_Info, %Type_Info* %2412, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2423
	%2424 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%2425 = bitcast %Type_Info* %2424 to i8*
	%2426 = getelementptr inbounds i8, i8* %2425, i64 0
	%2427 = bitcast i8* %2426 to i64*
	store i64 8, i64* %2427
	%2428 = bitcast %Type_Info* %2424 to i8*
	%2429 = getelementptr inbounds i8, i8* %2428, i64 8
	%2430 = bitcast i8* %2429 to i64*
	store i64 8, i64* %2430
	; Type_Info_Pointer
	%2431 = bitcast %Type_Info* %2424 to %Type_Info.Pointer*
	%2432 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%2433 = bitcast %Type_Info* %2432 to %Type_Info*
	%2434 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2431, i64 0, i32 2
	store %Type_Info* %2433, %Type_Info** %2434
	%2435 = getelementptr inbounds %Type_Info, %Type_Info* %2424, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2435
	%2436 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%2437 = bitcast %Type_Info* %2436 to i8*
	%2438 = getelementptr inbounds i8, i8* %2437, i64 0
	%2439 = bitcast i8* %2438 to i64*
	store i64 8, i64* %2439
	%2440 = bitcast %Type_Info* %2436 to i8*
	%2441 = getelementptr inbounds i8, i8* %2440, i64 8
	%2442 = bitcast i8* %2441 to i64*
	store i64 8, i64* %2442
	; Type_Info_Pointer
	%2443 = bitcast %Type_Info* %2436 to %Type_Info.Pointer*
	%2444 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%2445 = bitcast %Type_Info* %2444 to %Type_Info*
	%2446 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2443, i64 0, i32 2
	store %Type_Info* %2445, %Type_Info** %2446
	%2447 = getelementptr inbounds %Type_Info, %Type_Info* %2436, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2447
	%2448 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%2449 = bitcast %Type_Info* %2448 to i8*
	%2450 = getelementptr inbounds i8, i8* %2449, i64 0
	%2451 = bitcast i8* %2450 to i64*
	store i64 8, i64* %2451
	%2452 = bitcast %Type_Info* %2448 to i8*
	%2453 = getelementptr inbounds i8, i8* %2452, i64 8
	%2454 = bitcast i8* %2453 to i64*
	store i64 8, i64* %2454
	; Type_Info_Pointer
	%2455 = bitcast %Type_Info* %2448 to %Type_Info.Pointer*
	%2456 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%2457 = bitcast %Type_Info* %2456 to %Type_Info*
	%2458 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2455, i64 0, i32 2
	store %Type_Info* %2457, %Type_Info** %2458
	%2459 = getelementptr inbounds %Type_Info, %Type_Info* %2448, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2459
	%2460 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	%2461 = bitcast %Type_Info* %2460 to i8*
	%2462 = getelementptr inbounds i8, i8* %2461, i64 0
	%2463 = bitcast i8* %2462 to i64*
	store i64 8, i64* %2463
	%2464 = bitcast %Type_Info* %2460 to i8*
	%2465 = getelementptr inbounds i8, i8* %2464, i64 8
	%2466 = bitcast i8* %2465 to i64*
	store i64 8, i64* %2466
	; Type_Info_Pointer
	%2467 = bitcast %Type_Info* %2460 to %Type_Info.Pointer*
	%2468 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%2469 = bitcast %Type_Info* %2468 to %Type_Info*
	%2470 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2467, i64 0, i32 2
	store %Type_Info* %2469, %Type_Info** %2470
	%2471 = getelementptr inbounds %Type_Info, %Type_Info* %2460, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2471
	%2472 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	%2473 = bitcast %Type_Info* %2472 to i8*
	%2474 = getelementptr inbounds i8, i8* %2473, i64 0
	%2475 = bitcast i8* %2474 to i64*
	store i64 8, i64* %2475
	%2476 = bitcast %Type_Info* %2472 to i8*
	%2477 = getelementptr inbounds i8, i8* %2476, i64 8
	%2478 = bitcast i8* %2477 to i64*
	store i64 8, i64* %2478
	; Type_Info_Pointer
	%2479 = bitcast %Type_Info* %2472 to %Type_Info.Pointer*
	%2480 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%2481 = bitcast %Type_Info* %2480 to %Type_Info*
	%2482 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2479, i64 0, i32 2
	store %Type_Info* %2481, %Type_Info** %2482
	%2483 = getelementptr inbounds %Type_Info, %Type_Info* %2472, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2483
	%2484 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%2485 = bitcast %Type_Info* %2484 to i8*
	%2486 = getelementptr inbounds i8, i8* %2485, i64 0
	%2487 = bitcast i8* %2486 to i64*
	store i64 8, i64* %2487
	%2488 = bitcast %Type_Info* %2484 to i8*
	%2489 = getelementptr inbounds i8, i8* %2488, i64 8
	%2490 = bitcast i8* %2489 to i64*
	store i64 8, i64* %2490
	; Type_Info_Pointer
	%2491 = bitcast %Type_Info* %2484 to %Type_Info.Pointer*
	%2492 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%2493 = bitcast %Type_Info* %2492 to %Type_Info*
	%2494 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2491, i64 0, i32 2
	store %Type_Info* %2493, %Type_Info** %2494
	%2495 = getelementptr inbounds %Type_Info, %Type_Info* %2484, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2495
	%2496 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%2497 = bitcast %Type_Info* %2496 to i8*
	%2498 = getelementptr inbounds i8, i8* %2497, i64 0
	%2499 = bitcast i8* %2498 to i64*
	store i64 8, i64* %2499
	%2500 = bitcast %Type_Info* %2496 to i8*
	%2501 = getelementptr inbounds i8, i8* %2500, i64 8
	%2502 = bitcast i8* %2501 to i64*
	store i64 8, i64* %2502
	; Type_Info_Pointer
	%2503 = bitcast %Type_Info* %2496 to %Type_Info.Pointer*
	%2504 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%2505 = bitcast %Type_Info* %2504 to %Type_Info*
	%2506 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2503, i64 0, i32 2
	store %Type_Info* %2505, %Type_Info** %2506
	%2507 = getelementptr inbounds %Type_Info, %Type_Info* %2496, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2507
	%2508 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%2509 = bitcast %Type_Info* %2508 to i8*
	%2510 = getelementptr inbounds i8, i8* %2509, i64 0
	%2511 = bitcast i8* %2510 to i64*
	store i64 8, i64* %2511
	%2512 = bitcast %Type_Info* %2508 to i8*
	%2513 = getelementptr inbounds i8, i8* %2512, i64 8
	%2514 = bitcast i8* %2513 to i64*
	store i64 8, i64* %2514
	; Type_Info_Pointer
	%2515 = bitcast %Type_Info* %2508 to %Type_Info.Pointer*
	%2516 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%2517 = bitcast %Type_Info* %2516 to %Type_Info*
	%2518 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2515, i64 0, i32 2
	store %Type_Info* %2517, %Type_Info** %2518
	%2519 = getelementptr inbounds %Type_Info, %Type_Info* %2508, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2519
	%2520 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%2521 = bitcast %Type_Info* %2520 to i8*
	%2522 = getelementptr inbounds i8, i8* %2521, i64 0
	%2523 = bitcast i8* %2522 to i64*
	store i64 8, i64* %2523
	%2524 = bitcast %Type_Info* %2520 to i8*
	%2525 = getelementptr inbounds i8, i8* %2524, i64 8
	%2526 = bitcast i8* %2525 to i64*
	store i64 8, i64* %2526
	; Type_Info_Pointer
	%2527 = bitcast %Type_Info* %2520 to %Type_Info.Pointer*
	%2528 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%2529 = bitcast %Type_Info* %2528 to %Type_Info*
	%2530 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2527, i64 0, i32 2
	store %Type_Info* %2529, %Type_Info** %2530
	%2531 = getelementptr inbounds %Type_Info, %Type_Info* %2520, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2531
	%2532 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%2533 = bitcast %Type_Info* %2532 to i8*
	%2534 = getelementptr inbounds i8, i8* %2533, i64 0
	%2535 = bitcast i8* %2534 to i64*
	store i64 8, i64* %2535
	%2536 = bitcast %Type_Info* %2532 to i8*
	%2537 = getelementptr inbounds i8, i8* %2536, i64 8
	%2538 = bitcast i8* %2537 to i64*
	store i64 8, i64* %2538
	; Type_Info_Pointer
	%2539 = bitcast %Type_Info* %2532 to %Type_Info.Pointer*
	%2540 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%2541 = bitcast %Type_Info* %2540 to %Type_Info*
	%2542 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2539, i64 0, i32 2
	store %Type_Info* %2541, %Type_Info** %2542
	%2543 = getelementptr inbounds %Type_Info, %Type_Info* %2532, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2543
	%2544 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%2545 = bitcast %Type_Info* %2544 to i8*
	%2546 = getelementptr inbounds i8, i8* %2545, i64 0
	%2547 = bitcast i8* %2546 to i64*
	store i64 8, i64* %2547
	%2548 = bitcast %Type_Info* %2544 to i8*
	%2549 = getelementptr inbounds i8, i8* %2548, i64 8
	%2550 = bitcast i8* %2549 to i64*
	store i64 8, i64* %2550
	; Type_Info_Pointer
	%2551 = bitcast %Type_Info* %2544 to %Type_Info.Pointer*
	%2552 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%2553 = bitcast %Type_Info* %2552 to %Type_Info*
	%2554 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2551, i64 0, i32 2
	store %Type_Info* %2553, %Type_Info** %2554
	%2555 = getelementptr inbounds %Type_Info, %Type_Info* %2544, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2555
	%2556 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%2557 = bitcast %Type_Info* %2556 to i8*
	%2558 = getelementptr inbounds i8, i8* %2557, i64 0
	%2559 = bitcast i8* %2558 to i64*
	store i64 8, i64* %2559
	%2560 = bitcast %Type_Info* %2556 to i8*
	%2561 = getelementptr inbounds i8, i8* %2560, i64 8
	%2562 = bitcast i8* %2561 to i64*
	store i64 8, i64* %2562
	; Type_Info_Pointer
	%2563 = bitcast %Type_Info* %2556 to %Type_Info.Pointer*
	%2564 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%2565 = bitcast %Type_Info* %2564 to %Type_Info*
	%2566 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2563, i64 0, i32 2
	store %Type_Info* %2565, %Type_Info** %2566
	%2567 = getelementptr inbounds %Type_Info, %Type_Info* %2556, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2567
	%2568 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2569 = bitcast %Type_Info* %2568 to i8*
	%2570 = getelementptr inbounds i8, i8* %2569, i64 0
	%2571 = bitcast i8* %2570 to i64*
	store i64 8, i64* %2571
	%2572 = bitcast %Type_Info* %2568 to i8*
	%2573 = getelementptr inbounds i8, i8* %2572, i64 8
	%2574 = bitcast i8* %2573 to i64*
	store i64 8, i64* %2574
	; Type_Info_Pointer
	%2575 = bitcast %Type_Info* %2568 to %Type_Info.Pointer*
	%2576 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2577 = bitcast %Type_Info* %2576 to %Type_Info*
	%2578 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2575, i64 0, i32 2
	store %Type_Info* %2577, %Type_Info** %2578
	%2579 = getelementptr inbounds %Type_Info, %Type_Info* %2568, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2579
	%2580 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%2581 = bitcast %Type_Info* %2580 to i8*
	%2582 = getelementptr inbounds i8, i8* %2581, i64 0
	%2583 = bitcast i8* %2582 to i64*
	store i64 8, i64* %2583
	%2584 = bitcast %Type_Info* %2580 to i8*
	%2585 = getelementptr inbounds i8, i8* %2584, i64 8
	%2586 = bitcast i8* %2585 to i64*
	store i64 8, i64* %2586
	; Type_Info_Pointer
	%2587 = bitcast %Type_Info* %2580 to %Type_Info.Pointer*
	%2588 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%2589 = bitcast %Type_Info* %2588 to %Type_Info*
	%2590 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2587, i64 0, i32 2
	store %Type_Info* %2589, %Type_Info** %2590
	%2591 = getelementptr inbounds %Type_Info, %Type_Info* %2580, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2591
	%2592 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%2593 = bitcast %Type_Info* %2592 to i8*
	%2594 = getelementptr inbounds i8, i8* %2593, i64 0
	%2595 = bitcast i8* %2594 to i64*
	store i64 8, i64* %2595
	%2596 = bitcast %Type_Info* %2592 to i8*
	%2597 = getelementptr inbounds i8, i8* %2596, i64 8
	%2598 = bitcast i8* %2597 to i64*
	store i64 8, i64* %2598
	; Type_Info_Pointer
	%2599 = bitcast %Type_Info* %2592 to %Type_Info.Pointer*
	%2600 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%2601 = bitcast %Type_Info* %2600 to %Type_Info*
	%2602 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2599, i64 0, i32 2
	store %Type_Info* %2601, %Type_Info** %2602
	%2603 = getelementptr inbounds %Type_Info, %Type_Info* %2592, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2603
	%2604 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%2605 = bitcast %Type_Info* %2604 to i8*
	%2606 = getelementptr inbounds i8, i8* %2605, i64 0
	%2607 = bitcast i8* %2606 to i64*
	store i64 8, i64* %2607
	%2608 = bitcast %Type_Info* %2604 to i8*
	%2609 = getelementptr inbounds i8, i8* %2608, i64 8
	%2610 = bitcast i8* %2609 to i64*
	store i64 8, i64* %2610
	; Type_Info_Pointer
	%2611 = bitcast %Type_Info* %2604 to %Type_Info.Pointer*
	%2612 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%2613 = bitcast %Type_Info* %2612 to %Type_Info*
	%2614 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2611, i64 0, i32 2
	store %Type_Info* %2613, %Type_Info** %2614
	%2615 = getelementptr inbounds %Type_Info, %Type_Info* %2604, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2615
	%2616 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%2617 = bitcast %Type_Info* %2616 to i8*
	%2618 = getelementptr inbounds i8, i8* %2617, i64 0
	%2619 = bitcast i8* %2618 to i64*
	store i64 1, i64* %2619
	%2620 = bitcast %Type_Info* %2616 to i8*
	%2621 = getelementptr inbounds i8, i8* %2620, i64 8
	%2622 = bitcast i8* %2621 to i64*
	store i64 1, i64* %2622
	; Type_Info_Basic
	%2623 = bitcast %Type_Info* %2616 to %Type_Info.Integer*
	%2624 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2623, i64 0, i32 2
	store i1 true, i1* %2624
	%2625 = getelementptr inbounds %Type_Info, %Type_Info* %2616, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2625
	%2626 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%2627 = bitcast %Type_Info* %2626 to i8*
	%2628 = getelementptr inbounds i8, i8* %2627, i64 0
	%2629 = bitcast i8* %2628 to i64*
	store i64 2, i64* %2629
	%2630 = bitcast %Type_Info* %2626 to i8*
	%2631 = getelementptr inbounds i8, i8* %2630, i64 8
	%2632 = bitcast i8* %2631 to i64*
	store i64 2, i64* %2632
	; Type_Info_Basic
	%2633 = bitcast %Type_Info* %2626 to %Type_Info.Integer*
	%2634 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2633, i64 0, i32 2
	store i1 true, i1* %2634
	%2635 = getelementptr inbounds %Type_Info, %Type_Info* %2626, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2635
	%2636 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	%2637 = bitcast %Type_Info* %2636 to i8*
	%2638 = getelementptr inbounds i8, i8* %2637, i64 0
	%2639 = bitcast i8* %2638 to i64*
	store i64 2, i64* %2639
	%2640 = bitcast %Type_Info* %2636 to i8*
	%2641 = getelementptr inbounds i8, i8* %2640, i64 8
	%2642 = bitcast i8* %2641 to i64*
	store i64 2, i64* %2642
	; Type_Info_Basic
	%2643 = bitcast %Type_Info* %2636 to %Type_Info.Integer*
	%2644 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2643, i64 0, i32 2
	store i1 false, i1* %2644
	%2645 = getelementptr inbounds %Type_Info, %Type_Info* %2636, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2645
	%2646 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%2647 = bitcast %Type_Info* %2646 to i8*
	%2648 = getelementptr inbounds i8, i8* %2647, i64 0
	%2649 = bitcast i8* %2648 to i64*
	store i64 4, i64* %2649
	%2650 = bitcast %Type_Info* %2646 to i8*
	%2651 = getelementptr inbounds i8, i8* %2650, i64 8
	%2652 = bitcast i8* %2651 to i64*
	store i64 4, i64* %2652
	; Type_Info_Basic
	%2653 = bitcast %Type_Info* %2646 to %Type_Info.Integer*
	%2654 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2653, i64 0, i32 2
	store i1 false, i1* %2654
	%2655 = getelementptr inbounds %Type_Info, %Type_Info* %2646, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2655
	%2656 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%2657 = bitcast %Type_Info* %2656 to i8*
	%2658 = getelementptr inbounds i8, i8* %2657, i64 0
	%2659 = bitcast i8* %2658 to i64*
	store i64 8, i64* %2659
	%2660 = bitcast %Type_Info* %2656 to i8*
	%2661 = getelementptr inbounds i8, i8* %2660, i64 8
	%2662 = bitcast i8* %2661 to i64*
	store i64 8, i64* %2662
	; Type_Info_Basic
	%2663 = bitcast %Type_Info* %2656 to %Type_Info.Integer*
	%2664 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2663, i64 0, i32 2
	store i1 false, i1* %2664
	%2665 = getelementptr inbounds %Type_Info, %Type_Info* %2656, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2665
	%2666 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	%2667 = bitcast %Type_Info* %2666 to i8*
	%2668 = getelementptr inbounds i8, i8* %2667, i64 0
	%2669 = bitcast i8* %2668 to i64*
	store i64 16, i64* %2669
	%2670 = bitcast %Type_Info* %2666 to i8*
	%2671 = getelementptr inbounds i8, i8* %2670, i64 8
	%2672 = bitcast i8* %2671 to i64*
	store i64 8, i64* %2672
	; Type_Info_Basic
	%2673 = bitcast %Type_Info* %2666 to %Type_Info.Any*
	%2674 = getelementptr inbounds %Type_Info, %Type_Info* %2666, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2674
	%2675 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2676 = bitcast %Type_Info* %2675 to i8*
	%2677 = getelementptr inbounds i8, i8* %2676, i64 0
	%2678 = bitcast i8* %2677 to i64*
	store i64 8, i64* %2678
	%2679 = bitcast %Type_Info* %2675 to i8*
	%2680 = getelementptr inbounds i8, i8* %2679, i64 8
	%2681 = bitcast i8* %2680 to i64*
	store i64 8, i64* %2681
	; Type_Info_Pointer
	%2682 = bitcast %Type_Info* %2675 to %Type_Info.Pointer*
	%2683 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2684 = bitcast %Type_Info* %2683 to %Type_Info*
	%2685 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2682, i64 0, i32 2
	store %Type_Info* %2684, %Type_Info** %2685
	%2686 = getelementptr inbounds %Type_Info, %Type_Info* %2675, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2686
	%2687 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%2688 = bitcast %Type_Info* %2687 to i8*
	%2689 = getelementptr inbounds i8, i8* %2688, i64 0
	%2690 = bitcast i8* %2689 to i64*
	store i64 8, i64* %2690
	%2691 = bitcast %Type_Info* %2687 to i8*
	%2692 = getelementptr inbounds i8, i8* %2691, i64 8
	%2693 = bitcast i8* %2692 to i64*
	store i64 8, i64* %2693
	; Type_Info_Basic
	%2694 = bitcast %Type_Info* %2687 to %Type_Info.Pointer*
	%2695 = getelementptr inbounds %Type_Info, %Type_Info* %2687, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2695
	%2696 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%2697 = bitcast %Type_Info* %2696 to i8*
	%2698 = getelementptr inbounds i8, i8* %2697, i64 0
	%2699 = bitcast i8* %2698 to i64*
	store i64 8, i64* %2699
	%2700 = bitcast %Type_Info* %2696 to i8*
	%2701 = getelementptr inbounds i8, i8* %2700, i64 8
	%2702 = bitcast i8* %2701 to i64*
	store i64 8, i64* %2702
	; Type_Info_Pointer
	%2703 = bitcast %Type_Info* %2696 to %Type_Info.Pointer*
	%2704 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%2705 = bitcast %Type_Info* %2704 to %Type_Info*
	%2706 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2703, i64 0, i32 2
	store %Type_Info* %2705, %Type_Info** %2706
	%2707 = getelementptr inbounds %Type_Info, %Type_Info* %2696, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2707
	%2708 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%2709 = bitcast %Type_Info* %2708 to i8*
	%2710 = getelementptr inbounds i8, i8* %2709, i64 0
	%2711 = bitcast i8* %2710 to i64*
	store i64 4, i64* %2711
	%2712 = bitcast %Type_Info* %2708 to i8*
	%2713 = getelementptr inbounds i8, i8* %2712, i64 8
	%2714 = bitcast i8* %2713 to i64*
	store i64 4, i64* %2714
	; Type_Info_Basic
	%2715 = bitcast %Type_Info* %2708 to %Type_Info.Float*
	%2716 = getelementptr inbounds %Type_Info, %Type_Info* %2708, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %2716
	%2717 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%2718 = bitcast %Type_Info* %2717 to i8*
	%2719 = getelementptr inbounds i8, i8* %2718, i64 0
	%2720 = bitcast i8* %2719 to i64*
	store i64 8, i64* %2720
	%2721 = bitcast %Type_Info* %2717 to i8*
	%2722 = getelementptr inbounds i8, i8* %2721, i64 8
	%2723 = bitcast i8* %2722 to i64*
	store i64 8, i64* %2723
	; Type_Info_Pointer
	%2724 = bitcast %Type_Info* %2717 to %Type_Info.Pointer*
	%2725 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%2726 = bitcast %Type_Info* %2725 to %Type_Info*
	%2727 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2724, i64 0, i32 2
	store %Type_Info* %2726, %Type_Info** %2727
	%2728 = getelementptr inbounds %Type_Info, %Type_Info* %2717, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2728
	%2729 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%2730 = bitcast %Type_Info* %2729 to i8*
	%2731 = getelementptr inbounds i8, i8* %2730, i64 0
	%2732 = bitcast i8* %2731 to i64*
	store i64 8, i64* %2732
	%2733 = bitcast %Type_Info* %2729 to i8*
	%2734 = getelementptr inbounds i8, i8* %2733, i64 8
	%2735 = bitcast i8* %2734 to i64*
	store i64 8, i64* %2735
	; Type_Info_Pointer
	%2736 = bitcast %Type_Info* %2729 to %Type_Info.Pointer*
	%2737 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%2738 = bitcast %Type_Info* %2737 to %Type_Info*
	%2739 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2736, i64 0, i32 2
	store %Type_Info* %2738, %Type_Info** %2739
	%2740 = getelementptr inbounds %Type_Info, %Type_Info* %2729, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2740
	%2741 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%2742 = bitcast %Type_Info* %2741 to i8*
	%2743 = getelementptr inbounds i8, i8* %2742, i64 0
	%2744 = bitcast i8* %2743 to i64*
	store i64 8, i64* %2744
	%2745 = bitcast %Type_Info* %2741 to i8*
	%2746 = getelementptr inbounds i8, i8* %2745, i64 8
	%2747 = bitcast i8* %2746 to i64*
	store i64 8, i64* %2747
	; Type_Info_Pointer
	%2748 = bitcast %Type_Info* %2741 to %Type_Info.Pointer*
	%2749 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%2750 = bitcast %Type_Info* %2749 to %Type_Info*
	%2751 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2748, i64 0, i32 2
	store %Type_Info* %2750, %Type_Info** %2751
	%2752 = getelementptr inbounds %Type_Info, %Type_Info* %2741, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2752
	%2753 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%2754 = bitcast %Type_Info* %2753 to i8*
	%2755 = getelementptr inbounds i8, i8* %2754, i64 0
	%2756 = bitcast i8* %2755 to i64*
	store i64 8, i64* %2756
	%2757 = bitcast %Type_Info* %2753 to i8*
	%2758 = getelementptr inbounds i8, i8* %2757, i64 8
	%2759 = bitcast i8* %2758 to i64*
	store i64 8, i64* %2759
	; Type_Info_Pointer
	%2760 = bitcast %Type_Info* %2753 to %Type_Info.Pointer*
	%2761 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%2762 = bitcast %Type_Info* %2761 to %Type_Info*
	%2763 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2760, i64 0, i32 2
	store %Type_Info* %2762, %Type_Info** %2763
	%2764 = getelementptr inbounds %Type_Info, %Type_Info* %2753, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2764
	%2765 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%2766 = bitcast %Type_Info* %2765 to i8*
	%2767 = getelementptr inbounds i8, i8* %2766, i64 0
	%2768 = bitcast i8* %2767 to i64*
	store i64 8, i64* %2768
	%2769 = bitcast %Type_Info* %2765 to i8*
	%2770 = getelementptr inbounds i8, i8* %2769, i64 8
	%2771 = bitcast i8* %2770 to i64*
	store i64 8, i64* %2771
	; Type_Info_Pointer
	%2772 = bitcast %Type_Info* %2765 to %Type_Info.Pointer*
	%2773 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%2774 = bitcast %Type_Info* %2773 to %Type_Info*
	%2775 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2772, i64 0, i32 2
	store %Type_Info* %2774, %Type_Info** %2775
	%2776 = getelementptr inbounds %Type_Info, %Type_Info* %2765, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2776
	%2777 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%2778 = bitcast %Type_Info* %2777 to i8*
	%2779 = getelementptr inbounds i8, i8* %2778, i64 0
	%2780 = bitcast i8* %2779 to i64*
	store i64 8, i64* %2780
	%2781 = bitcast %Type_Info* %2777 to i8*
	%2782 = getelementptr inbounds i8, i8* %2781, i64 8
	%2783 = bitcast i8* %2782 to i64*
	store i64 8, i64* %2783
	; Type_Info_Pointer
	%2784 = bitcast %Type_Info* %2777 to %Type_Info.Pointer*
	%2785 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%2786 = bitcast %Type_Info* %2785 to %Type_Info*
	%2787 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2784, i64 0, i32 2
	store %Type_Info* %2786, %Type_Info** %2787
	%2788 = getelementptr inbounds %Type_Info, %Type_Info* %2777, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2788
	%2789 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%2790 = bitcast %Type_Info* %2789 to i8*
	%2791 = getelementptr inbounds i8, i8* %2790, i64 0
	%2792 = bitcast i8* %2791 to i64*
	store i64 8, i64* %2792
	%2793 = bitcast %Type_Info* %2789 to i8*
	%2794 = getelementptr inbounds i8, i8* %2793, i64 8
	%2795 = bitcast i8* %2794 to i64*
	store i64 8, i64* %2795
	; Type_Info_Pointer
	%2796 = bitcast %Type_Info* %2789 to %Type_Info.Pointer*
	%2797 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%2798 = bitcast %Type_Info* %2797 to %Type_Info*
	%2799 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2796, i64 0, i32 2
	store %Type_Info* %2798, %Type_Info** %2799
	%2800 = getelementptr inbounds %Type_Info, %Type_Info* %2789, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2800
	%2801 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%2802 = bitcast %Type_Info* %2801 to i8*
	%2803 = getelementptr inbounds i8, i8* %2802, i64 0
	%2804 = bitcast i8* %2803 to i64*
	store i64 8, i64* %2804
	%2805 = bitcast %Type_Info* %2801 to i8*
	%2806 = getelementptr inbounds i8, i8* %2805, i64 8
	%2807 = bitcast i8* %2806 to i64*
	store i64 8, i64* %2807
	; Type_Info_Pointer
	%2808 = bitcast %Type_Info* %2801 to %Type_Info.Pointer*
	%2809 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%2810 = bitcast %Type_Info* %2809 to %Type_Info*
	%2811 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2808, i64 0, i32 2
	store %Type_Info* %2810, %Type_Info** %2811
	%2812 = getelementptr inbounds %Type_Info, %Type_Info* %2801, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2812
	%2813 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%2814 = bitcast %Type_Info* %2813 to i8*
	%2815 = getelementptr inbounds i8, i8* %2814, i64 0
	%2816 = bitcast i8* %2815 to i64*
	store i64 8, i64* %2816
	%2817 = bitcast %Type_Info* %2813 to i8*
	%2818 = getelementptr inbounds i8, i8* %2817, i64 8
	%2819 = bitcast i8* %2818 to i64*
	store i64 8, i64* %2819
	; Type_Info_Pointer
	%2820 = bitcast %Type_Info* %2813 to %Type_Info.Pointer*
	%2821 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%2822 = bitcast %Type_Info* %2821 to %Type_Info*
	%2823 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2820, i64 0, i32 2
	store %Type_Info* %2822, %Type_Info** %2823
	%2824 = getelementptr inbounds %Type_Info, %Type_Info* %2813, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2824
	%2825 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2826 = bitcast %Type_Info* %2825 to i8*
	%2827 = getelementptr inbounds i8, i8* %2826, i64 0
	%2828 = bitcast i8* %2827 to i64*
	store i64 8, i64* %2828
	%2829 = bitcast %Type_Info* %2825 to i8*
	%2830 = getelementptr inbounds i8, i8* %2829, i64 8
	%2831 = bitcast i8* %2830 to i64*
	store i64 8, i64* %2831
	; Type_Info_Pointer
	%2832 = bitcast %Type_Info* %2825 to %Type_Info.Pointer*
	%2833 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%2834 = bitcast %Type_Info* %2833 to %Type_Info*
	%2835 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2832, i64 0, i32 2
	store %Type_Info* %2834, %Type_Info** %2835
	%2836 = getelementptr inbounds %Type_Info, %Type_Info* %2825, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2836
	%2837 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%2838 = bitcast %Type_Info* %2837 to i8*
	%2839 = getelementptr inbounds i8, i8* %2838, i64 0
	%2840 = bitcast i8* %2839 to i64*
	store i64 8, i64* %2840
	%2841 = bitcast %Type_Info* %2837 to i8*
	%2842 = getelementptr inbounds i8, i8* %2841, i64 8
	%2843 = bitcast i8* %2842 to i64*
	store i64 8, i64* %2843
	; Type_Info_Pointer
	%2844 = bitcast %Type_Info* %2837 to %Type_Info.Pointer*
	%2845 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%2846 = bitcast %Type_Info* %2845 to %Type_Info*
	%2847 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2844, i64 0, i32 2
	store %Type_Info* %2846, %Type_Info** %2847
	%2848 = getelementptr inbounds %Type_Info, %Type_Info* %2837, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2848
	%2849 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%2850 = bitcast %Type_Info* %2849 to i8*
	%2851 = getelementptr inbounds i8, i8* %2850, i64 0
	%2852 = bitcast i8* %2851 to i64*
	store i64 8, i64* %2852
	%2853 = bitcast %Type_Info* %2849 to i8*
	%2854 = getelementptr inbounds i8, i8* %2853, i64 8
	%2855 = bitcast i8* %2854 to i64*
	store i64 8, i64* %2855
	; Type_Info_Pointer
	%2856 = bitcast %Type_Info* %2849 to %Type_Info.Pointer*
	%2857 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%2858 = bitcast %Type_Info* %2857 to %Type_Info*
	%2859 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2856, i64 0, i32 2
	store %Type_Info* %2858, %Type_Info** %2859
	%2860 = getelementptr inbounds %Type_Info, %Type_Info* %2849, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2860
	%2861 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%2862 = bitcast %Type_Info* %2861 to i8*
	%2863 = getelementptr inbounds i8, i8* %2862, i64 0
	%2864 = bitcast i8* %2863 to i64*
	store i64 8, i64* %2864
	%2865 = bitcast %Type_Info* %2861 to i8*
	%2866 = getelementptr inbounds i8, i8* %2865, i64 8
	%2867 = bitcast i8* %2866 to i64*
	store i64 8, i64* %2867
	; Type_Info_Pointer
	%2868 = bitcast %Type_Info* %2861 to %Type_Info.Pointer*
	%2869 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%2870 = bitcast %Type_Info* %2869 to %Type_Info*
	%2871 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2868, i64 0, i32 2
	store %Type_Info* %2870, %Type_Info** %2871
	%2872 = getelementptr inbounds %Type_Info, %Type_Info* %2861, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2872
	%2873 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%2874 = bitcast %Type_Info* %2873 to i8*
	%2875 = getelementptr inbounds i8, i8* %2874, i64 0
	%2876 = bitcast i8* %2875 to i64*
	store i64 8, i64* %2876
	%2877 = bitcast %Type_Info* %2873 to i8*
	%2878 = getelementptr inbounds i8, i8* %2877, i64 8
	%2879 = bitcast i8* %2878 to i64*
	store i64 8, i64* %2879
	; Type_Info_Pointer
	%2880 = bitcast %Type_Info* %2873 to %Type_Info.Pointer*
	%2881 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%2882 = bitcast %Type_Info* %2881 to %Type_Info*
	%2883 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2880, i64 0, i32 2
	store %Type_Info* %2882, %Type_Info** %2883
	%2884 = getelementptr inbounds %Type_Info, %Type_Info* %2873, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2884
	%2885 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%2886 = bitcast %Type_Info* %2885 to i8*
	%2887 = getelementptr inbounds i8, i8* %2886, i64 0
	%2888 = bitcast i8* %2887 to i64*
	store i64 8, i64* %2888
	%2889 = bitcast %Type_Info* %2885 to i8*
	%2890 = getelementptr inbounds i8, i8* %2889, i64 8
	%2891 = bitcast i8* %2890 to i64*
	store i64 8, i64* %2891
	; Type_Info_Pointer
	%2892 = bitcast %Type_Info* %2885 to %Type_Info.Pointer*
	%2893 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%2894 = bitcast %Type_Info* %2893 to %Type_Info*
	%2895 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2892, i64 0, i32 2
	store %Type_Info* %2894, %Type_Info** %2895
	%2896 = getelementptr inbounds %Type_Info, %Type_Info* %2885, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2896
	%2897 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%2898 = bitcast %Type_Info* %2897 to i8*
	%2899 = getelementptr inbounds i8, i8* %2898, i64 0
	%2900 = bitcast i8* %2899 to i64*
	store i64 8, i64* %2900
	%2901 = bitcast %Type_Info* %2897 to i8*
	%2902 = getelementptr inbounds i8, i8* %2901, i64 8
	%2903 = bitcast i8* %2902 to i64*
	store i64 8, i64* %2903
	; Type_Info_Pointer
	%2904 = bitcast %Type_Info* %2897 to %Type_Info.Pointer*
	%2905 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%2906 = bitcast %Type_Info* %2905 to %Type_Info*
	%2907 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2904, i64 0, i32 2
	store %Type_Info* %2906, %Type_Info** %2907
	%2908 = getelementptr inbounds %Type_Info, %Type_Info* %2897, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2908
	%2909 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%2910 = bitcast %Type_Info* %2909 to i8*
	%2911 = getelementptr inbounds i8, i8* %2910, i64 0
	%2912 = bitcast i8* %2911 to i64*
	store i64 8, i64* %2912
	%2913 = bitcast %Type_Info* %2909 to i8*
	%2914 = getelementptr inbounds i8, i8* %2913, i64 8
	%2915 = bitcast i8* %2914 to i64*
	store i64 8, i64* %2915
	; Type_Info_Pointer
	%2916 = bitcast %Type_Info* %2909 to %Type_Info.Pointer*
	%2917 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%2918 = bitcast %Type_Info* %2917 to %Type_Info*
	%2919 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2916, i64 0, i32 2
	store %Type_Info* %2918, %Type_Info** %2919
	%2920 = getelementptr inbounds %Type_Info, %Type_Info* %2909, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2920
	%2921 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%2922 = bitcast %Type_Info* %2921 to i8*
	%2923 = getelementptr inbounds i8, i8* %2922, i64 0
	%2924 = bitcast i8* %2923 to i64*
	store i64 8, i64* %2924
	%2925 = bitcast %Type_Info* %2921 to i8*
	%2926 = getelementptr inbounds i8, i8* %2925, i64 8
	%2927 = bitcast i8* %2926 to i64*
	store i64 8, i64* %2927
	; Type_Info_Pointer
	%2928 = bitcast %Type_Info* %2921 to %Type_Info.Pointer*
	%2929 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%2930 = bitcast %Type_Info* %2929 to %Type_Info*
	%2931 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2928, i64 0, i32 2
	store %Type_Info* %2930, %Type_Info** %2931
	%2932 = getelementptr inbounds %Type_Info, %Type_Info* %2921, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2932
	%2933 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%2934 = bitcast %Type_Info* %2933 to i8*
	%2935 = getelementptr inbounds i8, i8* %2934, i64 0
	%2936 = bitcast i8* %2935 to i64*
	store i64 8, i64* %2936
	%2937 = bitcast %Type_Info* %2933 to i8*
	%2938 = getelementptr inbounds i8, i8* %2937, i64 8
	%2939 = bitcast i8* %2938 to i64*
	store i64 8, i64* %2939
	; Type_Info_Pointer
	%2940 = bitcast %Type_Info* %2933 to %Type_Info.Pointer*
	%2941 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%2942 = bitcast %Type_Info* %2941 to %Type_Info*
	%2943 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2940, i64 0, i32 2
	store %Type_Info* %2942, %Type_Info** %2943
	%2944 = getelementptr inbounds %Type_Info, %Type_Info* %2933, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2944
	%2945 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%2946 = bitcast %Type_Info* %2945 to i8*
	%2947 = getelementptr inbounds i8, i8* %2946, i64 0
	%2948 = bitcast i8* %2947 to i64*
	store i64 8, i64* %2948
	%2949 = bitcast %Type_Info* %2945 to i8*
	%2950 = getelementptr inbounds i8, i8* %2949, i64 8
	%2951 = bitcast i8* %2950 to i64*
	store i64 8, i64* %2951
	; Type_Info_Pointer
	%2952 = bitcast %Type_Info* %2945 to %Type_Info.Pointer*
	%2953 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%2954 = bitcast %Type_Info* %2953 to %Type_Info*
	%2955 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2952, i64 0, i32 2
	store %Type_Info* %2954, %Type_Info** %2955
	%2956 = getelementptr inbounds %Type_Info, %Type_Info* %2945, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2956
	%2957 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%2958 = bitcast %Type_Info* %2957 to i8*
	%2959 = getelementptr inbounds i8, i8* %2958, i64 0
	%2960 = bitcast i8* %2959 to i64*
	store i64 8, i64* %2960
	%2961 = bitcast %Type_Info* %2957 to i8*
	%2962 = getelementptr inbounds i8, i8* %2961, i64 8
	%2963 = bitcast i8* %2962 to i64*
	store i64 8, i64* %2963
	; Type_Info_Pointer
	%2964 = bitcast %Type_Info* %2957 to %Type_Info.Pointer*
	%2965 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%2966 = bitcast %Type_Info* %2965 to %Type_Info*
	%2967 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2964, i64 0, i32 2
	store %Type_Info* %2966, %Type_Info** %2967
	%2968 = getelementptr inbounds %Type_Info, %Type_Info* %2957, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2968
	%2969 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%2970 = bitcast %Type_Info* %2969 to i8*
	%2971 = getelementptr inbounds i8, i8* %2970, i64 0
	%2972 = bitcast i8* %2971 to i64*
	store i64 8, i64* %2972
	%2973 = bitcast %Type_Info* %2969 to i8*
	%2974 = getelementptr inbounds i8, i8* %2973, i64 8
	%2975 = bitcast i8* %2974 to i64*
	store i64 8, i64* %2975
	; Type_Info_Pointer
	%2976 = bitcast %Type_Info* %2969 to %Type_Info.Pointer*
	%2977 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%2978 = bitcast %Type_Info* %2977 to %Type_Info*
	%2979 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2976, i64 0, i32 2
	store %Type_Info* %2978, %Type_Info** %2979
	%2980 = getelementptr inbounds %Type_Info, %Type_Info* %2969, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2980
	%2981 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%2982 = bitcast %Type_Info* %2981 to i8*
	%2983 = getelementptr inbounds i8, i8* %2982, i64 0
	%2984 = bitcast i8* %2983 to i64*
	store i64 8, i64* %2984
	%2985 = bitcast %Type_Info* %2981 to i8*
	%2986 = getelementptr inbounds i8, i8* %2985, i64 8
	%2987 = bitcast i8* %2986 to i64*
	store i64 8, i64* %2987
	; Type_Info_Pointer
	%2988 = bitcast %Type_Info* %2981 to %Type_Info.Pointer*
	%2989 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%2990 = bitcast %Type_Info* %2989 to %Type_Info*
	%2991 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2988, i64 0, i32 2
	store %Type_Info* %2990, %Type_Info** %2991
	%2992 = getelementptr inbounds %Type_Info, %Type_Info* %2981, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2992
	%2993 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2994 = bitcast %Type_Info* %2993 to i8*
	%2995 = getelementptr inbounds i8, i8* %2994, i64 0
	%2996 = bitcast i8* %2995 to i64*
	store i64 8, i64* %2996
	%2997 = bitcast %Type_Info* %2993 to i8*
	%2998 = getelementptr inbounds i8, i8* %2997, i64 8
	%2999 = bitcast i8* %2998 to i64*
	store i64 8, i64* %2999
	; Type_Info_Pointer
	%3000 = bitcast %Type_Info* %2993 to %Type_Info.Pointer*
	%3001 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%3002 = bitcast %Type_Info* %3001 to %Type_Info*
	%3003 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3000, i64 0, i32 2
	store %Type_Info* %3002, %Type_Info** %3003
	%3004 = getelementptr inbounds %Type_Info, %Type_Info* %2993, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3004
	%3005 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 91
	%3006 = bitcast %Type_Info* %3005 to i8*
	%3007 = getelementptr inbounds i8, i8* %3006, i64 0
	%3008 = bitcast i8* %3007 to i64*
	store i64 8, i64* %3008
	%3009 = bitcast %Type_Info* %3005 to i8*
	%3010 = getelementptr inbounds i8, i8* %3009, i64 8
	%3011 = bitcast i8* %3010 to i64*
	store i64 8, i64* %3011
	; Type_Info_Basic
	%3012 = bitcast %Type_Info* %3005 to %Type_Info.Complex*
	%3013 = getelementptr inbounds %Type_Info, %Type_Info* %3005, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %3013
	%3014 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	%3015 = bitcast %Type_Info* %3014 to i8*
	%3016 = getelementptr inbounds i8, i8* %3015, i64 0
	%3017 = bitcast i8* %3016 to i64*
	store i64 16, i64* %3017
	%3018 = bitcast %Type_Info* %3014 to i8*
	%3019 = getelementptr inbounds i8, i8* %3018, i64 8
	%3020 = bitcast i8* %3019 to i64*
	store i64 8, i64* %3020
	; Type_Info_Basic
	%3021 = bitcast %Type_Info* %3014 to %Type_Info.Complex*
	%3022 = getelementptr inbounds %Type_Info, %Type_Info* %3014, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %3022
	%3023 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	%3024 = bitcast %Type_Info* %3023 to i8*
	%3025 = getelementptr inbounds i8, i8* %3024, i64 0
	%3026 = bitcast i8* %3025 to i64*
	store i64 16, i64* %3026
	%3027 = bitcast %Type_Info* %3023 to i8*
	%3028 = getelementptr inbounds i8, i8* %3027, i64 8
	%3029 = bitcast i8* %3028 to i64*
	store i64 8, i64* %3029
	; Type_Info_Basic
	%3030 = bitcast %Type_Info* %3023 to %Type_Info.Quaternion*
	%3031 = getelementptr inbounds %Type_Info, %Type_Info* %3023, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %3031
	%3032 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	%3033 = bitcast %Type_Info* %3032 to i8*
	%3034 = getelementptr inbounds i8, i8* %3033, i64 0
	%3035 = bitcast i8* %3034 to i64*
	store i64 32, i64* %3035
	%3036 = bitcast %Type_Info* %3032 to i8*
	%3037 = getelementptr inbounds i8, i8* %3036, i64 8
	%3038 = bitcast i8* %3037 to i64*
	store i64 8, i64* %3038
	; Type_Info_Basic
	%3039 = bitcast %Type_Info* %3032 to %Type_Info.Quaternion*
	%3040 = getelementptr inbounds %Type_Info, %Type_Info* %3032, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %3040
	%3041 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	%3042 = bitcast %Type_Info* %3041 to i8*
	%3043 = getelementptr inbounds i8, i8* %3042, i64 0
	%3044 = bitcast i8* %3043 to i64*
	store i64 8, i64* %3044
	%3045 = bitcast %Type_Info* %3041 to i8*
	%3046 = getelementptr inbounds i8, i8* %3045, i64 8
	%3047 = bitcast i8* %3046 to i64*
	store i64 8, i64* %3047
	; Type_Info_Named
	%3048 = bitcast %Type_Info* %3041 to %Type_Info.Named*
	%3049 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%3050 = bitcast %Type_Info* %3049 to %Type_Info*
	%3051 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3048, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$392, i64 0, i32 0), i64 9}, %..string* %3051
	%3052 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3048, i64 0, i32 3
	store %Type_Info* %3050, %Type_Info** %3052
	%3053 = getelementptr inbounds %Type_Info, %Type_Info* %3041, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3053
	%3054 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	%3055 = bitcast %Type_Info* %3054 to i8*
	%3056 = getelementptr inbounds i8, i8* %3055, i64 0
	%3057 = bitcast i8* %3056 to i64*
	store i64 8, i64* %3057
	%3058 = bitcast %Type_Info* %3054 to i8*
	%3059 = getelementptr inbounds i8, i8* %3058, i64 8
	%3060 = bitcast i8* %3059 to i64*
	store i64 4, i64* %3060
	; Type_Info_Named
	%3061 = bitcast %Type_Info* %3054 to %Type_Info.Named*
	%3062 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 97
	%3063 = bitcast %Type_Info* %3062 to %Type_Info*
	%3064 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3061, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$393, i64 0, i32 0), i64 4}, %..string* %3064
	%3065 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3061, i64 0, i32 3
	store %Type_Info* %3063, %Type_Info** %3065
	%3066 = getelementptr inbounds %Type_Info, %Type_Info* %3054, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3066
	%3067 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 97
	%3068 = bitcast %Type_Info* %3067 to i8*
	%3069 = getelementptr inbounds i8, i8* %3068, i64 0
	%3070 = bitcast i8* %3069 to i64*
	store i64 8, i64* %3070
	%3071 = bitcast %Type_Info* %3067 to i8*
	%3072 = getelementptr inbounds i8, i8* %3071, i64 8
	%3073 = bitcast i8* %3072 to i64*
	store i64 4, i64* %3073
	; Type_Info_Struct
	%3074 = bitcast %Type_Info* %3067 to %Type_Info.Struct*
	%3075 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %3074, i64 0, i32 2
	%3076 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3075, i64 0, i32 3
	store i1 false, i1* %3076
	%3077 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3075, i64 0, i32 4
	store i1 true, i1* %3077
	%3078 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3075, i64 0, i32 5
	store i1 false, i1* %3078
	%3079 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 104
	%3080 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 104
	%3081 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 84
	%3082 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%3083 = bitcast %Type_Info* %3082 to %Type_Info*
	%3084 = getelementptr inbounds %Type_Info*, %Type_Info** %3079, i64 0
	%3085 = getelementptr inbounds i64, i64* %3081, i64 0
	%3086 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %3086, %Type_Info** %3084
	%3087 = getelementptr inbounds %..string, %..string* %3080, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$394, i64 0, i32 0), i64 1}, %..string* %3087
	store i64 0, i64* %3085
	%3088 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%3089 = bitcast %Type_Info* %3088 to %Type_Info*
	%3090 = getelementptr inbounds %Type_Info*, %Type_Info** %3079, i64 1
	%3091 = getelementptr inbounds i64, i64* %3081, i64 1
	%3092 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %3092, %Type_Info** %3090
	%3093 = getelementptr inbounds %..string, %..string* %3080, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$395, i64 0, i32 0), i64 1}, %..string* %3093
	store i64 4, i64* %3091
	%3094 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3075, i64 0, i32 0
	%3095 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3094, i64 0, i32 0
	store %Type_Info** %3079, %Type_Info*** %3095
	%3096 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3094, i64 0, i32 1
	store i64 2, i64* %3096
	%3097 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3094, i64 0, i32 2
	store i64 2, i64* %3097
	%3098 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3075, i64 0, i32 1
	%3099 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3098, i64 0, i32 0
	store %..string* %3080, %..string** %3099
	%3100 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3098, i64 0, i32 1
	store i64 2, i64* %3100
	%3101 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3098, i64 0, i32 2
	store i64 2, i64* %3101
	%3102 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3075, i64 0, i32 2
	%3103 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %3102, i64 0, i32 0
	store i64* %3081, i64** %3103
	%3104 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %3102, i64 0, i32 1
	store i64 2, i64* %3104
	%3105 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %3102, i64 0, i32 2
	store i64 2, i64* %3105
	%3106 = getelementptr inbounds %Type_Info, %Type_Info* %3067, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %3106
	%3107 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%3108 = bitcast %Type_Info* %3107 to i8*
	%3109 = getelementptr inbounds i8, i8* %3108, i64 0
	%3110 = bitcast i8* %3109 to i64*
	store i64 16, i64* %3110
	%3111 = bitcast %Type_Info* %3107 to i8*
	%3112 = getelementptr inbounds i8, i8* %3111, i64 8
	%3113 = bitcast i8* %3112 to i64*
	store i64 4, i64* %3113
	; Type_Info_Named
	%3114 = bitcast %Type_Info* %3107 to %Type_Info.Named*
	%3115 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 99
	%3116 = bitcast %Type_Info* %3115 to %Type_Info*
	%3117 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3114, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$396, i64 0, i32 0), i64 4}, %..string* %3117
	%3118 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3114, i64 0, i32 3
	store %Type_Info* %3116, %Type_Info** %3118
	%3119 = getelementptr inbounds %Type_Info, %Type_Info* %3107, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3119
	%3120 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 99
	%3121 = bitcast %Type_Info* %3120 to i8*
	%3122 = getelementptr inbounds i8, i8* %3121, i64 0
	%3123 = bitcast i8* %3122 to i64*
	store i64 16, i64* %3123
	%3124 = bitcast %Type_Info* %3120 to i8*
	%3125 = getelementptr inbounds i8, i8* %3124, i64 8
	%3126 = bitcast i8* %3125 to i64*
	store i64 4, i64* %3126
	; Type_Info_Struct
	%3127 = bitcast %Type_Info* %3120 to %Type_Info.Struct*
	%3128 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %3127, i64 0, i32 2
	%3129 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3128, i64 0, i32 3
	store i1 false, i1* %3129
	%3130 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3128, i64 0, i32 4
	store i1 true, i1* %3130
	%3131 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3128, i64 0, i32 5
	store i1 false, i1* %3131
	%3132 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 106
	%3133 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 106
	%3134 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 86
	%3135 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%3136 = bitcast %Type_Info* %3135 to %Type_Info*
	%3137 = getelementptr inbounds %Type_Info*, %Type_Info** %3132, i64 0
	%3138 = getelementptr inbounds i64, i64* %3134, i64 0
	%3139 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %3139, %Type_Info** %3137
	%3140 = getelementptr inbounds %..string, %..string* %3133, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$397, i64 0, i32 0), i64 1}, %..string* %3140
	store i64 0, i64* %3138
	%3141 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%3142 = bitcast %Type_Info* %3141 to %Type_Info*
	%3143 = getelementptr inbounds %Type_Info*, %Type_Info** %3132, i64 1
	%3144 = getelementptr inbounds i64, i64* %3134, i64 1
	%3145 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %3145, %Type_Info** %3143
	%3146 = getelementptr inbounds %..string, %..string* %3133, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$398, i64 0, i32 0), i64 1}, %..string* %3146
	store i64 4, i64* %3144
	%3147 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%3148 = bitcast %Type_Info* %3147 to %Type_Info*
	%3149 = getelementptr inbounds %Type_Info*, %Type_Info** %3132, i64 2
	%3150 = getelementptr inbounds i64, i64* %3134, i64 2
	%3151 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %3151, %Type_Info** %3149
	%3152 = getelementptr inbounds %..string, %..string* %3133, i64 2
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$399, i64 0, i32 0), i64 1}, %..string* %3152
	store i64 8, i64* %3150
	%3153 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%3154 = bitcast %Type_Info* %3153 to %Type_Info*
	%3155 = getelementptr inbounds %Type_Info*, %Type_Info** %3132, i64 3
	%3156 = getelementptr inbounds i64, i64* %3134, i64 3
	%3157 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %3157, %Type_Info** %3155
	%3158 = getelementptr inbounds %..string, %..string* %3133, i64 3
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$39a, i64 0, i32 0), i64 1}, %..string* %3158
	store i64 12, i64* %3156
	%3159 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3128, i64 0, i32 0
	%3160 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3159, i64 0, i32 0
	store %Type_Info** %3132, %Type_Info*** %3160
	%3161 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3159, i64 0, i32 1
	store i64 4, i64* %3161
	%3162 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3159, i64 0, i32 2
	store i64 4, i64* %3162
	%3163 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3128, i64 0, i32 1
	%3164 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3163, i64 0, i32 0
	store %..string* %3133, %..string** %3164
	%3165 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3163, i64 0, i32 1
	store i64 4, i64* %3165
	%3166 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3163, i64 0, i32 2
	store i64 4, i64* %3166
	%3167 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3128, i64 0, i32 2
	%3168 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %3167, i64 0, i32 0
	store i64* %3134, i64** %3168
	%3169 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %3167, i64 0, i32 1
	store i64 4, i64* %3169
	%3170 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %3167, i64 0, i32 2
	store i64 4, i64* %3170
	%3171 = getelementptr inbounds %Type_Info, %Type_Info* %3120, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %3171
	%3172 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 100
	%3173 = bitcast %Type_Info* %3172 to i8*
	%3174 = getelementptr inbounds i8, i8* %3173, i64 0
	%3175 = bitcast i8* %3174 to i64*
	store i64 8, i64* %3175
	%3176 = bitcast %Type_Info* %3172 to i8*
	%3177 = getelementptr inbounds i8, i8* %3176, i64 8
	%3178 = bitcast i8* %3177 to i64*
	store i64 8, i64* %3178
	; Type_Info_Proc
	%3179 = bitcast %Type_Info* %3172 to %Type_Info.Procedure*
	%3180 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3179, i64 0, i32 2
	%3181 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3179, i64 0, i32 3
	%3182 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3179, i64 0, i32 4
	%3183 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3179, i64 0, i32 5
	%3184 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 101
	%3185 = bitcast %Type_Info* %3184 to %Type_Info*
	store %Type_Info* %3185, %Type_Info** %3180
	store i1 false, i1* %3182
	store i64 1, i64* %3183
	%3186 = getelementptr inbounds %Type_Info, %Type_Info* %3172, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3186
	%3187 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 101
	%3188 = bitcast %Type_Info* %3187 to i8*
	%3189 = getelementptr inbounds i8, i8* %3188, i64 0
	%3190 = bitcast i8* %3189 to i64*
	store i64 24, i64* %3190
	%3191 = bitcast %Type_Info* %3187 to i8*
	%3192 = getelementptr inbounds i8, i8* %3191, i64 8
	%3193 = bitcast i8* %3192 to i64*
	store i64 8, i64* %3193
	; Type_Info_Tuple
	%3194 = bitcast %Type_Info* %3187 to %Type_Info.Tuple*
	%3195 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3194, i64 0, i32 2
	%3196 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 110
	%3197 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 110
	%3198 = getelementptr inbounds %Type_Info*, %Type_Info** %3196, i64 0
	%3199 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3199, %Type_Info** %3198
	%3200 = getelementptr inbounds %..string, %..string* %3197, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$39b, i64 0, i32 0), i64 4}, %..string* %3200
	%3201 = getelementptr inbounds %Type_Info*, %Type_Info** %3196, i64 1
	%3202 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3202, %Type_Info** %3201
	%3203 = getelementptr inbounds %..string, %..string* %3197, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$39c, i64 0, i32 0), i64 5}, %..string* %3203
	%3204 = getelementptr inbounds %Type_Info*, %Type_Info** %3196, i64 2
	%3205 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3205, %Type_Info** %3204
	%3206 = getelementptr inbounds %..string, %..string* %3197, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$39d, i64 0, i32 0), i64 5}, %..string* %3206
	%3207 = getelementptr inbounds %Type_Info*, %Type_Info** %3196, i64 3
	%3208 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %3208, %Type_Info** %3207
	%3209 = getelementptr inbounds %..string, %..string* %3197, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$39e, i64 0, i32 0), i64 7}, %..string* %3209
	%3210 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3195, i64 0, i32 0
	%3211 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3210, i64 0, i32 0
	store %Type_Info** %3196, %Type_Info*** %3211
	%3212 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3210, i64 0, i32 1
	store i64 4, i64* %3212
	%3213 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3210, i64 0, i32 2
	store i64 4, i64* %3213
	%3214 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3195, i64 0, i32 1
	%3215 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3214, i64 0, i32 0
	store %..string* %3197, %..string** %3215
	%3216 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3214, i64 0, i32 1
	store i64 4, i64* %3216
	%3217 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3214, i64 0, i32 2
	store i64 4, i64* %3217
	%3218 = getelementptr inbounds %Type_Info, %Type_Info* %3187, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3218
	%3219 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	%3220 = bitcast %Type_Info* %3219 to i8*
	%3221 = getelementptr inbounds i8, i8* %3220, i64 0
	%3222 = bitcast i8* %3221 to i64*
	store i64 8, i64* %3222
	%3223 = bitcast %Type_Info* %3219 to i8*
	%3224 = getelementptr inbounds i8, i8* %3223, i64 8
	%3225 = bitcast i8* %3224 to i64*
	store i64 8, i64* %3225
	; Type_Info_Proc
	%3226 = bitcast %Type_Info* %3219 to %Type_Info.Procedure*
	%3227 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3226, i64 0, i32 2
	%3228 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3226, i64 0, i32 3
	%3229 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3226, i64 0, i32 4
	%3230 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3226, i64 0, i32 5
	%3231 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	%3232 = bitcast %Type_Info* %3231 to %Type_Info*
	store %Type_Info* %3232, %Type_Info** %3227
	store i1 false, i1* %3229
	store i64 1, i64* %3230
	%3233 = getelementptr inbounds %Type_Info, %Type_Info* %3219, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3233
	%3234 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	%3235 = bitcast %Type_Info* %3234 to i8*
	%3236 = getelementptr inbounds i8, i8* %3235, i64 0
	%3237 = bitcast i8* %3236 to i64*
	store i64 12, i64* %3237
	%3238 = bitcast %Type_Info* %3234 to i8*
	%3239 = getelementptr inbounds i8, i8* %3238, i64 8
	%3240 = bitcast i8* %3239 to i64*
	store i64 4, i64* %3240
	; Type_Info_Tuple
	%3241 = bitcast %Type_Info* %3234 to %Type_Info.Tuple*
	%3242 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3241, i64 0, i32 2
	%3243 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 114
	%3244 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 114
	%3245 = getelementptr inbounds %Type_Info*, %Type_Info** %3243, i64 0
	%3246 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3246, %Type_Info** %3245
	%3247 = getelementptr inbounds %..string, %..string* %3244, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$39f, i64 0, i32 0), i64 4}, %..string* %3247
	%3248 = getelementptr inbounds %Type_Info*, %Type_Info** %3243, i64 1
	%3249 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3249, %Type_Info** %3248
	%3250 = getelementptr inbounds %..string, %..string* %3244, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3a0, i64 0, i32 0), i64 5}, %..string* %3250
	%3251 = getelementptr inbounds %Type_Info*, %Type_Info** %3243, i64 2
	%3252 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3252, %Type_Info** %3251
	%3253 = getelementptr inbounds %..string, %..string* %3244, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3a1, i64 0, i32 0), i64 5}, %..string* %3253
	%3254 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3242, i64 0, i32 0
	%3255 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3254, i64 0, i32 0
	store %Type_Info** %3243, %Type_Info*** %3255
	%3256 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3254, i64 0, i32 1
	store i64 3, i64* %3256
	%3257 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3254, i64 0, i32 2
	store i64 3, i64* %3257
	%3258 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3242, i64 0, i32 1
	%3259 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3258, i64 0, i32 0
	store %..string* %3244, %..string** %3259
	%3260 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3258, i64 0, i32 1
	store i64 3, i64* %3260
	%3261 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3258, i64 0, i32 2
	store i64 3, i64* %3261
	%3262 = getelementptr inbounds %Type_Info, %Type_Info* %3234, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3262
	%3263 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%3264 = bitcast %Type_Info* %3263 to i8*
	%3265 = getelementptr inbounds i8, i8* %3264, i64 0
	%3266 = bitcast i8* %3265 to i64*
	store i64 8, i64* %3266
	%3267 = bitcast %Type_Info* %3263 to i8*
	%3268 = getelementptr inbounds i8, i8* %3267, i64 8
	%3269 = bitcast i8* %3268 to i64*
	store i64 8, i64* %3269
	; Type_Info_Proc
	%3270 = bitcast %Type_Info* %3263 to %Type_Info.Procedure*
	%3271 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3270, i64 0, i32 2
	%3272 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3270, i64 0, i32 3
	%3273 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3270, i64 0, i32 4
	%3274 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3270, i64 0, i32 5
	%3275 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%3276 = bitcast %Type_Info* %3275 to %Type_Info*
	store %Type_Info* %3276, %Type_Info** %3271
	store i1 false, i1* %3273
	store i64 1, i64* %3274
	%3277 = getelementptr inbounds %Type_Info, %Type_Info* %3263, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3277
	%3278 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%3279 = bitcast %Type_Info* %3278 to i8*
	%3280 = getelementptr inbounds i8, i8* %3279, i64 0
	%3281 = bitcast i8* %3280 to i64*
	store i64 4, i64* %3281
	%3282 = bitcast %Type_Info* %3278 to i8*
	%3283 = getelementptr inbounds i8, i8* %3282, i64 8
	%3284 = bitcast i8* %3283 to i64*
	store i64 4, i64* %3284
	; Type_Info_Tuple
	%3285 = bitcast %Type_Info* %3278 to %Type_Info.Tuple*
	%3286 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3285, i64 0, i32 2
	%3287 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 117
	%3288 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 117
	%3289 = getelementptr inbounds %Type_Info*, %Type_Info** %3287, i64 0
	%3290 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3290, %Type_Info** %3289
	%3291 = getelementptr inbounds %..string, %..string* %3288, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3a2, i64 0, i32 0), i64 6}, %..string* %3291
	%3292 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3286, i64 0, i32 0
	%3293 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3292, i64 0, i32 0
	store %Type_Info** %3287, %Type_Info*** %3293
	%3294 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3292, i64 0, i32 1
	store i64 1, i64* %3294
	%3295 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3292, i64 0, i32 2
	store i64 1, i64* %3295
	%3296 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3286, i64 0, i32 1
	%3297 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3296, i64 0, i32 0
	store %..string* %3288, %..string** %3297
	%3298 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3296, i64 0, i32 1
	store i64 1, i64* %3298
	%3299 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3296, i64 0, i32 2
	store i64 1, i64* %3299
	%3300 = getelementptr inbounds %Type_Info, %Type_Info* %3278, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3300
	%3301 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 106
	%3302 = bitcast %Type_Info* %3301 to i8*
	%3303 = getelementptr inbounds i8, i8* %3302, i64 0
	%3304 = bitcast i8* %3303 to i64*
	store i64 8, i64* %3304
	%3305 = bitcast %Type_Info* %3301 to i8*
	%3306 = getelementptr inbounds i8, i8* %3305, i64 8
	%3307 = bitcast i8* %3306 to i64*
	store i64 8, i64* %3307
	; Type_Info_Proc
	%3308 = bitcast %Type_Info* %3301 to %Type_Info.Procedure*
	%3309 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3308, i64 0, i32 2
	%3310 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3308, i64 0, i32 3
	%3311 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3308, i64 0, i32 4
	%3312 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3308, i64 0, i32 5
	%3313 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	%3314 = bitcast %Type_Info* %3313 to %Type_Info*
	store %Type_Info* %3314, %Type_Info** %3309
	store i1 false, i1* %3311
	store i64 1, i64* %3312
	%3315 = getelementptr inbounds %Type_Info, %Type_Info* %3301, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3315
	%3316 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	%3317 = bitcast %Type_Info* %3316 to i8*
	%3318 = getelementptr inbounds i8, i8* %3317, i64 0
	%3319 = bitcast i8* %3318 to i64*
	store i64 32, i64* %3319
	%3320 = bitcast %Type_Info* %3316 to i8*
	%3321 = getelementptr inbounds i8, i8* %3320, i64 8
	%3322 = bitcast i8* %3321 to i64*
	store i64 8, i64* %3322
	; Type_Info_Tuple
	%3323 = bitcast %Type_Info* %3316 to %Type_Info.Tuple*
	%3324 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3323, i64 0, i32 2
	%3325 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 118
	%3326 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 118
	%3327 = getelementptr inbounds %Type_Info*, %Type_Info** %3325, i64 0
	%3328 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3328, %Type_Info** %3327
	%3329 = getelementptr inbounds %..string, %..string* %3326, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3a3, i64 0, i32 0), i64 5}, %..string* %3329
	%3330 = getelementptr inbounds %Type_Info*, %Type_Info** %3325, i64 1
	%3331 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3331, %Type_Info** %3330
	%3332 = getelementptr inbounds %..string, %..string* %3326, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3a4, i64 0, i32 0), i64 4}, %..string* %3332
	%3333 = getelementptr inbounds %Type_Info*, %Type_Info** %3325, i64 2
	%3334 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3334, %Type_Info** %3333
	%3335 = getelementptr inbounds %..string, %..string* %3326, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3a5, i64 0, i32 0), i64 4}, %..string* %3335
	%3336 = getelementptr inbounds %Type_Info*, %Type_Info** %3325, i64 3
	%3337 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %3337, %Type_Info** %3336
	%3338 = getelementptr inbounds %..string, %..string* %3326, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$3a6, i64 0, i32 0), i64 10}, %..string* %3338
	%3339 = getelementptr inbounds %Type_Info*, %Type_Info** %3325, i64 4
	%3340 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3340, %Type_Info** %3339
	%3341 = getelementptr inbounds %..string, %..string* %3326, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3a7, i64 0, i32 0), i64 6}, %..string* %3341
	%3342 = getelementptr inbounds %Type_Info*, %Type_Info** %3325, i64 5
	%3343 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %3343, %Type_Info** %3342
	%3344 = getelementptr inbounds %..string, %..string* %3326, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3a8, i64 0, i32 0), i64 7}, %..string* %3344
	%3345 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3324, i64 0, i32 0
	%3346 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3345, i64 0, i32 0
	store %Type_Info** %3325, %Type_Info*** %3346
	%3347 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3345, i64 0, i32 1
	store i64 6, i64* %3347
	%3348 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3345, i64 0, i32 2
	store i64 6, i64* %3348
	%3349 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3324, i64 0, i32 1
	%3350 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3349, i64 0, i32 0
	store %..string* %3326, %..string** %3350
	%3351 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3349, i64 0, i32 1
	store i64 6, i64* %3351
	%3352 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3349, i64 0, i32 2
	store i64 6, i64* %3352
	%3353 = getelementptr inbounds %Type_Info, %Type_Info* %3316, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3353
	%3354 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%3355 = bitcast %Type_Info* %3354 to i8*
	%3356 = getelementptr inbounds i8, i8* %3355, i64 0
	%3357 = bitcast i8* %3356 to i64*
	store i64 8, i64* %3357
	%3358 = bitcast %Type_Info* %3354 to i8*
	%3359 = getelementptr inbounds i8, i8* %3358, i64 8
	%3360 = bitcast i8* %3359 to i64*
	store i64 8, i64* %3360
	; Type_Info_Proc
	%3361 = bitcast %Type_Info* %3354 to %Type_Info.Procedure*
	%3362 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3361, i64 0, i32 2
	%3363 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3361, i64 0, i32 3
	%3364 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3361, i64 0, i32 4
	%3365 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3361, i64 0, i32 5
	%3366 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%3367 = bitcast %Type_Info* %3366 to %Type_Info*
	store %Type_Info* %3367, %Type_Info** %3362
	store i1 false, i1* %3364
	store i64 1, i64* %3365
	%3368 = getelementptr inbounds %Type_Info, %Type_Info* %3354, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3368
	%3369 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%3370 = bitcast %Type_Info* %3369 to i8*
	%3371 = getelementptr inbounds i8, i8* %3370, i64 0
	%3372 = bitcast i8* %3371 to i64*
	store i64 4, i64* %3372
	%3373 = bitcast %Type_Info* %3369 to i8*
	%3374 = getelementptr inbounds i8, i8* %3373, i64 8
	%3375 = bitcast i8* %3374 to i64*
	store i64 4, i64* %3375
	; Type_Info_Tuple
	%3376 = bitcast %Type_Info* %3369 to %Type_Info.Tuple*
	%3377 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3376, i64 0, i32 2
	%3378 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 124
	%3379 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 124
	%3380 = getelementptr inbounds %Type_Info*, %Type_Info** %3378, i64 0
	%3381 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3381, %Type_Info** %3380
	%3382 = getelementptr inbounds %..string, %..string* %3379, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3a9, i64 0, i32 0), i64 5}, %..string* %3382
	%3383 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3377, i64 0, i32 0
	%3384 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3383, i64 0, i32 0
	store %Type_Info** %3378, %Type_Info*** %3384
	%3385 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3383, i64 0, i32 1
	store i64 1, i64* %3385
	%3386 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3383, i64 0, i32 2
	store i64 1, i64* %3386
	%3387 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3377, i64 0, i32 1
	%3388 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3387, i64 0, i32 0
	store %..string* %3379, %..string** %3388
	%3389 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3387, i64 0, i32 1
	store i64 1, i64* %3389
	%3390 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3387, i64 0, i32 2
	store i64 1, i64* %3390
	%3391 = getelementptr inbounds %Type_Info, %Type_Info* %3369, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3391
	%3392 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%3393 = bitcast %Type_Info* %3392 to i8*
	%3394 = getelementptr inbounds i8, i8* %3393, i64 0
	%3395 = bitcast i8* %3394 to i64*
	store i64 8, i64* %3395
	%3396 = bitcast %Type_Info* %3392 to i8*
	%3397 = getelementptr inbounds i8, i8* %3396, i64 8
	%3398 = bitcast i8* %3397 to i64*
	store i64 8, i64* %3398
	; Type_Info_Proc
	%3399 = bitcast %Type_Info* %3392 to %Type_Info.Procedure*
	%3400 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3399, i64 0, i32 2
	%3401 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3399, i64 0, i32 3
	%3402 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3399, i64 0, i32 4
	%3403 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3399, i64 0, i32 5
	%3404 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%3405 = bitcast %Type_Info* %3404 to %Type_Info*
	store %Type_Info* %3405, %Type_Info** %3400
	store i1 false, i1* %3402
	store i64 1, i64* %3403
	%3406 = getelementptr inbounds %Type_Info, %Type_Info* %3392, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3406
	%3407 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%3408 = bitcast %Type_Info* %3407 to i8*
	%3409 = getelementptr inbounds i8, i8* %3408, i64 0
	%3410 = bitcast i8* %3409 to i64*
	store i64 16, i64* %3410
	%3411 = bitcast %Type_Info* %3407 to i8*
	%3412 = getelementptr inbounds i8, i8* %3411, i64 8
	%3413 = bitcast i8* %3412 to i64*
	store i64 8, i64* %3413
	; Type_Info_Tuple
	%3414 = bitcast %Type_Info* %3407 to %Type_Info.Tuple*
	%3415 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3414, i64 0, i32 2
	%3416 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 125
	%3417 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 125
	%3418 = getelementptr inbounds %Type_Info*, %Type_Info** %3416, i64 0
	%3419 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3419, %Type_Info** %3418
	%3420 = getelementptr inbounds %..string, %..string* %3417, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3aa, i64 0, i32 0), i64 5}, %..string* %3420
	%3421 = getelementptr inbounds %Type_Info*, %Type_Info** %3416, i64 1
	%3422 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	store %Type_Info* %3422, %Type_Info** %3421
	%3423 = getelementptr inbounds %..string, %..string* %3417, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3ab, i64 0, i32 0), i64 7}, %..string* %3423
	%3424 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3415, i64 0, i32 0
	%3425 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3424, i64 0, i32 0
	store %Type_Info** %3416, %Type_Info*** %3425
	%3426 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3424, i64 0, i32 1
	store i64 2, i64* %3426
	%3427 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3424, i64 0, i32 2
	store i64 2, i64* %3427
	%3428 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3415, i64 0, i32 1
	%3429 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3428, i64 0, i32 0
	store %..string* %3417, %..string** %3429
	%3430 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3428, i64 0, i32 1
	store i64 2, i64* %3430
	%3431 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3428, i64 0, i32 2
	store i64 2, i64* %3431
	%3432 = getelementptr inbounds %Type_Info, %Type_Info* %3407, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3432
	%3433 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	%3434 = bitcast %Type_Info* %3433 to i8*
	%3435 = getelementptr inbounds i8, i8* %3434, i64 0
	%3436 = bitcast i8* %3435 to i64*
	store i64 8, i64* %3436
	%3437 = bitcast %Type_Info* %3433 to i8*
	%3438 = getelementptr inbounds i8, i8* %3437, i64 8
	%3439 = bitcast i8* %3438 to i64*
	store i64 8, i64* %3439
	; Type_Info_Pointer
	%3440 = bitcast %Type_Info* %3433 to %Type_Info.Pointer*
	%3441 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%3442 = bitcast %Type_Info* %3441 to %Type_Info*
	%3443 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3440, i64 0, i32 2
	store %Type_Info* %3442, %Type_Info** %3443
	%3444 = getelementptr inbounds %Type_Info, %Type_Info* %3433, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3444
	%3445 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 111
	%3446 = bitcast %Type_Info* %3445 to i8*
	%3447 = getelementptr inbounds i8, i8* %3446, i64 0
	%3448 = bitcast i8* %3447 to i64*
	store i64 8, i64* %3448
	%3449 = bitcast %Type_Info* %3445 to i8*
	%3450 = getelementptr inbounds i8, i8* %3449, i64 8
	%3451 = bitcast i8* %3450 to i64*
	store i64 8, i64* %3451
	; Type_Info_Proc
	%3452 = bitcast %Type_Info* %3445 to %Type_Info.Procedure*
	%3453 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3452, i64 0, i32 2
	%3454 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3452, i64 0, i32 3
	%3455 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3452, i64 0, i32 4
	%3456 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3452, i64 0, i32 5
	%3457 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 112
	%3458 = bitcast %Type_Info* %3457 to %Type_Info*
	store %Type_Info* %3458, %Type_Info** %3453
	store i1 false, i1* %3455
	store i64 1, i64* %3456
	%3459 = getelementptr inbounds %Type_Info, %Type_Info* %3445, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3459
	%3460 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 112
	%3461 = bitcast %Type_Info* %3460 to i8*
	%3462 = getelementptr inbounds i8, i8* %3461, i64 0
	%3463 = bitcast i8* %3462 to i64*
	store i64 24, i64* %3463
	%3464 = bitcast %Type_Info* %3460 to i8*
	%3465 = getelementptr inbounds i8, i8* %3464, i64 8
	%3466 = bitcast i8* %3465 to i64*
	store i64 8, i64* %3466
	; Type_Info_Tuple
	%3467 = bitcast %Type_Info* %3460 to %Type_Info.Tuple*
	%3468 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3467, i64 0, i32 2
	%3469 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 127
	%3470 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 127
	%3471 = getelementptr inbounds %Type_Info*, %Type_Info** %3469, i64 0
	%3472 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3472, %Type_Info** %3471
	%3473 = getelementptr inbounds %..string, %..string* %3470, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3ac, i64 0, i32 0), i64 6}, %..string* %3473
	%3474 = getelementptr inbounds %Type_Info*, %Type_Info** %3469, i64 1
	%3475 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3475, %Type_Info** %3474
	%3476 = getelementptr inbounds %..string, %..string* %3470, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3ad, i64 0, i32 0), i64 4}, %..string* %3476
	%3477 = getelementptr inbounds %Type_Info*, %Type_Info** %3469, i64 2
	%3478 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %3478, %Type_Info** %3477
	%3479 = getelementptr inbounds %..string, %..string* %3470, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3ae, i64 0, i32 0), i64 4}, %..string* %3479
	%3480 = getelementptr inbounds %Type_Info*, %Type_Info** %3469, i64 3
	%3481 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3481, %Type_Info** %3480
	%3482 = getelementptr inbounds %..string, %..string* %3470, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3af, i64 0, i32 0), i64 5}, %..string* %3482
	%3483 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3468, i64 0, i32 0
	%3484 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3483, i64 0, i32 0
	store %Type_Info** %3469, %Type_Info*** %3484
	%3485 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3483, i64 0, i32 1
	store i64 4, i64* %3485
	%3486 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3483, i64 0, i32 2
	store i64 4, i64* %3486
	%3487 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3468, i64 0, i32 1
	%3488 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3487, i64 0, i32 0
	store %..string* %3470, %..string** %3488
	%3489 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3487, i64 0, i32 1
	store i64 4, i64* %3489
	%3490 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3487, i64 0, i32 2
	store i64 4, i64* %3490
	%3491 = getelementptr inbounds %Type_Info, %Type_Info* %3460, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3491
	%3492 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	%3493 = bitcast %Type_Info* %3492 to i8*
	%3494 = getelementptr inbounds i8, i8* %3493, i64 0
	%3495 = bitcast i8* %3494 to i64*
	store i64 8, i64* %3495
	%3496 = bitcast %Type_Info* %3492 to i8*
	%3497 = getelementptr inbounds i8, i8* %3496, i64 8
	%3498 = bitcast i8* %3497 to i64*
	store i64 8, i64* %3498
	; Type_Info_Proc
	%3499 = bitcast %Type_Info* %3492 to %Type_Info.Procedure*
	%3500 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3499, i64 0, i32 2
	%3501 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3499, i64 0, i32 3
	%3502 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3499, i64 0, i32 4
	%3503 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3499, i64 0, i32 5
	%3504 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%3505 = bitcast %Type_Info* %3504 to %Type_Info*
	store %Type_Info* %3505, %Type_Info** %3500
	store i1 false, i1* %3502
	store i64 1, i64* %3503
	%3506 = getelementptr inbounds %Type_Info, %Type_Info* %3492, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3506
	%3507 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%3508 = bitcast %Type_Info* %3507 to i8*
	%3509 = getelementptr inbounds i8, i8* %3508, i64 0
	%3510 = bitcast i8* %3509 to i64*
	store i64 8, i64* %3510
	%3511 = bitcast %Type_Info* %3507 to i8*
	%3512 = getelementptr inbounds i8, i8* %3511, i64 8
	%3513 = bitcast i8* %3512 to i64*
	store i64 4, i64* %3513
	; Type_Info_Tuple
	%3514 = bitcast %Type_Info* %3507 to %Type_Info.Tuple*
	%3515 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3514, i64 0, i32 2
	%3516 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 131
	%3517 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 131
	%3518 = getelementptr inbounds %Type_Info*, %Type_Info** %3516, i64 0
	%3519 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3519, %Type_Info** %3518
	%3520 = getelementptr inbounds %..string, %..string* %3517, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3b0, i64 0, i32 0), i64 6}, %..string* %3520
	%3521 = getelementptr inbounds %Type_Info*, %Type_Info** %3516, i64 1
	%3522 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3522, %Type_Info** %3521
	%3523 = getelementptr inbounds %..string, %..string* %3517, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3b1, i64 0, i32 0), i64 6}, %..string* %3523
	%3524 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3515, i64 0, i32 0
	%3525 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3524, i64 0, i32 0
	store %Type_Info** %3516, %Type_Info*** %3525
	%3526 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3524, i64 0, i32 1
	store i64 2, i64* %3526
	%3527 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3524, i64 0, i32 2
	store i64 2, i64* %3527
	%3528 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3515, i64 0, i32 1
	%3529 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3528, i64 0, i32 0
	store %..string* %3517, %..string** %3529
	%3530 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3528, i64 0, i32 1
	store i64 2, i64* %3530
	%3531 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3528, i64 0, i32 2
	store i64 2, i64* %3531
	%3532 = getelementptr inbounds %Type_Info, %Type_Info* %3507, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3532
	%3533 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%3534 = bitcast %Type_Info* %3533 to i8*
	%3535 = getelementptr inbounds i8, i8* %3534, i64 0
	%3536 = bitcast i8* %3535 to i64*
	store i64 8, i64* %3536
	%3537 = bitcast %Type_Info* %3533 to i8*
	%3538 = getelementptr inbounds i8, i8* %3537, i64 8
	%3539 = bitcast i8* %3538 to i64*
	store i64 8, i64* %3539
	; Type_Info_Proc
	%3540 = bitcast %Type_Info* %3533 to %Type_Info.Procedure*
	%3541 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3540, i64 0, i32 2
	%3542 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3540, i64 0, i32 3
	%3543 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3540, i64 0, i32 4
	%3544 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3540, i64 0, i32 5
	%3545 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%3546 = bitcast %Type_Info* %3545 to %Type_Info*
	store %Type_Info* %3546, %Type_Info** %3541
	store i1 false, i1* %3543
	store i64 1, i64* %3544
	%3547 = getelementptr inbounds %Type_Info, %Type_Info* %3533, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3547
	%3548 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%3549 = bitcast %Type_Info* %3548 to i8*
	%3550 = getelementptr inbounds i8, i8* %3549, i64 0
	%3551 = bitcast i8* %3550 to i64*
	store i64 16, i64* %3551
	%3552 = bitcast %Type_Info* %3548 to i8*
	%3553 = getelementptr inbounds i8, i8* %3552, i64 8
	%3554 = bitcast i8* %3553 to i64*
	store i64 8, i64* %3554
	; Type_Info_Tuple
	%3555 = bitcast %Type_Info* %3548 to %Type_Info.Tuple*
	%3556 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3555, i64 0, i32 2
	%3557 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 133
	%3558 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 133
	%3559 = getelementptr inbounds %Type_Info*, %Type_Info** %3557, i64 0
	%3560 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3560, %Type_Info** %3559
	%3561 = getelementptr inbounds %..string, %..string* %3558, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$3b2, i64 0, i32 0), i64 1}, %..string* %3561
	%3562 = getelementptr inbounds %Type_Info*, %Type_Info** %3557, i64 1
	%3563 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	store %Type_Info* %3563, %Type_Info** %3562
	%3564 = getelementptr inbounds %..string, %..string* %3558, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3b3, i64 0, i32 0), i64 6}, %..string* %3564
	%3565 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3556, i64 0, i32 0
	%3566 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3565, i64 0, i32 0
	store %Type_Info** %3557, %Type_Info*** %3566
	%3567 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3565, i64 0, i32 1
	store i64 2, i64* %3567
	%3568 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3565, i64 0, i32 2
	store i64 2, i64* %3568
	%3569 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3556, i64 0, i32 1
	%3570 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3569, i64 0, i32 0
	store %..string* %3558, %..string** %3570
	%3571 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3569, i64 0, i32 1
	store i64 2, i64* %3571
	%3572 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3569, i64 0, i32 2
	store i64 2, i64* %3572
	%3573 = getelementptr inbounds %Type_Info, %Type_Info* %3548, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3573
	%3574 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	%3575 = bitcast %Type_Info* %3574 to i8*
	%3576 = getelementptr inbounds i8, i8* %3575, i64 0
	%3577 = bitcast i8* %3576 to i64*
	store i64 8, i64* %3577
	%3578 = bitcast %Type_Info* %3574 to i8*
	%3579 = getelementptr inbounds i8, i8* %3578, i64 8
	%3580 = bitcast i8* %3579 to i64*
	store i64 8, i64* %3580
	; Type_Info_Pointer
	%3581 = bitcast %Type_Info* %3574 to %Type_Info.Pointer*
	%3582 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%3583 = bitcast %Type_Info* %3582 to %Type_Info*
	%3584 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3581, i64 0, i32 2
	store %Type_Info* %3583, %Type_Info** %3584
	%3585 = getelementptr inbounds %Type_Info, %Type_Info* %3574, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3585
	%3586 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	%3587 = bitcast %Type_Info* %3586 to i8*
	%3588 = getelementptr inbounds i8, i8* %3587, i64 0
	%3589 = bitcast i8* %3588 to i64*
	store i64 8, i64* %3589
	%3590 = bitcast %Type_Info* %3586 to i8*
	%3591 = getelementptr inbounds i8, i8* %3590, i64 8
	%3592 = bitcast i8* %3591 to i64*
	store i64 8, i64* %3592
	; Type_Info_Proc
	%3593 = bitcast %Type_Info* %3586 to %Type_Info.Procedure*
	%3594 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3593, i64 0, i32 2
	%3595 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3593, i64 0, i32 3
	%3596 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3593, i64 0, i32 4
	%3597 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3593, i64 0, i32 5
	%3598 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	%3599 = bitcast %Type_Info* %3598 to %Type_Info*
	store %Type_Info* %3599, %Type_Info** %3594
	store i1 false, i1* %3596
	store i64 1, i64* %3597
	%3600 = getelementptr inbounds %Type_Info, %Type_Info* %3586, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3600
	%3601 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	%3602 = bitcast %Type_Info* %3601 to i8*
	%3603 = getelementptr inbounds i8, i8* %3602, i64 0
	%3604 = bitcast i8* %3603 to i64*
	store i64 32, i64* %3604
	%3605 = bitcast %Type_Info* %3601 to i8*
	%3606 = getelementptr inbounds i8, i8* %3605, i64 8
	%3607 = bitcast i8* %3606 to i64*
	store i64 8, i64* %3607
	; Type_Info_Tuple
	%3608 = bitcast %Type_Info* %3601 to %Type_Info.Tuple*
	%3609 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3608, i64 0, i32 2
	%3610 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 135
	%3611 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 135
	%3612 = getelementptr inbounds %Type_Info*, %Type_Info** %3610, i64 0
	%3613 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3613, %Type_Info** %3612
	%3614 = getelementptr inbounds %..string, %..string* %3611, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3b4, i64 0, i32 0), i64 6}, %..string* %3614
	%3615 = getelementptr inbounds %Type_Info*, %Type_Info** %3610, i64 1
	%3616 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3616, %Type_Info** %3615
	%3617 = getelementptr inbounds %..string, %..string* %3611, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3b5, i64 0, i32 0), i64 4}, %..string* %3617
	%3618 = getelementptr inbounds %Type_Info*, %Type_Info** %3610, i64 2
	%3619 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3619, %Type_Info** %3618
	%3620 = getelementptr inbounds %..string, %..string* %3611, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$3b6, i64 0, i32 0), i64 8}, %..string* %3620
	%3621 = getelementptr inbounds %Type_Info*, %Type_Info** %3610, i64 3
	%3622 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3622, %Type_Info** %3621
	%3623 = getelementptr inbounds %..string, %..string* %3611, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3b7, i64 0, i32 0), i64 5}, %..string* %3623
	%3624 = getelementptr inbounds %Type_Info*, %Type_Info** %3610, i64 4
	%3625 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	store %Type_Info* %3625, %Type_Info** %3624
	%3626 = getelementptr inbounds %..string, %..string* %3611, i64 4
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3b8, i64 0, i32 0), i64 3}, %..string* %3626
	%3627 = getelementptr inbounds %Type_Info*, %Type_Info** %3610, i64 5
	%3628 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %3628, %Type_Info** %3627
	%3629 = getelementptr inbounds %..string, %..string* %3611, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3b9, i64 0, i32 0), i64 7}, %..string* %3629
	%3630 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3609, i64 0, i32 0
	%3631 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3630, i64 0, i32 0
	store %Type_Info** %3610, %Type_Info*** %3631
	%3632 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3630, i64 0, i32 1
	store i64 6, i64* %3632
	%3633 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3630, i64 0, i32 2
	store i64 6, i64* %3633
	%3634 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3609, i64 0, i32 1
	%3635 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3634, i64 0, i32 0
	store %..string* %3611, %..string** %3635
	%3636 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3634, i64 0, i32 1
	store i64 6, i64* %3636
	%3637 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3634, i64 0, i32 2
	store i64 6, i64* %3637
	%3638 = getelementptr inbounds %Type_Info, %Type_Info* %3601, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3638
	%3639 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	%3640 = bitcast %Type_Info* %3639 to i8*
	%3641 = getelementptr inbounds i8, i8* %3640, i64 0
	%3642 = bitcast i8* %3641 to i64*
	store i64 8, i64* %3642
	%3643 = bitcast %Type_Info* %3639 to i8*
	%3644 = getelementptr inbounds i8, i8* %3643, i64 8
	%3645 = bitcast i8* %3644 to i64*
	store i64 8, i64* %3645
	; Type_Info_Pointer
	%3646 = bitcast %Type_Info* %3639 to %Type_Info.Pointer*
	%3647 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%3648 = bitcast %Type_Info* %3647 to %Type_Info*
	%3649 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3646, i64 0, i32 2
	store %Type_Info* %3648, %Type_Info** %3649
	%3650 = getelementptr inbounds %Type_Info, %Type_Info* %3639, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3650
	%3651 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 117
	%3652 = bitcast %Type_Info* %3651 to i8*
	%3653 = getelementptr inbounds i8, i8* %3652, i64 0
	%3654 = bitcast i8* %3653 to i64*
	store i64 8, i64* %3654
	%3655 = bitcast %Type_Info* %3651 to i8*
	%3656 = getelementptr inbounds i8, i8* %3655, i64 8
	%3657 = bitcast i8* %3656 to i64*
	store i64 8, i64* %3657
	; Type_Info_Proc
	%3658 = bitcast %Type_Info* %3651 to %Type_Info.Procedure*
	%3659 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3658, i64 0, i32 2
	%3660 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3658, i64 0, i32 3
	%3661 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3658, i64 0, i32 4
	%3662 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3658, i64 0, i32 5
	%3663 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 118
	%3664 = bitcast %Type_Info* %3663 to %Type_Info*
	store %Type_Info* %3664, %Type_Info** %3659
	store i1 false, i1* %3661
	store i64 1, i64* %3662
	%3665 = getelementptr inbounds %Type_Info, %Type_Info* %3651, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3665
	%3666 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 118
	%3667 = bitcast %Type_Info* %3666 to i8*
	%3668 = getelementptr inbounds i8, i8* %3667, i64 0
	%3669 = bitcast i8* %3668 to i64*
	store i64 16, i64* %3669
	%3670 = bitcast %Type_Info* %3666 to i8*
	%3671 = getelementptr inbounds i8, i8* %3670, i64 8
	%3672 = bitcast i8* %3671 to i64*
	store i64 8, i64* %3672
	; Type_Info_Tuple
	%3673 = bitcast %Type_Info* %3666 to %Type_Info.Tuple*
	%3674 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3673, i64 0, i32 2
	%3675 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 141
	%3676 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 141
	%3677 = getelementptr inbounds %Type_Info*, %Type_Info** %3675, i64 0
	%3678 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 119
	store %Type_Info* %3678, %Type_Info** %3677
	%3679 = getelementptr inbounds %..string, %..string* %3676, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$3ba, i64 0, i32 0), i64 8}, %..string* %3679
	%3680 = getelementptr inbounds %Type_Info*, %Type_Info** %3675, i64 1
	%3681 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %3681, %Type_Info** %3680
	%3682 = getelementptr inbounds %..string, %..string* %3676, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$3bb, i64 0, i32 0), i64 9}, %..string* %3682
	%3683 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3674, i64 0, i32 0
	%3684 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3683, i64 0, i32 0
	store %Type_Info** %3675, %Type_Info*** %3684
	%3685 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3683, i64 0, i32 1
	store i64 2, i64* %3685
	%3686 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3683, i64 0, i32 2
	store i64 2, i64* %3686
	%3687 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3674, i64 0, i32 1
	%3688 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3687, i64 0, i32 0
	store %..string* %3676, %..string** %3688
	%3689 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3687, i64 0, i32 1
	store i64 2, i64* %3689
	%3690 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3687, i64 0, i32 2
	store i64 2, i64* %3690
	%3691 = getelementptr inbounds %Type_Info, %Type_Info* %3666, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3691
	%3692 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 119
	%3693 = bitcast %Type_Info* %3692 to i8*
	%3694 = getelementptr inbounds i8, i8* %3693, i64 0
	%3695 = bitcast i8* %3694 to i64*
	store i64 8, i64* %3695
	%3696 = bitcast %Type_Info* %3692 to i8*
	%3697 = getelementptr inbounds i8, i8* %3696, i64 8
	%3698 = bitcast i8* %3697 to i64*
	store i64 8, i64* %3698
	; Type_Info_Named
	%3699 = bitcast %Type_Info* %3692 to %Type_Info.Named*
	%3700 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 120
	%3701 = bitcast %Type_Info* %3700 to %Type_Info*
	%3702 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3699, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$3bc, i64 0, i32 0), i64 24}, %..string* %3702
	%3703 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3699, i64 0, i32 3
	store %Type_Info* %3701, %Type_Info** %3703
	%3704 = getelementptr inbounds %Type_Info, %Type_Info* %3692, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3704
	%3705 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 120
	%3706 = bitcast %Type_Info* %3705 to i8*
	%3707 = getelementptr inbounds i8, i8* %3706, i64 0
	%3708 = bitcast i8* %3707 to i64*
	store i64 8, i64* %3708
	%3709 = bitcast %Type_Info* %3705 to i8*
	%3710 = getelementptr inbounds i8, i8* %3709, i64 8
	%3711 = bitcast i8* %3710 to i64*
	store i64 8, i64* %3711
	; Type_Info_Proc
	%3712 = bitcast %Type_Info* %3705 to %Type_Info.Procedure*
	%3713 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3712, i64 0, i32 2
	%3714 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3712, i64 0, i32 3
	%3715 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3712, i64 0, i32 4
	%3716 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3712, i64 0, i32 5
	%3717 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 121
	%3718 = bitcast %Type_Info* %3717 to %Type_Info*
	store %Type_Info* %3718, %Type_Info** %3713
	store i1 false, i1* %3715
	store i64 1, i64* %3716
	%3719 = getelementptr inbounds %Type_Info, %Type_Info* %3705, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3719
	%3720 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 121
	%3721 = bitcast %Type_Info* %3720 to i8*
	%3722 = getelementptr inbounds i8, i8* %3721, i64 0
	%3723 = bitcast i8* %3722 to i64*
	store i64 56, i64* %3723
	%3724 = bitcast %Type_Info* %3720 to i8*
	%3725 = getelementptr inbounds i8, i8* %3724, i64 8
	%3726 = bitcast i8* %3725 to i64*
	store i64 8, i64* %3726
	; Type_Info_Tuple
	%3727 = bitcast %Type_Info* %3720 to %Type_Info.Tuple*
	%3728 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3727, i64 0, i32 2
	%3729 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 143
	%3730 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 143
	%3731 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 0
	%3732 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	store %Type_Info* %3732, %Type_Info** %3731
	%3733 = getelementptr inbounds %..string, %..string* %3730, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3bd, i64 0, i32 0), i64 6}, %..string* %3733
	%3734 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 1
	%3735 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	store %Type_Info* %3735, %Type_Info** %3734
	%3736 = getelementptr inbounds %..string, %..string* %3730, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3be, i64 0, i32 0), i64 4}, %..string* %3736
	%3737 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 2
	%3738 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3738, %Type_Info** %3737
	%3739 = getelementptr inbounds %..string, %..string* %3730, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3bf, i64 0, i32 0), i64 2}, %..string* %3739
	%3740 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 3
	%3741 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	store %Type_Info* %3741, %Type_Info** %3740
	%3742 = getelementptr inbounds %..string, %..string* %3730, i64 3
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$3c0, i64 0, i32 0), i64 8}, %..string* %3742
	%3743 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 4
	%3744 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3744, %Type_Info** %3743
	%3745 = getelementptr inbounds %..string, %..string* %3730, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3c1, i64 0, i32 0), i64 6}, %..string* %3745
	%3746 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 5
	%3747 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %3747, %Type_Info** %3746
	%3748 = getelementptr inbounds %..string, %..string* %3730, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3c2, i64 0, i32 0), i64 7}, %..string* %3748
	%3749 = getelementptr inbounds %Type_Info*, %Type_Info** %3729, i64 6
	%3750 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %3750, %Type_Info** %3749
	%3751 = getelementptr inbounds %..string, %..string* %3730, i64 6
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$3c3, i64 0, i32 0), i64 9}, %..string* %3751
	%3752 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3728, i64 0, i32 0
	%3753 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3752, i64 0, i32 0
	store %Type_Info** %3729, %Type_Info*** %3753
	%3754 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3752, i64 0, i32 1
	store i64 7, i64* %3754
	%3755 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3752, i64 0, i32 2
	store i64 7, i64* %3755
	%3756 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3728, i64 0, i32 1
	%3757 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3756, i64 0, i32 0
	store %..string* %3730, %..string** %3757
	%3758 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3756, i64 0, i32 1
	store i64 7, i64* %3758
	%3759 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3756, i64 0, i32 2
	store i64 7, i64* %3759
	%3760 = getelementptr inbounds %Type_Info, %Type_Info* %3720, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3760
	%3761 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%3762 = bitcast %Type_Info* %3761 to i8*
	%3763 = getelementptr inbounds i8, i8* %3762, i64 0
	%3764 = bitcast i8* %3763 to i64*
	store i64 8, i64* %3764
	%3765 = bitcast %Type_Info* %3761 to i8*
	%3766 = getelementptr inbounds i8, i8* %3765, i64 8
	%3767 = bitcast i8* %3766 to i64*
	store i64 8, i64* %3767
	; Type_Info_Pointer
	%3768 = bitcast %Type_Info* %3761 to %Type_Info.Pointer*
	%3769 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%3770 = bitcast %Type_Info* %3769 to %Type_Info*
	%3771 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3768, i64 0, i32 2
	store %Type_Info* %3770, %Type_Info** %3771
	%3772 = getelementptr inbounds %Type_Info, %Type_Info* %3761, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3772
	%3773 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%3774 = bitcast %Type_Info* %3773 to i8*
	%3775 = getelementptr inbounds i8, i8* %3774, i64 0
	%3776 = bitcast i8* %3775 to i64*
	store i64 1, i64* %3776
	%3777 = bitcast %Type_Info* %3773 to i8*
	%3778 = getelementptr inbounds i8, i8* %3777, i64 8
	%3779 = bitcast i8* %3778 to i64*
	store i64 1, i64* %3779
	; Type_Info_Basic
	%3780 = bitcast %Type_Info* %3773 to %Type_Info.Integer*
	%3781 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %3780, i64 0, i32 2
	store i1 false, i1* %3781
	%3782 = getelementptr inbounds %Type_Info, %Type_Info* %3773, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %3782
	%3783 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 122
	%3784 = bitcast %Type_Info* %3783 to i8*
	%3785 = getelementptr inbounds i8, i8* %3784, i64 0
	%3786 = bitcast i8* %3785 to i64*
	store i64 8, i64* %3786
	%3787 = bitcast %Type_Info* %3783 to i8*
	%3788 = getelementptr inbounds i8, i8* %3787, i64 8
	%3789 = bitcast i8* %3788 to i64*
	store i64 8, i64* %3789
	; Type_Info_Proc
	%3790 = bitcast %Type_Info* %3783 to %Type_Info.Procedure*
	%3791 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3790, i64 0, i32 2
	%3792 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3790, i64 0, i32 3
	%3793 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3790, i64 0, i32 4
	%3794 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3790, i64 0, i32 5
	%3795 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 123
	%3796 = bitcast %Type_Info* %3795 to %Type_Info*
	store %Type_Info* %3796, %Type_Info** %3791
	store i1 false, i1* %3793
	store i64 1, i64* %3794
	%3797 = getelementptr inbounds %Type_Info, %Type_Info* %3783, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3797
	%3798 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 123
	%3799 = bitcast %Type_Info* %3798 to i8*
	%3800 = getelementptr inbounds i8, i8* %3799, i64 0
	%3801 = bitcast i8* %3800 to i64*
	store i64 16, i64* %3801
	%3802 = bitcast %Type_Info* %3798 to i8*
	%3803 = getelementptr inbounds i8, i8* %3802, i64 8
	%3804 = bitcast i8* %3803 to i64*
	store i64 8, i64* %3804
	; Type_Info_Tuple
	%3805 = bitcast %Type_Info* %3798 to %Type_Info.Tuple*
	%3806 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3805, i64 0, i32 2
	%3807 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 150
	%3808 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 150
	%3809 = getelementptr inbounds %Type_Info*, %Type_Info** %3807, i64 0
	%3810 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3810, %Type_Info** %3809
	%3811 = getelementptr inbounds %..string, %..string* %3808, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3c4, i64 0, i32 0), i64 6}, %..string* %3811
	%3812 = getelementptr inbounds %Type_Info*, %Type_Info** %3807, i64 1
	%3813 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3813, %Type_Info** %3812
	%3814 = getelementptr inbounds %..string, %..string* %3808, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3c5, i64 0, i32 0), i64 5}, %..string* %3814
	%3815 = getelementptr inbounds %Type_Info*, %Type_Info** %3807, i64 2
	%3816 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	store %Type_Info* %3816, %Type_Info** %3815
	%3817 = getelementptr inbounds %..string, %..string* %3808, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3c6, i64 0, i32 0), i64 6}, %..string* %3817
	%3818 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3806, i64 0, i32 0
	%3819 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3818, i64 0, i32 0
	store %Type_Info** %3807, %Type_Info*** %3819
	%3820 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3818, i64 0, i32 1
	store i64 3, i64* %3820
	%3821 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3818, i64 0, i32 2
	store i64 3, i64* %3821
	%3822 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3806, i64 0, i32 1
	%3823 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3822, i64 0, i32 0
	store %..string* %3808, %..string** %3823
	%3824 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3822, i64 0, i32 1
	store i64 3, i64* %3824
	%3825 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3822, i64 0, i32 2
	store i64 3, i64* %3825
	%3826 = getelementptr inbounds %Type_Info, %Type_Info* %3798, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3826
	%3827 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	%3828 = bitcast %Type_Info* %3827 to i8*
	%3829 = getelementptr inbounds i8, i8* %3828, i64 0
	%3830 = bitcast i8* %3829 to i64*
	store i64 8, i64* %3830
	%3831 = bitcast %Type_Info* %3827 to i8*
	%3832 = getelementptr inbounds i8, i8* %3831, i64 8
	%3833 = bitcast i8* %3832 to i64*
	store i64 8, i64* %3833
	; Type_Info_Pointer
	%3834 = bitcast %Type_Info* %3827 to %Type_Info.Pointer*
	%3835 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%3836 = bitcast %Type_Info* %3835 to %Type_Info*
	%3837 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3834, i64 0, i32 2
	store %Type_Info* %3836, %Type_Info** %3837
	%3838 = getelementptr inbounds %Type_Info, %Type_Info* %3827, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3838
	%3839 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 125
	%3840 = bitcast %Type_Info* %3839 to i8*
	%3841 = getelementptr inbounds i8, i8* %3840, i64 0
	%3842 = bitcast i8* %3841 to i64*
	store i64 8, i64* %3842
	%3843 = bitcast %Type_Info* %3839 to i8*
	%3844 = getelementptr inbounds i8, i8* %3843, i64 8
	%3845 = bitcast i8* %3844 to i64*
	store i64 8, i64* %3845
	; Type_Info_Proc
	%3846 = bitcast %Type_Info* %3839 to %Type_Info.Procedure*
	%3847 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3846, i64 0, i32 2
	%3848 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3846, i64 0, i32 3
	%3849 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3846, i64 0, i32 4
	%3850 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3846, i64 0, i32 5
	%3851 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 126
	%3852 = bitcast %Type_Info* %3851 to %Type_Info*
	store %Type_Info* %3852, %Type_Info** %3847
	store i1 false, i1* %3849
	store i64 1, i64* %3850
	%3853 = getelementptr inbounds %Type_Info, %Type_Info* %3839, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3853
	%3854 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 126
	%3855 = bitcast %Type_Info* %3854 to i8*
	%3856 = getelementptr inbounds i8, i8* %3855, i64 0
	%3857 = bitcast i8* %3856 to i64*
	store i64 24, i64* %3857
	%3858 = bitcast %Type_Info* %3854 to i8*
	%3859 = getelementptr inbounds i8, i8* %3858, i64 8
	%3860 = bitcast i8* %3859 to i64*
	store i64 8, i64* %3860
	; Type_Info_Tuple
	%3861 = bitcast %Type_Info* %3854 to %Type_Info.Tuple*
	%3862 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3861, i64 0, i32 2
	%3863 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 153
	%3864 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 153
	%3865 = getelementptr inbounds %Type_Info*, %Type_Info** %3863, i64 0
	%3866 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3866, %Type_Info** %3865
	%3867 = getelementptr inbounds %..string, %..string* %3864, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3c7, i64 0, i32 0), i64 6}, %..string* %3867
	%3868 = getelementptr inbounds %Type_Info*, %Type_Info** %3863, i64 1
	%3869 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3869, %Type_Info** %3868
	%3870 = getelementptr inbounds %..string, %..string* %3864, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$3c8, i64 0, i32 0), i64 9}, %..string* %3870
	%3871 = getelementptr inbounds %Type_Info*, %Type_Info** %3863, i64 2
	%3872 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	store %Type_Info* %3872, %Type_Info** %3871
	%3873 = getelementptr inbounds %..string, %..string* %3864, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3c9, i64 0, i32 0), i64 6}, %..string* %3873
	%3874 = getelementptr inbounds %Type_Info*, %Type_Info** %3863, i64 3
	%3875 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %3875, %Type_Info** %3874
	%3876 = getelementptr inbounds %..string, %..string* %3864, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3ca, i64 0, i32 0), i64 7}, %..string* %3876
	%3877 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3862, i64 0, i32 0
	%3878 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3877, i64 0, i32 0
	store %Type_Info** %3863, %Type_Info*** %3878
	%3879 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3877, i64 0, i32 1
	store i64 4, i64* %3879
	%3880 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3877, i64 0, i32 2
	store i64 4, i64* %3880
	%3881 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3862, i64 0, i32 1
	%3882 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3881, i64 0, i32 0
	store %..string* %3864, %..string** %3882
	%3883 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3881, i64 0, i32 1
	store i64 4, i64* %3883
	%3884 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3881, i64 0, i32 2
	store i64 4, i64* %3884
	%3885 = getelementptr inbounds %Type_Info, %Type_Info* %3854, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3885
	%3886 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	%3887 = bitcast %Type_Info* %3886 to i8*
	%3888 = getelementptr inbounds i8, i8* %3887, i64 0
	%3889 = bitcast i8* %3888 to i64*
	store i64 8, i64* %3889
	%3890 = bitcast %Type_Info* %3886 to i8*
	%3891 = getelementptr inbounds i8, i8* %3890, i64 8
	%3892 = bitcast i8* %3891 to i64*
	store i64 8, i64* %3892
	; Type_Info_Pointer
	%3893 = bitcast %Type_Info* %3886 to %Type_Info.Pointer*
	%3894 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%3895 = bitcast %Type_Info* %3894 to %Type_Info*
	%3896 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3893, i64 0, i32 2
	store %Type_Info* %3895, %Type_Info** %3896
	%3897 = getelementptr inbounds %Type_Info, %Type_Info* %3886, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3897
	%3898 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%3899 = bitcast %Type_Info* %3898 to i8*
	%3900 = getelementptr inbounds i8, i8* %3899, i64 0
	%3901 = bitcast i8* %3900 to i64*
	store i64 8, i64* %3901
	%3902 = bitcast %Type_Info* %3898 to i8*
	%3903 = getelementptr inbounds i8, i8* %3902, i64 8
	%3904 = bitcast i8* %3903 to i64*
	store i64 8, i64* %3904
	; Type_Info_Pointer
	%3905 = bitcast %Type_Info* %3898 to %Type_Info.Pointer*
	%3906 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%3907 = bitcast %Type_Info* %3906 to %Type_Info*
	%3908 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3905, i64 0, i32 2
	store %Type_Info* %3907, %Type_Info** %3908
	%3909 = getelementptr inbounds %Type_Info, %Type_Info* %3898, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3909
	%3910 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 127
	%3911 = bitcast %Type_Info* %3910 to i8*
	%3912 = getelementptr inbounds i8, i8* %3911, i64 0
	%3913 = bitcast i8* %3912 to i64*
	store i64 8, i64* %3913
	%3914 = bitcast %Type_Info* %3910 to i8*
	%3915 = getelementptr inbounds i8, i8* %3914, i64 8
	%3916 = bitcast i8* %3915 to i64*
	store i64 8, i64* %3916
	; Type_Info_Proc
	%3917 = bitcast %Type_Info* %3910 to %Type_Info.Procedure*
	%3918 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3917, i64 0, i32 2
	%3919 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3917, i64 0, i32 3
	%3920 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3917, i64 0, i32 4
	%3921 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3917, i64 0, i32 5
	%3922 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%3923 = bitcast %Type_Info* %3922 to %Type_Info*
	store %Type_Info* %3923, %Type_Info** %3918
	%3924 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 128
	%3925 = bitcast %Type_Info* %3924 to %Type_Info*
	store %Type_Info* %3925, %Type_Info** %3919
	store i1 false, i1* %3920
	store i64 1, i64* %3921
	%3926 = getelementptr inbounds %Type_Info, %Type_Info* %3910, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3926
	%3927 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%3928 = bitcast %Type_Info* %3927 to i8*
	%3929 = getelementptr inbounds i8, i8* %3928, i64 0
	%3930 = bitcast i8* %3929 to i64*
	store i64 8, i64* %3930
	%3931 = bitcast %Type_Info* %3927 to i8*
	%3932 = getelementptr inbounds i8, i8* %3931, i64 8
	%3933 = bitcast i8* %3932 to i64*
	store i64 4, i64* %3933
	; Type_Info_Tuple
	%3934 = bitcast %Type_Info* %3927 to %Type_Info.Tuple*
	%3935 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3934, i64 0, i32 2
	%3936 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 157
	%3937 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 157
	%3938 = getelementptr inbounds %Type_Info*, %Type_Info** %3936, i64 0
	%3939 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3939, %Type_Info** %3938
	%3940 = getelementptr inbounds %..string, %..string* %3937, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3cb, i64 0, i32 0), i64 4}, %..string* %3940
	%3941 = getelementptr inbounds %Type_Info*, %Type_Info** %3936, i64 1
	%3942 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %3942, %Type_Info** %3941
	%3943 = getelementptr inbounds %..string, %..string* %3937, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3cc, i64 0, i32 0), i64 5}, %..string* %3943
	%3944 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3935, i64 0, i32 0
	%3945 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3944, i64 0, i32 0
	store %Type_Info** %3936, %Type_Info*** %3945
	%3946 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3944, i64 0, i32 1
	store i64 2, i64* %3946
	%3947 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3944, i64 0, i32 2
	store i64 2, i64* %3947
	%3948 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3935, i64 0, i32 1
	%3949 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3948, i64 0, i32 0
	store %..string* %3937, %..string** %3949
	%3950 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3948, i64 0, i32 1
	store i64 2, i64* %3950
	%3951 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3948, i64 0, i32 2
	store i64 2, i64* %3951
	%3952 = getelementptr inbounds %Type_Info, %Type_Info* %3927, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3952
	%3953 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 128
	%3954 = bitcast %Type_Info* %3953 to i8*
	%3955 = getelementptr inbounds i8, i8* %3954, i64 0
	%3956 = bitcast i8* %3955 to i64*
	store i64 8, i64* %3956
	%3957 = bitcast %Type_Info* %3953 to i8*
	%3958 = getelementptr inbounds i8, i8* %3957, i64 8
	%3959 = bitcast i8* %3958 to i64*
	store i64 8, i64* %3959
	; Type_Info_Tuple
	%3960 = bitcast %Type_Info* %3953 to %Type_Info.Tuple*
	%3961 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3960, i64 0, i32 2
	%3962 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 159
	%3963 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 159
	%3964 = getelementptr inbounds %Type_Info*, %Type_Info** %3962, i64 0
	%3965 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %3965, %Type_Info** %3964
	%3966 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3961, i64 0, i32 0
	%3967 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3966, i64 0, i32 0
	store %Type_Info** %3962, %Type_Info*** %3967
	%3968 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3966, i64 0, i32 1
	store i64 1, i64* %3968
	%3969 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3966, i64 0, i32 2
	store i64 1, i64* %3969
	%3970 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3961, i64 0, i32 1
	%3971 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3970, i64 0, i32 0
	store %..string* %3963, %..string** %3971
	%3972 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3970, i64 0, i32 1
	store i64 1, i64* %3972
	%3973 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3970, i64 0, i32 2
	store i64 1, i64* %3973
	%3974 = getelementptr inbounds %Type_Info, %Type_Info* %3953, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3974
	%3975 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%3976 = bitcast %Type_Info* %3975 to i8*
	%3977 = getelementptr inbounds i8, i8* %3976, i64 0
	%3978 = bitcast i8* %3977 to i64*
	store i64 8, i64* %3978
	%3979 = bitcast %Type_Info* %3975 to i8*
	%3980 = getelementptr inbounds i8, i8* %3979, i64 8
	%3981 = bitcast i8* %3980 to i64*
	store i64 8, i64* %3981
	; Type_Info_Pointer
	%3982 = bitcast %Type_Info* %3975 to %Type_Info.Pointer*
	%3983 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%3984 = bitcast %Type_Info* %3983 to %Type_Info*
	%3985 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3982, i64 0, i32 2
	store %Type_Info* %3984, %Type_Info** %3985
	%3986 = getelementptr inbounds %Type_Info, %Type_Info* %3975, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3986
	%3987 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	%3988 = bitcast %Type_Info* %3987 to i8*
	%3989 = getelementptr inbounds i8, i8* %3988, i64 0
	%3990 = bitcast i8* %3989 to i64*
	store i64 8, i64* %3990
	%3991 = bitcast %Type_Info* %3987 to i8*
	%3992 = getelementptr inbounds i8, i8* %3991, i64 8
	%3993 = bitcast i8* %3992 to i64*
	store i64 8, i64* %3993
	; Type_Info_Proc
	%3994 = bitcast %Type_Info* %3987 to %Type_Info.Procedure*
	%3995 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3994, i64 0, i32 2
	%3996 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3994, i64 0, i32 3
	%3997 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3994, i64 0, i32 4
	%3998 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3994, i64 0, i32 5
	%3999 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4000 = bitcast %Type_Info* %3999 to %Type_Info*
	store %Type_Info* %4000, %Type_Info** %3995
	store i1 false, i1* %3997
	store i64 1, i64* %3998
	%4001 = getelementptr inbounds %Type_Info, %Type_Info* %3987, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4001
	%4002 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4003 = bitcast %Type_Info* %4002 to i8*
	%4004 = getelementptr inbounds i8, i8* %4003, i64 0
	%4005 = bitcast i8* %4004 to i64*
	store i64 4, i64* %4005
	%4006 = bitcast %Type_Info* %4002 to i8*
	%4007 = getelementptr inbounds i8, i8* %4006, i64 8
	%4008 = bitcast i8* %4007 to i64*
	store i64 4, i64* %4008
	; Type_Info_Tuple
	%4009 = bitcast %Type_Info* %4002 to %Type_Info.Tuple*
	%4010 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4009, i64 0, i32 2
	%4011 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 160
	%4012 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 160
	%4013 = getelementptr inbounds %Type_Info*, %Type_Info** %4011, i64 0
	%4014 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4014, %Type_Info** %4013
	%4015 = getelementptr inbounds %..string, %..string* %4012, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3cd, i64 0, i32 0), i64 4}, %..string* %4015
	%4016 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4010, i64 0, i32 0
	%4017 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4016, i64 0, i32 0
	store %Type_Info** %4011, %Type_Info*** %4017
	%4018 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4016, i64 0, i32 1
	store i64 1, i64* %4018
	%4019 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4016, i64 0, i32 2
	store i64 1, i64* %4019
	%4020 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4010, i64 0, i32 1
	%4021 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4020, i64 0, i32 0
	store %..string* %4012, %..string** %4021
	%4022 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4020, i64 0, i32 1
	store i64 1, i64* %4022
	%4023 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4020, i64 0, i32 2
	store i64 1, i64* %4023
	%4024 = getelementptr inbounds %Type_Info, %Type_Info* %4002, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4024
	%4025 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%4026 = bitcast %Type_Info* %4025 to i8*
	%4027 = getelementptr inbounds i8, i8* %4026, i64 0
	%4028 = bitcast i8* %4027 to i64*
	store i64 8, i64* %4028
	%4029 = bitcast %Type_Info* %4025 to i8*
	%4030 = getelementptr inbounds i8, i8* %4029, i64 8
	%4031 = bitcast i8* %4030 to i64*
	store i64 8, i64* %4031
	; Type_Info_Proc
	%4032 = bitcast %Type_Info* %4025 to %Type_Info.Procedure*
	%4033 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4032, i64 0, i32 2
	%4034 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4032, i64 0, i32 3
	%4035 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4032, i64 0, i32 4
	%4036 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4032, i64 0, i32 5
	%4037 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%4038 = bitcast %Type_Info* %4037 to %Type_Info*
	store %Type_Info* %4038, %Type_Info** %4033
	store i1 false, i1* %4035
	store i64 1, i64* %4036
	%4039 = getelementptr inbounds %Type_Info, %Type_Info* %4025, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4039
	%4040 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%4041 = bitcast %Type_Info* %4040 to i8*
	%4042 = getelementptr inbounds i8, i8* %4041, i64 0
	%4043 = bitcast i8* %4042 to i64*
	store i64 8, i64* %4043
	%4044 = bitcast %Type_Info* %4040 to i8*
	%4045 = getelementptr inbounds i8, i8* %4044, i64 8
	%4046 = bitcast i8* %4045 to i64*
	store i64 4, i64* %4046
	; Type_Info_Tuple
	%4047 = bitcast %Type_Info* %4040 to %Type_Info.Tuple*
	%4048 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4047, i64 0, i32 2
	%4049 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 161
	%4050 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 161
	%4051 = getelementptr inbounds %Type_Info*, %Type_Info** %4049, i64 0
	%4052 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4052, %Type_Info** %4051
	%4053 = getelementptr inbounds %..string, %..string* %4050, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3ce, i64 0, i32 0), i64 7}, %..string* %4053
	%4054 = getelementptr inbounds %Type_Info*, %Type_Info** %4049, i64 1
	%4055 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4055, %Type_Info** %4054
	%4056 = getelementptr inbounds %..string, %..string* %4050, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$3cf, i64 0, i32 0), i64 9}, %..string* %4056
	%4057 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4048, i64 0, i32 0
	%4058 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4057, i64 0, i32 0
	store %Type_Info** %4049, %Type_Info*** %4058
	%4059 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4057, i64 0, i32 1
	store i64 2, i64* %4059
	%4060 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4057, i64 0, i32 2
	store i64 2, i64* %4060
	%4061 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4048, i64 0, i32 1
	%4062 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4061, i64 0, i32 0
	store %..string* %4050, %..string** %4062
	%4063 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4061, i64 0, i32 1
	store i64 2, i64* %4063
	%4064 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4061, i64 0, i32 2
	store i64 2, i64* %4064
	%4065 = getelementptr inbounds %Type_Info, %Type_Info* %4040, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4065
	%4066 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%4067 = bitcast %Type_Info* %4066 to i8*
	%4068 = getelementptr inbounds i8, i8* %4067, i64 0
	%4069 = bitcast i8* %4068 to i64*
	store i64 8, i64* %4069
	%4070 = bitcast %Type_Info* %4066 to i8*
	%4071 = getelementptr inbounds i8, i8* %4070, i64 8
	%4072 = bitcast i8* %4071 to i64*
	store i64 8, i64* %4072
	; Type_Info_Proc
	%4073 = bitcast %Type_Info* %4066 to %Type_Info.Procedure*
	%4074 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4073, i64 0, i32 2
	%4075 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4073, i64 0, i32 3
	%4076 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4073, i64 0, i32 4
	%4077 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4073, i64 0, i32 5
	%4078 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4079 = bitcast %Type_Info* %4078 to %Type_Info*
	store %Type_Info* %4079, %Type_Info** %4074
	store i1 false, i1* %4076
	store i64 1, i64* %4077
	%4080 = getelementptr inbounds %Type_Info, %Type_Info* %4066, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4080
	%4081 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4082 = bitcast %Type_Info* %4081 to i8*
	%4083 = getelementptr inbounds i8, i8* %4082, i64 0
	%4084 = bitcast i8* %4083 to i64*
	store i64 4, i64* %4084
	%4085 = bitcast %Type_Info* %4081 to i8*
	%4086 = getelementptr inbounds i8, i8* %4085, i64 8
	%4087 = bitcast i8* %4086 to i64*
	store i64 4, i64* %4087
	; Type_Info_Tuple
	%4088 = bitcast %Type_Info* %4081 to %Type_Info.Tuple*
	%4089 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4088, i64 0, i32 2
	%4090 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 163
	%4091 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 163
	%4092 = getelementptr inbounds %Type_Info*, %Type_Info** %4090, i64 0
	%4093 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4093, %Type_Info** %4092
	%4094 = getelementptr inbounds %..string, %..string* %4091, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3d0, i64 0, i32 0), i64 6}, %..string* %4094
	%4095 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4089, i64 0, i32 0
	%4096 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4095, i64 0, i32 0
	store %Type_Info** %4090, %Type_Info*** %4096
	%4097 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4095, i64 0, i32 1
	store i64 1, i64* %4097
	%4098 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4095, i64 0, i32 2
	store i64 1, i64* %4098
	%4099 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4089, i64 0, i32 1
	%4100 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4099, i64 0, i32 0
	store %..string* %4091, %..string** %4100
	%4101 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4099, i64 0, i32 1
	store i64 1, i64* %4101
	%4102 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4099, i64 0, i32 2
	store i64 1, i64* %4102
	%4103 = getelementptr inbounds %Type_Info, %Type_Info* %4081, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4103
	%4104 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 133
	%4105 = bitcast %Type_Info* %4104 to i8*
	%4106 = getelementptr inbounds i8, i8* %4105, i64 0
	%4107 = bitcast i8* %4106 to i64*
	store i64 8, i64* %4107
	%4108 = bitcast %Type_Info* %4104 to i8*
	%4109 = getelementptr inbounds i8, i8* %4108, i64 8
	%4110 = bitcast i8* %4109 to i64*
	store i64 8, i64* %4110
	; Type_Info_Proc
	%4111 = bitcast %Type_Info* %4104 to %Type_Info.Procedure*
	%4112 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4111, i64 0, i32 2
	%4113 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4111, i64 0, i32 3
	%4114 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4111, i64 0, i32 4
	%4115 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4111, i64 0, i32 5
	%4116 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4117 = bitcast %Type_Info* %4116 to %Type_Info*
	store %Type_Info* %4117, %Type_Info** %4112
	%4118 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4119 = bitcast %Type_Info* %4118 to %Type_Info*
	store %Type_Info* %4119, %Type_Info** %4113
	store i1 false, i1* %4114
	store i64 1, i64* %4115
	%4120 = getelementptr inbounds %Type_Info, %Type_Info* %4104, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4120
	%4121 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4122 = bitcast %Type_Info* %4121 to i8*
	%4123 = getelementptr inbounds i8, i8* %4122, i64 0
	%4124 = bitcast i8* %4123 to i64*
	store i64 4, i64* %4124
	%4125 = bitcast %Type_Info* %4121 to i8*
	%4126 = getelementptr inbounds i8, i8* %4125, i64 8
	%4127 = bitcast i8* %4126 to i64*
	store i64 4, i64* %4127
	; Type_Info_Tuple
	%4128 = bitcast %Type_Info* %4121 to %Type_Info.Tuple*
	%4129 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4128, i64 0, i32 2
	%4130 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 164
	%4131 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 164
	%4132 = getelementptr inbounds %Type_Info*, %Type_Info** %4130, i64 0
	%4133 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4133, %Type_Info** %4132
	%4134 = getelementptr inbounds %..string, %..string* %4131, i64 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$3d1, i64 0, i32 0), i64 11}, %..string* %4134
	%4135 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4129, i64 0, i32 0
	%4136 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4135, i64 0, i32 0
	store %Type_Info** %4130, %Type_Info*** %4136
	%4137 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4135, i64 0, i32 1
	store i64 1, i64* %4137
	%4138 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4135, i64 0, i32 2
	store i64 1, i64* %4138
	%4139 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4129, i64 0, i32 1
	%4140 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4139, i64 0, i32 0
	store %..string* %4131, %..string** %4140
	%4141 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4139, i64 0, i32 1
	store i64 1, i64* %4141
	%4142 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4139, i64 0, i32 2
	store i64 1, i64* %4142
	%4143 = getelementptr inbounds %Type_Info, %Type_Info* %4121, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4143
	%4144 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4145 = bitcast %Type_Info* %4144 to i8*
	%4146 = getelementptr inbounds i8, i8* %4145, i64 0
	%4147 = bitcast i8* %4146 to i64*
	store i64 4, i64* %4147
	%4148 = bitcast %Type_Info* %4144 to i8*
	%4149 = getelementptr inbounds i8, i8* %4148, i64 8
	%4150 = bitcast i8* %4149 to i64*
	store i64 4, i64* %4150
	; Type_Info_Tuple
	%4151 = bitcast %Type_Info* %4144 to %Type_Info.Tuple*
	%4152 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4151, i64 0, i32 2
	%4153 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 165
	%4154 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 165
	%4155 = getelementptr inbounds %Type_Info*, %Type_Info** %4153, i64 0
	%4156 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4156, %Type_Info** %4155
	%4157 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4152, i64 0, i32 0
	%4158 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4157, i64 0, i32 0
	store %Type_Info** %4153, %Type_Info*** %4158
	%4159 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4157, i64 0, i32 1
	store i64 1, i64* %4159
	%4160 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4157, i64 0, i32 2
	store i64 1, i64* %4160
	%4161 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4152, i64 0, i32 1
	%4162 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4161, i64 0, i32 0
	store %..string* %4154, %..string** %4162
	%4163 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4161, i64 0, i32 1
	store i64 1, i64* %4163
	%4164 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4161, i64 0, i32 2
	store i64 1, i64* %4164
	%4165 = getelementptr inbounds %Type_Info, %Type_Info* %4144, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4165
	%4166 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 134
	%4167 = bitcast %Type_Info* %4166 to i8*
	%4168 = getelementptr inbounds i8, i8* %4167, i64 0
	%4169 = bitcast i8* %4168 to i64*
	store i64 8, i64* %4169
	%4170 = bitcast %Type_Info* %4166 to i8*
	%4171 = getelementptr inbounds i8, i8* %4170, i64 8
	%4172 = bitcast i8* %4171 to i64*
	store i64 8, i64* %4172
	; Type_Info_Proc
	%4173 = bitcast %Type_Info* %4166 to %Type_Info.Procedure*
	%4174 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4173, i64 0, i32 2
	%4175 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4173, i64 0, i32 3
	%4176 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4173, i64 0, i32 4
	%4177 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4173, i64 0, i32 5
	%4178 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	%4179 = bitcast %Type_Info* %4178 to %Type_Info*
	store %Type_Info* %4179, %Type_Info** %4174
	store i1 false, i1* %4176
	store i64 1, i64* %4177
	%4180 = getelementptr inbounds %Type_Info, %Type_Info* %4166, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4180
	%4181 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	%4182 = bitcast %Type_Info* %4181 to i8*
	%4183 = getelementptr inbounds i8, i8* %4182, i64 0
	%4184 = bitcast i8* %4183 to i64*
	store i64 24, i64* %4184
	%4185 = bitcast %Type_Info* %4181 to i8*
	%4186 = getelementptr inbounds i8, i8* %4185, i64 8
	%4187 = bitcast i8* %4186 to i64*
	store i64 8, i64* %4187
	; Type_Info_Tuple
	%4188 = bitcast %Type_Info* %4181 to %Type_Info.Tuple*
	%4189 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4188, i64 0, i32 2
	%4190 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 166
	%4191 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 166
	%4192 = getelementptr inbounds %Type_Info*, %Type_Info** %4190, i64 0
	%4193 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4193, %Type_Info** %4192
	%4194 = getelementptr inbounds %..string, %..string* %4191, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3d2, i64 0, i32 0), i64 6}, %..string* %4194
	%4195 = getelementptr inbounds %Type_Info*, %Type_Info** %4190, i64 1
	%4196 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4196, %Type_Info** %4195
	%4197 = getelementptr inbounds %..string, %..string* %4191, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3d3, i64 0, i32 0), i64 5}, %..string* %4197
	%4198 = getelementptr inbounds %Type_Info*, %Type_Info** %4190, i64 2
	%4199 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	store %Type_Info* %4199, %Type_Info** %4198
	%4200 = getelementptr inbounds %..string, %..string* %4191, i64 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3d4, i64 0, i32 0), i64 3}, %..string* %4200
	%4201 = getelementptr inbounds %Type_Info*, %Type_Info** %4190, i64 3
	%4202 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	store %Type_Info* %4202, %Type_Info** %4201
	%4203 = getelementptr inbounds %..string, %..string* %4191, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3d5, i64 0, i32 0), i64 6}, %..string* %4203
	%4204 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4189, i64 0, i32 0
	%4205 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4204, i64 0, i32 0
	store %Type_Info** %4190, %Type_Info*** %4205
	%4206 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4204, i64 0, i32 1
	store i64 4, i64* %4206
	%4207 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4204, i64 0, i32 2
	store i64 4, i64* %4207
	%4208 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4189, i64 0, i32 1
	%4209 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4208, i64 0, i32 0
	store %..string* %4191, %..string** %4209
	%4210 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4208, i64 0, i32 1
	store i64 4, i64* %4210
	%4211 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4208, i64 0, i32 2
	store i64 4, i64* %4211
	%4212 = getelementptr inbounds %Type_Info, %Type_Info* %4181, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4212
	%4213 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	%4214 = bitcast %Type_Info* %4213 to i8*
	%4215 = getelementptr inbounds i8, i8* %4214, i64 0
	%4216 = bitcast i8* %4215 to i64*
	store i64 8, i64* %4216
	%4217 = bitcast %Type_Info* %4213 to i8*
	%4218 = getelementptr inbounds i8, i8* %4217, i64 8
	%4219 = bitcast i8* %4218 to i64*
	store i64 8, i64* %4219
	; Type_Info_Pointer
	%4220 = bitcast %Type_Info* %4213 to %Type_Info.Pointer*
	%4221 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%4222 = bitcast %Type_Info* %4221 to %Type_Info*
	%4223 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %4220, i64 0, i32 2
	store %Type_Info* %4222, %Type_Info** %4223
	%4224 = getelementptr inbounds %Type_Info, %Type_Info* %4213, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %4224
	%4225 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%4226 = bitcast %Type_Info* %4225 to i8*
	%4227 = getelementptr inbounds i8, i8* %4226, i64 0
	%4228 = bitcast i8* %4227 to i64*
	store i64 8, i64* %4228
	%4229 = bitcast %Type_Info* %4225 to i8*
	%4230 = getelementptr inbounds i8, i8* %4229, i64 8
	%4231 = bitcast i8* %4230 to i64*
	store i64 8, i64* %4231
	; Type_Info_Pointer
	%4232 = bitcast %Type_Info* %4225 to %Type_Info.Pointer*
	%4233 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%4234 = bitcast %Type_Info* %4233 to %Type_Info*
	%4235 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %4232, i64 0, i32 2
	store %Type_Info* %4234, %Type_Info** %4235
	%4236 = getelementptr inbounds %Type_Info, %Type_Info* %4225, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %4236
	%4237 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	%4238 = bitcast %Type_Info* %4237 to i8*
	%4239 = getelementptr inbounds i8, i8* %4238, i64 0
	%4240 = bitcast i8* %4239 to i64*
	store i64 8, i64* %4240
	%4241 = bitcast %Type_Info* %4237 to i8*
	%4242 = getelementptr inbounds i8, i8* %4241, i64 8
	%4243 = bitcast i8* %4242 to i64*
	store i64 8, i64* %4243
	; Type_Info_Pointer
	%4244 = bitcast %Type_Info* %4237 to %Type_Info.Pointer*
	%4245 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%4246 = bitcast %Type_Info* %4245 to %Type_Info*
	%4247 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %4244, i64 0, i32 2
	store %Type_Info* %4246, %Type_Info** %4247
	%4248 = getelementptr inbounds %Type_Info, %Type_Info* %4237, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %4248
	%4249 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 137
	%4250 = bitcast %Type_Info* %4249 to i8*
	%4251 = getelementptr inbounds i8, i8* %4250, i64 0
	%4252 = bitcast i8* %4251 to i64*
	store i64 8, i64* %4252
	%4253 = bitcast %Type_Info* %4249 to i8*
	%4254 = getelementptr inbounds i8, i8* %4253, i64 8
	%4255 = bitcast i8* %4254 to i64*
	store i64 8, i64* %4255
	; Type_Info_Proc
	%4256 = bitcast %Type_Info* %4249 to %Type_Info.Procedure*
	%4257 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4256, i64 0, i32 2
	%4258 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4256, i64 0, i32 3
	%4259 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4256, i64 0, i32 4
	%4260 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4256, i64 0, i32 5
	%4261 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 138
	%4262 = bitcast %Type_Info* %4261 to %Type_Info*
	store %Type_Info* %4262, %Type_Info** %4257
	store i1 false, i1* %4259
	store i64 1, i64* %4260
	%4263 = getelementptr inbounds %Type_Info, %Type_Info* %4249, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4263
	%4264 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 138
	%4265 = bitcast %Type_Info* %4264 to i8*
	%4266 = getelementptr inbounds i8, i8* %4265, i64 0
	%4267 = bitcast i8* %4266 to i64*
	store i64 8, i64* %4267
	%4268 = bitcast %Type_Info* %4264 to i8*
	%4269 = getelementptr inbounds i8, i8* %4268, i64 8
	%4270 = bitcast i8* %4269 to i64*
	store i64 4, i64* %4270
	; Type_Info_Tuple
	%4271 = bitcast %Type_Info* %4264 to %Type_Info.Tuple*
	%4272 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4271, i64 0, i32 2
	%4273 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 170
	%4274 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 170
	%4275 = getelementptr inbounds %Type_Info*, %Type_Info** %4273, i64 0
	%4276 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4276, %Type_Info** %4275
	%4277 = getelementptr inbounds %..string, %..string* %4274, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3d6, i64 0, i32 0), i64 7}, %..string* %4277
	%4278 = getelementptr inbounds %Type_Info*, %Type_Info** %4273, i64 1
	%4279 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4279, %Type_Info** %4278
	%4280 = getelementptr inbounds %..string, %..string* %4274, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$3d7, i64 0, i32 0), i64 6}, %..string* %4280
	%4281 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4272, i64 0, i32 0
	%4282 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4281, i64 0, i32 0
	store %Type_Info** %4273, %Type_Info*** %4282
	%4283 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4281, i64 0, i32 1
	store i64 2, i64* %4283
	%4284 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4281, i64 0, i32 2
	store i64 2, i64* %4284
	%4285 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4272, i64 0, i32 1
	%4286 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4285, i64 0, i32 0
	store %..string* %4274, %..string** %4286
	%4287 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4285, i64 0, i32 1
	store i64 2, i64* %4287
	%4288 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4285, i64 0, i32 2
	store i64 2, i64* %4288
	%4289 = getelementptr inbounds %Type_Info, %Type_Info* %4264, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4289
	%4290 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 139
	%4291 = bitcast %Type_Info* %4290 to i8*
	%4292 = getelementptr inbounds i8, i8* %4291, i64 0
	%4293 = bitcast i8* %4292 to i64*
	store i64 8, i64* %4293
	%4294 = bitcast %Type_Info* %4290 to i8*
	%4295 = getelementptr inbounds i8, i8* %4294, i64 8
	%4296 = bitcast i8* %4295 to i64*
	store i64 8, i64* %4296
	; Type_Info_Proc
	%4297 = bitcast %Type_Info* %4290 to %Type_Info.Procedure*
	%4298 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4297, i64 0, i32 2
	%4299 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4297, i64 0, i32 3
	%4300 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4297, i64 0, i32 4
	%4301 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4297, i64 0, i32 5
	%4302 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4303 = bitcast %Type_Info* %4302 to %Type_Info*
	store %Type_Info* %4303, %Type_Info** %4299
	store i1 false, i1* %4300
	store i64 1, i64* %4301
	%4304 = getelementptr inbounds %Type_Info, %Type_Info* %4290, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4304
	%4305 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4306 = bitcast %Type_Info* %4305 to i8*
	%4307 = getelementptr inbounds i8, i8* %4306, i64 0
	%4308 = bitcast i8* %4307 to i64*
	store i64 4, i64* %4308
	%4309 = bitcast %Type_Info* %4305 to i8*
	%4310 = getelementptr inbounds i8, i8* %4309, i64 8
	%4311 = bitcast i8* %4310 to i64*
	store i64 4, i64* %4311
	; Type_Info_Tuple
	%4312 = bitcast %Type_Info* %4305 to %Type_Info.Tuple*
	%4313 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4312, i64 0, i32 2
	%4314 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 172
	%4315 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 172
	%4316 = getelementptr inbounds %Type_Info*, %Type_Info** %4314, i64 0
	%4317 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4317, %Type_Info** %4316
	%4318 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4313, i64 0, i32 0
	%4319 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4318, i64 0, i32 0
	store %Type_Info** %4314, %Type_Info*** %4319
	%4320 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4318, i64 0, i32 1
	store i64 1, i64* %4320
	%4321 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4318, i64 0, i32 2
	store i64 1, i64* %4321
	%4322 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4313, i64 0, i32 1
	%4323 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4322, i64 0, i32 0
	store %..string* %4315, %..string** %4323
	%4324 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4322, i64 0, i32 1
	store i64 1, i64* %4324
	%4325 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4322, i64 0, i32 2
	store i64 1, i64* %4325
	%4326 = getelementptr inbounds %Type_Info, %Type_Info* %4305, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4326
	%4327 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%4328 = bitcast %Type_Info* %4327 to i8*
	%4329 = getelementptr inbounds i8, i8* %4328, i64 0
	%4330 = bitcast i8* %4329 to i64*
	store i64 8, i64* %4330
	%4331 = bitcast %Type_Info* %4327 to i8*
	%4332 = getelementptr inbounds i8, i8* %4331, i64 8
	%4333 = bitcast i8* %4332 to i64*
	store i64 8, i64* %4333
	; Type_Info_Proc
	%4334 = bitcast %Type_Info* %4327 to %Type_Info.Procedure*
	%4335 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4334, i64 0, i32 2
	%4336 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4334, i64 0, i32 3
	%4337 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4334, i64 0, i32 4
	%4338 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4334, i64 0, i32 5
	%4339 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4340 = bitcast %Type_Info* %4339 to %Type_Info*
	store %Type_Info* %4340, %Type_Info** %4335
	store i1 false, i1* %4337
	store i64 1, i64* %4338
	%4341 = getelementptr inbounds %Type_Info, %Type_Info* %4327, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4341
	%4342 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4343 = bitcast %Type_Info* %4342 to i8*
	%4344 = getelementptr inbounds i8, i8* %4343, i64 0
	%4345 = bitcast i8* %4344 to i64*
	store i64 4, i64* %4345
	%4346 = bitcast %Type_Info* %4342 to i8*
	%4347 = getelementptr inbounds i8, i8* %4346, i64 8
	%4348 = bitcast i8* %4347 to i64*
	store i64 4, i64* %4348
	; Type_Info_Tuple
	%4349 = bitcast %Type_Info* %4342 to %Type_Info.Tuple*
	%4350 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4349, i64 0, i32 2
	%4351 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 173
	%4352 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 173
	%4353 = getelementptr inbounds %Type_Info*, %Type_Info** %4351, i64 0
	%4354 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4354, %Type_Info** %4353
	%4355 = getelementptr inbounds %..string, %..string* %4352, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3d8, i64 0, i32 0), i64 7}, %..string* %4355
	%4356 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4350, i64 0, i32 0
	%4357 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4356, i64 0, i32 0
	store %Type_Info** %4351, %Type_Info*** %4357
	%4358 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4356, i64 0, i32 1
	store i64 1, i64* %4358
	%4359 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4356, i64 0, i32 2
	store i64 1, i64* %4359
	%4360 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4350, i64 0, i32 1
	%4361 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4360, i64 0, i32 0
	store %..string* %4352, %..string** %4361
	%4362 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4360, i64 0, i32 1
	store i64 1, i64* %4362
	%4363 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4360, i64 0, i32 2
	store i64 1, i64* %4363
	%4364 = getelementptr inbounds %Type_Info, %Type_Info* %4342, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4364
	%4365 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%4366 = bitcast %Type_Info* %4365 to i8*
	%4367 = getelementptr inbounds i8, i8* %4366, i64 0
	%4368 = bitcast i8* %4367 to i64*
	store i64 8, i64* %4368
	%4369 = bitcast %Type_Info* %4365 to i8*
	%4370 = getelementptr inbounds i8, i8* %4369, i64 8
	%4371 = bitcast i8* %4370 to i64*
	store i64 8, i64* %4371
	; Type_Info_Proc
	%4372 = bitcast %Type_Info* %4365 to %Type_Info.Procedure*
	%4373 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4372, i64 0, i32 2
	%4374 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4372, i64 0, i32 3
	%4375 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4372, i64 0, i32 4
	%4376 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4372, i64 0, i32 5
	%4377 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4378 = bitcast %Type_Info* %4377 to %Type_Info*
	store %Type_Info* %4378, %Type_Info** %4373
	store i1 false, i1* %4375
	store i64 1, i64* %4376
	%4379 = getelementptr inbounds %Type_Info, %Type_Info* %4365, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4379
	%4380 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%4381 = bitcast %Type_Info* %4380 to i8*
	%4382 = getelementptr inbounds i8, i8* %4381, i64 0
	%4383 = bitcast i8* %4382 to i64*
	store i64 4, i64* %4383
	%4384 = bitcast %Type_Info* %4380 to i8*
	%4385 = getelementptr inbounds i8, i8* %4384, i64 8
	%4386 = bitcast i8* %4385 to i64*
	store i64 4, i64* %4386
	; Type_Info_Tuple
	%4387 = bitcast %Type_Info* %4380 to %Type_Info.Tuple*
	%4388 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4387, i64 0, i32 2
	%4389 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 174
	%4390 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 174
	%4391 = getelementptr inbounds %Type_Info*, %Type_Info** %4389, i64 0
	%4392 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4392, %Type_Info** %4391
	%4393 = getelementptr inbounds %..string, %..string* %4390, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3d9, i64 0, i32 0), i64 7}, %..string* %4393
	%4394 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4388, i64 0, i32 0
	%4395 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4394, i64 0, i32 0
	store %Type_Info** %4389, %Type_Info*** %4395
	%4396 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4394, i64 0, i32 1
	store i64 1, i64* %4396
	%4397 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4394, i64 0, i32 2
	store i64 1, i64* %4397
	%4398 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4388, i64 0, i32 1
	%4399 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4398, i64 0, i32 0
	store %..string* %4390, %..string** %4399
	%4400 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4398, i64 0, i32 1
	store i64 1, i64* %4400
	%4401 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4398, i64 0, i32 2
	store i64 1, i64* %4401
	%4402 = getelementptr inbounds %Type_Info, %Type_Info* %4380, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4402
	%4403 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	%4404 = bitcast %Type_Info* %4403 to i8*
	%4405 = getelementptr inbounds i8, i8* %4404, i64 0
	%4406 = bitcast i8* %4405 to i64*
	store i64 8, i64* %4406
	%4407 = bitcast %Type_Info* %4403 to i8*
	%4408 = getelementptr inbounds i8, i8* %4407, i64 8
	%4409 = bitcast i8* %4408 to i64*
	store i64 8, i64* %4409
	; Type_Info_Proc
	%4410 = bitcast %Type_Info* %4403 to %Type_Info.Procedure*
	%4411 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4410, i64 0, i32 2
	%4412 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4410, i64 0, i32 3
	%4413 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4410, i64 0, i32 4
	%4414 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4410, i64 0, i32 5
	%4415 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4416 = bitcast %Type_Info* %4415 to %Type_Info*
	store %Type_Info* %4416, %Type_Info** %4411
	store i1 false, i1* %4413
	store i64 1, i64* %4414
	%4417 = getelementptr inbounds %Type_Info, %Type_Info* %4403, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4417
	%4418 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4419 = bitcast %Type_Info* %4418 to i8*
	%4420 = getelementptr inbounds i8, i8* %4419, i64 0
	%4421 = bitcast i8* %4420 to i64*
	store i64 4, i64* %4421
	%4422 = bitcast %Type_Info* %4418 to i8*
	%4423 = getelementptr inbounds i8, i8* %4422, i64 8
	%4424 = bitcast i8* %4423 to i64*
	store i64 4, i64* %4424
	; Type_Info_Tuple
	%4425 = bitcast %Type_Info* %4418 to %Type_Info.Tuple*
	%4426 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4425, i64 0, i32 2
	%4427 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 175
	%4428 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 175
	%4429 = getelementptr inbounds %Type_Info*, %Type_Info** %4427, i64 0
	%4430 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4430, %Type_Info** %4429
	%4431 = getelementptr inbounds %..string, %..string* %4428, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3da, i64 0, i32 0), i64 7}, %..string* %4431
	%4432 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4426, i64 0, i32 0
	%4433 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4432, i64 0, i32 0
	store %Type_Info** %4427, %Type_Info*** %4433
	%4434 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4432, i64 0, i32 1
	store i64 1, i64* %4434
	%4435 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4432, i64 0, i32 2
	store i64 1, i64* %4435
	%4436 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4426, i64 0, i32 1
	%4437 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4436, i64 0, i32 0
	store %..string* %4428, %..string** %4437
	%4438 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4436, i64 0, i32 1
	store i64 1, i64* %4438
	%4439 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4436, i64 0, i32 2
	store i64 1, i64* %4439
	%4440 = getelementptr inbounds %Type_Info, %Type_Info* %4418, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4440
	%4441 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%4442 = bitcast %Type_Info* %4441 to i8*
	%4443 = getelementptr inbounds i8, i8* %4442, i64 0
	%4444 = bitcast i8* %4443 to i64*
	store i64 8, i64* %4444
	%4445 = bitcast %Type_Info* %4441 to i8*
	%4446 = getelementptr inbounds i8, i8* %4445, i64 8
	%4447 = bitcast i8* %4446 to i64*
	store i64 8, i64* %4447
	; Type_Info_Proc
	%4448 = bitcast %Type_Info* %4441 to %Type_Info.Procedure*
	%4449 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4448, i64 0, i32 2
	%4450 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4448, i64 0, i32 3
	%4451 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4448, i64 0, i32 4
	%4452 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4448, i64 0, i32 5
	%4453 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%4454 = bitcast %Type_Info* %4453 to %Type_Info*
	store %Type_Info* %4454, %Type_Info** %4449
	store i1 false, i1* %4451
	store i64 1, i64* %4452
	%4455 = getelementptr inbounds %Type_Info, %Type_Info* %4441, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4455
	%4456 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%4457 = bitcast %Type_Info* %4456 to i8*
	%4458 = getelementptr inbounds i8, i8* %4457, i64 0
	%4459 = bitcast i8* %4458 to i64*
	store i64 8, i64* %4459
	%4460 = bitcast %Type_Info* %4456 to i8*
	%4461 = getelementptr inbounds i8, i8* %4460, i64 8
	%4462 = bitcast i8* %4461 to i64*
	store i64 4, i64* %4462
	; Type_Info_Tuple
	%4463 = bitcast %Type_Info* %4456 to %Type_Info.Tuple*
	%4464 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4463, i64 0, i32 2
	%4465 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 176
	%4466 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 176
	%4467 = getelementptr inbounds %Type_Info*, %Type_Info** %4465, i64 0
	%4468 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4468, %Type_Info** %4467
	%4469 = getelementptr inbounds %..string, %..string* %4466, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3db, i64 0, i32 0), i64 3}, %..string* %4469
	%4470 = getelementptr inbounds %Type_Info*, %Type_Info** %4465, i64 1
	%4471 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4471, %Type_Info** %4470
	%4472 = getelementptr inbounds %..string, %..string* %4466, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3dc, i64 0, i32 0), i64 2}, %..string* %4472
	%4473 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4464, i64 0, i32 0
	%4474 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4473, i64 0, i32 0
	store %Type_Info** %4465, %Type_Info*** %4474
	%4475 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4473, i64 0, i32 1
	store i64 2, i64* %4475
	%4476 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4473, i64 0, i32 2
	store i64 2, i64* %4476
	%4477 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4464, i64 0, i32 1
	%4478 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4477, i64 0, i32 0
	store %..string* %4466, %..string** %4478
	%4479 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4477, i64 0, i32 1
	store i64 2, i64* %4479
	%4480 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4477, i64 0, i32 2
	store i64 2, i64* %4480
	%4481 = getelementptr inbounds %Type_Info, %Type_Info* %4456, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4481
	%4482 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	%4483 = bitcast %Type_Info* %4482 to i8*
	%4484 = getelementptr inbounds i8, i8* %4483, i64 0
	%4485 = bitcast i8* %4484 to i64*
	store i64 8, i64* %4485
	%4486 = bitcast %Type_Info* %4482 to i8*
	%4487 = getelementptr inbounds i8, i8* %4486, i64 8
	%4488 = bitcast i8* %4487 to i64*
	store i64 8, i64* %4488
	; Type_Info_Proc
	%4489 = bitcast %Type_Info* %4482 to %Type_Info.Procedure*
	%4490 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4489, i64 0, i32 2
	%4491 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4489, i64 0, i32 3
	%4492 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4489, i64 0, i32 4
	%4493 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4489, i64 0, i32 5
	%4494 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	%4495 = bitcast %Type_Info* %4494 to %Type_Info*
	store %Type_Info* %4495, %Type_Info** %4490
	store i1 false, i1* %4492
	store i64 1, i64* %4493
	%4496 = getelementptr inbounds %Type_Info, %Type_Info* %4482, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4496
	%4497 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	%4498 = bitcast %Type_Info* %4497 to i8*
	%4499 = getelementptr inbounds i8, i8* %4498, i64 0
	%4500 = bitcast i8* %4499 to i64*
	store i64 12, i64* %4500
	%4501 = bitcast %Type_Info* %4497 to i8*
	%4502 = getelementptr inbounds i8, i8* %4501, i64 8
	%4503 = bitcast i8* %4502 to i64*
	store i64 4, i64* %4503
	; Type_Info_Tuple
	%4504 = bitcast %Type_Info* %4497 to %Type_Info.Tuple*
	%4505 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4504, i64 0, i32 2
	%4506 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 178
	%4507 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 178
	%4508 = getelementptr inbounds %Type_Info*, %Type_Info** %4506, i64 0
	%4509 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4509, %Type_Info** %4508
	%4510 = getelementptr inbounds %..string, %..string* %4507, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3dd, i64 0, i32 0), i64 3}, %..string* %4510
	%4511 = getelementptr inbounds %Type_Info*, %Type_Info** %4506, i64 1
	%4512 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4512, %Type_Info** %4511
	%4513 = getelementptr inbounds %..string, %..string* %4507, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3de, i64 0, i32 0), i64 2}, %..string* %4513
	%4514 = getelementptr inbounds %Type_Info*, %Type_Info** %4506, i64 2
	%4515 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4515, %Type_Info** %4514
	%4516 = getelementptr inbounds %..string, %..string* %4507, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3df, i64 0, i32 0), i64 2}, %..string* %4516
	%4517 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4505, i64 0, i32 0
	%4518 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4517, i64 0, i32 0
	store %Type_Info** %4506, %Type_Info*** %4518
	%4519 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4517, i64 0, i32 1
	store i64 3, i64* %4519
	%4520 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4517, i64 0, i32 2
	store i64 3, i64* %4520
	%4521 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4505, i64 0, i32 1
	%4522 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4521, i64 0, i32 0
	store %..string* %4507, %..string** %4522
	%4523 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4521, i64 0, i32 1
	store i64 3, i64* %4523
	%4524 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4521, i64 0, i32 2
	store i64 3, i64* %4524
	%4525 = getelementptr inbounds %Type_Info, %Type_Info* %4497, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4525
	%4526 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 140
	%4527 = bitcast %Type_Info* %4526 to i8*
	%4528 = getelementptr inbounds i8, i8* %4527, i64 0
	%4529 = bitcast i8* %4528 to i64*
	store i64 8, i64* %4529
	%4530 = bitcast %Type_Info* %4526 to i8*
	%4531 = getelementptr inbounds i8, i8* %4530, i64 8
	%4532 = bitcast i8* %4531 to i64*
	store i64 8, i64* %4532
	; Type_Info_Proc
	%4533 = bitcast %Type_Info* %4526 to %Type_Info.Procedure*
	%4534 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4533, i64 0, i32 2
	%4535 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4533, i64 0, i32 3
	%4536 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4533, i64 0, i32 4
	%4537 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4533, i64 0, i32 5
	%4538 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	%4539 = bitcast %Type_Info* %4538 to %Type_Info*
	store %Type_Info* %4539, %Type_Info** %4534
	store i1 false, i1* %4536
	store i64 1, i64* %4537
	%4540 = getelementptr inbounds %Type_Info, %Type_Info* %4526, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4540
	%4541 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	%4542 = bitcast %Type_Info* %4541 to i8*
	%4543 = getelementptr inbounds i8, i8* %4542, i64 0
	%4544 = bitcast i8* %4543 to i64*
	store i64 16, i64* %4544
	%4545 = bitcast %Type_Info* %4541 to i8*
	%4546 = getelementptr inbounds i8, i8* %4545, i64 8
	%4547 = bitcast i8* %4546 to i64*
	store i64 4, i64* %4547
	; Type_Info_Tuple
	%4548 = bitcast %Type_Info* %4541 to %Type_Info.Tuple*
	%4549 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4548, i64 0, i32 2
	%4550 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 181
	%4551 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 181
	%4552 = getelementptr inbounds %Type_Info*, %Type_Info** %4550, i64 0
	%4553 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4553, %Type_Info** %4552
	%4554 = getelementptr inbounds %..string, %..string* %4551, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3e0, i64 0, i32 0), i64 3}, %..string* %4554
	%4555 = getelementptr inbounds %Type_Info*, %Type_Info** %4550, i64 1
	%4556 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4556, %Type_Info** %4555
	%4557 = getelementptr inbounds %..string, %..string* %4551, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e1, i64 0, i32 0), i64 2}, %..string* %4557
	%4558 = getelementptr inbounds %Type_Info*, %Type_Info** %4550, i64 2
	%4559 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4559, %Type_Info** %4558
	%4560 = getelementptr inbounds %..string, %..string* %4551, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e2, i64 0, i32 0), i64 2}, %..string* %4560
	%4561 = getelementptr inbounds %Type_Info*, %Type_Info** %4550, i64 3
	%4562 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4562, %Type_Info** %4561
	%4563 = getelementptr inbounds %..string, %..string* %4551, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e3, i64 0, i32 0), i64 2}, %..string* %4563
	%4564 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4549, i64 0, i32 0
	%4565 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4564, i64 0, i32 0
	store %Type_Info** %4550, %Type_Info*** %4565
	%4566 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4564, i64 0, i32 1
	store i64 4, i64* %4566
	%4567 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4564, i64 0, i32 2
	store i64 4, i64* %4567
	%4568 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4549, i64 0, i32 1
	%4569 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4568, i64 0, i32 0
	store %..string* %4551, %..string** %4569
	%4570 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4568, i64 0, i32 1
	store i64 4, i64* %4570
	%4571 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4568, i64 0, i32 2
	store i64 4, i64* %4571
	%4572 = getelementptr inbounds %Type_Info, %Type_Info* %4541, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4572
	%4573 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 142
	%4574 = bitcast %Type_Info* %4573 to i8*
	%4575 = getelementptr inbounds i8, i8* %4574, i64 0
	%4576 = bitcast i8* %4575 to i64*
	store i64 8, i64* %4576
	%4577 = bitcast %Type_Info* %4573 to i8*
	%4578 = getelementptr inbounds i8, i8* %4577, i64 8
	%4579 = bitcast i8* %4578 to i64*
	store i64 8, i64* %4579
	; Type_Info_Proc
	%4580 = bitcast %Type_Info* %4573 to %Type_Info.Procedure*
	%4581 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4580, i64 0, i32 2
	%4582 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4580, i64 0, i32 3
	%4583 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4580, i64 0, i32 4
	%4584 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4580, i64 0, i32 5
	%4585 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 143
	%4586 = bitcast %Type_Info* %4585 to %Type_Info*
	store %Type_Info* %4586, %Type_Info** %4581
	store i1 false, i1* %4583
	store i64 1, i64* %4584
	%4587 = getelementptr inbounds %Type_Info, %Type_Info* %4573, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4587
	%4588 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 143
	%4589 = bitcast %Type_Info* %4588 to i8*
	%4590 = getelementptr inbounds i8, i8* %4589, i64 0
	%4591 = bitcast i8* %4590 to i64*
	store i64 20, i64* %4591
	%4592 = bitcast %Type_Info* %4588 to i8*
	%4593 = getelementptr inbounds i8, i8* %4592, i64 8
	%4594 = bitcast i8* %4593 to i64*
	store i64 4, i64* %4594
	; Type_Info_Tuple
	%4595 = bitcast %Type_Info* %4588 to %Type_Info.Tuple*
	%4596 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4595, i64 0, i32 2
	%4597 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 185
	%4598 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 185
	%4599 = getelementptr inbounds %Type_Info*, %Type_Info** %4597, i64 0
	%4600 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4600, %Type_Info** %4599
	%4601 = getelementptr inbounds %..string, %..string* %4598, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3e4, i64 0, i32 0), i64 3}, %..string* %4601
	%4602 = getelementptr inbounds %Type_Info*, %Type_Info** %4597, i64 1
	%4603 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4603, %Type_Info** %4602
	%4604 = getelementptr inbounds %..string, %..string* %4598, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e5, i64 0, i32 0), i64 2}, %..string* %4604
	%4605 = getelementptr inbounds %Type_Info*, %Type_Info** %4597, i64 2
	%4606 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4606, %Type_Info** %4605
	%4607 = getelementptr inbounds %..string, %..string* %4598, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e6, i64 0, i32 0), i64 2}, %..string* %4607
	%4608 = getelementptr inbounds %Type_Info*, %Type_Info** %4597, i64 3
	%4609 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4609, %Type_Info** %4608
	%4610 = getelementptr inbounds %..string, %..string* %4598, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e7, i64 0, i32 0), i64 2}, %..string* %4610
	%4611 = getelementptr inbounds %Type_Info*, %Type_Info** %4597, i64 4
	%4612 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4612, %Type_Info** %4611
	%4613 = getelementptr inbounds %..string, %..string* %4598, i64 4
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3e8, i64 0, i32 0), i64 2}, %..string* %4613
	%4614 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4596, i64 0, i32 0
	%4615 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4614, i64 0, i32 0
	store %Type_Info** %4597, %Type_Info*** %4615
	%4616 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4614, i64 0, i32 1
	store i64 5, i64* %4616
	%4617 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4614, i64 0, i32 2
	store i64 5, i64* %4617
	%4618 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4596, i64 0, i32 1
	%4619 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4618, i64 0, i32 0
	store %..string* %4598, %..string** %4619
	%4620 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4618, i64 0, i32 1
	store i64 5, i64* %4620
	%4621 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4618, i64 0, i32 2
	store i64 5, i64* %4621
	%4622 = getelementptr inbounds %Type_Info, %Type_Info* %4588, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4622
	%4623 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 144
	%4624 = bitcast %Type_Info* %4623 to i8*
	%4625 = getelementptr inbounds i8, i8* %4624, i64 0
	%4626 = bitcast i8* %4625 to i64*
	store i64 8, i64* %4626
	%4627 = bitcast %Type_Info* %4623 to i8*
	%4628 = getelementptr inbounds i8, i8* %4627, i64 8
	%4629 = bitcast i8* %4628 to i64*
	store i64 8, i64* %4629
	; Type_Info_Proc
	%4630 = bitcast %Type_Info* %4623 to %Type_Info.Procedure*
	%4631 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4630, i64 0, i32 2
	%4632 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4630, i64 0, i32 3
	%4633 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4630, i64 0, i32 4
	%4634 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4630, i64 0, i32 5
	%4635 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 145
	%4636 = bitcast %Type_Info* %4635 to %Type_Info*
	store %Type_Info* %4636, %Type_Info** %4631
	store i1 false, i1* %4633
	store i64 1, i64* %4634
	%4637 = getelementptr inbounds %Type_Info, %Type_Info* %4623, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4637
	%4638 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 145
	%4639 = bitcast %Type_Info* %4638 to i8*
	%4640 = getelementptr inbounds i8, i8* %4639, i64 0
	%4641 = bitcast i8* %4640 to i64*
	store i64 8, i64* %4641
	%4642 = bitcast %Type_Info* %4638 to i8*
	%4643 = getelementptr inbounds i8, i8* %4642, i64 8
	%4644 = bitcast i8* %4643 to i64*
	store i64 4, i64* %4644
	; Type_Info_Tuple
	%4645 = bitcast %Type_Info* %4638 to %Type_Info.Tuple*
	%4646 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4645, i64 0, i32 2
	%4647 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 190
	%4648 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 190
	%4649 = getelementptr inbounds %Type_Info*, %Type_Info** %4647, i64 0
	%4650 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4650, %Type_Info** %4649
	%4651 = getelementptr inbounds %..string, %..string* %4648, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3e9, i64 0, i32 0), i64 3}, %..string* %4651
	%4652 = getelementptr inbounds %Type_Info*, %Type_Info** %4647, i64 1
	%4653 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4653, %Type_Info** %4652
	%4654 = getelementptr inbounds %..string, %..string* %4648, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3ea, i64 0, i32 0), i64 2}, %..string* %4654
	%4655 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4646, i64 0, i32 0
	%4656 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4655, i64 0, i32 0
	store %Type_Info** %4647, %Type_Info*** %4656
	%4657 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4655, i64 0, i32 1
	store i64 2, i64* %4657
	%4658 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4655, i64 0, i32 2
	store i64 2, i64* %4658
	%4659 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4646, i64 0, i32 1
	%4660 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4659, i64 0, i32 0
	store %..string* %4648, %..string** %4660
	%4661 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4659, i64 0, i32 1
	store i64 2, i64* %4661
	%4662 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4659, i64 0, i32 2
	store i64 2, i64* %4662
	%4663 = getelementptr inbounds %Type_Info, %Type_Info* %4638, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4663
	%4664 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 146
	%4665 = bitcast %Type_Info* %4664 to i8*
	%4666 = getelementptr inbounds i8, i8* %4665, i64 0
	%4667 = bitcast i8* %4666 to i64*
	store i64 8, i64* %4667
	%4668 = bitcast %Type_Info* %4664 to i8*
	%4669 = getelementptr inbounds i8, i8* %4668, i64 8
	%4670 = bitcast i8* %4669 to i64*
	store i64 8, i64* %4670
	; Type_Info_Proc
	%4671 = bitcast %Type_Info* %4664 to %Type_Info.Procedure*
	%4672 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4671, i64 0, i32 2
	%4673 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4671, i64 0, i32 3
	%4674 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4671, i64 0, i32 4
	%4675 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4671, i64 0, i32 5
	%4676 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 147
	%4677 = bitcast %Type_Info* %4676 to %Type_Info*
	store %Type_Info* %4677, %Type_Info** %4672
	store i1 false, i1* %4674
	store i64 1, i64* %4675
	%4678 = getelementptr inbounds %Type_Info, %Type_Info* %4664, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4678
	%4679 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 147
	%4680 = bitcast %Type_Info* %4679 to i8*
	%4681 = getelementptr inbounds i8, i8* %4680, i64 0
	%4682 = bitcast i8* %4681 to i64*
	store i64 12, i64* %4682
	%4683 = bitcast %Type_Info* %4679 to i8*
	%4684 = getelementptr inbounds i8, i8* %4683, i64 8
	%4685 = bitcast i8* %4684 to i64*
	store i64 4, i64* %4685
	; Type_Info_Tuple
	%4686 = bitcast %Type_Info* %4679 to %Type_Info.Tuple*
	%4687 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4686, i64 0, i32 2
	%4688 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 192
	%4689 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 192
	%4690 = getelementptr inbounds %Type_Info*, %Type_Info** %4688, i64 0
	%4691 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4691, %Type_Info** %4690
	%4692 = getelementptr inbounds %..string, %..string* %4689, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3eb, i64 0, i32 0), i64 3}, %..string* %4692
	%4693 = getelementptr inbounds %Type_Info*, %Type_Info** %4688, i64 1
	%4694 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4694, %Type_Info** %4693
	%4695 = getelementptr inbounds %..string, %..string* %4689, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3ec, i64 0, i32 0), i64 2}, %..string* %4695
	%4696 = getelementptr inbounds %Type_Info*, %Type_Info** %4688, i64 2
	%4697 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4697, %Type_Info** %4696
	%4698 = getelementptr inbounds %..string, %..string* %4689, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3ed, i64 0, i32 0), i64 2}, %..string* %4698
	%4699 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4687, i64 0, i32 0
	%4700 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4699, i64 0, i32 0
	store %Type_Info** %4688, %Type_Info*** %4700
	%4701 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4699, i64 0, i32 1
	store i64 3, i64* %4701
	%4702 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4699, i64 0, i32 2
	store i64 3, i64* %4702
	%4703 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4687, i64 0, i32 1
	%4704 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4703, i64 0, i32 0
	store %..string* %4689, %..string** %4704
	%4705 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4703, i64 0, i32 1
	store i64 3, i64* %4705
	%4706 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4703, i64 0, i32 2
	store i64 3, i64* %4706
	%4707 = getelementptr inbounds %Type_Info, %Type_Info* %4679, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4707
	%4708 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 148
	%4709 = bitcast %Type_Info* %4708 to i8*
	%4710 = getelementptr inbounds i8, i8* %4709, i64 0
	%4711 = bitcast i8* %4710 to i64*
	store i64 8, i64* %4711
	%4712 = bitcast %Type_Info* %4708 to i8*
	%4713 = getelementptr inbounds i8, i8* %4712, i64 8
	%4714 = bitcast i8* %4713 to i64*
	store i64 8, i64* %4714
	; Type_Info_Proc
	%4715 = bitcast %Type_Info* %4708 to %Type_Info.Procedure*
	%4716 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4715, i64 0, i32 2
	%4717 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4715, i64 0, i32 3
	%4718 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4715, i64 0, i32 4
	%4719 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4715, i64 0, i32 5
	%4720 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 149
	%4721 = bitcast %Type_Info* %4720 to %Type_Info*
	store %Type_Info* %4721, %Type_Info** %4716
	store i1 false, i1* %4718
	store i64 1, i64* %4719
	%4722 = getelementptr inbounds %Type_Info, %Type_Info* %4708, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4722
	%4723 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 149
	%4724 = bitcast %Type_Info* %4723 to i8*
	%4725 = getelementptr inbounds i8, i8* %4724, i64 0
	%4726 = bitcast i8* %4725 to i64*
	store i64 16, i64* %4726
	%4727 = bitcast %Type_Info* %4723 to i8*
	%4728 = getelementptr inbounds i8, i8* %4727, i64 8
	%4729 = bitcast i8* %4728 to i64*
	store i64 4, i64* %4729
	; Type_Info_Tuple
	%4730 = bitcast %Type_Info* %4723 to %Type_Info.Tuple*
	%4731 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4730, i64 0, i32 2
	%4732 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 195
	%4733 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 195
	%4734 = getelementptr inbounds %Type_Info*, %Type_Info** %4732, i64 0
	%4735 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4735, %Type_Info** %4734
	%4736 = getelementptr inbounds %..string, %..string* %4733, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3ee, i64 0, i32 0), i64 3}, %..string* %4736
	%4737 = getelementptr inbounds %Type_Info*, %Type_Info** %4732, i64 1
	%4738 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4738, %Type_Info** %4737
	%4739 = getelementptr inbounds %..string, %..string* %4733, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3ef, i64 0, i32 0), i64 2}, %..string* %4739
	%4740 = getelementptr inbounds %Type_Info*, %Type_Info** %4732, i64 2
	%4741 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4741, %Type_Info** %4740
	%4742 = getelementptr inbounds %..string, %..string* %4733, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3f0, i64 0, i32 0), i64 2}, %..string* %4742
	%4743 = getelementptr inbounds %Type_Info*, %Type_Info** %4732, i64 3
	%4744 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4744, %Type_Info** %4743
	%4745 = getelementptr inbounds %..string, %..string* %4733, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3f1, i64 0, i32 0), i64 2}, %..string* %4745
	%4746 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4731, i64 0, i32 0
	%4747 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4746, i64 0, i32 0
	store %Type_Info** %4732, %Type_Info*** %4747
	%4748 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4746, i64 0, i32 1
	store i64 4, i64* %4748
	%4749 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4746, i64 0, i32 2
	store i64 4, i64* %4749
	%4750 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4731, i64 0, i32 1
	%4751 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4750, i64 0, i32 0
	store %..string* %4733, %..string** %4751
	%4752 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4750, i64 0, i32 1
	store i64 4, i64* %4752
	%4753 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4750, i64 0, i32 2
	store i64 4, i64* %4753
	%4754 = getelementptr inbounds %Type_Info, %Type_Info* %4723, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4754
	%4755 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 150
	%4756 = bitcast %Type_Info* %4755 to i8*
	%4757 = getelementptr inbounds i8, i8* %4756, i64 0
	%4758 = bitcast i8* %4757 to i64*
	store i64 8, i64* %4758
	%4759 = bitcast %Type_Info* %4755 to i8*
	%4760 = getelementptr inbounds i8, i8* %4759, i64 8
	%4761 = bitcast i8* %4760 to i64*
	store i64 8, i64* %4761
	; Type_Info_Proc
	%4762 = bitcast %Type_Info* %4755 to %Type_Info.Procedure*
	%4763 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4762, i64 0, i32 2
	%4764 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4762, i64 0, i32 3
	%4765 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4762, i64 0, i32 4
	%4766 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4762, i64 0, i32 5
	%4767 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 151
	%4768 = bitcast %Type_Info* %4767 to %Type_Info*
	store %Type_Info* %4768, %Type_Info** %4763
	store i1 false, i1* %4765
	store i64 1, i64* %4766
	%4769 = getelementptr inbounds %Type_Info, %Type_Info* %4755, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4769
	%4770 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 151
	%4771 = bitcast %Type_Info* %4770 to i8*
	%4772 = getelementptr inbounds i8, i8* %4771, i64 0
	%4773 = bitcast i8* %4772 to i64*
	store i64 20, i64* %4773
	%4774 = bitcast %Type_Info* %4770 to i8*
	%4775 = getelementptr inbounds i8, i8* %4774, i64 8
	%4776 = bitcast i8* %4775 to i64*
	store i64 4, i64* %4776
	; Type_Info_Tuple
	%4777 = bitcast %Type_Info* %4770 to %Type_Info.Tuple*
	%4778 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4777, i64 0, i32 2
	%4779 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 199
	%4780 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 199
	%4781 = getelementptr inbounds %Type_Info*, %Type_Info** %4779, i64 0
	%4782 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4782, %Type_Info** %4781
	%4783 = getelementptr inbounds %..string, %..string* %4780, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3f2, i64 0, i32 0), i64 3}, %..string* %4783
	%4784 = getelementptr inbounds %Type_Info*, %Type_Info** %4779, i64 1
	%4785 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4785, %Type_Info** %4784
	%4786 = getelementptr inbounds %..string, %..string* %4780, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3f3, i64 0, i32 0), i64 2}, %..string* %4786
	%4787 = getelementptr inbounds %Type_Info*, %Type_Info** %4779, i64 2
	%4788 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4788, %Type_Info** %4787
	%4789 = getelementptr inbounds %..string, %..string* %4780, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3f4, i64 0, i32 0), i64 2}, %..string* %4789
	%4790 = getelementptr inbounds %Type_Info*, %Type_Info** %4779, i64 3
	%4791 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4791, %Type_Info** %4790
	%4792 = getelementptr inbounds %..string, %..string* %4780, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3f5, i64 0, i32 0), i64 2}, %..string* %4792
	%4793 = getelementptr inbounds %Type_Info*, %Type_Info** %4779, i64 4
	%4794 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	store %Type_Info* %4794, %Type_Info** %4793
	%4795 = getelementptr inbounds %..string, %..string* %4780, i64 4
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$3f6, i64 0, i32 0), i64 2}, %..string* %4795
	%4796 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4778, i64 0, i32 0
	%4797 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4796, i64 0, i32 0
	store %Type_Info** %4779, %Type_Info*** %4797
	%4798 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4796, i64 0, i32 1
	store i64 5, i64* %4798
	%4799 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4796, i64 0, i32 2
	store i64 5, i64* %4799
	%4800 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4778, i64 0, i32 1
	%4801 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4800, i64 0, i32 0
	store %..string* %4780, %..string** %4801
	%4802 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4800, i64 0, i32 1
	store i64 5, i64* %4802
	%4803 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4800, i64 0, i32 2
	store i64 5, i64* %4803
	%4804 = getelementptr inbounds %Type_Info, %Type_Info* %4770, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4804
	%4805 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 152
	%4806 = bitcast %Type_Info* %4805 to i8*
	%4807 = getelementptr inbounds i8, i8* %4806, i64 0
	%4808 = bitcast i8* %4807 to i64*
	store i64 8, i64* %4808
	%4809 = bitcast %Type_Info* %4805 to i8*
	%4810 = getelementptr inbounds i8, i8* %4809, i64 8
	%4811 = bitcast i8* %4810 to i64*
	store i64 8, i64* %4811
	; Type_Info_Proc
	%4812 = bitcast %Type_Info* %4805 to %Type_Info.Procedure*
	%4813 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4812, i64 0, i32 2
	%4814 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4812, i64 0, i32 3
	%4815 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4812, i64 0, i32 4
	%4816 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4812, i64 0, i32 5
	%4817 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 153
	%4818 = bitcast %Type_Info* %4817 to %Type_Info*
	store %Type_Info* %4818, %Type_Info** %4813
	store i1 false, i1* %4815
	store i64 1, i64* %4816
	%4819 = getelementptr inbounds %Type_Info, %Type_Info* %4805, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4819
	%4820 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 153
	%4821 = bitcast %Type_Info* %4820 to i8*
	%4822 = getelementptr inbounds i8, i8* %4821, i64 0
	%4823 = bitcast i8* %4822 to i64*
	store i64 24, i64* %4823
	%4824 = bitcast %Type_Info* %4820 to i8*
	%4825 = getelementptr inbounds i8, i8* %4824, i64 8
	%4826 = bitcast i8* %4825 to i64*
	store i64 8, i64* %4826
	; Type_Info_Tuple
	%4827 = bitcast %Type_Info* %4820 to %Type_Info.Tuple*
	%4828 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4827, i64 0, i32 2
	%4829 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 204
	%4830 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 204
	%4831 = getelementptr inbounds %Type_Info*, %Type_Info** %4829, i64 0
	%4832 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4832, %Type_Info** %4831
	%4833 = getelementptr inbounds %..string, %..string* %4830, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$3f7, i64 0, i32 0), i64 3}, %..string* %4833
	%4834 = getelementptr inbounds %Type_Info*, %Type_Info** %4829, i64 1
	%4835 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4835, %Type_Info** %4834
	%4836 = getelementptr inbounds %..string, %..string* %4830, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3f8, i64 0, i32 0), i64 5}, %..string* %4836
	%4837 = getelementptr inbounds %Type_Info*, %Type_Info** %4829, i64 2
	%4838 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4838, %Type_Info** %4837
	%4839 = getelementptr inbounds %..string, %..string* %4830, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$3f9, i64 0, i32 0), i64 9}, %..string* %4839
	%4840 = getelementptr inbounds %Type_Info*, %Type_Info** %4829, i64 3
	%4841 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 154
	store %Type_Info* %4841, %Type_Info** %4840
	%4842 = getelementptr inbounds %..string, %..string* %4830, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$3fa, i64 0, i32 0), i64 5}, %..string* %4842
	%4843 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4828, i64 0, i32 0
	%4844 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4843, i64 0, i32 0
	store %Type_Info** %4829, %Type_Info*** %4844
	%4845 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4843, i64 0, i32 1
	store i64 4, i64* %4845
	%4846 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4843, i64 0, i32 2
	store i64 4, i64* %4846
	%4847 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4828, i64 0, i32 1
	%4848 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4847, i64 0, i32 0
	store %..string* %4830, %..string** %4848
	%4849 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4847, i64 0, i32 1
	store i64 4, i64* %4849
	%4850 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4847, i64 0, i32 2
	store i64 4, i64* %4850
	%4851 = getelementptr inbounds %Type_Info, %Type_Info* %4820, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4851
	%4852 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 154
	%4853 = bitcast %Type_Info* %4852 to i8*
	%4854 = getelementptr inbounds i8, i8* %4853, i64 0
	%4855 = bitcast i8* %4854 to i64*
	store i64 8, i64* %4855
	%4856 = bitcast %Type_Info* %4852 to i8*
	%4857 = getelementptr inbounds i8, i8* %4856, i64 8
	%4858 = bitcast i8* %4857 to i64*
	store i64 8, i64* %4858
	; Type_Info_Pointer
	%4859 = bitcast %Type_Info* %4852 to %Type_Info.Pointer*
	%4860 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%4861 = bitcast %Type_Info* %4860 to %Type_Info*
	%4862 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %4859, i64 0, i32 2
	store %Type_Info* %4861, %Type_Info** %4862
	%4863 = getelementptr inbounds %Type_Info, %Type_Info* %4852, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %4863
	%4864 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 155
	%4865 = bitcast %Type_Info* %4864 to i8*
	%4866 = getelementptr inbounds i8, i8* %4865, i64 0
	%4867 = bitcast i8* %4866 to i64*
	store i64 8, i64* %4867
	%4868 = bitcast %Type_Info* %4864 to i8*
	%4869 = getelementptr inbounds i8, i8* %4868, i64 8
	%4870 = bitcast i8* %4869 to i64*
	store i64 8, i64* %4870
	; Type_Info_Proc
	%4871 = bitcast %Type_Info* %4864 to %Type_Info.Procedure*
	%4872 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4871, i64 0, i32 2
	%4873 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4871, i64 0, i32 3
	%4874 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4871, i64 0, i32 4
	%4875 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4871, i64 0, i32 5
	%4876 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 156
	%4877 = bitcast %Type_Info* %4876 to %Type_Info*
	store %Type_Info* %4877, %Type_Info** %4872
	%4878 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4879 = bitcast %Type_Info* %4878 to %Type_Info*
	store %Type_Info* %4879, %Type_Info** %4873
	store i1 false, i1* %4874
	store i64 1, i64* %4875
	%4880 = getelementptr inbounds %Type_Info, %Type_Info* %4864, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4880
	%4881 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 156
	%4882 = bitcast %Type_Info* %4881 to i8*
	%4883 = getelementptr inbounds i8, i8* %4882, i64 0
	%4884 = bitcast i8* %4883 to i64*
	store i64 16, i64* %4884
	%4885 = bitcast %Type_Info* %4881 to i8*
	%4886 = getelementptr inbounds i8, i8* %4885, i64 8
	%4887 = bitcast i8* %4886 to i64*
	store i64 8, i64* %4887
	; Type_Info_Tuple
	%4888 = bitcast %Type_Info* %4881 to %Type_Info.Tuple*
	%4889 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4888, i64 0, i32 2
	%4890 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 208
	%4891 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 208
	%4892 = getelementptr inbounds %Type_Info*, %Type_Info** %4890, i64 0
	%4893 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4893, %Type_Info** %4892
	%4894 = getelementptr inbounds %..string, %..string* %4891, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3fb, i64 0, i32 0), i64 7}, %..string* %4894
	%4895 = getelementptr inbounds %Type_Info*, %Type_Info** %4890, i64 1
	%4896 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %4896, %Type_Info** %4895
	%4897 = getelementptr inbounds %..string, %..string* %4891, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3fc, i64 0, i32 0), i64 4}, %..string* %4897
	%4898 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4889, i64 0, i32 0
	%4899 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4898, i64 0, i32 0
	store %Type_Info** %4890, %Type_Info*** %4899
	%4900 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4898, i64 0, i32 1
	store i64 2, i64* %4900
	%4901 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4898, i64 0, i32 2
	store i64 2, i64* %4901
	%4902 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4889, i64 0, i32 1
	%4903 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4902, i64 0, i32 0
	store %..string* %4891, %..string** %4903
	%4904 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4902, i64 0, i32 1
	store i64 2, i64* %4904
	%4905 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4902, i64 0, i32 2
	store i64 2, i64* %4905
	%4906 = getelementptr inbounds %Type_Info, %Type_Info* %4881, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4906
	%4907 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%4908 = bitcast %Type_Info* %4907 to i8*
	%4909 = getelementptr inbounds i8, i8* %4908, i64 0
	%4910 = bitcast i8* %4909 to i64*
	store i64 8, i64* %4910
	%4911 = bitcast %Type_Info* %4907 to i8*
	%4912 = getelementptr inbounds i8, i8* %4911, i64 8
	%4913 = bitcast i8* %4912 to i64*
	store i64 8, i64* %4913
	; Type_Info_Pointer
	%4914 = bitcast %Type_Info* %4907 to %Type_Info.Pointer*
	%4915 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%4916 = bitcast %Type_Info* %4915 to %Type_Info*
	%4917 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %4914, i64 0, i32 2
	store %Type_Info* %4916, %Type_Info** %4917
	%4918 = getelementptr inbounds %Type_Info, %Type_Info* %4907, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %4918
	%4919 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4920 = bitcast %Type_Info* %4919 to i8*
	%4921 = getelementptr inbounds i8, i8* %4920, i64 0
	%4922 = bitcast i8* %4921 to i64*
	store i64 4, i64* %4922
	%4923 = bitcast %Type_Info* %4919 to i8*
	%4924 = getelementptr inbounds i8, i8* %4923, i64 8
	%4925 = bitcast i8* %4924 to i64*
	store i64 4, i64* %4925
	; Type_Info_Tuple
	%4926 = bitcast %Type_Info* %4919 to %Type_Info.Tuple*
	%4927 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4926, i64 0, i32 2
	%4928 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 210
	%4929 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 210
	%4930 = getelementptr inbounds %Type_Info*, %Type_Info** %4928, i64 0
	%4931 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %4931, %Type_Info** %4930
	%4932 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4927, i64 0, i32 0
	%4933 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4932, i64 0, i32 0
	store %Type_Info** %4928, %Type_Info*** %4933
	%4934 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4932, i64 0, i32 1
	store i64 1, i64* %4934
	%4935 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4932, i64 0, i32 2
	store i64 1, i64* %4935
	%4936 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4927, i64 0, i32 1
	%4937 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4936, i64 0, i32 0
	store %..string* %4929, %..string** %4937
	%4938 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4936, i64 0, i32 1
	store i64 1, i64* %4938
	%4939 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4936, i64 0, i32 2
	store i64 1, i64* %4939
	%4940 = getelementptr inbounds %Type_Info, %Type_Info* %4919, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4940
	%4941 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 155
	%4942 = bitcast %Type_Info* %4941 to i8*
	%4943 = getelementptr inbounds i8, i8* %4942, i64 0
	%4944 = bitcast i8* %4943 to i64*
	store i64 8, i64* %4944
	%4945 = bitcast %Type_Info* %4941 to i8*
	%4946 = getelementptr inbounds i8, i8* %4945, i64 8
	%4947 = bitcast i8* %4946 to i64*
	store i64 8, i64* %4947
	; Type_Info_Proc
	%4948 = bitcast %Type_Info* %4941 to %Type_Info.Procedure*
	%4949 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4948, i64 0, i32 2
	%4950 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4948, i64 0, i32 3
	%4951 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4948, i64 0, i32 4
	%4952 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %4948, i64 0, i32 5
	%4953 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 156
	%4954 = bitcast %Type_Info* %4953 to %Type_Info*
	store %Type_Info* %4954, %Type_Info** %4949
	%4955 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4956 = bitcast %Type_Info* %4955 to %Type_Info*
	store %Type_Info* %4956, %Type_Info** %4950
	store i1 false, i1* %4951
	store i64 1, i64* %4952
	%4957 = getelementptr inbounds %Type_Info, %Type_Info* %4941, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %4957
	%4958 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 156
	%4959 = bitcast %Type_Info* %4958 to i8*
	%4960 = getelementptr inbounds i8, i8* %4959, i64 0
	%4961 = bitcast i8* %4960 to i64*
	store i64 16, i64* %4961
	%4962 = bitcast %Type_Info* %4958 to i8*
	%4963 = getelementptr inbounds i8, i8* %4962, i64 8
	%4964 = bitcast i8* %4963 to i64*
	store i64 8, i64* %4964
	; Type_Info_Tuple
	%4965 = bitcast %Type_Info* %4958 to %Type_Info.Tuple*
	%4966 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %4965, i64 0, i32 2
	%4967 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 211
	%4968 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 211
	%4969 = getelementptr inbounds %Type_Info*, %Type_Info** %4967, i64 0
	%4970 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %4970, %Type_Info** %4969
	%4971 = getelementptr inbounds %..string, %..string* %4968, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$3fd, i64 0, i32 0), i64 7}, %..string* %4971
	%4972 = getelementptr inbounds %Type_Info*, %Type_Info** %4967, i64 1
	%4973 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %4973, %Type_Info** %4972
	%4974 = getelementptr inbounds %..string, %..string* %4968, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3fe, i64 0, i32 0), i64 4}, %..string* %4974
	%4975 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4966, i64 0, i32 0
	%4976 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4975, i64 0, i32 0
	store %Type_Info** %4967, %Type_Info*** %4976
	%4977 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4975, i64 0, i32 1
	store i64 2, i64* %4977
	%4978 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %4975, i64 0, i32 2
	store i64 2, i64* %4978
	%4979 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %4966, i64 0, i32 1
	%4980 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4979, i64 0, i32 0
	store %..string* %4968, %..string** %4980
	%4981 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4979, i64 0, i32 1
	store i64 2, i64* %4981
	%4982 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %4979, i64 0, i32 2
	store i64 2, i64* %4982
	%4983 = getelementptr inbounds %Type_Info, %Type_Info* %4958, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %4983
	%4984 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%4985 = bitcast %Type_Info* %4984 to i8*
	%4986 = getelementptr inbounds i8, i8* %4985, i64 0
	%4987 = bitcast i8* %4986 to i64*
	store i64 8, i64* %4987
	%4988 = bitcast %Type_Info* %4984 to i8*
	%4989 = getelementptr inbounds i8, i8* %4988, i64 8
	%4990 = bitcast i8* %4989 to i64*
	store i64 8, i64* %4990
	; Type_Info_Pointer
	%4991 = bitcast %Type_Info* %4984 to %Type_Info.Pointer*
	%4992 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%4993 = bitcast %Type_Info* %4992 to %Type_Info*
	%4994 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %4991, i64 0, i32 2
	store %Type_Info* %4993, %Type_Info** %4994
	%4995 = getelementptr inbounds %Type_Info, %Type_Info* %4984, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %4995
	%4996 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%4997 = bitcast %Type_Info* %4996 to i8*
	%4998 = getelementptr inbounds i8, i8* %4997, i64 0
	%4999 = bitcast i8* %4998 to i64*
	store i64 4, i64* %4999
	%5000 = bitcast %Type_Info* %4996 to i8*
	%5001 = getelementptr inbounds i8, i8* %5000, i64 8
	%5002 = bitcast i8* %5001 to i64*
	store i64 4, i64* %5002
	; Type_Info_Tuple
	%5003 = bitcast %Type_Info* %4996 to %Type_Info.Tuple*
	%5004 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %5003, i64 0, i32 2
	%5005 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 213
	%5006 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 213
	%5007 = getelementptr inbounds %Type_Info*, %Type_Info** %5005, i64 0
	%5008 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %5008, %Type_Info** %5007
	%5009 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5004, i64 0, i32 0
	%5010 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5009, i64 0, i32 0
	store %Type_Info** %5005, %Type_Info*** %5010
	%5011 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5009, i64 0, i32 1
	store i64 1, i64* %5011
	%5012 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5009, i64 0, i32 2
	store i64 1, i64* %5012
	%5013 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5004, i64 0, i32 1
	%5014 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5013, i64 0, i32 0
	store %..string* %5006, %..string** %5014
	%5015 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5013, i64 0, i32 1
	store i64 1, i64* %5015
	%5016 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5013, i64 0, i32 2
	store i64 1, i64* %5016
	%5017 = getelementptr inbounds %Type_Info, %Type_Info* %4996, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %5017
	%5018 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%5019 = bitcast %Type_Info* %5018 to i8*
	%5020 = getelementptr inbounds i8, i8* %5019, i64 0
	%5021 = bitcast i8* %5020 to i64*
	store i64 8, i64* %5021
	%5022 = bitcast %Type_Info* %5018 to i8*
	%5023 = getelementptr inbounds i8, i8* %5022, i64 8
	%5024 = bitcast i8* %5023 to i64*
	store i64 8, i64* %5024
	; Type_Info_Proc
	%5025 = bitcast %Type_Info* %5018 to %Type_Info.Procedure*
	%5026 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %5025, i64 0, i32 2
	%5027 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %5025, i64 0, i32 3
	%5028 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %5025, i64 0, i32 4
	%5029 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %5025, i64 0, i32 5
	%5030 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%5031 = bitcast %Type_Info* %5030 to %Type_Info*
	store %Type_Info* %5031, %Type_Info** %5026
	store i1 false, i1* %5028
	store i64 1, i64* %5029
	%5032 = getelementptr inbounds %Type_Info, %Type_Info* %5018, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %5032
	%5033 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%5034 = bitcast %Type_Info* %5033 to i8*
	%5035 = getelementptr inbounds i8, i8* %5034, i64 0
	%5036 = bitcast i8* %5035 to i64*
	store i64 8, i64* %5036
	%5037 = bitcast %Type_Info* %5033 to i8*
	%5038 = getelementptr inbounds i8, i8* %5037, i64 8
	%5039 = bitcast i8* %5038 to i64*
	store i64 4, i64* %5039
	; Type_Info_Tuple
	%5040 = bitcast %Type_Info* %5033 to %Type_Info.Tuple*
	%5041 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %5040, i64 0, i32 2
	%5042 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 214
	%5043 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 214
	%5044 = getelementptr inbounds %Type_Info*, %Type_Info** %5042, i64 0
	%5045 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %5045, %Type_Info** %5044
	%5046 = getelementptr inbounds %..string, %..string* %5043, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$3ff, i64 0, i32 0), i64 4}, %..string* %5046
	%5047 = getelementptr inbounds %Type_Info*, %Type_Info** %5042, i64 1
	%5048 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %5048, %Type_Info** %5047
	%5049 = getelementptr inbounds %..string, %..string* %5043, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$400, i64 0, i32 0), i64 4}, %..string* %5049
	%5050 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5041, i64 0, i32 0
	%5051 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5050, i64 0, i32 0
	store %Type_Info** %5042, %Type_Info*** %5051
	%5052 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5050, i64 0, i32 1
	store i64 2, i64* %5052
	%5053 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5050, i64 0, i32 2
	store i64 2, i64* %5053
	%5054 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5041, i64 0, i32 1
	%5055 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5054, i64 0, i32 0
	store %..string* %5043, %..string** %5055
	%5056 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5054, i64 0, i32 1
	store i64 2, i64* %5056
	%5057 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5054, i64 0, i32 2
	store i64 2, i64* %5057
	%5058 = getelementptr inbounds %Type_Info, %Type_Info* %5033, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %5058
	%5059 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 157
	%5060 = bitcast %Type_Info* %5059 to i8*
	%5061 = getelementptr inbounds i8, i8* %5060, i64 0
	%5062 = bitcast i8* %5061 to i64*
	store i64 4, i64* %5062
	%5063 = bitcast %Type_Info* %5059 to i8*
	%5064 = getelementptr inbounds i8, i8* %5063, i64 8
	%5065 = bitcast i8* %5064 to i64*
	store i64 4, i64* %5065
	; Type_Info_Named
	%5066 = bitcast %Type_Info* %5059 to %Type_Info.Named*
	%5067 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%5068 = bitcast %Type_Info* %5067 to %Type_Info*
	%5069 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5066, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$401, i64 0, i32 0), i64 7}, %..string* %5069
	%5070 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5066, i64 0, i32 3
	store %Type_Info* %5068, %Type_Info** %5070
	%5071 = getelementptr inbounds %Type_Info, %Type_Info* %5059, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5071
	%5072 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%5073 = bitcast %Type_Info* %5072 to i8*
	%5074 = getelementptr inbounds i8, i8* %5073, i64 0
	%5075 = bitcast i8* %5074 to i64*
	store i64 8, i64* %5075
	%5076 = bitcast %Type_Info* %5072 to i8*
	%5077 = getelementptr inbounds i8, i8* %5076, i64 8
	%5078 = bitcast i8* %5077 to i64*
	store i64 8, i64* %5078
	; Type_Info_Pointer
	%5079 = bitcast %Type_Info* %5072 to %Type_Info.Pointer*
	%5080 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%5081 = bitcast %Type_Info* %5080 to %Type_Info*
	%5082 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5079, i64 0, i32 2
	store %Type_Info* %5081, %Type_Info** %5082
	%5083 = getelementptr inbounds %Type_Info, %Type_Info* %5072, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5083
	%5084 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%5085 = bitcast %Type_Info* %5084 to i8*
	%5086 = getelementptr inbounds i8, i8* %5085, i64 0
	%5087 = bitcast i8* %5086 to i64*
	store i64 8, i64* %5087
	%5088 = bitcast %Type_Info* %5084 to i8*
	%5089 = getelementptr inbounds i8, i8* %5088, i64 8
	%5090 = bitcast i8* %5089 to i64*
	store i64 8, i64* %5090
	; Type_Info_Pointer
	%5091 = bitcast %Type_Info* %5084 to %Type_Info.Pointer*
	%5092 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%5093 = bitcast %Type_Info* %5092 to %Type_Info*
	%5094 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5091, i64 0, i32 2
	store %Type_Info* %5093, %Type_Info** %5094
	%5095 = getelementptr inbounds %Type_Info, %Type_Info* %5084, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5095
	%5096 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	%5097 = bitcast %Type_Info* %5096 to i8*
	%5098 = getelementptr inbounds i8, i8* %5097, i64 0
	%5099 = bitcast i8* %5098 to i64*
	store i64 8, i64* %5099
	%5100 = bitcast %Type_Info* %5096 to i8*
	%5101 = getelementptr inbounds i8, i8* %5100, i64 8
	%5102 = bitcast i8* %5101 to i64*
	store i64 8, i64* %5102
	; Type_Info_Pointer
	%5103 = bitcast %Type_Info* %5096 to %Type_Info.Pointer*
	%5104 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%5105 = bitcast %Type_Info* %5104 to %Type_Info*
	%5106 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5103, i64 0, i32 2
	store %Type_Info* %5105, %Type_Info** %5106
	%5107 = getelementptr inbounds %Type_Info, %Type_Info* %5096, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5107
	%5108 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 158
	%5109 = bitcast %Type_Info* %5108 to i8*
	%5110 = getelementptr inbounds i8, i8* %5109, i64 0
	%5111 = bitcast i8* %5110 to i64*
	store i64 8, i64* %5111
	%5112 = bitcast %Type_Info* %5108 to i8*
	%5113 = getelementptr inbounds i8, i8* %5112, i64 8
	%5114 = bitcast i8* %5113 to i64*
	store i64 8, i64* %5114
	; Type_Info_Named
	%5115 = bitcast %Type_Info* %5108 to %Type_Info.Named*
	%5116 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 159
	%5117 = bitcast %Type_Info* %5116 to %Type_Info*
	%5118 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5115, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$402, i64 0, i32 0), i64 13}, %..string* %5118
	%5119 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5115, i64 0, i32 3
	store %Type_Info* %5117, %Type_Info** %5119
	%5120 = getelementptr inbounds %Type_Info, %Type_Info* %5108, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5120
	%5121 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 159
	%5122 = bitcast %Type_Info* %5121 to i8*
	%5123 = getelementptr inbounds i8, i8* %5122, i64 0
	%5124 = bitcast i8* %5123 to i64*
	store i64 8, i64* %5124
	%5125 = bitcast %Type_Info* %5121 to i8*
	%5126 = getelementptr inbounds i8, i8* %5125, i64 8
	%5127 = bitcast i8* %5126 to i64*
	store i64 8, i64* %5127
	; Type_Info_Enum
	%5128 = bitcast %Type_Info* %5121 to %Type_Info.Enum*
	%5129 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%5130 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5128, i64 0, i32 2
	store %Type_Info* %5129, %Type_Info** %5130
	%5131 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-9f, i64 0, i32 0
	%5132 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-9f, i64 0, i32 0
	%5133 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5132 to i64*
	store i64 0, i64* %5133
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$403, i64 0, i32 0), i64 9}, %..string* %5131
	%5134 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-9f, i64 0, i32 1
	%5135 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-9f, i64 0, i32 1
	%5136 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5135 to i64*
	store i64 1, i64* %5136
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$404, i64 0, i32 0), i64 10}, %..string* %5134
	%5137 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-9f, i64 0, i32 2
	%5138 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-9f, i64 0, i32 2
	%5139 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5138 to i64*
	store i64 2, i64* %5139
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$405, i64 0, i32 0), i64 10}, %..string* %5137
	%5140 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-9f, i64 0, i32 3
	%5141 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-9f, i64 0, i32 3
	%5142 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5141 to i64*
	store i64 3, i64* %5142
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$406, i64 0, i32 0), i64 12}, %..string* %5140
	%5143 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-9f, i64 0, i32 4
	%5144 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-9f, i64 0, i32 4
	%5145 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5144 to i64*
	store i64 4, i64* %5145
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$407, i64 0, i32 0), i64 5}, %..string* %5143
	%5146 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5128, i64 0, i32 3
	%5147 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-9f, i64 0, i32 0
	%5148 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5146, i64 0, i32 0
	store %..string* %5147, %..string** %5148
	%5149 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5146, i64 0, i32 1
	store i64 5, i64* %5149
	%5150 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5128, i64 0, i32 4
	%5151 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-9f, i64 0, i32 0
	%5152 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5150, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %5151, {[0 x <8 x i8>], [8 x i8]}** %5152
	%5153 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5150, i64 0, i32 1
	store i64 5, i64* %5153
	%5154 = getelementptr inbounds %Type_Info, %Type_Info* %5121, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %5154
	%5155 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 160
	%5156 = bitcast %Type_Info* %5155 to i8*
	%5157 = getelementptr inbounds i8, i8* %5156, i64 0
	%5158 = bitcast i8* %5157 to i64*
	store i64 8, i64* %5158
	%5159 = bitcast %Type_Info* %5155 to i8*
	%5160 = getelementptr inbounds i8, i8* %5159, i64 8
	%5161 = bitcast i8* %5160 to i64*
	store i64 8, i64* %5161
	; Type_Info_Named
	%5162 = bitcast %Type_Info* %5155 to %Type_Info.Named*
	%5163 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 161
	%5164 = bitcast %Type_Info* %5163 to %Type_Info*
	%5165 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5162, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$408, i64 0, i32 0), i64 14}, %..string* %5165
	%5166 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5162, i64 0, i32 3
	store %Type_Info* %5164, %Type_Info** %5166
	%5167 = getelementptr inbounds %Type_Info, %Type_Info* %5155, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5167
	%5168 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 161
	%5169 = bitcast %Type_Info* %5168 to i8*
	%5170 = getelementptr inbounds i8, i8* %5169, i64 0
	%5171 = bitcast i8* %5170 to i64*
	store i64 8, i64* %5171
	%5172 = bitcast %Type_Info* %5168 to i8*
	%5173 = getelementptr inbounds i8, i8* %5172, i64 8
	%5174 = bitcast i8* %5173 to i64*
	store i64 8, i64* %5174
	; Type_Info_Enum
	%5175 = bitcast %Type_Info* %5168 to %Type_Info.Enum*
	%5176 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%5177 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5175, i64 0, i32 2
	store %Type_Info* %5176, %Type_Info** %5177
	%5178 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 0
	%5179 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 0
	%5180 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5179 to i64*
	store i64 0, i64* %5180
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$409, i64 0, i32 0), i64 7}, %..string* %5178
	%5181 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 1
	%5182 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 1
	%5183 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5182 to i64*
	store i64 1, i64* %5183
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$40a, i64 0, i32 0), i64 7}, %..string* %5181
	%5184 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 2
	%5185 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 2
	%5186 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5185 to i64*
	store i64 2, i64* %5186
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$40b, i64 0, i32 0), i64 5}, %..string* %5184
	%5187 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 3
	%5188 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 3
	%5189 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5188 to i64*
	store i64 3, i64* %5189
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$40c, i64 0, i32 0), i64 11}, %..string* %5187
	%5190 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 4
	%5191 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 4
	%5192 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5191 to i64*
	store i64 4, i64* %5192
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$40d, i64 0, i32 0), i64 11}, %..string* %5190
	%5193 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 5
	%5194 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 5
	%5195 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5194 to i64*
	store i64 5, i64* %5195
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$40e, i64 0, i32 0), i64 8}, %..string* %5193
	%5196 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 6
	%5197 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 6
	%5198 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5197 to i64*
	store i64 6, i64* %5198
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$40f, i64 0, i32 0), i64 6}, %..string* %5196
	%5199 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 7
	%5200 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 7
	%5201 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5200 to i64*
	store i64 7, i64* %5201
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$410, i64 0, i32 0), i64 9}, %..string* %5199
	%5202 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 8
	%5203 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 8
	%5204 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5203 to i64*
	store i64 11, i64* %5204
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$411, i64 0, i32 0), i64 4}, %..string* %5202
	%5205 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 9
	%5206 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 9
	%5207 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5206 to i64*
	store i64 8, i64* %5207
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$412, i64 0, i32 0), i64 7}, %..string* %5205
	%5208 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 10
	%5209 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 10
	%5210 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5209 to i64*
	store i64 19, i64* %5210
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$413, i64 0, i32 0), i64 9}, %..string* %5208
	%5211 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5175, i64 0, i32 3
	%5212 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-a1, i64 0, i32 0
	%5213 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5211, i64 0, i32 0
	store %..string* %5212, %..string** %5213
	%5214 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5211, i64 0, i32 1
	store i64 11, i64* %5214
	%5215 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5175, i64 0, i32 4
	%5216 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a1, i64 0, i32 0
	%5217 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5215, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %5216, {[0 x <8 x i8>], [8 x i8]}** %5217
	%5218 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5215, i64 0, i32 1
	store i64 11, i64* %5218
	%5219 = getelementptr inbounds %Type_Info, %Type_Info* %5168, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %5219
	%5220 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 162
	%5221 = bitcast %Type_Info* %5220 to i8*
	%5222 = getelementptr inbounds i8, i8* %5221, i64 0
	%5223 = bitcast i8* %5222 to i64*
	store i64 8, i64* %5223
	%5224 = bitcast %Type_Info* %5220 to i8*
	%5225 = getelementptr inbounds i8, i8* %5224, i64 8
	%5226 = bitcast i8* %5225 to i64*
	store i64 8, i64* %5226
	; Type_Info_Named
	%5227 = bitcast %Type_Info* %5220 to %Type_Info.Named*
	%5228 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 163
	%5229 = bitcast %Type_Info* %5228 to %Type_Info*
	%5230 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5227, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$414, i64 0, i32 0), i64 4}, %..string* %5230
	%5231 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5227, i64 0, i32 3
	store %Type_Info* %5229, %Type_Info** %5231
	%5232 = getelementptr inbounds %Type_Info, %Type_Info* %5220, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5232
	%5233 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 163
	%5234 = bitcast %Type_Info* %5233 to i8*
	%5235 = getelementptr inbounds i8, i8* %5234, i64 0
	%5236 = bitcast i8* %5235 to i64*
	store i64 8, i64* %5236
	%5237 = bitcast %Type_Info* %5233 to i8*
	%5238 = getelementptr inbounds i8, i8* %5237, i64 8
	%5239 = bitcast i8* %5238 to i64*
	store i64 8, i64* %5239
	; Type_Info_Enum
	%5240 = bitcast %Type_Info* %5233 to %Type_Info.Enum*
	%5241 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%5242 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5240, i64 0, i32 2
	store %Type_Info* %5241, %Type_Info** %5242
	%5243 = getelementptr inbounds [3 x %..string], [3 x %..string]* @.__$enum_names-a3, i64 0, i32 0
	%5244 = getelementptr inbounds [3 x {[0 x <8 x i8>], [8 x i8]}], [3 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a3, i64 0, i32 0
	%5245 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5244 to i64*
	store i64 0, i64* %5245
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$415, i64 0, i32 0), i64 7}, %..string* %5243
	%5246 = getelementptr inbounds [3 x %..string], [3 x %..string]* @.__$enum_names-a3, i64 0, i32 1
	%5247 = getelementptr inbounds [3 x {[0 x <8 x i8>], [8 x i8]}], [3 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a3, i64 0, i32 1
	%5248 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5247 to i64*
	store i64 1, i64* %5248
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$416, i64 0, i32 0), i64 6}, %..string* %5246
	%5249 = getelementptr inbounds [3 x %..string], [3 x %..string]* @.__$enum_names-a3, i64 0, i32 2
	%5250 = getelementptr inbounds [3 x {[0 x <8 x i8>], [8 x i8]}], [3 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a3, i64 0, i32 2
	%5251 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5250 to i64*
	store i64 2, i64* %5251
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$417, i64 0, i32 0), i64 5}, %..string* %5249
	%5252 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5240, i64 0, i32 3
	%5253 = getelementptr inbounds [3 x %..string], [3 x %..string]* @.__$enum_names-a3, i64 0, i32 0
	%5254 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5252, i64 0, i32 0
	store %..string* %5253, %..string** %5254
	%5255 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5252, i64 0, i32 1
	store i64 3, i64* %5255
	%5256 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5240, i64 0, i32 4
	%5257 = getelementptr inbounds [3 x {[0 x <8 x i8>], [8 x i8]}], [3 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-a3, i64 0, i32 0
	%5258 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5256, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %5257, {[0 x <8 x i8>], [8 x i8]}** %5258
	%5259 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5256, i64 0, i32 1
	store i64 3, i64* %5259
	%5260 = getelementptr inbounds %Type_Info, %Type_Info* %5233, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %5260
	%5261 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 164
	%5262 = bitcast %Type_Info* %5261 to i8*
	%5263 = getelementptr inbounds i8, i8* %5262, i64 0
	%5264 = bitcast i8* %5263 to i64*
	store i64 8, i64* %5264
	%5265 = bitcast %Type_Info* %5261 to i8*
	%5266 = getelementptr inbounds i8, i8* %5265, i64 8
	%5267 = bitcast i8* %5266 to i64*
	store i64 8, i64* %5267
	; Type_Info_Pointer
	%5268 = bitcast %Type_Info* %5261 to %Type_Info.Pointer*
	%5269 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 165
	%5270 = bitcast %Type_Info* %5269 to %Type_Info*
	%5271 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5268, i64 0, i32 2
	store %Type_Info* %5270, %Type_Info** %5271
	%5272 = getelementptr inbounds %Type_Info, %Type_Info* %5261, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5272
	%5273 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 165
	%5274 = bitcast %Type_Info* %5273 to i8*
	%5275 = getelementptr inbounds i8, i8* %5274, i64 0
	%5276 = bitcast i8* %5275 to i64*
	store i64 88, i64* %5276
	%5277 = bitcast %Type_Info* %5273 to i8*
	%5278 = getelementptr inbounds i8, i8* %5277, i64 8
	%5279 = bitcast i8* %5278 to i64*
	store i64 8, i64* %5279
	; Type_Info_Named
	%5280 = bitcast %Type_Info* %5273 to %Type_Info.Named*
	%5281 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 166
	%5282 = bitcast %Type_Info* %5281 to %Type_Info*
	%5283 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5280, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$418, i64 0, i32 0), i64 7}, %..string* %5283
	%5284 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5280, i64 0, i32 3
	store %Type_Info* %5282, %Type_Info** %5284
	%5285 = getelementptr inbounds %Type_Info, %Type_Info* %5273, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5285
	%5286 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 166
	%5287 = bitcast %Type_Info* %5286 to i8*
	%5288 = getelementptr inbounds i8, i8* %5287, i64 0
	%5289 = bitcast i8* %5288 to i64*
	store i64 88, i64* %5289
	%5290 = bitcast %Type_Info* %5286 to i8*
	%5291 = getelementptr inbounds i8, i8* %5290, i64 8
	%5292 = bitcast i8* %5291 to i64*
	store i64 8, i64* %5292
	; Type_Info_Struct
	%5293 = bitcast %Type_Info* %5286 to %Type_Info.Struct*
	%5294 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5293, i64 0, i32 2
	%5295 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5294, i64 0, i32 3
	store i1 false, i1* %5295
	%5296 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5294, i64 0, i32 4
	store i1 true, i1* %5296
	%5297 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5294, i64 0, i32 5
	store i1 false, i1* %5297
	%5298 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 216
	%5299 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 216
	%5300 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 90
	%5301 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	%5302 = bitcast %Type_Info* %5301 to %Type_Info*
	%5303 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 0
	%5304 = getelementptr inbounds i64, i64* %5300, i64 0
	%5305 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	store %Type_Info* %5305, %Type_Info** %5303
	%5306 = getelementptr inbounds %..string, %..string* %5299, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$419, i64 0, i32 0), i64 8}, %..string* %5306
	store i64 0, i64* %5304
	%5307 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%5308 = bitcast %Type_Info* %5307 to %Type_Info*
	%5309 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 1
	%5310 = getelementptr inbounds i64, i64* %5300, i64 1
	%5311 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %5311, %Type_Info** %5309
	%5312 = getelementptr inbounds %..string, %..string* %5299, i64 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$41a, i64 0, i32 0), i64 14}, %..string* %5312
	store i64 56, i64* %5310
	%5313 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 157
	%5314 = bitcast %Type_Info* %5313 to %Type_Info*
	%5315 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 2
	%5316 = getelementptr inbounds i64, i64* %5300, i64 2
	%5317 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 157
	store %Type_Info* %5317, %Type_Info** %5315
	%5318 = getelementptr inbounds %..string, %..string* %5299, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$41b, i64 0, i32 0), i64 4}, %..string* %5318
	store i64 60, i64* %5316
	%5319 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%5320 = bitcast %Type_Info* %5319 to %Type_Info*
	%5321 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 3
	%5322 = getelementptr inbounds i64, i64* %5300, i64 3
	%5323 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %5323, %Type_Info** %5321
	%5324 = getelementptr inbounds %..string, %..string* %5299, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$41c, i64 0, i32 0), i64 5}, %..string* %5324
	store i64 64, i64* %5322
	%5325 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%5326 = bitcast %Type_Info* %5325 to %Type_Info*
	%5327 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 4
	%5328 = getelementptr inbounds i64, i64* %5300, i64 4
	%5329 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %5329, %Type_Info** %5327
	%5330 = getelementptr inbounds %..string, %..string* %5299, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$41d, i64 0, i32 0), i64 6}, %..string* %5330
	store i64 68, i64* %5328
	%5331 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%5332 = bitcast %Type_Info* %5331 to %Type_Info*
	%5333 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 5
	%5334 = getelementptr inbounds i64, i64* %5300, i64 5
	%5335 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %5335, %Type_Info** %5333
	%5336 = getelementptr inbounds %..string, %..string* %5299, i64 5
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$41e, i64 0, i32 0), i64 4}, %..string* %5336
	store i64 72, i64* %5334
	%5337 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%5338 = bitcast %Type_Info* %5337 to %Type_Info*
	%5339 = getelementptr inbounds %Type_Info*, %Type_Info** %5298, i64 6
	%5340 = getelementptr inbounds i64, i64* %5300, i64 6
	%5341 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %5341, %Type_Info** %5339
	%5342 = getelementptr inbounds %..string, %..string* %5299, i64 6
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$41f, i64 0, i32 0), i64 4}, %..string* %5342
	store i64 80, i64* %5340
	%5343 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5294, i64 0, i32 0
	%5344 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5343, i64 0, i32 0
	store %Type_Info** %5298, %Type_Info*** %5344
	%5345 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5343, i64 0, i32 1
	store i64 7, i64* %5345
	%5346 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5343, i64 0, i32 2
	store i64 7, i64* %5346
	%5347 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5294, i64 0, i32 1
	%5348 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5347, i64 0, i32 0
	store %..string* %5299, %..string** %5348
	%5349 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5347, i64 0, i32 1
	store i64 7, i64* %5349
	%5350 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5347, i64 0, i32 2
	store i64 7, i64* %5350
	%5351 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5294, i64 0, i32 2
	%5352 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5351, i64 0, i32 0
	store i64* %5300, i64** %5352
	%5353 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5351, i64 0, i32 1
	store i64 7, i64* %5353
	%5354 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5351, i64 0, i32 2
	store i64 7, i64* %5354
	%5355 = getelementptr inbounds %Type_Info, %Type_Info* %5286, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5355
	%5356 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	%5357 = bitcast %Type_Info* %5356 to i8*
	%5358 = getelementptr inbounds i8, i8* %5357, i64 0
	%5359 = bitcast i8* %5358 to i64*
	store i64 56, i64* %5359
	%5360 = bitcast %Type_Info* %5356 to i8*
	%5361 = getelementptr inbounds i8, i8* %5360, i64 8
	%5362 = bitcast i8* %5361 to i64*
	store i64 8, i64* %5362
	; Type_Info_Named
	%5363 = bitcast %Type_Info* %5356 to %Type_Info.Named*
	%5364 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 168
	%5365 = bitcast %Type_Info* %5364 to %Type_Info*
	%5366 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5363, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$420, i64 0, i32 0), i64 10}, %..string* %5366
	%5367 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5363, i64 0, i32 3
	store %Type_Info* %5365, %Type_Info** %5367
	%5368 = getelementptr inbounds %Type_Info, %Type_Info* %5356, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5368
	%5369 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 168
	%5370 = bitcast %Type_Info* %5369 to i8*
	%5371 = getelementptr inbounds i8, i8* %5370, i64 0
	%5372 = bitcast i8* %5371 to i64*
	store i64 56, i64* %5372
	%5373 = bitcast %Type_Info* %5369 to i8*
	%5374 = getelementptr inbounds i8, i8* %5373, i64 8
	%5375 = bitcast i8* %5374 to i64*
	store i64 8, i64* %5375
	; Type_Info_Struct
	%5376 = bitcast %Type_Info* %5369 to %Type_Info.Struct*
	%5377 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5376, i64 0, i32 2
	%5378 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5377, i64 0, i32 3
	store i1 false, i1* %5378
	%5379 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5377, i64 0, i32 4
	store i1 false, i1* %5379
	%5380 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5377, i64 0, i32 5
	store i1 false, i1* %5380
	%5381 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 223
	%5382 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 223
	%5383 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 97
	%5384 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%5385 = bitcast %Type_Info* %5384 to %Type_Info*
	%5386 = getelementptr inbounds %Type_Info*, %Type_Info** %5381, i64 0
	%5387 = getelementptr inbounds i64, i64* %5383, i64 0
	%5388 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	store %Type_Info* %5388, %Type_Info** %5386
	%5389 = getelementptr inbounds %..string, %..string* %5382, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$421, i64 0, i32 0), i64 4}, %..string* %5389
	store i64 0, i64* %5387
	%5390 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%5391 = bitcast %Type_Info* %5390 to %Type_Info*
	%5392 = getelementptr inbounds %Type_Info*, %Type_Info** %5381, i64 1
	%5393 = getelementptr inbounds i64, i64* %5383, i64 1
	%5394 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	store %Type_Info* %5394, %Type_Info** %5392
	%5395 = getelementptr inbounds %..string, %..string* %5382, i64 1
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$422, i64 0, i32 0), i64 3}, %..string* %5395
	store i64 16, i64* %5393
	%5396 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%5397 = bitcast %Type_Info* %5396 to %Type_Info*
	%5398 = getelementptr inbounds %Type_Info*, %Type_Info** %5381, i64 2
	%5399 = getelementptr inbounds i64, i64* %5383, i64 2
	%5400 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	store %Type_Info* %5400, %Type_Info** %5398
	%5401 = getelementptr inbounds %..string, %..string* %5382, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$423, i64 0, i32 0), i64 4}, %..string* %5401
	store i64 32, i64* %5399
	%5402 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%5403 = bitcast %Type_Info* %5402 to %Type_Info*
	%5404 = getelementptr inbounds %Type_Info*, %Type_Info** %5381, i64 3
	%5405 = getelementptr inbounds i64, i64* %5383, i64 3
	%5406 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	store %Type_Info* %5406, %Type_Info** %5404
	%5407 = getelementptr inbounds %..string, %..string* %5382, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$424, i64 0, i32 0), i64 4}, %..string* %5407
	store i64 48, i64* %5405
	%5408 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5377, i64 0, i32 0
	%5409 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5408, i64 0, i32 0
	store %Type_Info** %5381, %Type_Info*** %5409
	%5410 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5408, i64 0, i32 1
	store i64 4, i64* %5410
	%5411 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5408, i64 0, i32 2
	store i64 4, i64* %5411
	%5412 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5377, i64 0, i32 1
	%5413 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5412, i64 0, i32 0
	store %..string* %5382, %..string** %5413
	%5414 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5412, i64 0, i32 1
	store i64 4, i64* %5414
	%5415 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5412, i64 0, i32 2
	store i64 4, i64* %5415
	%5416 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5377, i64 0, i32 2
	%5417 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5416, i64 0, i32 0
	store i64* %5383, i64** %5417
	%5418 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5416, i64 0, i32 1
	store i64 4, i64* %5418
	%5419 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5416, i64 0, i32 2
	store i64 4, i64* %5419
	%5420 = getelementptr inbounds %Type_Info, %Type_Info* %5369, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5420
	%5421 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%5422 = bitcast %Type_Info* %5421 to i8*
	%5423 = getelementptr inbounds i8, i8* %5422, i64 0
	%5424 = bitcast i8* %5423 to i64*
	store i64 8, i64* %5424
	%5425 = bitcast %Type_Info* %5421 to i8*
	%5426 = getelementptr inbounds i8, i8* %5425, i64 8
	%5427 = bitcast i8* %5426 to i64*
	store i64 8, i64* %5427
	; Type_Info_Pointer
	%5428 = bitcast %Type_Info* %5421 to %Type_Info.Pointer*
	%5429 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%5430 = bitcast %Type_Info* %5429 to %Type_Info*
	%5431 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5428, i64 0, i32 2
	store %Type_Info* %5430, %Type_Info** %5431
	%5432 = getelementptr inbounds %Type_Info, %Type_Info* %5421, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5432
	%5433 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%5434 = bitcast %Type_Info* %5433 to i8*
	%5435 = getelementptr inbounds i8, i8* %5434, i64 0
	%5436 = bitcast i8* %5435 to i64*
	store i64 8, i64* %5436
	%5437 = bitcast %Type_Info* %5433 to i8*
	%5438 = getelementptr inbounds i8, i8* %5437, i64 8
	%5439 = bitcast i8* %5438 to i64*
	store i64 8, i64* %5439
	; Type_Info_Pointer
	%5440 = bitcast %Type_Info* %5433 to %Type_Info.Pointer*
	%5441 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%5442 = bitcast %Type_Info* %5441 to %Type_Info*
	%5443 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5440, i64 0, i32 2
	store %Type_Info* %5442, %Type_Info** %5443
	%5444 = getelementptr inbounds %Type_Info, %Type_Info* %5433, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5444
	%5445 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%5446 = bitcast %Type_Info* %5445 to i8*
	%5447 = getelementptr inbounds i8, i8* %5446, i64 0
	%5448 = bitcast i8* %5447 to i64*
	store i64 112, i64* %5448
	%5449 = bitcast %Type_Info* %5445 to i8*
	%5450 = getelementptr inbounds i8, i8* %5449, i64 8
	%5451 = bitcast i8* %5450 to i64*
	store i64 8, i64* %5451
	; Type_Info_Named
	%5452 = bitcast %Type_Info* %5445 to %Type_Info.Named*
	%5453 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 171
	%5454 = bitcast %Type_Info* %5453 to %Type_Info*
	%5455 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5452, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$425, i64 0, i32 0), i64 6}, %..string* %5455
	%5456 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5452, i64 0, i32 3
	store %Type_Info* %5454, %Type_Info** %5456
	%5457 = getelementptr inbounds %Type_Info, %Type_Info* %5445, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5457
	%5458 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 171
	%5459 = bitcast %Type_Info* %5458 to i8*
	%5460 = getelementptr inbounds i8, i8* %5459, i64 0
	%5461 = bitcast i8* %5460 to i64*
	store i64 112, i64* %5461
	%5462 = bitcast %Type_Info* %5458 to i8*
	%5463 = getelementptr inbounds i8, i8* %5462, i64 8
	%5464 = bitcast i8* %5463 to i64*
	store i64 8, i64* %5464
	; Type_Info_Struct
	%5465 = bitcast %Type_Info* %5458 to %Type_Info.Struct*
	%5466 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5465, i64 0, i32 2
	%5467 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5466, i64 0, i32 3
	store i1 false, i1* %5467
	%5468 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5466, i64 0, i32 4
	store i1 true, i1* %5468
	%5469 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5466, i64 0, i32 5
	store i1 false, i1* %5469
	%5470 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 227
	%5471 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 227
	%5472 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 101
	%5473 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	%5474 = bitcast %Type_Info* %5473 to %Type_Info*
	%5475 = getelementptr inbounds %Type_Info*, %Type_Info** %5470, i64 0
	%5476 = getelementptr inbounds i64, i64* %5472, i64 0
	%5477 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	store %Type_Info* %5477, %Type_Info** %5475
	%5478 = getelementptr inbounds %..string, %..string* %5471, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$426, i64 0, i32 0), i64 8}, %..string* %5478
	store i64 0, i64* %5476
	%5479 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%5480 = bitcast %Type_Info* %5479 to %Type_Info*
	%5481 = getelementptr inbounds %Type_Info*, %Type_Info** %5470, i64 1
	%5482 = getelementptr inbounds i64, i64* %5472, i64 1
	%5483 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %5483, %Type_Info** %5481
	%5484 = getelementptr inbounds %..string, %..string* %5471, i64 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$427, i64 0, i32 0), i64 14}, %..string* %5484
	store i64 56, i64* %5482
	%5485 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	%5486 = bitcast %Type_Info* %5485 to %Type_Info*
	%5487 = getelementptr inbounds %Type_Info*, %Type_Info** %5470, i64 2
	%5488 = getelementptr inbounds i64, i64* %5472, i64 2
	%5489 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	store %Type_Info* %5489, %Type_Info** %5487
	%5490 = getelementptr inbounds %..string, %..string* %5471, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$428, i64 0, i32 0), i64 4}, %..string* %5490
	store i64 60, i64* %5488
	%5491 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 173
	%5492 = bitcast %Type_Info* %5491 to %Type_Info*
	%5493 = getelementptr inbounds %Type_Info*, %Type_Info** %5470, i64 3
	%5494 = getelementptr inbounds i64, i64* %5472, i64 3
	%5495 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 173
	store %Type_Info* %5495, %Type_Info** %5493
	%5496 = getelementptr inbounds %..string, %..string* %5471, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$429, i64 0, i32 0), i64 4}, %..string* %5496
	store i64 64, i64* %5494
	%5497 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%5498 = bitcast %Type_Info* %5497 to %Type_Info*
	%5499 = getelementptr inbounds %Type_Info*, %Type_Info** %5470, i64 4
	%5500 = getelementptr inbounds i64, i64* %5472, i64 4
	%5501 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	store %Type_Info* %5501, %Type_Info** %5499
	%5502 = getelementptr inbounds %..string, %..string* %5471, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$42a, i64 0, i32 0), i64 6}, %..string* %5502
	store i64 72, i64* %5500
	%5503 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 175
	%5504 = bitcast %Type_Info* %5503 to %Type_Info*
	%5505 = getelementptr inbounds %Type_Info*, %Type_Info** %5470, i64 5
	%5506 = getelementptr inbounds i64, i64* %5472, i64 5
	%5507 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 175
	store %Type_Info* %5507, %Type_Info** %5505
	%5508 = getelementptr inbounds %..string, %..string* %5471, i64 5
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$42b, i64 0, i32 0), i64 4}, %..string* %5508
	store i64 88, i64* %5506
	%5509 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5466, i64 0, i32 0
	%5510 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5509, i64 0, i32 0
	store %Type_Info** %5470, %Type_Info*** %5510
	%5511 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5509, i64 0, i32 1
	store i64 6, i64* %5511
	%5512 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5509, i64 0, i32 2
	store i64 6, i64* %5512
	%5513 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5466, i64 0, i32 1
	%5514 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5513, i64 0, i32 0
	store %..string* %5471, %..string** %5514
	%5515 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5513, i64 0, i32 1
	store i64 6, i64* %5515
	%5516 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5513, i64 0, i32 2
	store i64 6, i64* %5516
	%5517 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5466, i64 0, i32 2
	%5518 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5517, i64 0, i32 0
	store i64* %5472, i64** %5518
	%5519 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5517, i64 0, i32 1
	store i64 6, i64* %5519
	%5520 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5517, i64 0, i32 2
	store i64 6, i64* %5520
	%5521 = getelementptr inbounds %Type_Info, %Type_Info* %5458, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5521
	%5522 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	%5523 = bitcast %Type_Info* %5522 to i8*
	%5524 = getelementptr inbounds i8, i8* %5523, i64 0
	%5525 = bitcast i8* %5524 to i64*
	store i64 4, i64* %5525
	%5526 = bitcast %Type_Info* %5522 to i8*
	%5527 = getelementptr inbounds i8, i8* %5526, i64 8
	%5528 = bitcast i8* %5527 to i64*
	store i64 4, i64* %5528
	; Type_Info_Named
	%5529 = bitcast %Type_Info* %5522 to %Type_Info.Named*
	%5530 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%5531 = bitcast %Type_Info* %5530 to %Type_Info*
	%5532 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5529, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$42c, i64 0, i32 0), i64 6}, %..string* %5532
	%5533 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5529, i64 0, i32 3
	store %Type_Info* %5531, %Type_Info** %5533
	%5534 = getelementptr inbounds %Type_Info, %Type_Info* %5522, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5534
	%5535 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 173
	%5536 = bitcast %Type_Info* %5535 to i8*
	%5537 = getelementptr inbounds i8, i8* %5536, i64 0
	%5538 = bitcast i8* %5537 to i64*
	store i64 8, i64* %5538
	%5539 = bitcast %Type_Info* %5535 to i8*
	%5540 = getelementptr inbounds i8, i8* %5539, i64 8
	%5541 = bitcast i8* %5540 to i64*
	store i64 8, i64* %5541
	; Type_Info_Named
	%5542 = bitcast %Type_Info* %5535 to %Type_Info.Named*
	%5543 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 174
	%5544 = bitcast %Type_Info* %5543 to %Type_Info*
	%5545 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5542, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$42d, i64 0, i32 0), i64 11}, %..string* %5545
	%5546 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5542, i64 0, i32 3
	store %Type_Info* %5544, %Type_Info** %5546
	%5547 = getelementptr inbounds %Type_Info, %Type_Info* %5535, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5547
	%5548 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 174
	%5549 = bitcast %Type_Info* %5548 to i8*
	%5550 = getelementptr inbounds i8, i8* %5549, i64 0
	%5551 = bitcast i8* %5550 to i64*
	store i64 8, i64* %5551
	%5552 = bitcast %Type_Info* %5548 to i8*
	%5553 = getelementptr inbounds i8, i8* %5552, i64 8
	%5554 = bitcast i8* %5553 to i64*
	store i64 8, i64* %5554
	; Type_Info_Enum
	%5555 = bitcast %Type_Info* %5548 to %Type_Info.Enum*
	%5556 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%5557 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5555, i64 0, i32 2
	store %Type_Info* %5556, %Type_Info** %5557
	%5558 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 0
	%5559 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 0
	%5560 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5559 to i64*
	store i64 37305, i64* %5560
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$42e, i64 0, i32 0), i64 7}, %..string* %5558
	%5561 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 1
	%5562 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 1
	%5563 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5562 to i64*
	store i64 35633, i64* %5563
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$42f, i64 0, i32 0), i64 6}, %..string* %5561
	%5564 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 2
	%5565 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 2
	%5566 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5565 to i64*
	store i64 36488, i64* %5566
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$430, i64 0, i32 0), i64 11}, %..string* %5564
	%5567 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 3
	%5568 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 3
	%5569 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5568 to i64*
	store i64 36487, i64* %5569
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$431, i64 0, i32 0), i64 14}, %..string* %5567
	%5570 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 4
	%5571 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 4
	%5572 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5571 to i64*
	store i64 36313, i64* %5572
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$432, i64 0, i32 0), i64 8}, %..string* %5570
	%5573 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 5
	%5574 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 5
	%5575 = bitcast {[0 x <8 x i8>], [8 x i8]}* %5574 to i64*
	store i64 35632, i64* %5575
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$433, i64 0, i32 0), i64 8}, %..string* %5573
	%5576 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5555, i64 0, i32 3
	%5577 = getelementptr inbounds [6 x %..string], [6 x %..string]* @.__$enum_names-ae, i64 0, i32 0
	%5578 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5576, i64 0, i32 0
	store %..string* %5577, %..string** %5578
	%5579 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5576, i64 0, i32 1
	store i64 6, i64* %5579
	%5580 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %5555, i64 0, i32 4
	%5581 = getelementptr inbounds [6 x {[0 x <8 x i8>], [8 x i8]}], [6 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-ae, i64 0, i32 0
	%5582 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5580, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %5581, {[0 x <8 x i8>], [8 x i8]}** %5582
	%5583 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %5580, i64 0, i32 1
	store i64 6, i64* %5583
	%5584 = getelementptr inbounds %Type_Info, %Type_Info* %5548, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %5584
	%5585 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 175
	%5586 = bitcast %Type_Info* %5585 to i8*
	%5587 = getelementptr inbounds i8, i8* %5586, i64 0
	%5588 = bitcast i8* %5587 to i64*
	store i64 24, i64* %5588
	%5589 = bitcast %Type_Info* %5585 to i8*
	%5590 = getelementptr inbounds i8, i8* %5589, i64 8
	%5591 = bitcast i8* %5590 to i64*
	store i64 8, i64* %5591
	; Type_Info_Slice
	%5592 = bitcast %Type_Info* %5585 to %Type_Info.Slice*
	%5593 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%5594 = bitcast %Type_Info* %5593 to %Type_Info*
	%5595 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %5592, i64 0, i32 2
	store %Type_Info* %5594, %Type_Info** %5595
	%5596 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %5592, i64 0, i32 3
	store i64 1, i64* %5596
	%5597 = getelementptr inbounds %Type_Info, %Type_Info* %5585, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %5597
	%5598 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%5599 = bitcast %Type_Info* %5598 to i8*
	%5600 = getelementptr inbounds i8, i8* %5599, i64 0
	%5601 = bitcast i8* %5600 to i64*
	store i64 8, i64* %5601
	%5602 = bitcast %Type_Info* %5598 to i8*
	%5603 = getelementptr inbounds i8, i8* %5602, i64 8
	%5604 = bitcast i8* %5603 to i64*
	store i64 8, i64* %5604
	; Type_Info_Pointer
	%5605 = bitcast %Type_Info* %5598 to %Type_Info.Pointer*
	%5606 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%5607 = bitcast %Type_Info* %5606 to %Type_Info*
	%5608 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5605, i64 0, i32 2
	store %Type_Info* %5607, %Type_Info** %5608
	%5609 = getelementptr inbounds %Type_Info, %Type_Info* %5598, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5609
	%5610 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 176
	%5611 = bitcast %Type_Info* %5610 to i8*
	%5612 = getelementptr inbounds i8, i8* %5611, i64 0
	%5613 = bitcast i8* %5612 to i64*
	store i64 8, i64* %5613
	%5614 = bitcast %Type_Info* %5610 to i8*
	%5615 = getelementptr inbounds i8, i8* %5614, i64 8
	%5616 = bitcast i8* %5615 to i64*
	store i64 8, i64* %5616
	; Type_Info_Pointer
	%5617 = bitcast %Type_Info* %5610 to %Type_Info.Pointer*
	%5618 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 177
	%5619 = bitcast %Type_Info* %5618 to %Type_Info*
	%5620 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5617, i64 0, i32 2
	store %Type_Info* %5619, %Type_Info** %5620
	%5621 = getelementptr inbounds %Type_Info, %Type_Info* %5610, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5621
	%5622 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 177
	%5623 = bitcast %Type_Info* %5622 to i8*
	%5624 = getelementptr inbounds i8, i8* %5623, i64 0
	%5625 = bitcast i8* %5624 to i64*
	store i64 424, i64* %5625
	%5626 = bitcast %Type_Info* %5622 to i8*
	%5627 = getelementptr inbounds i8, i8* %5626, i64 8
	%5628 = bitcast i8* %5627 to i64*
	store i64 8, i64* %5628
	; Type_Info_Named
	%5629 = bitcast %Type_Info* %5622 to %Type_Info.Named*
	%5630 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 178
	%5631 = bitcast %Type_Info* %5630 to %Type_Info*
	%5632 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5629, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$434, i64 0, i32 0), i64 5}, %..string* %5632
	%5633 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5629, i64 0, i32 3
	store %Type_Info* %5631, %Type_Info** %5633
	%5634 = getelementptr inbounds %Type_Info, %Type_Info* %5622, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5634
	%5635 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 178
	%5636 = bitcast %Type_Info* %5635 to i8*
	%5637 = getelementptr inbounds i8, i8* %5636, i64 0
	%5638 = bitcast i8* %5637 to i64*
	store i64 424, i64* %5638
	%5639 = bitcast %Type_Info* %5635 to i8*
	%5640 = getelementptr inbounds i8, i8* %5639, i64 8
	%5641 = bitcast i8* %5640 to i64*
	store i64 8, i64* %5641
	; Type_Info_Union
	%5642 = bitcast %Type_Info* %5635 to %Type_Info.Union*
	%5643 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %5642, i64 0, i32 2
	%5644 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 233
	%5645 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 233
	%5646 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 107
	%5647 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	%5648 = bitcast %Type_Info* %5647 to %Type_Info*
	%5649 = getelementptr inbounds %Type_Info*, %Type_Info** %5644, i64 0
	%5650 = getelementptr inbounds i64, i64* %5646, i64 0
	%5651 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	store %Type_Info* %5651, %Type_Info** %5649
	%5652 = getelementptr inbounds %..string, %..string* %5645, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$435, i64 0, i32 0), i64 8}, %..string* %5652
	store i64 0, i64* %5650
	%5653 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%5654 = bitcast %Type_Info* %5653 to %Type_Info*
	%5655 = getelementptr inbounds %Type_Info*, %Type_Info** %5644, i64 1
	%5656 = getelementptr inbounds i64, i64* %5646, i64 1
	%5657 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %5657, %Type_Info** %5655
	%5658 = getelementptr inbounds %..string, %..string* %5645, i64 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$436, i64 0, i32 0), i64 14}, %..string* %5658
	store i64 56, i64* %5656
	%5659 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %5643, i64 0, i32 0
	%5660 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5659, i64 0, i32 0
	store %Type_Info** %5644, %Type_Info*** %5660
	%5661 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5659, i64 0, i32 1
	store i64 2, i64* %5661
	%5662 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5659, i64 0, i32 2
	store i64 2, i64* %5662
	%5663 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %5643, i64 0, i32 1
	%5664 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5663, i64 0, i32 0
	store %..string* %5645, %..string** %5664
	%5665 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5663, i64 0, i32 1
	store i64 2, i64* %5665
	%5666 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5663, i64 0, i32 2
	store i64 2, i64* %5666
	%5667 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %5643, i64 0, i32 2
	%5668 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5667, i64 0, i32 0
	store i64* %5646, i64** %5668
	%5669 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5667, i64 0, i32 1
	store i64 2, i64* %5669
	%5670 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5667, i64 0, i32 2
	store i64 2, i64* %5670
	%5671 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %5642, i64 0, i32 3
	%5672 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %5642, i64 0, i32 4
	%5673 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 235
	%5674 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 235
	%5675 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 165
	%5676 = bitcast %Type_Info* %5675 to %Type_Info*
	%5677 = getelementptr inbounds %Type_Info*, %Type_Info** %5674, i64 0
	%5678 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 165
	store %Type_Info* %5678, %Type_Info** %5677
	%5679 = getelementptr inbounds %..string, %..string* %5673, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$437, i64 0, i32 0), i64 7}, %..string* %5679
	%5680 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%5681 = bitcast %Type_Info* %5680 to %Type_Info*
	%5682 = getelementptr inbounds %Type_Info*, %Type_Info** %5674, i64 1
	%5683 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	store %Type_Info* %5683, %Type_Info** %5682
	%5684 = getelementptr inbounds %..string, %..string* %5673, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$438, i64 0, i32 0), i64 6}, %..string* %5684
	%5685 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 179
	%5686 = bitcast %Type_Info* %5685 to %Type_Info*
	%5687 = getelementptr inbounds %Type_Info*, %Type_Info** %5674, i64 2
	%5688 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 179
	store %Type_Info* %5688, %Type_Info** %5687
	%5689 = getelementptr inbounds %..string, %..string* %5673, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$439, i64 0, i32 0), i64 5}, %..string* %5689
	%5690 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 181
	%5691 = bitcast %Type_Info* %5690 to %Type_Info*
	%5692 = getelementptr inbounds %Type_Info*, %Type_Info** %5674, i64 3
	%5693 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 181
	store %Type_Info* %5693, %Type_Info** %5692
	%5694 = getelementptr inbounds %..string, %..string* %5673, i64 3
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$43a, i64 0, i32 0), i64 13}, %..string* %5694
	%5695 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5671, i64 0, i32 0
	store %..string* %5673, %..string** %5695
	%5696 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5671, i64 0, i32 1
	store i64 4, i64* %5696
	%5697 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5671, i64 0, i32 2
	store i64 4, i64* %5697
	%5698 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5672, i64 0, i32 0
	store %Type_Info** %5674, %Type_Info*** %5698
	%5699 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5672, i64 0, i32 1
	store i64 4, i64* %5699
	%5700 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5672, i64 0, i32 2
	store i64 4, i64* %5700
	%5701 = getelementptr inbounds %Type_Info, %Type_Info* %5635, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %5701
	%5702 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 179
	%5703 = bitcast %Type_Info* %5702 to i8*
	%5704 = getelementptr inbounds i8, i8* %5703, i64 0
	%5705 = bitcast i8* %5704 to i64*
	store i64 64, i64* %5705
	%5706 = bitcast %Type_Info* %5702 to i8*
	%5707 = getelementptr inbounds i8, i8* %5706, i64 8
	%5708 = bitcast i8* %5707 to i64*
	store i64 8, i64* %5708
	; Type_Info_Named
	%5709 = bitcast %Type_Info* %5702 to %Type_Info.Named*
	%5710 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 180
	%5711 = bitcast %Type_Info* %5710 to %Type_Info*
	%5712 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5709, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$43b, i64 0, i32 0), i64 5}, %..string* %5712
	%5713 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5709, i64 0, i32 3
	store %Type_Info* %5711, %Type_Info** %5713
	%5714 = getelementptr inbounds %Type_Info, %Type_Info* %5702, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5714
	%5715 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 180
	%5716 = bitcast %Type_Info* %5715 to i8*
	%5717 = getelementptr inbounds i8, i8* %5716, i64 0
	%5718 = bitcast i8* %5717 to i64*
	store i64 64, i64* %5718
	%5719 = bitcast %Type_Info* %5715 to i8*
	%5720 = getelementptr inbounds i8, i8* %5719, i64 8
	%5721 = bitcast i8* %5720 to i64*
	store i64 8, i64* %5721
	; Type_Info_Struct
	%5722 = bitcast %Type_Info* %5715 to %Type_Info.Struct*
	%5723 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5722, i64 0, i32 2
	%5724 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5723, i64 0, i32 3
	store i1 false, i1* %5724
	%5725 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5723, i64 0, i32 4
	store i1 true, i1* %5725
	%5726 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5723, i64 0, i32 5
	store i1 false, i1* %5726
	%5727 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 239
	%5728 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 239
	%5729 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 109
	%5730 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	%5731 = bitcast %Type_Info* %5730 to %Type_Info*
	%5732 = getelementptr inbounds %Type_Info*, %Type_Info** %5727, i64 0
	%5733 = getelementptr inbounds i64, i64* %5729, i64 0
	%5734 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	store %Type_Info* %5734, %Type_Info** %5732
	%5735 = getelementptr inbounds %..string, %..string* %5728, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$43c, i64 0, i32 0), i64 8}, %..string* %5735
	store i64 0, i64* %5733
	%5736 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%5737 = bitcast %Type_Info* %5736 to %Type_Info*
	%5738 = getelementptr inbounds %Type_Info*, %Type_Info** %5727, i64 1
	%5739 = getelementptr inbounds i64, i64* %5729, i64 1
	%5740 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %5740, %Type_Info** %5738
	%5741 = getelementptr inbounds %..string, %..string* %5728, i64 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$43d, i64 0, i32 0), i64 14}, %..string* %5741
	store i64 56, i64* %5739
	%5742 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5723, i64 0, i32 0
	%5743 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5742, i64 0, i32 0
	store %Type_Info** %5727, %Type_Info*** %5743
	%5744 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5742, i64 0, i32 1
	store i64 2, i64* %5744
	%5745 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5742, i64 0, i32 2
	store i64 2, i64* %5745
	%5746 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5723, i64 0, i32 1
	%5747 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5746, i64 0, i32 0
	store %..string* %5728, %..string** %5747
	%5748 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5746, i64 0, i32 1
	store i64 2, i64* %5748
	%5749 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5746, i64 0, i32 2
	store i64 2, i64* %5749
	%5750 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5723, i64 0, i32 2
	%5751 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5750, i64 0, i32 0
	store i64* %5729, i64** %5751
	%5752 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5750, i64 0, i32 1
	store i64 2, i64* %5752
	%5753 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5750, i64 0, i32 2
	store i64 2, i64* %5753
	%5754 = getelementptr inbounds %Type_Info, %Type_Info* %5715, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5754
	%5755 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 181
	%5756 = bitcast %Type_Info* %5755 to i8*
	%5757 = getelementptr inbounds i8, i8* %5756, i64 0
	%5758 = bitcast i8* %5757 to i64*
	store i64 416, i64* %5758
	%5759 = bitcast %Type_Info* %5755 to i8*
	%5760 = getelementptr inbounds i8, i8* %5759, i64 8
	%5761 = bitcast i8* %5760 to i64*
	store i64 8, i64* %5761
	; Type_Info_Named
	%5762 = bitcast %Type_Info* %5755 to %Type_Info.Named*
	%5763 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 182
	%5764 = bitcast %Type_Info* %5763 to %Type_Info*
	%5765 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5762, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$43e, i64 0, i32 0), i64 13}, %..string* %5765
	%5766 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5762, i64 0, i32 3
	store %Type_Info* %5764, %Type_Info** %5766
	%5767 = getelementptr inbounds %Type_Info, %Type_Info* %5755, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5767
	%5768 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 182
	%5769 = bitcast %Type_Info* %5768 to i8*
	%5770 = getelementptr inbounds i8, i8* %5769, i64 0
	%5771 = bitcast i8* %5770 to i64*
	store i64 416, i64* %5771
	%5772 = bitcast %Type_Info* %5768 to i8*
	%5773 = getelementptr inbounds i8, i8* %5772, i64 8
	%5774 = bitcast i8* %5773 to i64*
	store i64 8, i64* %5774
	; Type_Info_Struct
	%5775 = bitcast %Type_Info* %5768 to %Type_Info.Struct*
	%5776 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5775, i64 0, i32 2
	%5777 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5776, i64 0, i32 3
	store i1 false, i1* %5777
	%5778 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5776, i64 0, i32 4
	store i1 true, i1* %5778
	%5779 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5776, i64 0, i32 5
	store i1 false, i1* %5779
	%5780 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 241
	%5781 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 241
	%5782 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 111
	%5783 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	%5784 = bitcast %Type_Info* %5783 to %Type_Info*
	%5785 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 0
	%5786 = getelementptr inbounds i64, i64* %5782, i64 0
	%5787 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 167
	store %Type_Info* %5787, %Type_Info** %5785
	%5788 = getelementptr inbounds %..string, %..string* %5781, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$43f, i64 0, i32 0), i64 8}, %..string* %5788
	store i64 0, i64* %5786
	%5789 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%5790 = bitcast %Type_Info* %5789 to %Type_Info*
	%5791 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 1
	%5792 = getelementptr inbounds i64, i64* %5782, i64 1
	%5793 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %5793, %Type_Info** %5791
	%5794 = getelementptr inbounds %..string, %..string* %5781, i64 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$440, i64 0, i32 0), i64 14}, %..string* %5794
	store i64 56, i64* %5792
	%5795 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 183
	%5796 = bitcast %Type_Info* %5795 to %Type_Info*
	%5797 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 2
	%5798 = getelementptr inbounds i64, i64* %5782, i64 2
	%5799 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 183
	store %Type_Info* %5799, %Type_Info** %5797
	%5800 = getelementptr inbounds %..string, %..string* %5781, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$441, i64 0, i32 0), i64 4}, %..string* %5800
	store i64 64, i64* %5798
	%5801 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%5802 = bitcast %Type_Info* %5801 to %Type_Info*
	%5803 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 3
	%5804 = getelementptr inbounds i64, i64* %5782, i64 3
	%5805 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	store %Type_Info* %5805, %Type_Info** %5803
	%5806 = getelementptr inbounds %..string, %..string* %5781, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$442, i64 0, i32 0), i64 6}, %..string* %5806
	store i64 240, i64* %5804
	%5807 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%5808 = bitcast %Type_Info* %5807 to %Type_Info*
	%5809 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 4
	%5810 = getelementptr inbounds i64, i64* %5782, i64 4
	%5811 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	store %Type_Info* %5811, %Type_Info** %5809
	%5812 = getelementptr inbounds %..string, %..string* %5781, i64 4
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$443, i64 0, i32 0), i64 8}, %..string* %5812
	store i64 248, i64* %5810
	%5813 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%5814 = bitcast %Type_Info* %5813 to %Type_Info*
	%5815 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 5
	%5816 = getelementptr inbounds i64, i64* %5782, i64 5
	%5817 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	store %Type_Info* %5817, %Type_Info** %5815
	%5818 = getelementptr inbounds %..string, %..string* %5781, i64 5
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$444, i64 0, i32 0), i64 8}, %..string* %5818
	store i64 256, i64* %5816
	%5819 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%5820 = bitcast %Type_Info* %5819 to %Type_Info*
	%5821 = getelementptr inbounds %Type_Info*, %Type_Info** %5780, i64 6
	%5822 = getelementptr inbounds i64, i64* %5782, i64 6
	%5823 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	store %Type_Info* %5823, %Type_Info** %5821
	%5824 = getelementptr inbounds %..string, %..string* %5781, i64 6
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$445, i64 0, i32 0), i64 10}, %..string* %5824
	store i64 336, i64* %5822
	%5825 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5776, i64 0, i32 0
	%5826 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5825, i64 0, i32 0
	store %Type_Info** %5780, %Type_Info*** %5826
	%5827 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5825, i64 0, i32 1
	store i64 7, i64* %5827
	%5828 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5825, i64 0, i32 2
	store i64 7, i64* %5828
	%5829 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5776, i64 0, i32 1
	%5830 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5829, i64 0, i32 0
	store %..string* %5781, %..string** %5830
	%5831 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5829, i64 0, i32 1
	store i64 7, i64* %5831
	%5832 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5829, i64 0, i32 2
	store i64 7, i64* %5832
	%5833 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5776, i64 0, i32 2
	%5834 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5833, i64 0, i32 0
	store i64* %5782, i64** %5834
	%5835 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5833, i64 0, i32 1
	store i64 7, i64* %5835
	%5836 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5833, i64 0, i32 2
	store i64 7, i64* %5836
	%5837 = getelementptr inbounds %Type_Info, %Type_Info* %5768, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5837
	%5838 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 183
	%5839 = bitcast %Type_Info* %5838 to i8*
	%5840 = getelementptr inbounds i8, i8* %5839, i64 0
	%5841 = bitcast i8* %5840 to i64*
	store i64 176, i64* %5841
	%5842 = bitcast %Type_Info* %5838 to i8*
	%5843 = getelementptr inbounds i8, i8* %5842, i64 8
	%5844 = bitcast i8* %5843 to i64*
	store i64 8, i64* %5844
	; Type_Info_Named
	%5845 = bitcast %Type_Info* %5838 to %Type_Info.Named*
	%5846 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 184
	%5847 = bitcast %Type_Info* %5846 to %Type_Info*
	%5848 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5845, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$446, i64 0, i32 0), i64 7}, %..string* %5848
	%5849 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %5845, i64 0, i32 3
	store %Type_Info* %5847, %Type_Info** %5849
	%5850 = getelementptr inbounds %Type_Info, %Type_Info* %5838, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %5850
	%5851 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 184
	%5852 = bitcast %Type_Info* %5851 to i8*
	%5853 = getelementptr inbounds i8, i8* %5852, i64 0
	%5854 = bitcast i8* %5853 to i64*
	store i64 176, i64* %5854
	%5855 = bitcast %Type_Info* %5851 to i8*
	%5856 = getelementptr inbounds i8, i8* %5855, i64 8
	%5857 = bitcast i8* %5856 to i64*
	store i64 8, i64* %5857
	; Type_Info_Struct
	%5858 = bitcast %Type_Info* %5851 to %Type_Info.Struct*
	%5859 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5858, i64 0, i32 2
	%5860 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5859, i64 0, i32 3
	store i1 false, i1* %5860
	%5861 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5859, i64 0, i32 4
	store i1 false, i1* %5861
	%5862 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5859, i64 0, i32 5
	store i1 false, i1* %5862
	%5863 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 248
	%5864 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 248
	%5865 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 118
	%5866 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%5867 = bitcast %Type_Info* %5866 to %Type_Info*
	%5868 = getelementptr inbounds %Type_Info*, %Type_Info** %5863, i64 0
	%5869 = getelementptr inbounds i64, i64* %5865, i64 0
	%5870 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	store %Type_Info* %5870, %Type_Info** %5868
	%5871 = getelementptr inbounds %..string, %..string* %5864, i64 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$447, i64 0, i32 0), i64 2}, %..string* %5871
	store i64 160, i64* %5869
	%5872 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	%5873 = bitcast %Type_Info* %5872 to %Type_Info*
	%5874 = getelementptr inbounds %Type_Info*, %Type_Info** %5863, i64 1
	%5875 = getelementptr inbounds i64, i64* %5865, i64 1
	%5876 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	store %Type_Info* %5876, %Type_Info** %5874
	%5877 = getelementptr inbounds %..string, %..string* %5864, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$448, i64 0, i32 0), i64 6}, %..string* %5877
	store i64 164, i64* %5875
	%5878 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	%5879 = bitcast %Type_Info* %5878 to %Type_Info*
	%5880 = getelementptr inbounds %Type_Info*, %Type_Info** %5863, i64 2
	%5881 = getelementptr inbounds i64, i64* %5865, i64 2
	%5882 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 172
	store %Type_Info* %5882, %Type_Info** %5880
	%5883 = getelementptr inbounds %..string, %..string* %5864, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$449, i64 0, i32 0), i64 8}, %..string* %5883
	store i64 168, i64* %5881
	%5884 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%5885 = bitcast %Type_Info* %5884 to %Type_Info*
	%5886 = getelementptr inbounds %Type_Info*, %Type_Info** %5863, i64 3
	%5887 = getelementptr inbounds i64, i64* %5865, i64 3
	%5888 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	store %Type_Info* %5888, %Type_Info** %5886
	%5889 = getelementptr inbounds %..string, %..string* %5864, i64 3
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$44a, i64 0, i32 0), i64 8}, %..string* %5889
	store i64 0, i64* %5887
	%5890 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%5891 = bitcast %Type_Info* %5890 to %Type_Info*
	%5892 = getelementptr inbounds %Type_Info*, %Type_Info** %5863, i64 4
	%5893 = getelementptr inbounds i64, i64* %5865, i64 4
	%5894 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	store %Type_Info* %5894, %Type_Info** %5892
	%5895 = getelementptr inbounds %..string, %..string* %5864, i64 4
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$44b, i64 0, i32 0), i64 10}, %..string* %5895
	store i64 80, i64* %5893
	%5896 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5859, i64 0, i32 0
	%5897 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5896, i64 0, i32 0
	store %Type_Info** %5863, %Type_Info*** %5897
	%5898 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5896, i64 0, i32 1
	store i64 5, i64* %5898
	%5899 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5896, i64 0, i32 2
	store i64 5, i64* %5899
	%5900 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5859, i64 0, i32 1
	%5901 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5900, i64 0, i32 0
	store %..string* %5864, %..string** %5901
	%5902 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5900, i64 0, i32 1
	store i64 5, i64* %5902
	%5903 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5900, i64 0, i32 2
	store i64 5, i64* %5903
	%5904 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5859, i64 0, i32 2
	%5905 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5904, i64 0, i32 0
	store i64* %5865, i64** %5905
	%5906 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5904, i64 0, i32 1
	store i64 5, i64* %5906
	%5907 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5904, i64 0, i32 2
	store i64 5, i64* %5907
	%5908 = getelementptr inbounds %Type_Info, %Type_Info* %5851, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5908
	%5909 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%5910 = bitcast %Type_Info* %5909 to i8*
	%5911 = getelementptr inbounds i8, i8* %5910, i64 0
	%5912 = bitcast i8* %5911 to i64*
	store i64 80, i64* %5912
	%5913 = bitcast %Type_Info* %5909 to i8*
	%5914 = getelementptr inbounds i8, i8* %5913, i64 8
	%5915 = bitcast i8* %5914 to i64*
	store i64 8, i64* %5915
	; Type_Info_Map
	%5916 = bitcast %Type_Info* %5909 to %Type_Info.Map*
	%5917 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %5916, i64 0, i32 2
	%5918 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %5916, i64 0, i32 3
	%5919 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %5916, i64 0, i32 4
	%5920 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %5916, i64 0, i32 5
	%5921 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%5922 = bitcast %Type_Info* %5921 to %Type_Info*
	store %Type_Info* %5922, %Type_Info** %5917
	%5923 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%5924 = bitcast %Type_Info* %5923 to %Type_Info*
	store %Type_Info* %5924, %Type_Info** %5918
	%5925 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%5926 = bitcast %Type_Info* %5925 to %Type_Info*
	store %Type_Info* %5926, %Type_Info** %5919
	store i64 0, i64* %5920
	%5927 = getelementptr inbounds %Type_Info, %Type_Info* %5909, i64 0, i32 2 ; UnionTagPtr
	store i64 20, i64* %5927
	%5928 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%5929 = bitcast %Type_Info* %5928 to i8*
	%5930 = getelementptr inbounds i8, i8* %5929, i64 0
	%5931 = bitcast i8* %5930 to i64*
	store i64 80, i64* %5931
	%5932 = bitcast %Type_Info* %5928 to i8*
	%5933 = getelementptr inbounds i8, i8* %5932, i64 8
	%5934 = bitcast i8* %5933 to i64*
	store i64 8, i64* %5934
	; Type_Info_Struct
	%5935 = bitcast %Type_Info* %5928 to %Type_Info.Struct*
	%5936 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %5935, i64 0, i32 2
	%5937 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5936, i64 0, i32 3
	store i1 false, i1* %5937
	%5938 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5936, i64 0, i32 4
	store i1 false, i1* %5938
	%5939 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5936, i64 0, i32 5
	store i1 false, i1* %5939
	%5940 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 253
	%5941 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 253
	%5942 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 123
	%5943 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%5944 = bitcast %Type_Info* %5943 to %Type_Info*
	%5945 = getelementptr inbounds %Type_Info*, %Type_Info** %5940, i64 0
	%5946 = getelementptr inbounds i64, i64* %5942, i64 0
	%5947 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	store %Type_Info* %5947, %Type_Info** %5945
	%5948 = getelementptr inbounds %..string, %..string* %5941, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$44c, i64 0, i32 0), i64 6}, %..string* %5948
	store i64 0, i64* %5946
	%5949 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%5950 = bitcast %Type_Info* %5949 to %Type_Info*
	%5951 = getelementptr inbounds %Type_Info*, %Type_Info** %5940, i64 1
	%5952 = getelementptr inbounds i64, i64* %5942, i64 1
	%5953 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	store %Type_Info* %5953, %Type_Info** %5951
	%5954 = getelementptr inbounds %..string, %..string* %5941, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$44d, i64 0, i32 0), i64 7}, %..string* %5954
	store i64 40, i64* %5952
	%5955 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5936, i64 0, i32 0
	%5956 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5955, i64 0, i32 0
	store %Type_Info** %5940, %Type_Info*** %5956
	%5957 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5955, i64 0, i32 1
	store i64 2, i64* %5957
	%5958 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %5955, i64 0, i32 2
	store i64 2, i64* %5958
	%5959 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5936, i64 0, i32 1
	%5960 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5959, i64 0, i32 0
	store %..string* %5941, %..string** %5960
	%5961 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5959, i64 0, i32 1
	store i64 2, i64* %5961
	%5962 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5959, i64 0, i32 2
	store i64 2, i64* %5962
	%5963 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %5936, i64 0, i32 2
	%5964 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5963, i64 0, i32 0
	store i64* %5942, i64** %5964
	%5965 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5963, i64 0, i32 1
	store i64 2, i64* %5965
	%5966 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %5963, i64 0, i32 2
	store i64 2, i64* %5966
	%5967 = getelementptr inbounds %Type_Info, %Type_Info* %5928, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %5967
	%5968 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%5969 = bitcast %Type_Info* %5968 to i8*
	%5970 = getelementptr inbounds i8, i8* %5969, i64 0
	%5971 = bitcast i8* %5970 to i64*
	store i64 40, i64* %5971
	%5972 = bitcast %Type_Info* %5968 to i8*
	%5973 = getelementptr inbounds i8, i8* %5972, i64 8
	%5974 = bitcast i8* %5973 to i64*
	store i64 8, i64* %5974
	; Type_Info_DynamicArray
	%5975 = bitcast %Type_Info* %5968 to %Type_Info.Dynamic_Array*
	%5976 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%5977 = bitcast %Type_Info* %5976 to %Type_Info*
	%5978 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %5975, i64 0, i32 2
	store %Type_Info* %5977, %Type_Info** %5978
	%5979 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %5975, i64 0, i32 3
	store i64 8, i64* %5979
	%5980 = getelementptr inbounds %Type_Info, %Type_Info* %5968, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %5980
	%5981 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%5982 = bitcast %Type_Info* %5981 to i8*
	%5983 = getelementptr inbounds i8, i8* %5982, i64 0
	%5984 = bitcast i8* %5983 to i64*
	store i64 8, i64* %5984
	%5985 = bitcast %Type_Info* %5981 to i8*
	%5986 = getelementptr inbounds i8, i8* %5985, i64 8
	%5987 = bitcast i8* %5986 to i64*
	store i64 8, i64* %5987
	; Type_Info_Pointer
	%5988 = bitcast %Type_Info* %5981 to %Type_Info.Pointer*
	%5989 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%5990 = bitcast %Type_Info* %5989 to %Type_Info*
	%5991 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %5988, i64 0, i32 2
	store %Type_Info* %5990, %Type_Info** %5991
	%5992 = getelementptr inbounds %Type_Info, %Type_Info* %5981, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %5992
	%5993 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 188
	%5994 = bitcast %Type_Info* %5993 to i8*
	%5995 = getelementptr inbounds i8, i8* %5994, i64 0
	%5996 = bitcast i8* %5995 to i64*
	store i64 16, i64* %5996
	%5997 = bitcast %Type_Info* %5993 to i8*
	%5998 = getelementptr inbounds i8, i8* %5997, i64 8
	%5999 = bitcast i8* %5998 to i64*
	store i64 8, i64* %5999
	; Type_Info_Named
	%6000 = bitcast %Type_Info* %5993 to %Type_Info.Named*
	%6001 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 189
	%6002 = bitcast %Type_Info* %6001 to %Type_Info*
	%6003 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6000, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$44e, i64 0, i32 0), i64 9}, %..string* %6003
	%6004 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6000, i64 0, i32 3
	store %Type_Info* %6002, %Type_Info** %6004
	%6005 = getelementptr inbounds %Type_Info, %Type_Info* %5993, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %6005
	%6006 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 189
	%6007 = bitcast %Type_Info* %6006 to i8*
	%6008 = getelementptr inbounds i8, i8* %6007, i64 0
	%6009 = bitcast i8* %6008 to i64*
	store i64 16, i64* %6009
	%6010 = bitcast %Type_Info* %6006 to i8*
	%6011 = getelementptr inbounds i8, i8* %6010, i64 8
	%6012 = bitcast i8* %6011 to i64*
	store i64 8, i64* %6012
	; Type_Info_Struct
	%6013 = bitcast %Type_Info* %6006 to %Type_Info.Struct*
	%6014 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6013, i64 0, i32 2
	%6015 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6014, i64 0, i32 3
	store i1 false, i1* %6015
	%6016 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6014, i64 0, i32 4
	store i1 true, i1* %6016
	%6017 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6014, i64 0, i32 5
	store i1 false, i1* %6017
	%6018 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 255
	%6019 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 255
	%6020 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 125
	%6021 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 190
	%6022 = bitcast %Type_Info* %6021 to %Type_Info*
	%6023 = getelementptr inbounds %Type_Info*, %Type_Info** %6018, i64 0
	%6024 = getelementptr inbounds i64, i64* %6020, i64 0
	%6025 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 190
	store %Type_Info* %6025, %Type_Info** %6023
	%6026 = getelementptr inbounds %..string, %..string* %6019, i64 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$44f, i64 0, i32 0), i64 9}, %..string* %6026
	store i64 0, i64* %6024
	%6027 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%6028 = bitcast %Type_Info* %6027 to %Type_Info*
	%6029 = getelementptr inbounds %Type_Info*, %Type_Info** %6018, i64 1
	%6030 = getelementptr inbounds i64, i64* %6020, i64 1
	%6031 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %6031, %Type_Info** %6029
	%6032 = getelementptr inbounds %..string, %..string* %6019, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$450, i64 0, i32 0), i64 4}, %..string* %6032
	store i64 8, i64* %6030
	%6033 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6014, i64 0, i32 0
	%6034 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6033, i64 0, i32 0
	store %Type_Info** %6018, %Type_Info*** %6034
	%6035 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6033, i64 0, i32 1
	store i64 2, i64* %6035
	%6036 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6033, i64 0, i32 2
	store i64 2, i64* %6036
	%6037 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6014, i64 0, i32 1
	%6038 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6037, i64 0, i32 0
	store %..string* %6019, %..string** %6038
	%6039 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6037, i64 0, i32 1
	store i64 2, i64* %6039
	%6040 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6037, i64 0, i32 2
	store i64 2, i64* %6040
	%6041 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6014, i64 0, i32 2
	%6042 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6041, i64 0, i32 0
	store i64* %6020, i64** %6042
	%6043 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6041, i64 0, i32 1
	store i64 2, i64* %6043
	%6044 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6041, i64 0, i32 2
	store i64 2, i64* %6044
	%6045 = getelementptr inbounds %Type_Info, %Type_Info* %6006, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6045
	%6046 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 190
	%6047 = bitcast %Type_Info* %6046 to i8*
	%6048 = getelementptr inbounds i8, i8* %6047, i64 0
	%6049 = bitcast i8* %6048 to i64*
	store i64 8, i64* %6049
	%6050 = bitcast %Type_Info* %6046 to i8*
	%6051 = getelementptr inbounds i8, i8* %6050, i64 8
	%6052 = bitcast i8* %6051 to i64*
	store i64 8, i64* %6052
	; Type_Info_Named
	%6053 = bitcast %Type_Info* %6046 to %Type_Info.Named*
	%6054 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 191
	%6055 = bitcast %Type_Info* %6054 to %Type_Info*
	%6056 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6053, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$451, i64 0, i32 0), i64 14}, %..string* %6056
	%6057 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6053, i64 0, i32 3
	store %Type_Info* %6055, %Type_Info** %6057
	%6058 = getelementptr inbounds %Type_Info, %Type_Info* %6046, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %6058
	%6059 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 191
	%6060 = bitcast %Type_Info* %6059 to i8*
	%6061 = getelementptr inbounds i8, i8* %6060, i64 0
	%6062 = bitcast i8* %6061 to i64*
	store i64 8, i64* %6062
	%6063 = bitcast %Type_Info* %6059 to i8*
	%6064 = getelementptr inbounds i8, i8* %6063, i64 8
	%6065 = bitcast i8* %6064 to i64*
	store i64 8, i64* %6065
	; Type_Info_Proc
	%6066 = bitcast %Type_Info* %6059 to %Type_Info.Procedure*
	%6067 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %6066, i64 0, i32 2
	%6068 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %6066, i64 0, i32 3
	%6069 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %6066, i64 0, i32 4
	%6070 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %6066, i64 0, i32 5
	%6071 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 192
	%6072 = bitcast %Type_Info* %6071 to %Type_Info*
	store %Type_Info* %6072, %Type_Info** %6067
	%6073 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 195
	%6074 = bitcast %Type_Info* %6073 to %Type_Info*
	store %Type_Info* %6074, %Type_Info** %6068
	store i1 false, i1* %6069
	store i64 0, i64* %6070
	%6075 = getelementptr inbounds %Type_Info, %Type_Info* %6059, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %6075
	%6076 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 192
	%6077 = bitcast %Type_Info* %6076 to i8*
	%6078 = getelementptr inbounds i8, i8* %6077, i64 0
	%6079 = bitcast i8* %6078 to i64*
	store i64 56, i64* %6079
	%6080 = bitcast %Type_Info* %6076 to i8*
	%6081 = getelementptr inbounds i8, i8* %6080, i64 8
	%6082 = bitcast i8* %6081 to i64*
	store i64 8, i64* %6082
	; Type_Info_Tuple
	%6083 = bitcast %Type_Info* %6076 to %Type_Info.Tuple*
	%6084 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %6083, i64 0, i32 2
	%6085 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 257
	%6086 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 257
	%6087 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 0
	%6088 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %6088, %Type_Info** %6087
	%6089 = getelementptr inbounds %..string, %..string* %6086, i64 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$452, i64 0, i32 0), i64 14}, %..string* %6089
	%6090 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 1
	%6091 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 193
	store %Type_Info* %6091, %Type_Info** %6090
	%6092 = getelementptr inbounds %..string, %..string* %6086, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$453, i64 0, i32 0), i64 4}, %..string* %6092
	%6093 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 2
	%6094 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6094, %Type_Info** %6093
	%6095 = getelementptr inbounds %..string, %..string* %6086, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$454, i64 0, i32 0), i64 4}, %..string* %6095
	%6096 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 3
	%6097 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6097, %Type_Info** %6096
	%6098 = getelementptr inbounds %..string, %..string* %6086, i64 3
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$455, i64 0, i32 0), i64 9}, %..string* %6098
	%6099 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 4
	%6100 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %6100, %Type_Info** %6099
	%6101 = getelementptr inbounds %..string, %..string* %6086, i64 4
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$456, i64 0, i32 0), i64 10}, %..string* %6101
	%6102 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 5
	%6103 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6103, %Type_Info** %6102
	%6104 = getelementptr inbounds %..string, %..string* %6086, i64 5
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$457, i64 0, i32 0), i64 8}, %..string* %6104
	%6105 = getelementptr inbounds %Type_Info*, %Type_Info** %6085, i64 6
	%6106 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	store %Type_Info* %6106, %Type_Info** %6105
	%6107 = getelementptr inbounds %..string, %..string* %6086, i64 6
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$458, i64 0, i32 0), i64 5}, %..string* %6107
	%6108 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6084, i64 0, i32 0
	%6109 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6108, i64 0, i32 0
	store %Type_Info** %6085, %Type_Info*** %6109
	%6110 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6108, i64 0, i32 1
	store i64 7, i64* %6110
	%6111 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6108, i64 0, i32 2
	store i64 7, i64* %6111
	%6112 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6084, i64 0, i32 1
	%6113 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6112, i64 0, i32 0
	store %..string* %6086, %..string** %6113
	%6114 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6112, i64 0, i32 1
	store i64 7, i64* %6114
	%6115 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6112, i64 0, i32 2
	store i64 7, i64* %6115
	%6116 = getelementptr inbounds %Type_Info, %Type_Info* %6076, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %6116
	%6117 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 193
	%6118 = bitcast %Type_Info* %6117 to i8*
	%6119 = getelementptr inbounds i8, i8* %6118, i64 0
	%6120 = bitcast i8* %6119 to i64*
	store i64 8, i64* %6120
	%6121 = bitcast %Type_Info* %6117 to i8*
	%6122 = getelementptr inbounds i8, i8* %6121, i64 8
	%6123 = bitcast i8* %6122 to i64*
	store i64 8, i64* %6123
	; Type_Info_Named
	%6124 = bitcast %Type_Info* %6117 to %Type_Info.Named*
	%6125 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 194
	%6126 = bitcast %Type_Info* %6125 to %Type_Info*
	%6127 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6124, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$459, i64 0, i32 0), i64 14}, %..string* %6127
	%6128 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6124, i64 0, i32 3
	store %Type_Info* %6126, %Type_Info** %6128
	%6129 = getelementptr inbounds %Type_Info, %Type_Info* %6117, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %6129
	%6130 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 194
	%6131 = bitcast %Type_Info* %6130 to i8*
	%6132 = getelementptr inbounds i8, i8* %6131, i64 0
	%6133 = bitcast i8* %6132 to i64*
	store i64 8, i64* %6133
	%6134 = bitcast %Type_Info* %6130 to i8*
	%6135 = getelementptr inbounds i8, i8* %6134, i64 8
	%6136 = bitcast i8* %6135 to i64*
	store i64 8, i64* %6136
	; Type_Info_Enum
	%6137 = bitcast %Type_Info* %6130 to %Type_Info.Enum*
	%6138 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%6139 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %6137, i64 0, i32 2
	store %Type_Info* %6138, %Type_Info** %6139
	%6140 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-c2, i64 0, i32 0
	%6141 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-c2, i64 0, i32 0
	%6142 = bitcast {[0 x <8 x i8>], [8 x i8]}* %6141 to i64*
	store i64 0, i64* %6142
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$45a, i64 0, i32 0), i64 5}, %..string* %6140
	%6143 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-c2, i64 0, i32 1
	%6144 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-c2, i64 0, i32 1
	%6145 = bitcast {[0 x <8 x i8>], [8 x i8]}* %6144 to i64*
	store i64 1, i64* %6145
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$45b, i64 0, i32 0), i64 4}, %..string* %6143
	%6146 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-c2, i64 0, i32 2
	%6147 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-c2, i64 0, i32 2
	%6148 = bitcast {[0 x <8 x i8>], [8 x i8]}* %6147 to i64*
	store i64 2, i64* %6148
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$45c, i64 0, i32 0), i64 8}, %..string* %6146
	%6149 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-c2, i64 0, i32 3
	%6150 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-c2, i64 0, i32 3
	%6151 = bitcast {[0 x <8 x i8>], [8 x i8]}* %6150 to i64*
	store i64 3, i64* %6151
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$45d, i64 0, i32 0), i64 6}, %..string* %6149
	%6152 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %6137, i64 0, i32 3
	%6153 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-c2, i64 0, i32 0
	%6154 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6152, i64 0, i32 0
	store %..string* %6153, %..string** %6154
	%6155 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6152, i64 0, i32 1
	store i64 4, i64* %6155
	%6156 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %6137, i64 0, i32 4
	%6157 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-c2, i64 0, i32 0
	%6158 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %6156, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %6157, {[0 x <8 x i8>], [8 x i8]}** %6158
	%6159 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %6156, i64 0, i32 1
	store i64 4, i64* %6159
	%6160 = getelementptr inbounds %Type_Info, %Type_Info* %6130, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %6160
	%6161 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 195
	%6162 = bitcast %Type_Info* %6161 to i8*
	%6163 = getelementptr inbounds i8, i8* %6162, i64 0
	%6164 = bitcast i8* %6163 to i64*
	store i64 8, i64* %6164
	%6165 = bitcast %Type_Info* %6161 to i8*
	%6166 = getelementptr inbounds i8, i8* %6165, i64 8
	%6167 = bitcast i8* %6166 to i64*
	store i64 8, i64* %6167
	; Type_Info_Tuple
	%6168 = bitcast %Type_Info* %6161 to %Type_Info.Tuple*
	%6169 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %6168, i64 0, i32 2
	%6170 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 264
	%6171 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 264
	%6172 = getelementptr inbounds %Type_Info*, %Type_Info** %6170, i64 0
	%6173 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	store %Type_Info* %6173, %Type_Info** %6172
	%6174 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6169, i64 0, i32 0
	%6175 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6174, i64 0, i32 0
	store %Type_Info** %6170, %Type_Info*** %6175
	%6176 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6174, i64 0, i32 1
	store i64 1, i64* %6176
	%6177 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6174, i64 0, i32 2
	store i64 1, i64* %6177
	%6178 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6169, i64 0, i32 1
	%6179 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6178, i64 0, i32 0
	store %..string* %6171, %..string** %6179
	%6180 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6178, i64 0, i32 1
	store i64 1, i64* %6180
	%6181 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6178, i64 0, i32 2
	store i64 1, i64* %6181
	%6182 = getelementptr inbounds %Type_Info, %Type_Info* %6161, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %6182
	%6183 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6184 = bitcast %Type_Info* %6183 to i8*
	%6185 = getelementptr inbounds i8, i8* %6184, i64 0
	%6186 = bitcast i8* %6185 to i64*
	store i64 40, i64* %6186
	%6187 = bitcast %Type_Info* %6183 to i8*
	%6188 = getelementptr inbounds i8, i8* %6187, i64 8
	%6189 = bitcast i8* %6188 to i64*
	store i64 8, i64* %6189
	; Type_Info_DynamicArray
	%6190 = bitcast %Type_Info* %6183 to %Type_Info.Dynamic_Array*
	%6191 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6192 = bitcast %Type_Info* %6191 to %Type_Info*
	%6193 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6190, i64 0, i32 2
	store %Type_Info* %6192, %Type_Info** %6193
	%6194 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6190, i64 0, i32 3
	store i64 40, i64* %6194
	%6195 = getelementptr inbounds %Type_Info, %Type_Info* %6183, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6195
	%6196 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6197 = bitcast %Type_Info* %6196 to i8*
	%6198 = getelementptr inbounds i8, i8* %6197, i64 0
	%6199 = bitcast i8* %6198 to i64*
	store i64 40, i64* %6199
	%6200 = bitcast %Type_Info* %6196 to i8*
	%6201 = getelementptr inbounds i8, i8* %6200, i64 8
	%6202 = bitcast i8* %6201 to i64*
	store i64 8, i64* %6202
	; Type_Info_Struct
	%6203 = bitcast %Type_Info* %6196 to %Type_Info.Struct*
	%6204 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6203, i64 0, i32 2
	%6205 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6204, i64 0, i32 3
	store i1 false, i1* %6205
	%6206 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6204, i64 0, i32 4
	store i1 false, i1* %6206
	%6207 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6204, i64 0, i32 5
	store i1 false, i1* %6207
	%6208 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 265
	%6209 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 265
	%6210 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 127
	%6211 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	%6212 = bitcast %Type_Info* %6211 to %Type_Info*
	%6213 = getelementptr inbounds %Type_Info*, %Type_Info** %6208, i64 0
	%6214 = getelementptr inbounds i64, i64* %6210, i64 0
	%6215 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	store %Type_Info* %6215, %Type_Info** %6213
	%6216 = getelementptr inbounds %..string, %..string* %6209, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$45e, i64 0, i32 0), i64 3}, %..string* %6216
	store i64 0, i64* %6214
	%6217 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6218 = bitcast %Type_Info* %6217 to %Type_Info*
	%6219 = getelementptr inbounds %Type_Info*, %Type_Info** %6208, i64 1
	%6220 = getelementptr inbounds i64, i64* %6210, i64 1
	%6221 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6221, %Type_Info** %6219
	%6222 = getelementptr inbounds %..string, %..string* %6209, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$45f, i64 0, i32 0), i64 4}, %..string* %6222
	store i64 24, i64* %6220
	%6223 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6224 = bitcast %Type_Info* %6223 to %Type_Info*
	%6225 = getelementptr inbounds %Type_Info*, %Type_Info** %6208, i64 2
	%6226 = getelementptr inbounds i64, i64* %6210, i64 2
	%6227 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %6227, %Type_Info** %6225
	%6228 = getelementptr inbounds %..string, %..string* %6209, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$460, i64 0, i32 0), i64 5}, %..string* %6228
	store i64 32, i64* %6226
	%6229 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6204, i64 0, i32 0
	%6230 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6229, i64 0, i32 0
	store %Type_Info** %6208, %Type_Info*** %6230
	%6231 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6229, i64 0, i32 1
	store i64 3, i64* %6231
	%6232 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6229, i64 0, i32 2
	store i64 3, i64* %6232
	%6233 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6204, i64 0, i32 1
	%6234 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6233, i64 0, i32 0
	store %..string* %6209, %..string** %6234
	%6235 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6233, i64 0, i32 1
	store i64 3, i64* %6235
	%6236 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6233, i64 0, i32 2
	store i64 3, i64* %6236
	%6237 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6204, i64 0, i32 2
	%6238 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6237, i64 0, i32 0
	store i64* %6210, i64** %6238
	%6239 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6237, i64 0, i32 1
	store i64 3, i64* %6239
	%6240 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6237, i64 0, i32 2
	store i64 3, i64* %6240
	%6241 = getelementptr inbounds %Type_Info, %Type_Info* %6196, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6241
	%6242 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	%6243 = bitcast %Type_Info* %6242 to i8*
	%6244 = getelementptr inbounds i8, i8* %6243, i64 0
	%6245 = bitcast i8* %6244 to i64*
	store i64 24, i64* %6245
	%6246 = bitcast %Type_Info* %6242 to i8*
	%6247 = getelementptr inbounds i8, i8* %6246, i64 8
	%6248 = bitcast i8* %6247 to i64*
	store i64 8, i64* %6248
	; Type_Info_Named
	%6249 = bitcast %Type_Info* %6242 to %Type_Info.Named*
	%6250 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 199
	%6251 = bitcast %Type_Info* %6250 to %Type_Info*
	%6252 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6249, i64 0, i32 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$461, i64 0, i32 0), i64 9}, %..string* %6252
	%6253 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %6249, i64 0, i32 3
	store %Type_Info* %6251, %Type_Info** %6253
	%6254 = getelementptr inbounds %Type_Info, %Type_Info* %6242, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %6254
	%6255 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 199
	%6256 = bitcast %Type_Info* %6255 to i8*
	%6257 = getelementptr inbounds i8, i8* %6256, i64 0
	%6258 = bitcast i8* %6257 to i64*
	store i64 24, i64* %6258
	%6259 = bitcast %Type_Info* %6255 to i8*
	%6260 = getelementptr inbounds i8, i8* %6259, i64 8
	%6261 = bitcast i8* %6260 to i64*
	store i64 8, i64* %6261
	; Type_Info_Struct
	%6262 = bitcast %Type_Info* %6255 to %Type_Info.Struct*
	%6263 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6262, i64 0, i32 2
	%6264 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6263, i64 0, i32 3
	store i1 false, i1* %6264
	%6265 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6263, i64 0, i32 4
	store i1 true, i1* %6265
	%6266 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6263, i64 0, i32 5
	store i1 false, i1* %6266
	%6267 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 268
	%6268 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 268
	%6269 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 130
	%6270 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%6271 = bitcast %Type_Info* %6270 to %Type_Info*
	%6272 = getelementptr inbounds %Type_Info*, %Type_Info** %6267, i64 0
	%6273 = getelementptr inbounds i64, i64* %6269, i64 0
	%6274 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	store %Type_Info* %6274, %Type_Info** %6272
	%6275 = getelementptr inbounds %..string, %..string* %6268, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$462, i64 0, i32 0), i64 4}, %..string* %6275
	store i64 0, i64* %6273
	%6276 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%6277 = bitcast %Type_Info* %6276 to %Type_Info*
	%6278 = getelementptr inbounds %Type_Info*, %Type_Info** %6267, i64 1
	%6279 = getelementptr inbounds i64, i64* %6269, i64 1
	%6280 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	store %Type_Info* %6280, %Type_Info** %6278
	%6281 = getelementptr inbounds %..string, %..string* %6268, i64 1
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$463, i64 0, i32 0), i64 3}, %..string* %6281
	store i64 8, i64* %6279
	%6282 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6263, i64 0, i32 0
	%6283 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6282, i64 0, i32 0
	store %Type_Info** %6267, %Type_Info*** %6283
	%6284 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6282, i64 0, i32 1
	store i64 2, i64* %6284
	%6285 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6282, i64 0, i32 2
	store i64 2, i64* %6285
	%6286 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6263, i64 0, i32 1
	%6287 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6286, i64 0, i32 0
	store %..string* %6268, %..string** %6287
	%6288 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6286, i64 0, i32 1
	store i64 2, i64* %6288
	%6289 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6286, i64 0, i32 2
	store i64 2, i64* %6289
	%6290 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6263, i64 0, i32 2
	%6291 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6290, i64 0, i32 0
	store i64* %6269, i64** %6291
	%6292 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6290, i64 0, i32 1
	store i64 2, i64* %6292
	%6293 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6290, i64 0, i32 2
	store i64 2, i64* %6293
	%6294 = getelementptr inbounds %Type_Info, %Type_Info* %6255, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6294
	%6295 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 200
	%6296 = bitcast %Type_Info* %6295 to i8*
	%6297 = getelementptr inbounds i8, i8* %6296, i64 0
	%6298 = bitcast i8* %6297 to i64*
	store i64 8, i64* %6298
	%6299 = bitcast %Type_Info* %6295 to i8*
	%6300 = getelementptr inbounds i8, i8* %6299, i64 8
	%6301 = bitcast i8* %6300 to i64*
	store i64 8, i64* %6301
	; Type_Info_Pointer
	%6302 = bitcast %Type_Info* %6295 to %Type_Info.Pointer*
	%6303 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6304 = bitcast %Type_Info* %6303 to %Type_Info*
	%6305 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6302, i64 0, i32 2
	store %Type_Info* %6304, %Type_Info** %6305
	%6306 = getelementptr inbounds %Type_Info, %Type_Info* %6295, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6306
	%6307 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%6308 = bitcast %Type_Info* %6307 to i8*
	%6309 = getelementptr inbounds i8, i8* %6308, i64 0
	%6310 = bitcast i8* %6309 to i64*
	store i64 80, i64* %6310
	%6311 = bitcast %Type_Info* %6307 to i8*
	%6312 = getelementptr inbounds i8, i8* %6311, i64 8
	%6313 = bitcast i8* %6312 to i64*
	store i64 8, i64* %6313
	; Type_Info_Map
	%6314 = bitcast %Type_Info* %6307 to %Type_Info.Map*
	%6315 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6314, i64 0, i32 2
	%6316 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6314, i64 0, i32 3
	%6317 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6314, i64 0, i32 4
	%6318 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6314, i64 0, i32 5
	%6319 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%6320 = bitcast %Type_Info* %6319 to %Type_Info*
	store %Type_Info* %6320, %Type_Info** %6315
	%6321 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6322 = bitcast %Type_Info* %6321 to %Type_Info*
	store %Type_Info* %6322, %Type_Info** %6316
	%6323 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%6324 = bitcast %Type_Info* %6323 to %Type_Info*
	store %Type_Info* %6324, %Type_Info** %6317
	store i64 0, i64* %6318
	%6325 = getelementptr inbounds %Type_Info, %Type_Info* %6307, i64 0, i32 2 ; UnionTagPtr
	store i64 20, i64* %6325
	%6326 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%6327 = bitcast %Type_Info* %6326 to i8*
	%6328 = getelementptr inbounds i8, i8* %6327, i64 0
	%6329 = bitcast i8* %6328 to i64*
	store i64 80, i64* %6329
	%6330 = bitcast %Type_Info* %6326 to i8*
	%6331 = getelementptr inbounds i8, i8* %6330, i64 8
	%6332 = bitcast i8* %6331 to i64*
	store i64 8, i64* %6332
	; Type_Info_Struct
	%6333 = bitcast %Type_Info* %6326 to %Type_Info.Struct*
	%6334 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6333, i64 0, i32 2
	%6335 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6334, i64 0, i32 3
	store i1 false, i1* %6335
	%6336 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6334, i64 0, i32 4
	store i1 false, i1* %6336
	%6337 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6334, i64 0, i32 5
	store i1 false, i1* %6337
	%6338 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 270
	%6339 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 270
	%6340 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 132
	%6341 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%6342 = bitcast %Type_Info* %6341 to %Type_Info*
	%6343 = getelementptr inbounds %Type_Info*, %Type_Info** %6338, i64 0
	%6344 = getelementptr inbounds i64, i64* %6340, i64 0
	%6345 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	store %Type_Info* %6345, %Type_Info** %6343
	%6346 = getelementptr inbounds %..string, %..string* %6339, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$464, i64 0, i32 0), i64 6}, %..string* %6346
	store i64 0, i64* %6344
	%6347 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6348 = bitcast %Type_Info* %6347 to %Type_Info*
	%6349 = getelementptr inbounds %Type_Info*, %Type_Info** %6338, i64 1
	%6350 = getelementptr inbounds i64, i64* %6340, i64 1
	%6351 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	store %Type_Info* %6351, %Type_Info** %6349
	%6352 = getelementptr inbounds %..string, %..string* %6339, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$465, i64 0, i32 0), i64 7}, %..string* %6352
	store i64 40, i64* %6350
	%6353 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6334, i64 0, i32 0
	%6354 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6353, i64 0, i32 0
	store %Type_Info** %6338, %Type_Info*** %6354
	%6355 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6353, i64 0, i32 1
	store i64 2, i64* %6355
	%6356 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6353, i64 0, i32 2
	store i64 2, i64* %6356
	%6357 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6334, i64 0, i32 1
	%6358 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6357, i64 0, i32 0
	store %..string* %6339, %..string** %6358
	%6359 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6357, i64 0, i32 1
	store i64 2, i64* %6359
	%6360 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6357, i64 0, i32 2
	store i64 2, i64* %6360
	%6361 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6334, i64 0, i32 2
	%6362 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6361, i64 0, i32 0
	store i64* %6340, i64** %6362
	%6363 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6361, i64 0, i32 1
	store i64 2, i64* %6363
	%6364 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6361, i64 0, i32 2
	store i64 2, i64* %6364
	%6365 = getelementptr inbounds %Type_Info, %Type_Info* %6326, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6365
	%6366 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%6367 = bitcast %Type_Info* %6366 to i8*
	%6368 = getelementptr inbounds i8, i8* %6367, i64 0
	%6369 = bitcast i8* %6368 to i64*
	store i64 40, i64* %6369
	%6370 = bitcast %Type_Info* %6366 to i8*
	%6371 = getelementptr inbounds i8, i8* %6370, i64 8
	%6372 = bitcast i8* %6371 to i64*
	store i64 8, i64* %6372
	; Type_Info_DynamicArray
	%6373 = bitcast %Type_Info* %6366 to %Type_Info.Dynamic_Array*
	%6374 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6375 = bitcast %Type_Info* %6374 to %Type_Info*
	%6376 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6373, i64 0, i32 2
	store %Type_Info* %6375, %Type_Info** %6376
	%6377 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6373, i64 0, i32 3
	store i64 8, i64* %6377
	%6378 = getelementptr inbounds %Type_Info, %Type_Info* %6366, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6378
	%6379 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%6380 = bitcast %Type_Info* %6379 to i8*
	%6381 = getelementptr inbounds i8, i8* %6380, i64 0
	%6382 = bitcast i8* %6381 to i64*
	store i64 8, i64* %6382
	%6383 = bitcast %Type_Info* %6379 to i8*
	%6384 = getelementptr inbounds i8, i8* %6383, i64 8
	%6385 = bitcast i8* %6384 to i64*
	store i64 8, i64* %6385
	; Type_Info_Pointer
	%6386 = bitcast %Type_Info* %6379 to %Type_Info.Pointer*
	%6387 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6388 = bitcast %Type_Info* %6387 to %Type_Info*
	%6389 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6386, i64 0, i32 2
	store %Type_Info* %6388, %Type_Info** %6389
	%6390 = getelementptr inbounds %Type_Info, %Type_Info* %6379, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6390
	%6391 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6392 = bitcast %Type_Info* %6391 to i8*
	%6393 = getelementptr inbounds i8, i8* %6392, i64 0
	%6394 = bitcast i8* %6393 to i64*
	store i64 40, i64* %6394
	%6395 = bitcast %Type_Info* %6391 to i8*
	%6396 = getelementptr inbounds i8, i8* %6395, i64 8
	%6397 = bitcast i8* %6396 to i64*
	store i64 8, i64* %6397
	; Type_Info_DynamicArray
	%6398 = bitcast %Type_Info* %6391 to %Type_Info.Dynamic_Array*
	%6399 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6400 = bitcast %Type_Info* %6399 to %Type_Info*
	%6401 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6398, i64 0, i32 2
	store %Type_Info* %6400, %Type_Info** %6401
	%6402 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6398, i64 0, i32 3
	store i64 40, i64* %6402
	%6403 = getelementptr inbounds %Type_Info, %Type_Info* %6391, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6403
	%6404 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6405 = bitcast %Type_Info* %6404 to i8*
	%6406 = getelementptr inbounds i8, i8* %6405, i64 0
	%6407 = bitcast i8* %6406 to i64*
	store i64 40, i64* %6407
	%6408 = bitcast %Type_Info* %6404 to i8*
	%6409 = getelementptr inbounds i8, i8* %6408, i64 8
	%6410 = bitcast i8* %6409 to i64*
	store i64 8, i64* %6410
	; Type_Info_Struct
	%6411 = bitcast %Type_Info* %6404 to %Type_Info.Struct*
	%6412 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6411, i64 0, i32 2
	%6413 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6412, i64 0, i32 3
	store i1 false, i1* %6413
	%6414 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6412, i64 0, i32 4
	store i1 false, i1* %6414
	%6415 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6412, i64 0, i32 5
	store i1 false, i1* %6415
	%6416 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 272
	%6417 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 272
	%6418 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 134
	%6419 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	%6420 = bitcast %Type_Info* %6419 to %Type_Info*
	%6421 = getelementptr inbounds %Type_Info*, %Type_Info** %6416, i64 0
	%6422 = getelementptr inbounds i64, i64* %6418, i64 0
	%6423 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	store %Type_Info* %6423, %Type_Info** %6421
	%6424 = getelementptr inbounds %..string, %..string* %6417, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$466, i64 0, i32 0), i64 3}, %..string* %6424
	store i64 0, i64* %6422
	%6425 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6426 = bitcast %Type_Info* %6425 to %Type_Info*
	%6427 = getelementptr inbounds %Type_Info*, %Type_Info** %6416, i64 1
	%6428 = getelementptr inbounds i64, i64* %6418, i64 1
	%6429 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6429, %Type_Info** %6427
	%6430 = getelementptr inbounds %..string, %..string* %6417, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$467, i64 0, i32 0), i64 4}, %..string* %6430
	store i64 24, i64* %6428
	%6431 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6432 = bitcast %Type_Info* %6431 to %Type_Info*
	%6433 = getelementptr inbounds %Type_Info*, %Type_Info** %6416, i64 2
	%6434 = getelementptr inbounds i64, i64* %6418, i64 2
	%6435 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %6435, %Type_Info** %6433
	%6436 = getelementptr inbounds %..string, %..string* %6417, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$468, i64 0, i32 0), i64 5}, %..string* %6436
	store i64 32, i64* %6434
	%6437 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6412, i64 0, i32 0
	%6438 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6437, i64 0, i32 0
	store %Type_Info** %6416, %Type_Info*** %6438
	%6439 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6437, i64 0, i32 1
	store i64 3, i64* %6439
	%6440 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6437, i64 0, i32 2
	store i64 3, i64* %6440
	%6441 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6412, i64 0, i32 1
	%6442 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6441, i64 0, i32 0
	store %..string* %6417, %..string** %6442
	%6443 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6441, i64 0, i32 1
	store i64 3, i64* %6443
	%6444 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6441, i64 0, i32 2
	store i64 3, i64* %6444
	%6445 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6412, i64 0, i32 2
	%6446 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6445, i64 0, i32 0
	store i64* %6418, i64** %6446
	%6447 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6445, i64 0, i32 1
	store i64 3, i64* %6447
	%6448 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6445, i64 0, i32 2
	store i64 3, i64* %6448
	%6449 = getelementptr inbounds %Type_Info, %Type_Info* %6404, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6449
	%6450 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 200
	%6451 = bitcast %Type_Info* %6450 to i8*
	%6452 = getelementptr inbounds i8, i8* %6451, i64 0
	%6453 = bitcast i8* %6452 to i64*
	store i64 8, i64* %6453
	%6454 = bitcast %Type_Info* %6450 to i8*
	%6455 = getelementptr inbounds i8, i8* %6454, i64 8
	%6456 = bitcast i8* %6455 to i64*
	store i64 8, i64* %6456
	; Type_Info_Pointer
	%6457 = bitcast %Type_Info* %6450 to %Type_Info.Pointer*
	%6458 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6459 = bitcast %Type_Info* %6458 to %Type_Info*
	%6460 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6457, i64 0, i32 2
	store %Type_Info* %6459, %Type_Info** %6460
	%6461 = getelementptr inbounds %Type_Info, %Type_Info* %6450, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6461
	%6462 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%6463 = bitcast %Type_Info* %6462 to i8*
	%6464 = getelementptr inbounds i8, i8* %6463, i64 0
	%6465 = bitcast i8* %6464 to i64*
	store i64 8, i64* %6465
	%6466 = bitcast %Type_Info* %6462 to i8*
	%6467 = getelementptr inbounds i8, i8* %6466, i64 8
	%6468 = bitcast i8* %6467 to i64*
	store i64 8, i64* %6468
	; Type_Info_Pointer
	%6469 = bitcast %Type_Info* %6462 to %Type_Info.Pointer*
	%6470 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%6471 = bitcast %Type_Info* %6470 to %Type_Info*
	%6472 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6469, i64 0, i32 2
	store %Type_Info* %6471, %Type_Info** %6472
	%6473 = getelementptr inbounds %Type_Info, %Type_Info* %6462, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6473
	%6474 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%6475 = bitcast %Type_Info* %6474 to i8*
	%6476 = getelementptr inbounds i8, i8* %6475, i64 0
	%6477 = bitcast i8* %6476 to i64*
	store i64 8, i64* %6477
	%6478 = bitcast %Type_Info* %6474 to i8*
	%6479 = getelementptr inbounds i8, i8* %6478, i64 8
	%6480 = bitcast i8* %6479 to i64*
	store i64 8, i64* %6480
	; Type_Info_Pointer
	%6481 = bitcast %Type_Info* %6474 to %Type_Info.Pointer*
	%6482 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%6483 = bitcast %Type_Info* %6482 to %Type_Info*
	%6484 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6481, i64 0, i32 2
	store %Type_Info* %6483, %Type_Info** %6484
	%6485 = getelementptr inbounds %Type_Info, %Type_Info* %6474, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6485
	%6486 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%6487 = bitcast %Type_Info* %6486 to i8*
	%6488 = getelementptr inbounds i8, i8* %6487, i64 0
	%6489 = bitcast i8* %6488 to i64*
	store i64 80, i64* %6489
	%6490 = bitcast %Type_Info* %6486 to i8*
	%6491 = getelementptr inbounds i8, i8* %6490, i64 8
	%6492 = bitcast i8* %6491 to i64*
	store i64 8, i64* %6492
	; Type_Info_Map
	%6493 = bitcast %Type_Info* %6486 to %Type_Info.Map*
	%6494 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6493, i64 0, i32 2
	%6495 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6493, i64 0, i32 3
	%6496 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6493, i64 0, i32 4
	%6497 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6493, i64 0, i32 5
	%6498 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%6499 = bitcast %Type_Info* %6498 to %Type_Info*
	store %Type_Info* %6499, %Type_Info** %6494
	%6500 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6501 = bitcast %Type_Info* %6500 to %Type_Info*
	store %Type_Info* %6501, %Type_Info** %6495
	%6502 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%6503 = bitcast %Type_Info* %6502 to %Type_Info*
	store %Type_Info* %6503, %Type_Info** %6496
	store i64 0, i64* %6497
	%6504 = getelementptr inbounds %Type_Info, %Type_Info* %6486, i64 0, i32 2 ; UnionTagPtr
	store i64 20, i64* %6504
	%6505 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%6506 = bitcast %Type_Info* %6505 to i8*
	%6507 = getelementptr inbounds i8, i8* %6506, i64 0
	%6508 = bitcast i8* %6507 to i64*
	store i64 80, i64* %6508
	%6509 = bitcast %Type_Info* %6505 to i8*
	%6510 = getelementptr inbounds i8, i8* %6509, i64 8
	%6511 = bitcast i8* %6510 to i64*
	store i64 8, i64* %6511
	; Type_Info_Struct
	%6512 = bitcast %Type_Info* %6505 to %Type_Info.Struct*
	%6513 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6512, i64 0, i32 2
	%6514 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6513, i64 0, i32 3
	store i1 false, i1* %6514
	%6515 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6513, i64 0, i32 4
	store i1 false, i1* %6515
	%6516 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6513, i64 0, i32 5
	store i1 false, i1* %6516
	%6517 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 275
	%6518 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 275
	%6519 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 137
	%6520 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%6521 = bitcast %Type_Info* %6520 to %Type_Info*
	%6522 = getelementptr inbounds %Type_Info*, %Type_Info** %6517, i64 0
	%6523 = getelementptr inbounds i64, i64* %6519, i64 0
	%6524 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	store %Type_Info* %6524, %Type_Info** %6522
	%6525 = getelementptr inbounds %..string, %..string* %6518, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$469, i64 0, i32 0), i64 6}, %..string* %6525
	store i64 0, i64* %6523
	%6526 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6527 = bitcast %Type_Info* %6526 to %Type_Info*
	%6528 = getelementptr inbounds %Type_Info*, %Type_Info** %6517, i64 1
	%6529 = getelementptr inbounds i64, i64* %6519, i64 1
	%6530 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	store %Type_Info* %6530, %Type_Info** %6528
	%6531 = getelementptr inbounds %..string, %..string* %6518, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$46a, i64 0, i32 0), i64 7}, %..string* %6531
	store i64 40, i64* %6529
	%6532 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6513, i64 0, i32 0
	%6533 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6532, i64 0, i32 0
	store %Type_Info** %6517, %Type_Info*** %6533
	%6534 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6532, i64 0, i32 1
	store i64 2, i64* %6534
	%6535 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6532, i64 0, i32 2
	store i64 2, i64* %6535
	%6536 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6513, i64 0, i32 1
	%6537 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6536, i64 0, i32 0
	store %..string* %6518, %..string** %6537
	%6538 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6536, i64 0, i32 1
	store i64 2, i64* %6538
	%6539 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6536, i64 0, i32 2
	store i64 2, i64* %6539
	%6540 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6513, i64 0, i32 2
	%6541 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6540, i64 0, i32 0
	store i64* %6519, i64** %6541
	%6542 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6540, i64 0, i32 1
	store i64 2, i64* %6542
	%6543 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6540, i64 0, i32 2
	store i64 2, i64* %6543
	%6544 = getelementptr inbounds %Type_Info, %Type_Info* %6505, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6544
	%6545 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%6546 = bitcast %Type_Info* %6545 to i8*
	%6547 = getelementptr inbounds i8, i8* %6546, i64 0
	%6548 = bitcast i8* %6547 to i64*
	store i64 40, i64* %6548
	%6549 = bitcast %Type_Info* %6545 to i8*
	%6550 = getelementptr inbounds i8, i8* %6549, i64 8
	%6551 = bitcast i8* %6550 to i64*
	store i64 8, i64* %6551
	; Type_Info_DynamicArray
	%6552 = bitcast %Type_Info* %6545 to %Type_Info.Dynamic_Array*
	%6553 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6554 = bitcast %Type_Info* %6553 to %Type_Info*
	%6555 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6552, i64 0, i32 2
	store %Type_Info* %6554, %Type_Info** %6555
	%6556 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6552, i64 0, i32 3
	store i64 8, i64* %6556
	%6557 = getelementptr inbounds %Type_Info, %Type_Info* %6545, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6557
	%6558 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%6559 = bitcast %Type_Info* %6558 to i8*
	%6560 = getelementptr inbounds i8, i8* %6559, i64 0
	%6561 = bitcast i8* %6560 to i64*
	store i64 8, i64* %6561
	%6562 = bitcast %Type_Info* %6558 to i8*
	%6563 = getelementptr inbounds i8, i8* %6562, i64 8
	%6564 = bitcast i8* %6563 to i64*
	store i64 8, i64* %6564
	; Type_Info_Pointer
	%6565 = bitcast %Type_Info* %6558 to %Type_Info.Pointer*
	%6566 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6567 = bitcast %Type_Info* %6566 to %Type_Info*
	%6568 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6565, i64 0, i32 2
	store %Type_Info* %6567, %Type_Info** %6568
	%6569 = getelementptr inbounds %Type_Info, %Type_Info* %6558, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6569
	%6570 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6571 = bitcast %Type_Info* %6570 to i8*
	%6572 = getelementptr inbounds i8, i8* %6571, i64 0
	%6573 = bitcast i8* %6572 to i64*
	store i64 40, i64* %6573
	%6574 = bitcast %Type_Info* %6570 to i8*
	%6575 = getelementptr inbounds i8, i8* %6574, i64 8
	%6576 = bitcast i8* %6575 to i64*
	store i64 8, i64* %6576
	; Type_Info_DynamicArray
	%6577 = bitcast %Type_Info* %6570 to %Type_Info.Dynamic_Array*
	%6578 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6579 = bitcast %Type_Info* %6578 to %Type_Info*
	%6580 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6577, i64 0, i32 2
	store %Type_Info* %6579, %Type_Info** %6580
	%6581 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6577, i64 0, i32 3
	store i64 40, i64* %6581
	%6582 = getelementptr inbounds %Type_Info, %Type_Info* %6570, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6582
	%6583 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6584 = bitcast %Type_Info* %6583 to i8*
	%6585 = getelementptr inbounds i8, i8* %6584, i64 0
	%6586 = bitcast i8* %6585 to i64*
	store i64 40, i64* %6586
	%6587 = bitcast %Type_Info* %6583 to i8*
	%6588 = getelementptr inbounds i8, i8* %6587, i64 8
	%6589 = bitcast i8* %6588 to i64*
	store i64 8, i64* %6589
	; Type_Info_Struct
	%6590 = bitcast %Type_Info* %6583 to %Type_Info.Struct*
	%6591 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6590, i64 0, i32 2
	%6592 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6591, i64 0, i32 3
	store i1 false, i1* %6592
	%6593 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6591, i64 0, i32 4
	store i1 false, i1* %6593
	%6594 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6591, i64 0, i32 5
	store i1 false, i1* %6594
	%6595 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 277
	%6596 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 277
	%6597 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 139
	%6598 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	%6599 = bitcast %Type_Info* %6598 to %Type_Info*
	%6600 = getelementptr inbounds %Type_Info*, %Type_Info** %6595, i64 0
	%6601 = getelementptr inbounds i64, i64* %6597, i64 0
	%6602 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	store %Type_Info* %6602, %Type_Info** %6600
	%6603 = getelementptr inbounds %..string, %..string* %6596, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$46b, i64 0, i32 0), i64 3}, %..string* %6603
	store i64 0, i64* %6601
	%6604 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6605 = bitcast %Type_Info* %6604 to %Type_Info*
	%6606 = getelementptr inbounds %Type_Info*, %Type_Info** %6595, i64 1
	%6607 = getelementptr inbounds i64, i64* %6597, i64 1
	%6608 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6608, %Type_Info** %6606
	%6609 = getelementptr inbounds %..string, %..string* %6596, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$46c, i64 0, i32 0), i64 4}, %..string* %6609
	store i64 24, i64* %6607
	%6610 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6611 = bitcast %Type_Info* %6610 to %Type_Info*
	%6612 = getelementptr inbounds %Type_Info*, %Type_Info** %6595, i64 2
	%6613 = getelementptr inbounds i64, i64* %6597, i64 2
	%6614 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %6614, %Type_Info** %6612
	%6615 = getelementptr inbounds %..string, %..string* %6596, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$46d, i64 0, i32 0), i64 5}, %..string* %6615
	store i64 32, i64* %6613
	%6616 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6591, i64 0, i32 0
	%6617 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6616, i64 0, i32 0
	store %Type_Info** %6595, %Type_Info*** %6617
	%6618 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6616, i64 0, i32 1
	store i64 3, i64* %6618
	%6619 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6616, i64 0, i32 2
	store i64 3, i64* %6619
	%6620 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6591, i64 0, i32 1
	%6621 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6620, i64 0, i32 0
	store %..string* %6596, %..string** %6621
	%6622 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6620, i64 0, i32 1
	store i64 3, i64* %6622
	%6623 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6620, i64 0, i32 2
	store i64 3, i64* %6623
	%6624 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6591, i64 0, i32 2
	%6625 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6624, i64 0, i32 0
	store i64* %6597, i64** %6625
	%6626 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6624, i64 0, i32 1
	store i64 3, i64* %6626
	%6627 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6624, i64 0, i32 2
	store i64 3, i64* %6627
	%6628 = getelementptr inbounds %Type_Info, %Type_Info* %6583, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6628
	%6629 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 200
	%6630 = bitcast %Type_Info* %6629 to i8*
	%6631 = getelementptr inbounds i8, i8* %6630, i64 0
	%6632 = bitcast i8* %6631 to i64*
	store i64 8, i64* %6632
	%6633 = bitcast %Type_Info* %6629 to i8*
	%6634 = getelementptr inbounds i8, i8* %6633, i64 8
	%6635 = bitcast i8* %6634 to i64*
	store i64 8, i64* %6635
	; Type_Info_Pointer
	%6636 = bitcast %Type_Info* %6629 to %Type_Info.Pointer*
	%6637 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6638 = bitcast %Type_Info* %6637 to %Type_Info*
	%6639 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6636, i64 0, i32 2
	store %Type_Info* %6638, %Type_Info** %6639
	%6640 = getelementptr inbounds %Type_Info, %Type_Info* %6629, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6640
	%6641 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 185
	%6642 = bitcast %Type_Info* %6641 to i8*
	%6643 = getelementptr inbounds i8, i8* %6642, i64 0
	%6644 = bitcast i8* %6643 to i64*
	store i64 80, i64* %6644
	%6645 = bitcast %Type_Info* %6641 to i8*
	%6646 = getelementptr inbounds i8, i8* %6645, i64 8
	%6647 = bitcast i8* %6646 to i64*
	store i64 8, i64* %6647
	; Type_Info_Map
	%6648 = bitcast %Type_Info* %6641 to %Type_Info.Map*
	%6649 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6648, i64 0, i32 2
	%6650 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6648, i64 0, i32 3
	%6651 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6648, i64 0, i32 4
	%6652 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %6648, i64 0, i32 5
	%6653 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%6654 = bitcast %Type_Info* %6653 to %Type_Info*
	store %Type_Info* %6654, %Type_Info** %6649
	%6655 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6656 = bitcast %Type_Info* %6655 to %Type_Info*
	store %Type_Info* %6656, %Type_Info** %6650
	%6657 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%6658 = bitcast %Type_Info* %6657 to %Type_Info*
	store %Type_Info* %6658, %Type_Info** %6651
	store i64 0, i64* %6652
	%6659 = getelementptr inbounds %Type_Info, %Type_Info* %6641, i64 0, i32 2 ; UnionTagPtr
	store i64 20, i64* %6659
	%6660 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 186
	%6661 = bitcast %Type_Info* %6660 to i8*
	%6662 = getelementptr inbounds i8, i8* %6661, i64 0
	%6663 = bitcast i8* %6662 to i64*
	store i64 80, i64* %6663
	%6664 = bitcast %Type_Info* %6660 to i8*
	%6665 = getelementptr inbounds i8, i8* %6664, i64 8
	%6666 = bitcast i8* %6665 to i64*
	store i64 8, i64* %6666
	; Type_Info_Struct
	%6667 = bitcast %Type_Info* %6660 to %Type_Info.Struct*
	%6668 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6667, i64 0, i32 2
	%6669 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6668, i64 0, i32 3
	store i1 false, i1* %6669
	%6670 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6668, i64 0, i32 4
	store i1 false, i1* %6670
	%6671 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6668, i64 0, i32 5
	store i1 false, i1* %6671
	%6672 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 280
	%6673 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 280
	%6674 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 142
	%6675 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%6676 = bitcast %Type_Info* %6675 to %Type_Info*
	%6677 = getelementptr inbounds %Type_Info*, %Type_Info** %6672, i64 0
	%6678 = getelementptr inbounds i64, i64* %6674, i64 0
	%6679 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	store %Type_Info* %6679, %Type_Info** %6677
	%6680 = getelementptr inbounds %..string, %..string* %6673, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$46e, i64 0, i32 0), i64 6}, %..string* %6680
	store i64 0, i64* %6678
	%6681 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6682 = bitcast %Type_Info* %6681 to %Type_Info*
	%6683 = getelementptr inbounds %Type_Info*, %Type_Info** %6672, i64 1
	%6684 = getelementptr inbounds i64, i64* %6674, i64 1
	%6685 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	store %Type_Info* %6685, %Type_Info** %6683
	%6686 = getelementptr inbounds %..string, %..string* %6673, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$46f, i64 0, i32 0), i64 7}, %..string* %6686
	store i64 40, i64* %6684
	%6687 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6668, i64 0, i32 0
	%6688 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6687, i64 0, i32 0
	store %Type_Info** %6672, %Type_Info*** %6688
	%6689 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6687, i64 0, i32 1
	store i64 2, i64* %6689
	%6690 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6687, i64 0, i32 2
	store i64 2, i64* %6690
	%6691 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6668, i64 0, i32 1
	%6692 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6691, i64 0, i32 0
	store %..string* %6673, %..string** %6692
	%6693 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6691, i64 0, i32 1
	store i64 2, i64* %6693
	%6694 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6691, i64 0, i32 2
	store i64 2, i64* %6694
	%6695 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6668, i64 0, i32 2
	%6696 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6695, i64 0, i32 0
	store i64* %6674, i64** %6696
	%6697 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6695, i64 0, i32 1
	store i64 2, i64* %6697
	%6698 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6695, i64 0, i32 2
	store i64 2, i64* %6698
	%6699 = getelementptr inbounds %Type_Info, %Type_Info* %6660, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6699
	%6700 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 187
	%6701 = bitcast %Type_Info* %6700 to i8*
	%6702 = getelementptr inbounds i8, i8* %6701, i64 0
	%6703 = bitcast i8* %6702 to i64*
	store i64 40, i64* %6703
	%6704 = bitcast %Type_Info* %6700 to i8*
	%6705 = getelementptr inbounds i8, i8* %6704, i64 8
	%6706 = bitcast i8* %6705 to i64*
	store i64 8, i64* %6706
	; Type_Info_DynamicArray
	%6707 = bitcast %Type_Info* %6700 to %Type_Info.Dynamic_Array*
	%6708 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6709 = bitcast %Type_Info* %6708 to %Type_Info*
	%6710 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6707, i64 0, i32 2
	store %Type_Info* %6709, %Type_Info** %6710
	%6711 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6707, i64 0, i32 3
	store i64 8, i64* %6711
	%6712 = getelementptr inbounds %Type_Info, %Type_Info* %6700, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6712
	%6713 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%6714 = bitcast %Type_Info* %6713 to i8*
	%6715 = getelementptr inbounds i8, i8* %6714, i64 0
	%6716 = bitcast i8* %6715 to i64*
	store i64 8, i64* %6716
	%6717 = bitcast %Type_Info* %6713 to i8*
	%6718 = getelementptr inbounds i8, i8* %6717, i64 8
	%6719 = bitcast i8* %6718 to i64*
	store i64 8, i64* %6719
	; Type_Info_Pointer
	%6720 = bitcast %Type_Info* %6713 to %Type_Info.Pointer*
	%6721 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6722 = bitcast %Type_Info* %6721 to %Type_Info*
	%6723 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6720, i64 0, i32 2
	store %Type_Info* %6722, %Type_Info** %6723
	%6724 = getelementptr inbounds %Type_Info, %Type_Info* %6713, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6724
	%6725 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 196
	%6726 = bitcast %Type_Info* %6725 to i8*
	%6727 = getelementptr inbounds i8, i8* %6726, i64 0
	%6728 = bitcast i8* %6727 to i64*
	store i64 40, i64* %6728
	%6729 = bitcast %Type_Info* %6725 to i8*
	%6730 = getelementptr inbounds i8, i8* %6729, i64 8
	%6731 = bitcast i8* %6730 to i64*
	store i64 8, i64* %6731
	; Type_Info_DynamicArray
	%6732 = bitcast %Type_Info* %6725 to %Type_Info.Dynamic_Array*
	%6733 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6734 = bitcast %Type_Info* %6733 to %Type_Info*
	%6735 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6732, i64 0, i32 2
	store %Type_Info* %6734, %Type_Info** %6735
	%6736 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %6732, i64 0, i32 3
	store i64 40, i64* %6736
	%6737 = getelementptr inbounds %Type_Info, %Type_Info* %6725, i64 0, i32 2 ; UnionTagPtr
	store i64 12, i64* %6737
	%6738 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6739 = bitcast %Type_Info* %6738 to i8*
	%6740 = getelementptr inbounds i8, i8* %6739, i64 0
	%6741 = bitcast i8* %6740 to i64*
	store i64 40, i64* %6741
	%6742 = bitcast %Type_Info* %6738 to i8*
	%6743 = getelementptr inbounds i8, i8* %6742, i64 8
	%6744 = bitcast i8* %6743 to i64*
	store i64 8, i64* %6744
	; Type_Info_Struct
	%6745 = bitcast %Type_Info* %6738 to %Type_Info.Struct*
	%6746 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %6745, i64 0, i32 2
	%6747 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6746, i64 0, i32 3
	store i1 false, i1* %6747
	%6748 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6746, i64 0, i32 4
	store i1 false, i1* %6748
	%6749 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6746, i64 0, i32 5
	store i1 false, i1* %6749
	%6750 = getelementptr inbounds [287 x %Type_Info*], [287 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 282
	%6751 = getelementptr inbounds [287 x %..string], [287 x %..string]* @.__$type_info_names_data, i64 0, i32 282
	%6752 = getelementptr inbounds [287 x i64], [287 x i64]* @.__$type_info_offsets_data, i64 0, i32 144
	%6753 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	%6754 = bitcast %Type_Info* %6753 to %Type_Info*
	%6755 = getelementptr inbounds %Type_Info*, %Type_Info** %6750, i64 0
	%6756 = getelementptr inbounds i64, i64* %6752, i64 0
	%6757 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 198
	store %Type_Info* %6757, %Type_Info** %6755
	%6758 = getelementptr inbounds %..string, %..string* %6751, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$470, i64 0, i32 0), i64 3}, %..string* %6758
	store i64 0, i64* %6756
	%6759 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%6760 = bitcast %Type_Info* %6759 to %Type_Info*
	%6761 = getelementptr inbounds %Type_Info*, %Type_Info** %6750, i64 1
	%6762 = getelementptr inbounds i64, i64* %6752, i64 1
	%6763 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %6763, %Type_Info** %6761
	%6764 = getelementptr inbounds %..string, %..string* %6751, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$471, i64 0, i32 0), i64 4}, %..string* %6764
	store i64 24, i64* %6762
	%6765 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%6766 = bitcast %Type_Info* %6765 to %Type_Info*
	%6767 = getelementptr inbounds %Type_Info*, %Type_Info** %6750, i64 2
	%6768 = getelementptr inbounds i64, i64* %6752, i64 2
	%6769 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %6769, %Type_Info** %6767
	%6770 = getelementptr inbounds %..string, %..string* %6751, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$472, i64 0, i32 0), i64 5}, %..string* %6770
	store i64 32, i64* %6768
	%6771 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6746, i64 0, i32 0
	%6772 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6771, i64 0, i32 0
	store %Type_Info** %6750, %Type_Info*** %6772
	%6773 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6771, i64 0, i32 1
	store i64 3, i64* %6773
	%6774 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %6771, i64 0, i32 2
	store i64 3, i64* %6774
	%6775 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6746, i64 0, i32 1
	%6776 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6775, i64 0, i32 0
	store %..string* %6751, %..string** %6776
	%6777 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6775, i64 0, i32 1
	store i64 3, i64* %6777
	%6778 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %6775, i64 0, i32 2
	store i64 3, i64* %6778
	%6779 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %6746, i64 0, i32 2
	%6780 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6779, i64 0, i32 0
	store i64* %6752, i64** %6780
	%6781 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6779, i64 0, i32 1
	store i64 3, i64* %6781
	%6782 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %6779, i64 0, i32 2
	store i64 3, i64* %6782
	%6783 = getelementptr inbounds %Type_Info, %Type_Info* %6738, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %6783
	%6784 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 200
	%6785 = bitcast %Type_Info* %6784 to i8*
	%6786 = getelementptr inbounds i8, i8* %6785, i64 0
	%6787 = bitcast i8* %6786 to i64*
	store i64 8, i64* %6787
	%6788 = bitcast %Type_Info* %6784 to i8*
	%6789 = getelementptr inbounds i8, i8* %6788, i64 8
	%6790 = bitcast i8* %6789 to i64*
	store i64 8, i64* %6790
	; Type_Info_Pointer
	%6791 = bitcast %Type_Info* %6784 to %Type_Info.Pointer*
	%6792 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 197
	%6793 = bitcast %Type_Info* %6792 to %Type_Info*
	%6794 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6791, i64 0, i32 2
	store %Type_Info* %6793, %Type_Info** %6794
	%6795 = getelementptr inbounds %Type_Info, %Type_Info* %6784, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6795
	%6796 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%6797 = bitcast %Type_Info* %6796 to i8*
	%6798 = getelementptr inbounds i8, i8* %6797, i64 0
	%6799 = bitcast i8* %6798 to i64*
	store i64 8, i64* %6799
	%6800 = bitcast %Type_Info* %6796 to i8*
	%6801 = getelementptr inbounds i8, i8* %6800, i64 8
	%6802 = bitcast i8* %6801 to i64*
	store i64 8, i64* %6802
	; Type_Info_Pointer
	%6803 = bitcast %Type_Info* %6796 to %Type_Info.Pointer*
	%6804 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%6805 = bitcast %Type_Info* %6804 to %Type_Info*
	%6806 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6803, i64 0, i32 2
	store %Type_Info* %6805, %Type_Info** %6806
	%6807 = getelementptr inbounds %Type_Info, %Type_Info* %6796, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6807
	%6808 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%6809 = bitcast %Type_Info* %6808 to i8*
	%6810 = getelementptr inbounds i8, i8* %6809, i64 0
	%6811 = bitcast i8* %6810 to i64*
	store i64 8, i64* %6811
	%6812 = bitcast %Type_Info* %6808 to i8*
	%6813 = getelementptr inbounds i8, i8* %6812, i64 8
	%6814 = bitcast i8* %6813 to i64*
	store i64 8, i64* %6814
	; Type_Info_Pointer
	%6815 = bitcast %Type_Info* %6808 to %Type_Info.Pointer*
	%6816 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%6817 = bitcast %Type_Info* %6816 to %Type_Info*
	%6818 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6815, i64 0, i32 2
	store %Type_Info* %6817, %Type_Info** %6818
	%6819 = getelementptr inbounds %Type_Info, %Type_Info* %6808, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6819
	%6820 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 164
	%6821 = bitcast %Type_Info* %6820 to i8*
	%6822 = getelementptr inbounds i8, i8* %6821, i64 0
	%6823 = bitcast i8* %6822 to i64*
	store i64 8, i64* %6823
	%6824 = bitcast %Type_Info* %6820 to i8*
	%6825 = getelementptr inbounds i8, i8* %6824, i64 8
	%6826 = bitcast i8* %6825 to i64*
	store i64 8, i64* %6826
	; Type_Info_Pointer
	%6827 = bitcast %Type_Info* %6820 to %Type_Info.Pointer*
	%6828 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 165
	%6829 = bitcast %Type_Info* %6828 to %Type_Info*
	%6830 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6827, i64 0, i32 2
	store %Type_Info* %6829, %Type_Info** %6830
	%6831 = getelementptr inbounds %Type_Info, %Type_Info* %6820, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6831
	%6832 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 164
	%6833 = bitcast %Type_Info* %6832 to i8*
	%6834 = getelementptr inbounds i8, i8* %6833, i64 0
	%6835 = bitcast i8* %6834 to i64*
	store i64 8, i64* %6835
	%6836 = bitcast %Type_Info* %6832 to i8*
	%6837 = getelementptr inbounds i8, i8* %6836, i64 8
	%6838 = bitcast i8* %6837 to i64*
	store i64 8, i64* %6838
	; Type_Info_Pointer
	%6839 = bitcast %Type_Info* %6832 to %Type_Info.Pointer*
	%6840 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 165
	%6841 = bitcast %Type_Info* %6840 to %Type_Info*
	%6842 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6839, i64 0, i32 2
	store %Type_Info* %6841, %Type_Info** %6842
	%6843 = getelementptr inbounds %Type_Info, %Type_Info* %6832, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6843
	%6844 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 169
	%6845 = bitcast %Type_Info* %6844 to i8*
	%6846 = getelementptr inbounds i8, i8* %6845, i64 0
	%6847 = bitcast i8* %6846 to i64*
	store i64 8, i64* %6847
	%6848 = bitcast %Type_Info* %6844 to i8*
	%6849 = getelementptr inbounds i8, i8* %6848, i64 8
	%6850 = bitcast i8* %6849 to i64*
	store i64 8, i64* %6850
	; Type_Info_Pointer
	%6851 = bitcast %Type_Info* %6844 to %Type_Info.Pointer*
	%6852 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 170
	%6853 = bitcast %Type_Info* %6852 to %Type_Info*
	%6854 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6851, i64 0, i32 2
	store %Type_Info* %6853, %Type_Info** %6854
	%6855 = getelementptr inbounds %Type_Info, %Type_Info* %6844, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6855
	%6856 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%6857 = bitcast %Type_Info* %6856 to i8*
	%6858 = getelementptr inbounds i8, i8* %6857, i64 0
	%6859 = bitcast i8* %6858 to i64*
	store i64 8, i64* %6859
	%6860 = bitcast %Type_Info* %6856 to i8*
	%6861 = getelementptr inbounds i8, i8* %6860, i64 8
	%6862 = bitcast i8* %6861 to i64*
	store i64 8, i64* %6862
	; Type_Info_Pointer
	%6863 = bitcast %Type_Info* %6856 to %Type_Info.Pointer*
	%6864 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%6865 = bitcast %Type_Info* %6864 to %Type_Info*
	%6866 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6863, i64 0, i32 2
	store %Type_Info* %6865, %Type_Info** %6866
	%6867 = getelementptr inbounds %Type_Info, %Type_Info* %6856, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6867
	%6868 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%6869 = bitcast %Type_Info* %6868 to i8*
	%6870 = getelementptr inbounds i8, i8* %6869, i64 0
	%6871 = bitcast i8* %6870 to i64*
	store i64 8, i64* %6871
	%6872 = bitcast %Type_Info* %6868 to i8*
	%6873 = getelementptr inbounds i8, i8* %6872, i64 8
	%6874 = bitcast i8* %6873 to i64*
	store i64 8, i64* %6874
	; Type_Info_Pointer
	%6875 = bitcast %Type_Info* %6868 to %Type_Info.Pointer*
	%6876 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%6877 = bitcast %Type_Info* %6876 to %Type_Info*
	%6878 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6875, i64 0, i32 2
	store %Type_Info* %6877, %Type_Info** %6878
	%6879 = getelementptr inbounds %Type_Info, %Type_Info* %6868, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6879
	%6880 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%6881 = bitcast %Type_Info* %6880 to i8*
	%6882 = getelementptr inbounds i8, i8* %6881, i64 0
	%6883 = bitcast i8* %6882 to i64*
	store i64 8, i64* %6883
	%6884 = bitcast %Type_Info* %6880 to i8*
	%6885 = getelementptr inbounds i8, i8* %6884, i64 8
	%6886 = bitcast i8* %6885 to i64*
	store i64 8, i64* %6886
	; Type_Info_Pointer
	%6887 = bitcast %Type_Info* %6880 to %Type_Info.Pointer*
	%6888 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%6889 = bitcast %Type_Info* %6888 to %Type_Info*
	%6890 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6887, i64 0, i32 2
	store %Type_Info* %6889, %Type_Info** %6890
	%6891 = getelementptr inbounds %Type_Info, %Type_Info* %6880, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6891
	%6892 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%6893 = bitcast %Type_Info* %6892 to i8*
	%6894 = getelementptr inbounds i8, i8* %6893, i64 0
	%6895 = bitcast i8* %6894 to i64*
	store i64 8, i64* %6895
	%6896 = bitcast %Type_Info* %6892 to i8*
	%6897 = getelementptr inbounds i8, i8* %6896, i64 8
	%6898 = bitcast i8* %6897 to i64*
	store i64 8, i64* %6898
	; Type_Info_Pointer
	%6899 = bitcast %Type_Info* %6892 to %Type_Info.Pointer*
	%6900 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%6901 = bitcast %Type_Info* %6900 to %Type_Info*
	%6902 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6899, i64 0, i32 2
	store %Type_Info* %6901, %Type_Info** %6902
	%6903 = getelementptr inbounds %Type_Info, %Type_Info* %6892, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6903
	%6904 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%6905 = bitcast %Type_Info* %6904 to i8*
	%6906 = getelementptr inbounds i8, i8* %6905, i64 0
	%6907 = bitcast i8* %6906 to i64*
	store i64 8, i64* %6907
	%6908 = bitcast %Type_Info* %6904 to i8*
	%6909 = getelementptr inbounds i8, i8* %6908, i64 8
	%6910 = bitcast i8* %6909 to i64*
	store i64 8, i64* %6910
	; Type_Info_Pointer
	%6911 = bitcast %Type_Info* %6904 to %Type_Info.Pointer*
	%6912 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%6913 = bitcast %Type_Info* %6912 to %Type_Info*
	%6914 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6911, i64 0, i32 2
	store %Type_Info* %6913, %Type_Info** %6914
	%6915 = getelementptr inbounds %Type_Info, %Type_Info* %6904, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6915
	%6916 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 201
	%6917 = bitcast %Type_Info* %6916 to i8*
	%6918 = getelementptr inbounds i8, i8* %6917, i64 0
	%6919 = bitcast i8* %6918 to i64*
	store i64 8, i64* %6919
	%6920 = bitcast %Type_Info* %6916 to i8*
	%6921 = getelementptr inbounds i8, i8* %6920, i64 8
	%6922 = bitcast i8* %6921 to i64*
	store i64 8, i64* %6922
	; Type_Info_Pointer
	%6923 = bitcast %Type_Info* %6916 to %Type_Info.Pointer*
	%6924 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%6925 = bitcast %Type_Info* %6924 to %Type_Info*
	%6926 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6923, i64 0, i32 2
	store %Type_Info* %6925, %Type_Info** %6926
	%6927 = getelementptr inbounds %Type_Info, %Type_Info* %6916, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6927
	%6928 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%6929 = bitcast %Type_Info* %6928 to i8*
	%6930 = getelementptr inbounds i8, i8* %6929, i64 0
	%6931 = bitcast i8* %6930 to i64*
	store i64 8, i64* %6931
	%6932 = bitcast %Type_Info* %6928 to i8*
	%6933 = getelementptr inbounds i8, i8* %6932, i64 8
	%6934 = bitcast i8* %6933 to i64*
	store i64 8, i64* %6934
	; Type_Info_Pointer
	%6935 = bitcast %Type_Info* %6928 to %Type_Info.Pointer*
	%6936 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%6937 = bitcast %Type_Info* %6936 to %Type_Info*
	%6938 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6935, i64 0, i32 2
	store %Type_Info* %6937, %Type_Info** %6938
	%6939 = getelementptr inbounds %Type_Info, %Type_Info* %6928, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6939
	%6940 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%6941 = bitcast %Type_Info* %6940 to i8*
	%6942 = getelementptr inbounds i8, i8* %6941, i64 0
	%6943 = bitcast i8* %6942 to i64*
	store i64 8, i64* %6943
	%6944 = bitcast %Type_Info* %6940 to i8*
	%6945 = getelementptr inbounds i8, i8* %6944, i64 8
	%6946 = bitcast i8* %6945 to i64*
	store i64 8, i64* %6946
	; Type_Info_Pointer
	%6947 = bitcast %Type_Info* %6940 to %Type_Info.Pointer*
	%6948 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%6949 = bitcast %Type_Info* %6948 to %Type_Info*
	%6950 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6947, i64 0, i32 2
	store %Type_Info* %6949, %Type_Info** %6950
	%6951 = getelementptr inbounds %Type_Info, %Type_Info* %6940, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6951
	%6952 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%6953 = bitcast %Type_Info* %6952 to i8*
	%6954 = getelementptr inbounds i8, i8* %6953, i64 0
	%6955 = bitcast i8* %6954 to i64*
	store i64 8, i64* %6955
	%6956 = bitcast %Type_Info* %6952 to i8*
	%6957 = getelementptr inbounds i8, i8* %6956, i64 8
	%6958 = bitcast i8* %6957 to i64*
	store i64 8, i64* %6958
	; Type_Info_Pointer
	%6959 = bitcast %Type_Info* %6952 to %Type_Info.Pointer*
	%6960 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%6961 = bitcast %Type_Info* %6960 to %Type_Info*
	%6962 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6959, i64 0, i32 2
	store %Type_Info* %6961, %Type_Info** %6962
	%6963 = getelementptr inbounds %Type_Info, %Type_Info* %6952, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6963
	%6964 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%6965 = bitcast %Type_Info* %6964 to i8*
	%6966 = getelementptr inbounds i8, i8* %6965, i64 0
	%6967 = bitcast i8* %6966 to i64*
	store i64 8, i64* %6967
	%6968 = bitcast %Type_Info* %6964 to i8*
	%6969 = getelementptr inbounds i8, i8* %6968, i64 8
	%6970 = bitcast i8* %6969 to i64*
	store i64 8, i64* %6970
	; Type_Info_Pointer
	%6971 = bitcast %Type_Info* %6964 to %Type_Info.Pointer*
	%6972 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%6973 = bitcast %Type_Info* %6972 to %Type_Info*
	%6974 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6971, i64 0, i32 2
	store %Type_Info* %6973, %Type_Info** %6974
	%6975 = getelementptr inbounds %Type_Info, %Type_Info* %6964, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6975
	%6976 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%6977 = bitcast %Type_Info* %6976 to i8*
	%6978 = getelementptr inbounds i8, i8* %6977, i64 0
	%6979 = bitcast i8* %6978 to i64*
	store i64 8, i64* %6979
	%6980 = bitcast %Type_Info* %6976 to i8*
	%6981 = getelementptr inbounds i8, i8* %6980, i64 8
	%6982 = bitcast i8* %6981 to i64*
	store i64 8, i64* %6982
	; Type_Info_Pointer
	%6983 = bitcast %Type_Info* %6976 to %Type_Info.Pointer*
	%6984 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%6985 = bitcast %Type_Info* %6984 to %Type_Info*
	%6986 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6983, i64 0, i32 2
	store %Type_Info* %6985, %Type_Info** %6986
	%6987 = getelementptr inbounds %Type_Info, %Type_Info* %6976, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6987
	%6988 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%6989 = bitcast %Type_Info* %6988 to i8*
	%6990 = getelementptr inbounds i8, i8* %6989, i64 0
	%6991 = bitcast i8* %6990 to i64*
	store i64 8, i64* %6991
	%6992 = bitcast %Type_Info* %6988 to i8*
	%6993 = getelementptr inbounds i8, i8* %6992, i64 8
	%6994 = bitcast i8* %6993 to i64*
	store i64 8, i64* %6994
	; Type_Info_Pointer
	%6995 = bitcast %Type_Info* %6988 to %Type_Info.Pointer*
	%6996 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%6997 = bitcast %Type_Info* %6996 to %Type_Info*
	%6998 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %6995, i64 0, i32 2
	store %Type_Info* %6997, %Type_Info** %6998
	%6999 = getelementptr inbounds %Type_Info, %Type_Info* %6988, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %6999
	%7000 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	%7001 = bitcast %Type_Info* %7000 to i8*
	%7002 = getelementptr inbounds i8, i8* %7001, i64 0
	%7003 = bitcast i8* %7002 to i64*
	store i64 8, i64* %7003
	%7004 = bitcast %Type_Info* %7000 to i8*
	%7005 = getelementptr inbounds i8, i8* %7004, i64 8
	%7006 = bitcast i8* %7005 to i64*
	store i64 8, i64* %7006
	; Type_Info_Pointer
	%7007 = bitcast %Type_Info* %7000 to %Type_Info.Pointer*
	%7008 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%7009 = bitcast %Type_Info* %7008 to %Type_Info*
	%7010 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7007, i64 0, i32 2
	store %Type_Info* %7009, %Type_Info** %7010
	%7011 = getelementptr inbounds %Type_Info, %Type_Info* %7000, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7011
	%7012 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%7013 = bitcast %Type_Info* %7012 to i8*
	%7014 = getelementptr inbounds i8, i8* %7013, i64 0
	%7015 = bitcast i8* %7014 to i64*
	store i64 8, i64* %7015
	%7016 = bitcast %Type_Info* %7012 to i8*
	%7017 = getelementptr inbounds i8, i8* %7016, i64 8
	%7018 = bitcast i8* %7017 to i64*
	store i64 8, i64* %7018
	; Type_Info_Pointer
	%7019 = bitcast %Type_Info* %7012 to %Type_Info.Pointer*
	%7020 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%7021 = bitcast %Type_Info* %7020 to %Type_Info*
	%7022 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7019, i64 0, i32 2
	store %Type_Info* %7021, %Type_Info** %7022
	%7023 = getelementptr inbounds %Type_Info, %Type_Info* %7012, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7023
	%7024 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%7025 = bitcast %Type_Info* %7024 to i8*
	%7026 = getelementptr inbounds i8, i8* %7025, i64 0
	%7027 = bitcast i8* %7026 to i64*
	store i64 8, i64* %7027
	%7028 = bitcast %Type_Info* %7024 to i8*
	%7029 = getelementptr inbounds i8, i8* %7028, i64 8
	%7030 = bitcast i8* %7029 to i64*
	store i64 8, i64* %7030
	; Type_Info_Pointer
	%7031 = bitcast %Type_Info* %7024 to %Type_Info.Pointer*
	%7032 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%7033 = bitcast %Type_Info* %7032 to %Type_Info*
	%7034 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7031, i64 0, i32 2
	store %Type_Info* %7033, %Type_Info** %7034
	%7035 = getelementptr inbounds %Type_Info, %Type_Info* %7024, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7035
	%7036 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%7037 = bitcast %Type_Info* %7036 to i8*
	%7038 = getelementptr inbounds i8, i8* %7037, i64 0
	%7039 = bitcast i8* %7038 to i64*
	store i64 8, i64* %7039
	%7040 = bitcast %Type_Info* %7036 to i8*
	%7041 = getelementptr inbounds i8, i8* %7040, i64 8
	%7042 = bitcast i8* %7041 to i64*
	store i64 8, i64* %7042
	; Type_Info_Pointer
	%7043 = bitcast %Type_Info* %7036 to %Type_Info.Pointer*
	%7044 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%7045 = bitcast %Type_Info* %7044 to %Type_Info*
	%7046 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7043, i64 0, i32 2
	store %Type_Info* %7045, %Type_Info** %7046
	%7047 = getelementptr inbounds %Type_Info, %Type_Info* %7036, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7047
	%7048 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%7049 = bitcast %Type_Info* %7048 to i8*
	%7050 = getelementptr inbounds i8, i8* %7049, i64 0
	%7051 = bitcast i8* %7050 to i64*
	store i64 8, i64* %7051
	%7052 = bitcast %Type_Info* %7048 to i8*
	%7053 = getelementptr inbounds i8, i8* %7052, i64 8
	%7054 = bitcast i8* %7053 to i64*
	store i64 8, i64* %7054
	; Type_Info_Pointer
	%7055 = bitcast %Type_Info* %7048 to %Type_Info.Pointer*
	%7056 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%7057 = bitcast %Type_Info* %7056 to %Type_Info*
	%7058 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7055, i64 0, i32 2
	store %Type_Info* %7057, %Type_Info** %7058
	%7059 = getelementptr inbounds %Type_Info, %Type_Info* %7048, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7059
	%7060 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%7061 = bitcast %Type_Info* %7060 to i8*
	%7062 = getelementptr inbounds i8, i8* %7061, i64 0
	%7063 = bitcast i8* %7062 to i64*
	store i64 8, i64* %7063
	%7064 = bitcast %Type_Info* %7060 to i8*
	%7065 = getelementptr inbounds i8, i8* %7064, i64 8
	%7066 = bitcast i8* %7065 to i64*
	store i64 8, i64* %7066
	; Type_Info_Pointer
	%7067 = bitcast %Type_Info* %7060 to %Type_Info.Pointer*
	%7068 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%7069 = bitcast %Type_Info* %7068 to %Type_Info*
	%7070 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7067, i64 0, i32 2
	store %Type_Info* %7069, %Type_Info** %7070
	%7071 = getelementptr inbounds %Type_Info, %Type_Info* %7060, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7071
	%7072 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%7073 = bitcast %Type_Info* %7072 to i8*
	%7074 = getelementptr inbounds i8, i8* %7073, i64 0
	%7075 = bitcast i8* %7074 to i64*
	store i64 8, i64* %7075
	%7076 = bitcast %Type_Info* %7072 to i8*
	%7077 = getelementptr inbounds i8, i8* %7076, i64 8
	%7078 = bitcast i8* %7077 to i64*
	store i64 8, i64* %7078
	; Type_Info_Pointer
	%7079 = bitcast %Type_Info* %7072 to %Type_Info.Pointer*
	%7080 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%7081 = bitcast %Type_Info* %7080 to %Type_Info*
	%7082 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7079, i64 0, i32 2
	store %Type_Info* %7081, %Type_Info** %7082
	%7083 = getelementptr inbounds %Type_Info, %Type_Info* %7072, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7083
	%7084 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%7085 = bitcast %Type_Info* %7084 to i8*
	%7086 = getelementptr inbounds i8, i8* %7085, i64 0
	%7087 = bitcast i8* %7086 to i64*
	store i64 8, i64* %7087
	%7088 = bitcast %Type_Info* %7084 to i8*
	%7089 = getelementptr inbounds i8, i8* %7088, i64 8
	%7090 = bitcast i8* %7089 to i64*
	store i64 8, i64* %7090
	; Type_Info_Pointer
	%7091 = bitcast %Type_Info* %7084 to %Type_Info.Pointer*
	%7092 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%7093 = bitcast %Type_Info* %7092 to %Type_Info*
	%7094 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7091, i64 0, i32 2
	store %Type_Info* %7093, %Type_Info** %7094
	%7095 = getelementptr inbounds %Type_Info, %Type_Info* %7084, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7095
	%7096 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%7097 = bitcast %Type_Info* %7096 to i8*
	%7098 = getelementptr inbounds i8, i8* %7097, i64 0
	%7099 = bitcast i8* %7098 to i64*
	store i64 8, i64* %7099
	%7100 = bitcast %Type_Info* %7096 to i8*
	%7101 = getelementptr inbounds i8, i8* %7100, i64 8
	%7102 = bitcast i8* %7101 to i64*
	store i64 8, i64* %7102
	; Type_Info_Pointer
	%7103 = bitcast %Type_Info* %7096 to %Type_Info.Pointer*
	%7104 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%7105 = bitcast %Type_Info* %7104 to %Type_Info*
	%7106 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7103, i64 0, i32 2
	store %Type_Info* %7105, %Type_Info** %7106
	%7107 = getelementptr inbounds %Type_Info, %Type_Info* %7096, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7107
	%7108 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%7109 = bitcast %Type_Info* %7108 to i8*
	%7110 = getelementptr inbounds i8, i8* %7109, i64 0
	%7111 = bitcast i8* %7110 to i64*
	store i64 8, i64* %7111
	%7112 = bitcast %Type_Info* %7108 to i8*
	%7113 = getelementptr inbounds i8, i8* %7112, i64 8
	%7114 = bitcast i8* %7113 to i64*
	store i64 8, i64* %7114
	; Type_Info_Pointer
	%7115 = bitcast %Type_Info* %7108 to %Type_Info.Pointer*
	%7116 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%7117 = bitcast %Type_Info* %7116 to %Type_Info*
	%7118 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7115, i64 0, i32 2
	store %Type_Info* %7117, %Type_Info** %7118
	%7119 = getelementptr inbounds %Type_Info, %Type_Info* %7108, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7119
	%7120 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%7121 = bitcast %Type_Info* %7120 to i8*
	%7122 = getelementptr inbounds i8, i8* %7121, i64 0
	%7123 = bitcast i8* %7122 to i64*
	store i64 8, i64* %7123
	%7124 = bitcast %Type_Info* %7120 to i8*
	%7125 = getelementptr inbounds i8, i8* %7124, i64 8
	%7126 = bitcast i8* %7125 to i64*
	store i64 8, i64* %7126
	; Type_Info_Pointer
	%7127 = bitcast %Type_Info* %7120 to %Type_Info.Pointer*
	%7128 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%7129 = bitcast %Type_Info* %7128 to %Type_Info*
	%7130 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7127, i64 0, i32 2
	store %Type_Info* %7129, %Type_Info** %7130
	%7131 = getelementptr inbounds %Type_Info, %Type_Info* %7120, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7131
	%7132 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 201
	%7133 = bitcast %Type_Info* %7132 to i8*
	%7134 = getelementptr inbounds i8, i8* %7133, i64 0
	%7135 = bitcast i8* %7134 to i64*
	store i64 8, i64* %7135
	%7136 = bitcast %Type_Info* %7132 to i8*
	%7137 = getelementptr inbounds i8, i8* %7136, i64 8
	%7138 = bitcast i8* %7137 to i64*
	store i64 8, i64* %7138
	; Type_Info_Pointer
	%7139 = bitcast %Type_Info* %7132 to %Type_Info.Pointer*
	%7140 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%7141 = bitcast %Type_Info* %7140 to %Type_Info*
	%7142 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7139, i64 0, i32 2
	store %Type_Info* %7141, %Type_Info** %7142
	%7143 = getelementptr inbounds %Type_Info, %Type_Info* %7132, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7143
	%7144 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%7145 = bitcast %Type_Info* %7144 to i8*
	%7146 = getelementptr inbounds i8, i8* %7145, i64 0
	%7147 = bitcast i8* %7146 to i64*
	store i64 8, i64* %7147
	%7148 = bitcast %Type_Info* %7144 to i8*
	%7149 = getelementptr inbounds i8, i8* %7148, i64 8
	%7150 = bitcast i8* %7149 to i64*
	store i64 8, i64* %7150
	; Type_Info_Pointer
	%7151 = bitcast %Type_Info* %7144 to %Type_Info.Pointer*
	%7152 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%7153 = bitcast %Type_Info* %7152 to %Type_Info*
	%7154 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7151, i64 0, i32 2
	store %Type_Info* %7153, %Type_Info** %7154
	%7155 = getelementptr inbounds %Type_Info, %Type_Info* %7144, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7155
	%7156 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%7157 = bitcast %Type_Info* %7156 to i8*
	%7158 = getelementptr inbounds i8, i8* %7157, i64 0
	%7159 = bitcast i8* %7158 to i64*
	store i64 8, i64* %7159
	%7160 = bitcast %Type_Info* %7156 to i8*
	%7161 = getelementptr inbounds i8, i8* %7160, i64 8
	%7162 = bitcast i8* %7161 to i64*
	store i64 8, i64* %7162
	; Type_Info_Pointer
	%7163 = bitcast %Type_Info* %7156 to %Type_Info.Pointer*
	%7164 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%7165 = bitcast %Type_Info* %7164 to %Type_Info*
	%7166 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7163, i64 0, i32 2
	store %Type_Info* %7165, %Type_Info** %7166
	%7167 = getelementptr inbounds %Type_Info, %Type_Info* %7156, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7167
	%7168 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%7169 = bitcast %Type_Info* %7168 to i8*
	%7170 = getelementptr inbounds i8, i8* %7169, i64 0
	%7171 = bitcast i8* %7170 to i64*
	store i64 8, i64* %7171
	%7172 = bitcast %Type_Info* %7168 to i8*
	%7173 = getelementptr inbounds i8, i8* %7172, i64 8
	%7174 = bitcast i8* %7173 to i64*
	store i64 8, i64* %7174
	; Type_Info_Pointer
	%7175 = bitcast %Type_Info* %7168 to %Type_Info.Pointer*
	%7176 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%7177 = bitcast %Type_Info* %7176 to %Type_Info*
	%7178 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7175, i64 0, i32 2
	store %Type_Info* %7177, %Type_Info** %7178
	%7179 = getelementptr inbounds %Type_Info, %Type_Info* %7168, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7179
	%7180 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%7181 = bitcast %Type_Info* %7180 to i8*
	%7182 = getelementptr inbounds i8, i8* %7181, i64 0
	%7183 = bitcast i8* %7182 to i64*
	store i64 8, i64* %7183
	%7184 = bitcast %Type_Info* %7180 to i8*
	%7185 = getelementptr inbounds i8, i8* %7184, i64 8
	%7186 = bitcast i8* %7185 to i64*
	store i64 8, i64* %7186
	; Type_Info_Pointer
	%7187 = bitcast %Type_Info* %7180 to %Type_Info.Pointer*
	%7188 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%7189 = bitcast %Type_Info* %7188 to %Type_Info*
	%7190 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7187, i64 0, i32 2
	store %Type_Info* %7189, %Type_Info** %7190
	%7191 = getelementptr inbounds %Type_Info, %Type_Info* %7180, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7191
	%7192 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%7193 = bitcast %Type_Info* %7192 to i8*
	%7194 = getelementptr inbounds i8, i8* %7193, i64 0
	%7195 = bitcast i8* %7194 to i64*
	store i64 8, i64* %7195
	%7196 = bitcast %Type_Info* %7192 to i8*
	%7197 = getelementptr inbounds i8, i8* %7196, i64 8
	%7198 = bitcast i8* %7197 to i64*
	store i64 8, i64* %7198
	; Type_Info_Pointer
	%7199 = bitcast %Type_Info* %7192 to %Type_Info.Pointer*
	%7200 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%7201 = bitcast %Type_Info* %7200 to %Type_Info*
	%7202 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7199, i64 0, i32 2
	store %Type_Info* %7201, %Type_Info** %7202
	%7203 = getelementptr inbounds %Type_Info, %Type_Info* %7192, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7203
	%7204 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%7205 = bitcast %Type_Info* %7204 to i8*
	%7206 = getelementptr inbounds i8, i8* %7205, i64 0
	%7207 = bitcast i8* %7206 to i64*
	store i64 8, i64* %7207
	%7208 = bitcast %Type_Info* %7204 to i8*
	%7209 = getelementptr inbounds i8, i8* %7208, i64 8
	%7210 = bitcast i8* %7209 to i64*
	store i64 8, i64* %7210
	; Type_Info_Pointer
	%7211 = bitcast %Type_Info* %7204 to %Type_Info.Pointer*
	%7212 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%7213 = bitcast %Type_Info* %7212 to %Type_Info*
	%7214 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7211, i64 0, i32 2
	store %Type_Info* %7213, %Type_Info** %7214
	%7215 = getelementptr inbounds %Type_Info, %Type_Info* %7204, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7215
	%7216 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%7217 = bitcast %Type_Info* %7216 to i8*
	%7218 = getelementptr inbounds i8, i8* %7217, i64 0
	%7219 = bitcast i8* %7218 to i64*
	store i64 8, i64* %7219
	%7220 = bitcast %Type_Info* %7216 to i8*
	%7221 = getelementptr inbounds i8, i8* %7220, i64 8
	%7222 = bitcast i8* %7221 to i64*
	store i64 8, i64* %7222
	; Type_Info_Pointer
	%7223 = bitcast %Type_Info* %7216 to %Type_Info.Pointer*
	%7224 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%7225 = bitcast %Type_Info* %7224 to %Type_Info*
	%7226 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7223, i64 0, i32 2
	store %Type_Info* %7225, %Type_Info** %7226
	%7227 = getelementptr inbounds %Type_Info, %Type_Info* %7216, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7227
	%7228 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%7229 = bitcast %Type_Info* %7228 to i8*
	%7230 = getelementptr inbounds i8, i8* %7229, i64 0
	%7231 = bitcast i8* %7230 to i64*
	store i64 8, i64* %7231
	%7232 = bitcast %Type_Info* %7228 to i8*
	%7233 = getelementptr inbounds i8, i8* %7232, i64 8
	%7234 = bitcast i8* %7233 to i64*
	store i64 8, i64* %7234
	; Type_Info_Pointer
	%7235 = bitcast %Type_Info* %7228 to %Type_Info.Pointer*
	%7236 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%7237 = bitcast %Type_Info* %7236 to %Type_Info*
	%7238 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7235, i64 0, i32 2
	store %Type_Info* %7237, %Type_Info** %7238
	%7239 = getelementptr inbounds %Type_Info, %Type_Info* %7228, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7239
	%7240 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%7241 = bitcast %Type_Info* %7240 to i8*
	%7242 = getelementptr inbounds i8, i8* %7241, i64 0
	%7243 = bitcast i8* %7242 to i64*
	store i64 8, i64* %7243
	%7244 = bitcast %Type_Info* %7240 to i8*
	%7245 = getelementptr inbounds i8, i8* %7244, i64 8
	%7246 = bitcast i8* %7245 to i64*
	store i64 8, i64* %7246
	; Type_Info_Pointer
	%7247 = bitcast %Type_Info* %7240 to %Type_Info.Pointer*
	%7248 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%7249 = bitcast %Type_Info* %7248 to %Type_Info*
	%7250 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7247, i64 0, i32 2
	store %Type_Info* %7249, %Type_Info** %7250
	%7251 = getelementptr inbounds %Type_Info, %Type_Info* %7240, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7251
	%7252 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%7253 = bitcast %Type_Info* %7252 to i8*
	%7254 = getelementptr inbounds i8, i8* %7253, i64 0
	%7255 = bitcast i8* %7254 to i64*
	store i64 8, i64* %7255
	%7256 = bitcast %Type_Info* %7252 to i8*
	%7257 = getelementptr inbounds i8, i8* %7256, i64 8
	%7258 = bitcast i8* %7257 to i64*
	store i64 8, i64* %7258
	; Type_Info_Pointer
	%7259 = bitcast %Type_Info* %7252 to %Type_Info.Pointer*
	%7260 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%7261 = bitcast %Type_Info* %7260 to %Type_Info*
	%7262 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7259, i64 0, i32 2
	store %Type_Info* %7261, %Type_Info** %7262
	%7263 = getelementptr inbounds %Type_Info, %Type_Info* %7252, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7263
	%7264 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%7265 = bitcast %Type_Info* %7264 to i8*
	%7266 = getelementptr inbounds i8, i8* %7265, i64 0
	%7267 = bitcast i8* %7266 to i64*
	store i64 8, i64* %7267
	%7268 = bitcast %Type_Info* %7264 to i8*
	%7269 = getelementptr inbounds i8, i8* %7268, i64 8
	%7270 = bitcast i8* %7269 to i64*
	store i64 8, i64* %7270
	; Type_Info_Pointer
	%7271 = bitcast %Type_Info* %7264 to %Type_Info.Pointer*
	%7272 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%7273 = bitcast %Type_Info* %7272 to %Type_Info*
	%7274 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7271, i64 0, i32 2
	store %Type_Info* %7273, %Type_Info** %7274
	%7275 = getelementptr inbounds %Type_Info, %Type_Info* %7264, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7275
	%7276 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%7277 = bitcast %Type_Info* %7276 to i8*
	%7278 = getelementptr inbounds i8, i8* %7277, i64 0
	%7279 = bitcast i8* %7278 to i64*
	store i64 8, i64* %7279
	%7280 = bitcast %Type_Info* %7276 to i8*
	%7281 = getelementptr inbounds i8, i8* %7280, i64 8
	%7282 = bitcast i8* %7281 to i64*
	store i64 8, i64* %7282
	; Type_Info_Pointer
	%7283 = bitcast %Type_Info* %7276 to %Type_Info.Pointer*
	%7284 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%7285 = bitcast %Type_Info* %7284 to %Type_Info*
	%7286 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7283, i64 0, i32 2
	store %Type_Info* %7285, %Type_Info** %7286
	%7287 = getelementptr inbounds %Type_Info, %Type_Info* %7276, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7287
	%7288 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%7289 = bitcast %Type_Info* %7288 to i8*
	%7290 = getelementptr inbounds i8, i8* %7289, i64 0
	%7291 = bitcast i8* %7290 to i64*
	store i64 8, i64* %7291
	%7292 = bitcast %Type_Info* %7288 to i8*
	%7293 = getelementptr inbounds i8, i8* %7292, i64 8
	%7294 = bitcast i8* %7293 to i64*
	store i64 8, i64* %7294
	; Type_Info_Pointer
	%7295 = bitcast %Type_Info* %7288 to %Type_Info.Pointer*
	%7296 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%7297 = bitcast %Type_Info* %7296 to %Type_Info*
	%7298 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7295, i64 0, i32 2
	store %Type_Info* %7297, %Type_Info** %7298
	%7299 = getelementptr inbounds %Type_Info, %Type_Info* %7288, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7299
	%7300 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%7301 = bitcast %Type_Info* %7300 to i8*
	%7302 = getelementptr inbounds i8, i8* %7301, i64 0
	%7303 = bitcast i8* %7302 to i64*
	store i64 8, i64* %7303
	%7304 = bitcast %Type_Info* %7300 to i8*
	%7305 = getelementptr inbounds i8, i8* %7304, i64 8
	%7306 = bitcast i8* %7305 to i64*
	store i64 8, i64* %7306
	; Type_Info_Pointer
	%7307 = bitcast %Type_Info* %7300 to %Type_Info.Pointer*
	%7308 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%7309 = bitcast %Type_Info* %7308 to %Type_Info*
	%7310 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7307, i64 0, i32 2
	store %Type_Info* %7309, %Type_Info** %7310
	%7311 = getelementptr inbounds %Type_Info, %Type_Info* %7300, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7311
	%7312 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%7313 = bitcast %Type_Info* %7312 to i8*
	%7314 = getelementptr inbounds i8, i8* %7313, i64 0
	%7315 = bitcast i8* %7314 to i64*
	store i64 8, i64* %7315
	%7316 = bitcast %Type_Info* %7312 to i8*
	%7317 = getelementptr inbounds i8, i8* %7316, i64 8
	%7318 = bitcast i8* %7317 to i64*
	store i64 8, i64* %7318
	; Type_Info_Pointer
	%7319 = bitcast %Type_Info* %7312 to %Type_Info.Pointer*
	%7320 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%7321 = bitcast %Type_Info* %7320 to %Type_Info*
	%7322 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7319, i64 0, i32 2
	store %Type_Info* %7321, %Type_Info** %7322
	%7323 = getelementptr inbounds %Type_Info, %Type_Info* %7312, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7323
	%7324 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%7325 = bitcast %Type_Info* %7324 to i8*
	%7326 = getelementptr inbounds i8, i8* %7325, i64 0
	%7327 = bitcast i8* %7326 to i64*
	store i64 8, i64* %7327
	%7328 = bitcast %Type_Info* %7324 to i8*
	%7329 = getelementptr inbounds i8, i8* %7328, i64 8
	%7330 = bitcast i8* %7329 to i64*
	store i64 8, i64* %7330
	; Type_Info_Pointer
	%7331 = bitcast %Type_Info* %7324 to %Type_Info.Pointer*
	%7332 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%7333 = bitcast %Type_Info* %7332 to %Type_Info*
	%7334 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7331, i64 0, i32 2
	store %Type_Info* %7333, %Type_Info** %7334
	%7335 = getelementptr inbounds %Type_Info, %Type_Info* %7324, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7335
	%7336 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%7337 = bitcast %Type_Info* %7336 to i8*
	%7338 = getelementptr inbounds i8, i8* %7337, i64 0
	%7339 = bitcast i8* %7338 to i64*
	store i64 8, i64* %7339
	%7340 = bitcast %Type_Info* %7336 to i8*
	%7341 = getelementptr inbounds i8, i8* %7340, i64 8
	%7342 = bitcast i8* %7341 to i64*
	store i64 8, i64* %7342
	; Type_Info_Pointer
	%7343 = bitcast %Type_Info* %7336 to %Type_Info.Pointer*
	%7344 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%7345 = bitcast %Type_Info* %7344 to %Type_Info*
	%7346 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7343, i64 0, i32 2
	store %Type_Info* %7345, %Type_Info** %7346
	%7347 = getelementptr inbounds %Type_Info, %Type_Info* %7336, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7347
	%7348 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 201
	%7349 = bitcast %Type_Info* %7348 to i8*
	%7350 = getelementptr inbounds i8, i8* %7349, i64 0
	%7351 = bitcast i8* %7350 to i64*
	store i64 8, i64* %7351
	%7352 = bitcast %Type_Info* %7348 to i8*
	%7353 = getelementptr inbounds i8, i8* %7352, i64 8
	%7354 = bitcast i8* %7353 to i64*
	store i64 8, i64* %7354
	; Type_Info_Pointer
	%7355 = bitcast %Type_Info* %7348 to %Type_Info.Pointer*
	%7356 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%7357 = bitcast %Type_Info* %7356 to %Type_Info*
	%7358 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7355, i64 0, i32 2
	store %Type_Info* %7357, %Type_Info** %7358
	%7359 = getelementptr inbounds %Type_Info, %Type_Info* %7348, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7359
	%7360 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%7361 = bitcast %Type_Info* %7360 to i8*
	%7362 = getelementptr inbounds i8, i8* %7361, i64 0
	%7363 = bitcast i8* %7362 to i64*
	store i64 8, i64* %7363
	%7364 = bitcast %Type_Info* %7360 to i8*
	%7365 = getelementptr inbounds i8, i8* %7364, i64 8
	%7366 = bitcast i8* %7365 to i64*
	store i64 8, i64* %7366
	; Type_Info_Pointer
	%7367 = bitcast %Type_Info* %7360 to %Type_Info.Pointer*
	%7368 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%7369 = bitcast %Type_Info* %7368 to %Type_Info*
	%7370 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7367, i64 0, i32 2
	store %Type_Info* %7369, %Type_Info** %7370
	%7371 = getelementptr inbounds %Type_Info, %Type_Info* %7360, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7371
	%7372 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%7373 = bitcast %Type_Info* %7372 to i8*
	%7374 = getelementptr inbounds i8, i8* %7373, i64 0
	%7375 = bitcast i8* %7374 to i64*
	store i64 8, i64* %7375
	%7376 = bitcast %Type_Info* %7372 to i8*
	%7377 = getelementptr inbounds i8, i8* %7376, i64 8
	%7378 = bitcast i8* %7377 to i64*
	store i64 8, i64* %7378
	; Type_Info_Pointer
	%7379 = bitcast %Type_Info* %7372 to %Type_Info.Pointer*
	%7380 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%7381 = bitcast %Type_Info* %7380 to %Type_Info*
	%7382 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7379, i64 0, i32 2
	store %Type_Info* %7381, %Type_Info** %7382
	%7383 = getelementptr inbounds %Type_Info, %Type_Info* %7372, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7383
	%7384 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%7385 = bitcast %Type_Info* %7384 to i8*
	%7386 = getelementptr inbounds i8, i8* %7385, i64 0
	%7387 = bitcast i8* %7386 to i64*
	store i64 8, i64* %7387
	%7388 = bitcast %Type_Info* %7384 to i8*
	%7389 = getelementptr inbounds i8, i8* %7388, i64 8
	%7390 = bitcast i8* %7389 to i64*
	store i64 8, i64* %7390
	; Type_Info_Pointer
	%7391 = bitcast %Type_Info* %7384 to %Type_Info.Pointer*
	%7392 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%7393 = bitcast %Type_Info* %7392 to %Type_Info*
	%7394 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7391, i64 0, i32 2
	store %Type_Info* %7393, %Type_Info** %7394
	%7395 = getelementptr inbounds %Type_Info, %Type_Info* %7384, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7395
	%7396 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%7397 = bitcast %Type_Info* %7396 to i8*
	%7398 = getelementptr inbounds i8, i8* %7397, i64 0
	%7399 = bitcast i8* %7398 to i64*
	store i64 8, i64* %7399
	%7400 = bitcast %Type_Info* %7396 to i8*
	%7401 = getelementptr inbounds i8, i8* %7400, i64 8
	%7402 = bitcast i8* %7401 to i64*
	store i64 8, i64* %7402
	; Type_Info_Pointer
	%7403 = bitcast %Type_Info* %7396 to %Type_Info.Pointer*
	%7404 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%7405 = bitcast %Type_Info* %7404 to %Type_Info*
	%7406 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7403, i64 0, i32 2
	store %Type_Info* %7405, %Type_Info** %7406
	%7407 = getelementptr inbounds %Type_Info, %Type_Info* %7396, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7407
	%7408 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%7409 = bitcast %Type_Info* %7408 to i8*
	%7410 = getelementptr inbounds i8, i8* %7409, i64 0
	%7411 = bitcast i8* %7410 to i64*
	store i64 8, i64* %7411
	%7412 = bitcast %Type_Info* %7408 to i8*
	%7413 = getelementptr inbounds i8, i8* %7412, i64 8
	%7414 = bitcast i8* %7413 to i64*
	store i64 8, i64* %7414
	; Type_Info_Pointer
	%7415 = bitcast %Type_Info* %7408 to %Type_Info.Pointer*
	%7416 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%7417 = bitcast %Type_Info* %7416 to %Type_Info*
	%7418 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7415, i64 0, i32 2
	store %Type_Info* %7417, %Type_Info** %7418
	%7419 = getelementptr inbounds %Type_Info, %Type_Info* %7408, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7419
	%7420 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%7421 = bitcast %Type_Info* %7420 to i8*
	%7422 = getelementptr inbounds i8, i8* %7421, i64 0
	%7423 = bitcast i8* %7422 to i64*
	store i64 8, i64* %7423
	%7424 = bitcast %Type_Info* %7420 to i8*
	%7425 = getelementptr inbounds i8, i8* %7424, i64 8
	%7426 = bitcast i8* %7425 to i64*
	store i64 8, i64* %7426
	; Type_Info_Pointer
	%7427 = bitcast %Type_Info* %7420 to %Type_Info.Pointer*
	%7428 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%7429 = bitcast %Type_Info* %7428 to %Type_Info*
	%7430 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7427, i64 0, i32 2
	store %Type_Info* %7429, %Type_Info** %7430
	%7431 = getelementptr inbounds %Type_Info, %Type_Info* %7420, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7431
	%7432 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%7433 = bitcast %Type_Info* %7432 to i8*
	%7434 = getelementptr inbounds i8, i8* %7433, i64 0
	%7435 = bitcast i8* %7434 to i64*
	store i64 8, i64* %7435
	%7436 = bitcast %Type_Info* %7432 to i8*
	%7437 = getelementptr inbounds i8, i8* %7436, i64 8
	%7438 = bitcast i8* %7437 to i64*
	store i64 8, i64* %7438
	; Type_Info_Pointer
	%7439 = bitcast %Type_Info* %7432 to %Type_Info.Pointer*
	%7440 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%7441 = bitcast %Type_Info* %7440 to %Type_Info*
	%7442 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7439, i64 0, i32 2
	store %Type_Info* %7441, %Type_Info** %7442
	%7443 = getelementptr inbounds %Type_Info, %Type_Info* %7432, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7443
	%7444 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%7445 = bitcast %Type_Info* %7444 to i8*
	%7446 = getelementptr inbounds i8, i8* %7445, i64 0
	%7447 = bitcast i8* %7446 to i64*
	store i64 8, i64* %7447
	%7448 = bitcast %Type_Info* %7444 to i8*
	%7449 = getelementptr inbounds i8, i8* %7448, i64 8
	%7450 = bitcast i8* %7449 to i64*
	store i64 8, i64* %7450
	; Type_Info_Pointer
	%7451 = bitcast %Type_Info* %7444 to %Type_Info.Pointer*
	%7452 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%7453 = bitcast %Type_Info* %7452 to %Type_Info*
	%7454 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7451, i64 0, i32 2
	store %Type_Info* %7453, %Type_Info** %7454
	%7455 = getelementptr inbounds %Type_Info, %Type_Info* %7444, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7455
	%7456 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%7457 = bitcast %Type_Info* %7456 to i8*
	%7458 = getelementptr inbounds i8, i8* %7457, i64 0
	%7459 = bitcast i8* %7458 to i64*
	store i64 8, i64* %7459
	%7460 = bitcast %Type_Info* %7456 to i8*
	%7461 = getelementptr inbounds i8, i8* %7460, i64 8
	%7462 = bitcast i8* %7461 to i64*
	store i64 8, i64* %7462
	; Type_Info_Pointer
	%7463 = bitcast %Type_Info* %7456 to %Type_Info.Pointer*
	%7464 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%7465 = bitcast %Type_Info* %7464 to %Type_Info*
	%7466 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7463, i64 0, i32 2
	store %Type_Info* %7465, %Type_Info** %7466
	%7467 = getelementptr inbounds %Type_Info, %Type_Info* %7456, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7467
	%7468 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	%7469 = bitcast %Type_Info* %7468 to i8*
	%7470 = getelementptr inbounds i8, i8* %7469, i64 0
	%7471 = bitcast i8* %7470 to i64*
	store i64 8, i64* %7471
	%7472 = bitcast %Type_Info* %7468 to i8*
	%7473 = getelementptr inbounds i8, i8* %7472, i64 8
	%7474 = bitcast i8* %7473 to i64*
	store i64 8, i64* %7474
	; Type_Info_Pointer
	%7475 = bitcast %Type_Info* %7468 to %Type_Info.Pointer*
	%7476 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%7477 = bitcast %Type_Info* %7476 to %Type_Info*
	%7478 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7475, i64 0, i32 2
	store %Type_Info* %7477, %Type_Info** %7478
	%7479 = getelementptr inbounds %Type_Info, %Type_Info* %7468, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7479
	%7480 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%7481 = bitcast %Type_Info* %7480 to i8*
	%7482 = getelementptr inbounds i8, i8* %7481, i64 0
	%7483 = bitcast i8* %7482 to i64*
	store i64 8, i64* %7483
	%7484 = bitcast %Type_Info* %7480 to i8*
	%7485 = getelementptr inbounds i8, i8* %7484, i64 8
	%7486 = bitcast i8* %7485 to i64*
	store i64 8, i64* %7486
	; Type_Info_Pointer
	%7487 = bitcast %Type_Info* %7480 to %Type_Info.Pointer*
	%7488 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%7489 = bitcast %Type_Info* %7488 to %Type_Info*
	%7490 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7487, i64 0, i32 2
	store %Type_Info* %7489, %Type_Info** %7490
	%7491 = getelementptr inbounds %Type_Info, %Type_Info* %7480, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7491
	%7492 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%7493 = bitcast %Type_Info* %7492 to i8*
	%7494 = getelementptr inbounds i8, i8* %7493, i64 0
	%7495 = bitcast i8* %7494 to i64*
	store i64 8, i64* %7495
	%7496 = bitcast %Type_Info* %7492 to i8*
	%7497 = getelementptr inbounds i8, i8* %7496, i64 8
	%7498 = bitcast i8* %7497 to i64*
	store i64 8, i64* %7498
	; Type_Info_Pointer
	%7499 = bitcast %Type_Info* %7492 to %Type_Info.Pointer*
	%7500 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%7501 = bitcast %Type_Info* %7500 to %Type_Info*
	%7502 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7499, i64 0, i32 2
	store %Type_Info* %7501, %Type_Info** %7502
	%7503 = getelementptr inbounds %Type_Info, %Type_Info* %7492, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7503
	%7504 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%7505 = bitcast %Type_Info* %7504 to i8*
	%7506 = getelementptr inbounds i8, i8* %7505, i64 0
	%7507 = bitcast i8* %7506 to i64*
	store i64 8, i64* %7507
	%7508 = bitcast %Type_Info* %7504 to i8*
	%7509 = getelementptr inbounds i8, i8* %7508, i64 8
	%7510 = bitcast i8* %7509 to i64*
	store i64 8, i64* %7510
	; Type_Info_Pointer
	%7511 = bitcast %Type_Info* %7504 to %Type_Info.Pointer*
	%7512 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%7513 = bitcast %Type_Info* %7512 to %Type_Info*
	%7514 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7511, i64 0, i32 2
	store %Type_Info* %7513, %Type_Info** %7514
	%7515 = getelementptr inbounds %Type_Info, %Type_Info* %7504, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7515
	%7516 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%7517 = bitcast %Type_Info* %7516 to i8*
	%7518 = getelementptr inbounds i8, i8* %7517, i64 0
	%7519 = bitcast i8* %7518 to i64*
	store i64 8, i64* %7519
	%7520 = bitcast %Type_Info* %7516 to i8*
	%7521 = getelementptr inbounds i8, i8* %7520, i64 8
	%7522 = bitcast i8* %7521 to i64*
	store i64 8, i64* %7522
	; Type_Info_Pointer
	%7523 = bitcast %Type_Info* %7516 to %Type_Info.Pointer*
	%7524 = getelementptr inbounds [202 x %Type_Info], [202 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%7525 = bitcast %Type_Info* %7524 to %Type_Info*
	%7526 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %7523, i64 0, i32 2
	store %Type_Info* %7525, %Type_Info** %7526
	%7527 = getelementptr inbounds %Type_Info, %Type_Info* %7516, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %7527
	ret void
}
@.__$type_info_data = private global [202 x %Type_Info] zeroinitializer
@.__$type_info_types_data = global [287 x %Type_Info*] zeroinitializer
@.__$type_info_names_data = global [287 x %..string] zeroinitializer
@.__$type_info_offsets_data = global [287 x i64] zeroinitializer
@__type_table = global {%Type_Info*, i64, i64} zeroinitializer
@__argv__ = global i8** zeroinitializer
@__argc__ = global i32 zeroinitializer
@__context = thread_local global %Context zeroinitializer
@main-2.ProgramRunning = global i1 zeroinitializer
@main-2.ShowDebugMenu = global i1 true
@main-2.GlobalWin32VarsPtr = global %main-2.Win32Vars_t* zeroinitializer
@main-2.GlobalWindowPosition = global %jaze_win32-13.WINDOWPLACEMENT zeroinitializer
@.fmt-4.__DIGITS_LOWER = global %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$473, i64 0, i32 0), i64 17}
@.fmt-4.__DIGITS_UPPER = global %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$474, i64 0, i32 0), i64 17}
@.utf8-5.accept_ranges = global [5 x %utf8-5.Accept_Range] [%utf8-5.Accept_Range {i8 128, i8 191}, %utf8-5.Accept_Range {i8 160, i8 191}, %utf8-5.Accept_Range {i8 128, i8 159}, %utf8-5.Accept_Range {i8 144, i8 191}, %utf8-5.Accept_Range {i8 128, i8 143}]
@.utf8-5.accept_sizes = global [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241]
@.jaze_gl-14.DebugInfo = global %jaze_gl-14.DebugInfo_t zeroinitializer
@.jaze_gl-14._BufferData = global void (i32, i32, %..rawptr, i32)* zeroinitializer
@.jaze_gl-14._BindBuffer = global void (i32, i32)* zeroinitializer
@.jaze_gl-14._GenBuffers = global void (i32, i32*)* zeroinitializer
@.jaze_gl-14._GenVertexArrays = global void (i32, i32*)* zeroinitializer
@.jaze_gl-14._EnableVertexAttribArray = global void (i32)* zeroinitializer
@.jaze_gl-14._VertexAttribPointer = global void (i32, i32, i32, i1, i32, %..rawptr)* zeroinitializer
@.jaze_gl-14._BindVertexArray = global void (i32)* zeroinitializer
@.jaze_gl-14._Uniform1i = global void (i32, i32)* zeroinitializer
@.jaze_gl-14._Uniform2i = global void (i32, i32, i32)* zeroinitializer
@.jaze_gl-14._Uniform3i = global void (i32, i32, i32, i32)* zeroinitializer
@.jaze_gl-14._Uniform4i = global void (i32, i32, i32, i32, i32)* zeroinitializer
@.jaze_gl-14._Uniform1f = global void (i32, float)* zeroinitializer
@.jaze_gl-14._Uniform2f = global void (i32, float, float)* zeroinitializer
@.jaze_gl-14._Uniform3f = global void (i32, float, float, float)* zeroinitializer
@.jaze_gl-14._Uniform4f = global void (i32, float, float, float, float)* zeroinitializer
@.jaze_gl-14._UniformMatrix4fv = global void (i32, i32, i32, float*)* zeroinitializer
@.jaze_gl-14._GetUniformLocation = global i32 (i32, i8*)* zeroinitializer
@.jaze_gl-14._GetAttribLocation = global i32 (i32, i8*)* zeroinitializer
@.jaze_gl-14._DrawElements = global void (i32, i32, i32, %..rawptr)* zeroinitializer
@.jaze_gl-14._DrawArrays = global void (i32, i32, i32)* zeroinitializer
@.jaze_gl-14._UseProgram = global void (i32)* zeroinitializer
@.jaze_gl-14._LinkProgram = global void (i32)* zeroinitializer
@.jaze_gl-14._ActiveTexture = global void (i32)* zeroinitializer
@.jaze_gl-14._BlendEquationSeparate = global void (i32, i32)* zeroinitializer
@.jaze_gl-14._BlendEquation = global void (i32)* zeroinitializer
@.jaze_gl-14._AttachShader = global void (i32, i32)* zeroinitializer
@.jaze_gl-14._CreateProgram = global i32 ()* zeroinitializer
@.jaze_gl-14._ShaderSource = global void (i32, i32, i8**, i32*)* zeroinitializer
@.jaze_gl-14._CreateShader = global i32 (i32)* zeroinitializer
@.jaze_gl-14._CompileShader = global void (i32)* zeroinitializer
@.jaze_gl-14._DebugMessageControl = global void (i32, i32, i32, i32, i32*, i1)* zeroinitializer
@.jaze_gl-14._DebugMessageCallback = global void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)* zeroinitializer
@.jaze_gl-14._GetShaderiv = global void (i32, i32, i32*)* zeroinitializer
@.jaze_gl-14._GetShaderInfoLog = global void (i32, i32, i32*, i8*)* zeroinitializer
@.jaze_gl-14._GetStringi = global i8* (i32, i32)* zeroinitializer
@.jaze_gl-14._BindFragDataLocation = global void (i32, i32, i8*)* zeroinitializer
@.jaze_gl-14._PolygonMode = global void (i32, i32)* zeroinitializer
@.jaze_wgl-15.CreateContextAttribsARB = global %..rawptr (%..rawptr, %..rawptr, i32*)* zeroinitializer
@.jaze_wgl-15.ChoosePixelFormatARB = global i32 (%..rawptr, i32*, float*, i32, i32*, i32*)* zeroinitializer
@.jaze_wgl-15.SwapIntervalEXT = global i1 (i32)* zeroinitializer
@.jaze_wgl-15.GetExtensionsStringARB = global i8* (%..rawptr)* zeroinitializer
@.jaze_debug_windows-16.GlobalDebugWndBools = global {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}} zeroinitializer
@.jaze_debug_windows-16.CurrentViewTexture = global i32 zeroinitializer
@.jaze_debug_windows-16.ChosenCatalog = global i32 zeroinitializer
@.jaze_imgui-17.State = global %jaze_imgui-17.State_t zeroinitializer
@.jaze_xinput-18._Enable = global void (i32)* zeroinitializer
@.jaze_xinput-18._GetBatteryInformation = global i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)* zeroinitializer
@.jaze_xinput-18._GetCapabilities = global i32 (i32, i32, %jaze_xinput-18.Capabilities*)* zeroinitializer
@.jaze_xinput-18._GetKeystroke = global i32 (i32, i32, %jaze_xinput-18.KeyStroke*)* zeroinitializer
@.jaze_xinput-18._GetState = global i32 (i32, %jaze_xinput-18.State*)* zeroinitializer
@.jaze_xinput-18._SetState = global i32 (i32, %jaze_xinput-18.VibrationState)* zeroinitializer
@.jaze_xinput-18.DebugInfo = global %jaze_xinput-18.DebugInfo_t zeroinitializer
@.jaze_xinput-18.Version = global i64 0
@.jaze_render-19.mainProgram = global %jaze_gl-14.Program zeroinitializer
@.jaze_render-19.vao = global i32 zeroinitializer
@.jaze_render-19.texture = global i32 zeroinitializer
@.jaze_time-20._Time = global %jaze_time-20.TimeData zeroinitializer
@.jaze_catalog-21.DebugInfo = global %jaze_catalog-21.DebugInfo_t zeroinitializer
@.os_windows-23.stdout = global i64 zeroinitializer
@.os_windows-23.stderr = global i64 zeroinitializer
@.strconv-28.f32_info = global %strconv-28.Float_Info {i64 23, i64 8, i64 -127}
@.strconv-28.f64_info = global %strconv-28.Float_Info {i64 52, i64 11, i64 -1023}
@.__$enum_names-19 = private global [4 x %..string] zeroinitializer
@.__$enum_values-19 = private global [4 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3c = private global [7 x %..string] zeroinitializer
@.__$enum_values-3c = private global [7 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3e = private global [10 x %..string] zeroinitializer
@.__$enum_values-3e = private global [10 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-40 = private global [5 x %..string] zeroinitializer
@.__$enum_values-40 = private global [5 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-9f = private global [5 x %..string] zeroinitializer
@.__$enum_values-9f = private global [5 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-a1 = private global [11 x %..string] zeroinitializer
@.__$enum_values-a1 = private global [11 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-a3 = private global [3 x %..string] zeroinitializer
@.__$enum_values-a3 = private global [3 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-ae = private global [6 x %..string] zeroinitializer
@.__$enum_values-ae = private global [6 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-c2 = private global [4 x %..string] zeroinitializer
@.__$enum_values-c2 = private global [4 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__str$0 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1 = private global [10 x i8] c"ptr\20\21\3D\20nil"
@.__str$2 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$3 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$4 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$5 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$6 = private global [32 x i8] c"\25s\28\25d\3A\25d\29\20Runtime\20assertion\3A\20\25s\0A"
@.__str$7 = private global [20 x i8] c"\25s\28\25d\3A\25d\29\20Panic\3A\20\25s\0A"
@.__str$8 = private global [48 x i8] c"\25s\28\25d\3A\25d\29\20Index\20\25d\20is\20out\20of\20bounds\20range\200..\25d\0A"
@.__str$9 = private global [46 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20slice\20indices\3A\20\5B\25d..\25d..\25d\5D\0A"
@.__str$a = private global [46 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20substring\20indices\3A\20\5B\25d..\25d\5D\0A"
@.__str$b = private global [45 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20\60union_cast\60\20from\20\25T\20to\20\25T\0A"
@.__str$c = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$d = private global [32 x i8] c"array.allocator.procedure\20\21\3D\20nil"
@.__str$e = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$f = private global [32 x i8] c"array.allocator.procedure\20\21\3D\20nil"
@.__str$10 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$11 = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$12 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$13 = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$14 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$15 = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$16 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$17 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$18 = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$19 = private global [12 x i8] c"value\20\21\3D\20nil"
@.__str$1a = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1b = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1c = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1d = private global [30 x i8] c"C\3A\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1e = private global [10 x i8] c"jaze_class"
@.__str$1f = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$20 = private global [24 x i8] c"Could\20Not\20Register\20Class"
@.__str$21 = private global [4 x i8] c"Jaze"
@.__str$22 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$23 = private global [23 x i8] c"Could\20Not\20Create\20Window"
@.__str$24 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$25 = private global [10 x i8] c"ctx\20\21\3D\20nil"
@.__str$26 = private global [6 x i8] c"STATIC"
@.__str$27 = private global [13 x i8] c"OpenGL\20Loader"
@.__str$28 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$29 = private global [16 x i8] c"wndHandle\20\21\3D\20nil"
@.__str$2a = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$2b = private global [12 x i8] c"wndDc\20\21\3D\20nil"
@.__str$2c = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$2d = private global [13 x i8] c"oldCtx\20\21\3D\20nil"
@.__str$2e = private global [23 x i8] c"wglChoosePixelFormatARB"
@.__str$2f = private global [26 x i8] c"wglCreateContextAttribsARB"
@.__str$30 = private global [25 x i8] c"wglGetExtensionsStringARB"
@.__str$31 = private global [18 x i8] c"wglSwapIntervalEXT"
@.__str$32 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$33 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$34 = private global [35 x i8] c"Couldn\27t\20find\20suitable\20pixel\20format"
@.__str$35 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$36 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$37 = private global [10 x i8] c"ctx\20\21\3D\20nil"
@.__str$38 = private global [6 x i8] c"Sizing"
@.__str$39 = private global [6 x i8] c"\25d\2C\20\25d"
@.__str$3a = private global [19 x i8] c"\5B\25v\20\7C\20\25v\20\7C\20\25v\5D\20\25s\20\0A"
@.__str$3b = private global [4 x i8] c"Misc"
@.__str$3c = private global [11 x i8] c"OpenGL\20Info"
@.__str$3d = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$3e = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$3f = private global [13 x i8] c"Win32Var\20Info"
@.__str$40 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$41 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$42 = private global [6 x i8] c"XInput"
@.__str$43 = private global [4 x i8] c"Info"
@.__str$44 = private global [14 x i8] c"ShowXinputInfo"
@.__str$45 = private global [14 x i8] c"ShowXinputInfo"
@.__str$46 = private global [5 x i8] c"State"
@.__str$47 = private global [15 x i8] c"ShowXinputState"
@.__str$48 = private global [15 x i8] c"ShowXinputState"
@.__str$49 = private global [9 x i8] c"Time\20Data"
@.__str$4a = private global [12 x i8] c"ShowTimeData"
@.__str$4b = private global [12 x i8] c"ShowTimeData"
@.__str$4c = private global [8 x i8] c"Catalogs"
@.__str$4d = private global [17 x i8] c"ShowCatalogWindow"
@.__str$4e = private global [17 x i8] c"ShowCatalogWindow"
@.__str$4f = private global [16 x i8] c"Show\20Test\20Window"
@.__str$50 = private global [14 x i8] c"ShowTestWindow"
@.__str$51 = private global [14 x i8] c"ShowTestWindow"
@.__str$52 = private global [17 x i8] c"Toggle\20Fullscreen"
@.__str$53 = private global [9 x i8] c"Alt\2BEnter"
@.__str$54 = private global [4 x i8] c"Exit"
@.__str$55 = private global [6 x i8] c"Escape"
@.__str$56 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$57 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$58 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$59 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$5a = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$5b = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$5c = private global [14 x i8] c"ShowXinputInfo"
@.__str$5d = private global [14 x i8] c"ShowXinputInfo"
@.__str$5e = private global [14 x i8] c"ShowXinputInfo"
@.__str$5f = private global [15 x i8] c"ShowXinputState"
@.__str$60 = private global [15 x i8] c"ShowXinputState"
@.__str$61 = private global [15 x i8] c"ShowXinputState"
@.__str$62 = private global [12 x i8] c"ShowTimeData"
@.__str$63 = private global [12 x i8] c"ShowTimeData"
@.__str$64 = private global [12 x i8] c"ShowTimeData"
@.__str$65 = private global [17 x i8] c"ShowCatalogWindow"
@.__str$66 = private global [17 x i8] c"ShowCatalogWindow"
@.__str$67 = private global [17 x i8] c"ShowCatalogWindow"
@.__str$68 = private global [14 x i8] c"ShowTestWindow"
@.__str$69 = private global [14 x i8] c"ShowTestWindow"
@.__str$6a = private global [14 x i8] c"ShowTestWindow"
@.__str$6b = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$6c = private global [5 x i8] c"Jaze\20"
@.__str$6d = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$6e = private global [13 x i8] c"data\2Fshaders\2F"
@.__str$6f = private global [7 x i8] c".fs\2C.vs"
@.__str$70 = private global [14 x i8] c"data\2Ftextures\2F"
@.__str$71 = private global [10 x i8] c".jpg\2C.jpeg"
@.__str$72 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$73 = private global [37 x i8] c"Jaze\20\25s\20\7C\20dt\3A\20\25.5f\20sdt\3A\20\25.5f\20ss\3A\20\25.1f"
@.__str$74 = private global [31 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cmain.odin"
@.__str$75 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$76 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$77 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$78 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$79 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$7a = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$7b = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$7c = private global [3 x i8] c"int"
@.__str$7d = private global [4 x i8] c"uint"
@.__str$7e = private global [1 x i8] c"i"
@.__str$7f = private global [1 x i8] c"u"
@.__str$80 = private global [3 x i8] c"f32"
@.__str$81 = private global [3 x i8] c"f64"
@.__str$82 = private global [9 x i8] c"complex64"
@.__str$83 = private global [10 x i8] c"complex128"
@.__str$84 = private global [13 x i8] c"quaternion128"
@.__str$85 = private global [10 x i8] c"quaternion"
@.__str$86 = private global [6 x i8] c"string"
@.__str$87 = private global [4 x i8] c"bool"
@.__str$88 = private global [6 x i8] c"rawptr"
@.__str$89 = private global [1 x i8] c"\5E"
@.__str$8a = private global [4 x i8] c"proc"
@.__str$8b = private global [2 x i8] c"\28\29"
@.__str$8c = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$8d = private global [1 x i8] c"\28"
@.__str$8e = private global [2 x i8] c"\2C\20"
@.__str$8f = private global [1 x i8] c"\29"
@.__str$90 = private global [4 x i8] c"\20-\3E\20"
@.__str$91 = private global [1 x i8] c"\28"
@.__str$92 = private global [2 x i8] c"\2C\20"
@.__str$93 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$94 = private global [2 x i8] c"\3A\20"
@.__str$95 = private global [1 x i8] c"\29"
@.__str$96 = private global [1 x i8] c"\5B"
@.__str$97 = private global [1 x i8] c"\5D"
@.__str$98 = private global [9 x i8] c"\5Bdynamic\5D"
@.__str$99 = private global [2 x i8] c"\5B\5D"
@.__str$9a = private global [8 x i8] c"\5Bvector\20"
@.__str$9b = private global [1 x i8] c"\5D"
@.__str$9c = private global [4 x i8] c"map\5B"
@.__str$9d = private global [7 x i8] c"struct\20"
@.__str$9e = private global [8 x i8] c"\23packed\20"
@.__str$9f = private global [9 x i8] c"\23ordered\20"
@.__str$a0 = private global [7 x i8] c"\23align\20"
@.__str$a1 = private global [2 x i8] c"\2C\20"
@.__str$a2 = private global [2 x i8] c"\3A\20"
@.__str$a3 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$a4 = private global [7 x i8] c"union\20\7B"
@.__str$a5 = private global [2 x i8] c"\2C\20"
@.__str$a6 = private global [2 x i8] c"\3A\20"
@.__str$a7 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$a8 = private global [2 x i8] c"\2C\20"
@.__str$a9 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$aa = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ab = private global [2 x i8] c"\2C\20"
@.__str$ac = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ad = private global [2 x i8] c"\3A\20"
@.__str$ae = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$af = private global [1 x i8] c"\7D"
@.__str$b0 = private global [11 x i8] c"raw_union\20\7B"
@.__str$b1 = private global [2 x i8] c"\2C\20"
@.__str$b2 = private global [2 x i8] c"\3A\20"
@.__str$b3 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$b4 = private global [1 x i8] c"\7D"
@.__str$b5 = private global [5 x i8] c"enum\20"
@.__str$b6 = private global [2 x i8] c"\20\7B"
@.__str$b7 = private global [2 x i8] c"\2C\20"
@.__str$b8 = private global [1 x i8] c"\7D"
@.__str$b9 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ba = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bb = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bc = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bd = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$be = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bf = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c0 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c1 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c2 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c3 = private global [9 x i8] c"verb\20\21\3D\20v"
@.__str$c4 = private global [2 x i8] c"\25\21"
@.__str$c5 = private global [5 x i8] c"\3Cnil\3E"
@.__str$c6 = private global [4 x i8] c"true"
@.__str$c7 = private global [5 x i8] c"false"
@.__str$c8 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c9 = private global [41 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size"
@.__str$ca = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$cb = private global [55 x i8] c"_write_int\3A\20buffer\20overrun.\20Width\20and\20precision\20too\20big"
@.__str$cc = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$cd = private global [32 x i8] c"_write_int\3A\20unknown\20base\2C\20whoops"
@.__str$ce = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$cf = private global [2 x i8] c"U\2B"
@.__str$d0 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d1 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d2 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d3 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d4 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d5 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d6 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d7 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d8 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d9 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$da = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$db = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$dc = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$dd = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$de = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$df = private global [2 x i8] c"0x"
@.__str$e0 = private global [5 x i8] c"\3Cnil\3E"
@.__str$e1 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e2 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e3 = private global [18 x i8] c"\21\25\28BAD\20ENUM\20VALUE\29"
@.__str$e4 = private global [5 x i8] c"\3Cnil\3E"
@.__str$e5 = private global [2 x i8] c"\2C\20"
@.__str$e6 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e7 = private global [3 x i8] c"\20\3D\20"
@.__str$e8 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e9 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ea = private global [2 x i8] c"\2C\20"
@.__str$eb = private global [2 x i8] c"\2C\20"
@.__str$ec = private global [4 x i8] c"map\5B"
@.__str$ed = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ee = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ef = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f0 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f1 = private global [2 x i8] c"\2C\20"
@.__str$f2 = private global [1 x i8] c"\3D"
@.__str$f3 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f4 = private global [2 x i8] c"\2C\20"
@.__str$f5 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f6 = private global [2 x i8] c"\2C\20"
@.__str$f7 = private global [2 x i8] c"\2C\20"
@.__str$f8 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f9 = private global [3 x i8] c"\20\3D\20"
@.__str$fa = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$fb = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$fc = private global [2 x i8] c"\2C\20"
@.__str$fd = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$fe = private global [3 x i8] c"\20\3D\20"
@.__str$ff = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$100 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$101 = private global [11 x i8] c"\28raw_union\29"
@.__str$102 = private global [3 x i8] c"\20\40\20"
@.__str$103 = private global [5 x i8] c"\3Cnil\3E"
@.__str$104 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$105 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$106 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$107 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$108 = private global [13 x i8] c"\25\21\28BAD\20WIDTH\29"
@.__str$109 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$10a = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$10b = private global [17 x i8] c"\25\21\28BAD\20PRECISION\29"
@.__str$10c = private global [11 x i8] c"\25\21\28NO\20VERB\29"
@.__str$10d = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$10e = private global [23 x i8] c"\25\21\28BAD\20ARGUMENT\20NUMBER\29"
@.__str$10f = private global [20 x i8] c"\25\21\28MISSING\20ARGUMENT\29"
@.__str$110 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$111 = private global [9 x i8] c"\25\21\28EXTRA\20"
@.__str$112 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$113 = private global [2 x i8] c"\2C\20"
@.__str$114 = private global [5 x i8] c"\3Cnil\3E"
@.__str$115 = private global [25 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$116 = private global [1 x i8] c"\29"
@.__str$117 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$118 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$119 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11a = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11b = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11c = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11d = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11e = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11f = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$120 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$121 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$122 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$123 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$124 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$125 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$126 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$127 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$128 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$129 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$12a = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$12b = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$12c = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$12d = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$12e = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrings.odin"
@.__str$12f = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrings.odin"
@.__str$130 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrings.odin"
@.__str$131 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$132 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$133 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$134 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$135 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$136 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$137 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$138 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$139 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$13a = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$13b = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$13c = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$13d = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$13e = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$13f = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$140 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$141 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$142 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$143 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$144 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$145 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$146 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$147 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$148 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$149 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$14a = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$14b = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$14c = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$14d = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$14e = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$14f = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$150 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$151 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$152 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$153 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$154 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$155 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$156 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$157 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$158 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$159 = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$15a = private global [26 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cmath.odin"
@.__str$15b = private global [44 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$15c = private global [44 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$15d = private global [17 x i8] c"len\28s\29\20\3C\20len\28buf\29"
@.__str$15e = private global [44 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$15f = private global [44 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$160 = private global [44 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$161 = private global [44 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$162 = private global [23 x i8] c"EnableVertexAttribArray"
@.__str$163 = private global [7 x i8] c"failed\21"
@.__str$164 = private global [19 x i8] c"VertexAttribPointer"
@.__str$165 = private global [7 x i8] c"failed\21"
@.__str$166 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$167 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$168 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$169 = private global [3 x i8] c"nil"
@.__str$16a = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$16b = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$16c = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$16d = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$16e = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$16f = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$170 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$171 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$172 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$173 = private global [13 x i8] c"opengl32.dll\00"
@.__str$174 = private global [34 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$175 = private global [14 x i8] c"glDrawElements"
@.__str$176 = private global [12 x i8] c"glDrawArrays"
@.__str$177 = private global [17 x i8] c"glBindVertexArray"
@.__str$178 = private global [21 x i8] c"glVertexAttribPointer"
@.__str$179 = private global [25 x i8] c"glEnableVertexAttribArray"
@.__str$17a = private global [17 x i8] c"glGenVertexArrays"
@.__str$17b = private global [12 x i8] c"glBufferData"
@.__str$17c = private global [12 x i8] c"glBindBuffer"
@.__str$17d = private global [12 x i8] c"glGenBuffers"
@.__str$17e = private global [24 x i8] c"glDebugMessageControlARB"
@.__str$17f = private global [25 x i8] c"glDebugMessageCallbackARB"
@.__str$180 = private global [13 x i8] c"glGetShaderiv"
@.__str$181 = private global [18 x i8] c"glGetShaderInfoLog"
@.__str$182 = private global [12 x i8] c"glGetStringi"
@.__str$183 = private global [15 x i8] c"glBlendEquation"
@.__str$184 = private global [23 x i8] c"glBlendEquationSeparate"
@.__str$185 = private global [15 x i8] c"glCompileShader"
@.__str$186 = private global [14 x i8] c"glCreateShader"
@.__str$187 = private global [14 x i8] c"glShaderSource"
@.__str$188 = private global [14 x i8] c"glAttachShader"
@.__str$189 = private global [15 x i8] c"glCreateProgram"
@.__str$18a = private global [13 x i8] c"glLinkProgram"
@.__str$18b = private global [12 x i8] c"glUseProgram"
@.__str$18c = private global [15 x i8] c"glActiveTexture"
@.__str$18d = private global [11 x i8] c"glUniform1i"
@.__str$18e = private global [11 x i8] c"glUniform2i"
@.__str$18f = private global [11 x i8] c"glUniform3i"
@.__str$190 = private global [11 x i8] c"glUniform4i"
@.__str$191 = private global [11 x i8] c"glUniform1f"
@.__str$192 = private global [11 x i8] c"glUniform2f"
@.__str$193 = private global [11 x i8] c"glUniform3f"
@.__str$194 = private global [11 x i8] c"glUniform4f"
@.__str$195 = private global [18 x i8] c"glUniformMatrix4fv"
@.__str$196 = private global [20 x i8] c"glGetUniformLocation"
@.__str$197 = private global [19 x i8] c"glGetAttribLocation"
@.__str$198 = private global [13 x i8] c"glPolygonMode"
@.__str$199 = private global [35 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$19a = private global [10 x i8] c"res\20\21\3D\20nil"
@.__str$19b = private global [35 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$19c = private global [15 x i8] c"Loaded\20Textures"
@.__str$19d = private global [11 x i8] c"Texture\20\25d\3A"
@.__str$19e = private global [4 x i8] c"View"
@.__str$19f = private global [13 x i8] c"ViewGLTexture"
@.__str$1a0 = private global [13 x i8] c"ViewGLTexture"
@.__str$1a1 = private global [13 x i8] c"ViewGLTexture"
@.__str$1a2 = private global [13 x i8] c"ViewGLTexture"
@.__str$1a3 = private global [12 x i8] c"Texture\20View"
@.__str$1a4 = private global [11 x i8] c"OpenGL\20Info"
@.__str$1a5 = private global [9 x i8] c"Versions\3A"
@.__str$1a6 = private global [14 x i8] c"Highest\3A\20\25d.\25d"
@.__str$1a7 = private global [14 x i8] c"Current\3A\20\25d.\25d"
@.__str$1a8 = private global [11 x i8] c"GLSL\3A\20\20\20\20\25s"
@.__str$1a9 = private global [16 x i8] c"Lib\20Address\200x\25x"
@.__str$1aa = private global [12 x i8] c"Vendor\3A\20\20\20\25s"
@.__str$1ab = private global [12 x i8] c"Render\3A\20\20\20\25s"
@.__str$1ac = private global [12 x i8] c"CtxFlags\3A\20\25d"
@.__str$1ad = private global [30 x i8] c"Number\20of\20extensions\3A\20\20\20\20\20\20\20\25d"
@.__str$1ae = private global [9 x i8] c"View\23\23Ext"
@.__str$1af = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$1b0 = private global [30 x i8] c"Number\20of\20WGL\20extensions\3A\20\20\20\25d"
@.__str$1b1 = private global [9 x i8] c"View\23\23WGL"
@.__str$1b2 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$1b3 = private global [33 x i8] c"Number\20of\20functions\20loaded\3A\20\25d\2F\25d"
@.__str$1b4 = private global [16 x i8] c"Loaded\20Functions"
@.__str$1b5 = private global [20 x i8] c"Functions\23\23\23FuncLoad"
@.__str$1b6 = private global [9 x i8] c"\25s\20\40\200x\25X"
@.__str$1b7 = private global [2 x i8] c"\25t"
@.__str$1b8 = private global [2 x i8] c"\25t"
@.__str$1b9 = private global [2 x i8] c"\25d"
@.__str$1ba = private global [4 x i8] c"true"
@.__str$1bb = private global [5 x i8] c"false"
@.__str$1bc = private global [10 x i8] c"Loaded\3A\20\25s"
@.__str$1bd = private global [29 x i8] c"Number\20of\20loaded\20textures\3A\20\25d"
@.__str$1be = private global [13 x i8] c"View\23\23Texture"
@.__str$1bf = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$1c0 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$1c1 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$1c2 = private global [15 x i8] c"Extensions\23\23Ext"
@.__str$1c3 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$1c4 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$1c5 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$1c6 = private global [14 x i8] c"WGL\20Extensions"
@.__str$1c7 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$1c8 = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$1c9 = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$1ca = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$1cb = private global [14 x i8] c"Win32Vars\20Info"
@.__str$1cc = private global [27 x i8] c"Application\20Handle\3A\20\20\20\200x\25X"
@.__str$1cd = private global [27 x i8] c"Window\20Handle\3A\20\20\20\20\20\20\20\20\200x\25X"
@.__str$1ce = private global [35 x i8] c"Window\20Size\3A\20\20\20\20\20\20\20\20\20\20\20\7B\25.3f\2C\20\25.3f\7D"
@.__str$1cf = private global [27 x i8] c"Device\20Context\20Handle\3A\200x\25X"
@.__str$1d0 = private global [11 x i8] c"XInput\20Info"
@.__str$1d1 = private global [11 x i8] c"Version\3A\20\25s"
@.__str$1d2 = private global [17 x i8] c"Lib\20Address\3A\200x\25x"
@.__str$1d3 = private global [33 x i8] c"Number\20of\20functions\20loaded\3A\20\25d\2F\25d"
@.__str$1d4 = private global [16 x i8] c"Loaded\20Functions"
@.__str$1d5 = private global [9 x i8] c"Functions"
@.__str$1d6 = private global [17 x i8] c"Loaded\3A\20\25t\20\40\200x\25x"
@.__str$1d7 = private global [9 x i8] c"Connected"
@.__str$1d8 = private global [13 x i8] c"Not\20Connected"
@.__str$1d9 = private global [15 x i8] c"Gamepad\20\25d\28\25s\29\3A"
@.__str$1da = private global [12 x i8] c"Capabilites\3A"
@.__str$1db = private global [10 x i8] c"Subtype\20\25s"
@.__str$1dc = private global [6 x i8] c"Flags\3A"
@.__str$1dd = private global [17 x i8] c"Voice\3A\20\20\20\20\20\20\20\20\20\25t"
@.__str$1de = private global [17 x i8] c"FFB\3A\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1df = private global [17 x i8] c"Wireless\3A\20\20\20\20\20\20\25t"
@.__str$1e0 = private global [17 x i8] c"PMD\3A\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1e1 = private global [17 x i8] c"NoNavigations\3A\20\25t"
@.__str$1e2 = private global [20 x i8] c"Battery\20Information\3A"
@.__str$1e3 = private global [3 x i8] c"N\2FA"
@.__str$1e4 = private global [17 x i8] c"Battery\20Type\3A\20\20\25s"
@.__str$1e5 = private global [3 x i8] c"N\2FA"
@.__str$1e6 = private global [17 x i8] c"Battery\20Level\3A\20\25s"
@.__str$1e7 = private global [12 x i8] c"XInput\20State"
@.__str$1e8 = private global [9 x i8] c"Connected"
@.__str$1e9 = private global [13 x i8] c"Not\20Connected"
@.__str$1ea = private global [15 x i8] c"Gamepad\20\25d\28\25s\29\3A"
@.__str$1eb = private global [14 x i8] c"Button\20States\3A"
@.__str$1ec = private global [17 x i8] c"DpadUp\3A\20\20\20\20\20\20\20\20\25t"
@.__str$1ed = private global [17 x i8] c"DpadDown\3A\20\20\20\20\20\20\25t"
@.__str$1ee = private global [17 x i8] c"DpadLeft\3A\20\20\20\20\20\20\25t"
@.__str$1ef = private global [17 x i8] c"DpadRight\3A\20\20\20\20\20\25t"
@.__str$1f0 = private global [17 x i8] c"Start\3A\20\20\20\20\20\20\20\20\20\25t"
@.__str$1f1 = private global [17 x i8] c"Back\3A\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1f2 = private global [17 x i8] c"LeftThumb\3A\20\20\20\20\20\25t"
@.__str$1f3 = private global [17 x i8] c"RightThumb\3A\20\20\20\20\25t"
@.__str$1f4 = private global [17 x i8] c"LeftShoulder\3A\20\20\25t"
@.__str$1f5 = private global [17 x i8] c"RightShoulder\3A\20\25t"
@.__str$1f6 = private global [17 x i8] c"A\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1f7 = private global [17 x i8] c"B\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1f8 = private global [17 x i8] c"X\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1f9 = private global [17 x i8] c"Y\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1fa = private global [15 x i8] c"Trigger\20States\3A"
@.__str$1fb = private global [25 x i8] c"Left\20Trigger\3A\20\20\25d\28\25.1f\25\25\29"
@.__str$1fc = private global [25 x i8] c"Right\20Trigger\3A\20\25d\28\25.1f\25\25\29"
@.__str$1fd = private global [13 x i8] c"Stick\20States\3A"
@.__str$1fe = private global [21 x i8] c"Left\20Stick\3A\20\20\3C\25d\2C\20\25d\3E"
@.__str$1ff = private global [21 x i8] c"Right\20Stick\3A\20\3C\25d\2C\20\25d\3E"
@.__str$200 = private global [9 x i8] c"Time\20Data"
@.__str$201 = private global [28 x i8] c"Time\20Scale\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\20\20\25f"
@.__str$202 = private global [31 x i8] c"Unscaled\20DeltaTime\3A\20\20\20\20\20\20\20\25.10f"
@.__str$203 = private global [31 x i8] c"DeltaTime\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\20\20\20\25.10f"
@.__str$204 = private global [28 x i8] c"Time\20Since\20Start\3A\20\20\20\20\20\20\20\20\20\25f"
@.__str$205 = private global [28 x i8] c"Frame\20Count\20Since\20Start\3A\20\20\25d"
@.__str$206 = private global [10 x i8] c"pfFreq\3A\20\25d"
@.__str$207 = private global [10 x i8] c"pfOld\3A\20\20\25d"
@.__str$208 = private global [8 x i8] c"Catalogs"
@.__str$209 = private global [45 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_debug_windows.odin"
@.__str$20a = private global [7 x i8] c"Catalog"
@.__str$20b = private global [45 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_debug_windows.odin"
@.__str$20c = private global [19 x i8] c"Folder\20Path\3A\20\20\20\20\20\25s"
@.__str$20d = private global [19 x i8] c"Kind\3A\20\20\20\20\20\20\20\20\20\20\20\20\25v"
@.__str$20e = private global [23 x i8] c"Number\20of\20files\3A\20\25d\5B\25d\5D"
@.__str$20f = private global [30 x i8] c"Size\3A\20\20\20\20\20\20\20\20\20\20\20\20\25.2fKB\2F\25.2fKB"
@.__str$210 = private global [21 x i8] c"Accepted\20Extensions\3A\20"
@.__str$211 = private global [5 x i8] c"Files"
@.__str$212 = private global [10 x i8] c"Path\3A\20\20\20\25s"
@.__str$213 = private global [14 x i8] c"Size\3A\20\20\20\25.2fKB"
@.__str$214 = private global [10 x i8] c"ID\3A\20\20\20\20\20\25d"
@.__str$215 = private global [10 x i8] c"Width\3A\20\20\25d"
@.__str$216 = private global [10 x i8] c"Height\3A\20\25d"
@.__str$217 = private global [10 x i8] c"Comp\3A\20\20\20\25d"
@.__str$218 = private global [10 x i8] c"ID\3A\20\20\20\20\20\25d"
@.__str$219 = private global [10 x i8] c"Type\3A\20\20\20\25v"
@.__str$21a = private global [8 x i8] c"\5BLoaded\5D"
@.__str$21b = private global [10 x i8] c"\5BUploaded\5D"
@.__str$21c = private global [7 x i8] c"\25s\20\25s\25s"
@.__str$21d = private global [8 x i8] c"\5BLoaded\5D"
@.__str$21e = private global [10 x i8] c"\5BUploaded\5D"
@.__str$21f = private global [7 x i8] c"\25s\20\25s\25s"
@.__str$220 = private global [8 x i8] c"\5BLoaded\5D"
@.__str$221 = private global [5 x i8] c"\25s\20\25s"
@.__str$222 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$223 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$224 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$225 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$226 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$227 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$228 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$229 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$22a = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$22b = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$22c = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$22d = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$22e = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$22f = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$230 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$231 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$232 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$233 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$234 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$235 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$236 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$237 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$238 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$239 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$23a = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$23b = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$23c = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$23d = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$23e = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$23f = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$240 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$241 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$242 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$243 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$244 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$245 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$246 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$247 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$248 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$249 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$24a = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$24b = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$24c = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$24d = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$24e = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$24f = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$250 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$251 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$252 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$253 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$254 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$255 = private global [320 x i8] c"\23version\20330\0A\20\20\20\20\20\20\20\20uniform\20mat4\20ProjMtx\3B\0A\20\20\20\20\20\20\20\20in\20vec2\20Position\3B\0A\20\20\20\20\20\20\20\20in\20vec2\20UV\3B\0A\20\20\20\20\20\20\20\20in\20vec4\20Color\3B\0A\20\20\20\20\20\20\20\20out\20vec2\20Frag_UV\3B\0A\20\20\20\20\20\20\20\20out\20vec4\20Frag_Color\3B\0A\20\20\20\20\20\20\20\20void\20main\28\29\0A\20\20\20\20\20\20\20\20\7B\0A\20\20\20\20\20\20\20\20\20\20\20Frag_UV\20\3D\20UV\3B\0A\20\20\20\20\20\20\20\20\20\20\20Frag_Color\20\3D\20Color\3B\0A\20\20\20\20\20\20\20\20\20\20\20gl_Position\20\3D\20ProjMtx\20\2A\20vec4\28Position.xy\2C0\2C1\29\3B\0A\20\20\20\20\20\20\20\20\7D"
@.__str$256 = private global [235 x i8] c"\23version\20330\0A\20\20\20\20\20\20\20\20uniform\20sampler2D\20Texture\3B\0A\20\20\20\20\20\20\20\20in\20vec2\20Frag_UV\3B\0A\20\20\20\20\20\20\20\20in\20vec4\20Frag_Color\3B\0A\20\20\20\20\20\20\20\20out\20vec4\20Out_Color\3B\0A\20\20\20\20\20\20\20\20void\20main\28\29\0A\20\20\20\20\20\20\20\20\7B\0A\20\20\20\20\20\20\20\20\20\20\20Out_Color\20\3D\20Frag_Color\20\2A\20texture\28\20Texture\2C\20Frag_UV.st\29\3B\0A\20\20\20\20\20\20\20\20\7D"
@.__str$257 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$258 = private global [6 x i8] c"FUUUCK"
@.__str$259 = private global [7 x i8] c"Texture"
@.__str$25a = private global [7 x i8] c"Texture"
@.__str$25b = private global [7 x i8] c"ProjMtx"
@.__str$25c = private global [7 x i8] c"ProjMtx"
@.__str$25d = private global [8 x i8] c"Position"
@.__str$25e = private global [8 x i8] c"Position"
@.__str$25f = private global [2 x i8] c"UV"
@.__str$260 = private global [2 x i8] c"UV"
@.__str$261 = private global [5 x i8] c"Color"
@.__str$262 = private global [5 x i8] c"Color"
@.__str$263 = private global [8 x i8] c"Position"
@.__str$264 = private global [2 x i8] c"UV"
@.__str$265 = private global [5 x i8] c"Color"
@.__str$266 = private global [8 x i8] c"Position"
@.__str$267 = private global [2 x i8] c"UV"
@.__str$268 = private global [5 x i8] c"Color"
@.__str$269 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$26a = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$26b = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$26c = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$26d = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$26e = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$26f = private global [7 x i8] c"Texture"
@.__str$270 = private global [7 x i8] c"ProjMtx"
@.__str$271 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$272 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$273 = private global [37 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$274 = private global [14 x i8] c"xinput1_4.dll\00"
@.__str$275 = private global [14 x i8] c"xinput1_3.dll\00"
@.__str$276 = private global [16 x i8] c"xinput9_1_0.dll\00"
@.__str$277 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_xinput.odin"
@.__str$278 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_xinput.odin"
@.__str$279 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_xinput.odin"
@.__str$27a = private global [12 x i8] c"XInputEnable"
@.__str$27b = private global [27 x i8] c"XInputGetBatteryInformation"
@.__str$27c = private global [21 x i8] c"XInputGetCapabilities"
@.__str$27d = private global [18 x i8] c"XInputGetKeystroke"
@.__str$27e = private global [14 x i8] c"XInputGetState"
@.__str$27f = private global [14 x i8] c"XInputSetState"
@.__str$280 = private global [9 x i8] c"test_vert"
@.__str$281 = private global [9 x i8] c"test_frag"
@.__str$282 = private global [4 x i8] c"test"
@.__str$283 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_render.odin"
@.__str$284 = private global [32 x i8] c"FUCK\20COULDN\27T\20FIND\20YA\20SHADERS\20M8"
@.__str$285 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_render.odin"
@.__str$286 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_render.odin"
@.__str$287 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_render.odin"
@.__str$288 = private global [8 x i8] c"OutColor"
@.__str$289 = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_render.odin"
@.__str$28a = private global [38 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_render.odin"
@.__str$28b = private global [5 x i8] c"color"
@.__str$28c = private global [5 x i8] c"color"
@.__str$28d = private global [8 x i8] c"Position"
@.__str$28e = private global [8 x i8] c"Position"
@.__str$28f = private global [2 x i8] c"UV"
@.__str$290 = private global [2 x i8] c"UV"
@.__str$291 = private global [8 x i8] c"Position"
@.__str$292 = private global [2 x i8] c"UV"
@.__str$293 = private global [8 x i8] c"Position"
@.__str$294 = private global [2 x i8] c"UV"
@.__str$295 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$296 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$297 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$298 = private global [1 x i8] c"\2F"
@.__str$299 = private global [4 x i8] c"\25s\25s"
@.__str$29a = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$29b = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$29c = private global [1 x i8] c"\2A"
@.__str$29d = private global [2 x i8] c"\5C\2A"
@.__str$29e = private global [4 x i8] c"\25s\25s"
@.__str$29f = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2a0 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2a1 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2a2 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2a3 = private global [3 x i8] c".vs"
@.__str$2a4 = private global [6 x i8] c".glslv"
@.__str$2a5 = private global [5 x i8] c".vert"
@.__str$2a6 = private global [3 x i8] c".fs"
@.__str$2a7 = private global [5 x i8] c".frag"
@.__str$2a8 = private global [6 x i8] c".glslf"
@.__str$2a9 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2aa = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2ab = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2ac = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2ad = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2ae = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2af = private global [1 x i8] c"."
@.__str$2b0 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2b1 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2b2 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_catalog.odin"
@.__str$2b3 = private global [4 x i8] c"\25s\25s"
@.__str$2b4 = private global [32 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$2b5 = private global [32 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$2b6 = private global [32 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$2b7 = private global [32 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$2b8 = private global [32 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$2b9 = private global [32 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$2ba = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2bb = private global [25 x i8] c"strconv\3A\20invalid\20bit_size"
@.__str$2bc = private global [3 x i8] c"NaN"
@.__str$2bd = private global [4 x i8] c"-Inf"
@.__str$2be = private global [4 x i8] c"\2BInf"
@.__str$2bf = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c0 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c1 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c2 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c3 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c4 = private global [48 x i8] c"strconv\3A\20e\2FE\20float\20printing\20is\20not\20yet\20supported"
@.__str$2c5 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c6 = private global [48 x i8] c"strconv\3A\20g\2FG\20float\20printing\20is\20not\20yet\20supported"
@.__str$2c7 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c8 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2c9 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2ca = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2cb = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2cc = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2cd = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2ce = private global [41 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size"
@.__str$2cf = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d0 = private global [43 x i8] c"strconv\3A\20illegal\20base\20passed\20to\20append_bits"
@.__str$2d1 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d2 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d3 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d4 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d5 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d6 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d7 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d8 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2d9 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2da = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2db = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2dc = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2dd = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2de = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$2df = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl_util.odin"
@.__str$2e0 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl_util.odin"
@.__str$2e1 = private global [28 x i8] c"------\20Shader\20Error\28\25s\29\20---\0A"
@.__str$2e2 = private global [39 x i8] c"C\3A\5CDev\5CRepos\5CJaze\5Csrc\5Cjaze_gl_util.odin"
@.__str$2e3 = private global [26 x i8] c"--------------------------"
@.__str$2e4 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2e5 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2e6 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2e7 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2e8 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2e9 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2ea = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2eb = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2ec = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2ed = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2ee = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2ef = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2f0 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2f1 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2f2 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2f3 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2f4 = private global [29 x i8] c"C\3A\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$2f5 = private global [5 x i8] c"Named"
@.__str$2f6 = private global [4 x i8] c"size"
@.__str$2f7 = private global [5 x i8] c"align"
@.__str$2f8 = private global [4 x i8] c"name"
@.__str$2f9 = private global [4 x i8] c"base"
@.__str$2fa = private global [9 x i8] c"Type_Info"
@.__str$2fb = private global [4 x i8] c"size"
@.__str$2fc = private global [5 x i8] c"align"
@.__str$2fd = private global [5 x i8] c"Named"
@.__str$2fe = private global [7 x i8] c"Integer"
@.__str$2ff = private global [5 x i8] c"Float"
@.__str$300 = private global [7 x i8] c"Complex"
@.__str$301 = private global [10 x i8] c"Quaternion"
@.__str$302 = private global [6 x i8] c"String"
@.__str$303 = private global [7 x i8] c"Boolean"
@.__str$304 = private global [3 x i8] c"Any"
@.__str$305 = private global [7 x i8] c"Pointer"
@.__str$306 = private global [9 x i8] c"Procedure"
@.__str$307 = private global [5 x i8] c"Array"
@.__str$308 = private global [13 x i8] c"Dynamic_Array"
@.__str$309 = private global [5 x i8] c"Slice"
@.__str$30a = private global [6 x i8] c"Vector"
@.__str$30b = private global [5 x i8] c"Tuple"
@.__str$30c = private global [6 x i8] c"Struct"
@.__str$30d = private global [9 x i8] c"Raw_Union"
@.__str$30e = private global [5 x i8] c"Union"
@.__str$30f = private global [4 x i8] c"Enum"
@.__str$310 = private global [3 x i8] c"Map"
@.__str$311 = private global [7 x i8] c"Integer"
@.__str$312 = private global [4 x i8] c"size"
@.__str$313 = private global [5 x i8] c"align"
@.__str$314 = private global [6 x i8] c"signed"
@.__str$315 = private global [5 x i8] c"Float"
@.__str$316 = private global [4 x i8] c"size"
@.__str$317 = private global [5 x i8] c"align"
@.__str$318 = private global [7 x i8] c"Complex"
@.__str$319 = private global [4 x i8] c"size"
@.__str$31a = private global [5 x i8] c"align"
@.__str$31b = private global [10 x i8] c"Quaternion"
@.__str$31c = private global [4 x i8] c"size"
@.__str$31d = private global [5 x i8] c"align"
@.__str$31e = private global [6 x i8] c"String"
@.__str$31f = private global [4 x i8] c"size"
@.__str$320 = private global [5 x i8] c"align"
@.__str$321 = private global [7 x i8] c"Boolean"
@.__str$322 = private global [4 x i8] c"size"
@.__str$323 = private global [5 x i8] c"align"
@.__str$324 = private global [3 x i8] c"Any"
@.__str$325 = private global [4 x i8] c"size"
@.__str$326 = private global [5 x i8] c"align"
@.__str$327 = private global [7 x i8] c"Pointer"
@.__str$328 = private global [4 x i8] c"size"
@.__str$329 = private global [5 x i8] c"align"
@.__str$32a = private global [4 x i8] c"elem"
@.__str$32b = private global [9 x i8] c"Procedure"
@.__str$32c = private global [4 x i8] c"size"
@.__str$32d = private global [5 x i8] c"align"
@.__str$32e = private global [6 x i8] c"params"
@.__str$32f = private global [7 x i8] c"results"
@.__str$330 = private global [8 x i8] c"variadic"
@.__str$331 = private global [10 x i8] c"convention"
@.__str$332 = private global [18 x i8] c"Calling_Convention"
@.__str$333 = private global [4 x i8] c"ODIN"
@.__str$334 = private global [1 x i8] c"C"
@.__str$335 = private global [3 x i8] c"STD"
@.__str$336 = private global [4 x i8] c"FAST"
@.__str$337 = private global [5 x i8] c"Array"
@.__str$338 = private global [4 x i8] c"size"
@.__str$339 = private global [5 x i8] c"align"
@.__str$33a = private global [4 x i8] c"elem"
@.__str$33b = private global [9 x i8] c"elem_size"
@.__str$33c = private global [5 x i8] c"count"
@.__str$33d = private global [13 x i8] c"Dynamic_Array"
@.__str$33e = private global [4 x i8] c"size"
@.__str$33f = private global [5 x i8] c"align"
@.__str$340 = private global [4 x i8] c"elem"
@.__str$341 = private global [9 x i8] c"elem_size"
@.__str$342 = private global [5 x i8] c"Slice"
@.__str$343 = private global [4 x i8] c"size"
@.__str$344 = private global [5 x i8] c"align"
@.__str$345 = private global [4 x i8] c"elem"
@.__str$346 = private global [9 x i8] c"elem_size"
@.__str$347 = private global [6 x i8] c"Vector"
@.__str$348 = private global [4 x i8] c"size"
@.__str$349 = private global [5 x i8] c"align"
@.__str$34a = private global [4 x i8] c"elem"
@.__str$34b = private global [9 x i8] c"elem_size"
@.__str$34c = private global [5 x i8] c"count"
@.__str$34d = private global [5 x i8] c"Tuple"
@.__str$34e = private global [4 x i8] c"size"
@.__str$34f = private global [5 x i8] c"align"
@.__str$350 = private global [6 x i8] c"record"
@.__str$351 = private global [16 x i8] c"Type_Info_Record"
@.__str$352 = private global [5 x i8] c"types"
@.__str$353 = private global [5 x i8] c"names"
@.__str$354 = private global [7 x i8] c"offsets"
@.__str$355 = private global [6 x i8] c"packed"
@.__str$356 = private global [7 x i8] c"ordered"
@.__str$357 = private global [12 x i8] c"custom_align"
@.__str$358 = private global [6 x i8] c"Struct"
@.__str$359 = private global [4 x i8] c"size"
@.__str$35a = private global [5 x i8] c"align"
@.__str$35b = private global [6 x i8] c"record"
@.__str$35c = private global [9 x i8] c"Raw_Union"
@.__str$35d = private global [4 x i8] c"size"
@.__str$35e = private global [5 x i8] c"align"
@.__str$35f = private global [6 x i8] c"record"
@.__str$360 = private global [5 x i8] c"Union"
@.__str$361 = private global [4 x i8] c"size"
@.__str$362 = private global [5 x i8] c"align"
@.__str$363 = private global [13 x i8] c"common_fields"
@.__str$364 = private global [13 x i8] c"variant_names"
@.__str$365 = private global [13 x i8] c"variant_types"
@.__str$366 = private global [5 x i8] c"types"
@.__str$367 = private global [5 x i8] c"names"
@.__str$368 = private global [7 x i8] c"offsets"
@.__str$369 = private global [4 x i8] c"Enum"
@.__str$36a = private global [4 x i8] c"size"
@.__str$36b = private global [5 x i8] c"align"
@.__str$36c = private global [4 x i8] c"base"
@.__str$36d = private global [5 x i8] c"names"
@.__str$36e = private global [6 x i8] c"values"
@.__str$36f = private global [20 x i8] c"Type_Info_Enum_Value"
@.__str$370 = private global [1 x i8] c"f"
@.__str$371 = private global [1 x i8] c"i"
@.__str$372 = private global [3 x i8] c"Map"
@.__str$373 = private global [4 x i8] c"size"
@.__str$374 = private global [5 x i8] c"align"
@.__str$375 = private global [3 x i8] c"key"
@.__str$376 = private global [5 x i8] c"value"
@.__str$377 = private global [16 x i8] c"generated_struct"
@.__str$378 = private global [5 x i8] c"count"
@.__str$379 = private global [11 x i8] c"DebugSource"
@.__str$37a = private global [3 x i8] c"Api"
@.__str$37b = private global [12 x i8] c"WindowSystem"
@.__str$37c = private global [14 x i8] c"ShaderCompiler"
@.__str$37d = private global [10 x i8] c"ThirdParty"
@.__str$37e = private global [11 x i8] c"Application"
@.__str$37f = private global [5 x i8] c"Other"
@.__str$380 = private global [8 x i8] c"DontCare"
@.__str$381 = private global [9 x i8] c"DebugType"
@.__str$382 = private global [5 x i8] c"Error"
@.__str$383 = private global [18 x i8] c"DeprecatedBehavior"
@.__str$384 = private global [17 x i8] c"UndefinedBehavior"
@.__str$385 = private global [11 x i8] c"Portability"
@.__str$386 = private global [11 x i8] c"Performance"
@.__str$387 = private global [6 x i8] c"Marker"
@.__str$388 = private global [9 x i8] c"PushGroup"
@.__str$389 = private global [8 x i8] c"PopGroup"
@.__str$38a = private global [5 x i8] c"Other"
@.__str$38b = private global [8 x i8] c"DontCare"
@.__str$38c = private global [13 x i8] c"DebugSeverity"
@.__str$38d = private global [4 x i8] c"High"
@.__str$38e = private global [6 x i8] c"Medium"
@.__str$38f = private global [3 x i8] c"Low"
@.__str$390 = private global [12 x i8] c"Notification"
@.__str$391 = private global [8 x i8] c"DontCare"
@.__str$392 = private global [9 x i8] c"TextureID"
@.__str$393 = private global [4 x i8] c"Vec2"
@.__str$394 = private global [1 x i8] c"x"
@.__str$395 = private global [1 x i8] c"y"
@.__str$396 = private global [4 x i8] c"Vec4"
@.__str$397 = private global [1 x i8] c"x"
@.__str$398 = private global [1 x i8] c"y"
@.__str$399 = private global [1 x i8] c"z"
@.__str$39a = private global [1 x i8] c"w"
@.__str$39b = private global [4 x i8] c"mode"
@.__str$39c = private global [5 x i8] c"count"
@.__str$39d = private global [5 x i8] c"type_"
@.__str$39e = private global [7 x i8] c"indices"
@.__str$39f = private global [4 x i8] c"mode"
@.__str$3a0 = private global [5 x i8] c"first"
@.__str$3a1 = private global [5 x i8] c"count"
@.__str$3a2 = private global [6 x i8] c"buffer"
@.__str$3a3 = private global [5 x i8] c"index"
@.__str$3a4 = private global [4 x i8] c"size"
@.__str$3a5 = private global [4 x i8] c"type"
@.__str$3a6 = private global [10 x i8] c"normalized"
@.__str$3a7 = private global [6 x i8] c"stride"
@.__str$3a8 = private global [7 x i8] c"pointer"
@.__str$3a9 = private global [5 x i8] c"index"
@.__str$3aa = private global [5 x i8] c"count"
@.__str$3ab = private global [7 x i8] c"buffers"
@.__str$3ac = private global [6 x i8] c"target"
@.__str$3ad = private global [4 x i8] c"size"
@.__str$3ae = private global [4 x i8] c"data"
@.__str$3af = private global [5 x i8] c"usage"
@.__str$3b0 = private global [6 x i8] c"target"
@.__str$3b1 = private global [6 x i8] c"buffer"
@.__str$3b2 = private global [1 x i8] c"n"
@.__str$3b3 = private global [6 x i8] c"buffer"
@.__str$3b4 = private global [6 x i8] c"source"
@.__str$3b5 = private global [4 x i8] c"type"
@.__str$3b6 = private global [8 x i8] c"severity"
@.__str$3b7 = private global [5 x i8] c"count"
@.__str$3b8 = private global [3 x i8] c"ids"
@.__str$3b9 = private global [7 x i8] c"enabled"
@.__str$3ba = private global [8 x i8] c"callback"
@.__str$3bb = private global [9 x i8] c"userParam"
@.__str$3bc = private global [24 x i8] c"DebugMessageCallbackProc"
@.__str$3bd = private global [6 x i8] c"source"
@.__str$3be = private global [4 x i8] c"type"
@.__str$3bf = private global [2 x i8] c"id"
@.__str$3c0 = private global [8 x i8] c"severity"
@.__str$3c1 = private global [6 x i8] c"length"
@.__str$3c2 = private global [7 x i8] c"message"
@.__str$3c3 = private global [9 x i8] c"userParam"
@.__str$3c4 = private global [6 x i8] c"shader"
@.__str$3c5 = private global [5 x i8] c"pname"
@.__str$3c6 = private global [6 x i8] c"params"
@.__str$3c7 = private global [6 x i8] c"shader"
@.__str$3c8 = private global [9 x i8] c"maxLength"
@.__str$3c9 = private global [6 x i8] c"length"
@.__str$3ca = private global [7 x i8] c"infoLog"
@.__str$3cb = private global [4 x i8] c"name"
@.__str$3cc = private global [5 x i8] c"index"
@.__str$3cd = private global [4 x i8] c"mode"
@.__str$3ce = private global [7 x i8] c"modeRGB"
@.__str$3cf = private global [9 x i8] c"modeAlpha"
@.__str$3d0 = private global [6 x i8] c"shader"
@.__str$3d1 = private global [11 x i8] c"shader_type"
@.__str$3d2 = private global [6 x i8] c"shader"
@.__str$3d3 = private global [5 x i8] c"count"
@.__str$3d4 = private global [3 x i8] c"str"
@.__str$3d5 = private global [6 x i8] c"length"
@.__str$3d6 = private global [7 x i8] c"program"
@.__str$3d7 = private global [6 x i8] c"shader"
@.__str$3d8 = private global [7 x i8] c"program"
@.__str$3d9 = private global [7 x i8] c"program"
@.__str$3da = private global [7 x i8] c"texture"
@.__str$3db = private global [3 x i8] c"loc"
@.__str$3dc = private global [2 x i8] c"v0"
@.__str$3dd = private global [3 x i8] c"loc"
@.__str$3de = private global [2 x i8] c"v0"
@.__str$3df = private global [2 x i8] c"v1"
@.__str$3e0 = private global [3 x i8] c"loc"
@.__str$3e1 = private global [2 x i8] c"v0"
@.__str$3e2 = private global [2 x i8] c"v1"
@.__str$3e3 = private global [2 x i8] c"v2"
@.__str$3e4 = private global [3 x i8] c"loc"
@.__str$3e5 = private global [2 x i8] c"v0"
@.__str$3e6 = private global [2 x i8] c"v1"
@.__str$3e7 = private global [2 x i8] c"v2"
@.__str$3e8 = private global [2 x i8] c"v3"
@.__str$3e9 = private global [3 x i8] c"loc"
@.__str$3ea = private global [2 x i8] c"v0"
@.__str$3eb = private global [3 x i8] c"loc"
@.__str$3ec = private global [2 x i8] c"v0"
@.__str$3ed = private global [2 x i8] c"v1"
@.__str$3ee = private global [3 x i8] c"loc"
@.__str$3ef = private global [2 x i8] c"v0"
@.__str$3f0 = private global [2 x i8] c"v1"
@.__str$3f1 = private global [2 x i8] c"v2"
@.__str$3f2 = private global [3 x i8] c"loc"
@.__str$3f3 = private global [2 x i8] c"v0"
@.__str$3f4 = private global [2 x i8] c"v1"
@.__str$3f5 = private global [2 x i8] c"v2"
@.__str$3f6 = private global [2 x i8] c"v3"
@.__str$3f7 = private global [3 x i8] c"loc"
@.__str$3f8 = private global [5 x i8] c"count"
@.__str$3f9 = private global [9 x i8] c"transpose"
@.__str$3fa = private global [5 x i8] c"value"
@.__str$3fb = private global [7 x i8] c"program"
@.__str$3fc = private global [4 x i8] c"name"
@.__str$3fd = private global [7 x i8] c"program"
@.__str$3fe = private global [4 x i8] c"name"
@.__str$3ff = private global [4 x i8] c"face"
@.__str$400 = private global [4 x i8] c"mode"
@.__str$401 = private global [7 x i8] c"Texture"
@.__str$402 = private global [13 x i8] c"XInputVersion"
@.__str$403 = private global [9 x i8] c"NotLoaded"
@.__str$404 = private global [10 x i8] c"Version1_4"
@.__str$405 = private global [10 x i8] c"Version1_3"
@.__str$406 = private global [12 x i8] c"Version9_1_0"
@.__str$407 = private global [5 x i8] c"Error"
@.__str$408 = private global [14 x i8] c"ControllerType"
@.__str$409 = private global [7 x i8] c"Unknown"
@.__str$40a = private global [7 x i8] c"Gamepad"
@.__str$40b = private global [5 x i8] c"Wheel"
@.__str$40c = private global [11 x i8] c"ArcadeStick"
@.__str$40d = private global [11 x i8] c"FlightStick"
@.__str$40e = private global [8 x i8] c"DancePad"
@.__str$40f = private global [6 x i8] c"Guitar"
@.__str$410 = private global [9 x i8] c"GuitarAlt"
@.__str$411 = private global [4 x i8] c"Bass"
@.__str$412 = private global [7 x i8] c"DrumKit"
@.__str$413 = private global [9 x i8] c"ArcadePad"
@.__str$414 = private global [4 x i8] c"Kind"
@.__str$415 = private global [7 x i8] c"Texture"
@.__str$416 = private global [6 x i8] c"Shader"
@.__str$417 = private global [5 x i8] c"Sound"
@.__str$418 = private global [7 x i8] c"Texture"
@.__str$419 = private global [8 x i8] c"FileInfo"
@.__str$41a = private global [14 x i8] c"LoadedFromDisk"
@.__str$41b = private global [4 x i8] c"GLID"
@.__str$41c = private global [5 x i8] c"Width"
@.__str$41d = private global [6 x i8] c"Height"
@.__str$41e = private global [4 x i8] c"Comp"
@.__str$41f = private global [4 x i8] c"Data"
@.__str$420 = private global [10 x i8] c"FileInfo_t"
@.__str$421 = private global [4 x i8] c"Name"
@.__str$422 = private global [3 x i8] c"Ext"
@.__str$423 = private global [4 x i8] c"Path"
@.__str$424 = private global [4 x i8] c"Size"
@.__str$425 = private global [6 x i8] c"Shader"
@.__str$426 = private global [8 x i8] c"FileInfo"
@.__str$427 = private global [14 x i8] c"LoadedFromDisk"
@.__str$428 = private global [4 x i8] c"GLID"
@.__str$429 = private global [4 x i8] c"Type"
@.__str$42a = private global [6 x i8] c"Source"
@.__str$42b = private global [4 x i8] c"Data"
@.__str$42c = private global [6 x i8] c"Shader"
@.__str$42d = private global [11 x i8] c"ShaderTypes"
@.__str$42e = private global [7 x i8] c"Compute"
@.__str$42f = private global [6 x i8] c"Vertex"
@.__str$430 = private global [11 x i8] c"TessControl"
@.__str$431 = private global [14 x i8] c"TessEvaluation"
@.__str$432 = private global [8 x i8] c"Geometry"
@.__str$433 = private global [8 x i8] c"Fragment"
@.__str$434 = private global [5 x i8] c"Asset"
@.__str$435 = private global [8 x i8] c"FileInfo"
@.__str$436 = private global [14 x i8] c"LoadedFromDisk"
@.__str$437 = private global [7 x i8] c"Texture"
@.__str$438 = private global [6 x i8] c"Shader"
@.__str$439 = private global [5 x i8] c"Sound"
@.__str$43a = private global [13 x i8] c"ShaderProgram"
@.__str$43b = private global [5 x i8] c"Sound"
@.__str$43c = private global [8 x i8] c"FileInfo"
@.__str$43d = private global [14 x i8] c"LoadedFromDisk"
@.__str$43e = private global [13 x i8] c"ShaderProgram"
@.__str$43f = private global [8 x i8] c"FileInfo"
@.__str$440 = private global [14 x i8] c"LoadedFromDisk"
@.__str$441 = private global [4 x i8] c"GLID"
@.__str$442 = private global [6 x i8] c"Vertex"
@.__str$443 = private global [8 x i8] c"Fragment"
@.__str$444 = private global [8 x i8] c"Uniforms"
@.__str$445 = private global [10 x i8] c"Attributes"
@.__str$446 = private global [7 x i8] c"Program"
@.__str$447 = private global [2 x i8] c"ID"
@.__str$448 = private global [6 x i8] c"Vertex"
@.__str$449 = private global [8 x i8] c"Fragment"
@.__str$44a = private global [8 x i8] c"Uniforms"
@.__str$44b = private global [10 x i8] c"Attributes"
@.__str$44c = private global [6 x i8] c"hashes"
@.__str$44d = private global [7 x i8] c"entries"
@.__str$44e = private global [9 x i8] c"Allocator"
@.__str$44f = private global [9 x i8] c"procedure"
@.__str$450 = private global [4 x i8] c"data"
@.__str$451 = private global [14 x i8] c"Allocator_Proc"
@.__str$452 = private global [14 x i8] c"allocator_data"
@.__str$453 = private global [4 x i8] c"mode"
@.__str$454 = private global [4 x i8] c"size"
@.__str$455 = private global [9 x i8] c"alignment"
@.__str$456 = private global [10 x i8] c"old_memory"
@.__str$457 = private global [8 x i8] c"old_size"
@.__str$458 = private global [5 x i8] c"flags"
@.__str$459 = private global [14 x i8] c"Allocator_Mode"
@.__str$45a = private global [5 x i8] c"ALLOC"
@.__str$45b = private global [4 x i8] c"FREE"
@.__str$45c = private global [8 x i8] c"FREE_ALL"
@.__str$45d = private global [6 x i8] c"RESIZE"
@.__str$45e = private global [3 x i8] c"key"
@.__str$45f = private global [4 x i8] c"next"
@.__str$460 = private global [5 x i8] c"value"
@.__str$461 = private global [9 x i8] c"__Map_Key"
@.__str$462 = private global [4 x i8] c"hash"
@.__str$463 = private global [3 x i8] c"str"
@.__str$464 = private global [6 x i8] c"hashes"
@.__str$465 = private global [7 x i8] c"entries"
@.__str$466 = private global [3 x i8] c"key"
@.__str$467 = private global [4 x i8] c"next"
@.__str$468 = private global [5 x i8] c"value"
@.__str$469 = private global [6 x i8] c"hashes"
@.__str$46a = private global [7 x i8] c"entries"
@.__str$46b = private global [3 x i8] c"key"
@.__str$46c = private global [4 x i8] c"next"
@.__str$46d = private global [5 x i8] c"value"
@.__str$46e = private global [6 x i8] c"hashes"
@.__str$46f = private global [7 x i8] c"entries"
@.__str$470 = private global [3 x i8] c"key"
@.__str$471 = private global [4 x i8] c"next"
@.__str$472 = private global [5 x i8] c"value"
@.__str$473 = private global [17 x i8] c"0123456789abcdefx"
@.__str$474 = private global [17 x i8] c"0123456789ABCDEFX"
