%..string = type {i8*, i64} ; Basic_string
%..rawptr = type i8* ; Basic_rawptr
%..any = type {%Type_Info*, %..rawptr} ; Basic_any
declare void @llvm.dbg.declare(metadata, metadata, metadata) nounwind readnone 
%Type_Info_Record = type {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}, i64, i64, i1, i1, i1}
%Type_Info = type {[0 x <8 x i8>], [136 x i8], i64}
%Type_Info.Named = type {%..string, %Type_Info*}
%Type_Info.Integer = type {i64, i1}
%Type_Info.Float = type {i64}
%Type_Info.String = type {}
%Type_Info.Boolean = type {}
%Type_Info.Any = type {}
%Type_Info.Pointer = type {%Type_Info*}
%Type_Info.Procedure = type {%Type_Info*, %Type_Info*, i1, i64}
%Type_Info.Array = type {%Type_Info*, i64, i64}
%Type_Info.Dynamic_Array = type {%Type_Info*, i64}
%Type_Info.Slice = type {%Type_Info*, i64}
%Type_Info.Vector = type {%Type_Info*, i64, i64, i64}
%Type_Info.Tuple = type {%Type_Info_Record}
%Type_Info.Struct = type {%Type_Info_Record}
%Type_Info.Raw_Union = type {%Type_Info_Record}
%Type_Info.Union = type {{{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {%..string*, i64, i64}, {%Type_Info**, i64, i64}, i64, i64}
%Type_Info.Enum = type {%Type_Info*, {%..string*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}}
%Type_Info.Map = type {%Type_Info*, %Type_Info*, %Type_Info*, i64}
%Allocator = type {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr}
%Context = type {i64, %Allocator, %..rawptr, i64}
%Raw_Any = type {%Type_Info*, %..rawptr}
%Raw_String = type {i8*, i64}
%Raw_Slice = type {%..rawptr, i64, i64}
%Raw_Dynamic_Array = type {%..rawptr, i64, i64, %Allocator}
%Raw_Dynamic_Map = type {{i64*, i64, i64,%Allocator}, %Raw_Dynamic_Array}
%__Map_Key = type {i64, %..string}
%__Map_Find_Result = type {i64, i64, i64}
%__Map_Entry_Header = type {%__Map_Key, i64}
%__Map_Header = type {%Raw_Dynamic_Map*, i1, i64, i64, i64}
%main-2.Win32Vars_t = type {%jaze_gl-14.OpenGLVars_t, %..rawptr, %..rawptr, {[0 x <8 x i8>], [2 x float]}, %..rawptr}
%fmt-4.Fmt_Info = type {%..any, i64, i64, {i8*, i64, i64}*, i1, i1, i1, i1, i1, i1, i1, i1, i1}
%utf8-6.Accept_Range = type {i8, i8}
%windows-8.Point = type {i32, i32}
%windows-8.WndClassExA = type {i32, i32, i64 (%..rawptr, i32, i64, i64)*, i32, i32, %..rawptr, %..rawptr, %..rawptr, %..rawptr, i8*, i8*, %..rawptr}
%windows-8.Msg = type {%..rawptr, i32, i64, i64, i32, %windows-8.Point}
%windows-8.Rect = type {i32, i32, i32, i32}
%windows-8.PIXELFORMATDESCRIPTOR = type {i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32}
%imgui-10.DrawCmd = type {i32, %imgui-10.Vec4, %..rawptr, void (%imgui-10.DrawList*, %imgui-10.DrawCmd*)*, %..rawptr}
%imgui-10.Vec2 = type {float, float}
%imgui-10.Vec4 = type {float, float, float, float}
%imgui-10.DrawVert = type {%imgui-10.Vec2, %imgui-10.Vec2, i32}
%imgui-10.DrawData = type {i1, %imgui-10.DrawList**, i32, i32, i32}
%imgui-10.FontAtlas = type {}
%imgui-10.DrawList = type {}
%imgui-10.GuiStyle = type {float, %imgui-10.Vec2, %imgui-10.Vec2, float, i32, float, %imgui-10.Vec2, float, %imgui-10.Vec2, %imgui-10.Vec2, %imgui-10.Vec2, float, float, float, float, float, float, %imgui-10.Vec2, %imgui-10.Vec2, i1, i1, float, [43 x %imgui-10.Vec4]}
%imgui-10.GuiIO = type {%imgui-10.Vec2, float, float, i8*, i8*, float, float, float, [19 x i32], float, float, %..rawptr, %imgui-10.FontAtlas*, float, i1, %imgui-10.Vec2, %imgui-10.Vec2, %imgui-10.Vec2, i1, i1, i1, i1, void (%imgui-10.DrawData*)*, i8* ()*, void (i8*)*, %..rawptr (i64)*, void (%..rawptr)*, void (i32, i32)*, %..rawptr, %imgui-10.Vec2, [5 x i1], float, i1, i1, i1, i1, i1, [512 x i1], [17 x i16], i1, i1, i1, float, i32, i32, i32, i32, %imgui-10.Vec2, %imgui-10.Vec2, [5 x i1], [5 x %imgui-10.Vec2], [5 x float], [5 x i1], [5 x i1], [5 x i1], [5 x float], [5 x float], [5 x float], [512 x float], [512 x float]}
%jaze_win32-13.MONITORINFO = type {i32, %windows-8.Rect, %windows-8.Rect, i32}
%jaze_win32-13.WINDOWPLACEMENT = type {i32, i32, i32, %windows-8.Point, %windows-8.Point, %windows-8.Rect}
%jaze_gl-14.Shader = type {%..string, i32, i1}
%jaze_gl-14.Program = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, %jaze_gl-14.Shader, %jaze_gl-14.Shader, i32}
%jaze_gl-14.OpenGLVars_t = type {{%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}, %..string, %..string, %..string, %..string, %..rawptr, i32, i32, i32, i32, i32, i32, i32}
%jaze_gl-14.DebugFunctionLoadStatus = type {%..string, i64, %Type_Info*, i1}
%jaze_gl-14.DebugInfo_t = type {{%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}, i32, i32}
%jaze_wgl-15.Attrib = type {i32, i32}
%jaze_wgl-15.TryGetExtensionList = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}}
%jaze_imgui-17.State_t = type {%jaze_gl-14.Program, i32, i32, i32, i32, i32}
%jaze_xinput-18.BatteryInformation = type {i8, i8}
%jaze_xinput-18.Capabilities = type {i8, i8, i16, %jaze_xinput-18.GamepadState, %jaze_xinput-18.VibrationState}
%jaze_xinput-18.State = type {i32, %jaze_xinput-18.GamepadState}
%jaze_xinput-18.GamepadState = type {i16, i8, i8, i16, i16, i16, i16}
%jaze_xinput-18.VibrationState = type {i16, i16}
%jaze_xinput-18.KeyStroke = type {i16, i16, i16, i8, i8}
%jaze_xinput-18.DebugFunctionLoadStatus = type {%..string, i64, %Type_Info*, i1}
%jaze_xinput-18.DebugInfo_t = type {{%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}, i32, i32}
%strconv-22.Decimal_Slice = type {{i8*, i64, i64}, i64, i64, i1}
%strconv-22.Float_Info = type {i64, i64, i64}
%decimal-24.Decimal = type {i64, i64, [384 x i8], i1, i1}

declare ccc void @llvm.assume(i1) 
declare ccc void @llvm.debugtrap() 
declare ccc void @llvm.trap() 
declare ccc i64 @llvm.readcyclecounter() 
declare ccc i32 @GetLastError() 
declare ccc i32 @GetCursorPos(%windows-8.Point*) 
declare ccc i32 @ScreenToClient(%..rawptr, %windows-8.Point*) 
declare ccc %..rawptr @GetModuleHandleA(i8*) 
declare ccc void @PostQuitMessage(i32) 
declare ccc i32 @SetWindowTextA(%..rawptr, i8*) 
declare ccc i32 @QueryPerformanceFrequency(i64*) 
declare ccc i32 @QueryPerformanceCounter(i64*) 
declare ccc i16 @RegisterClassExA(%windows-8.WndClassExA*) 
declare ccc %..rawptr @CreateWindowExA(i32, i8*, i8*, i32, i32, i32, i32, i32, %..rawptr, %..rawptr, %..rawptr, %..rawptr) 
declare ccc i32 @TranslateMessage(%windows-8.Msg*) 
declare ccc i64 @DispatchMessageA(%windows-8.Msg*) 
declare ccc i32 @PeekMessageA(%windows-8.Msg*, %..rawptr, i32, i32, i32) 
declare ccc i64 @DefWindowProcA(%..rawptr, i32, i64, i64) 
declare ccc i32 @AdjustWindowRect(%windows-8.Rect*, i32, i32) 
declare ccc %..rawptr @GetActiveWindow() 
declare ccc i32 @DestroyWindow(%..rawptr) 
declare ccc i32 @DescribePixelFormat(%..rawptr, i32, i32, %windows-8.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @GetCurrentThreadId() 
declare ccc %..rawptr @GetStdHandle(i32) 
declare ccc i32 @WriteFile(%..rawptr, %..rawptr, i32, i32*, %..rawptr) 
declare ccc i32 @SetHandleInformation(%..rawptr, i32, i32) 
declare ccc %..rawptr @HeapAlloc(%..rawptr, i32, i64) 
declare ccc %..rawptr @HeapReAlloc(%..rawptr, i32, %..rawptr, i64) 
declare ccc i32 @HeapFree(%..rawptr, i32, %..rawptr) 
declare ccc %..rawptr @GetProcessHeap() 
declare ccc %..rawptr @LoadLibraryA(i8*) 
declare ccc void @FreeLibrary(%..rawptr) 
declare ccc void ()* @GetProcAddress(%..rawptr, i8*) 
declare ccc i32 @GetClientRect(%..rawptr, %windows-8.Rect*) 
declare ccc %..rawptr @GetDC(%..rawptr) 
declare ccc i32 @SetPixelFormat(%..rawptr, i32, %windows-8.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @ChoosePixelFormat(%..rawptr, %windows-8.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @SwapBuffers(%..rawptr) 
declare ccc i32 @ReleaseDC(%..rawptr, %..rawptr) 
declare ccc i16 @GetAsyncKeyState(i32) 
declare ccc %..rawptr @wglCreateContext(%..rawptr) 
declare ccc i32 @wglMakeCurrent(%..rawptr, %..rawptr) 
declare ccc void ()* @wglGetProcAddress(i8*) 
declare ccc i32 @wglDeleteContext(%..rawptr) 
declare ccc %imgui-10.GuiIO* @igGetIO() 
declare ccc %imgui-10.GuiStyle* @igGetStyle() 
declare ccc void @igNewFrame() 
declare ccc void @igRender() 
declare ccc void @igShowTestWindow(i1*) 
declare ccc void @igEnd() 
declare ccc void @igEndChild() 
declare ccc void @igSetNextWindowPosCenter(i32) 
declare ccc void @igPushStyleVar(i32, float) 
declare ccc void @igPopStyleVar(i32) 
declare ccc void @igPushTextWrapPos(float) 
declare ccc void @igPopTextWrapPos() 
declare ccc void @igSeparator() 
declare ccc void @igSameLine(float, float) 
declare ccc void @igIndent(float) 
declare ccc void @igUnindent(float) 
declare ccc void @igColumns(i32, i8*, i1) 
declare ccc void @igNextColumn() 
declare ccc void @igPushIdInt(i32) 
declare ccc void @igPopId() 
declare ccc void @igBeginTooltip() 
declare ccc void @igEndTooltip() 
declare ccc i1 @igBeginMainMenuBar() 
declare ccc void @igEndMainMenuBar() 
declare ccc void @igEndMenu() 
declare ccc i1 @igIsItemHovered() 
declare ccc void @ImGuiIO_AddInputCharacter(i16) 
declare ccc void @ImFontAtlas_GetTexDataAsRGBA32(%imgui-10.FontAtlas*, i8**, i32*, i32*, i32*) 
declare ccc void @ImFontAtlas_SetTexID(%imgui-10.FontAtlas*, %..rawptr) 
declare ccc i32 @ImDrawList_GetVertexBufferSize(%imgui-10.DrawList*) 
declare ccc %imgui-10.DrawVert* @ImDrawList_GetVertexPtr(%imgui-10.DrawList*, i32) 
declare ccc i32 @ImDrawList_GetIndexBufferSize(%imgui-10.DrawList*) 
declare ccc i16* @ImDrawList_GetIndexPtr(%imgui-10.DrawList*, i32) 
declare ccc i32 @ImDrawList_GetCmdSize(%imgui-10.DrawList*) 
declare ccc %imgui-10.DrawCmd* @ImDrawList_GetCmdPtr(%imgui-10.DrawList*, i32) 
declare ccc i32 @GetMonitorInfoA(%..rawptr, %jaze_win32-13.MONITORINFO*) 
declare ccc %..rawptr @MonitorFromWindow(%..rawptr, i32) 
declare ccc void @SetWindowPos(%..rawptr, %..rawptr, i32, i32, i32, i32, i32) 
declare ccc i32 @GetWindowPlacement(%..rawptr, %jaze_win32-13.WINDOWPLACEMENT*) 
declare ccc i32 @SetWindowPlacement(%..rawptr, %jaze_win32-13.WINDOWPLACEMENT*) 
declare ccc i64 @GetWindowLongPtrA(%..rawptr, i32) 
declare ccc i64 @SetWindowLongPtrA(%..rawptr, i32, i64) 
declare ccc void @glViewport(i32, i32, i32, i32) 
declare ccc void @glClearColor(float, float, float, float) 
declare ccc void @glScissor(i32, i32, i32, i32) 
declare ccc i8* @glGetString(i32) 
declare ccc void @glTexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, %..rawptr) 
declare ccc void @glTexParameteri(i32, i32, i32) 
declare ccc void @glBindTexture(i32, i32) 
declare ccc void @glGenTextures(i32, i32*) 
declare ccc void @glBlendFunc(i32, i32) 
declare ccc void @glGetIntegerv(i32, i32*) 
declare ccc void @glEnable(i32) 
declare ccc void @glDisable(i32) 
declare ccc void @glClear(i32) 
declare ccc void @llvm.memset.p0i8.i64(%..rawptr, i8, i64, i32, i1) 
declare ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) 
declare ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) 
declare ccc i1 @igBegin(i8*, i1*, i32) 
declare ccc i1 @igBeginChild(i8*, i64, i1, i32) 
declare ccc void @igText(i8*) 
declare ccc i1 @igButton(i8*, i64) 
declare ccc void @igImage(%..rawptr, i64, i64, i64, %imgui-10.Vec4, %imgui-10.Vec4) 
declare ccc i1 @igCollapsingHeader(i8*, i32) 
declare ccc i1 @igBeginMenu(i8*, i1) 
declare ccc i1 @igMenuItem(i8*, i8*, i1, i1) 

define %Type_Info* @.type_info_base(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%3 = load %Type_Info*, %Type_Info** %0, align 8
	%4 = icmp eq %Type_Info* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	store %Type_Info* zeroinitializer, %Type_Info** %1
		%5 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %5, %Type_Info** %1
	; TypeMatchStmt
	%6 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%7 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	%8 = load i64, i64* %7, align 8
	%9 = bitcast %Type_Info* %6 to %..rawptr
	%10 = icmp eq i64 %8, 1
	br i1 %10, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	br label %typematch.done-5

typematch.body-4:
	%11 = bitcast %..rawptr %9 to %Type_Info.Named*
	%12 = load %Type_Info.Named, %Type_Info.Named* %11, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %2
	store %Type_Info.Named %12, %Type_Info.Named* %2
	; AssignStmt
	; SelectorExpr
	%13 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2, i64 0, i32 1
	%14 = load %Type_Info*, %Type_Info** %13, align 8
	store %Type_Info* %14, %Type_Info** %1
	br label %typematch.done-5

typematch.done-5:
	; ReturnStmt
	%15 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %15
}

define %Type_Info* @.type_info_base_without_enum(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named, align 8
	%3 = alloca %Type_Info.Enum, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = icmp eq %Type_Info* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	store %Type_Info* zeroinitializer, %Type_Info** %1
		%6 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %6, %Type_Info** %1
	; TypeMatchStmt
	%7 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%8 = getelementptr inbounds %Type_Info, %Type_Info* %7, i64 0, i32 2 ; UnionTagPtr
	%9 = load i64, i64* %8, align 8
	%10 = bitcast %Type_Info* %7 to %..rawptr
	%11 = icmp eq i64 %9, 1
	br i1 %11, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	%12 = icmp eq i64 %9, 17
	br i1 %12, label %typematch.body-6, label %typematch.next-5

typematch.body-4:
	%13 = bitcast %..rawptr %10 to %Type_Info.Named*
	%14 = load %Type_Info.Named, %Type_Info.Named* %13, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %2
	store %Type_Info.Named %14, %Type_Info.Named* %2
	; AssignStmt
	; SelectorExpr
	%15 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2, i64 0, i32 1
	%16 = load %Type_Info*, %Type_Info** %15, align 8
	store %Type_Info* %16, %Type_Info** %1
	br label %typematch.done-7

typematch.next-5:
	br label %typematch.done-7

typematch.body-6:
	%17 = bitcast %..rawptr %10 to %Type_Info.Enum*
	%18 = load %Type_Info.Enum, %Type_Info.Enum* %17, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %3
	store %Type_Info.Enum %18, %Type_Info.Enum* %3
	; AssignStmt
	; SelectorExpr
	%19 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%20 = load %Type_Info*, %Type_Info** %19, align 8
	store %Type_Info* %20, %Type_Info** %1
	br label %typematch.done-7

typematch.done-7:
	; ReturnStmt
	%21 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %21
}

define void @.__check_context() {
decls-0:
	%0 = alloca %Context*, align 8
	; c
	store %Context* zeroinitializer, %Context** %0
		%1 = getelementptr inbounds %Context, %Context* @__context, i64 0
	store %Context* %1, %Context** %0
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%2 = load %Context*, %Context** %0, align 8
	%3 = getelementptr inbounds %Context, %Context* %2, i64 0
	%4 = getelementptr inbounds %Context, %Context* %3, i64 0, i32 1
	%5 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %5, align 8
	%7 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%8 = load %Context*, %Context** %0, align 8
	%9 = getelementptr inbounds %Context, %Context* %8, i64 0
	%10 = getelementptr inbounds %Context, %Context* %9, i64 0, i32 1
	%11 = call %Allocator @.default_allocator()
	store %Allocator %11, %Allocator* %10
	br label %if.done-2

if.done-2:
	; IfStmt
	; SelectorExpr
	%12 = load %Context*, %Context** %0, align 8
	%13 = getelementptr inbounds %Context, %Context* %12, i64 0
	%14 = getelementptr inbounds %Context, %Context* %13, i64 0, i32 0
	%15 = load i64, i64* %14, align 8
	%16 = icmp eq i64 %15, 0
	br i1 %16, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%17 = load %Context*, %Context** %0, align 8
	%18 = getelementptr inbounds %Context, %Context* %17, i64 0
	%19 = getelementptr inbounds %Context, %Context* %18, i64 0, i32 0
	; SelectorExpr
	%20 = call i64 @.os_windows-19.current_thread_id()
	store i64 %20, i64* %19
	br label %if.done-4

if.done-4:
	ret void
}

define %..rawptr @.alloc(i64 %size) alwaysinline {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	%2 = call %..rawptr @.alloc_align(i64 %1, i64 16)
	ret %..rawptr %2
}

define %..rawptr @.alloc_align(i64 %size, i64 %alignment) alwaysinline {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i64, align 8
	%2 = alloca %Allocator, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	store i64 zeroinitializer, i64* %1
		store i64 %alignment, i64* %1
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %2
		; SelectorExpr
	%3 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%4 = load %Allocator, %Allocator* %3, align 8
	store %Allocator %4, %Allocator* %2
	; ReturnStmt
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %5, align 8
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 1
	%8 = load %..rawptr, %..rawptr* %7, align 8
	%9 = load i64, i64* %0, align 8
	%10 = load i64, i64* %1, align 8
	%11 = call %..rawptr %6(%..rawptr %8, i8 0, i64 %9, i64 %10, %..rawptr zeroinitializer, i64 0, i64 0)
	ret %..rawptr %11
}

define void @.free_ptr_with_allocator(%Allocator %a, %..rawptr %ptr) alwaysinline {
decls-0:
	%0 = alloca %Allocator, align 8
	%1 = alloca %..rawptr, align 8
	store %Allocator zeroinitializer, %Allocator* %0
		store %Allocator %a, %Allocator* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %ptr, %..rawptr* %1
	; IfStmt
	%2 = load %..rawptr, %..rawptr* %1, align 8
	%3 = icmp eq %..rawptr %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; SelectorExpr
	%4 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%5 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %4, align 8
	%6 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %5, zeroinitializer
	br i1 %6, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load %..rawptr, %..rawptr* %1, align 8
	%12 = call %..rawptr %8(%..rawptr %10, i8 1, i64 0, i64 0, %..rawptr %11, i64 0, i64 0)
	ret void
}

define void @.free_ptr(%..rawptr %ptr) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	call void @.__check_context()
	; SelectorExpr
	%1 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%2 = load %Allocator, %Allocator* %1, align 8
	%3 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr_with_allocator(%Allocator %2, %..rawptr %3)
	ret void
}

define void @.free_all() alwaysinline {
decls-0:
	%0 = alloca %Allocator, align 8
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %0
		; SelectorExpr
	%1 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%2 = load %Allocator, %Allocator* %1, align 8
	store %Allocator %2, %Allocator* %0
	; SelectorExpr
	%3 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%4 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%6 = load %..rawptr, %..rawptr* %5, align 8
	%7 = call %..rawptr %4(%..rawptr %6, i8 2, i64 0, i64 0, %..rawptr zeroinitializer, i64 0, i64 0)
	ret void
}

define %..rawptr @.resize(%..rawptr %ptr, i64 %old_size, i64 %new_size) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	; ReturnStmt
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load i64, i64* %1, align 8
	%5 = load i64, i64* %2, align 8
	%6 = call %..rawptr @.resize_align(%..rawptr %3, i64 %4, i64 %5, i64 16)
	ret %..rawptr %6
}

define %..rawptr @.resize_align(%..rawptr %ptr, i64 %old_size, i64 %new_size, i64 %alignment) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Allocator, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %4
		; SelectorExpr
	%5 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%6 = load %Allocator, %Allocator* %5, align 8
	store %Allocator %6, %Allocator* %4
	; ReturnStmt
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load i64, i64* %2, align 8
	%12 = load i64, i64* %3, align 8
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = load i64, i64* %1, align 8
	%15 = call %..rawptr %8(%..rawptr %10, i8 3, i64 %11, i64 %12, %..rawptr %13, i64 %14, i64 0)
	ret %..rawptr %15
}

define %..rawptr @.default_resize_align(%..rawptr %old_memory, i64 %old_size, i64 %new_size, i64 %alignment) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %old_memory, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	; IfStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = icmp eq %..rawptr %5, zeroinitializer
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%7 = load i64, i64* %2, align 8
	%8 = load i64, i64* %3, align 8
	%9 = call %..rawptr @.alloc_align(i64 %7, i64 %8)
	ret %..rawptr %9

if.done-2:
	; IfStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 0
	br i1 %11, label %if.then-3, label %if.done-4

if.then-3:
	; free
	%12 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr(%..rawptr %12)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-4:
	; IfStmt
	%13 = load i64, i64* %2, align 8
	%14 = load i64, i64* %1, align 8
	%15 = icmp eq i64 %13, %14
	br i1 %15, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	%16 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %16

if.done-6:
	; new_memory
	store %..rawptr zeroinitializer, %..rawptr* %4
		%17 = load i64, i64* %2, align 8
	%18 = load i64, i64* %3, align 8
	%19 = call %..rawptr @.alloc_align(i64 %17, i64 %18)
	store %..rawptr %19, %..rawptr* %4
	; IfStmt
	%20 = load %..rawptr, %..rawptr* %4, align 8
	%21 = icmp eq %..rawptr %20, zeroinitializer
	br i1 %21, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-8:
	; SelectorExpr
	%22 = load %..rawptr, %..rawptr* %4, align 8
	%23 = load %..rawptr, %..rawptr* %0, align 8
	; min
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %2, align 8
	%26 = icmp slt i64 %24, %25
	%27 = select i1 %26, i64 %24, i64 %25
	%28 = call %..rawptr @.mem-5.copy(%..rawptr %22, %..rawptr %23, i64 %27)
	; free
	%29 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr(%..rawptr %29)
	; ReturnStmt
	%30 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %30
}

define %..rawptr @.default_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i8, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %..rawptr, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %allocator_data, %..rawptr* %0
	store i8 zeroinitializer, i8* %1
		store i8 %mode, i8* %1
	store i64 zeroinitializer, i64* %2
		store i64 %size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	store %..rawptr zeroinitializer, %..rawptr* %4
		store %..rawptr %old_memory, %..rawptr* %4
	store i64 zeroinitializer, i64* %5
		store i64 %old_size, i64* %5
	store i64 zeroinitializer, i64* %6
		store i64 %flags, i64* %6
	; MatchStmt
	%8 = load i8, i8* %1, align 8
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%10 = icmp eq i8 %8, 1
	br i1 %10, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; ReturnStmt
	; SelectorExpr
	%11 = load i64, i64* %2, align 8
	%12 = call %..rawptr @.os_windows-19.heap_alloc(i64 %11)
	ret %..rawptr %12

match.case.next-3:
	%13 = icmp eq i8 %8, 2
	br i1 %13, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	; SelectorExpr
	%14 = load %..rawptr, %..rawptr* %4, align 8
	call void @.os_windows-19.heap_free(%..rawptr %14)
	; ReturnStmt
	ret %..rawptr zeroinitializer

match.case.next-5:
	%15 = icmp eq i8 %8, 3
	br i1 %15, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	br label %match.done-11

match.case.next-7:
	br label %match.done-11

match.fall.body-8:
	; ptr
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	%16 = load %..rawptr, %..rawptr* %4, align 8
	%17 = load i64, i64* %2, align 8
	%18 = call %..rawptr @.os_windows-19.heap_resize(%..rawptr %16, i64 %17)
	store %..rawptr %18, %..rawptr* %7
	; assert
	%19 = load %..rawptr, %..rawptr* %7, align 8
	%20 = icmp ne %..rawptr %19, zeroinitializer
	%21 = icmp eq i1 %20, false
	br i1 %21, label %builtin.assert.err-9, label %builtin.assert.done-10

builtin.assert.err-9:
	call void @.__assert(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$0, i64 0, i32 0), i64 26}, i64 257, i64 10, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-10

builtin.assert.done-10:
	; ReturnStmt
	%22 = load %..rawptr, %..rawptr* %7, align 8
	ret %..rawptr %22

match.done-11:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %Allocator @.default_allocator() {
decls-0:
	%0 = alloca %Allocator, align 8
	; ReturnStmt
	; CompoundLit
	store %Allocator zeroinitializer, %Allocator* %0
	store %Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* zeroinitializer, %..rawptr zeroinitializer}, %Allocator* %0
	%1 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* @.default_allocator_proc, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %1
	%2 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %2
	%3 = load %Allocator, %Allocator* %0, align 8
	ret %Allocator %3
}

define i1 @.__string_eq(%..string %a, %..string %b) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; IfStmt
	; SelectorExpr
	%2 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%3 = load i64, i64* %2, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 1
	%5 = load i64, i64* %4, align 8
	%6 = icmp ne i64 %3, %5
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; IfStmt
	; SelectorExpr
	%7 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 0
	%8 = load i8*, i8** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 0
	%10 = load i8*, i8** %9, align 8
	%11 = icmp eq i8* %8, %10
	br i1 %11, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i1 true

if.done-4:
	; ReturnStmt
	%12 = load %..string, %..string* %0, align 8
	%13 = load %..string, %..string* %1, align 8
	%14 = call i64 @.__string_cmp(%..string %12, %..string %13)
	%15 = icmp eq i64 %14, 0
	ret i1 %15
}

define i64 @.__string_cmp(%..string %a, %..string %b) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca i8*, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	; cast - cast
	%7 = extractvalue %..string %6, 0
	store i8* zeroinitializer, i8** %2
	store i8* %7, i8** %2
	%8 = extractvalue %..string %6, 1
	%9 = sub i64 %8, 0
	%10 = sub i64 %8, 0
	%11 = load i8*, i8** %2, align 8
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %12, i8** %13
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %9, i64* %14
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %10, i64* %15
	%16 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%17 = load %..string, %..string* %1, align 8
	; cast - cast
	%18 = extractvalue %..string %17, 0
	store i8* zeroinitializer, i8** %4
	store i8* %18, i8** %4
	%19 = extractvalue %..string %17, 1
	%20 = sub i64 %19, 0
	%21 = sub i64 %19, 0
	%22 = load i8*, i8** %4, align 8
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %23, i8** %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %20, i64* %25
	%26 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %21, i64* %26
	%27 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%28 = call i64 @.mem-5.compare({i8*, i64, i64} %16, {i8*, i64, i64} %27)
	ret i64 %28
}

define i1 @.__string_ne(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i1 @.__string_eq(%..string %2, %..string %3)
	%5 = xor i1 -1, %4
	ret i1 %5
}

define i1 @.__string_lt(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp slt i64 %4, 0
	ret i1 %5
}

define i1 @.__string_gt(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sgt i64 %4, 0
	ret i1 %5
}

define i1 @.__string_le(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sle i64 %4, 0
	ret i1 %5
}

define i1 @.__string_ge(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sge i64 %4, 0
	ret i1 %5
}

define void @.__assert(%..string %file, i64 %line, i64 %column, %..string %msg) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [4 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %msg, %..string* %3
	; SelectorExpr
	; SelectorExpr
	%10 = load i64, i64* @.stderr, align 8
	%11 = load %..string, %..string* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%15 = bitcast %..string* %0 to %..rawptr
	%16 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%17 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%18 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %16, %Type_Info** %17
	store %..rawptr %15, %..rawptr* %18
	%19 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%20 = bitcast i64* %1 to %..rawptr
	%21 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%22 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%30 = bitcast %..string* %3 to %..rawptr
	%31 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%32 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [4 x %..any] zeroinitializer, [4 x %..any]* %9
	%35 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	store %..any %19, %..any* %35
	%36 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 1
	store %..any %24, %..any* %36
	%37 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 2
	store %..any %29, %..any* %37
	%38 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 3
	store %..any %34, %..any* %38
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	%40 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %39, %..any** %40
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 4, i64* %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 4, i64* %42
	%43 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%44 = call i64 @.fmt-4.fprintf(i64 %10, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$2, i64 0, i32 0), i64 32}, {%..any*, i64, i64} %43)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__panic(%..string %file, i64 %line, i64 %column, %..string %msg) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [4 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %msg, %..string* %3
	; SelectorExpr
	; SelectorExpr
	%10 = load i64, i64* @.stderr, align 8
	%11 = load %..string, %..string* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%15 = bitcast %..string* %0 to %..rawptr
	%16 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%17 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%18 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %16, %Type_Info** %17
	store %..rawptr %15, %..rawptr* %18
	%19 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%20 = bitcast i64* %1 to %..rawptr
	%21 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%22 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%30 = bitcast %..string* %3 to %..rawptr
	%31 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%32 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [4 x %..any] zeroinitializer, [4 x %..any]* %9
	%35 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	store %..any %19, %..any* %35
	%36 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 1
	store %..any %24, %..any* %36
	%37 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 2
	store %..any %29, %..any* %37
	%38 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 3
	store %..any %34, %..any* %38
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	%40 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %39, %..any** %40
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 4, i64* %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 4, i64* %42
	%43 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%44 = call i64 @.fmt-4.fprintf(i64 %10, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$3, i64 0, i32 0), i64 20}, {%..any*, i64, i64} %43)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__bounds_check_error(%..string %file, i64 %line, i64 %column, i64 %index, i64 %count) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [5 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %index, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %count, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	br i1 %13, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%14 = load i64, i64* %3, align 8
	%15 = load i64, i64* %4, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%17 = load i64, i64* @.stderr, align 8
	%18 = load %..string, %..string* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %2, align 8
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%23 = bitcast %..string* %0 to %..rawptr
	%24 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%25 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%26 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %24, %Type_Info** %25
	store %..rawptr %23, %..rawptr* %26
	%27 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%28 = bitcast i64* %1 to %..rawptr
	%29 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%30 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%33 = bitcast i64* %2 to %..rawptr
	%34 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%35 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %34, %Type_Info** %35
	store %..rawptr %33, %..rawptr* %36
	%37 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%38 = bitcast i64* %3 to %..rawptr
	%39 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%40 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %39, %Type_Info** %40
	store %..rawptr %38, %..rawptr* %41
	%42 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%43 = bitcast i64* %4 to %..rawptr
	%44 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%45 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %44, %Type_Info** %45
	store %..rawptr %43, %..rawptr* %46
	%47 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [5 x %..any] zeroinitializer, [5 x %..any]* %11
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	store %..any %27, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 2
	store %..any %37, %..any* %50
	%51 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 3
	store %..any %42, %..any* %51
	%52 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 4
	store %..any %47, %..any* %52
	%53 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	%54 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %53, %..any** %54
	%55 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 5, i64* %55
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 5, i64* %56
	%57 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%58 = call i64 @.fmt-4.fprintf(i64 %17, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$4, i64 0, i32 0), i64 48}, {%..any*, i64, i64} %57)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__slice_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high, i64 %max) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [6 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %low, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %high, i64* %4
	store i64 zeroinitializer, i64* %5
		store i64 %max, i64* %5
	; IfStmt
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 0, %14
	br i1 %15, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%16 = load i64, i64* %3, align 8
	%17 = load i64, i64* %4, align 8
	%18 = icmp sle i64 %16, %17
	br i1 %18, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%19 = load i64, i64* %4, align 8
	%20 = load i64, i64* %5, align 8
	%21 = icmp sle i64 %19, %20
	br i1 %21, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	; SelectorExpr
	%22 = load i64, i64* @.stderr, align 8
	%23 = load %..string, %..string* %0, align 8
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %2, align 8
	%26 = load i64, i64* %3, align 8
	%27 = load i64, i64* %4, align 8
	%28 = load i64, i64* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%29 = bitcast %..string* %0 to %..rawptr
	%30 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%34 = bitcast i64* %1 to %..rawptr
	%35 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%39 = bitcast i64* %2 to %..rawptr
	%40 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%42 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %40, %Type_Info** %41
	store %..rawptr %39, %..rawptr* %42
	%43 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%44 = bitcast i64* %3 to %..rawptr
	%45 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%47 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %45, %Type_Info** %46
	store %..rawptr %44, %..rawptr* %47
	%48 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%49 = bitcast i64* %4 to %..rawptr
	%50 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%51 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%54 = bitcast i64* %5 to %..rawptr
	%55 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%56 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%57 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %55, %Type_Info** %56
	store %..rawptr %54, %..rawptr* %57
	%58 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [6 x %..any] zeroinitializer, [6 x %..any]* %13
	%59 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	store %..any %33, %..any* %59
	%60 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 1
	store %..any %38, %..any* %60
	%61 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 2
	store %..any %43, %..any* %61
	%62 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 3
	store %..any %48, %..any* %62
	%63 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 4
	store %..any %53, %..any* %63
	%64 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 5
	store %..any %58, %..any* %64
	%65 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	%66 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %65, %..any** %66
	%67 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 6, i64* %67
	%68 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 6, i64* %68
	%69 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%70 = call i64 @.fmt-4.fprintf(i64 %22, %..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$5, i64 0, i32 0), i64 46}, {%..any*, i64, i64} %69)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__substring_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [5 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %low, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %high, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	br i1 %13, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%14 = load i64, i64* %3, align 8
	%15 = load i64, i64* %4, align 8
	%16 = icmp sle i64 %14, %15
	br i1 %16, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%17 = load i64, i64* @.stderr, align 8
	%18 = load %..string, %..string* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %2, align 8
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%23 = bitcast %..string* %0 to %..rawptr
	%24 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%25 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%26 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %24, %Type_Info** %25
	store %..rawptr %23, %..rawptr* %26
	%27 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%28 = bitcast i64* %1 to %..rawptr
	%29 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%30 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%33 = bitcast i64* %2 to %..rawptr
	%34 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%35 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %34, %Type_Info** %35
	store %..rawptr %33, %..rawptr* %36
	%37 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%38 = bitcast i64* %3 to %..rawptr
	%39 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%40 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %39, %Type_Info** %40
	store %..rawptr %38, %..rawptr* %41
	%42 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%43 = bitcast i64* %4 to %..rawptr
	%44 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%45 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %44, %Type_Info** %45
	store %..rawptr %43, %..rawptr* %46
	%47 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [5 x %..any] zeroinitializer, [5 x %..any]* %11
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	store %..any %27, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 2
	store %..any %37, %..any* %50
	%51 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 3
	store %..any %42, %..any* %51
	%52 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 4
	store %..any %47, %..any* %52
	%53 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	%54 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %53, %..any** %54
	%55 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 5, i64* %55
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 5, i64* %56
	%57 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%58 = call i64 @.fmt-4.fprintf(i64 %17, %..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$6, i64 0, i32 0), i64 46}, {%..any*, i64, i64} %57)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__union_cast_check(i1 %ok, %..string %file, i64 %line, i64 %column, %Type_Info* %from, %Type_Info* %to) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Type_Info*, align 8
	%5 = alloca %Type_Info*, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca {%..any*, i64, i64}, align 8
	%12 = alloca [5 x %..any], align 8
	store i1 zeroinitializer, i1* %0
		store i1 %ok, i1* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %file, %..string* %1
	store i64 zeroinitializer, i64* %2
		store i64 %line, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %column, i64* %3
	store %Type_Info* zeroinitializer, %Type_Info** %4
		store %Type_Info* %from, %Type_Info** %4
	store %Type_Info* zeroinitializer, %Type_Info** %5
		store %Type_Info* %to, %Type_Info** %5
	; IfStmt
	%13 = load i1, i1* %0, align 1
	br i1 %13, label %if.done-2, label %if.then-1

if.then-1:
	; SelectorExpr
	; SelectorExpr
	%14 = load i64, i64* @.stderr, align 8
	%15 = load %..string, %..string* %1, align 8
	%16 = load i64, i64* %2, align 8
	%17 = load i64, i64* %3, align 8
	%18 = load %Type_Info*, %Type_Info** %4, align 8
	%19 = load %Type_Info*, %Type_Info** %5, align 8
	store %..any zeroinitializer, %..any* %6
	%20 = bitcast %..string* %1 to %..rawptr
	%21 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%22 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%32 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%35 = bitcast %Type_Info** %4 to %..rawptr
	%36 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%37 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%38 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %36, %Type_Info** %37
	store %..rawptr %35, %..rawptr* %38
	%39 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%40 = bitcast %Type_Info** %5 to %..rawptr
	%41 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%42 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%43 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %41, %Type_Info** %42
	store %..rawptr %40, %..rawptr* %43
	%44 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %11
	store [5 x %..any] zeroinitializer, [5 x %..any]* %12
	%45 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 0
	store %..any %24, %..any* %45
	%46 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 1
	store %..any %29, %..any* %46
	%47 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 2
	store %..any %34, %..any* %47
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 3
	store %..any %39, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 4
	store %..any %44, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 0
	%51 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 0
	store %..any* %50, %..any** %51
	%52 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 1
	store i64 5, i64* %52
	%53 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 2
	store i64 5, i64* %53
	%54 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %11, align 8
	%55 = call i64 @.fmt-4.fprintf(i64 %14, %..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$7, i64 0, i32 0), i64 45}, {%..any*, i64, i64} %54)
	call ccc void @llvm.debugtrap()
	br label %if.done-2

if.done-2:
	ret void
}

define {i32, i64} @.__string_decode_rune(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i32, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	; SelectorExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = call {i32, i64} @.utf8-6.decode_rune-1824837333280(%..string %2)
	%4 = extractvalue {i32, i64} %3, 0
	%5 = extractvalue {i32, i64} %3, 1
	store {i32, i64} zeroinitializer, {i32, i64}* %1
	%6 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 0
	store i32 %4, i32* %6
	%7 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 1
	store i64 %5, i64* %7
	%8 = load {i32, i64}, {i32, i64}* %1, align 8
	ret {i32, i64} %8
}

define %..rawptr @.__mem_set(%..rawptr %data, i32 %value, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i32 zeroinitializer, i32* %1
		store i32 %value, i32* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load i32, i32* %1, align 4
	; cast - cast
	%5 = trunc i32 %4 to i8
	%6 = load i64, i64* %2, align 8
	call ccc void @llvm.memset.p0i8.i64(%..rawptr %3, i8 %5, i64 %6, i32 1, i1 false)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %7
}

define %..rawptr @.__mem_zero(%..rawptr %data, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %len, i64* %1
	; ReturnStmt
	%2 = load %..rawptr, %..rawptr* %0, align 8
	%3 = load i64, i64* %1, align 8
	%4 = call %..rawptr @.__mem_set(%..rawptr %2, i32 0, i64 %3)
	ret %..rawptr %4
}

define %..rawptr @.__mem_copy(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	call ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr %3, %..rawptr %4, i64 %5, i32 1, i1 false)
	; ReturnStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %6
}

define %..rawptr @.__mem_copy_non_overlapping(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	call ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr %3, %..rawptr %4, i64 %5, i32 1, i1 false)
	; ReturnStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %6
}

define i64 @.__mem_compare(i8* %a, i8* %b, i64 %n) {
decls-0:
	%0 = alloca i8*, align 8
	%1 = alloca i8*, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	store i8* zeroinitializer, i8** %0
		store i8* %a, i8** %0
	store i8* zeroinitializer, i8** %1
		store i8* %b, i8** %1
	store i64 zeroinitializer, i64* %2
		store i64 %n, i64* %2
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %3
		store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-1

for.interval.loop-1:
	%6 = load i64, i64* %2, align 8
	%7 = load i64, i64* %4, align 8
	%8 = icmp slt i64 %7, %6
	br i1 %8, label %for.interval.body-2, label %for.interval.done-8

for.interval.body-2:
	%9 = load i64, i64* %4, align 8
	%10 = load i64, i64* %5, align 8
	%11 = load i64, i64* %4, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %4
	%13 = load i64, i64* %5, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %5
	store i64 %9, i64* %3
	; MatchStmt
	%15 = load i8*, i8** %0, align 8
	%16 = load i64, i64* %3, align 8
	%17 = getelementptr inbounds i8, i8* %15, i64 %16
	%18 = getelementptr inbounds i8, i8* %17, i64 0
	%19 = load i8, i8* %18, align 1
	%20 = load i8*, i8** %1, align 8
	%21 = load i64, i64* %3, align 8
	%22 = getelementptr inbounds i8, i8* %20, i64 %21
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	%24 = load i8, i8* %23, align 1
	%25 = icmp ult i8 %19, %24
	%26 = icmp eq i1 true, %25
	br i1 %26, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%27 = load i8*, i8** %0, align 8
	%28 = load i64, i64* %3, align 8
	%29 = getelementptr inbounds i8, i8* %27, i64 %28
	%30 = getelementptr inbounds i8, i8* %29, i64 0
	%31 = load i8, i8* %30, align 1
	%32 = load i8*, i8** %1, align 8
	%33 = load i64, i64* %3, align 8
	%34 = getelementptr inbounds i8, i8* %32, i64 %33
	%35 = getelementptr inbounds i8, i8* %34, i64 0
	%36 = load i8, i8* %35, align 1
	%37 = icmp ugt i8 %31, %36
	%38 = icmp eq i1 true, %37
	br i1 %38, label %match.fall.body-6, label %match.case.next-5

match.case.body-4:
	; ReturnStmt
	ret i64 -1

match.case.next-5:
	br label %match.done-7

match.fall.body-6:
	; ReturnStmt
	ret i64 1

match.done-7:
	br label %for.interval.loop-1

for.interval.done-8:
	; ReturnStmt
	ret i64 0
}

define i1 @.__dynamic_array_reserve(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %capacity) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Raw_Dynamic_Array*, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %Allocator, align 8
	%8 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %capacity, i64* %3
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %4
		%9 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%10 = bitcast %..rawptr %9 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %10, %Raw_Dynamic_Array** %4
	; IfStmt
	%11 = load i64, i64* %3, align 8
	; SelectorExpr
	%12 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%13 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %12, i64 0
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %11, %15
	br i1 %16, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 true

if.done-2:
	call void @.__check_context()
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%17 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%18 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %18, i64 0, i32 3
	%20 = getelementptr inbounds %Allocator, %Allocator* %19, i64 0, i32 0
	%21 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %20, align 8
	%22 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %21, zeroinitializer
	br i1 %22, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%23 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%24 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %23, i64 0
	%25 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %24, i64 0, i32 3
	; SelectorExpr
	%26 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%27 = load %Allocator, %Allocator* %26, align 8
	store %Allocator %27, %Allocator* %25
	br label %if.done-4

if.done-4:
	; assert
	; SelectorExpr
	; SelectorExpr
	%28 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%29 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %28, i64 0
	%30 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %29, i64 0, i32 3
	%31 = getelementptr inbounds %Allocator, %Allocator* %30, i64 0, i32 0
	%32 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %31, align 8
	%33 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %32, zeroinitializer
	%34 = icmp eq i1 %33, false
	br i1 %34, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$8, i64 0, i32 0), i64 26}, i64 425, i64 25, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$9, i64 0, i32 0), i64 32})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; old_size
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%35 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%36 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %35, i64 0
	%37 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %36, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = load i64, i64* %1, align 8
	%40 = mul i64 %38, %39
	store i64 %40, i64* %5
	; new_size
	store i64 zeroinitializer, i64* %6
		%41 = load i64, i64* %3, align 8
	%42 = load i64, i64* %1, align 8
	%43 = mul i64 %41, %42
	store i64 %43, i64* %6
	; allocator
	store %Allocator zeroinitializer, %Allocator* %7
		; SelectorExpr
	%44 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%45 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %44, i64 0
	%46 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %45, i64 0, i32 3
	%47 = load %Allocator, %Allocator* %46, align 8
	store %Allocator %47, %Allocator* %7
	; new_data
	store %..rawptr zeroinitializer, %..rawptr* %8
		; SelectorExpr
	%48 = getelementptr inbounds %Allocator, %Allocator* %7, i64 0, i32 0
	%49 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %48, align 8
	; SelectorExpr
	%50 = getelementptr inbounds %Allocator, %Allocator* %7, i64 0, i32 1
	%51 = load %..rawptr, %..rawptr* %50, align 8
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %2, align 8
	; SelectorExpr
	%54 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%55 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %54, i64 0
	%56 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %55, i64 0, i32 0
	%57 = load %..rawptr, %..rawptr* %56, align 8
	%58 = load i64, i64* %5, align 8
	%59 = call %..rawptr %49(%..rawptr %51, i8 3, i64 %52, i64 %53, %..rawptr %57, i64 %58, i64 0)
	store %..rawptr %59, %..rawptr* %8
	; IfStmt
	%60 = load %..rawptr, %..rawptr* %8, align 8
	%61 = icmp eq %..rawptr %60, zeroinitializer
	br i1 %61, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i1 false

if.done-8:
	; AssignStmt
	; SelectorExpr
	%62 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%63 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %62, i64 0
	%64 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %63, i64 0, i32 0
	%65 = load %..rawptr, %..rawptr* %8, align 8
	store %..rawptr %65, %..rawptr* %64
	; AssignStmt
	; SelectorExpr
	%66 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%67 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %66, i64 0
	%68 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %67, i64 0, i32 2
	%69 = load i64, i64* %3, align 8
	store i64 %69, i64* %68
	; ReturnStmt
	ret i1 true
}

define i64 @.__dynamic_array_append(%..rawptr %array_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca i64, align 8
	%5 = alloca %Raw_Dynamic_Array*, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %items, %..rawptr* %3
	store i64 zeroinitializer, i64* %4
		store i64 %item_count, i64* %4
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %5
		%9 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%10 = bitcast %..rawptr %9 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %10, %Raw_Dynamic_Array** %5
	; IfStmt
	%11 = load i64, i64* %4, align 8
	%12 = icmp sle i64 %11, 0
	br i1 %12, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%13 = load %..rawptr, %..rawptr* %3, align 8
	%14 = icmp eq %..rawptr %13, zeroinitializer
	br i1 %14, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%15 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%16 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %15, i64 0
	%17 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %16, i64 0, i32 1
	%18 = load i64, i64* %17, align 8
	ret i64 %18

if.done-3:
	; ok
	store i1 zeroinitializer, i1* %6
		store i1 true, i1* %6
	; IfStmt
	; SelectorExpr
	%19 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%20 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %20, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	; SelectorExpr
	%23 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%24 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %23, i64 0
	%25 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %24, i64 0, i32 1
	%26 = load i64, i64* %25, align 8
	%27 = load i64, i64* %4, align 8
	%28 = add i64 %26, %27
	%29 = icmp sle i64 %22, %28
	br i1 %29, label %if.then-4, label %if.done-5

if.then-4:
	; capacity
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%30 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%31 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %30, i64 0
	%32 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %31, i64 0, i32 2
	%33 = load i64, i64* %32, align 8
	%34 = mul i64 2, %33
	; max
	%35 = load i64, i64* %4, align 8
	%36 = icmp sgt i64 8, %35
	%37 = select i1 %36, i64 8, i64 %35
	%38 = add i64 %34, %37
	store i64 %38, i64* %7
	; AssignStmt
	%39 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%40 = load i64, i64* %1, align 8
	%41 = load i64, i64* %2, align 8
	%42 = load i64, i64* %7, align 8
	%43 = bitcast %Raw_Dynamic_Array* %39 to %..rawptr
	%44 = call i1 @.__dynamic_array_reserve(%..rawptr %43, i64 %40, i64 %41, i64 %42)
	store i1 %44, i1* %6
	br label %if.done-5

if.done-5:
	; IfStmt
	%45 = load i1, i1* %6, align 1
	br i1 %45, label %if.done-7, label %if.then-6

if.then-6:
	; ReturnStmt
	; SelectorExpr
	%46 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%47 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %46, i64 0
	%48 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %47, i64 0, i32 1
	%49 = load i64, i64* %48, align 8
	ret i64 %49

if.done-7:
	; data
	store i8* zeroinitializer, i8** %8
		; SelectorExpr
	%50 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%51 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %50, i64 0
	%52 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %51, i64 0, i32 0
	%53 = load %..rawptr, %..rawptr* %52, align 8
	; cast - cast
	%54 = bitcast %..rawptr %53 to i8*
	store i8* %54, i8** %8
	; assert
	%55 = load i8*, i8** %8, align 8
	%56 = icmp ne i8* %55, zeroinitializer
	%57 = icmp eq i1 %56, false
	br i1 %57, label %builtin.assert.err-8, label %builtin.assert.done-9

builtin.assert.err-8:
	call void @.__assert(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$a, i64 0, i32 0), i64 26}, i64 461, i64 9, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$b, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-9

builtin.assert.done-9:
	; SelectorExpr
	%58 = load i8*, i8** %8, align 8
	%59 = load i64, i64* %1, align 8
	; SelectorExpr
	%60 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%61 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	%64 = mul i64 %59, %63
	%65 = getelementptr inbounds i8, i8* %58, i64 %64
	%66 = load %..rawptr, %..rawptr* %3, align 8
	%67 = load i64, i64* %1, align 8
	%68 = load i64, i64* %4, align 8
	%69 = mul i64 %67, %68
	%70 = bitcast i8* %65 to %..rawptr
	%71 = call %..rawptr @.mem-5.copy(%..rawptr %70, %..rawptr %66, i64 %69)
	; AssignStmt
	; SelectorExpr
	%72 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%73 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %72, i64 0
	%74 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %73, i64 0, i32 1
	%75 = load i64, i64* %4, align 8
	%76 = load i64, i64* %74, align 8
	%77 = add i64 %76, %75
	store i64 %77, i64* %74
	; ReturnStmt
	; SelectorExpr
	%78 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%79 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %78, i64 0
	%80 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %79, i64 0, i32 1
	%81 = load i64, i64* %80, align 8
	ret i64 %81
}

define i64 @.__dynamic_array_append_nothing(%..rawptr %array_, i64 %elem_size, i64 %elem_align) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %Raw_Dynamic_Array*, align 8
	%4 = alloca i1, align 1
	%5 = alloca i64, align 8
	%6 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %3
		%7 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%8 = bitcast %..rawptr %7 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %8, %Raw_Dynamic_Array** %3
	; ok
	store i1 zeroinitializer, i1* %4
		store i1 true, i1* %4
	; IfStmt
	; SelectorExpr
	%9 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%10 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %9, i64 0
	%11 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %10, i64 0, i32 2
	%12 = load i64, i64* %11, align 8
	; SelectorExpr
	%13 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0
	%15 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	%17 = add i64 %16, 1
	%18 = icmp sle i64 %12, %17
	br i1 %18, label %if.then-1, label %if.done-2

if.then-1:
	; capacity
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%19 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%20 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %20, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	%23 = mul i64 2, %22
	%24 = add i64 %23, 8
	store i64 %24, i64* %5
	; AssignStmt
	%25 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%26 = load i64, i64* %1, align 8
	%27 = load i64, i64* %2, align 8
	%28 = load i64, i64* %5, align 8
	%29 = bitcast %Raw_Dynamic_Array* %25 to %..rawptr
	%30 = call i1 @.__dynamic_array_reserve(%..rawptr %29, i64 %26, i64 %27, i64 %28)
	store i1 %30, i1* %4
	br label %if.done-2

if.done-2:
	; IfStmt
	%31 = load i1, i1* %4, align 1
	br i1 %31, label %if.done-4, label %if.then-3

if.then-3:
	; ReturnStmt
	; SelectorExpr
	%32 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%33 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %33, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	ret i64 %35

if.done-4:
	; data
	store i8* zeroinitializer, i8** %6
		; SelectorExpr
	%36 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%37 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %36, i64 0
	%38 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %37, i64 0, i32 0
	%39 = load %..rawptr, %..rawptr* %38, align 8
	; cast - cast
	%40 = bitcast %..rawptr %39 to i8*
	store i8* %40, i8** %6
	; assert
	%41 = load i8*, i8** %6, align 8
	%42 = icmp ne i8* %41, zeroinitializer
	%43 = icmp eq i1 %42, false
	br i1 %43, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$c, i64 0, i32 0), i64 26}, i64 480, i64 9, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$d, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; SelectorExpr
	%44 = load i8*, i8** %6, align 8
	%45 = load i64, i64* %1, align 8
	; SelectorExpr
	%46 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%47 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %46, i64 0
	%48 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %47, i64 0, i32 1
	%49 = load i64, i64* %48, align 8
	%50 = mul i64 %45, %49
	%51 = getelementptr inbounds i8, i8* %44, i64 %50
	%52 = load i64, i64* %1, align 8
	%53 = bitcast i8* %51 to %..rawptr
	%54 = call %..rawptr @.mem-5.zero(%..rawptr %53, i64 %52)
	; SelectorExpr
	%55 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%56 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %55, i64 0
	%57 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %56, i64 0, i32 1
	%58 = load i64, i64* %57, align 8
	%59 = add i64 %58, 1
	store i64 %59, i64* %57
	; ReturnStmt
	; SelectorExpr
	%60 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%61 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	ret i64 %63
}

define i64 @.__slice_append(%..rawptr %slice_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca i64, align 8
	%5 = alloca %Raw_Slice*, align 8
	%6 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %slice_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %items, %..rawptr* %3
	store i64 zeroinitializer, i64* %4
		store i64 %item_count, i64* %4
	; slice
	store %Raw_Slice* zeroinitializer, %Raw_Slice** %5
		%7 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%8 = bitcast %..rawptr %7 to %Raw_Slice*
	store %Raw_Slice* %8, %Raw_Slice** %5
	; IfStmt
	%9 = load i64, i64* %4, align 8
	%10 = icmp sle i64 %9, 0
	br i1 %10, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%11 = load %..rawptr, %..rawptr* %3, align 8
	%12 = icmp eq %..rawptr %11, zeroinitializer
	br i1 %12, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%13 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%14 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %13, i64 0
	%15 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	ret i64 %16

if.done-3:
	; AssignStmt
	; min
	; SelectorExpr
	%17 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%18 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %17, i64 0
	%19 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	; SelectorExpr
	%21 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%22 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %21, i64 0
	%23 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %22, i64 0, i32 1
	%24 = load i64, i64* %23, align 8
	%25 = sub i64 %20, %24
	%26 = load i64, i64* %4, align 8
	%27 = icmp slt i64 %25, %26
	%28 = select i1 %27, i64 %25, i64 %26
	store i64 %28, i64* %4
	; IfStmt
	%29 = load i64, i64* %4, align 8
	%30 = icmp sgt i64 %29, 0
	br i1 %30, label %if.then-4, label %if.done-7

if.then-4:
	; data
	store i8* zeroinitializer, i8** %6
		; SelectorExpr
	%31 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%32 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %31, i64 0
	%33 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %32, i64 0, i32 0
	%34 = load %..rawptr, %..rawptr* %33, align 8
	; cast - cast
	%35 = bitcast %..rawptr %34 to i8*
	store i8* %35, i8** %6
	; assert
	%36 = load i8*, i8** %6, align 8
	%37 = icmp ne i8* %36, zeroinitializer
	%38 = icmp eq i1 %37, false
	br i1 %38, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$e, i64 0, i32 0), i64 26}, i64 497, i64 10, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$f, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; SelectorExpr
	%39 = load i8*, i8** %6, align 8
	%40 = load i64, i64* %1, align 8
	; SelectorExpr
	%41 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%42 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %41, i64 0
	%43 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	%45 = mul i64 %40, %44
	%46 = getelementptr inbounds i8, i8* %39, i64 %45
	%47 = load %..rawptr, %..rawptr* %3, align 8
	%48 = load i64, i64* %1, align 8
	%49 = load i64, i64* %4, align 8
	%50 = mul i64 %48, %49
	%51 = bitcast i8* %46 to %..rawptr
	%52 = call %..rawptr @.mem-5.copy(%..rawptr %51, %..rawptr %47, i64 %50)
	; AssignStmt
	; SelectorExpr
	%53 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%54 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %53, i64 0
	%55 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %54, i64 0, i32 1
	%56 = load i64, i64* %4, align 8
	%57 = load i64, i64* %55, align 8
	%58 = add i64 %57, %56
	store i64 %58, i64* %55
	br label %if.done-7

if.done-7:
	; ReturnStmt
	; SelectorExpr
	%59 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%60 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %59, i64 0
	%61 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %60, i64 0, i32 1
	%62 = load i64, i64* %61, align 8
	ret i64 %62
}

define i64 @.__default_hash({i8*, i64, i64} %data) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%2 = call i64 @.hash-7.fnv64a({i8*, i64, i64} %1)
	ret i64 %2
}

define i64 @.__default_hash_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%3 = load %..string, %..string* %0, align 8
	; cast - cast
	%4 = extractvalue %..string %3, 0
	store i8* zeroinitializer, i8** %1
	store i8* %4, i8** %1
	%5 = extractvalue %..string %3, 1
	%6 = sub i64 %5, 0
	%7 = sub i64 %5, 0
	%8 = load i8*, i8** %1, align 8
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %6, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = call i64 @.__default_hash({i8*, i64, i64} %13)
	ret i64 %14
}

define i1 @.__dynamic_map_reserve(%__Map_Header %header, i64 %capacity) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca i1, align 1
	%3 = alloca i1, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %header, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %capacity, i64* %1
	; h
	store i1 zeroinitializer, i1* %2
		; SelectorExpr
	%4 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%5 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %4, align 8
	%6 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %5, i64 0
	%7 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %6, i64 0, i32 0
	%8 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %7, i64 0
	%9 = load i64, i64* %1, align 8
	%10 = bitcast {i64*, i64, i64,%Allocator}* %8 to %..rawptr
	%11 = call i1 @.__dynamic_array_reserve(%..rawptr %10, i64 8, i64 8, i64 %9)
	store i1 %11, i1* %2
	; e
	store i1 zeroinitializer, i1* %3
		; SelectorExpr
	%12 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%13 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %12, align 8
	%14 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %13, i64 0
	%15 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %14, i64 0, i32 1
	%16 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %15, i64 0
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%18 = load i64, i64* %17, align 8
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %1, align 8
	%22 = bitcast %Raw_Dynamic_Array* %16 to %..rawptr
	%23 = call i1 @.__dynamic_array_reserve(%..rawptr %22, i64 %18, i64 %20, i64 %21)
	store i1 %23, i1* %3
	; ReturnStmt
	%24 = load i1, i1* %2, align 1
	%25 = load i1, i1* %2, align 1
	br i1 %25, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%26 = load i1, i1* %3, align 1
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%27 = phi i1 [ false, %decls-0 ], [ %26, %logical.cmp.rhs-1 ]
	ret i1 %27
}

define void @.__dynamic_map_rehash(%__Map_Header %header, i64 %new_count) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca %__Map_Header, align 8
	%3 = alloca %Raw_Dynamic_Map, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %__Map_Entry_Header*, align 8
	%8 = alloca i8*, align 8
	%9 = alloca %__Map_Find_Result, align 8
	%10 = alloca i64, align 8
	%11 = alloca %__Map_Entry_Header*, align 8
	%12 = alloca %__Map_Entry_Header*, align 8
	%13 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %header, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %new_count, i64* %1
	; new_header
	store %__Map_Header zeroinitializer, %__Map_Header* %2
		%14 = load %__Map_Header, %__Map_Header* %0, align 8
	store %__Map_Header %14, %__Map_Header* %2
	; nm
	store %Raw_Dynamic_Map zeroinitializer, %Raw_Dynamic_Map* %3
		; AssignStmt
	; SelectorExpr
	%15 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%16 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0
	store %Raw_Dynamic_Map* %16, %Raw_Dynamic_Map** %15
	; reserve
	; SelectorExpr
	%17 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%18 = load i64, i64* %1, align 8
	%19 = bitcast {i64*, i64, i64,%Allocator}* %17 to %..rawptr
	%20 = call i1 @.__dynamic_array_reserve(%..rawptr %19, i64 8, i64 8, i64 %18)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%21 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%22 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %21, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%23 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%24 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %23, i64 0, i32 2
	%25 = load i64, i64* %24, align 8
	store i64 %25, i64* %22
	; SelectorExpr
	%26 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 1
	%27 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %26, i64 0
	%28 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%29 = load i64, i64* %28, align 8
	%30 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%31 = load i64, i64* %30, align 8
	; SelectorExpr
	; SelectorExpr
	%32 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%33 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %32, align 8
	%34 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %33, i64 0
	%35 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %34, i64 0, i32 1
	%36 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %35, i64 0, i32 1
	%37 = load i64, i64* %36, align 8
	%38 = bitcast %Raw_Dynamic_Array* %27 to %..rawptr
	%39 = call i1 @.__dynamic_array_reserve(%..rawptr %38, i64 %29, i64 %31, i64 %37)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%40 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%41 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %40, i64 0, i32 1
	store i64 zeroinitializer, i64* %5
	store i64 -1, i64* %5
	br label %for.index.loop-1

for.index.loop-1:
	%42 = load i64, i64* %5, align 8
	%43 = add i64 %42, 1
	store i64 %43, i64* %5
	%44 = load i64, i64* %41, align 8
	%45 = icmp slt i64 %43, %44
	br i1 %45, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%46 = load i64, i64* %5, align 8
	store i64 %46, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%47 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%48 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %47, align 8
	%49 = extractvalue {i64*, i64, i64,%Allocator} %48, 0
	%50 = extractvalue {i64*, i64, i64,%Allocator} %48, 1
	%51 = load i64, i64* %4, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$10, i64 0, i32 0), i64 26}, i64 556, i64 13, i64 %51, i64 %50)
	%52 = getelementptr inbounds i64, i64* %49, i64 %51
	store i64 -1, i64* %52
	br label %for.index.loop-1

for.index.done-3:
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %6
		store i64 0, i64* %6
	br label %for.loop-4

for.loop-4:
	%53 = load i64, i64* %6, align 8
	; SelectorExpr
	; SelectorExpr
	%54 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 1
	%55 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %54, i64 0, i32 1
	%56 = load i64, i64* %55, align 8
	%57 = icmp slt i64 %53, %56
	br i1 %57, label %for.body-5, label %for.done-13

for.body-5:
	; entry_header
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %7
		%58 = load %__Map_Header, %__Map_Header* %2, align 8
	%59 = load i64, i64* %6, align 8
	%60 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %58, i64 %59)
	store %__Map_Entry_Header* %60, %__Map_Entry_Header** %7
	; data
	store i8* zeroinitializer, i8** %8
		%61 = load %__Map_Entry_Header*, %__Map_Entry_Header** %7, align 8
	; cast - cast
	%62 = bitcast %__Map_Entry_Header* %61 to i8*
	store i8* %62, i8** %8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%64 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %63, i64 0, i32 1
	%65 = load i64, i64* %64, align 8
	%66 = icmp eq i64 %65, 0
	br i1 %66, label %if.then-6, label %if.done-7

if.then-6:
	%67 = load %__Map_Header, %__Map_Header* %2, align 8
	call void @.__dynamic_map_grow(%__Map_Header %67)
	br label %if.done-7

if.done-7:
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %9
		%68 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%69 = load %__Map_Entry_Header*, %__Map_Entry_Header** %7, align 8
	%70 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %69, i64 0
	%71 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %70, i64 0, i32 0
	%72 = load %__Map_Key, %__Map_Key* %71, align 8
	%73 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %68, %__Map_Key %72)
	store %__Map_Find_Result %73, %__Map_Find_Result* %9
	; j
	store i64 zeroinitializer, i64* %10
		%74 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%75 = load %__Map_Entry_Header*, %__Map_Entry_Header** %7, align 8
	%76 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %75, i64 0
	%77 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %76, i64 0, i32 0
	%78 = load %__Map_Key, %__Map_Key* %77, align 8
	%79 = call i64 @.__dynamic_map_add_entry(%__Map_Header %74, %__Map_Key %78)
	store i64 %79, i64* %10
	; IfStmt
	; SelectorExpr
	%80 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %9, i64 0, i32 1
	%81 = load i64, i64* %80, align 8
	%82 = icmp slt i64 %81, 0
	br i1 %82, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%83 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%84 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %83, align 8
	%85 = extractvalue {i64*, i64, i64,%Allocator} %84, 0
	%86 = extractvalue {i64*, i64, i64,%Allocator} %84, 1
	; SelectorExpr
	%87 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %9, i64 0, i32 0
	%88 = load i64, i64* %87, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$11, i64 0, i32 0), i64 26}, i64 570, i64 17, i64 %88, i64 %86)
	%89 = getelementptr inbounds i64, i64* %85, i64 %88
	%90 = load i64, i64* %10, align 8
	store i64 %90, i64* %89
	br label %if.done-10

if.else-9:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %11
		%91 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%92 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %9, i64 0, i32 1
	%93 = load i64, i64* %92, align 8
	%94 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %91, i64 %93)
	store %__Map_Entry_Header* %94, %__Map_Entry_Header** %11
	; AssignStmt
	; SelectorExpr
	%95 = load %__Map_Entry_Header*, %__Map_Entry_Header** %11, align 8
	%96 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %95, i64 0
	%97 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %96, i64 0, i32 1
	%98 = load i64, i64* %10, align 8
	store i64 %98, i64* %97
	br label %if.done-10

if.done-10:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %12
		%99 = load %__Map_Header, %__Map_Header* %2, align 8
	%100 = load i64, i64* %10, align 8
	%101 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %99, i64 %100)
	store %__Map_Entry_Header* %101, %__Map_Entry_Header** %12
	; AssignStmt
	; SelectorExpr
	%102 = load %__Map_Entry_Header*, %__Map_Entry_Header** %12, align 8
	%103 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %102, i64 0
	%104 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %103, i64 0, i32 1
	; SelectorExpr
	%105 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %9, i64 0, i32 2
	%106 = load i64, i64* %105, align 8
	store i64 %106, i64* %104
	; ndata
	store i8* zeroinitializer, i8** %13
		%107 = load %__Map_Entry_Header*, %__Map_Entry_Header** %12, align 8
	; cast - cast
	%108 = bitcast %__Map_Entry_Header* %107 to i8*
	store i8* %108, i8** %13
	; SelectorExpr
	%109 = load i8*, i8** %13, align 8
	%110 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%111 = load i64, i64* %110, align 8
	%112 = getelementptr inbounds i8, i8* %109, i64 %111
	%113 = load i8*, i8** %8, align 8
	%114 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%115 = load i64, i64* %114, align 8
	%116 = getelementptr inbounds i8, i8* %113, i64 %115
	%117 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%118 = load i64, i64* %117, align 8
	%119 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%120 = load i64, i64* %119, align 8
	%121 = sub i64 %118, %120
	%122 = bitcast i8* %112 to %..rawptr
	%123 = bitcast i8* %116 to %..rawptr
	%124 = call %..rawptr @.mem-5.copy(%..rawptr %122, %..rawptr %123, i64 %121)
	; IfStmt
	%125 = load %__Map_Header, %__Map_Header* %2, align 8
	%126 = call i1 @.__dynamic_map_full(%__Map_Header %125)
	br i1 %126, label %if.then-11, label %if.done-12

if.then-11:
	%127 = load %__Map_Header, %__Map_Header* %2, align 8
	call void @.__dynamic_map_grow(%__Map_Header %127)
	br label %if.done-12

if.done-12:
	%128 = load i64, i64* %6, align 8
	%129 = add i64 %128, 1
	store i64 %129, i64* %6
	br label %for.loop-4

for.done-13:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%130 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%131 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %130, align 8
	%132 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %131, i64 0
	%133 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %132, i64 0, i32 0
	%134 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %133, i64 0, i32 3
	%135 = load %Allocator, %Allocator* %134, align 8
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%136 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%137 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %136, align 8
	%138 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %137, i64 0
	%139 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %138, i64 0, i32 0
	%140 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %139, i64 0, i32 0
	%141 = load i64*, i64** %140, align 8
	%142 = bitcast i64* %141 to %..rawptr
	call void @.free_ptr_with_allocator(%Allocator %135, %..rawptr %142)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%143 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%144 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %143, align 8
	%145 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %144, i64 0
	%146 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %145, i64 0, i32 1
	%147 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %146, i64 0, i32 3
	%148 = load %Allocator, %Allocator* %147, align 8
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%149 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%150 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %149, align 8
	%151 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %150, i64 0
	%152 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %151, i64 0, i32 1
	%153 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %152, i64 0, i32 0
	%154 = load %..rawptr, %..rawptr* %153, align 8
	call void @.free_ptr_with_allocator(%Allocator %148, %..rawptr %154)
	; AssignStmt
	; SelectorExpr
	%155 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%156 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %155, align 8
	%157 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %156, i64 0
	%158 = load %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, align 8
	store %Raw_Dynamic_Map %158, %Raw_Dynamic_Map* %157
	ret void
}

define %..rawptr @.__dynamic_map_get(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca i64, align 8
	%3 = alloca %__Map_Find_Result, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; index
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%6 = load %__Map_Header, %__Map_Header* %0, align 8
	%7 = load %__Map_Key, %__Map_Key* %1, align 8
	%8 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %6, %__Map_Key %7)
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %3
	store %__Map_Find_Result %8, %__Map_Find_Result* %3
	%9 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %3, i64 0, i32 2
	%10 = load i64, i64* %9, align 8
	store i64 %10, i64* %2
	; IfStmt
	%11 = load i64, i64* %2, align 8
	%12 = icmp sge i64 %11, 0
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; data
	store i8* zeroinitializer, i8** %4
		%13 = load %__Map_Header, %__Map_Header* %0, align 8
	%14 = load i64, i64* %2, align 8
	%15 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %13, i64 %14)
	; cast - cast
	%16 = bitcast %__Map_Entry_Header* %15 to i8*
	store i8* %16, i8** %4
	; val
	store i8* zeroinitializer, i8** %5
		%17 = load i8*, i8** %4, align 8
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%19 = load i64, i64* %18, align 8
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	store i8* %20, i8** %5
	; ReturnStmt
	%21 = load i8*, i8** %5, align 8
	%22 = bitcast i8* %21 to %..rawptr
	ret %..rawptr %22

if.done-2:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define void @.__dynamic_map_set(%__Map_Header %h, %__Map_Key %key, %..rawptr %value) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %..rawptr, align 8
	%3 = alloca i64, align 8
	%4 = alloca %__Map_Find_Result, align 8
	%5 = alloca %__Map_Entry_Header*, align 8
	%6 = alloca i8*, align 8
	%7 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	store %..rawptr zeroinitializer, %..rawptr* %2
		store %..rawptr %value, %..rawptr* %2
	; index
	store i64 zeroinitializer, i64* %3
		; IfStmt
	; SelectorExpr
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%9 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %8, align 8
	%10 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %9, i64 0
	%11 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %10, i64 0, i32 0
	%12 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %11, i64 0, i32 1
	%13 = load i64, i64* %12, align 8
	%14 = icmp eq i64 %13, 0
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	%15 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_grow(%__Map_Header %15)
	br label %if.done-2

if.done-2:
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %4
		%16 = load %__Map_Header, %__Map_Header* %0, align 8
	%17 = load %__Map_Key, %__Map_Key* %1, align 8
	%18 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %16, %__Map_Key %17)
	store %__Map_Find_Result %18, %__Map_Find_Result* %4
	; IfStmt
	; SelectorExpr
	%19 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sge i64 %20, 0
	br i1 %21, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%22 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 2
	%23 = load i64, i64* %22, align 8
	store i64 %23, i64* %3
	br label %if.done-8

if.else-4:
	; AssignStmt
	%24 = load %__Map_Header, %__Map_Header* %0, align 8
	%25 = load %__Map_Key, %__Map_Key* %1, align 8
	%26 = call i64 @.__dynamic_map_add_entry(%__Map_Header %24, %__Map_Key %25)
	store i64 %26, i64* %3
	; IfStmt
	; SelectorExpr
	%27 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	%29 = icmp sge i64 %28, 0
	br i1 %29, label %if.then-5, label %if.else-6

if.then-5:
	; entry
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %5
		%30 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%31 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 1
	%32 = load i64, i64* %31, align 8
	%33 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %30, i64 %32)
	store %__Map_Entry_Header* %33, %__Map_Entry_Header** %5
	; AssignStmt
	; SelectorExpr
	%34 = load %__Map_Entry_Header*, %__Map_Entry_Header** %5, align 8
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0
	%36 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %35, i64 0, i32 1
	%37 = load i64, i64* %3, align 8
	store i64 %37, i64* %36
	br label %if.done-7

if.else-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%38 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%39 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %38, align 8
	%40 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %39, i64 0
	%41 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %40, i64 0, i32 0
	%42 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %41, align 8
	%43 = extractvalue {i64*, i64, i64,%Allocator} %42, 0
	%44 = extractvalue {i64*, i64, i64,%Allocator} %42, 1
	; SelectorExpr
	%45 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 0
	%46 = load i64, i64* %45, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$12, i64 0, i32 0), i64 26}, i64 614, i64 16, i64 %46, i64 %44)
	%47 = getelementptr inbounds i64, i64* %43, i64 %46
	%48 = load i64, i64* %3, align 8
	store i64 %48, i64* %47
	br label %if.done-7

if.done-7:
	br label %if.done-8

if.done-8:
	; data
	store i8* zeroinitializer, i8** %6
		%49 = load %__Map_Header, %__Map_Header* %0, align 8
	%50 = load i64, i64* %3, align 8
	%51 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %49, i64 %50)
	; cast - cast
	%52 = bitcast %__Map_Entry_Header* %51 to i8*
	store i8* %52, i8** %6
	; val
	store i8* zeroinitializer, i8** %7
		%53 = load i8*, i8** %6, align 8
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%55 = load i64, i64* %54, align 8
	%56 = getelementptr inbounds i8, i8* %53, i64 %55
	store i8* %56, i8** %7
	; SelectorExpr
	%57 = load i8*, i8** %7, align 8
	%58 = load %..rawptr, %..rawptr* %2, align 8
	%59 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%60 = load i64, i64* %59, align 8
	%61 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%62 = load i64, i64* %61, align 8
	%63 = sub i64 %60, %62
	%64 = bitcast i8* %57 to %..rawptr
	%65 = call %..rawptr @.mem-5.copy(%..rawptr %64, %..rawptr %58, i64 %63)
	; IfStmt
	%66 = load %__Map_Header, %__Map_Header* %0, align 8
	%67 = call i1 @.__dynamic_map_full(%__Map_Header %66)
	br i1 %67, label %if.then-9, label %if.done-10

if.then-9:
	%68 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_grow(%__Map_Header %68)
	br label %if.done-10

if.done-10:
	ret void
}

define void @.__dynamic_map_grow(%__Map_Header %h) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	; new_count
	store i64 zeroinitializer, i64* %1
		; SelectorExpr
	; SelectorExpr
	%2 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%3 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %2, align 8
	%4 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0
	%5 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %4, i64 0, i32 1
	%6 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %5, i64 0, i32 1
	%7 = load i64, i64* %6, align 8
	%8 = mul i64 2, %7
	%9 = add i64 %8, 8
	store i64 %9, i64* %1
	%10 = load %__Map_Header, %__Map_Header* %0, align 8
	%11 = load i64, i64* %1, align 8
	call void @.__dynamic_map_rehash(%__Map_Header %10, i64 %11)
	ret void
}

define i1 @.__dynamic_map_full(%__Map_Header %h) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%1 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%2 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %1, align 8
	%3 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %2, i64 0
	%4 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%5 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %4, i64 0, i32 1
	%6 = load i64, i64* %5, align 8
	; cast - cast
	%7 = sitofp i64 %6 to double
	%8 = fmul double 0x3fe8000000000000, %7
	; cast - cast
	%9 = fptosi double %8 to i64
	; SelectorExpr
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%11 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %10, align 8
	%12 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %11, i64 0
	%13 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %12, i64 0, i32 1
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0, i32 1
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %9, %15
	ret i1 %16
}

define i1 @.__dynamic_map_hash_equal(%__Map_Header %h, %__Map_Key %a, %__Map_Key %b) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Key, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %a, %__Map_Key* %1
	store %__Map_Key zeroinitializer, %__Map_Key* %2
		store %__Map_Key %b, %__Map_Key* %2
	; IfStmt
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Key, %__Map_Key* %2, i64 0, i32 0
	%6 = load i64, i64* %5, align 8
	%7 = icmp eq i64 %4, %6
	br i1 %7, label %if.then-1, label %if.done-4

if.then-1:
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 1
	%9 = load i1, i1* %8, align 1
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 1
	%11 = load %..string, %..string* %10, align 8
	; SelectorExpr
	%12 = getelementptr inbounds %__Map_Key, %__Map_Key* %2, i64 0, i32 1
	%13 = load %..string, %..string* %12, align 8
	%14 = call i1 @.__string_eq(%..string %11, %..string %13)
	ret i1 %14

if.done-3:
	; ReturnStmt
	ret i1 true

if.done-4:
	; ReturnStmt
	ret i1 false
}

define %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Find_Result, align 8
	%3 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %2
		store %__Map_Find_Result {i64 -1, i64 -1, i64 -1}, %__Map_Find_Result* %2
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%4 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%5 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %4, align 8
	%6 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %5, i64 0
	%7 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %6, i64 0, i32 0
	%8 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %7, i64 0, i32 1
	%9 = load i64, i64* %8, align 8
	%10 = icmp sgt i64 %9, 0
	br i1 %10, label %if.then-1, label %if.done-7

if.then-1:
	; AssignStmt
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 0
	; SelectorExpr
	%12 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 0
	%13 = load i64, i64* %12, align 8
	; SelectorExpr
	; SelectorExpr
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%15 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %14, align 8
	%16 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %15, i64 0
	%17 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %16, i64 0, i32 0
	%18 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %17, i64 0, i32 1
	%19 = load i64, i64* %18, align 8
	; cast - cast
	%20 = bitcast i64 %19 to i64
	%21 = urem i64 %13, %20
	; cast - cast
	%22 = bitcast i64 %21 to i64
	store i64 %22, i64* %11
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	; IndexExpr
	; SelectorExpr
	%24 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%25 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %24, align 8
	%26 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %25, i64 0
	%27 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %26, i64 0, i32 0
	%28 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %27, align 8
	%29 = extractvalue {i64*, i64, i64,%Allocator} %28, 0
	%30 = extractvalue {i64*, i64, i64,%Allocator} %28, 1
	; SelectorExpr
	%31 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 0
	%32 = load i64, i64* %31, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$13, i64 0, i32 0), i64 26}, i64 653, i64 32, i64 %32, i64 %30)
	%33 = getelementptr inbounds i64, i64* %29, i64 %32
	%34 = load i64, i64* %33, align 8
	store i64 %34, i64* %23
	; ForStmt
	br label %for.loop-2

for.loop-2:
	; SelectorExpr
	%35 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = icmp sge i64 %36, 0
	br i1 %37, label %for.body-3, label %for.done-6

for.body-3:
	; entry
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
		%38 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%39 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%40 = load i64, i64* %39, align 8
	%41 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %38, i64 %40)
	store %__Map_Entry_Header* %41, %__Map_Entry_Header** %3
	; IfStmt
	%42 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%43 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%44 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %43, i64 0
	%45 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %44, i64 0, i32 0
	%46 = load %__Map_Key, %__Map_Key* %45, align 8
	%47 = load %__Map_Key, %__Map_Key* %1, align 8
	%48 = call i1 @.__dynamic_map_hash_equal(%__Map_Header %42, %__Map_Key %46, %__Map_Key %47)
	br i1 %48, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	%49 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	ret %__Map_Find_Result %49

if.done-5:
	; AssignStmt
	; SelectorExpr
	%50 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 1
	; SelectorExpr
	%51 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %50
	; AssignStmt
	; SelectorExpr
	%53 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	; SelectorExpr
	%54 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%55 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %54, i64 0
	%56 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %55, i64 0, i32 1
	%57 = load i64, i64* %56, align 8
	store i64 %57, i64* %53
	br label %for.loop-2

for.done-6:
	br label %if.done-7

if.done-7:
	; ReturnStmt
	%58 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	ret %__Map_Find_Result %58
}

define i64 @.__dynamic_map_add_entry(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; prev
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%6 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %5, align 8
	%7 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %6, i64 0
	%8 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %7, i64 0, i32 1
	%9 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	store i64 %10, i64* %2
	; c
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %13, i64 0, i32 1
	%15 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %14, i64 0
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%17 = load i64, i64* %16, align 8
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%19 = load i64, i64* %18, align 8
	%20 = bitcast %Raw_Dynamic_Array* %15 to %..rawptr
	%21 = call i64 @.__dynamic_array_append_nothing(%..rawptr %20, i64 %17, i64 %19)
	store i64 %21, i64* %3
	; IfStmt
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %2, align 8
	%24 = icmp ne i64 %22, %23
	br i1 %24, label %if.then-1, label %if.done-2

if.then-1:
	; end
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %4
		%25 = load %__Map_Header, %__Map_Header* %0, align 8
	%26 = load i64, i64* %3, align 8
	%27 = sub i64 %26, 1
	%28 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %25, i64 %27)
	store %__Map_Entry_Header* %28, %__Map_Entry_Header** %4
	; AssignStmt
	; SelectorExpr
	%29 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%30 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %29, i64 0
	%31 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %30, i64 0, i32 0
	%32 = load %__Map_Key, %__Map_Key* %1, align 8
	store %__Map_Key %32, %__Map_Key* %31
	; AssignStmt
	; SelectorExpr
	%33 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%34 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %33, i64 0
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0, i32 1
	store i64 -1, i64* %35
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%36 = load i64, i64* %2, align 8
	ret i64 %36
}

define void @.__dynamic_map_delete(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Find_Result, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %2
		%3 = load %__Map_Header, %__Map_Header* %0, align 8
	%4 = load %__Map_Key, %__Map_Key* %1, align 8
	%5 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %3, %__Map_Key %4)
	store %__Map_Find_Result %5, %__Map_Find_Result* %2
	; IfStmt
	; SelectorExpr
	%6 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%7 = load i64, i64* %6, align 8
	%8 = icmp sge i64 %7, 0
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	%9 = load %__Map_Header, %__Map_Header* %0, align 8
	%10 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	call void @.__dynamic_map_erase(%__Map_Header %9, %__Map_Find_Result %10)
	br label %if.done-2

if.done-2:
	ret void
}

define %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %h, i64 %index) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %index, i64* %1
	; data
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%4 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %3, align 8
	%5 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %4, i64 0
	%6 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %5, i64 0, i32 1
	%7 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %6, i64 0, i32 0
	%8 = load %..rawptr, %..rawptr* %7, align 8
	; cast - cast
	%9 = bitcast %..rawptr %8 to i8*
	%10 = load i64, i64* %1, align 8
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%12 = load i64, i64* %11, align 8
	%13 = mul i64 %10, %12
	%14 = getelementptr inbounds i8, i8* %9, i64 %13
	store i8* %14, i8** %2
	; ReturnStmt
	%15 = load i8*, i8** %2, align 8
	; cast - cast
	%16 = bitcast i8* %15 to %__Map_Entry_Header*
	ret %__Map_Entry_Header* %16
}

define void @.__dynamic_map_erase(%__Map_Header %h, %__Map_Find_Result %fr) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Find_Result, align 8
	%2 = alloca %__Map_Entry_Header*, align 8
	%3 = alloca %__Map_Entry_Header*, align 8
	%4 = alloca %__Map_Entry_Header*, align 8
	%5 = alloca %__Map_Find_Result, align 8
	%6 = alloca %__Map_Entry_Header*, align 8
	%7 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %1
		store %__Map_Find_Result %fr, %__Map_Find_Result* %1
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 1
	%9 = load i64, i64* %8, align 8
	%10 = icmp slt i64 %9, 0
	br i1 %10, label %if.then-1, label %if.else-2

if.then-1:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %13, i64 0, i32 0
	%15 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %14, align 8
	%16 = extractvalue {i64*, i64, i64,%Allocator} %15, 0
	%17 = extractvalue {i64*, i64, i64,%Allocator} %15, 1
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 0
	%19 = load i64, i64* %18, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$14, i64 0, i32 0), i64 26}, i64 692, i64 15, i64 %19, i64 %17)
	%20 = getelementptr inbounds i64, i64* %16, i64 %19
	; SelectorExpr
	%21 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%22 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%23 = load i64, i64* %22, align 8
	%24 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %21, i64 %23)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %2
	store %__Map_Entry_Header* %24, %__Map_Entry_Header** %2
	%25 = load %__Map_Entry_Header*, %__Map_Entry_Header** %2, align 8
	%26 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %25, i64 0
	%27 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %26, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	store i64 %28, i64* %20
	br label %if.done-3

if.else-2:
	; AssignStmt
	; SelectorExpr
	%29 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%30 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 1
	%31 = load i64, i64* %30, align 8
	%32 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %29, i64 %31)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
	store %__Map_Entry_Header* %32, %__Map_Entry_Header** %3
	%33 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%34 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %33, i64 0
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0, i32 1
	; SelectorExpr
	%36 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%37 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %36, i64 %38)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %4
	store %__Map_Entry_Header* %39, %__Map_Entry_Header** %4
	%40 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%41 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %40, i64 0
	%42 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %41, i64 0, i32 1
	%43 = load i64, i64* %42, align 8
	store i64 %43, i64* %35
	br label %if.done-3

if.done-3:
	; IfStmt
	; SelectorExpr
	%44 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%45 = load i64, i64* %44, align 8
	; SelectorExpr
	; SelectorExpr
	%46 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%47 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %46, align 8
	%48 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %47, i64 0
	%49 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %48, i64 0, i32 1
	%50 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %49, i64 0, i32 1
	%51 = load i64, i64* %50, align 8
	%52 = sub i64 %51, 1
	%53 = icmp eq i64 %45, %52
	br i1 %53, label %if.then-4, label %if.done-5

if.then-4:
	; SelectorExpr
	; SelectorExpr
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%55 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %54, align 8
	%56 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %55, i64 0
	%57 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %56, i64 0, i32 1
	%58 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %57, i64 0, i32 1
	%59 = load i64, i64* %58, align 8
	%60 = sub i64 %59, 1
	store i64 %60, i64* %58
	br label %if.done-5

if.done-5:
	; SelectorExpr
	%61 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%63 = load i64, i64* %62, align 8
	%64 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %61, i64 %63)
	%65 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%66 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%67 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %66, align 8
	%68 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %67, i64 0
	%69 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %68, i64 0, i32 1
	%70 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %69, i64 0, i32 1
	%71 = load i64, i64* %70, align 8
	%72 = sub i64 %71, 1
	%73 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %65, i64 %72)
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%75 = load i64, i64* %74, align 8
	%76 = bitcast %__Map_Entry_Header* %64 to %..rawptr
	%77 = bitcast %__Map_Entry_Header* %73 to %..rawptr
	%78 = call %..rawptr @.mem-5.copy(%..rawptr %76, %..rawptr %77, i64 %75)
	; last
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %5
		%79 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%80 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%81 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%82 = load i64, i64* %81, align 8
	%83 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %80, i64 %82)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %6
	store %__Map_Entry_Header* %83, %__Map_Entry_Header** %6
	%84 = load %__Map_Entry_Header*, %__Map_Entry_Header** %6, align 8
	%85 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %84, i64 0
	%86 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %85, i64 0, i32 0
	%87 = load %__Map_Key, %__Map_Key* %86, align 8
	%88 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %79, %__Map_Key %87)
	store %__Map_Find_Result %88, %__Map_Find_Result* %5
	; IfStmt
	; SelectorExpr
	%89 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 1
	%90 = load i64, i64* %89, align 8
	%91 = icmp sge i64 %90, 0
	br i1 %91, label %if.then-6, label %if.else-7

if.then-6:
	; AssignStmt
	; SelectorExpr
	%92 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%93 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 1
	%94 = load i64, i64* %93, align 8
	%95 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %92, i64 %94)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %7
	store %__Map_Entry_Header* %95, %__Map_Entry_Header** %7
	%96 = load %__Map_Entry_Header*, %__Map_Entry_Header** %7, align 8
	%97 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %96, i64 0
	%98 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %97, i64 0, i32 1
	; SelectorExpr
	%99 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%100 = load i64, i64* %99, align 8
	store i64 %100, i64* %98
	br label %if.done-8

if.else-7:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%102 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %101, align 8
	%103 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %102, i64 0
	%104 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %103, i64 0, i32 0
	%105 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %104, align 8
	%106 = extractvalue {i64*, i64, i64,%Allocator} %105, 0
	%107 = extractvalue {i64*, i64, i64,%Allocator} %105, 1
	; SelectorExpr
	%108 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 0
	%109 = load i64, i64* %108, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$15, i64 0, i32 0), i64 26}, i64 705, i64 17, i64 %109, i64 %107)
	%110 = getelementptr inbounds i64, i64* %106, i64 %109
	; SelectorExpr
	%111 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%112 = load i64, i64* %111, align 8
	store i64 %112, i64* %110
	br label %if.done-8

if.done-8:
	ret void
}

define %..rawptr @.main-2.CreateWindow(%..rawptr %instance) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %windows-8.WndClassExA, align 4
	%2 = alloca i32, align 4
	%3 = alloca %windows-8.Rect, align 4
	%4 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %instance, %..rawptr* %0
	; wndClass
	store %windows-8.WndClassExA zeroinitializer, %windows-8.WndClassExA* %1
		; AssignStmt
	; SelectorExpr
	%5 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0, i32 0
	store i32 80, i32* %5
	; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0, i32 1
	store i32 35, i32* %6
	; AssignStmt
	; SelectorExpr
	%7 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0, i32 2
	store i64 (%..rawptr, i32, i64, i64)* @.main-2.WindowProc, i64 (%..rawptr, i32, i64, i64)** %7
	; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0, i32 5
	%9 = load %..rawptr, %..rawptr* %0, align 8
	store %..rawptr %9, %..rawptr* %8
	; AssignStmt
	; SelectorExpr
	%10 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0, i32 10
	; SelectorExpr
	%11 = call i8* @.strings-11.new_c_string(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$16, i64 0, i32 0), i64 10})
	store i8* %11, i8** %10
	; IfStmt
	%12 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0
	%13 = call ccc i16 @RegisterClassExA(%windows-8.WndClassExA* %12)
	%14 = icmp eq i16 %13, 0
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$17, i64 0, i32 0), i64 21}, i64 38, i64 15, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$18, i64 0, i32 0), i64 24})
	br label %if.done-2

if.done-2:
	; windowStyle
	store i32 zeroinitializer, i32* %2
		store i32 282001408, i32* %2
	; clientRect
	store %windows-8.Rect zeroinitializer, %windows-8.Rect* %3
		store %windows-8.Rect {i32 0, i32 0, i32 1280, i32 720}, %windows-8.Rect* %3
	%15 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %3, i64 0
	%16 = load i32, i32* %2, align 4
	%17 = call ccc i32 @AdjustWindowRect(%windows-8.Rect* %15, i32 %16, i32 0)
	; windowHandle
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	%18 = getelementptr inbounds %windows-8.WndClassExA, %windows-8.WndClassExA* %1, i64 0, i32 10
	%19 = load i8*, i8** %18, align 8
	; SelectorExpr
	%20 = call i8* @.strings-11.new_c_string(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$19, i64 0, i32 0), i64 4})
	%21 = load i32, i32* %2, align 4
	; SelectorExpr
	%22 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %3, i64 0, i32 2
	%23 = load i32, i32* %22, align 4
	; SelectorExpr
	%24 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %3, i64 0, i32 0
	%25 = load i32, i32* %24, align 4
	%26 = sub i32 %23, %25
	; SelectorExpr
	%27 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %3, i64 0, i32 3
	%28 = load i32, i32* %27, align 4
	; SelectorExpr
	%29 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %3, i64 0, i32 1
	%30 = load i32, i32* %29, align 4
	%31 = sub i32 %28, %30
	%32 = load %..rawptr, %..rawptr* %0, align 8
	%33 = call ccc %..rawptr @CreateWindowExA(i32 0, i8* %19, i8* %20, i32 %21, i32 -2147483648, i32 -2147483648, i32 %26, i32 %31, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr %32, %..rawptr zeroinitializer)
	store %..rawptr %33, %..rawptr* %4
	; IfStmt
	%34 = load %..rawptr, %..rawptr* %4, align 8
	%35 = icmp eq %..rawptr %34, zeroinitializer
	br i1 %35, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1a, i64 0, i32 0), i64 21}, i64 59, i64 15, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$1b, i64 0, i32 0), i64 23})
	br label %if.done-4

if.done-4:
	; ReturnStmt
	%36 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %36
}

define %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %vars, i1 %modern) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca i1, align 1
	%2 = alloca %windows-8.PIXELFORMATDESCRIPTOR, align 4
	%3 = alloca i32, align 4
	%4 = alloca %..rawptr, align 8
	%5 = alloca %..rawptr, align 8
	%6 = alloca %..rawptr, align 8
	%7 = alloca %..rawptr, align 8
	%8 = alloca %..rawptr, align 8
	%9 = alloca %jaze_wgl-15.TryGetExtensionList, align 8
	%10 = alloca {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, align 8
	%11 = alloca {%jaze_wgl-15.Attrib*, i64, i64}, align 8
	%12 = alloca [9 x %jaze_wgl-15.Attrib], align 4
	%13 = alloca {i32*, i64, i64,%Allocator}, align 8
	%14 = alloca i32, align 4
	%15 = alloca i32, align 4
	%16 = alloca i32, align 4
	%17 = alloca %windows-8.PIXELFORMATDESCRIPTOR, align 4
	%18 = alloca {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, align 8
	%19 = alloca {%jaze_wgl-15.Attrib*, i64, i64}, align 8
	%20 = alloca [4 x %jaze_wgl-15.Attrib], align 4
	%21 = alloca %..rawptr, align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	store i1 zeroinitializer, i1* %1
		store i1 %modern, i1* %1
	; IfStmt
	%22 = load i1, i1* %1, align 1
	br i1 %22, label %if.else-4, label %if.then-1

if.then-1:
	; pfd
	store %windows-8.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-8.PIXELFORMATDESCRIPTOR* %2
		store %windows-8.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-8.PIXELFORMATDESCRIPTOR* %2
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 0
	store i32 44, i32* %23
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 1
	store i32 1, i32* %24
	; AssignStmt
	; SelectorExpr
	%25 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 2
	store i32 37, i32* %25
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 4
	store i8 32, i8* %26
	; AssignStmt
	; SelectorExpr
	%27 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 11
	store i8 8, i8* %27
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 18
	store i8 24, i8* %28
	; format
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	; SelectorExpr
	%29 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%30 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %29, i64 0
	%31 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %30, i64 0, i32 4
	%32 = load %..rawptr, %..rawptr* %31, align 8
	%33 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0
	%34 = call ccc i32 @ChoosePixelFormat(%..rawptr %32, %windows-8.PIXELFORMATDESCRIPTOR* %33)
	store i32 %34, i32* %3
	; SelectorExpr
	; SelectorExpr
	%35 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%36 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %35, i64 0
	%37 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %36, i64 0, i32 4
	%38 = load %..rawptr, %..rawptr* %37, align 8
	%39 = load i32, i32* %3, align 4
	%40 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0
	%41 = call ccc i32 @DescribePixelFormat(%..rawptr %38, i32 %39, i32 44, %windows-8.PIXELFORMATDESCRIPTOR* %40)
	; SelectorExpr
	; SelectorExpr
	%42 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%43 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %42, i64 0
	%44 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %43, i64 0, i32 4
	%45 = load %..rawptr, %..rawptr* %44, align 8
	%46 = load i32, i32* %3, align 4
	%47 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %2, i64 0
	%48 = call ccc i32 @SetPixelFormat(%..rawptr %45, i32 %46, %windows-8.PIXELFORMATDESCRIPTOR* %47)
	; ctx
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	; SelectorExpr
	%49 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%50 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %49, i64 0
	%51 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %50, i64 0, i32 4
	%52 = load %..rawptr, %..rawptr* %51, align 8
	%53 = call ccc %..rawptr @wglCreateContext(%..rawptr %52)
	store %..rawptr %53, %..rawptr* %4
	; assert
	%54 = load %..rawptr, %..rawptr* %4, align 8
	%55 = icmp ne %..rawptr %54, zeroinitializer
	%56 = icmp eq i1 %55, false
	br i1 %56, label %builtin.assert.err-2, label %builtin.assert.done-3

builtin.assert.err-2:
	call void @.__assert(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1c, i64 0, i32 0), i64 21}, i64 80, i64 16, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1d, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-3

builtin.assert.done-3:
	; SelectorExpr
	; SelectorExpr
	%57 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %57, i64 0
	%59 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %58, i64 0, i32 4
	%60 = load %..rawptr, %..rawptr* %59, align 8
	%61 = load %..rawptr, %..rawptr* %4, align 8
	%62 = call ccc i32 @wglMakeCurrent(%..rawptr %60, %..rawptr %61)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%63 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%64 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %63, i64 0
	%65 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %64, i64 0, i32 0
	%66 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %65, i64 0, i32 7
	; SelectorExpr
	%67 = call i32 @.jaze_gl-14.GetInteger(i32 33307)
	store i32 %67, i32* %66
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%68 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%69 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %68, i64 0
	%70 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %69, i64 0, i32 0
	%71 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %70, i64 0, i32 9
	; SelectorExpr
	%72 = call i32 @.jaze_gl-14.GetInteger(i32 33308)
	store i32 %72, i32* %71
	; ReturnStmt
	%73 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %73

if.else-4:
	; wndHandle
	store %..rawptr zeroinitializer, %..rawptr* %5
		; SelectorExpr
	; SelectorExpr
	%74 = call i8* @.strings-11.new_c_string(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$1e, i64 0, i32 0), i64 6})
	; SelectorExpr
	%75 = call i8* @.strings-11.new_c_string(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1f, i64 0, i32 0), i64 13})
	%76 = call ccc %..rawptr @CreateWindowExA(i32 0, i8* %74, i8* %75, i32 0, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr zeroinitializer)
	store %..rawptr %76, %..rawptr* %5
	; assert
	%77 = load %..rawptr, %..rawptr* %5, align 8
	%78 = icmp ne %..rawptr %77, zeroinitializer
	%79 = icmp eq i1 %78, false
	br i1 %79, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$20, i64 0, i32 0), i64 21}, i64 95, i64 20, %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$21, i64 0, i32 0), i64 16})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; wndDc
	store %..rawptr zeroinitializer, %..rawptr* %6
		; SelectorExpr
	%80 = load %..rawptr, %..rawptr* %5, align 8
	%81 = call ccc %..rawptr @GetDC(%..rawptr %80)
	store %..rawptr %81, %..rawptr* %6
	; assert
	%82 = load %..rawptr, %..rawptr* %6, align 8
	%83 = icmp ne %..rawptr %82, zeroinitializer
	%84 = icmp eq i1 %83, false
	br i1 %84, label %builtin.assert.err-7, label %builtin.assert.done-8

builtin.assert.err-7:
	call void @.__assert(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$22, i64 0, i32 0), i64 21}, i64 97, i64 20, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$23, i64 0, i32 0), i64 12})
	br label %builtin.assert.done-8

builtin.assert.done-8:
	; temp
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	%85 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%86 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %85, i64 0
	%87 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %86, i64 0, i32 4
	%88 = load %..rawptr, %..rawptr* %87, align 8
	store %..rawptr %88, %..rawptr* %7
	; AssignStmt
	; SelectorExpr
	%89 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%90 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %89, i64 0
	%91 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %90, i64 0, i32 4
	%92 = load %..rawptr, %..rawptr* %6, align 8
	store %..rawptr %92, %..rawptr* %91
	; oldCtx
	store %..rawptr zeroinitializer, %..rawptr* %8
		%93 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%94 = call %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %93, i1 false)
	store %..rawptr %94, %..rawptr* %8
	; AssignStmt
	; SelectorExpr
	%95 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%96 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %95, i64 0
	%97 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %96, i64 0, i32 4
	%98 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %98, %..rawptr* %97
	; assert
	%99 = load %..rawptr, %..rawptr* %8, align 8
	%100 = icmp ne %..rawptr %99, zeroinitializer
	%101 = icmp eq i1 %100, false
	br i1 %101, label %builtin.assert.err-9, label %builtin.assert.done-10

builtin.assert.err-9:
	call void @.__assert(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$24, i64 0, i32 0), i64 21}, i64 103, i64 20, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$25, i64 0, i32 0), i64 13})
	br label %builtin.assert.done-10

builtin.assert.done-10:
	; extensions
	store %jaze_wgl-15.TryGetExtensionList zeroinitializer, %jaze_wgl-15.TryGetExtensionList* %9
		store %jaze_wgl-15.TryGetExtensionList zeroinitializer, %jaze_wgl-15.TryGetExtensionList* %9
	; SelectorExpr
	%102 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%103 = getelementptr inbounds i32 (%..rawptr, i32*, float*, i32, i32*, i32*)*, i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** @.ChoosePixelFormatARB, i64 0
	%104 = bitcast i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** %103 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %102, %..rawptr %104, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$26, i64 0, i32 0), i64 23})
	; SelectorExpr
	%105 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%106 = getelementptr inbounds %..rawptr (%..rawptr, %..rawptr, i32*)*, %..rawptr (%..rawptr, %..rawptr, i32*)** @.CreateContextAttribsARB, i64 0
	%107 = bitcast %..rawptr (%..rawptr, %..rawptr, i32*)** %106 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %105, %..rawptr %107, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$27, i64 0, i32 0), i64 26})
	; SelectorExpr
	%108 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%109 = getelementptr inbounds i8* (%..rawptr)*, i8* (%..rawptr)** @.GetExtensionsStringARB, i64 0
	%110 = bitcast i8* (%..rawptr)** %109 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %108, %..rawptr %110, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$28, i64 0, i32 0), i64 25})
	; SelectorExpr
	%111 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%112 = getelementptr inbounds i1 (i32)*, i1 (i32)** @.SwapIntervalEXT, i64 0
	%113 = bitcast i1 (i32)** %112 to %..rawptr
	call void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %111, %..rawptr %113, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$29, i64 0, i32 0), i64 18})
	; SelectorExpr
	%114 = load %..rawptr, %..rawptr* %8, align 8
	%115 = load %..rawptr, %..rawptr* %6, align 8
	%116 = load %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %9, align 8
	call void @.jaze_wgl-15.LoadExtensions(%..rawptr %114, %..rawptr %115, %jaze_wgl-15.TryGetExtensionList %116)
	; SelectorExpr
	%117 = call ccc i32 @wglMakeCurrent(%..rawptr zeroinitializer, %..rawptr zeroinitializer)
	; SelectorExpr
	%118 = load %..rawptr, %..rawptr* %8, align 8
	%119 = call ccc i32 @wglDeleteContext(%..rawptr %118)
	; SelectorExpr
	%120 = load %..rawptr, %..rawptr* %5, align 8
	%121 = load %..rawptr, %..rawptr* %6, align 8
	%122 = call ccc i32 @ReleaseDC(%..rawptr %120, %..rawptr %121)
	; SelectorExpr
	%123 = load %..rawptr, %..rawptr* %5, align 8
	%124 = call ccc i32 @DestroyWindow(%..rawptr %123)
	; attribs
	store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10
		; append
	%125 = bitcast {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10 to %..rawptr
	%126 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10, align 8
	; SelectorExpr
	%127 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.DRAW_TO_WINDOW_ARB(i1 true)
	; SelectorExpr
	%128 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.ACCELERATION_ARB(i32 8231)
	; SelectorExpr
	%129 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.SUPPORT_OPENGL_ARB(i1 true)
	; SelectorExpr
	%130 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.DOUBLE_BUFFER_ARB(i1 true)
	; SelectorExpr
	%131 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.PIXEL_TYPE_ARB(i32 8235)
	; SelectorExpr
	%132 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.COLOR_BITS_ARB(i32 32)
	; SelectorExpr
	%133 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.ALPHA_BITS_ARB(i32 8)
	; SelectorExpr
	%134 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.DEPTH_BITS_ARB(i32 24)
	; SelectorExpr
	%135 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.FRAMEBUFFER_SRGB_CAPABLE_ARB(i1 true)
	; variadic call argument generation
	store {%jaze_wgl-15.Attrib*, i64, i64} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64}* %11
	store [9 x %jaze_wgl-15.Attrib] zeroinitializer, [9 x %jaze_wgl-15.Attrib]* %12
	%136 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 0
	store %jaze_wgl-15.Attrib %127, %jaze_wgl-15.Attrib* %136
	%137 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 1
	store %jaze_wgl-15.Attrib %128, %jaze_wgl-15.Attrib* %137
	%138 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 2
	store %jaze_wgl-15.Attrib %129, %jaze_wgl-15.Attrib* %138
	%139 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 3
	store %jaze_wgl-15.Attrib %130, %jaze_wgl-15.Attrib* %139
	%140 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 4
	store %jaze_wgl-15.Attrib %131, %jaze_wgl-15.Attrib* %140
	%141 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 5
	store %jaze_wgl-15.Attrib %132, %jaze_wgl-15.Attrib* %141
	%142 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 6
	store %jaze_wgl-15.Attrib %133, %jaze_wgl-15.Attrib* %142
	%143 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 7
	store %jaze_wgl-15.Attrib %134, %jaze_wgl-15.Attrib* %143
	%144 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 8
	store %jaze_wgl-15.Attrib %135, %jaze_wgl-15.Attrib* %144
	%145 = getelementptr inbounds [9 x %jaze_wgl-15.Attrib], [9 x %jaze_wgl-15.Attrib]* %12, i64 0, i32 0
	%146 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, i64 0, i32 0
	store %jaze_wgl-15.Attrib* %145, %jaze_wgl-15.Attrib** %146
	%147 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, i64 0, i32 1
	store i64 9, i64* %147
	%148 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, i64 0, i32 2
	store i64 9, i64* %148
	%149 = load {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %11, align 8
	%150 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %149, 0
	%151 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %149, 1
	%152 = bitcast %jaze_wgl-15.Attrib* %150 to %..rawptr
	%153 = call i64 @.__dynamic_array_append(%..rawptr %125, i64 8, i64 4, %..rawptr %152, i64 %151)
	; attribArray
	store {i32*, i64, i64,%Allocator} zeroinitializer, {i32*, i64, i64,%Allocator}* %13
		; SelectorExpr
	%154 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %10, align 8
	%155 = call {i32*, i64, i64,%Allocator} @.jaze_wgl-15.PrepareAttribArray({%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %154)
	store {i32*, i64, i64,%Allocator} %155, {i32*, i64, i64,%Allocator}* %13
	; format
	store i32 zeroinitializer, i32* %14
		; formats
	store i32 zeroinitializer, i32* %15
		; success
	store i32 zeroinitializer, i32* %16
		; SelectorExpr
	%156 = load i32 (%..rawptr, i32*, float*, i32, i32*, i32*)*, i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** @.ChoosePixelFormatARB, align 8
	; SelectorExpr
	%157 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%158 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %157, i64 0
	%159 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %158, i64 0, i32 4
	%160 = load %..rawptr, %..rawptr* %159, align 8
	; SelectorExpr
	%161 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %13, i64 0, i32 0
	%162 = load i32*, i32** %161, align 8
	%163 = getelementptr inbounds i32, i32* %14, i64 0
	%164 = getelementptr inbounds i32, i32* %15, i64 0
	%165 = call ccc i32 %156(%..rawptr %160, i32* %162, float* zeroinitializer, i32 1, i32* %163, i32* %164)
	store i32 %165, i32* %16
	; IfStmt
	%166 = load i32, i32* %16, align 4
	%167 = icmp eq i32 %166, 1
	br i1 %167, label %cmp.and-11, label %if.done-13

cmp.and-11:
	%168 = load i32, i32* %15, align 4
	%169 = icmp eq i32 %168, 0
	br i1 %169, label %if.then-12, label %if.done-13

if.then-12:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$2a, i64 0, i32 0), i64 21}, i64 134, i64 19, %..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$2b, i64 0, i32 0), i64 35})
	br label %if.done-13

if.done-13:
	; pfd
	store %windows-8.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-8.PIXELFORMATDESCRIPTOR* %17
		; AssignStmt
	; SelectorExpr
	%170 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %17, i64 0, i32 1
	store i32 1, i32* %170
	; AssignStmt
	; SelectorExpr
	%171 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %17, i64 0, i32 0
	store i32 44, i32* %171
	; SelectorExpr
	; SelectorExpr
	%172 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%173 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %172, i64 0
	%174 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %173, i64 0, i32 4
	%175 = load %..rawptr, %..rawptr* %174, align 8
	%176 = load i32, i32* %14, align 4
	%177 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %17, i64 0
	%178 = call ccc i32 @DescribePixelFormat(%..rawptr %175, i32 %176, i32 44, %windows-8.PIXELFORMATDESCRIPTOR* %177)
	; SelectorExpr
	; SelectorExpr
	%179 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%180 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %179, i64 0
	%181 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %180, i64 0, i32 4
	%182 = load %..rawptr, %..rawptr* %181, align 8
	%183 = load i32, i32* %14, align 4
	%184 = getelementptr inbounds %windows-8.PIXELFORMATDESCRIPTOR, %windows-8.PIXELFORMATDESCRIPTOR* %17, i64 0
	%185 = call ccc i32 @SetPixelFormat(%..rawptr %182, i32 %183, %windows-8.PIXELFORMATDESCRIPTOR* %184)
	; createAttr
	store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18
		; append
	%186 = bitcast {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18 to %..rawptr
	%187 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18, align 8
	; SelectorExpr
	%188 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MAJOR_VERSION_ARB(i32 3)
	; SelectorExpr
	%189 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MINOR_VERSION_ARB(i32 3)
	; SelectorExpr
	%190 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_FLAGS_ARB(i32 1)
	; SelectorExpr
	%191 = call %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_PROFILE_MASK_ARB(i32 1)
	; variadic call argument generation
	store {%jaze_wgl-15.Attrib*, i64, i64} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64}* %19
	store [4 x %jaze_wgl-15.Attrib] zeroinitializer, [4 x %jaze_wgl-15.Attrib]* %20
	%192 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 0
	store %jaze_wgl-15.Attrib %188, %jaze_wgl-15.Attrib* %192
	%193 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 1
	store %jaze_wgl-15.Attrib %189, %jaze_wgl-15.Attrib* %193
	%194 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 2
	store %jaze_wgl-15.Attrib %190, %jaze_wgl-15.Attrib* %194
	%195 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 3
	store %jaze_wgl-15.Attrib %191, %jaze_wgl-15.Attrib* %195
	%196 = getelementptr inbounds [4 x %jaze_wgl-15.Attrib], [4 x %jaze_wgl-15.Attrib]* %20, i64 0, i32 0
	%197 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, i64 0, i32 0
	store %jaze_wgl-15.Attrib* %196, %jaze_wgl-15.Attrib** %197
	%198 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, i64 0, i32 1
	store i64 4, i64* %198
	%199 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, i64 0, i32 2
	store i64 4, i64* %199
	%200 = load {%jaze_wgl-15.Attrib*, i64, i64}, {%jaze_wgl-15.Attrib*, i64, i64}* %19, align 8
	%201 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %200, 0
	%202 = extractvalue {%jaze_wgl-15.Attrib*, i64, i64} %200, 1
	%203 = bitcast %jaze_wgl-15.Attrib* %201 to %..rawptr
	%204 = call i64 @.__dynamic_array_append(%..rawptr %186, i64 8, i64 4, %..rawptr %203, i64 %202)
	; AssignStmt
	; SelectorExpr
	%205 = load {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %18, align 8
	%206 = call {i32*, i64, i64,%Allocator} @.jaze_wgl-15.PrepareAttribArray({%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %205)
	store {i32*, i64, i64,%Allocator} %206, {i32*, i64, i64,%Allocator}* %13
	; ctx
	store %..rawptr zeroinitializer, %..rawptr* %21
		; SelectorExpr
	%207 = load %..rawptr (%..rawptr, %..rawptr, i32*)*, %..rawptr (%..rawptr, %..rawptr, i32*)** @.CreateContextAttribsARB, align 8
	; SelectorExpr
	%208 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%209 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %208, i64 0
	%210 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %209, i64 0, i32 4
	%211 = load %..rawptr, %..rawptr* %210, align 8
	; SelectorExpr
	%212 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %13, i64 0, i32 0
	%213 = load i32*, i32** %212, align 8
	%214 = call ccc %..rawptr %207(%..rawptr %211, %..rawptr zeroinitializer, i32* %213)
	store %..rawptr %214, %..rawptr* %21
	; assert
	%215 = load %..rawptr, %..rawptr* %21, align 8
	%216 = icmp ne %..rawptr %215, zeroinitializer
	%217 = icmp eq i1 %216, false
	br i1 %217, label %builtin.assert.err-14, label %builtin.assert.done-15

builtin.assert.err-14:
	call void @.__assert(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$2c, i64 0, i32 0), i64 21}, i64 152, i64 16, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$2d, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-15

builtin.assert.done-15:
	; SelectorExpr
	; SelectorExpr
	%218 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%219 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %218, i64 0
	%220 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %219, i64 0, i32 4
	%221 = load %..rawptr, %..rawptr* %220, align 8
	%222 = load %..rawptr, %..rawptr* %21, align 8
	%223 = call ccc i32 @wglMakeCurrent(%..rawptr %221, %..rawptr %222)
	; ReturnStmt
	%224 = load %..rawptr, %..rawptr* %21, align 8
	ret %..rawptr %224

if.done-16:
	unreachable
}

define ccc i64 @.main-2.WindowProc(%..rawptr %hwnd, i32 %msg, i64 %wparam, i64 %lparam) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i16, align 2
	%6 = alloca %imgui-10.GuiIO*, align 8
	%7 = alloca %..any, align 8
	%8 = alloca i32, align 4
	%9 = alloca %..any, align 8
	%10 = alloca i32, align 4
	%11 = alloca {%..any*, i64, i64}, align 8
	%12 = alloca [2 x %..any], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %hwnd, %..rawptr* %0
	store i32 zeroinitializer, i32* %1
		store i32 %msg, i32* %1
	store i64 zeroinitializer, i64* %2
		store i64 %wparam, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %lparam, i64* %3
	; result
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	; MatchStmt
	%13 = load i32, i32* %1, align 4
	%14 = icmp eq i32 %13, 2
	br i1 %14, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%15 = icmp eq i32 %13, 522
	br i1 %15, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	call ccc void @PostQuitMessage(i32 0)
	br label %match.done-17

match.case.next-3:
	%16 = icmp eq i32 %13, 5
	br i1 %16, label %match.fall.body-10, label %match.case.next-9

match.fall.body-4:
	; delta
	store i16 zeroinitializer, i16* %5
		; SelectorExpr
	%17 = load i64, i64* %2, align 8
	%18 = call i16 @.jaze_win32-13.HIWORD-1824837624416(i64 %17)
	; cast - cast
	%19 = bitcast i16 %18 to i16
	store i16 %19, i16* %5
	; IfStmt
	%20 = load i16, i16* %5, align 2
	%21 = icmp sgt i16 %20, 1
	br i1 %21, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 1
	%23 = load i32, i32* %22, align 4
	%24 = add i32 %23, 1
	store i32 %24, i32* %22
	br label %if.done-6

if.done-6:
	; IfStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 1
	br i1 %26, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 1
	%28 = load i32, i32* %27, align 4
	%29 = sub i32 %28, 1
	store i32 %29, i32* %27
	br label %if.done-8

if.done-8:
	; AssignStmt
	store i64 1, i64* %4
	br label %match.done-17

match.case.next-9:
	%30 = icmp eq i32 %13, 258
	br i1 %30, label %match.fall.body-16, label %match.case.next-15

match.fall.body-10:
	; SelectorExpr
	; SelectorExpr
	%31 = load i64, i64* %3, align 8
	%32 = call i16 @.jaze_win32-13.LOWORD-1824837625520(i64 %31)
	; cast - cast
	%33 = zext i16 %32 to i32
	; SelectorExpr
	%34 = load i64, i64* %3, align 8
	%35 = call i16 @.jaze_win32-13.HIWORD-1824837624784(i64 %34)
	; cast - cast
	%36 = zext i16 %35 to i32
	call ccc void @glViewport(i32 0, i32 0, i32 %33, i32 %36)
	; IfStmt
	%37 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	%38 = icmp ne %main-2.Win32Vars_t* %37, zeroinitializer
	br i1 %38, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%39 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	%40 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %39, i64 0
	%41 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %40, i64 0, i32 3
	%42 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %41, i64 0, i32 1, i32 0
	; SelectorExpr
	%43 = load i64, i64* %3, align 8
	%44 = call i16 @.jaze_win32-13.LOWORD-1824837625520(i64 %43)
	; cast - cast
	%45 = uitofp i16 %44 to float
	store float %45, float* %42
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%46 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	%47 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %46, i64 0
	%48 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %47, i64 0, i32 3
	%49 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %48, i64 0, i32 1, i32 1
	; SelectorExpr
	%50 = load i64, i64* %3, align 8
	%51 = call i16 @.jaze_win32-13.HIWORD-1824837624784(i64 %50)
	; cast - cast
	%52 = uitofp i16 %51 to float
	store float %52, float* %49
	br label %if.done-12

if.done-12:
	; io
	store %imgui-10.GuiIO* zeroinitializer, %imgui-10.GuiIO** %6
		; SelectorExpr
	%53 = call ccc %imgui-10.GuiIO* @igGetIO()
	store %imgui-10.GuiIO* %53, %imgui-10.GuiIO** %6
	; IfStmt
	; SelectorExpr
	%54 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %6, align 8
	%55 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %54, i64 0
	%56 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %55, i64 0, i32 22
	%57 = load void (%imgui-10.DrawData*)*, void (%imgui-10.DrawData*)** %56, align 8
	%58 = icmp ne void (%imgui-10.DrawData*)* %57, zeroinitializer
	br i1 %58, label %if.then-13, label %if.done-14

if.then-13:
	; SelectorExpr
	call void @.jaze_imgui-17.BeginNewFrame(double 0x0000000000000000)
	; SelectorExpr
	call ccc void @igSetNextWindowPosCenter(i32 0)
	; SelectorExpr
	call ccc void @igPushStyleVar(i32 0, float 0x3fe9999980000000)
	; SelectorExpr
	%59 = call i1 @.imgui-10.Begin(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2e, i64 0, i32 0), i64 6}, i1* zeroinitializer, i32 65)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%60 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	%61 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %60, i64 0
	%62 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %61, i64 0, i32 3
	%63 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %62, i64 0, i32 1, i32 0
	%64 = load float, float* %63, align 4
	; cast - cast
	%65 = fptosi float %64 to i32
	; SelectorExpr
	; SelectorExpr
	%66 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	%67 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %66, i64 0
	%68 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %67, i64 0, i32 3
	%69 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %68, i64 0, i32 1, i32 1
	%70 = load float, float* %69, align 4
	; cast - cast
	%71 = fptosi float %70 to i32
	store %..any zeroinitializer, %..any* %7
	store i32 zeroinitializer, i32* %8
	store i32 %65, i32* %8
	%72 = bitcast i32* %8 to %..rawptr
	%73 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%74 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%75 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %73, %Type_Info** %74
	store %..rawptr %72, %..rawptr* %75
	%76 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %9
	store i32 zeroinitializer, i32* %10
	store i32 %71, i32* %10
	%77 = bitcast i32* %10 to %..rawptr
	%78 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%79 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%80 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %78, %Type_Info** %79
	store %..rawptr %77, %..rawptr* %80
	%81 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %11
	store [2 x %..any] zeroinitializer, [2 x %..any]* %12
	%82 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 0
	store %..any %76, %..any* %82
	%83 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 1
	store %..any %81, %..any* %83
	%84 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 0
	%85 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 0
	store %..any* %84, %..any** %85
	%86 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 1
	store i64 2, i64* %86
	%87 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 2
	store i64 2, i64* %87
	%88 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %11, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2f, i64 0, i32 0), i64 6}, {%..any*, i64, i64} %88)
	; SelectorExpr
	call ccc void @igEnd()
	; SelectorExpr
	call ccc void @igPopStyleVar(i32 1)
	%89 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	call void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %89)
	; SelectorExpr
	call void @.jaze_gl-14.Clear(i32 16640)
	; SelectorExpr
	call ccc void @igRender()
	; SelectorExpr
	; SelectorExpr
	%90 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @GlobalWin32VarsPtr, align 8
	%91 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %90, i64 0
	%92 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %91, i64 0, i32 4
	%93 = load %..rawptr, %..rawptr* %92, align 8
	%94 = call ccc i32 @SwapBuffers(%..rawptr %93)
	br label %if.done-14

if.done-14:
	; AssignStmt
	store i64 1, i64* %4
	br label %match.done-17

match.case.next-15:
	; AssignStmt
	%95 = load %..rawptr, %..rawptr* %0, align 8
	%96 = load i32, i32* %1, align 4
	%97 = load i64, i64* %2, align 8
	%98 = load i64, i64* %3, align 8
	%99 = call ccc i64 @DefWindowProcA(%..rawptr %95, i32 %96, i64 %97, i64 %98)
	store i64 %99, i64* %4
	br label %match.done-17

match.fall.body-16:
	; SelectorExpr
	%100 = load i64, i64* %2, align 8
	; cast - cast
	%101 = trunc i64 %100 to i16
	call ccc void @ImGuiIO_AddInputCharacter(i16 %101)
	; AssignStmt
	store i64 1, i64* %4
	; break
	br label %match.done-17

match.done-17:
	; ReturnStmt
	%102 = load i64, i64* %4, align 8
	ret i64 %102
}

define ccc void @.main-2.OpenGLDebugCallback(i32 %source, i32 %type, i32 %id, i32 %severity, i32 %length, i8* %message, %..rawptr %userParam) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 8
	%4 = alloca i32, align 4
	%5 = alloca i8*, align 8
	%6 = alloca %..rawptr, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..string, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [4 x %..any], align 8
	store i32 zeroinitializer, i32* %0
		store i32 %source, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %type, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %id, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %severity, i32* %3
	store i32 zeroinitializer, i32* %4
		store i32 %length, i32* %4
	store i8* zeroinitializer, i8** %5
		store i8* %message, i8** %5
	store %..rawptr zeroinitializer, %..rawptr* %6
		store %..rawptr %userParam, %..rawptr* %6
	; SelectorExpr
	%14 = load i32, i32* %0, align 8
	%15 = load i32, i32* %1, align 8
	%16 = load i32, i32* %3, align 8
	; SelectorExpr
	%17 = load i8*, i8** %5, align 8
	%18 = call %..string @.strings-11.to_odin_string(i8* %17)
	store %..any zeroinitializer, %..any* %7
	%19 = bitcast i32* %0 to %..rawptr
	%20 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%21 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%22 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %20, %Type_Info** %21
	store %..rawptr %19, %..rawptr* %22
	%23 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%24 = bitcast i32* %1 to %..rawptr
	%25 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	%26 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%27 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %25, %Type_Info** %26
	store %..rawptr %24, %..rawptr* %27
	%28 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%29 = bitcast i32* %3 to %..rawptr
	%30 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	%31 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	store %..string zeroinitializer, %..string* %11
	store %..string %18, %..string* %11
	%34 = bitcast %..string* %11 to %..rawptr
	%35 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%36 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [4 x %..any] zeroinitializer, [4 x %..any]* %13
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 0
	store %..any %23, %..any* %39
	%40 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 1
	store %..any %28, %..any* %40
	%41 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 2
	store %..any %33, %..any* %41
	%42 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 3
	store %..any %38, %..any* %42
	%43 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 0
	%44 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %43, %..any** %44
	%45 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 4, i64* %45
	%46 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 4, i64* %46
	%47 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%48 = call i64 @.fmt-4.printf(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$30, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %47)
	ret void
}

define void @.main-2.ToggleFullscreen(%..rawptr %wnd) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca %jaze_win32-13.MONITORINFO, align 4
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %wnd, %..rawptr* %0
	; Style
	store i32 zeroinitializer, i32* %1
		; SelectorExpr
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = call ccc i64 @GetWindowLongPtrA(%..rawptr %3, i32 -16)
	; cast - cast
	%5 = trunc i64 %4 to i32
	store i32 %5, i32* %1
	; IfStmt
	%6 = load i32, i32* %1, align 4
	%7 = and i32 %6, 13565952
	%8 = icmp eq i32 %7, 13565952
	br i1 %8, label %if.then-1, label %if.else-2

if.then-1:
	; monitorInfo
	store %jaze_win32-13.MONITORINFO zeroinitializer, %jaze_win32-13.MONITORINFO* %2
		; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 0
	store i32 40, i32* %9
	; SelectorExpr
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = getelementptr inbounds %jaze_win32-13.WINDOWPLACEMENT, %jaze_win32-13.WINDOWPLACEMENT* @GlobalWindowPosition, i64 0
	%12 = call ccc i32 @GetWindowPlacement(%..rawptr %10, %jaze_win32-13.WINDOWPLACEMENT* %11)
	; SelectorExpr
	; SelectorExpr
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = call ccc %..rawptr @MonitorFromWindow(%..rawptr %13, i32 1)
	%15 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0
	%16 = call ccc i32 @GetMonitorInfoA(%..rawptr %14, %jaze_win32-13.MONITORINFO* %15)
	; SelectorExpr
	%17 = load %..rawptr, %..rawptr* %0, align 8
	%18 = load i32, i32* %1, align 4
	; cast - cast
	%19 = zext i32 %18 to i64
	%20 = and i64 %19, -13565953
	%21 = call ccc i64 @SetWindowLongPtrA(%..rawptr %17, i32 -16, i64 %20)
	; SelectorExpr
	%22 = load %..rawptr, %..rawptr* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%23 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%24 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %23, i64 0, i32 0
	%25 = load i32, i32* %24, align 4
	; SelectorExpr
	; SelectorExpr
	%26 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%27 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %26, i64 0, i32 1
	%28 = load i32, i32* %27, align 4
	; SelectorExpr
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%30 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %29, i64 0, i32 2
	%31 = load i32, i32* %30, align 4
	; SelectorExpr
	; SelectorExpr
	%32 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%33 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %32, i64 0, i32 0
	%34 = load i32, i32* %33, align 4
	%35 = sub i32 %31, %34
	; SelectorExpr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%37 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %36, i64 0, i32 3
	%38 = load i32, i32* %37, align 4
	; SelectorExpr
	; SelectorExpr
	%39 = getelementptr inbounds %jaze_win32-13.MONITORINFO, %jaze_win32-13.MONITORINFO* %2, i64 0, i32 1
	%40 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %39, i64 0, i32 1
	%41 = load i32, i32* %40, align 4
	%42 = sub i32 %38, %41
	call ccc void @SetWindowPos(%..rawptr %22, %..rawptr null, i32 %25, i32 %28, i32 %35, i32 %42, i32 544)
	br label %if.done-3

if.else-2:
	; SelectorExpr
	%43 = load %..rawptr, %..rawptr* %0, align 8
	%44 = load i32, i32* %1, align 4
	%45 = or i32 %44, 13565952
	; cast - cast
	%46 = zext i32 %45 to i64
	%47 = call ccc i64 @SetWindowLongPtrA(%..rawptr %43, i32 -16, i64 %46)
	; SelectorExpr
	%48 = load %..rawptr, %..rawptr* %0, align 8
	%49 = getelementptr inbounds %jaze_win32-13.WINDOWPLACEMENT, %jaze_win32-13.WINDOWPLACEMENT* @GlobalWindowPosition, i64 0
	%50 = call ccc i32 @SetWindowPlacement(%..rawptr %48, %jaze_win32-13.WINDOWPLACEMENT* %49)
	; SelectorExpr
	%51 = load %..rawptr, %..rawptr* %0, align 8
	call ccc void @SetWindowPos(%..rawptr %51, %..rawptr zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 551)
	br label %if.done-3

if.done-3:
	ret void
}

define void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %vars) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca {i1, i1}, align 1
	%2 = alloca %__Map_Header, align 8
	%3 = alloca %__Map_Key, align 8
	%4 = alloca %__Map_Header, align 8
	%5 = alloca %__Map_Key, align 8
	%6 = alloca i1, align 1
	%7 = alloca {i1, i1}, align 1
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i1, i1}, align 1
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca %__Map_Header, align 8
	%17 = alloca %__Map_Key, align 8
	%18 = alloca i1, align 1
	%19 = alloca {i1, i1}, align 1
	%20 = alloca %__Map_Header, align 8
	%21 = alloca %__Map_Key, align 8
	%22 = alloca %__Map_Header, align 8
	%23 = alloca %__Map_Key, align 8
	%24 = alloca i1, align 1
	%25 = alloca {i1, i1}, align 1
	%26 = alloca %__Map_Header, align 8
	%27 = alloca %__Map_Key, align 8
	%28 = alloca i1, align 1
	%29 = alloca {i1, i1}, align 1
	%30 = alloca %__Map_Header, align 8
	%31 = alloca %__Map_Key, align 8
	%32 = alloca %__Map_Header, align 8
	%33 = alloca %__Map_Key, align 8
	%34 = alloca {i1, i1}, align 1
	%35 = alloca %__Map_Header, align 8
	%36 = alloca %__Map_Key, align 8
	%37 = alloca i1, align 1
	%38 = alloca {i1, i1}, align 1
	%39 = alloca %__Map_Header, align 8
	%40 = alloca %__Map_Key, align 8
	%41 = alloca %__Map_Header, align 8
	%42 = alloca %__Map_Key, align 8
	%43 = alloca {i1, i1}, align 1
	%44 = alloca %__Map_Header, align 8
	%45 = alloca %__Map_Key, align 8
	%46 = alloca i1, align 1
	%47 = alloca {i1, i1}, align 1
	%48 = alloca %__Map_Header, align 8
	%49 = alloca %__Map_Key, align 8
	%50 = alloca %__Map_Header, align 8
	%51 = alloca %__Map_Key, align 8
	%52 = alloca {i1, i1}, align 1
	%53 = alloca %__Map_Header, align 8
	%54 = alloca %__Map_Key, align 8
	%55 = alloca i1, align 1
	%56 = alloca {i1, i1}, align 1
	%57 = alloca %__Map_Header, align 8
	%58 = alloca %__Map_Key, align 8
	%59 = alloca %__Map_Header, align 8
	%60 = alloca %__Map_Key, align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	; SelectorExpr
	%61 = call ccc i1 @igBeginMainMenuBar()
	; IfStmt
	; SelectorExpr
	%62 = call i1 @.imgui-10.BeginMenu(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$31, i64 0, i32 0), i64 4}, i1 true)
	br i1 %62, label %if.then-1, label %if.done-22

if.then-1:
	; IfStmt
	; SelectorExpr
	%63 = call i1 @.imgui-10.MenuItem(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$32, i64 0, i32 0), i64 11}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %63, label %if.then-2, label %if.done-5

if.then-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %1
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	%64 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%65 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %65, %Raw_Dynamic_Map** %64
	%66 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 1
	store i1 true, i1* %66
	%67 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 2
	store i64 40, i64* %67
	%68 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 3
	store i64 8, i64* %68
	%69 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 4
	store i64 32, i64* %69
	%70 = load %__Map_Header, %__Map_Header* %2, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %3
	%71 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 0
	store i64 2297942010048193939, i64* %71
	%72 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$33, i64 0, i32 0), i64 14}, %..string* %72
	%73 = load %__Map_Key, %__Map_Key* %3, align 8
	%74 = call %..rawptr @.__dynamic_map_get(%__Map_Header %70, %__Map_Key %73)
	%75 = icmp ne %..rawptr %74, null
	%76 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 1
	store i1 %75, i1* %76
	br i1 %75, label %map.get.then-3, label %map.get.done-4

map.get.then-3:
	%77 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 0
	%78 = bitcast %..rawptr %74 to i1*
	%79 = load i1, i1* %78, align 1
	store i1 %79, i1* %77
	br label %map.get.done-4

map.get.done-4:
	%80 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 0
	%81 = load i1, i1* %80, align 1
	%82 = xor i1 -1, %81
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	%83 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 0
	%84 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %84, %Raw_Dynamic_Map** %83
	%85 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 1
	store i1 true, i1* %85
	%86 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 2
	store i64 40, i64* %86
	%87 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 3
	store i64 8, i64* %87
	%88 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 4
	store i64 32, i64* %88
	%89 = load %__Map_Header, %__Map_Header* %4, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %5
	%90 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 0
	store i64 2297942010048193939, i64* %90
	%91 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$34, i64 0, i32 0), i64 14}, %..string* %91
	%92 = load %__Map_Key, %__Map_Key* %5, align 8
	store i1 zeroinitializer, i1* %6
	store i1 %82, i1* %6
	%93 = bitcast i1* %6 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %89, %__Map_Key %92, %..rawptr %93)
	br label %if.done-5

if.done-5:
	; IfStmt
	; SelectorExpr
	%94 = call i1 @.imgui-10.MenuItem(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$35, i64 0, i32 0), i64 13}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %94, label %if.then-6, label %if.done-9

if.then-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %7
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%95 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%96 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %96, %Raw_Dynamic_Map** %95
	%97 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %97
	%98 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %98
	%99 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %99
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %100
	%101 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%102 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 2202226828205582596, i64* %102
	%103 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$36, i64 0, i32 0), i64 16}, %..string* %103
	%104 = load %__Map_Key, %__Map_Key* %9, align 8
	%105 = call %..rawptr @.__dynamic_map_get(%__Map_Header %101, %__Map_Key %104)
	%106 = icmp ne %..rawptr %105, null
	%107 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 1
	store i1 %106, i1* %107
	br i1 %106, label %map.get.then-7, label %map.get.done-8

map.get.then-7:
	%108 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 0
	%109 = bitcast %..rawptr %105 to i1*
	%110 = load i1, i1* %109, align 1
	store i1 %110, i1* %108
	br label %map.get.done-8

map.get.done-8:
	%111 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 0
	%112 = load i1, i1* %111, align 1
	%113 = xor i1 -1, %112
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%114 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%115 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %115, %Raw_Dynamic_Map** %114
	%116 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %116
	%117 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %117
	%118 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %118
	%119 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %119
	%120 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%121 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 2202226828205582596, i64* %121
	%122 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$37, i64 0, i32 0), i64 16}, %..string* %122
	%123 = load %__Map_Key, %__Map_Key* %11, align 8
	store i1 zeroinitializer, i1* %12
	store i1 %113, i1* %12
	%124 = bitcast i1* %12 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %120, %__Map_Key %123, %..rawptr %124)
	br label %if.done-9

if.done-9:
	; IfStmt
	; SelectorExpr
	%125 = call i1 @.imgui-10.MenuItem(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$38, i64 0, i32 0), i64 16}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %125, label %if.then-10, label %if.done-13

if.then-10:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %13
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%126 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%127 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %127, %Raw_Dynamic_Map** %126
	%128 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %128
	%129 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %129
	%130 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %130
	%131 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %131
	%132 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%133 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 8221518982030458364, i64* %133
	%134 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$39, i64 0, i32 0), i64 14}, %..string* %134
	%135 = load %__Map_Key, %__Map_Key* %15, align 8
	%136 = call %..rawptr @.__dynamic_map_get(%__Map_Header %132, %__Map_Key %135)
	%137 = icmp ne %..rawptr %136, null
	%138 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 1
	store i1 %137, i1* %138
	br i1 %137, label %map.get.then-11, label %map.get.done-12

map.get.then-11:
	%139 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%140 = bitcast %..rawptr %136 to i1*
	%141 = load i1, i1* %140, align 1
	store i1 %141, i1* %139
	br label %map.get.done-12

map.get.done-12:
	%142 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%143 = load i1, i1* %142, align 1
	%144 = xor i1 -1, %143
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	%145 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 0
	%146 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %146, %Raw_Dynamic_Map** %145
	%147 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 1
	store i1 true, i1* %147
	%148 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 2
	store i64 40, i64* %148
	%149 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 3
	store i64 8, i64* %149
	%150 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 4
	store i64 32, i64* %150
	%151 = load %__Map_Header, %__Map_Header* %16, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %17
	%152 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 0
	store i64 8221518982030458364, i64* %152
	%153 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3a, i64 0, i32 0), i64 14}, %..string* %153
	%154 = load %__Map_Key, %__Map_Key* %17, align 8
	store i1 zeroinitializer, i1* %18
	store i1 %144, i1* %18
	%155 = bitcast i1* %18 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %151, %__Map_Key %154, %..rawptr %155)
	br label %if.done-13

if.done-13:
	; IfStmt
	; SelectorExpr
	%156 = call i1 @.imgui-10.MenuItem(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$3b, i64 0, i32 0), i64 16}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %156, label %if.then-14, label %if.done-17

if.then-14:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %19
	store %__Map_Header zeroinitializer, %__Map_Header* %20
	%157 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 0
	%158 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %158, %Raw_Dynamic_Map** %157
	%159 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 1
	store i1 true, i1* %159
	%160 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 2
	store i64 40, i64* %160
	%161 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 3
	store i64 8, i64* %161
	%162 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 4
	store i64 32, i64* %162
	%163 = load %__Map_Header, %__Map_Header* %20, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %21
	%164 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 0
	store i64 -6145881643456605148, i64* %164
	%165 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3c, i64 0, i32 0), i64 14}, %..string* %165
	%166 = load %__Map_Key, %__Map_Key* %21, align 8
	%167 = call %..rawptr @.__dynamic_map_get(%__Map_Header %163, %__Map_Key %166)
	%168 = icmp ne %..rawptr %167, null
	%169 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 1
	store i1 %168, i1* %169
	br i1 %168, label %map.get.then-15, label %map.get.done-16

map.get.then-15:
	%170 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 0
	%171 = bitcast %..rawptr %167 to i1*
	%172 = load i1, i1* %171, align 1
	store i1 %172, i1* %170
	br label %map.get.done-16

map.get.done-16:
	%173 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 0
	%174 = load i1, i1* %173, align 1
	%175 = xor i1 -1, %174
	store %__Map_Header zeroinitializer, %__Map_Header* %22
	%176 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 0
	%177 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %177, %Raw_Dynamic_Map** %176
	%178 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 1
	store i1 true, i1* %178
	%179 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 2
	store i64 40, i64* %179
	%180 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 3
	store i64 8, i64* %180
	%181 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 4
	store i64 32, i64* %181
	%182 = load %__Map_Header, %__Map_Header* %22, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %23
	%183 = getelementptr inbounds %__Map_Key, %__Map_Key* %23, i64 0, i32 0
	store i64 -6145881643456605148, i64* %183
	%184 = getelementptr inbounds %__Map_Key, %__Map_Key* %23, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3d, i64 0, i32 0), i64 14}, %..string* %184
	%185 = load %__Map_Key, %__Map_Key* %23, align 8
	store i1 zeroinitializer, i1* %24
	store i1 %175, i1* %24
	%186 = bitcast i1* %24 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %182, %__Map_Key %185, %..rawptr %186)
	br label %if.done-17

if.done-17:
	; SelectorExpr
	call ccc void @igSeparator()
	; IfStmt
	; SelectorExpr
	%187 = call i1 @.imgui-10.MenuItem(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$3e, i64 0, i32 0), i64 17}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$3f, i64 0, i32 0), i64 9}, i1 false, i1 true)
	br i1 %187, label %if.then-18, label %if.done-19

if.then-18:
	; SelectorExpr
	%188 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%189 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %188, i64 0
	%190 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %189, i64 0, i32 2
	%191 = load %..rawptr, %..rawptr* %190, align 8
	call void @.main-2.ToggleFullscreen(%..rawptr %191)
	br label %if.done-19

if.done-19:
	; IfStmt
	; SelectorExpr
	%192 = call i1 @.imgui-10.MenuItem(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$40, i64 0, i32 0), i64 4}, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$41, i64 0, i32 0), i64 6}, i1 false, i1 true)
	br i1 %192, label %if.then-20, label %if.done-21

if.then-20:
	; AssignStmt
	store i1 false, i1* @ProgramRunning
	br label %if.done-21

if.done-21:
	; SelectorExpr
	call ccc void @igEndMenu()
	br label %if.done-22

if.done-22:
	; SelectorExpr
	call ccc void @igEndMainMenuBar()
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %25
	store %__Map_Header zeroinitializer, %__Map_Header* %26
	%193 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 0
	%194 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %194, %Raw_Dynamic_Map** %193
	%195 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 1
	store i1 true, i1* %195
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 2
	store i64 40, i64* %196
	%197 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 3
	store i64 8, i64* %197
	%198 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 4
	store i64 32, i64* %198
	%199 = load %__Map_Header, %__Map_Header* %26, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %27
	%200 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 0
	store i64 2297942010048193939, i64* %200
	%201 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$42, i64 0, i32 0), i64 14}, %..string* %201
	%202 = load %__Map_Key, %__Map_Key* %27, align 8
	%203 = call %..rawptr @.__dynamic_map_get(%__Map_Header %199, %__Map_Key %202)
	%204 = icmp ne %..rawptr %203, null
	%205 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 1
	store i1 %204, i1* %205
	br i1 %204, label %map.get.then-23, label %map.get.done-24

map.get.then-23:
	%206 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 0
	%207 = bitcast %..rawptr %203 to i1*
	%208 = load i1, i1* %207, align 1
	store i1 %208, i1* %206
	br label %map.get.done-24

map.get.done-24:
	%209 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 0
	%210 = load i1, i1* %209, align 1
	%211 = icmp eq i1 %210, true
	br i1 %211, label %if.then-25, label %if.done-28

if.then-25:
	; b
	store i1 zeroinitializer, i1* %28
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %29
	store %__Map_Header zeroinitializer, %__Map_Header* %30
	%212 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 0
	%213 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %213, %Raw_Dynamic_Map** %212
	%214 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 1
	store i1 true, i1* %214
	%215 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 2
	store i64 40, i64* %215
	%216 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 3
	store i64 8, i64* %216
	%217 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 4
	store i64 32, i64* %217
	%218 = load %__Map_Header, %__Map_Header* %30, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %31
	%219 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 0
	store i64 2297942010048193939, i64* %219
	%220 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$43, i64 0, i32 0), i64 14}, %..string* %220
	%221 = load %__Map_Key, %__Map_Key* %31, align 8
	%222 = call %..rawptr @.__dynamic_map_get(%__Map_Header %218, %__Map_Key %221)
	%223 = icmp ne %..rawptr %222, null
	%224 = getelementptr inbounds {i1, i1}, {i1, i1}* %29, i64 0, i32 1
	store i1 %223, i1* %224
	br i1 %223, label %map.get.then-26, label %map.get.done-27

map.get.then-26:
	%225 = getelementptr inbounds {i1, i1}, {i1, i1}* %29, i64 0, i32 0
	%226 = bitcast %..rawptr %222 to i1*
	%227 = load i1, i1* %226, align 1
	store i1 %227, i1* %225
	br label %map.get.done-27

map.get.done-27:
	%228 = getelementptr inbounds {i1, i1}, {i1, i1}* %29, i64 0, i32 0
	%229 = load i1, i1* %228, align 1
	store i1 %229, i1* %28
	; SelectorExpr
	; SelectorExpr
	%230 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%231 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %230, i64 0
	%232 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %231, i64 0, i32 0
	%233 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %232, i64 0
	%234 = getelementptr inbounds i1, i1* %28, i64 0
	call void @.jaze_debug_windows-16.OpenGLInfo(%jaze_gl-14.OpenGLVars_t* %233, i1* %234)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%235 = load i1, i1* %28, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %32
	%236 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 0
	%237 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %237, %Raw_Dynamic_Map** %236
	%238 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 1
	store i1 true, i1* %238
	%239 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 2
	store i64 40, i64* %239
	%240 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 3
	store i64 8, i64* %240
	%241 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 4
	store i64 32, i64* %241
	%242 = load %__Map_Header, %__Map_Header* %32, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %33
	%243 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 0
	store i64 2297942010048193939, i64* %243
	%244 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$44, i64 0, i32 0), i64 14}, %..string* %244
	%245 = load %__Map_Key, %__Map_Key* %33, align 8
	%246 = bitcast i1* %28 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %242, %__Map_Key %245, %..rawptr %246)
	br label %if.done-28

if.done-28:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %34
	store %__Map_Header zeroinitializer, %__Map_Header* %35
	%247 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 0
	%248 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %248, %Raw_Dynamic_Map** %247
	%249 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 1
	store i1 true, i1* %249
	%250 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 2
	store i64 40, i64* %250
	%251 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 3
	store i64 8, i64* %251
	%252 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 4
	store i64 32, i64* %252
	%253 = load %__Map_Header, %__Map_Header* %35, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %36
	%254 = getelementptr inbounds %__Map_Key, %__Map_Key* %36, i64 0, i32 0
	store i64 2202226828205582596, i64* %254
	%255 = getelementptr inbounds %__Map_Key, %__Map_Key* %36, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$45, i64 0, i32 0), i64 16}, %..string* %255
	%256 = load %__Map_Key, %__Map_Key* %36, align 8
	%257 = call %..rawptr @.__dynamic_map_get(%__Map_Header %253, %__Map_Key %256)
	%258 = icmp ne %..rawptr %257, null
	%259 = getelementptr inbounds {i1, i1}, {i1, i1}* %34, i64 0, i32 1
	store i1 %258, i1* %259
	br i1 %258, label %map.get.then-29, label %map.get.done-30

map.get.then-29:
	%260 = getelementptr inbounds {i1, i1}, {i1, i1}* %34, i64 0, i32 0
	%261 = bitcast %..rawptr %257 to i1*
	%262 = load i1, i1* %261, align 1
	store i1 %262, i1* %260
	br label %map.get.done-30

map.get.done-30:
	%263 = getelementptr inbounds {i1, i1}, {i1, i1}* %34, i64 0, i32 0
	%264 = load i1, i1* %263, align 1
	%265 = icmp eq i1 %264, true
	br i1 %265, label %if.then-31, label %if.done-34

if.then-31:
	; b
	store i1 zeroinitializer, i1* %37
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %38
	store %__Map_Header zeroinitializer, %__Map_Header* %39
	%266 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 0
	%267 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %267, %Raw_Dynamic_Map** %266
	%268 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 1
	store i1 true, i1* %268
	%269 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 2
	store i64 40, i64* %269
	%270 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 3
	store i64 8, i64* %270
	%271 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 4
	store i64 32, i64* %271
	%272 = load %__Map_Header, %__Map_Header* %39, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %40
	%273 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 0
	store i64 2202226828205582596, i64* %273
	%274 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$46, i64 0, i32 0), i64 16}, %..string* %274
	%275 = load %__Map_Key, %__Map_Key* %40, align 8
	%276 = call %..rawptr @.__dynamic_map_get(%__Map_Header %272, %__Map_Key %275)
	%277 = icmp ne %..rawptr %276, null
	%278 = getelementptr inbounds {i1, i1}, {i1, i1}* %38, i64 0, i32 1
	store i1 %277, i1* %278
	br i1 %277, label %map.get.then-32, label %map.get.done-33

map.get.then-32:
	%279 = getelementptr inbounds {i1, i1}, {i1, i1}* %38, i64 0, i32 0
	%280 = bitcast %..rawptr %276 to i1*
	%281 = load i1, i1* %280, align 1
	store i1 %281, i1* %279
	br label %map.get.done-33

map.get.done-33:
	%282 = getelementptr inbounds {i1, i1}, {i1, i1}* %38, i64 0, i32 0
	%283 = load i1, i1* %282, align 1
	store i1 %283, i1* %37
	; SelectorExpr
	%284 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%285 = getelementptr inbounds i1, i1* %37, i64 0
	call void @.jaze_debug_windows-16.Win32VarsInfo(%main-2.Win32Vars_t* %284, i1* %285)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%286 = load i1, i1* %37, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %41
	%287 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 0
	%288 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %288, %Raw_Dynamic_Map** %287
	%289 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 1
	store i1 true, i1* %289
	%290 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 2
	store i64 40, i64* %290
	%291 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 3
	store i64 8, i64* %291
	%292 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 4
	store i64 32, i64* %292
	%293 = load %__Map_Header, %__Map_Header* %41, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %42
	%294 = getelementptr inbounds %__Map_Key, %__Map_Key* %42, i64 0, i32 0
	store i64 2202226828205582596, i64* %294
	%295 = getelementptr inbounds %__Map_Key, %__Map_Key* %42, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$47, i64 0, i32 0), i64 16}, %..string* %295
	%296 = load %__Map_Key, %__Map_Key* %42, align 8
	%297 = bitcast i1* %37 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %293, %__Map_Key %296, %..rawptr %297)
	br label %if.done-34

if.done-34:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %43
	store %__Map_Header zeroinitializer, %__Map_Header* %44
	%298 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 0
	%299 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %299, %Raw_Dynamic_Map** %298
	%300 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 1
	store i1 true, i1* %300
	%301 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 2
	store i64 40, i64* %301
	%302 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 3
	store i64 8, i64* %302
	%303 = getelementptr inbounds %__Map_Header, %__Map_Header* %44, i64 0, i32 4
	store i64 32, i64* %303
	%304 = load %__Map_Header, %__Map_Header* %44, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %45
	%305 = getelementptr inbounds %__Map_Key, %__Map_Key* %45, i64 0, i32 0
	store i64 8221518982030458364, i64* %305
	%306 = getelementptr inbounds %__Map_Key, %__Map_Key* %45, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$48, i64 0, i32 0), i64 14}, %..string* %306
	%307 = load %__Map_Key, %__Map_Key* %45, align 8
	%308 = call %..rawptr @.__dynamic_map_get(%__Map_Header %304, %__Map_Key %307)
	%309 = icmp ne %..rawptr %308, null
	%310 = getelementptr inbounds {i1, i1}, {i1, i1}* %43, i64 0, i32 1
	store i1 %309, i1* %310
	br i1 %309, label %map.get.then-35, label %map.get.done-36

map.get.then-35:
	%311 = getelementptr inbounds {i1, i1}, {i1, i1}* %43, i64 0, i32 0
	%312 = bitcast %..rawptr %308 to i1*
	%313 = load i1, i1* %312, align 1
	store i1 %313, i1* %311
	br label %map.get.done-36

map.get.done-36:
	%314 = getelementptr inbounds {i1, i1}, {i1, i1}* %43, i64 0, i32 0
	%315 = load i1, i1* %314, align 1
	br i1 %315, label %if.then-37, label %if.done-40

if.then-37:
	; b
	store i1 zeroinitializer, i1* %46
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %47
	store %__Map_Header zeroinitializer, %__Map_Header* %48
	%316 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 0
	%317 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %317, %Raw_Dynamic_Map** %316
	%318 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 1
	store i1 true, i1* %318
	%319 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 2
	store i64 40, i64* %319
	%320 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 3
	store i64 8, i64* %320
	%321 = getelementptr inbounds %__Map_Header, %__Map_Header* %48, i64 0, i32 4
	store i64 32, i64* %321
	%322 = load %__Map_Header, %__Map_Header* %48, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %49
	%323 = getelementptr inbounds %__Map_Key, %__Map_Key* %49, i64 0, i32 0
	store i64 8221518982030458364, i64* %323
	%324 = getelementptr inbounds %__Map_Key, %__Map_Key* %49, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$49, i64 0, i32 0), i64 14}, %..string* %324
	%325 = load %__Map_Key, %__Map_Key* %49, align 8
	%326 = call %..rawptr @.__dynamic_map_get(%__Map_Header %322, %__Map_Key %325)
	%327 = icmp ne %..rawptr %326, null
	%328 = getelementptr inbounds {i1, i1}, {i1, i1}* %47, i64 0, i32 1
	store i1 %327, i1* %328
	br i1 %327, label %map.get.then-38, label %map.get.done-39

map.get.then-38:
	%329 = getelementptr inbounds {i1, i1}, {i1, i1}* %47, i64 0, i32 0
	%330 = bitcast %..rawptr %326 to i1*
	%331 = load i1, i1* %330, align 1
	store i1 %331, i1* %329
	br label %map.get.done-39

map.get.done-39:
	%332 = getelementptr inbounds {i1, i1}, {i1, i1}* %47, i64 0, i32 0
	%333 = load i1, i1* %332, align 1
	store i1 %333, i1* %46
	; SelectorExpr
	%334 = getelementptr inbounds i1, i1* %46, i64 0
	call void @.jaze_debug_windows-16.ShowXinputWindow(i1* %334)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%335 = load i1, i1* %46, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %50
	%336 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 0
	%337 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %337, %Raw_Dynamic_Map** %336
	%338 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 1
	store i1 true, i1* %338
	%339 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 2
	store i64 40, i64* %339
	%340 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 3
	store i64 8, i64* %340
	%341 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 4
	store i64 32, i64* %341
	%342 = load %__Map_Header, %__Map_Header* %50, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %51
	%343 = getelementptr inbounds %__Map_Key, %__Map_Key* %51, i64 0, i32 0
	store i64 8221518982030458364, i64* %343
	%344 = getelementptr inbounds %__Map_Key, %__Map_Key* %51, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$4a, i64 0, i32 0), i64 14}, %..string* %344
	%345 = load %__Map_Key, %__Map_Key* %51, align 8
	%346 = bitcast i1* %46 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %342, %__Map_Key %345, %..rawptr %346)
	br label %if.done-40

if.done-40:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %52
	store %__Map_Header zeroinitializer, %__Map_Header* %53
	%347 = getelementptr inbounds %__Map_Header, %__Map_Header* %53, i64 0, i32 0
	%348 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %348, %Raw_Dynamic_Map** %347
	%349 = getelementptr inbounds %__Map_Header, %__Map_Header* %53, i64 0, i32 1
	store i1 true, i1* %349
	%350 = getelementptr inbounds %__Map_Header, %__Map_Header* %53, i64 0, i32 2
	store i64 40, i64* %350
	%351 = getelementptr inbounds %__Map_Header, %__Map_Header* %53, i64 0, i32 3
	store i64 8, i64* %351
	%352 = getelementptr inbounds %__Map_Header, %__Map_Header* %53, i64 0, i32 4
	store i64 32, i64* %352
	%353 = load %__Map_Header, %__Map_Header* %53, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %54
	%354 = getelementptr inbounds %__Map_Key, %__Map_Key* %54, i64 0, i32 0
	store i64 -6145881643456605148, i64* %354
	%355 = getelementptr inbounds %__Map_Key, %__Map_Key* %54, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$4b, i64 0, i32 0), i64 14}, %..string* %355
	%356 = load %__Map_Key, %__Map_Key* %54, align 8
	%357 = call %..rawptr @.__dynamic_map_get(%__Map_Header %353, %__Map_Key %356)
	%358 = icmp ne %..rawptr %357, null
	%359 = getelementptr inbounds {i1, i1}, {i1, i1}* %52, i64 0, i32 1
	store i1 %358, i1* %359
	br i1 %358, label %map.get.then-41, label %map.get.done-42

map.get.then-41:
	%360 = getelementptr inbounds {i1, i1}, {i1, i1}* %52, i64 0, i32 0
	%361 = bitcast %..rawptr %357 to i1*
	%362 = load i1, i1* %361, align 1
	store i1 %362, i1* %360
	br label %map.get.done-42

map.get.done-42:
	%363 = getelementptr inbounds {i1, i1}, {i1, i1}* %52, i64 0, i32 0
	%364 = load i1, i1* %363, align 1
	br i1 %364, label %if.then-43, label %if.done-46

if.then-43:
	; b
	store i1 zeroinitializer, i1* %55
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %56
	store %__Map_Header zeroinitializer, %__Map_Header* %57
	%365 = getelementptr inbounds %__Map_Header, %__Map_Header* %57, i64 0, i32 0
	%366 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %366, %Raw_Dynamic_Map** %365
	%367 = getelementptr inbounds %__Map_Header, %__Map_Header* %57, i64 0, i32 1
	store i1 true, i1* %367
	%368 = getelementptr inbounds %__Map_Header, %__Map_Header* %57, i64 0, i32 2
	store i64 40, i64* %368
	%369 = getelementptr inbounds %__Map_Header, %__Map_Header* %57, i64 0, i32 3
	store i64 8, i64* %369
	%370 = getelementptr inbounds %__Map_Header, %__Map_Header* %57, i64 0, i32 4
	store i64 32, i64* %370
	%371 = load %__Map_Header, %__Map_Header* %57, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %58
	%372 = getelementptr inbounds %__Map_Key, %__Map_Key* %58, i64 0, i32 0
	store i64 -6145881643456605148, i64* %372
	%373 = getelementptr inbounds %__Map_Key, %__Map_Key* %58, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$4c, i64 0, i32 0), i64 14}, %..string* %373
	%374 = load %__Map_Key, %__Map_Key* %58, align 8
	%375 = call %..rawptr @.__dynamic_map_get(%__Map_Header %371, %__Map_Key %374)
	%376 = icmp ne %..rawptr %375, null
	%377 = getelementptr inbounds {i1, i1}, {i1, i1}* %56, i64 0, i32 1
	store i1 %376, i1* %377
	br i1 %376, label %map.get.then-44, label %map.get.done-45

map.get.then-44:
	%378 = getelementptr inbounds {i1, i1}, {i1, i1}* %56, i64 0, i32 0
	%379 = bitcast %..rawptr %375 to i1*
	%380 = load i1, i1* %379, align 1
	store i1 %380, i1* %378
	br label %map.get.done-45

map.get.done-45:
	%381 = getelementptr inbounds {i1, i1}, {i1, i1}* %56, i64 0, i32 0
	%382 = load i1, i1* %381, align 1
	store i1 %382, i1* %55
	; SelectorExpr
	%383 = getelementptr inbounds i1, i1* %55, i64 0
	call ccc void @igShowTestWindow(i1* %383)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%384 = load i1, i1* %55, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %59
	%385 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 0
	%386 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %386, %Raw_Dynamic_Map** %385
	%387 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 1
	store i1 true, i1* %387
	%388 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 2
	store i64 40, i64* %388
	%389 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 3
	store i64 8, i64* %389
	%390 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 4
	store i64 32, i64* %390
	%391 = load %__Map_Header, %__Map_Header* %59, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %60
	%392 = getelementptr inbounds %__Map_Key, %__Map_Key* %60, i64 0, i32 0
	store i64 -6145881643456605148, i64* %392
	%393 = getelementptr inbounds %__Map_Key, %__Map_Key* %60, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$4d, i64 0, i32 0), i64 14}, %..string* %393
	%394 = load %__Map_Key, %__Map_Key* %60, align 8
	%395 = bitcast i1* %55 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %391, %__Map_Key %394, %..rawptr %395)
	br label %if.done-46

if.done-46:
	ret void
}

define void @main() {
decls-0:
	%0 = alloca %main-2.Win32Vars_t, align 8
	%1 = alloca [1024 x i8], align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca {%..any*, i64, i64}, align 8
	%7 = alloca [2 x %..any], align 8
	%8 = alloca {i8*, i64, i64}, align 8
	%9 = alloca float, align 4
	%10 = alloca i64, align 8
	%11 = alloca i64, align 8
	%12 = alloca %__Map_Header, align 8
	%13 = alloca %__Map_Key, align 8
	%14 = alloca i1, align 1
	%15 = alloca %__Map_Header, align 8
	%16 = alloca %__Map_Key, align 8
	%17 = alloca i1, align 1
	%18 = alloca %__Map_Header, align 8
	%19 = alloca %__Map_Key, align 8
	%20 = alloca i1, align 1
	%21 = alloca %windows-8.Msg, align 8
	%22 = alloca %imgui-10.GuiStyle*, align 8
	%23 = alloca %imgui-10.GuiStyle*, align 8
	%24 = alloca i64, align 8
	%25 = alloca double, align 8
	call void @.__$startup_runtime()
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %jaze_win32-13.WINDOWPLACEMENT, %jaze_win32-13.WINDOWPLACEMENT* @GlobalWindowPosition, i64 0, i32 0
	store i32 44, i32* %26
	; win32vars
	store %main-2.Win32Vars_t zeroinitializer, %main-2.Win32Vars_t* %0
		store %main-2.Win32Vars_t zeroinitializer, %main-2.Win32Vars_t* %0
	; AssignStmt
	%27 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	store %main-2.Win32Vars_t* %27, %main-2.Win32Vars_t** @GlobalWin32VarsPtr
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 1
	; SelectorExpr
	%29 = call ccc %..rawptr @GetModuleHandleA(i8* zeroinitializer)
	store %..rawptr %29, %..rawptr* %28
	; AssignStmt
	; SelectorExpr
	%30 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	; SelectorExpr
	%31 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 1
	%32 = load %..rawptr, %..rawptr* %31, align 8
	%33 = call %..rawptr @.main-2.CreateWindow(%..rawptr %32)
	store %..rawptr %33, %..rawptr* %30
	; AssignStmt
	; SelectorExpr
	%34 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	; SelectorExpr
	; SelectorExpr
	%35 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%36 = load %..rawptr, %..rawptr* %35, align 8
	%37 = call ccc %..rawptr @GetDC(%..rawptr %36)
	store %..rawptr %37, %..rawptr* %34
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%38 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%39 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %38, i64 0, i32 6
	%40 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	%41 = call %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %40, i1 true)
	store %..rawptr %41, %..rawptr* %39
	; SelectorExpr
	call void @.jaze_gl-14.Init()
	; SelectorExpr
	call void @.jaze_gl-14.DebugMessageCallback(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* @.main-2.OpenGLDebugCallback, %..rawptr zeroinitializer)
	; SelectorExpr
	call void @.jaze_gl-14.Enable(i32 33346)
	; SelectorExpr
	call void @.jaze_gl-14.DebugMessageControl(i32 4352, i32 4352, i32 33387, i32 0, i32* zeroinitializer, i1 false)
	; SelectorExpr
	; SelectorExpr
	%42 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%43 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %42, i64 0
	call void @.jaze_gl-14.GetInfo(%jaze_gl-14.OpenGLVars_t* %43)
	; SelectorExpr
	; SelectorExpr
	%44 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%45 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %44, i64 0
	; SelectorExpr
	%46 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	%47 = load %..rawptr, %..rawptr* %46, align 8
	call void @.jaze_wgl-15.GetInfo(%jaze_gl-14.OpenGLVars_t* %45, %..rawptr %47)
	; buf
	store [1024 x i8] zeroinitializer, [1024 x i8]* %1
		; SelectorExpr
	; SliceExpr
	%48 = load [1024 x i8], [1024 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$4e, i64 0, i32 0), i64 21}, i64 322, i64 19, i64 0, i64 1024, i64 1024)
	%49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	%50 = getelementptr inbounds i8, i8* %49, i64 0
	%51 = sub i64 1024, 0
	%52 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %50, i8** %53
	%54 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %51, i64* %54
	%55 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %52, i64* %55
	%56 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	; SelectorExpr
	; SelectorExpr
	%57 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%58 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %57, i64 0, i32 2
	%59 = load %..string, %..string* %58, align 8
	store %..string zeroinitializer, %..string* %3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$4f, i64 0, i32 0), i64 5}, %..string* %3
	%60 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%61 = bitcast %..string* %3 to %..rawptr
	%62 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%63 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%64 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %62, %Type_Info** %63
	store %..rawptr %61, %..rawptr* %64
	%65 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%66 = bitcast %..string* %58 to %..rawptr
	%67 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%68 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%69 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %67, %Type_Info** %68
	store %..rawptr %66, %..rawptr* %69
	%70 = load %..any, %..any* %5, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %6
	store [2 x %..any] zeroinitializer, [2 x %..any]* %7
	%71 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	store %..any %65, %..any* %71
	%72 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 1
	store %..any %70, %..any* %72
	%73 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	%74 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 0
	store %..any* %73, %..any** %74
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 1
	store i64 2, i64* %75
	%76 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 2
	store i64 2, i64* %76
	%77 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %6, align 8
	%78 = call %..string @.fmt-4.sprint({i8*, i64, i64} %56, {%..any*, i64, i64} %77)
	; SelectorExpr
	; SelectorExpr
	%79 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%80 = load %..rawptr, %..rawptr* %79, align 8
	; SelectorExpr
	; SliceExpr
	%81 = load [1024 x i8], [1024 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$50, i64 0, i32 0), i64 21}, i64 323, i64 53, i64 0, i64 1024, i64 1024)
	%82 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	%83 = getelementptr inbounds i8, i8* %82, i64 0
	%84 = sub i64 1024, 0
	%85 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %8
	%86 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	store i8* %83, i8** %86
	%87 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 1
	store i64 %84, i64* %87
	%88 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 2
	store i64 %85, i64* %88
	%89 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	%90 = load i8*, i8** %89, align 8
	%91 = call ccc i32 @SetWindowTextA(%..rawptr %80, i8* %90)
	; col
	store float zeroinitializer, float* %9
		store float 0x3fcc1c1c00000000, float* %9
	; SelectorExpr
	%92 = load float, float* %9, align 4
	%93 = load float, float* %9, align 4
	%94 = load float, float* %9, align 4
	call ccc void @glClearColor(float %92, float %93, float %94, float 0x3ff0000000000000)
	; SelectorExpr
	; SelectorExpr
	%95 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%96 = load %..rawptr, %..rawptr* %95, align 8
	call void @.jaze_imgui-17.Init(%..rawptr %96)
	; AssignStmt
	store i1 true, i1* @ProgramRunning
	; freq
	store i64 zeroinitializer, i64* %10
		; SelectorExpr
	%97 = getelementptr inbounds i64, i64* %10, i64 0
	%98 = call ccc i32 @QueryPerformanceFrequency(i64* %97)
	; oldTime
	store i64 zeroinitializer, i64* %11
		; SelectorExpr
	%99 = getelementptr inbounds i64, i64* %11, i64 0
	%100 = call ccc i32 @QueryPerformanceCounter(i64* %99)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %12
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 0
	%102 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %102, %Raw_Dynamic_Map** %101
	%103 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 1
	store i1 true, i1* %103
	%104 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 2
	store i64 40, i64* %104
	%105 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 3
	store i64 8, i64* %105
	%106 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 4
	store i64 32, i64* %106
	%107 = load %__Map_Header, %__Map_Header* %12, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %13
	%108 = getelementptr inbounds %__Map_Key, %__Map_Key* %13, i64 0, i32 0
	store i64 2297942010048193939, i64* %108
	%109 = getelementptr inbounds %__Map_Key, %__Map_Key* %13, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$51, i64 0, i32 0), i64 14}, %..string* %109
	%110 = load %__Map_Key, %__Map_Key* %13, align 8
	store i1 zeroinitializer, i1* %14
	store i1 false, i1* %14
	%111 = bitcast i1* %14 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %107, %__Map_Key %110, %..rawptr %111)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %15
	%112 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 0
	%113 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %113, %Raw_Dynamic_Map** %112
	%114 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 1
	store i1 true, i1* %114
	%115 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 2
	store i64 40, i64* %115
	%116 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 3
	store i64 8, i64* %116
	%117 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 4
	store i64 32, i64* %117
	%118 = load %__Map_Header, %__Map_Header* %15, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %16
	%119 = getelementptr inbounds %__Map_Key, %__Map_Key* %16, i64 0, i32 0
	store i64 2202226828205582596, i64* %119
	%120 = getelementptr inbounds %__Map_Key, %__Map_Key* %16, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$52, i64 0, i32 0), i64 16}, %..string* %120
	%121 = load %__Map_Key, %__Map_Key* %16, align 8
	store i1 zeroinitializer, i1* %17
	store i1 false, i1* %17
	%122 = bitcast i1* %17 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %118, %__Map_Key %121, %..rawptr %122)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %18
	%123 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 0
	%124 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %124, %Raw_Dynamic_Map** %123
	%125 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 1
	store i1 true, i1* %125
	%126 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 2
	store i64 40, i64* %126
	%127 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 3
	store i64 8, i64* %127
	%128 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 4
	store i64 32, i64* %128
	%129 = load %__Map_Header, %__Map_Header* %18, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %19
	%130 = getelementptr inbounds %__Map_Key, %__Map_Key* %19, i64 0, i32 0
	store i64 -6145881643456605148, i64* %130
	%131 = getelementptr inbounds %__Map_Key, %__Map_Key* %19, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$53, i64 0, i32 0), i64 14}, %..string* %131
	%132 = load %__Map_Key, %__Map_Key* %19, align 8
	store i1 zeroinitializer, i1* %20
	store i1 false, i1* %20
	%133 = bitcast i1* %20 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %129, %__Map_Key %132, %..rawptr %133)
	; SelectorExpr
	%134 = load i1 (i32)*, i1 (i32)** @.SwapIntervalEXT, align 8
	%135 = call ccc i1 %134(i32 -1)
	; SelectorExpr
	%136 = call i1 @.jaze_xinput-18.Init()
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%137 = load i1, i1* @ProgramRunning, align 1
	br i1 %137, label %for.body-2, label %for.done-29

for.body-2:
	; msg
	store %windows-8.Msg zeroinitializer, %windows-8.Msg* %21
		; ForStmt
	br label %for.loop-3

for.loop-3:
	; SelectorExpr
	%138 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0
	%139 = call ccc i32 @PeekMessageA(%windows-8.Msg* %138, %..rawptr zeroinitializer, i32 0, i32 0, i32 1)
	%140 = icmp eq i32 %139, 1
	br i1 %140, label %for.body-4, label %for.done-24

for.body-4:
	; MatchStmt
	; SelectorExpr
	%141 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0, i32 1
	%142 = load i32, i32* %141, align 4
	%143 = icmp eq i32 %142, 18
	br i1 %143, label %match.case.body-6, label %match.case.next-5

match.case.next-5:
	%144 = icmp eq i32 %142, 260
	br i1 %144, label %match.fall.body-8, label %match.case.next-7

match.case.body-6:
	; AssignStmt
	store i1 false, i1* @ProgramRunning
	br label %match.done-23

match.case.next-7:
	%145 = icmp eq i32 %142, 256
	br i1 %145, label %match.fall.body-14, label %match.case.next-13

match.fall.body-8:
	; IfStmt
	; SelectorExpr
	%146 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0, i32 2
	%147 = load i64, i64* %146, align 8
	; cast - cast
	%148 = trunc i64 %147 to i32
	%149 = icmp eq i32 %148, 13
	br i1 %149, label %if.then-9, label %if.done-10

if.then-9:
	; SelectorExpr
	%150 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%151 = load %..rawptr, %..rawptr* %150, align 8
	call void @.main-2.ToggleFullscreen(%..rawptr %151)
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%152 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0, i32 2
	%153 = load i64, i64* %152, align 8
	%154 = icmp eq i64 %153, 192
	br i1 %154, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	%155 = load i1, i1* @ShowDebugMenu, align 1
	%156 = xor i1 -1, %155
	store i1 %156, i1* @ShowDebugMenu
	br label %if.done-12

if.done-12:
	; continue
	br label %for.loop-3

match.case.next-13:
	%157 = icmp eq i32 %142, 257
	br i1 %157, label %match.fall.body-20, label %match.case.next-19

match.fall.body-14:
	; IfStmt
	; SelectorExpr
	%158 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0, i32 2
	%159 = load i64, i64* %158, align 8
	; cast - cast
	%160 = trunc i64 %159 to i32
	%161 = icmp eq i32 %160, 27
	br i1 %161, label %if.then-15, label %if.done-16

if.then-15:
	; SelectorExpr
	call ccc void @PostQuitMessage(i32 0)
	br label %if.done-16

if.done-16:
	; IfStmt
	; SelectorExpr
	%162 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0, i32 2
	%163 = load i64, i64* %162, align 8
	; cast - cast
	%164 = trunc i64 %163 to i32
	%165 = icmp eq i32 %164, 9
	br i1 %165, label %if.then-17, label %if.done-18

if.then-17:
	; style
	store %imgui-10.GuiStyle* zeroinitializer, %imgui-10.GuiStyle** %22
		; SelectorExpr
	%166 = call ccc %imgui-10.GuiStyle* @igGetStyle()
	store %imgui-10.GuiStyle* %166, %imgui-10.GuiStyle** %22
	; AssignStmt
	; SelectorExpr
	%167 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %22, align 8
	%168 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %167, i64 0
	%169 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %168, i64 0, i32 0
	store float 0x3fb9999980000000, float* %169
	br label %if.done-18

if.done-18:
	br label %match.done-23

match.case.next-19:
	br label %match.done-23

match.fall.body-20:
	; IfStmt
	; SelectorExpr
	%170 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0, i32 2
	%171 = load i64, i64* %170, align 8
	; cast - cast
	%172 = trunc i64 %171 to i32
	%173 = icmp eq i32 %172, 9
	br i1 %173, label %if.then-21, label %if.done-22

if.then-21:
	; style
	store %imgui-10.GuiStyle* zeroinitializer, %imgui-10.GuiStyle** %23
		; SelectorExpr
	%174 = call ccc %imgui-10.GuiStyle* @igGetStyle()
	store %imgui-10.GuiStyle* %174, %imgui-10.GuiStyle** %23
	; AssignStmt
	; SelectorExpr
	%175 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %23, align 8
	%176 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %175, i64 0
	%177 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %176, i64 0, i32 0
	store float 0x3ff0000000000000, float* %177
	br label %if.done-22

if.done-22:
	br label %match.done-23

match.done-23:
	; SelectorExpr
	%178 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0
	%179 = call ccc i32 @TranslateMessage(%windows-8.Msg* %178)
	; SelectorExpr
	%180 = getelementptr inbounds %windows-8.Msg, %windows-8.Msg* %21, i64 0
	%181 = call ccc i64 @DispatchMessageA(%windows-8.Msg* %180)
	br label %for.loop-3

for.done-24:
	; newTime
	store i64 zeroinitializer, i64* %24
		; SelectorExpr
	%182 = getelementptr inbounds i64, i64* %24, i64 0
	%183 = call ccc i32 @QueryPerformanceCounter(i64* %182)
	; deltaTime
	store double zeroinitializer, double* %25
		%184 = load i64, i64* %24, align 8
	%185 = load i64, i64* %11, align 8
	%186 = sub i64 %184, %185
	; cast - cast
	%187 = sitofp i64 %186 to double
	store double %187, double* %25
	; AssignStmt
	%188 = load i64, i64* %24, align 8
	store i64 %188, i64* %11
	; AssignStmt
	%189 = load i64, i64* %10, align 8
	; cast - cast
	%190 = sitofp i64 %189 to double
	%191 = load double, double* %25, align 8
	%192 = fdiv double %191, %190
	store double %192, double* %25
	; IfStmt
	%193 = load i1, i1* @ShowDebugMenu, align 1
	br i1 %193, label %if.then-25, label %if.done-26

if.then-25:
	; SelectorExpr
	%194 = load double, double* %25, align 8
	call void @.jaze_imgui-17.BeginNewFrame(double %194)
	%195 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	call void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %195)
	br label %if.done-26

if.done-26:
	; SelectorExpr
	call void @.jaze_gl-14.Clear(i32 16640)
	; IfStmt
	%196 = load i1, i1* @ShowDebugMenu, align 1
	br i1 %196, label %if.then-27, label %if.done-28

if.then-27:
	; SelectorExpr
	call ccc void @igRender()
	br label %if.done-28

if.done-28:
	; SelectorExpr
	; SelectorExpr
	%197 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	%198 = load %..rawptr, %..rawptr* %197, align 8
	%199 = call ccc i32 @SwapBuffers(%..rawptr %198)
	br label %for.loop-1

for.done-29:
	ret void
}

define void @.fmt-4.write_string({i8*, i64, i64}* %buf, %..string %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	; append
	%4 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%5 = bitcast {i8*, i64, i64}* %4 to %..rawptr
	%6 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%7 = load %..string, %..string* %1, align 8
	; cast - cast
	%8 = extractvalue %..string %7, 0
	store i8* zeroinitializer, i8** %2
	store i8* %8, i8** %2
	%9 = extractvalue %..string %7, 1
	%10 = sub i64 %9, 0
	%11 = sub i64 %9, 0
	%12 = load i8*, i8** %2, align 8
	%13 = getelementptr inbounds i8, i8* %12, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %13, i8** %14
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %11, i64* %16
	%17 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%18 = extractvalue {i8*, i64, i64} %17, 0
	%19 = extractvalue {i8*, i64, i64} %17, 1
	%20 = bitcast i8* %18 to %..rawptr
	%21 = call i64 @.__slice_append(%..rawptr %5, i64 1, i64 1, %..rawptr %20, i64 %19)
	ret void
}

define void @.fmt-4.write_byte({i8*, i64, i64}* %buf, i8 %b) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i8, align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca [1 x i8], align 1
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store i8 zeroinitializer, i8* %1
		store i8 %b, i8* %1
	; append
	%4 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%5 = bitcast {i8*, i64, i64}* %4 to %..rawptr
	%6 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%7 = load i8, i8* %1, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	store [1 x i8] zeroinitializer, [1 x i8]* %3
	%8 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	store i8 %7, i8* %8
	%9 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = extractvalue {i8*, i64, i64} %13, 0
	%15 = extractvalue {i8*, i64, i64} %13, 1
	%16 = bitcast i8* %14 to %..rawptr
	%17 = call i64 @.__slice_append(%..rawptr %5, i64 1, i64 1, %..rawptr %16, i64 %15)
	ret void
}

define void @.fmt-4.write_rune({i8*, i64, i64}* %buf, i32 %r) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i32, align 4
	%2 = alloca [4 x i8], align 1
	%3 = alloca i64, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store i32 zeroinitializer, i32* %1
		store i32 %r, i32* %1
	; IfStmt
	%5 = load i32, i32* %1, align 4
	%6 = icmp slt i32 %5, 128
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	%7 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%8 = load i32, i32* %1, align 4
	; cast - cast
	%9 = trunc i32 %8 to i8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %7, i8 %9)
	; ReturnStmt
	ret void

if.done-2:
	; b
	store [4 x i8] zeroinitializer, [4 x i8]* %2
		; n
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%10 = load i32, i32* %1, align 4
	%11 = call {[4 x i8], i64} @.utf8-6.encode_rune(i32 %10)
	%12 = extractvalue {[4 x i8], i64} %11, 0
	%13 = extractvalue {[4 x i8], i64} %11, 1
	store [4 x i8] %12, [4 x i8]* %2
	store i64 %13, i64* %3
	; append
	%14 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%15 = bitcast {i8*, i64, i64}* %14 to %..rawptr
	%16 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SliceExpr
	%17 = load i64, i64* %3, align 8
	%18 = load [4 x i8], [4 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$54, i64 0, i32 0), i64 21}, i64 23, i64 17, i64 0, i64 %17, i64 4)
	%19 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i32 0
	%20 = getelementptr inbounds i8, i8* %19, i64 0
	%21 = sub i64 %17, 0
	%22 = sub i64 4, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %20, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %21, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %22, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %26, 0
	%28 = extractvalue {i8*, i64, i64} %26, 1
	%29 = bitcast i8* %27 to %..rawptr
	%30 = call i64 @.__slice_append(%..rawptr %15, i64 1, i64 1, %..rawptr %29, i64 %28)
	ret void
}

define i64 @.fmt-4.fprint(i64 %fd, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [4096 x i8], align 1
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
		; SliceExpr
	%6 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$55, i64 0, i32 0), i64 21}, i64 49, i64 13, i64 0, i64 0, i64 4096)
	%7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call i64 @.fmt-4.bprint({i8*, i64, i64}* %15, {%..any*, i64, i64} %16)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	; SliceExpr
	; SelectorExpr
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$56, i64 0, i32 0), i64 21}, i64 51, i64 18, i64 0, i64 %20, i64 %22)
	%23 = extractvalue {i8*, i64, i64} %21, 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = sub i64 %20, 0
	%26 = sub i64 %22, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %24, i8** %27
	%28 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %25, i64* %28
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %26, i64* %29
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%31 = call {i64, i64} @.os_windows-19.write(i64 %18, {i8*, i64, i64} %30)
	; ReturnStmt
	; SelectorExpr
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	%33 = load i64, i64* %32, align 8
	ret i64 %33
}

define i64 @.fmt-4.fprintln(i64 %fd, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [4096 x i8], align 1
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
		; SliceExpr
	%6 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$57, i64 0, i32 0), i64 21}, i64 57, i64 13, i64 0, i64 0, i64 4096)
	%7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call i64 @.fmt-4.bprintln({i8*, i64, i64}* %15, {%..any*, i64, i64} %16)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	; SliceExpr
	; SelectorExpr
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$58, i64 0, i32 0), i64 21}, i64 59, i64 18, i64 0, i64 %20, i64 %22)
	%23 = extractvalue {i8*, i64, i64} %21, 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = sub i64 %20, 0
	%26 = sub i64 %22, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %24, i8** %27
	%28 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %25, i64* %28
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %26, i64* %29
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%31 = call {i64, i64} @.os_windows-19.write(i64 %18, {i8*, i64, i64} %30)
	; ReturnStmt
	; SelectorExpr
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	%33 = load i64, i64* %32, align 8
	ret i64 %33
}

define i64 @.fmt-4.fprintf(i64 %fd, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [4096 x i8], align 1
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %3
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
		; SliceExpr
	%7 = load [4096 x i8], [4096 x i8]* %3, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$59, i64 0, i32 0), i64 21}, i64 64, i64 13, i64 0, i64 0, i64 4096)
	%8 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i32 0
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	%10 = sub i64 0, 0
	%11 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %9, i8** %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %10, i64* %13
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %11, i64* %14
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	store {i8*, i64, i64} %15, {i8*, i64, i64}* %4
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0
	%17 = load %..string, %..string* %1, align 8
	%18 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%19 = call i64 @.fmt-4.bprintf({i8*, i64, i64}* %16, %..string %17, {%..any*, i64, i64} %18)
	; SelectorExpr
	%20 = load i64, i64* %0, align 8
	; SliceExpr
	; SelectorExpr
	%21 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	%22 = load i64, i64* %21, align 8
	%23 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%24 = extractvalue {i8*, i64, i64} %23, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$5a, i64 0, i32 0), i64 21}, i64 66, i64 18, i64 0, i64 %22, i64 %24)
	%25 = extractvalue {i8*, i64, i64} %23, 0
	%26 = getelementptr inbounds i8, i8* %25, i64 0
	%27 = sub i64 %22, 0
	%28 = sub i64 %24, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %26, i8** %29
	%30 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %27, i64* %30
	%31 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %28, i64* %31
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%33 = call {i64, i64} @.os_windows-19.write(i64 %20, {i8*, i64, i64} %32)
	; ReturnStmt
	; SelectorExpr
	%34 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	ret i64 %35
}

define i64 @.fmt-4.print({%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load i64, i64* @.stdout, align 8
	%2 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%3 = call i64 @.fmt-4.fprint(i64 %1, {%..any*, i64, i64} %2)
	ret i64 %3
}

define i64 @.fmt-4.println({%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load i64, i64* @.stdout, align 8
	%2 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%3 = call i64 @.fmt-4.fprintln(i64 %1, {%..any*, i64, i64} %2)
	ret i64 %3
}

define i64 @.fmt-4.printf(%..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %fmt, %..string* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; ReturnStmt
	; SelectorExpr
	%2 = load i64, i64* @.stdout, align 8
	%3 = load %..string, %..string* %0, align 8
	%4 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%5 = call i64 @.fmt-4.fprintf(i64 %2, %..string %3, {%..any*, i64, i64} %4)
	ret i64 %5
}

define void @.fmt-4.write_type({i8*, i64, i64}* %buf, %Type_Info* %ti) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named, align 8
	%3 = alloca %Type_Info.Integer, align 8
	%4 = alloca %fmt-4.Fmt_Info, align 8
	%5 = alloca %fmt-4.Fmt_Info, align 8
	%6 = alloca %Type_Info.Float, align 8
	%7 = alloca %Type_Info.String, align 1
	%8 = alloca %Type_Info.Boolean, align 1
	%9 = alloca %Type_Info.Pointer, align 8
	%10 = alloca %Type_Info.Procedure, align 8
	%11 = alloca %Type_Info.Tuple*, align 8
	%12 = alloca {%Type_Info.Tuple*, i1}, align 8
	%13 = alloca %Type_Info*, align 8
	%14 = alloca i64, align 8
	%15 = alloca i64, align 8
	%16 = alloca i64, align 8
	%17 = alloca %Type_Info.Tuple, align 8
	%18 = alloca i64, align 8
	%19 = alloca %..string, align 8
	%20 = alloca i64, align 8
	%21 = alloca i64, align 8
	%22 = alloca i64, align 8
	%23 = alloca %Type_Info*, align 8
	%24 = alloca %Type_Info.Array, align 8
	%25 = alloca %fmt-4.Fmt_Info, align 8
	%26 = alloca %fmt-4.Fmt_Info, align 8
	%27 = alloca %Type_Info.Dynamic_Array, align 8
	%28 = alloca %Type_Info.Slice, align 8
	%29 = alloca %Type_Info.Vector, align 8
	%30 = alloca %fmt-4.Fmt_Info, align 8
	%31 = alloca %fmt-4.Fmt_Info, align 8
	%32 = alloca %Type_Info.Map, align 8
	%33 = alloca %Type_Info.Struct, align 8
	%34 = alloca %fmt-4.Fmt_Info, align 8
	%35 = alloca %fmt-4.Fmt_Info, align 8
	%36 = alloca %..string, align 8
	%37 = alloca i64, align 8
	%38 = alloca i64, align 8
	%39 = alloca i64, align 8
	%40 = alloca %Type_Info.Union, align 8
	%41 = alloca {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, align 8
	%42 = alloca i64, align 8
	%43 = alloca %..string, align 8
	%44 = alloca i64, align 8
	%45 = alloca i64, align 8
	%46 = alloca i64, align 8
	%47 = alloca %..string, align 8
	%48 = alloca i64, align 8
	%49 = alloca i64, align 8
	%50 = alloca i64, align 8
	%51 = alloca %Type_Info*, align 8
	%52 = alloca %Type_Info.Struct*, align 8
	%53 = alloca {%Type_Info.Struct*, i1}, align 8
	%54 = alloca i64, align 8
	%55 = alloca i64, align 8
	%56 = alloca i64, align 8
	%57 = alloca i64, align 8
	%58 = alloca i64, align 8
	%59 = alloca %Type_Info.Raw_Union, align 8
	%60 = alloca %..string, align 8
	%61 = alloca i64, align 8
	%62 = alloca i64, align 8
	%63 = alloca i64, align 8
	%64 = alloca %Type_Info.Enum, align 8
	%65 = alloca %..string, align 8
	%66 = alloca i64, align 8
	%67 = alloca i64, align 8
	%68 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store %Type_Info* zeroinitializer, %Type_Info** %1
		store %Type_Info* %ti, %Type_Info** %1
	; IfStmt
	%69 = load %Type_Info*, %Type_Info** %1, align 8
	%70 = icmp eq %Type_Info* %69, zeroinitializer
	br i1 %70, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; TypeMatchStmt
	%71 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%72 = getelementptr inbounds %Type_Info, %Type_Info* %71, i64 0, i32 2 ; UnionTagPtr
	%73 = load i64, i64* %72, align 8
	%74 = bitcast %Type_Info* %71 to %..rawptr
	%75 = icmp eq i64 %73, 1
	br i1 %75, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	%76 = icmp eq i64 %73, 2
	br i1 %76, label %typematch.body-6, label %typematch.next-5

typematch.body-4:
	%77 = bitcast %..rawptr %74 to %Type_Info.Named*
	%78 = load %Type_Info.Named, %Type_Info.Named* %77, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %2
	store %Type_Info.Named %78, %Type_Info.Named* %2
	%79 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%80 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2, i64 0, i32 0
	%81 = load %..string, %..string* %80, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %79, %..string %81)
	br label %typematch.done-115

typematch.next-5:
	%82 = icmp eq i64 %73, 3
	br i1 %82, label %typematch.body-16, label %typematch.next-15

typematch.body-6:
	%83 = bitcast %..rawptr %74 to %Type_Info.Integer*
	%84 = load %Type_Info.Integer, %Type_Info.Integer* %83, align 8
	store %Type_Info.Integer zeroinitializer, %Type_Info.Integer* %3
	store %Type_Info.Integer %84, %Type_Info.Integer* %3
	; MatchStmt
	%85 = load %Type_Info*, %Type_Info** %1, align 8
	%86 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%87 = icmp eq %Type_Info* %85, %86
	%88 = icmp eq i1 true, %87
	br i1 %88, label %match.case.body-8, label %match.case.next-7

match.case.next-7:
	%89 = load %Type_Info*, %Type_Info** %1, align 8
	%90 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	%91 = icmp eq %Type_Info* %89, %90
	%92 = icmp eq i1 true, %91
	br i1 %92, label %match.fall.body-10, label %match.case.next-9

match.case.body-8:
	%93 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %93, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$5b, i64 0, i32 0), i64 3})
	br label %match.done-14

match.case.next-9:
	%94 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; TernaryExpr
	; SelectorExpr
	%95 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %3, i64 0, i32 1
	%96 = load i1, i1* %95, align 1
	br i1 %96, label %if.then-11, label %if.else-12

match.fall.body-10:
	%97 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %97, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$5c, i64 0, i32 0), i64 4})
	br label %match.done-14

if.then-11:
	br label %if.done-13

if.else-12:
	br label %if.done-13

if.done-13:
	%98 = phi %..string [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$5d, i64 0, i32 0), i64 1}, %if.then-11 ], [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$5e, i64 0, i32 0), i64 1}, %if.else-12 ]
	call void @.fmt-4.write_string({i8*, i64, i64}* %94, %..string %98)
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %4
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %5
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %5
	%99 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%100 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, i64 0, i32 3
	store {i8*, i64, i64}* %99, {i8*, i64, i64}** %100
	%101 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, align 8
	store %fmt-4.Fmt_Info %101, %fmt-4.Fmt_Info* %4
	%102 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %4, i64 0
	; SelectorExpr
	%103 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %3, i64 0, i32 0
	%104 = load i64, i64* %103, align 8
	%105 = mul i64 8, %104
	; cast - cast
	%106 = bitcast i64 %105 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %102, i64 %106, i1 false, i64 64, i32 100)
	br label %match.done-14

match.done-14:
	br label %typematch.done-115

typematch.next-15:
	%107 = icmp eq i64 %73, 4
	br i1 %107, label %typematch.body-23, label %typematch.next-22

typematch.body-16:
	%108 = bitcast %..rawptr %74 to %Type_Info.Float*
	%109 = load %Type_Info.Float, %Type_Info.Float* %108, align 8
	store %Type_Info.Float zeroinitializer, %Type_Info.Float* %6
	store %Type_Info.Float %109, %Type_Info.Float* %6
	; MatchStmt
	; SelectorExpr
	%110 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %6, i64 0, i32 0
	%111 = load i64, i64* %110, align 8
	%112 = icmp eq i64 %111, 4
	br i1 %112, label %match.case.body-18, label %match.case.next-17

match.case.next-17:
	%113 = icmp eq i64 %111, 8
	br i1 %113, label %match.fall.body-20, label %match.case.next-19

match.case.body-18:
	%114 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %114, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$5f, i64 0, i32 0), i64 3})
	br label %match.done-21

match.case.next-19:
	br label %match.done-21

match.fall.body-20:
	%115 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %115, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$60, i64 0, i32 0), i64 3})
	br label %match.done-21

match.done-21:
	br label %typematch.done-115

typematch.next-22:
	%116 = icmp eq i64 %73, 5
	br i1 %116, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%117 = bitcast %..rawptr %74 to %Type_Info.String*
	%118 = load %Type_Info.String, %Type_Info.String* %117, align 1
	store %Type_Info.String zeroinitializer, %Type_Info.String* %7
	store %Type_Info.String %118, %Type_Info.String* %7
	%119 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %119, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$61, i64 0, i32 0), i64 6})
	br label %typematch.done-115

typematch.next-24:
	%120 = icmp eq i64 %73, 7
	br i1 %120, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%121 = bitcast %..rawptr %74 to %Type_Info.Boolean*
	%122 = load %Type_Info.Boolean, %Type_Info.Boolean* %121, align 1
	store %Type_Info.Boolean zeroinitializer, %Type_Info.Boolean* %8
	store %Type_Info.Boolean %122, %Type_Info.Boolean* %8
	%123 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %123, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$62, i64 0, i32 0), i64 4})
	br label %typematch.done-115

typematch.next-26:
	%124 = icmp eq i64 %73, 8
	br i1 %124, label %typematch.body-32, label %typematch.next-31

typematch.body-27:
	%125 = bitcast %..rawptr %74 to %Type_Info.Pointer*
	%126 = load %Type_Info.Pointer, %Type_Info.Pointer* %125, align 8
	store %Type_Info.Pointer zeroinitializer, %Type_Info.Pointer* %9
	store %Type_Info.Pointer %126, %Type_Info.Pointer* %9
	; IfStmt
	; SelectorExpr
	%127 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %9, i64 0, i32 0
	%128 = load %Type_Info*, %Type_Info** %127, align 8
	%129 = icmp eq %Type_Info* %128, zeroinitializer
	br i1 %129, label %if.then-28, label %if.else-29

if.then-28:
	%130 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %130, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$63, i64 0, i32 0), i64 6})
	br label %if.done-30

if.else-29:
	%131 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %131, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$64, i64 0, i32 0), i64 1})
	%132 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%133 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %9, i64 0, i32 0
	%134 = load %Type_Info*, %Type_Info** %133, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %132, %Type_Info* %134)
	br label %if.done-30

if.done-30:
	br label %typematch.done-115

typematch.next-31:
	%135 = icmp eq i64 %73, 13
	br i1 %135, label %typematch.body-46, label %typematch.next-45

typematch.body-32:
	%136 = bitcast %..rawptr %74 to %Type_Info.Procedure*
	%137 = load %Type_Info.Procedure, %Type_Info.Procedure* %136, align 8
	store %Type_Info.Procedure zeroinitializer, %Type_Info.Procedure* %10
	store %Type_Info.Procedure %137, %Type_Info.Procedure* %10
	%138 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %138, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$65, i64 0, i32 0), i64 4})
	; IfStmt
	; SelectorExpr
	%139 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %10, i64 0, i32 0
	%140 = load %Type_Info*, %Type_Info** %139, align 8
	%141 = icmp eq %Type_Info* %140, zeroinitializer
	br i1 %141, label %if.then-33, label %if.else-34

if.then-33:
	%142 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %142, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$66, i64 0, i32 0), i64 2})
	br label %if.done-42

if.else-34:
	; t
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %11
		; SelectorExpr
	%143 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %10, i64 0, i32 0
	%144 = load %Type_Info*, %Type_Info** %143, align 8
	; cast - union_cast
	store {%Type_Info.Tuple*, i1} zeroinitializer, {%Type_Info.Tuple*, i1}* %12
	%145 = getelementptr inbounds %Type_Info, %Type_Info* %144, i64 0, i32 2 ; UnionTagPtr
	%146 = load i64, i64* %145, align 8
	%147 = icmp eq i64 %146, 13
	br i1 %147, label %union_cast.ok-35, label %union_cast.end-36

union_cast.ok-35:
	%148 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %12, i64 0, i32 0
	%149 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %12, i64 0, i32 1
	%150 = bitcast %Type_Info* %144 to %Type_Info.Tuple*
	store %Type_Info.Tuple* %150, %Type_Info.Tuple** %148
	store i1 true, i1* %149
	br label %union_cast.end-36

union_cast.end-36:
	%151 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %12, i64 0, i32 1
	%152 = load i1, i1* %151, align 1
	%153 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%154 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	call void @.__union_cast_check(i1 %152, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$67, i64 0, i32 0), i64 21}, i64 127, i64 9, %Type_Info* %153, %Type_Info* %154)
	%155 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %12, i64 0, i32 0
	%156 = load %Type_Info.Tuple*, %Type_Info.Tuple** %155, align 8
	store %Type_Info.Tuple* %156, %Type_Info.Tuple** %11
	%157 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %157, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$68, i64 0, i32 0), i64 1})
	; RangeStmt
	; type
	store %Type_Info* zeroinitializer, %Type_Info** %13
		; i
	store i64 zeroinitializer, i64* %14
		; SelectorExpr
	%158 = load %Type_Info.Tuple*, %Type_Info.Tuple** %11, align 8
	%159 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %158, i64 0
	%160 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %159, i64 0, i32 0
	%161 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %160, i64 0, i32 0
	%162 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %161, align 8
	store i64 zeroinitializer, i64* %15
	%163 = extractvalue {%Type_Info**, i64, i64} %162, 1
	store i64 %163, i64* %15
	store i64 zeroinitializer, i64* %16
	store i64 -1, i64* %16
	br label %for.index.loop-37

for.index.loop-37:
	%164 = load i64, i64* %16, align 8
	%165 = add i64 %164, 1
	store i64 %165, i64* %16
	%166 = load i64, i64* %15, align 8
	%167 = icmp slt i64 %165, %166
	br i1 %167, label %for.index.body-38, label %for.index.done-41

for.index.body-38:
	%168 = load i64, i64* %16, align 8
	%169 = extractvalue {%Type_Info**, i64, i64} %162, 0
	%170 = getelementptr inbounds %Type_Info*, %Type_Info** %169, i64 %168
	%171 = load %Type_Info*, %Type_Info** %170, align 8
	store %Type_Info* %171, %Type_Info** %13
	store i64 %168, i64* %14
	; IfStmt
	%172 = load i64, i64* %14, align 8
	%173 = icmp sgt i64 %172, 0
	br i1 %173, label %if.then-39, label %if.done-40

if.then-39:
	%174 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %174, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$69, i64 0, i32 0), i64 2})
	br label %if.done-40

if.done-40:
	%175 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%176 = load %Type_Info*, %Type_Info** %13, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %175, %Type_Info* %176)
	br label %for.index.loop-37

for.index.done-41:
	%177 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %177, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$6a, i64 0, i32 0), i64 1})
	br label %if.done-42

if.done-42:
	; IfStmt
	; SelectorExpr
	%178 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %10, i64 0, i32 1
	%179 = load %Type_Info*, %Type_Info** %178, align 8
	%180 = icmp ne %Type_Info* %179, zeroinitializer
	br i1 %180, label %if.then-43, label %if.done-44

if.then-43:
	%181 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %181, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$6b, i64 0, i32 0), i64 4})
	%182 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%183 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %10, i64 0, i32 1
	%184 = load %Type_Info*, %Type_Info** %183, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %182, %Type_Info* %184)
	br label %if.done-44

if.done-44:
	br label %typematch.done-115

typematch.next-45:
	%185 = icmp eq i64 %73, 9
	br i1 %185, label %typematch.body-59, label %typematch.next-58

typematch.body-46:
	%186 = bitcast %..rawptr %74 to %Type_Info.Tuple*
	%187 = load %Type_Info.Tuple, %Type_Info.Tuple* %186, align 8
	store %Type_Info.Tuple zeroinitializer, %Type_Info.Tuple* %17
	store %Type_Info.Tuple %187, %Type_Info.Tuple* %17
	; count
	store i64 zeroinitializer, i64* %18
		; SelectorExpr
	; SelectorExpr
	%188 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %17, i64 0, i32 0
	%189 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %188, i64 0, i32 1
	%190 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %189, i64 0, i32 1
	%191 = load i64, i64* %190, align 8
	store i64 %191, i64* %18
	; IfStmt
	%192 = load i64, i64* %18, align 8
	%193 = icmp ne i64 %192, 1
	br i1 %193, label %if.then-47, label %if.done-48

if.then-47:
	%194 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %194, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$6c, i64 0, i32 0), i64 1})
	br label %if.done-48

if.done-48:
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %19
		; i
	store i64 zeroinitializer, i64* %20
		; SelectorExpr
	%195 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %17, i64 0, i32 0
	%196 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %195, i64 0, i32 1
	%197 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %196, align 8
	store i64 zeroinitializer, i64* %21
	%198 = extractvalue {%..string*, i64, i64} %197, 1
	store i64 %198, i64* %21
	store i64 zeroinitializer, i64* %22
	store i64 -1, i64* %22
	br label %for.index.loop-49

for.index.loop-49:
	%199 = load i64, i64* %22, align 8
	%200 = add i64 %199, 1
	store i64 %200, i64* %22
	%201 = load i64, i64* %21, align 8
	%202 = icmp slt i64 %200, %201
	br i1 %202, label %for.index.body-50, label %for.index.done-55

for.index.body-50:
	%203 = load i64, i64* %22, align 8
	%204 = extractvalue {%..string*, i64, i64} %197, 0
	%205 = getelementptr inbounds %..string, %..string* %204, i64 %203
	%206 = load %..string, %..string* %205, align 8
	store %..string %206, %..string* %19
	store i64 %203, i64* %20
	; IfStmt
	%207 = load i64, i64* %20, align 8
	%208 = icmp sgt i64 %207, 0
	br i1 %208, label %if.then-51, label %if.done-52

if.then-51:
	%209 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %209, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$6d, i64 0, i32 0), i64 2})
	br label %if.done-52

if.done-52:
	; type
	store %Type_Info* zeroinitializer, %Type_Info** %23
		; IndexExpr
	; SelectorExpr
	%210 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %17, i64 0, i32 0
	%211 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %210, i64 0, i32 0
	%212 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %211, align 8
	%213 = extractvalue {%Type_Info**, i64, i64} %212, 0
	%214 = extractvalue {%Type_Info**, i64, i64} %212, 1
	%215 = load i64, i64* %20, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$6e, i64 0, i32 0), i64 21}, i64 145, i64 23, i64 %215, i64 %214)
	%216 = getelementptr inbounds %Type_Info*, %Type_Info** %213, i64 %215
	%217 = load %Type_Info*, %Type_Info** %216, align 8
	store %Type_Info* %217, %Type_Info** %23
	; IfStmt
	; SelectorExpr
	%218 = getelementptr inbounds %..string, %..string* %19, i64 0, i32 1
	%219 = load i64, i64* %218, align 8
	%220 = icmp sgt i64 %219, 0
	br i1 %220, label %if.then-53, label %if.done-54

if.then-53:
	%221 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%222 = load %..string, %..string* %19, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %221, %..string %222)
	%223 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %223, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$6f, i64 0, i32 0), i64 2})
	br label %if.done-54

if.done-54:
	%224 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%225 = load %Type_Info*, %Type_Info** %23, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %224, %Type_Info* %225)
	br label %for.index.loop-49

for.index.done-55:
	; IfStmt
	%226 = load i64, i64* %18, align 8
	%227 = icmp ne i64 %226, 1
	br i1 %227, label %if.then-56, label %if.done-57

if.then-56:
	%228 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %228, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$70, i64 0, i32 0), i64 1})
	br label %if.done-57

if.done-57:
	br label %typematch.done-115

typematch.next-58:
	%229 = icmp eq i64 %73, 10
	br i1 %229, label %typematch.body-61, label %typematch.next-60

typematch.body-59:
	%230 = bitcast %..rawptr %74 to %Type_Info.Array*
	%231 = load %Type_Info.Array, %Type_Info.Array* %230, align 8
	store %Type_Info.Array zeroinitializer, %Type_Info.Array* %24
	store %Type_Info.Array %231, %Type_Info.Array* %24
	%232 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %232, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$71, i64 0, i32 0), i64 1})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %25
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %26
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %26
	%233 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%234 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %26, i64 0, i32 3
	store {i8*, i64, i64}* %233, {i8*, i64, i64}** %234
	%235 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %26, align 8
	store %fmt-4.Fmt_Info %235, %fmt-4.Fmt_Info* %25
	%236 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0
	; SelectorExpr
	%237 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %24, i64 0, i32 2
	%238 = load i64, i64* %237, align 8
	; cast - cast
	%239 = bitcast i64 %238 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %236, i64 %239, i1 false, i64 64, i32 100)
	%240 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %240, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$72, i64 0, i32 0), i64 1})
	%241 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%242 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %24, i64 0, i32 0
	%243 = load %Type_Info*, %Type_Info** %242, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %241, %Type_Info* %243)
	br label %typematch.done-115

typematch.next-60:
	%244 = icmp eq i64 %73, 11
	br i1 %244, label %typematch.body-63, label %typematch.next-62

typematch.body-61:
	%245 = bitcast %..rawptr %74 to %Type_Info.Dynamic_Array*
	%246 = load %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %245, align 8
	store %Type_Info.Dynamic_Array zeroinitializer, %Type_Info.Dynamic_Array* %27
	store %Type_Info.Dynamic_Array %246, %Type_Info.Dynamic_Array* %27
	%247 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %247, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$73, i64 0, i32 0), i64 4})
	%248 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%249 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %27, i64 0, i32 0
	%250 = load %Type_Info*, %Type_Info** %249, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %248, %Type_Info* %250)
	br label %typematch.done-115

typematch.next-62:
	%251 = icmp eq i64 %73, 12
	br i1 %251, label %typematch.body-65, label %typematch.next-64

typematch.body-63:
	%252 = bitcast %..rawptr %74 to %Type_Info.Slice*
	%253 = load %Type_Info.Slice, %Type_Info.Slice* %252, align 8
	store %Type_Info.Slice zeroinitializer, %Type_Info.Slice* %28
	store %Type_Info.Slice %253, %Type_Info.Slice* %28
	%254 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %254, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$74, i64 0, i32 0), i64 1})
	%255 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %255, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$75, i64 0, i32 0), i64 1})
	%256 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%257 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %28, i64 0, i32 0
	%258 = load %Type_Info*, %Type_Info** %257, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %256, %Type_Info* %258)
	br label %typematch.done-115

typematch.next-64:
	%259 = icmp eq i64 %73, 18
	br i1 %259, label %typematch.body-67, label %typematch.next-66

typematch.body-65:
	%260 = bitcast %..rawptr %74 to %Type_Info.Vector*
	%261 = load %Type_Info.Vector, %Type_Info.Vector* %260, align 8
	store %Type_Info.Vector zeroinitializer, %Type_Info.Vector* %29
	store %Type_Info.Vector %261, %Type_Info.Vector* %29
	%262 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %262, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$76, i64 0, i32 0), i64 8})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %30
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %31
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %31
	%263 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%264 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %31, i64 0, i32 3
	store {i8*, i64, i64}* %263, {i8*, i64, i64}** %264
	%265 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %31, align 8
	store %fmt-4.Fmt_Info %265, %fmt-4.Fmt_Info* %30
	%266 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0
	; SelectorExpr
	%267 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %29, i64 0, i32 2
	%268 = load i64, i64* %267, align 8
	; cast - cast
	%269 = bitcast i64 %268 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %266, i64 %269, i1 false, i64 64, i32 100)
	%270 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %270, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$77, i64 0, i32 0), i64 1})
	%271 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%272 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %29, i64 0, i32 0
	%273 = load %Type_Info*, %Type_Info** %272, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %271, %Type_Info* %273)
	br label %typematch.done-115

typematch.next-66:
	%274 = icmp eq i64 %73, 14
	br i1 %274, label %typematch.body-69, label %typematch.next-68

typematch.body-67:
	%275 = bitcast %..rawptr %74 to %Type_Info.Map*
	%276 = load %Type_Info.Map, %Type_Info.Map* %275, align 8
	store %Type_Info.Map zeroinitializer, %Type_Info.Map* %32
	store %Type_Info.Map %276, %Type_Info.Map* %32
	%277 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %277, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$78, i64 0, i32 0), i64 4})
	%278 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%279 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %32, i64 0, i32 0
	%280 = load %Type_Info*, %Type_Info** %279, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %278, %Type_Info* %280)
	%281 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %281, i8 93)
	%282 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%283 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %32, i64 0, i32 1
	%284 = load %Type_Info*, %Type_Info** %283, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %282, %Type_Info* %284)
	br label %typematch.done-115

typematch.next-68:
	%285 = icmp eq i64 %73, 16
	br i1 %285, label %typematch.body-82, label %typematch.next-81

typematch.body-69:
	%286 = bitcast %..rawptr %74 to %Type_Info.Struct*
	%287 = load %Type_Info.Struct, %Type_Info.Struct* %286, align 8
	store %Type_Info.Struct zeroinitializer, %Type_Info.Struct* %33
	store %Type_Info.Struct %287, %Type_Info.Struct* %33
	%288 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %288, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$79, i64 0, i32 0), i64 7})
	; IfStmt
	; SelectorExpr
	%289 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %33, i64 0, i32 0
	%290 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %289, i64 0, i32 5
	%291 = load i1, i1* %290, align 1
	br i1 %291, label %if.then-70, label %if.done-71

if.then-70:
	%292 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %292, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$7a, i64 0, i32 0), i64 8})
	br label %if.done-71

if.done-71:
	; IfStmt
	; SelectorExpr
	%293 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %33, i64 0, i32 0
	%294 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %293, i64 0, i32 6
	%295 = load i1, i1* %294, align 1
	br i1 %295, label %if.then-72, label %if.done-73

if.then-72:
	%296 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %296, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$7b, i64 0, i32 0), i64 9})
	br label %if.done-73

if.done-73:
	; IfStmt
	; SelectorExpr
	%297 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %33, i64 0, i32 0
	%298 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %297, i64 0, i32 7
	%299 = load i1, i1* %298, align 1
	br i1 %299, label %if.then-74, label %if.done-75

if.then-74:
	%300 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %300, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$7c, i64 0, i32 0), i64 7})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %34
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %35
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %35
	%301 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%302 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %35, i64 0, i32 3
	store {i8*, i64, i64}* %301, {i8*, i64, i64}** %302
	%303 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %35, align 8
	store %fmt-4.Fmt_Info %303, %fmt-4.Fmt_Info* %34
	%304 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0
	; SelectorExpr
	%305 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %33, i64 0, i32 0
	%306 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %305, i64 0, i32 4
	%307 = load i64, i64* %306, align 8
	; cast - cast
	%308 = bitcast i64 %307 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %304, i64 %308, i1 false, i64 64, i32 100)
	%309 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %309, i8 32)
	br label %if.done-75

if.done-75:
	%310 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %310, i8 123)
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %36
		; i
	store i64 zeroinitializer, i64* %37
		; SelectorExpr
	%311 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %33, i64 0, i32 0
	%312 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %311, i64 0, i32 1
	%313 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %312, align 8
	store i64 zeroinitializer, i64* %38
	%314 = extractvalue {%..string*, i64, i64} %313, 1
	store i64 %314, i64* %38
	store i64 zeroinitializer, i64* %39
	store i64 -1, i64* %39
	br label %for.index.loop-76

for.index.loop-76:
	%315 = load i64, i64* %39, align 8
	%316 = add i64 %315, 1
	store i64 %316, i64* %39
	%317 = load i64, i64* %38, align 8
	%318 = icmp slt i64 %316, %317
	br i1 %318, label %for.index.body-77, label %for.index.done-80

for.index.body-77:
	%319 = load i64, i64* %39, align 8
	%320 = extractvalue {%..string*, i64, i64} %313, 0
	%321 = getelementptr inbounds %..string, %..string* %320, i64 %319
	%322 = load %..string, %..string* %321, align 8
	store %..string %322, %..string* %36
	store i64 %319, i64* %37
	; IfStmt
	%323 = load i64, i64* %37, align 8
	%324 = icmp sgt i64 %323, 0
	br i1 %324, label %if.then-78, label %if.done-79

if.then-78:
	%325 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %325, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$7d, i64 0, i32 0), i64 2})
	br label %if.done-79

if.done-79:
	%326 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%327 = load %..string, %..string* %36, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %326, %..string %327)
	%328 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %328, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$7e, i64 0, i32 0), i64 2})
	%329 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%330 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %33, i64 0, i32 0
	%331 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %330, i64 0, i32 0
	%332 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %331, align 8
	%333 = extractvalue {%Type_Info**, i64, i64} %332, 0
	%334 = extractvalue {%Type_Info**, i64, i64} %332, 1
	%335 = load i64, i64* %37, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$7f, i64 0, i32 0), i64 21}, i64 198, i64 31, i64 %335, i64 %334)
	%336 = getelementptr inbounds %Type_Info*, %Type_Info** %333, i64 %335
	%337 = load %Type_Info*, %Type_Info** %336, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %329, %Type_Info* %337)
	br label %for.index.loop-76

for.index.done-80:
	%338 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %338, i8 125)
	br label %typematch.done-115

typematch.next-81:
	%339 = icmp eq i64 %73, 15
	br i1 %339, label %typematch.body-102, label %typematch.next-101

typematch.body-82:
	%340 = bitcast %..rawptr %74 to %Type_Info.Union*
	%341 = load %Type_Info.Union, %Type_Info.Union* %340, align 8
	store %Type_Info.Union zeroinitializer, %Type_Info.Union* %40
	store %Type_Info.Union %341, %Type_Info.Union* %40
	%342 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %342, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$80, i64 0, i32 0), i64 7})
	; cf
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} zeroinitializer, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %41
		; SelectorExpr
	%343 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %40, i64 0, i32 0
	%344 = load {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %343, align 8
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} %344, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %41
	; total_count
	store i64 zeroinitializer, i64* %42
		store i64 0, i64* %42
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %43
		; i
	store i64 zeroinitializer, i64* %44
		; SelectorExpr
	%345 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %41, i64 0, i32 1
	%346 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %345, align 8
	store i64 zeroinitializer, i64* %45
	%347 = extractvalue {%..string*, i64, i64} %346, 1
	store i64 %347, i64* %45
	store i64 zeroinitializer, i64* %46
	store i64 -1, i64* %46
	br label %for.index.loop-83

for.index.loop-83:
	%348 = load i64, i64* %46, align 8
	%349 = add i64 %348, 1
	store i64 %349, i64* %46
	%350 = load i64, i64* %45, align 8
	%351 = icmp slt i64 %349, %350
	br i1 %351, label %for.index.body-84, label %for.index.done-87

for.index.body-84:
	%352 = load i64, i64* %46, align 8
	%353 = extractvalue {%..string*, i64, i64} %346, 0
	%354 = getelementptr inbounds %..string, %..string* %353, i64 %352
	%355 = load %..string, %..string* %354, align 8
	store %..string %355, %..string* %43
	store i64 %352, i64* %44
	; IfStmt
	%356 = load i64, i64* %44, align 8
	%357 = icmp sgt i64 %356, 0
	br i1 %357, label %if.then-85, label %if.done-86

if.then-85:
	%358 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %358, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$81, i64 0, i32 0), i64 2})
	br label %if.done-86

if.done-86:
	%359 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%360 = load %..string, %..string* %43, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %359, %..string %360)
	%361 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %361, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$82, i64 0, i32 0), i64 2})
	%362 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%363 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %41, i64 0, i32 0
	%364 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %363, align 8
	%365 = extractvalue {%Type_Info**, i64, i64} %364, 0
	%366 = extractvalue {%Type_Info**, i64, i64} %364, 1
	%367 = load i64, i64* %44, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$83, i64 0, i32 0), i64 21}, i64 212, i64 29, i64 %367, i64 %366)
	%368 = getelementptr inbounds %Type_Info*, %Type_Info** %365, i64 %367
	%369 = load %Type_Info*, %Type_Info** %368, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %362, %Type_Info* %369)
	%370 = load i64, i64* %42, align 8
	%371 = add i64 %370, 1
	store i64 %371, i64* %42
	br label %for.index.loop-83

for.index.done-87:
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %47
		; i
	store i64 zeroinitializer, i64* %48
		; SelectorExpr
	%372 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %40, i64 0, i32 1
	%373 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %372, align 8
	store i64 zeroinitializer, i64* %49
	%374 = extractvalue {%..string*, i64, i64} %373, 1
	store i64 %374, i64* %49
	store i64 zeroinitializer, i64* %50
	store i64 -1, i64* %50
	br label %for.index.loop-88

for.index.loop-88:
	%375 = load i64, i64* %50, align 8
	%376 = add i64 %375, 1
	store i64 %376, i64* %50
	%377 = load i64, i64* %49, align 8
	%378 = icmp slt i64 %376, %377
	br i1 %378, label %for.index.body-89, label %for.index.done-100

for.index.body-89:
	%379 = load i64, i64* %50, align 8
	%380 = extractvalue {%..string*, i64, i64} %373, 0
	%381 = getelementptr inbounds %..string, %..string* %380, i64 %379
	%382 = load %..string, %..string* %381, align 8
	store %..string %382, %..string* %47
	store i64 %379, i64* %48
	; IfStmt
	%383 = load i64, i64* %42, align 8
	%384 = icmp sgt i64 %383, 0
	br i1 %384, label %if.then-91, label %cmp.or-90

cmp.or-90:
	%385 = load i64, i64* %48, align 8
	%386 = icmp sgt i64 %385, 0
	br i1 %386, label %if.then-91, label %if.done-92

if.then-91:
	%387 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %387, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$84, i64 0, i32 0), i64 2})
	br label %if.done-92

if.done-92:
	%388 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%389 = load %..string, %..string* %47, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %388, %..string %389)
	%390 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %390, i8 123)
	; DeferStmt
	; variant_type
	store %Type_Info* zeroinitializer, %Type_Info** %51
		; IndexExpr
	; SelectorExpr
	%391 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %40, i64 0, i32 2
	%392 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %391, align 8
	%393 = extractvalue {%Type_Info**, i64, i64} %392, 0
	%394 = extractvalue {%Type_Info**, i64, i64} %392, 1
	%395 = load i64, i64* %48, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$85, i64 0, i32 0), i64 21}, i64 223, i64 54, i64 %395, i64 %394)
	%396 = getelementptr inbounds %Type_Info*, %Type_Info** %393, i64 %395
	%397 = load %Type_Info*, %Type_Info** %396, align 8
	%398 = call %Type_Info* @.type_info_base(%Type_Info* %397)
	store %Type_Info* %398, %Type_Info** %51
	; variant
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %52
		%399 = load %Type_Info*, %Type_Info** %51, align 8
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %53
	%400 = getelementptr inbounds %Type_Info, %Type_Info* %399, i64 0, i32 2 ; UnionTagPtr
	%401 = load i64, i64* %400, align 8
	%402 = icmp eq i64 %401, 14
	br i1 %402, label %union_cast.ok-93, label %union_cast.end-94

union_cast.ok-93:
	%403 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %53, i64 0, i32 0
	%404 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %53, i64 0, i32 1
	%405 = bitcast %Type_Info* %399 to %Type_Info.Struct*
	store %Type_Info.Struct* %405, %Type_Info.Struct** %403
	store i1 true, i1* %404
	br label %union_cast.end-94

union_cast.end-94:
	%406 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %53, i64 0, i32 1
	%407 = load i1, i1* %406, align 1
	%408 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%409 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	call void @.__union_cast_check(i1 %407, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$86, i64 0, i32 0), i64 21}, i64 224, i64 15, %Type_Info* %408, %Type_Info* %409)
	%410 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %53, i64 0, i32 0
	%411 = load %Type_Info.Struct*, %Type_Info.Struct** %410, align 8
	store %Type_Info.Struct* %411, %Type_Info.Struct** %52
	; vc
	store i64 zeroinitializer, i64* %54
		; SelectorExpr
	; SelectorExpr
	%412 = load %Type_Info.Struct*, %Type_Info.Struct** %52, align 8
	%413 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %412, i64 0
	%414 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %413, i64 0, i32 0
	%415 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %414, i64 0, i32 1
	%416 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %415, i64 0, i32 1
	%417 = load i64, i64* %416, align 8
	; SelectorExpr
	; SelectorExpr
	%418 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %41, i64 0, i32 1
	%419 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %418, i64 0, i32 1
	%420 = load i64, i64* %419, align 8
	%421 = sub i64 %417, %420
	store i64 %421, i64* %54
	; RangeStmt
	; j
	store i64 zeroinitializer, i64* %55
		store i64 zeroinitializer, i64* %56
	store i64 0, i64* %56
	store i64 zeroinitializer, i64* %57
	store i64 0, i64* %57
	br label %for.interval.loop-95

for.interval.loop-95:
	%422 = load i64, i64* %54, align 8
	%423 = load i64, i64* %56, align 8
	%424 = icmp slt i64 %423, %422
	br i1 %424, label %for.interval.body-96, label %for.interval.done-99

for.interval.body-96:
	%425 = load i64, i64* %56, align 8
	%426 = load i64, i64* %57, align 8
	%427 = load i64, i64* %56, align 8
	%428 = add i64 %427, 1
	store i64 %428, i64* %56
	%429 = load i64, i64* %57, align 8
	%430 = add i64 %429, 1
	store i64 %430, i64* %57
	store i64 %425, i64* %55
	; IfStmt
	%431 = load i64, i64* %55, align 8
	%432 = icmp sgt i64 %431, 0
	br i1 %432, label %if.then-97, label %if.done-98

if.then-97:
	%433 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %433, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$87, i64 0, i32 0), i64 2})
	br label %if.done-98

if.done-98:
	; index
	store i64 zeroinitializer, i64* %58
		%434 = load i64, i64* %55, align 8
	; SelectorExpr
	; SelectorExpr
	%435 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %41, i64 0, i32 1
	%436 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %435, i64 0, i32 1
	%437 = load i64, i64* %436, align 8
	%438 = add i64 %434, %437
	store i64 %438, i64* %58
	%439 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%440 = load %Type_Info.Struct*, %Type_Info.Struct** %52, align 8
	%441 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %440, i64 0
	%442 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %441, i64 0, i32 0
	%443 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %442, i64 0, i32 1
	%444 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %443, align 8
	%445 = extractvalue {%..string*, i64, i64} %444, 0
	%446 = extractvalue {%..string*, i64, i64} %444, 1
	%447 = load i64, i64* %58, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$88, i64 0, i32 0), i64 21}, i64 232, i64 37, i64 %447, i64 %446)
	%448 = getelementptr inbounds %..string, %..string* %445, i64 %447
	%449 = load %..string, %..string* %448, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %439, %..string %449)
	%450 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %450, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$89, i64 0, i32 0), i64 2})
	%451 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%452 = load %Type_Info.Struct*, %Type_Info.Struct** %52, align 8
	%453 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %452, i64 0
	%454 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %453, i64 0, i32 0
	%455 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %454, i64 0, i32 0
	%456 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %455, align 8
	%457 = extractvalue {%Type_Info**, i64, i64} %456, 0
	%458 = extractvalue {%Type_Info**, i64, i64} %456, 1
	%459 = load i64, i64* %58, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$8a, i64 0, i32 0), i64 21}, i64 234, i64 35, i64 %459, i64 %458)
	%460 = getelementptr inbounds %Type_Info*, %Type_Info** %457, i64 %459
	%461 = load %Type_Info*, %Type_Info** %460, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %451, %Type_Info* %461)
	br label %for.interval.loop-95

for.interval.done-99:
	; defer
	%462 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %462, i8 125)
	br label %for.index.loop-88

for.index.done-100:
	%463 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %463, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$8b, i64 0, i32 0), i64 1})
	br label %typematch.done-115

typematch.next-101:
	%464 = icmp eq i64 %73, 17
	br i1 %464, label %typematch.body-109, label %typematch.next-108

typematch.body-102:
	%465 = bitcast %..rawptr %74 to %Type_Info.Raw_Union*
	%466 = load %Type_Info.Raw_Union, %Type_Info.Raw_Union* %465, align 8
	store %Type_Info.Raw_Union zeroinitializer, %Type_Info.Raw_Union* %59
	store %Type_Info.Raw_Union %466, %Type_Info.Raw_Union* %59
	%467 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %467, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$8c, i64 0, i32 0), i64 11})
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %60
		; i
	store i64 zeroinitializer, i64* %61
		; SelectorExpr
	%468 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %59, i64 0, i32 0
	%469 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %468, i64 0, i32 1
	%470 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %469, align 8
	store i64 zeroinitializer, i64* %62
	%471 = extractvalue {%..string*, i64, i64} %470, 1
	store i64 %471, i64* %62
	store i64 zeroinitializer, i64* %63
	store i64 -1, i64* %63
	br label %for.index.loop-103

for.index.loop-103:
	%472 = load i64, i64* %63, align 8
	%473 = add i64 %472, 1
	store i64 %473, i64* %63
	%474 = load i64, i64* %62, align 8
	%475 = icmp slt i64 %473, %474
	br i1 %475, label %for.index.body-104, label %for.index.done-107

for.index.body-104:
	%476 = load i64, i64* %63, align 8
	%477 = extractvalue {%..string*, i64, i64} %470, 0
	%478 = getelementptr inbounds %..string, %..string* %477, i64 %476
	%479 = load %..string, %..string* %478, align 8
	store %..string %479, %..string* %60
	store i64 %476, i64* %61
	; IfStmt
	%480 = load i64, i64* %61, align 8
	%481 = icmp sgt i64 %480, 0
	br i1 %481, label %if.then-105, label %if.done-106

if.then-105:
	%482 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %482, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$8d, i64 0, i32 0), i64 2})
	br label %if.done-106

if.done-106:
	%483 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%484 = load %..string, %..string* %60, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %483, %..string %484)
	%485 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %485, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$8e, i64 0, i32 0), i64 2})
	%486 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%487 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %59, i64 0, i32 0
	%488 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %487, i64 0, i32 0
	%489 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %488, align 8
	%490 = extractvalue {%Type_Info**, i64, i64} %489, 0
	%491 = extractvalue {%Type_Info**, i64, i64} %489, 1
	%492 = load i64, i64* %61, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$8f, i64 0, i32 0), i64 21}, i64 247, i64 31, i64 %492, i64 %491)
	%493 = getelementptr inbounds %Type_Info*, %Type_Info** %490, i64 %492
	%494 = load %Type_Info*, %Type_Info** %493, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %486, %Type_Info* %494)
	br label %for.index.loop-103

for.index.done-107:
	%495 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %495, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$90, i64 0, i32 0), i64 1})
	br label %typematch.done-115

typematch.next-108:
	br label %typematch.done-115

typematch.body-109:
	%496 = bitcast %..rawptr %74 to %Type_Info.Enum*
	%497 = load %Type_Info.Enum, %Type_Info.Enum* %496, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %64
	store %Type_Info.Enum %497, %Type_Info.Enum* %64
	%498 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %498, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$91, i64 0, i32 0), i64 5})
	%499 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%500 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %64, i64 0, i32 0
	%501 = load %Type_Info*, %Type_Info** %500, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %499, %Type_Info* %501)
	%502 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %502, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$92, i64 0, i32 0), i64 2})
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %65
		; i
	store i64 zeroinitializer, i64* %66
		; SelectorExpr
	%503 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %64, i64 0, i32 1
	%504 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %503, align 8
	store i64 zeroinitializer, i64* %67
	%505 = extractvalue {%..string*, i64, i64} %504, 1
	store i64 %505, i64* %67
	store i64 zeroinitializer, i64* %68
	store i64 -1, i64* %68
	br label %for.index.loop-110

for.index.loop-110:
	%506 = load i64, i64* %68, align 8
	%507 = add i64 %506, 1
	store i64 %507, i64* %68
	%508 = load i64, i64* %67, align 8
	%509 = icmp slt i64 %507, %508
	br i1 %509, label %for.index.body-111, label %for.index.done-114

for.index.body-111:
	%510 = load i64, i64* %68, align 8
	%511 = extractvalue {%..string*, i64, i64} %504, 0
	%512 = getelementptr inbounds %..string, %..string* %511, i64 %510
	%513 = load %..string, %..string* %512, align 8
	store %..string %513, %..string* %65
	store i64 %510, i64* %66
	; IfStmt
	%514 = load i64, i64* %66, align 8
	%515 = icmp sgt i64 %514, 0
	br i1 %515, label %if.then-112, label %if.done-113

if.then-112:
	%516 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %516, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$93, i64 0, i32 0), i64 2})
	br label %if.done-113

if.done-113:
	%517 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%518 = load %..string, %..string* %65, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %517, %..string %518)
	br label %for.index.loop-110

for.index.done-114:
	%519 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %519, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$94, i64 0, i32 0), i64 1})
	br label %typematch.done-115

typematch.done-115:
	ret void
}

define i64 @.fmt-4.bprint({i8*, i64, i64}* %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca %fmt-4.Fmt_Info, align 8
	%3 = alloca i1, align 1
	%4 = alloca %..any, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %2
		; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0, i32 3
	%10 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	store {i8*, i64, i64}* %10, {i8*, i64, i64}** %9
	; prev_string
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %4
		; i
	store i64 zeroinitializer, i64* %5
		%11 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %6
	%12 = extractvalue {%..any*, i64, i64} %11, 1
	store i64 %12, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-1

for.index.loop-1:
	%13 = load i64, i64* %7, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %7
	%15 = load i64, i64* %6, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %for.index.body-2, label %for.index.done-9

for.index.body-2:
	%17 = load i64, i64* %7, align 8
	%18 = extractvalue {%..any*, i64, i64} %11, 0
	%19 = getelementptr inbounds %..any, %..any* %18, i64 %17
	%20 = load %..any, %..any* %19, align 8
	store %..any %20, %..any* %4
	store i64 %17, i64* %5
	; is_string
	store i1 zeroinitializer, i1* %8
		; SelectorExpr
	%21 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%22 = load %..rawptr, %..rawptr* %21, align 8
	%23 = icmp ne %..rawptr %22, zeroinitializer
	; SelectorExpr
	%24 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%25 = load %..rawptr, %..rawptr* %24, align 8
	%26 = icmp ne %..rawptr %25, zeroinitializer
	br i1 %26, label %logical.cmp.rhs-3, label %logical.cmp.done-4

logical.cmp.rhs-3:
	; SelectorExpr
	; SelectorExpr
	%27 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%28 = load %Type_Info*, %Type_Info** %27, align 8
	%29 = call i1 @.types-21.is_string(%Type_Info* %28)
	br label %logical.cmp.done-4

logical.cmp.done-4:
	%30 = phi i1 [ false, %for.index.body-2 ], [ %29, %logical.cmp.rhs-3 ]
	store i1 %30, i1* %8
	; IfStmt
	%31 = load i64, i64* %5, align 8
	%32 = icmp sgt i64 %31, 0
	br i1 %32, label %cmp.and-5, label %if.done-8

cmp.and-5:
	%33 = load i1, i1* %8, align 1
	br i1 %33, label %if.done-8, label %cmp.and-6

cmp.and-6:
	%34 = load i1, i1* %3, align 1
	br i1 %34, label %if.done-8, label %if.then-7

if.then-7:
	%35 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %35, i8 32)
	br label %if.done-8

if.done-8:
	%36 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	; IndexExpr
	%37 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%38 = extractvalue {%..any*, i64, i64} %37, 0
	%39 = extractvalue {%..any*, i64, i64} %37, 1
	%40 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$95, i64 0, i32 0), i64 21}, i64 276, i64 23, i64 %40, i64 %39)
	%41 = getelementptr inbounds %..any, %..any* %38, i64 %40
	%42 = load %..any, %..any* %41, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %36, %..any %42, i32 118)
	; AssignStmt
	%43 = load i1, i1* %8, align 1
	store i1 %43, i1* %3
	br label %for.index.loop-1

for.index.done-9:
	; ReturnStmt
	; SelectorExpr
	%44 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%45 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %44, i64 0
	%46 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %45, i64 0, i32 1
	%47 = load i64, i64* %46, align 8
	ret i64 %47
}

define i64 @.fmt-4.bprintln({i8*, i64, i64}* %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca %fmt-4.Fmt_Info, align 8
	%3 = alloca %..any, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %2
		; AssignStmt
	; SelectorExpr
	%7 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0, i32 3
	%8 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	store {i8*, i64, i64}* %8, {i8*, i64, i64}** %7
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %3
		; i
	store i64 zeroinitializer, i64* %4
		%9 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %5
	%10 = extractvalue {%..any*, i64, i64} %9, 1
	store i64 %10, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-1

for.index.loop-1:
	%11 = load i64, i64* %6, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %6
	%13 = load i64, i64* %5, align 8
	%14 = icmp slt i64 %12, %13
	br i1 %14, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%15 = load i64, i64* %6, align 8
	%16 = extractvalue {%..any*, i64, i64} %9, 0
	%17 = getelementptr inbounds %..any, %..any* %16, i64 %15
	%18 = load %..any, %..any* %17, align 8
	store %..any %18, %..any* %3
	store i64 %15, i64* %4
	; IfStmt
	%19 = load i64, i64* %4, align 8
	%20 = icmp sgt i64 %19, 0
	br i1 %20, label %if.then-3, label %if.done-4

if.then-3:
	%21 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %21, i8 32)
	br label %if.done-4

if.done-4:
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	; IndexExpr
	%23 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%24 = extractvalue {%..any*, i64, i64} %23, 0
	%25 = extractvalue {%..any*, i64, i64} %23, 1
	%26 = load i64, i64* %4, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$96, i64 0, i32 0), i64 21}, i64 290, i64 23, i64 %26, i64 %25)
	%27 = getelementptr inbounds %..any, %..any* %24, i64 %26
	%28 = load %..any, %..any* %27, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %22, %..any %28, i32 118)
	br label %for.index.loop-1

for.index.done-5:
	%29 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %29, i8 10)
	; ReturnStmt
	; SelectorExpr
	%30 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%31 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %30, i64 0
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %31, i64 0, i32 1
	%33 = load i64, i64* %32, align 8
	ret i64 %33
}

define %..string @.fmt-4.sprint({i8*, i64, i64} %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca i64, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; count
	store i64 zeroinitializer, i64* %2
		%5 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0
	%6 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%7 = call i64 @.fmt-4.bprint({i8*, i64, i64}* %5, {%..any*, i64, i64} %6)
	store i64 %7, i64* %2
	; ReturnStmt
	; SliceExpr
	%8 = load i64, i64* %2, align 8
	%9 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%10 = extractvalue {i8*, i64, i64} %9, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$97, i64 0, i32 0), i64 21}, i64 298, i64 24, i64 0, i64 %8, i64 %10)
	%11 = extractvalue {i8*, i64, i64} %9, 0
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	%13 = sub i64 %8, 0
	%14 = sub i64 %10, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %12, i8** %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %13, i64* %16
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %14, i64* %17
	%18 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	; cast - cast
	%19 = extractvalue {i8*, i64, i64} %18, 0
	%20 = extractvalue {i8*, i64, i64} %18, 1
	store %..string zeroinitializer, %..string* %4
	%21 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 0
	%22 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 1
	store i8* %19, i8** %21
	store i64 %20, i64* %22
	%23 = load %..string, %..string* %4, align 8
	ret %..string %23
}

define %..string @.fmt-4.sprintf({i8*, i64, i64} %buf, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca i64, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; count
	store i64 zeroinitializer, i64* %3
		%6 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0
	%7 = load %..string, %..string* %1, align 8
	%8 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%9 = call i64 @.fmt-4.bprintf({i8*, i64, i64}* %6, %..string %7, {%..any*, i64, i64} %8)
	store i64 %9, i64* %3
	; ReturnStmt
	; SliceExpr
	%10 = load i64, i64* %3, align 8
	%11 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%12 = extractvalue {i8*, i64, i64} %11, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$98, i64 0, i32 0), i64 21}, i64 306, i64 24, i64 0, i64 %10, i64 %12)
	%13 = extractvalue {i8*, i64, i64} %11, 0
	%14 = getelementptr inbounds i8, i8* %13, i64 0
	%15 = sub i64 %10, 0
	%16 = sub i64 %12, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %14, i8** %17
	%18 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %15, i64* %18
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %16, i64* %19
	%20 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	; cast - cast
	%21 = extractvalue {i8*, i64, i64} %20, 0
	%22 = extractvalue {i8*, i64, i64} %20, 1
	store %..string zeroinitializer, %..string* %5
	%23 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%24 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i8* %21, i8** %23
	store i64 %22, i64* %24
	%25 = load %..string, %..string* %5, align 8
	ret %..string %25
}

define {i64, i64, i1} @.fmt-4.parse_int(%..string %s, i64 %offset) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i32, align 4
	%9 = alloca {i64, i64, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %offset, i64* %1
	; result
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; ok
	store i1 zeroinitializer, i1* %3
		store i1 true, i1* %3
	; i
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	; RangeStmt
	; o
	store i64 zeroinitializer, i64* %5
		%10 = load i64, i64* %1, align 8
	store i64 zeroinitializer, i64* %6
	store i64 %10, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 0, i64* %7
	br label %for.interval.loop-1

for.interval.loop-1:
	; SelectorExpr
	%11 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	%13 = load i64, i64* %6, align 8
	%14 = icmp slt i64 %13, %12
	br i1 %14, label %for.interval.body-2, label %for.interval.done-5

for.interval.body-2:
	%15 = load i64, i64* %6, align 8
	%16 = load i64, i64* %7, align 8
	%17 = load i64, i64* %6, align 8
	%18 = add i64 %17, 1
	store i64 %18, i64* %6
	%19 = load i64, i64* %7, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %7
	store i64 %15, i64* %5
	; c
	store i32 zeroinitializer, i32* %8
		; IndexExpr
	%21 = load %..string, %..string* %0, align 8
	%22 = extractvalue %..string %21, 0
	%23 = extractvalue %..string %21, 1
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %4, align 8
	%26 = add i64 %24, %25
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$99, i64 0, i32 0), i64 21}, i64 322, i64 20, i64 %26, i64 %23)
	%27 = getelementptr inbounds i8, i8* %22, i64 %26
	%28 = load i8, i8* %27, align 1
	; cast - cast
	%29 = zext i8 %28 to i32
	store i32 %29, i32* %8
	; IfStmt
	%30 = load i32, i32* %8, align 4
	%31 = call i1 @.fmt-4.parse_int.is_digit-0(i32 %30)
	br i1 %31, label %if.done-4, label %if.then-3

if.then-3:
	; break
	br label %for.interval.done-5

if.done-4:
	%32 = load i64, i64* %4, align 8
	%33 = add i64 %32, 1
	store i64 %33, i64* %4
	; AssignStmt
	%34 = load i64, i64* %2, align 8
	%35 = mul i64 %34, 10
	store i64 %35, i64* %2
	; AssignStmt
	%36 = load i32, i32* %8, align 4
	%37 = sub i32 %36, 48
	; cast - cast
	%38 = sext i32 %37 to i64
	%39 = load i64, i64* %2, align 8
	%40 = add i64 %39, %38
	store i64 %40, i64* %2
	br label %for.interval.loop-1

for.interval.done-5:
	; ReturnStmt
	%41 = load i64, i64* %2, align 8
	%42 = load i64, i64* %1, align 8
	%43 = load i64, i64* %4, align 8
	%44 = add i64 %42, %43
	%45 = load i64, i64* %4, align 8
	%46 = icmp ne i64 %45, 0
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %9
	%47 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 0
	store i64 %41, i64* %47
	%48 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 1
	store i64 %44, i64* %48
	%49 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 2
	store i1 %46, i1* %49
	%50 = load {i64, i64, i1}, {i64, i64, i1}* %9, align 8
	ret {i64, i64, i1} %50
}

define i1 @.fmt-4.parse_int.is_digit-0(i32 %r) alwaysinline {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %r, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 4
	%2 = icmp sle i32 48, %1
	%3 = load i32, i32* %0, align 4
	%4 = icmp sle i32 48, %3
	br i1 %4, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%5 = load i32, i32* %0, align 4
	%6 = icmp sle i32 %5, 57
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%7 = phi i1 [ false, %decls-0 ], [ %6, %logical.cmp.rhs-1 ]
	ret i1 %7
}

define {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %fi, i64 %arg_index, %..string %format, i64 %offset, i64 %arg_count) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca {i64, i64, i1}, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	%9 = alloca %..string, align 8
	%10 = alloca {i64, i64, i1}, align 8
	%11 = alloca {i64, i64, i1}, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %arg_index, i64* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %format, %..string* %2
	store i64 zeroinitializer, i64* %3
		store i64 %offset, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %arg_count, i64* %4
	; IfStmt
	; SelectorExpr
	%12 = getelementptr inbounds %..string, %..string* %2, i64 0, i32 1
	%13 = load i64, i64* %12, align 8
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 %13, %14
	br i1 %15, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; IndexExpr
	%16 = load %..string, %..string* %2, align 8
	%17 = extractvalue %..string %16, 0
	%18 = extractvalue %..string %16, 1
	%19 = load i64, i64* %3, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$9a, i64 0, i32 0), i64 21}, i64 360, i64 38, i64 %19, i64 %18)
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	%21 = load i8, i8* %20, align 1
	%22 = icmp ne i8 %21, 91
	br i1 %22, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %3, align 8
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %5
	%25 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 0
	store i64 %23, i64* %25
	%26 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 1
	store i64 %24, i64* %26
	%27 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 2
	store i1 false, i1* %27
	%28 = load {i64, i64, i1}, {i64, i64, i1}* %5, align 8
	ret {i64, i64, i1} %28

if.done-3:
	; AssignStmt
	; SelectorExpr
	%29 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0
	%31 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0, i32 11
	store i1 true, i1* %31
	; index
	store i64 zeroinitializer, i64* %6
		; width
	store i64 zeroinitializer, i64* %7
		; ok
	store i1 zeroinitializer, i1* %8
		; SliceExpr
	%32 = load i64, i64* %3, align 8
	%33 = load %..string, %..string* %2, align 8
	%34 = extractvalue %..string %33, 1
	%35 = extractvalue %..string %33, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$9b, i64 0, i32 0), i64 21}, i64 364, i64 45, i64 %32, i64 %34)
	%36 = extractvalue %..string %33, 0
	%37 = getelementptr inbounds i8, i8* %36, i64 %32
	%38 = sub i64 %34, %32
	store %..string zeroinitializer, %..string* %9
	%39 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %37, i8** %39
	%40 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %38, i64* %40
	%41 = load %..string, %..string* %9, align 8
	%42 = call {i64, i64, i1} @.fmt-4._arg_number.parse_arg_number-0(%..string %41)
	%43 = extractvalue {i64, i64, i1} %42, 0
	%44 = extractvalue {i64, i64, i1} %42, 1
	%45 = extractvalue {i64, i64, i1} %42, 2
	store i64 %43, i64* %6
	store i64 %44, i64* %7
	store i1 %45, i1* %8
	; IfStmt
	%46 = load i1, i1* %8, align 1
	br i1 %46, label %cmp.and-4, label %if.done-7

cmp.and-4:
	%47 = load i64, i64* %6, align 8
	%48 = icmp sle i64 0, %47
	br i1 %48, label %cmp.and-5, label %if.done-7

cmp.and-5:
	%49 = load i64, i64* %6, align 8
	%50 = load i64, i64* %4, align 8
	%51 = icmp slt i64 %49, %50
	br i1 %51, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %3, align 8
	%54 = load i64, i64* %7, align 8
	%55 = add i64 %53, %54
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %10
	%56 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 0
	store i64 %52, i64* %56
	%57 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 1
	store i64 %55, i64* %57
	%58 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 2
	store i1 true, i1* %58
	%59 = load {i64, i64, i1}, {i64, i64, i1}* %10, align 8
	ret {i64, i64, i1} %59

if.done-7:
	; AssignStmt
	; SelectorExpr
	%60 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0, i32 12
	store i1 false, i1* %62
	; ReturnStmt
	%63 = load i64, i64* %1, align 8
	%64 = load i64, i64* %3, align 8
	%65 = load i64, i64* %7, align 8
	%66 = add i64 %64, %65
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %11
	%67 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 0
	store i64 %63, i64* %67
	%68 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 1
	store i64 %66, i64* %68
	%69 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 2
	store i1 false, i1* %69
	%70 = load {i64, i64, i1}, {i64, i64, i1}* %11, align 8
	ret {i64, i64, i1} %70
}

define {i64, i64, i1} @.fmt-4._arg_number.parse_arg_number-0(%..string %format) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i64, i64, i1}, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i1, align 1
	%8 = alloca {i64, i64, i1}, align 8
	%9 = alloca {i64, i64, i1}, align 8
	%10 = alloca {i64, i64, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %format, %..string* %0
	; IfStmt
	; SelectorExpr
	%11 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	%13 = icmp slt i64 %12, 3
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %1
	%14 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 0
	store i64 0, i64* %14
	%15 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 1
	store i64 1, i64* %15
	%16 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 2
	store i1 false, i1* %16
	%17 = load {i64, i64, i1}, {i64, i64, i1}* %1, align 8
	ret {i64, i64, i1} %17

if.done-2:
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %2
		store i64 zeroinitializer, i64* %3
	store i64 1, i64* %3
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	br label %for.interval.loop-3

for.interval.loop-3:
	; SelectorExpr
	%18 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%19 = load i64, i64* %18, align 8
	%20 = load i64, i64* %3, align 8
	%21 = icmp slt i64 %20, %19
	br i1 %21, label %for.interval.body-4, label %for.interval.done-10

for.interval.body-4:
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %4, align 8
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	%26 = load i64, i64* %4, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %4
	store i64 %22, i64* %2
	; IfStmt
	; IndexExpr
	%28 = load %..string, %..string* %0, align 8
	%29 = extractvalue %..string %28, 0
	%30 = extractvalue %..string %28, 1
	%31 = load i64, i64* %2, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$9c, i64 0, i32 0), i64 21}, i64 347, i64 14, i64 %31, i64 %30)
	%32 = getelementptr inbounds i8, i8* %29, i64 %31
	%33 = load i8, i8* %32, align 1
	%34 = icmp eq i8 %33, 93
	br i1 %34, label %if.then-5, label %if.done-9

if.then-5:
	; width
	store i64 zeroinitializer, i64* %5
		; new_index
	store i64 zeroinitializer, i64* %6
		; ok
	store i1 zeroinitializer, i1* %7
		%35 = load %..string, %..string* %0, align 8
	%36 = call {i64, i64, i1} @.fmt-4.parse_int(%..string %35, i64 1)
	%37 = extractvalue {i64, i64, i1} %36, 0
	%38 = extractvalue {i64, i64, i1} %36, 1
	%39 = extractvalue {i64, i64, i1} %36, 2
	store i64 %37, i64* %5
	store i64 %38, i64* %6
	store i1 %39, i1* %7
	; IfStmt
	%40 = load i1, i1* %7, align 1
	br i1 %40, label %cmp.or-6, label %if.then-7

cmp.or-6:
	%41 = load i64, i64* %6, align 8
	%42 = load i64, i64* %2, align 8
	%43 = icmp ne i64 %41, %42
	br i1 %43, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	%44 = load i64, i64* %2, align 8
	%45 = add i64 %44, 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %8
	%46 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 0
	store i64 0, i64* %46
	%47 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 1
	store i64 %45, i64* %47
	%48 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 2
	store i1 false, i1* %48
	%49 = load {i64, i64, i1}, {i64, i64, i1}* %8, align 8
	ret {i64, i64, i1} %49

if.done-8:
	; ReturnStmt
	%50 = load i64, i64* %5, align 8
	%51 = sub i64 %50, 1
	%52 = load i64, i64* %2, align 8
	%53 = add i64 %52, 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %9
	%54 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 0
	store i64 %51, i64* %54
	%55 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 1
	store i64 %53, i64* %55
	%56 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 2
	store i1 true, i1* %56
	%57 = load {i64, i64, i1}, {i64, i64, i1}* %9, align 8
	ret {i64, i64, i1} %57

if.done-9:
	br label %for.interval.loop-3

for.interval.done-10:
	; ReturnStmt
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %10
	%58 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 0
	store i64 0, i64* %58
	%59 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 1
	store i64 1, i64* %59
	%60 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 2
	store i1 false, i1* %60
	%61 = load {i64, i64, i1}, {i64, i64, i1}* %10, align 8
	ret {i64, i64, i1} %61
}

define {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %args, i64 %arg_index) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i1, align 1
	%5 = alloca %..any, align 8
	%6 = alloca i64, align 8
	%7 = alloca i8, align 1
	%8 = alloca i16, align 2
	%9 = alloca i32, align 4
	%10 = alloca i64, align 8
	%11 = alloca i8, align 1
	%12 = alloca i16, align 2
	%13 = alloca i32, align 4
	%14 = alloca i64, align 8
	%15 = alloca %..any, align 8
	%16 = alloca {i64, i64, i1}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	store i64 zeroinitializer, i64* %1
		store i64 %arg_index, i64* %1
	; num
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; new_arg_index
	store i64 zeroinitializer, i64* %3
		%17 = load i64, i64* %1, align 8
	store i64 %17, i64* %3
	; ok
	store i1 zeroinitializer, i1* %4
		store i1 true, i1* %4
	; IfStmt
	%18 = load i64, i64* %1, align 8
	; SelectorExpr
	%19 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %0, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	%21 = icmp slt i64 %18, %20
	br i1 %21, label %if.then-1, label %if.done-21

if.then-1:
	; arg
	store %..any zeroinitializer, %..any* %5
		; IndexExpr
	%22 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%23 = extractvalue {%..any*, i64, i64} %22, 0
	%24 = extractvalue {%..any*, i64, i64} %22, 1
	%25 = load i64, i64* %1, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$9d, i64 0, i32 0), i64 21}, i64 377, i64 15, i64 %25, i64 %24)
	%26 = getelementptr inbounds %..any, %..any* %23, i64 %25
	%27 = load %..any, %..any* %26, align 8
	store %..any %27, %..any* %5
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	; SelectorExpr
	%29 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%30 = load %Type_Info*, %Type_Info** %29, align 8
	%31 = call %Type_Info* @.type_info_base(%Type_Info* %30)
	store %Type_Info* %31, %Type_Info** %28
	; TypeMatchStmt
	%32 = load %..any, %..any* %5, align 8
	%33 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%34 = load %Type_Info*, %Type_Info** %33, align 8
	%35 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%36 = icmp eq %Type_Info* %34, %35
	br i1 %36, label %typematch.body-3, label %typematch.next-2

typematch.next-2:
	%37 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%38 = load %Type_Info*, %Type_Info** %37, align 8
	%39 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%40 = icmp eq %Type_Info* %38, %39
	br i1 %40, label %typematch.body-5, label %typematch.next-4

typematch.body-3:
	%41 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%42 = load %..rawptr, %..rawptr* %41, align 8
	%43 = bitcast %..rawptr %42 to i64*
	%44 = load i64, i64* %43, align 8
	store i64 zeroinitializer, i64* %6
	store i64 %44, i64* %6
	; AssignStmt
	%45 = load i64, i64* %6, align 8
	store i64 %45, i64* %2
	br label %typematch.done-20

typematch.next-4:
	%46 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%47 = load %Type_Info*, %Type_Info** %46, align 8
	%48 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%49 = icmp eq %Type_Info* %47, %48
	br i1 %49, label %typematch.body-7, label %typematch.next-6

typematch.body-5:
	%50 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%51 = load %..rawptr, %..rawptr* %50, align 8
	%52 = bitcast %..rawptr %51 to i8*
	%53 = load i8, i8* %52, align 1
	store i8 zeroinitializer, i8* %7
	store i8 %53, i8* %7
	; AssignStmt
	%54 = load i8, i8* %7, align 1
	; cast - cast
	%55 = sext i8 %54 to i64
	store i64 %55, i64* %2
	br label %typematch.done-20

typematch.next-6:
	%56 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%57 = load %Type_Info*, %Type_Info** %56, align 8
	%58 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%59 = icmp eq %Type_Info* %57, %58
	br i1 %59, label %typematch.body-9, label %typematch.next-8

typematch.body-7:
	%60 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%61 = load %..rawptr, %..rawptr* %60, align 8
	%62 = bitcast %..rawptr %61 to i16*
	%63 = load i16, i16* %62, align 2
	store i16 zeroinitializer, i16* %8
	store i16 %63, i16* %8
	; AssignStmt
	%64 = load i16, i16* %8, align 2
	; cast - cast
	%65 = sext i16 %64 to i64
	store i64 %65, i64* %2
	br label %typematch.done-20

typematch.next-8:
	%66 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%67 = load %Type_Info*, %Type_Info** %66, align 8
	%68 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%69 = icmp eq %Type_Info* %67, %68
	br i1 %69, label %typematch.body-11, label %typematch.next-10

typematch.body-9:
	%70 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%71 = load %..rawptr, %..rawptr* %70, align 8
	%72 = bitcast %..rawptr %71 to i32*
	%73 = load i32, i32* %72, align 4
	store i32 zeroinitializer, i32* %9
	store i32 %73, i32* %9
	; AssignStmt
	%74 = load i32, i32* %9, align 4
	; cast - cast
	%75 = sext i32 %74 to i64
	store i64 %75, i64* %2
	br label %typematch.done-20

typematch.next-10:
	%76 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%77 = load %Type_Info*, %Type_Info** %76, align 8
	%78 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%79 = icmp eq %Type_Info* %77, %78
	br i1 %79, label %typematch.body-13, label %typematch.next-12

typematch.body-11:
	%80 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%81 = load %..rawptr, %..rawptr* %80, align 8
	%82 = bitcast %..rawptr %81 to i64*
	%83 = load i64, i64* %82, align 8
	store i64 zeroinitializer, i64* %10
	store i64 %83, i64* %10
	; AssignStmt
	%84 = load i64, i64* %10, align 8
	; cast - cast
	%85 = bitcast i64 %84 to i64
	store i64 %85, i64* %2
	br label %typematch.done-20

typematch.next-12:
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%87 = load %Type_Info*, %Type_Info** %86, align 8
	%88 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%89 = icmp eq %Type_Info* %87, %88
	br i1 %89, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%90 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%91 = load %..rawptr, %..rawptr* %90, align 8
	%92 = bitcast %..rawptr %91 to i8*
	%93 = load i8, i8* %92, align 1
	store i8 zeroinitializer, i8* %11
	store i8 %93, i8* %11
	; AssignStmt
	%94 = load i8, i8* %11, align 1
	; cast - cast
	%95 = zext i8 %94 to i64
	store i64 %95, i64* %2
	br label %typematch.done-20

typematch.next-14:
	%96 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%97 = load %Type_Info*, %Type_Info** %96, align 8
	%98 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%99 = icmp eq %Type_Info* %97, %98
	br i1 %99, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%100 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%101 = load %..rawptr, %..rawptr* %100, align 8
	%102 = bitcast %..rawptr %101 to i16*
	%103 = load i16, i16* %102, align 2
	store i16 zeroinitializer, i16* %12
	store i16 %103, i16* %12
	; AssignStmt
	%104 = load i16, i16* %12, align 2
	; cast - cast
	%105 = zext i16 %104 to i64
	store i64 %105, i64* %2
	br label %typematch.done-20

typematch.next-16:
	%106 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%107 = load %Type_Info*, %Type_Info** %106, align 8
	%108 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%109 = icmp eq %Type_Info* %107, %108
	br i1 %109, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%110 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%111 = load %..rawptr, %..rawptr* %110, align 8
	%112 = bitcast %..rawptr %111 to i32*
	%113 = load i32, i32* %112, align 4
	store i32 zeroinitializer, i32* %13
	store i32 %113, i32* %13
	; AssignStmt
	%114 = load i32, i32* %13, align 4
	; cast - cast
	%115 = zext i32 %114 to i64
	store i64 %115, i64* %2
	br label %typematch.done-20

typematch.next-18:
	store %..any zeroinitializer, %..any* %15
	store %..any %32, %..any* %15
	; AssignStmt
	store i1 false, i1* %4
	br label %typematch.done-20

typematch.body-19:
	%116 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%117 = load %..rawptr, %..rawptr* %116, align 8
	%118 = bitcast %..rawptr %117 to i64*
	%119 = load i64, i64* %118, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %119, i64* %14
	; AssignStmt
	%120 = load i64, i64* %14, align 8
	; cast - cast
	%121 = bitcast i64 %120 to i64
	store i64 %121, i64* %2
	br label %typematch.done-20

typematch.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%122 = load i64, i64* %2, align 8
	%123 = load i64, i64* %3, align 8
	%124 = load i1, i1* %4, align 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %16
	%125 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 0
	store i64 %122, i64* %125
	%126 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 1
	store i64 %123, i64* %126
	%127 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 2
	store i1 %124, i1* %127
	%128 = load {i64, i64, i1}, {i64, i64, i1}* %16, align 8
	ret {i64, i64, i1} %128
}

define void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %fi, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i32 zeroinitializer, i32* %1
		store i32 %verb, i32* %1
	; assert
	%2 = load i32, i32* %1, align 4
	%3 = icmp ne i32 %2, 118
	%4 = icmp eq i1 %3, false
	br i1 %4, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$9e, i64 0, i32 0), i64 21}, i64 399, i64 9, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$9f, i64 0, i32 0), i64 9})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	%5 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%6 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, i64 0
	%7 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %6, i64 0, i32 3
	%8 = load {i8*, i64, i64}*, {i8*, i64, i64}** %7, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %8, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a0, i64 0, i32 0), i64 2})
	%9 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %10, i64 0, i32 3
	%12 = load {i8*, i64, i64}*, {i8*, i64, i64}** %11, align 8
	%13 = load i32, i32* %1, align 4
	call void @.fmt-4.write_rune({i8*, i64, i64}* %12, i32 %13)
	%14 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%15 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %14, i64 0
	%16 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %15, i64 0, i32 3
	%17 = load {i8*, i64, i64}*, {i8*, i64, i64}** %16, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %17, i8 40)
	; IfStmt
	; SelectorExpr
	%18 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0, i32 0
	%21 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%22 = load %Type_Info*, %Type_Info** %21, align 8
	%23 = icmp ne %Type_Info* %22, zeroinitializer
	br i1 %23, label %if.then-3, label %if.else-4

if.then-3:
	%24 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0, i32 3
	%27 = load {i8*, i64, i64}*, {i8*, i64, i64}** %26, align 8
	; SelectorExpr
	%28 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 0
	%32 = load %Type_Info*, %Type_Info** %31, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %27, %Type_Info* %32)
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 3
	%36 = load {i8*, i64, i64}*, {i8*, i64, i64}** %35, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %36, i8 61)
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0, i32 0
	%41 = load %..any, %..any* %40, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %37, %..any %41, i32 118)
	br label %if.done-5

if.else-4:
	%42 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %43, i64 0, i32 3
	%45 = load {i8*, i64, i64}*, {i8*, i64, i64}** %44, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %45, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$a1, i64 0, i32 0), i64 5})
	br label %if.done-5

if.done-5:
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0, i32 3
	%49 = load {i8*, i64, i64}*, {i8*, i64, i64}** %48, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %49, i8 41)
	ret void
}

define void @.fmt-4.fmt_bool(%fmt-4.Fmt_Info* %fi, i1 %b, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i1, align 1
	%2 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i1 zeroinitializer, i1* %1
		store i1 %b, i1* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 116
	br i1 %4, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%5 = icmp eq i32 %3, 118
	br i1 %5, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%6 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%7 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %6, i32 %7)
	br label %match.done-7

match.case.body-3:
	%8 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0, i32 3
	%11 = load {i8*, i64, i64}*, {i8*, i64, i64}** %10, align 8
	; TernaryExpr
	%12 = load i1, i1* %1, align 1
	br i1 %12, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%13 = phi %..string [ {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$a2, i64 0, i32 0), i64 4}, %if.then-4 ], [ {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$a3, i64 0, i32 0), i64 5}, %if.else-5 ]
	call void @.fmt-4.write_string({i8*, i64, i64}* %11, %..string %13)
	br label %match.done-7

match.done-7:
	ret void
}

define void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %fi, i64 %width) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca [1 x i8], align 1
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %width, i64* %1
	; IfStmt
	%8 = load i64, i64* %1, align 8
	%9 = icmp sle i64 %8, 0
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; pad_byte
	store i8 zeroinitializer, i8* %2
		store i8 32, i8* %2
	; IfStmt
	; SelectorExpr
	%10 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%11 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %10, i64 0
	%12 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %11, i64 0, i32 7
	%13 = load i1, i1* %12, align 1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	store i8 48, i8* %2
	br label %if.done-4

if.done-4:
	; count
	store i64 zeroinitializer, i64* %3
		; min
	%14 = load i64, i64* %1, align 8
	; SelectorExpr
	; SelectorExpr
	%15 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%16 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %15, i64 0
	%17 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %16, i64 0, i32 3
	%18 = load {i8*, i64, i64}*, {i8*, i64, i64}** %17, align 8
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %18, i64 0
	%20 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 2
	%21 = load i64, i64* %20, align 8
	; SelectorExpr
	; SelectorExpr
	%22 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0
	%24 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %23, i64 0, i32 3
	%25 = load {i8*, i64, i64}*, {i8*, i64, i64}** %24, align 8
	%26 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %25, i64 0
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %26, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	%29 = sub i64 %21, %28
	%30 = icmp slt i64 %14, %29
	%31 = select i1 %30, i64 %14, i64 %29
	store i64 %31, i64* %3
	; RangeStmt
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-5

for.interval.loop-5:
	%32 = load i64, i64* %3, align 8
	%33 = load i64, i64* %4, align 8
	%34 = icmp slt i64 %33, %32
	br i1 %34, label %for.interval.body-6, label %for.interval.done-7

for.interval.body-6:
	%35 = load i64, i64* %4, align 8
	%36 = load i64, i64* %5, align 8
	%37 = load i64, i64* %4, align 8
	%38 = add i64 %37, 1
	store i64 %38, i64* %4
	%39 = load i64, i64* %5, align 8
	%40 = add i64 %39, 1
	store i64 %40, i64* %5
	; append
	; SelectorExpr
	%41 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%42 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %41, i64 0
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0, i32 3
	%44 = load {i8*, i64, i64}*, {i8*, i64, i64}** %43, align 8
	%45 = bitcast {i8*, i64, i64}* %44 to %..rawptr
	; SelectorExpr
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0, i32 3
	%49 = load {i8*, i64, i64}*, {i8*, i64, i64}** %48, align 8
	%50 = load i8, i8* %2, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%51 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %50, i8* %51
	%52 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %52, i8** %53
	%54 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %54
	%55 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %55
	%56 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%57 = extractvalue {i8*, i64, i64} %56, 0
	%58 = extractvalue {i8*, i64, i64} %56, 1
	%59 = bitcast i8* %57 to %..rawptr
	%60 = call i64 @.__slice_append(%..rawptr %45, i64 1, i64 1, %..rawptr %59, i64 %58)
	br label %for.interval.loop-5

for.interval.done-7:
	ret void
}

define {i64, i1} @.fmt-4.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i1, align 1
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i8, align 1
	%5 = alloca i16, align 2
	%6 = alloca i32, align 4
	%7 = alloca i64, align 8
	%8 = alloca {i64, i1}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %u, i64* %0
	store i1 zeroinitializer, i1* %1
		store i1 %is_signed, i1* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	; neg
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; IfStmt
	%9 = load i1, i1* %1, align 1
	br i1 %9, label %if.then-1, label %if.done-19

if.then-1:
	; MatchStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 8
	br i1 %11, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%12 = icmp eq i64 %10, 16
	br i1 %12, label %match.fall.body-7, label %match.case.next-6

match.case.body-3:
	; i
	store i8 zeroinitializer, i8* %4
		%13 = load i64, i64* %0, align 8
	; cast - cast
	%14 = trunc i64 %13 to i8
	store i8 %14, i8* %4
	; AssignStmt
	%15 = load i8, i8* %4, align 1
	%16 = icmp slt i8 %15, 0
	store i1 %16, i1* %3
	; IfStmt
	%17 = load i1, i1* %3, align 1
	br i1 %17, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%18 = load i8, i8* %4, align 1
	%19 = sub i8 0, %18
	store i8 %19, i8* %4
	br label %if.done-5

if.done-5:
	; AssignStmt
	%20 = load i8, i8* %4, align 1
	; cast - cast
	%21 = sext i8 %20 to i64
	store i64 %21, i64* %0
	br label %match.done-18

match.case.next-6:
	%22 = icmp eq i64 %10, 32
	br i1 %22, label %match.fall.body-11, label %match.case.next-10

match.fall.body-7:
	; i
	store i16 zeroinitializer, i16* %5
		%23 = load i64, i64* %0, align 8
	; cast - cast
	%24 = trunc i64 %23 to i16
	store i16 %24, i16* %5
	; AssignStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 0
	store i1 %26, i1* %3
	; IfStmt
	%27 = load i1, i1* %3, align 1
	br i1 %27, label %if.then-8, label %if.done-9

if.then-8:
	; AssignStmt
	%28 = load i16, i16* %5, align 2
	%29 = sub i16 0, %28
	store i16 %29, i16* %5
	br label %if.done-9

if.done-9:
	; AssignStmt
	%30 = load i16, i16* %5, align 2
	; cast - cast
	%31 = sext i16 %30 to i64
	store i64 %31, i64* %0
	br label %match.done-18

match.case.next-10:
	%32 = icmp eq i64 %10, 64
	br i1 %32, label %match.fall.body-15, label %match.case.next-14

match.fall.body-11:
	; i
	store i32 zeroinitializer, i32* %6
		%33 = load i64, i64* %0, align 8
	; cast - cast
	%34 = trunc i64 %33 to i32
	store i32 %34, i32* %6
	; AssignStmt
	%35 = load i32, i32* %6, align 4
	%36 = icmp slt i32 %35, 0
	store i1 %36, i1* %3
	; IfStmt
	%37 = load i1, i1* %3, align 1
	br i1 %37, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%38 = load i32, i32* %6, align 4
	%39 = sub i32 0, %38
	store i32 %39, i32* %6
	br label %if.done-13

if.done-13:
	; AssignStmt
	%40 = load i32, i32* %6, align 4
	; cast - cast
	%41 = sext i32 %40 to i64
	store i64 %41, i64* %0
	br label %match.done-18

match.case.next-14:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$a4, i64 0, i32 0), i64 21}, i64 464, i64 10, %..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$a5, i64 0, i32 0), i64 41})
	br label %match.done-18

match.fall.body-15:
	; i
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %0, align 8
	; cast - cast
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load i64, i64* %7, align 8
	%45 = icmp slt i64 %44, 0
	store i1 %45, i1* %3
	; IfStmt
	%46 = load i1, i1* %3, align 1
	br i1 %46, label %if.then-16, label %if.done-17

if.then-16:
	; AssignStmt
	%47 = load i64, i64* %7, align 8
	%48 = sub i64 0, %47
	store i64 %48, i64* %7
	br label %if.done-17

if.done-17:
	; AssignStmt
	%49 = load i64, i64* %7, align 8
	; cast - cast
	%50 = bitcast i64 %49 to i64
	store i64 %50, i64* %0
	br label %match.done-18

match.done-18:
	br label %if.done-19

if.done-19:
	; ReturnStmt
	%51 = load i64, i64* %0, align 8
	%52 = load i1, i1* %3, align 1
	store {i64, i1} zeroinitializer, {i64, i1}* %8
	%53 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 0
	store i64 %51, i64* %53
	%54 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 1
	store i1 %52, i1* %54
	%55 = load {i64, i1}, {i64, i1}* %8, align 8
	ret {i64, i1} %55
}

define void @.fmt-4._write_int(%fmt-4.Fmt_Info* %fi, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca [256 x i8], align 1
	%11 = alloca i64, align 8
	%12 = alloca %..string, align 8
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca i1, align 1
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %base, i64* %2
	store i1 zeroinitializer, i1* %3
		store i1 %is_signed, i1* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	store %..string zeroinitializer, %..string* %5
		store %..string %digits, %..string* %5
	; neg
	store i1 zeroinitializer, i1* %6
		%15 = load i64, i64* %1, align 8
	%16 = load i1, i1* %3, align 1
	%17 = load i64, i64* %4, align 8
	%18 = call {i64, i1} @.fmt-4.is_integer_negative(i64 %15, i1 %16, i64 %17)
	%19 = extractvalue {i64, i1} %18, 0
	%20 = extractvalue {i64, i1} %18, 1
	store i1 %20, i1* %6
	; IfStmt
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 9
	%24 = load i1, i1* %23, align 1
	br i1 %24, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%25 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %26, i64 0, i32 10
	%28 = load i1, i1* %27, align 1
	br i1 %28, label %if.then-2, label %if.done-5

if.then-2:
	; width
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%29 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0
	%31 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0, i32 1
	%32 = load i64, i64* %31, align 8
	; SelectorExpr
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = add i64 %32, %36
	%38 = add i64 %37, 3
	store i64 %38, i64* %7
	; IfStmt
	%39 = load i64, i64* %7, align 8
	%40 = icmp sgt i64 %39, 256
	br i1 %40, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$a6, i64 0, i32 0), i64 21}, i64 478, i64 10, %..string {i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.__str$a7, i64 0, i32 0), i64 55})
	br label %if.done-4

if.done-4:
	br label %if.done-5

if.done-5:
	; prec
	store i64 zeroinitializer, i64* %8
		store i64 0, i64* %8
	; IfStmt
	; SelectorExpr
	%41 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%42 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %41, i64 0
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0, i32 10
	%44 = load i1, i1* %43, align 1
	br i1 %44, label %if.then-6, label %if.else-10

if.then-6:
	; AssignStmt
	; SelectorExpr
	%45 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%46 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %45, i64 0
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0, i32 2
	%48 = load i64, i64* %47, align 8
	store i64 %48, i64* %8
	; IfStmt
	%49 = load i64, i64* %8, align 8
	%50 = icmp eq i64 %49, 0
	br i1 %50, label %cmp.and-7, label %if.done-9

cmp.and-7:
	%51 = load i64, i64* %1, align 8
	%52 = icmp eq i64 %51, 0
	br i1 %52, label %if.then-8, label %if.done-9

if.then-8:
	; prev_zero
	store i1 zeroinitializer, i1* %9
		; SelectorExpr
	%53 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%54 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %53, i64 0
	%55 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %54, i64 0, i32 7
	%56 = load i1, i1* %55, align 1
	store i1 %56, i1* %9
	; AssignStmt
	; SelectorExpr
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%58 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %57, i64 0
	%59 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %58, i64 0, i32 7
	store i1 false, i1* %59
	%60 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%61 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0
	%63 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %62, i64 0, i32 1
	%64 = load i64, i64* %63, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %60, i64 %64)
	; AssignStmt
	; SelectorExpr
	%65 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%66 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %65, i64 0
	%67 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %66, i64 0, i32 7
	%68 = load i1, i1* %9, align 1
	store i1 %68, i1* %67
	; ReturnStmt
	ret void

if.done-9:
	br label %if.done-18

if.else-10:
	; IfStmt
	; SelectorExpr
	%69 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%70 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %69, i64 0
	%71 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %70, i64 0, i32 7
	%72 = load i1, i1* %71, align 1
	br i1 %72, label %cmp.and-11, label %if.done-17

cmp.and-11:
	; SelectorExpr
	%73 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%74 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %73, i64 0
	%75 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %74, i64 0, i32 9
	%76 = load i1, i1* %75, align 1
	br i1 %76, label %if.then-12, label %if.done-17

if.then-12:
	; AssignStmt
	; SelectorExpr
	%77 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%78 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %77, i64 0
	%79 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %78, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	store i64 %80, i64* %8
	; IfStmt
	%81 = load i1, i1* %6, align 1
	br i1 %81, label %if.then-15, label %cmp.or-13

cmp.or-13:
	; SelectorExpr
	%82 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%83 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %82, i64 0
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %83, i64 0, i32 5
	%85 = load i1, i1* %84, align 1
	br i1 %85, label %if.then-15, label %cmp.or-14

cmp.or-14:
	; SelectorExpr
	%86 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0, i32 6
	%89 = load i1, i1* %88, align 1
	br i1 %89, label %if.then-15, label %if.done-16

if.then-15:
	%90 = load i64, i64* %8, align 8
	%91 = sub i64 %90, 1
	store i64 %91, i64* %8
	br label %if.done-16

if.done-16:
	br label %if.done-17

if.done-17:
	br label %if.done-18

if.done-18:
	; MatchStmt
	%92 = load i64, i64* %2, align 8
	%93 = icmp eq i64 %92, 2
	br i1 %93, label %match.case.body-24, label %match.case.next-19

match.case.next-19:
	%94 = icmp eq i64 %92, 8
	br i1 %94, label %match.case.body-24, label %match.case.next-20

match.case.next-20:
	%95 = icmp eq i64 %92, 10
	br i1 %95, label %match.case.body-24, label %match.case.next-21

match.case.next-21:
	%96 = icmp eq i64 %92, 12
	br i1 %96, label %match.case.body-24, label %match.case.next-22

match.case.next-22:
	%97 = icmp eq i64 %92, 16
	br i1 %97, label %match.case.body-24, label %match.case.next-23

match.case.next-23:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$a8, i64 0, i32 0), i64 21}, i64 504, i64 9, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$a9, i64 0, i32 0), i64 32})
	br label %match.done-25

match.case.body-24:
	; break
	br label %match.done-25

match.done-25:
	; buf
	store [256 x i8] zeroinitializer, [256 x i8]* %10
		; flags
	store i64 zeroinitializer, i64* %11
		; IfStmt
	; SelectorExpr
	%98 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%99 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %98, i64 0
	%100 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %99, i64 0, i32 8
	%101 = load i1, i1* %100, align 1
	br i1 %101, label %if.then-26, label %if.done-27

if.then-26:
	; AssignStmt
	%102 = load i64, i64* %11, align 8
	%103 = or i64 %102, 1
	store i64 %103, i64* %11
	br label %if.done-27

if.done-27:
	; IfStmt
	; SelectorExpr
	%104 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%105 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %104, i64 0
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %105, i64 0, i32 5
	%107 = load i1, i1* %106, align 1
	br i1 %107, label %if.then-28, label %if.done-29

if.then-28:
	; AssignStmt
	%108 = load i64, i64* %11, align 8
	%109 = or i64 %108, 2
	store i64 %109, i64* %11
	br label %if.done-29

if.done-29:
	; IfStmt
	; SelectorExpr
	%110 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%111 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %110, i64 0
	%112 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %111, i64 0, i32 6
	%113 = load i1, i1* %112, align 1
	br i1 %113, label %if.then-30, label %if.done-31

if.then-30:
	; AssignStmt
	%114 = load i64, i64* %11, align 8
	%115 = or i64 %114, 4
	store i64 %115, i64* %11
	br label %if.done-31

if.done-31:
	; s
	store %..string zeroinitializer, %..string* %12
		; SelectorExpr
	; SliceExpr
	%116 = load [256 x i8], [256 x i8]* %10, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$aa, i64 0, i32 0), i64 21}, i64 512, i64 30, i64 0, i64 0, i64 256)
	%117 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i32 0
	%118 = getelementptr inbounds i8, i8* %117, i64 0
	%119 = sub i64 0, 0
	%120 = sub i64 256, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%121 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %118, i8** %121
	%122 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %119, i64* %122
	%123 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %120, i64* %123
	%124 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%125 = load i64, i64* %1, align 8
	%126 = load i64, i64* %2, align 8
	%127 = load i1, i1* %3, align 1
	%128 = load i64, i64* %4, align 8
	%129 = load %..string, %..string* %5, align 8
	%130 = load i64, i64* %11, align 8
	%131 = call %..string @.strconv-22.append_bits({i8*, i64, i64} %124, i64 %125, i64 %126, i1 %127, i64 %128, %..string %129, i64 %130)
	store %..string %131, %..string* %12
	; prev_zero
	store i1 zeroinitializer, i1* %14
		; SelectorExpr
	%132 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0
	%134 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %133, i64 0, i32 7
	%135 = load i1, i1* %134, align 1
	store i1 %135, i1* %14
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%136 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %136, i64 0
	%138 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %137, i64 0, i32 7
	store i1 false, i1* %138
	%139 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%140 = load %..string, %..string* %12, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %139, %..string %140)
	; defer
	; AssignStmt
	; SelectorExpr
	%141 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%142 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %141, i64 0
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0, i32 7
	%144 = load i1, i1* %14, align 1
	store i1 %144, i1* %143
	ret void
}

define void @.fmt-4.fmt_rune(%fmt-4.Fmt_Info* %fi, i32 %r) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i32 zeroinitializer, i32* %1
		store i32 %r, i32* %1
	; SelectorExpr
	%2 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%3 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	%4 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 3
	%5 = load {i8*, i64, i64}*, {i8*, i64, i64}** %4, align 8
	%6 = load i32, i32* %1, align 4
	call void @.fmt-4.write_rune({i8*, i64, i64}* %5, i32 %6)
	ret void
}

define void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %fi, i64 %u, i1 %is_signed, i64 %bit_size, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i1, align 1
	%3 = alloca i64, align 8
	%4 = alloca i32, align 4
	%5 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i1 zeroinitializer, i1* %2
		store i1 %is_signed, i1* %2
	store i64 zeroinitializer, i64* %3
		store i64 %bit_size, i64* %3
	store i32 zeroinitializer, i32* %4
		store i32 %verb, i32* %4
	; MatchStmt
	%6 = load i32, i32* %4, align 4
	%7 = icmp eq i32 %6, 118
	br i1 %7, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%8 = icmp eq i32 %6, 98
	br i1 %8, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	%9 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%10 = load i64, i64* %1, align 8
	%11 = load i1, i1* %2, align 1
	%12 = load i64, i64* %3, align 8
	%13 = load %..string, %..string* @.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %9, i64 %10, i64 10, i1 %11, i64 %12, %..string %13)
	br label %match.done-22

match.case.next-3:
	%14 = icmp eq i32 %6, 111
	br i1 %14, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	%15 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%16 = load i64, i64* %1, align 8
	%17 = load i1, i1* %2, align 1
	%18 = load i64, i64* %3, align 8
	%19 = load %..string, %..string* @.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %15, i64 %16, i64 2, i1 %17, i64 %18, %..string %19)
	br label %match.done-22

match.case.next-5:
	%20 = icmp eq i32 %6, 100
	br i1 %20, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = load i64, i64* %1, align 8
	%23 = load i1, i1* %2, align 1
	%24 = load i64, i64* %3, align 8
	%25 = load %..string, %..string* @.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %21, i64 %22, i64 8, i1 %23, i64 %24, %..string %25)
	br label %match.done-22

match.case.next-7:
	%26 = icmp eq i32 %6, 120
	br i1 %26, label %match.fall.body-10, label %match.case.next-9

match.fall.body-8:
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = load i64, i64* %1, align 8
	%29 = load i1, i1* %2, align 1
	%30 = load i64, i64* %3, align 8
	%31 = load %..string, %..string* @.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %27, i64 %28, i64 10, i1 %29, i64 %30, %..string %31)
	br label %match.done-22

match.case.next-9:
	%32 = icmp eq i32 %6, 88
	br i1 %32, label %match.fall.body-12, label %match.case.next-11

match.fall.body-10:
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = load i64, i64* %1, align 8
	%35 = load i1, i1* %2, align 1
	%36 = load i64, i64* %3, align 8
	%37 = load %..string, %..string* @.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %33, i64 %34, i64 16, i1 %35, i64 %36, %..string %37)
	br label %match.done-22

match.case.next-11:
	%38 = icmp eq i32 %6, 99
	br i1 %38, label %match.fall.body-15, label %match.case.next-13

match.fall.body-12:
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = load i64, i64* %1, align 8
	%41 = load i1, i1* %2, align 1
	%42 = load i64, i64* %3, align 8
	%43 = load %..string, %..string* @.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %39, i64 %40, i64 16, i1 %41, i64 %42, %..string %43)
	br label %match.done-22

match.case.next-13:
	%44 = icmp eq i32 %6, 114
	br i1 %44, label %match.fall.body-15, label %match.case.next-14

match.case.next-14:
	%45 = icmp eq i32 %6, 85
	br i1 %45, label %match.fall.body-17, label %match.case.next-16

match.fall.body-15:
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = load i64, i64* %1, align 8
	; cast - cast
	%48 = trunc i64 %47 to i32
	call void @.fmt-4.fmt_rune(%fmt-4.Fmt_Info* %46, i32 %48)
	br label %match.done-22

match.case.next-16:
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = load i32, i32* %4, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %49, i32 %50)
	br label %match.done-22

match.fall.body-17:
	; r
	store i32 zeroinitializer, i32* %5
		%51 = load i64, i64* %1, align 8
	; cast - cast
	%52 = trunc i64 %51 to i32
	store i32 %52, i32* %5
	; IfStmt
	%53 = load i32, i32* %5, align 4
	%54 = icmp slt i32 %53, 0
	br i1 %54, label %if.then-19, label %cmp.or-18

cmp.or-18:
	%55 = load i32, i32* %5, align 4
	%56 = icmp sgt i32 %55, 1114111
	br i1 %56, label %if.then-19, label %if.else-20

if.then-19:
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%58 = load i32, i32* %4, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %57, i32 %58)
	br label %if.done-21

if.else-20:
	; SelectorExpr
	%59 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%60 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %59, i64 0
	%61 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %60, i64 0, i32 3
	%62 = load {i8*, i64, i64}*, {i8*, i64, i64}** %61, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %62, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ab, i64 0, i32 0), i64 2})
	%63 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%64 = load i64, i64* %1, align 8
	%65 = load i64, i64* %3, align 8
	%66 = load %..string, %..string* @.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %63, i64 %64, i64 16, i1 false, i64 %65, %..string %66)
	br label %if.done-21

if.done-21:
	br label %match.done-22

match.done-22:
	ret void
}

define void @.fmt-4._pad(%fmt-4.Fmt_Info* %fi, %..string %s) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	; IfStmt
	; SelectorExpr
	%3 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%4 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%5 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %4, i64 0, i32 9
	%6 = load i1, i1* %5, align 1
	br i1 %6, label %cmp.or-1, label %if.then-2

cmp.or-1:
	; SelectorExpr
	%7 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%8 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %7, i64 0
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp eq i64 %10, 0
	br i1 %11, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %13, i64 0, i32 3
	%15 = load {i8*, i64, i64}*, {i8*, i64, i64}** %14, align 8
	%16 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %15, %..string %16)
	; ReturnStmt
	ret void

if.done-3:
	; width
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %17, i64 0
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	; SelectorExpr
	%21 = load %..string, %..string* %1, align 8
	%22 = call i64 @.utf8-6.rune_count-1824837335856(%..string %21)
	%23 = sub i64 %20, %22
	store i64 %23, i64* %2
	; IfStmt
	; SelectorExpr
	%24 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0, i32 4
	%27 = load i1, i1* %26, align 1
	br i1 %27, label %if.then-4, label %if.else-5

if.then-4:
	; SelectorExpr
	%28 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0, i32 3
	%31 = load {i8*, i64, i64}*, {i8*, i64, i64}** %30, align 8
	%32 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %31, %..string %32)
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = load i64, i64* %2, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %33, i64 %34)
	br label %if.done-6

if.else-5:
	%35 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%36 = load i64, i64* %2, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %35, i64 %36)
	; SelectorExpr
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0, i32 3
	%40 = load {i8*, i64, i64}*, {i8*, i64, i64}** %39, align 8
	%41 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %40, %..string %41)
	br label %if.done-6

if.done-6:
	ret void
}

define void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %fi, double %v, i64 %bit_size, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca double, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca i64, align 8
	%5 = alloca [128 x i8], align 1
	%6 = alloca %..string, align 8
	%7 = alloca {i8*, i64, i64}, align 8
	%8 = alloca {i8*, i64, i64}, align 8
	%9 = alloca %..string, align 8
	%10 = alloca %..string, align 8
	%11 = alloca %..string, align 8
	%12 = alloca %..string, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store double zeroinitializer, double* %1
		store double %v, double* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%13 = load i32, i32* %3, align 4
	%14 = icmp eq i32 %13, 102
	br i1 %14, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%15 = icmp eq i32 %13, 70
	br i1 %15, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%16 = icmp eq i32 %13, 118
	br i1 %16, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %17, i32 %18)
	; ReturnStmt
	ret void

match.case.body-4:
	; prec
	store i64 zeroinitializer, i64* %4
		store i64 3, i64* %4
	; IfStmt
	; SelectorExpr
	%19 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0
	%21 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %20, i64 0, i32 10
	%22 = load i1, i1* %21, align 1
	br i1 %22, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%23 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%24 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %23, i64 0
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0, i32 2
	%26 = load i64, i64* %25, align 8
	store i64 %26, i64* %4
	br label %if.done-6

if.done-6:
	; buf
	store [128 x i8] zeroinitializer, [128 x i8]* %5
		; str
	store %..string zeroinitializer, %..string* %6
		; SelectorExpr
	; SliceExpr
	%27 = load [128 x i8], [128 x i8]* %5, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ac, i64 0, i32 0), i64 21}, i64 577, i64 34, i64 1, i64 1, i64 128)
	%28 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i32 0
	%29 = getelementptr inbounds i8, i8* %28, i64 1
	%30 = sub i64 1, 1
	%31 = sub i64 128, 1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %7
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 0
	store i8* %29, i8** %32
	%33 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 1
	store i64 %30, i64* %33
	%34 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 2
	store i64 %31, i64* %34
	%35 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	%36 = load double, double* %1, align 8
	%37 = load i64, i64* %4, align 8
	%38 = load i64, i64* %2, align 8
	%39 = call %..string @.strconv-22.append_float({i8*, i64, i64} %35, double %36, i8 102, i64 %37, i64 %38)
	store %..string %39, %..string* %6
	; AssignStmt
	; SliceExpr
	; SelectorExpr
	%40 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 1
	%41 = load i64, i64* %40, align 8
	%42 = add i64 %41, 1
	%43 = load [128 x i8], [128 x i8]* %5, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ad, i64 0, i32 0), i64 21}, i64 578, i64 24, i64 0, i64 %42, i64 128)
	%44 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i32 0
	%45 = getelementptr inbounds i8, i8* %44, i64 0
	%46 = sub i64 %42, 0
	%47 = sub i64 128, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %8
	%48 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	store i8* %45, i8** %48
	%49 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 1
	store i64 %46, i64* %49
	%50 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 2
	store i64 %47, i64* %50
	%51 = load {i8*, i64, i64}, {i8*, i64, i64}* %8, align 8
	; cast - cast
	%52 = extractvalue {i8*, i64, i64} %51, 0
	%53 = extractvalue {i8*, i64, i64} %51, 1
	store %..string zeroinitializer, %..string* %9
	%54 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	%55 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i8* %52, i8** %54
	store i64 %53, i64* %55
	%56 = load %..string, %..string* %9, align 8
	store %..string %56, %..string* %6
	; IfStmt
	; IndexExpr
	%57 = load %..string, %..string* %6, align 8
	%58 = extractvalue %..string %57, 0
	%59 = extractvalue %..string %57, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ae, i64 0, i32 0), i64 21}, i64 579, i64 10, i64 1, i64 %59)
	%60 = getelementptr inbounds i8, i8* %58, i64 1
	%61 = load i8, i8* %60, align 1
	%62 = icmp eq i8 %61, 43
	br i1 %62, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; IndexExpr
	%63 = load %..string, %..string* %6, align 8
	%64 = extractvalue %..string %63, 0
	%65 = extractvalue %..string %63, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$af, i64 0, i32 0), i64 21}, i64 579, i64 27, i64 1, i64 %65)
	%66 = getelementptr inbounds i8, i8* %64, i64 1
	%67 = load i8, i8* %66, align 1
	%68 = icmp eq i8 %67, 45
	br i1 %68, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; SliceExpr
	%69 = load %..string, %..string* %6, align 8
	%70 = extractvalue %..string %69, 1
	%71 = extractvalue %..string %69, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b0, i64 0, i32 0), i64 21}, i64 580, i64 13, i64 1, i64 %70)
	%72 = extractvalue %..string %69, 0
	%73 = getelementptr inbounds i8, i8* %72, i64 1
	%74 = sub i64 %70, 1
	store %..string zeroinitializer, %..string* %10
	%75 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %73, i8** %75
	%76 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %74, i64* %76
	%77 = load %..string, %..string* %10, align 8
	store %..string %77, %..string* %6
	br label %if.done-10

if.else-9:
	; AssignStmt
	; IndexExpr
	%78 = load %..string, %..string* %6, align 8
	%79 = extractvalue %..string %78, 0
	%80 = extractvalue %..string %78, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b1, i64 0, i32 0), i64 21}, i64 582, i64 8, i64 0, i64 %80)
	%81 = getelementptr inbounds i8, i8* %79, i64 0
	store i8 43, i8* %81
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%82 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%83 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %82, i64 0
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %83, i64 0, i32 6
	%85 = load i1, i1* %84, align 1
	br i1 %85, label %cmp.and-11, label %if.done-14

cmp.and-11:
	; SelectorExpr
	%86 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0, i32 5
	%89 = load i1, i1* %88, align 1
	br i1 %89, label %if.done-14, label %cmp.and-12

cmp.and-12:
	; IndexExpr
	%90 = load %..string, %..string* %6, align 8
	%91 = extractvalue %..string %90, 0
	%92 = extractvalue %..string %90, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b2, i64 0, i32 0), i64 21}, i64 585, i64 34, i64 0, i64 %92)
	%93 = getelementptr inbounds i8, i8* %91, i64 0
	%94 = load i8, i8* %93, align 1
	%95 = icmp eq i8 %94, 43
	br i1 %95, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; IndexExpr
	%96 = load %..string, %..string* %6, align 8
	%97 = extractvalue %..string %96, 0
	%98 = extractvalue %..string %96, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b3, i64 0, i32 0), i64 21}, i64 586, i64 8, i64 0, i64 %98)
	%99 = getelementptr inbounds i8, i8* %97, i64 0
	store i8 32, i8* %99
	br label %if.done-14

if.done-14:
	; IfStmt
	; IndexExpr
	%100 = load %..string, %..string* %6, align 8
	%101 = extractvalue %..string %100, 0
	%102 = extractvalue %..string %100, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b4, i64 0, i32 0), i64 21}, i64 589, i64 10, i64 1, i64 %102)
	%103 = getelementptr inbounds i8, i8* %101, i64 1
	%104 = load i8, i8* %103, align 1
	%105 = icmp eq i8 %104, 78
	br i1 %105, label %cmp.and-15, label %if.done-17

cmp.and-15:
	; IndexExpr
	%106 = load %..string, %..string* %6, align 8
	%107 = extractvalue %..string %106, 0
	%108 = extractvalue %..string %106, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b5, i64 0, i32 0), i64 21}, i64 589, i64 27, i64 1, i64 %108)
	%109 = getelementptr inbounds i8, i8* %107, i64 1
	%110 = load i8, i8* %109, align 1
	%111 = icmp eq i8 %110, 73
	br i1 %111, label %if.then-16, label %if.done-17

if.then-16:
	; SelectorExpr
	%112 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%113 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %112, i64 0
	%114 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %113, i64 0, i32 3
	%115 = load {i8*, i64, i64}*, {i8*, i64, i64}** %114, align 8
	%116 = load %..string, %..string* %6, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %115, %..string %116)
	; ReturnStmt
	ret void

if.done-17:
	; IfStmt
	; SelectorExpr
	%117 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%118 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %117, i64 0
	%119 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %118, i64 0, i32 5
	%120 = load i1, i1* %119, align 1
	br i1 %120, label %if.then-19, label %cmp.or-18

cmp.or-18:
	; IndexExpr
	%121 = load %..string, %..string* %6, align 8
	%122 = extractvalue %..string %121, 0
	%123 = extractvalue %..string %121, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b6, i64 0, i32 0), i64 21}, i64 594, i64 21, i64 0, i64 %123)
	%124 = getelementptr inbounds i8, i8* %122, i64 0
	%125 = load i8, i8* %124, align 1
	%126 = icmp ne i8 %125, 43
	br i1 %126, label %if.then-19, label %if.else-25

if.then-19:
	; IfStmt
	; SelectorExpr
	%127 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%128 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %127, i64 0
	%129 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %128, i64 0, i32 7
	%130 = load i1, i1* %129, align 1
	br i1 %130, label %cmp.and-20, label %if.else-23

cmp.and-20:
	; SelectorExpr
	%131 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%132 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %131, i64 0
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0, i32 9
	%134 = load i1, i1* %133, align 1
	br i1 %134, label %cmp.and-21, label %if.else-23

cmp.and-21:
	; SelectorExpr
	%135 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%136 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %135, i64 0
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %136, i64 0, i32 1
	%138 = load i64, i64* %137, align 8
	; SelectorExpr
	%139 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 1
	%140 = load i64, i64* %139, align 8
	%141 = icmp sgt i64 %138, %140
	br i1 %141, label %if.then-22, label %if.else-23

if.then-22:
	; SelectorExpr
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0
	%144 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %143, i64 0, i32 3
	%145 = load {i8*, i64, i64}*, {i8*, i64, i64}** %144, align 8
	; IndexExpr
	%146 = load %..string, %..string* %6, align 8
	%147 = extractvalue %..string %146, 0
	%148 = extractvalue %..string %146, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b7, i64 0, i32 0), i64 21}, i64 596, i64 28, i64 0, i64 %148)
	%149 = getelementptr inbounds i8, i8* %147, i64 0
	%150 = load i8, i8* %149, align 1
	call void @.fmt-4.write_byte({i8*, i64, i64}* %145, i8 %150)
	%151 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%152 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%153 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %152, i64 0
	%154 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %153, i64 0, i32 1
	%155 = load i64, i64* %154, align 8
	; SelectorExpr
	%156 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 1
	%157 = load i64, i64* %156, align 8
	%158 = sub i64 %155, %157
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %151, i64 %158)
	; SelectorExpr
	%159 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%160 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %159, i64 0
	%161 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %160, i64 0, i32 3
	%162 = load {i8*, i64, i64}*, {i8*, i64, i64}** %161, align 8
	; SliceExpr
	%163 = load %..string, %..string* %6, align 8
	%164 = extractvalue %..string %163, 1
	%165 = extractvalue %..string %163, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b8, i64 0, i32 0), i64 21}, i64 598, i64 29, i64 1, i64 %164)
	%166 = extractvalue %..string %163, 0
	%167 = getelementptr inbounds i8, i8* %166, i64 1
	%168 = sub i64 %164, 1
	store %..string zeroinitializer, %..string* %11
	%169 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 0
	store i8* %167, i8** %169
	%170 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 1
	store i64 %168, i64* %170
	%171 = load %..string, %..string* %11, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %162, %..string %171)
	br label %if.done-24

if.else-23:
	%172 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%173 = load %..string, %..string* %6, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %172, %..string %173)
	br label %if.done-24

if.done-24:
	br label %if.done-26

if.else-25:
	%174 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SliceExpr
	%175 = load %..string, %..string* %6, align 8
	%176 = extractvalue %..string %175, 1
	%177 = extractvalue %..string %175, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$b9, i64 0, i32 0), i64 21}, i64 603, i64 16, i64 1, i64 %176)
	%178 = extractvalue %..string %175, 0
	%179 = getelementptr inbounds i8, i8* %178, i64 1
	%180 = sub i64 %176, 1
	store %..string zeroinitializer, %..string* %12
	%181 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 0
	store i8* %179, i8** %181
	%182 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 1
	store i64 %180, i64* %182
	%183 = load %..string, %..string* %12, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %174, %..string %183)
	br label %if.done-26

if.done-26:
	br label %match.done-27

match.done-27:
	ret void
}

define void @.fmt-4.fmt_string(%fmt-4.Fmt_Info* %fi, %..string %s, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 115
	br i1 %4, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%5 = icmp eq i32 %3, 118
	br i1 %5, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%6 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%7 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %6, i32 %7)
	br label %match.done-4

match.case.body-3:
	; SelectorExpr
	%8 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0, i32 3
	%11 = load {i8*, i64, i64}*, {i8*, i64, i64}** %10, align 8
	%12 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %11, %..string %12)
	br label %match.done-4

match.done-4:
	ret void
}

define void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %fi, %..rawptr %p, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i32, align 4
	%3 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 112
	br i1 %5, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%7 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %7, i32 %8)
	; ReturnStmt
	ret void

match.case.body-3:
	br label %match.done-4

match.done-4:
	; u
	store i64 zeroinitializer, i64* %3
		%9 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%10 = ptrtoint %..rawptr %9 to i64
	; cast - cast
	%11 = bitcast i64 %10 to i64
	store i64 %11, i64* %3
	; IfStmt
	; SelectorExpr
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %13, i64 0, i32 8
	%15 = load i1, i1* %14, align 1
	br i1 %15, label %cmp.or-5, label %if.then-6

cmp.or-5:
	%16 = load i32, i32* %2, align 4
	%17 = icmp eq i32 %16, 118
	br i1 %17, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%18 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0, i32 3
	%21 = load {i8*, i64, i64}*, {i8*, i64, i64}** %20, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %21, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ba, i64 0, i32 0), i64 2})
	br label %if.done-7

if.done-7:
	%22 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%23 = load i64, i64* %3, align 8
	%24 = load %..string, %..string* @.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %22, i64 %23, i64 16, i1 false, i64 64, %..string %24)
	ret void
}

define void @.fmt-4.fmt_enum(%fmt-4.Fmt_Info* %fi, %..any %v, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info.Enum, align 8
	%4 = alloca %..any, align 8
	%5 = alloca i64, align 8
	%6 = alloca double, align 8
	%7 = alloca i1, align 1
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca i8, align 1
	%11 = alloca i16, align 2
	%12 = alloca i32, align 4
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i16, align 2
	%17 = alloca i32, align 4
	%18 = alloca i64, align 8
	%19 = alloca i64, align 8
	%20 = alloca float, align 4
	%21 = alloca i64, align 8
	%22 = alloca double, align 8
	%23 = alloca i64, align 8
	%24 = alloca {[0 x <8 x i8>], [8 x i8]}, align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	%28 = alloca {[0 x <8 x i8>], [8 x i8]}, align 8
	%29 = alloca i64, align 8
	%30 = alloca i64, align 8
	%31 = alloca i64, align 8
	%32 = alloca %Type_Info*, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %v, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%33 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%34 = load %Type_Info*, %Type_Info** %33, align 8
	%35 = icmp eq %Type_Info* %34, zeroinitializer
	br i1 %35, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%36 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%37 = load %..rawptr, %..rawptr* %36, align 8
	%38 = icmp eq %..rawptr %37, zeroinitializer
	br i1 %38, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %40, i64 0, i32 3
	%42 = load {i8*, i64, i64}*, {i8*, i64, i64}** %41, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %42, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$bb, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; TypeMatchStmt
	; SelectorExpr
	%43 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%44 = load %Type_Info*, %Type_Info** %43, align 8
	; get union's tag
	%45 = getelementptr inbounds %Type_Info, %Type_Info* %44, i64 0, i32 2 ; UnionTagPtr
	%46 = load i64, i64* %45, align 8
	%47 = bitcast %Type_Info* %44 to %..rawptr
	%48 = icmp eq i64 %46, 17
	br i1 %48, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	store %Type_Info* zeroinitializer, %Type_Info** %32
	store %Type_Info* %44, %Type_Info** %32
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %49, i32 %50)
	; ReturnStmt
	ret void

typematch.body-5:
	%51 = bitcast %..rawptr %47 to %Type_Info.Enum*
	%52 = load %Type_Info.Enum, %Type_Info.Enum* %51, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %3
	store %Type_Info.Enum %52, %Type_Info.Enum* %3
	; MatchStmt
	%53 = load i32, i32* %2, align 4
	%54 = icmp eq i32 %53, 100
	br i1 %54, label %match.case.body-8, label %match.case.next-6

match.case.next-6:
	%55 = icmp eq i32 %53, 102
	br i1 %55, label %match.case.body-8, label %match.case.next-7

match.case.next-7:
	%56 = icmp eq i32 %53, 115
	br i1 %56, label %match.fall.body-11, label %match.case.next-9

match.case.body-8:
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %4
	store %..any zeroinitializer, %..any* %4
	; SelectorExpr
	%58 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%59 = load %Type_Info*, %Type_Info** %58, align 8
	%60 = call %Type_Info* @.type_info_base(%Type_Info* %59)
	%61 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %Type_Info* %60, %Type_Info** %61
	; SelectorExpr
	%62 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %..rawptr %63, %..rawptr* %64
	%65 = load %..any, %..any* %4, align 8
	%66 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %57, %..any %65, i32 %66)
	br label %match.done-55

match.case.next-9:
	%67 = icmp eq i32 %53, 118
	br i1 %67, label %match.fall.body-11, label %match.case.next-10

match.case.next-10:
	%68 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%69 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %68, i32 %69)
	; ReturnStmt
	ret void

match.fall.body-11:
	; i
	store i64 zeroinitializer, i64* %5
		; f
	store double zeroinitializer, double* %6
		; ok
	store i1 zeroinitializer, i1* %7
		store i1 false, i1* %7
	; a
	store %..any zeroinitializer, %..any* %8
		; CompoundLit
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; SelectorExpr
	%70 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%71 = load %Type_Info*, %Type_Info** %70, align 8
	%72 = call %Type_Info* @.type_info_base(%Type_Info* %71)
	%73 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %Type_Info* %72, %Type_Info** %73
	; SelectorExpr
	%74 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%75 = load %..rawptr, %..rawptr* %74, align 8
	%76 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..rawptr %75, %..rawptr* %76
	%77 = load %..any, %..any* %9, align 8
	store %..any %77, %..any* %8
	; TypeMatchStmt
	%78 = load %..any, %..any* %8, align 8
	%79 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%80 = load %Type_Info*, %Type_Info** %79, align 8
	%81 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%82 = icmp eq %Type_Info* %80, %81
	br i1 %82, label %typematch.body-13, label %typematch.next-12

typematch.next-12:
	%83 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%84 = load %Type_Info*, %Type_Info** %83, align 8
	%85 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%86 = icmp eq %Type_Info* %84, %85
	br i1 %86, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%87 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%88 = load %..rawptr, %..rawptr* %87, align 8
	%89 = bitcast %..rawptr %88 to i8*
	%90 = load i8, i8* %89, align 1
	store i8 zeroinitializer, i8* %10
	store i8 %90, i8* %10
	; AssignStmt
	%91 = load i8, i8* %10, align 1
	; cast - cast
	%92 = sext i8 %91 to i64
	store i64 %92, i64* %5
	br label %typematch.done-36

typematch.next-14:
	%93 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%94 = load %Type_Info*, %Type_Info** %93, align 8
	%95 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%96 = icmp eq %Type_Info* %94, %95
	br i1 %96, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%97 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%98 = load %..rawptr, %..rawptr* %97, align 8
	%99 = bitcast %..rawptr %98 to i16*
	%100 = load i16, i16* %99, align 2
	store i16 zeroinitializer, i16* %11
	store i16 %100, i16* %11
	; AssignStmt
	%101 = load i16, i16* %11, align 2
	; cast - cast
	%102 = sext i16 %101 to i64
	store i64 %102, i64* %5
	br label %typematch.done-36

typematch.next-16:
	%103 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%104 = load %Type_Info*, %Type_Info** %103, align 8
	%105 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%106 = icmp eq %Type_Info* %104, %105
	br i1 %106, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%107 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%108 = load %..rawptr, %..rawptr* %107, align 8
	%109 = bitcast %..rawptr %108 to i32*
	%110 = load i32, i32* %109, align 4
	store i32 zeroinitializer, i32* %12
	store i32 %110, i32* %12
	; AssignStmt
	%111 = load i32, i32* %12, align 4
	; cast - cast
	%112 = sext i32 %111 to i64
	store i64 %112, i64* %5
	br label %typematch.done-36

typematch.next-18:
	%113 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%114 = load %Type_Info*, %Type_Info** %113, align 8
	%115 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%116 = icmp eq %Type_Info* %114, %115
	br i1 %116, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%117 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%118 = load %..rawptr, %..rawptr* %117, align 8
	%119 = bitcast %..rawptr %118 to i64*
	%120 = load i64, i64* %119, align 8
	store i64 zeroinitializer, i64* %13
	store i64 %120, i64* %13
	; AssignStmt
	%121 = load i64, i64* %13, align 8
	; cast - cast
	store i64 %121, i64* %5
	br label %typematch.done-36

typematch.next-20:
	%122 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%123 = load %Type_Info*, %Type_Info** %122, align 8
	%124 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%125 = icmp eq %Type_Info* %123, %124
	br i1 %125, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%126 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%127 = load %..rawptr, %..rawptr* %126, align 8
	%128 = bitcast %..rawptr %127 to i64*
	%129 = load i64, i64* %128, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %129, i64* %14
	; AssignStmt
	%130 = load i64, i64* %14, align 8
	; cast - cast
	%131 = bitcast i64 %130 to i64
	store i64 %131, i64* %5
	br label %typematch.done-36

typematch.next-22:
	%132 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%133 = load %Type_Info*, %Type_Info** %132, align 8
	%134 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%135 = icmp eq %Type_Info* %133, %134
	br i1 %135, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%136 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%137 = load %..rawptr, %..rawptr* %136, align 8
	%138 = bitcast %..rawptr %137 to i8*
	%139 = load i8, i8* %138, align 1
	store i8 zeroinitializer, i8* %15
	store i8 %139, i8* %15
	; AssignStmt
	%140 = load i8, i8* %15, align 1
	; cast - cast
	%141 = zext i8 %140 to i64
	store i64 %141, i64* %5
	br label %typematch.done-36

typematch.next-24:
	%142 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%143 = load %Type_Info*, %Type_Info** %142, align 8
	%144 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%145 = icmp eq %Type_Info* %143, %144
	br i1 %145, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%146 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%147 = load %..rawptr, %..rawptr* %146, align 8
	%148 = bitcast %..rawptr %147 to i16*
	%149 = load i16, i16* %148, align 2
	store i16 zeroinitializer, i16* %16
	store i16 %149, i16* %16
	; AssignStmt
	%150 = load i16, i16* %16, align 2
	; cast - cast
	%151 = zext i16 %150 to i64
	store i64 %151, i64* %5
	br label %typematch.done-36

typematch.next-26:
	%152 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%153 = load %Type_Info*, %Type_Info** %152, align 8
	%154 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%155 = icmp eq %Type_Info* %153, %154
	br i1 %155, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%156 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%157 = load %..rawptr, %..rawptr* %156, align 8
	%158 = bitcast %..rawptr %157 to i32*
	%159 = load i32, i32* %158, align 4
	store i32 zeroinitializer, i32* %17
	store i32 %159, i32* %17
	; AssignStmt
	%160 = load i32, i32* %17, align 4
	; cast - cast
	%161 = zext i32 %160 to i64
	store i64 %161, i64* %5
	br label %typematch.done-36

typematch.next-28:
	%162 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%163 = load %Type_Info*, %Type_Info** %162, align 8
	%164 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	%165 = icmp eq %Type_Info* %163, %164
	br i1 %165, label %typematch.body-31, label %typematch.next-30

typematch.body-29:
	%166 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%167 = load %..rawptr, %..rawptr* %166, align 8
	%168 = bitcast %..rawptr %167 to i64*
	%169 = load i64, i64* %168, align 8
	store i64 zeroinitializer, i64* %18
	store i64 %169, i64* %18
	; AssignStmt
	%170 = load i64, i64* %18, align 8
	; cast - cast
	%171 = bitcast i64 %170 to i64
	store i64 %171, i64* %5
	br label %typematch.done-36

typematch.next-30:
	%172 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%173 = load %Type_Info*, %Type_Info** %172, align 8
	%174 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%175 = icmp eq %Type_Info* %173, %174
	br i1 %175, label %typematch.body-33, label %typematch.next-32

typematch.body-31:
	%176 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%177 = load %..rawptr, %..rawptr* %176, align 8
	%178 = bitcast %..rawptr %177 to i64*
	%179 = load i64, i64* %178, align 8
	store i64 zeroinitializer, i64* %19
	store i64 %179, i64* %19
	; AssignStmt
	%180 = load i64, i64* %19, align 8
	; cast - cast
	%181 = bitcast i64 %180 to i64
	store i64 %181, i64* %5
	br label %typematch.done-36

typematch.next-32:
	%182 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%183 = load %Type_Info*, %Type_Info** %182, align 8
	%184 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	%185 = icmp eq %Type_Info* %183, %184
	br i1 %185, label %typematch.body-35, label %typematch.next-34

typematch.body-33:
	%186 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%187 = load %..rawptr, %..rawptr* %186, align 8
	%188 = bitcast %..rawptr %187 to float*
	%189 = load float, float* %188, align 4
	store float zeroinitializer, float* %20
	store float %189, float* %20
	; AssignStmt
	%190 = load float, float* %20, align 4
	; cast - cast
	%191 = fpext float %190 to double
	store double %191, double* %6
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %21
	%192 = load double, double* %6, align 8
	%193 = bitcast double %192 to i64
	store i64 %193, i64* %21
	%194 = load i64, i64* %21, align 8
	store i64 %194, i64* %5
	br label %typematch.done-36

typematch.next-34:
	br label %typematch.done-36

typematch.body-35:
	%195 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%196 = load %..rawptr, %..rawptr* %195, align 8
	%197 = bitcast %..rawptr %196 to double*
	%198 = load double, double* %197, align 8
	store double zeroinitializer, double* %22
	store double %198, double* %22
	; AssignStmt
	%199 = load double, double* %22, align 8
	; cast - cast
	store double %199, double* %6
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %23
	%200 = load double, double* %6, align 8
	%201 = bitcast double %200 to i64
	store i64 %201, i64* %23
	%202 = load i64, i64* %23, align 8
	store i64 %202, i64* %5
	br label %typematch.done-36

typematch.done-36:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%203 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%204 = load %Type_Info*, %Type_Info** %203, align 8
	%205 = call i1 @.types-21.is_string(%Type_Info* %204)
	br i1 %205, label %if.then-37, label %if.else-43

if.then-37:
	; RangeStmt
	; val
	store {[0 x <8 x i8>], [8 x i8]} zeroinitializer, {[0 x <8 x i8>], [8 x i8]}* %24
		; idx
	store i64 zeroinitializer, i64* %25
		; SelectorExpr
	%206 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 2
	%207 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %206, align 8
	store i64 zeroinitializer, i64* %26
	%208 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %207, 1
	store i64 %208, i64* %26
	store i64 zeroinitializer, i64* %27
	store i64 -1, i64* %27
	br label %for.index.loop-38

for.index.loop-38:
	%209 = load i64, i64* %27, align 8
	%210 = add i64 %209, 1
	store i64 %210, i64* %27
	%211 = load i64, i64* %26, align 8
	%212 = icmp slt i64 %210, %211
	br i1 %212, label %for.index.body-39, label %for.index.done-42

for.index.body-39:
	%213 = load i64, i64* %27, align 8
	%214 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %207, 0
	%215 = getelementptr inbounds {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %214, i64 %213
	%216 = load {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %215, align 8
	store {[0 x <8 x i8>], [8 x i8]} %216, {[0 x <8 x i8>], [8 x i8]}* %24
	store i64 %213, i64* %25
	; IfStmt
	; SelectorExpr
	%217 = bitcast {[0 x <8 x i8>], [8 x i8]}* %24 to i64*
	%218 = load i64, i64* %217, align 8
	%219 = load i64, i64* %5, align 8
	%220 = icmp eq i64 %218, %219
	br i1 %220, label %if.then-40, label %if.done-41

if.then-40:
	; SelectorExpr
	%221 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%222 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %221, i64 0
	%223 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %222, i64 0, i32 3
	%224 = load {i8*, i64, i64}*, {i8*, i64, i64}** %223, align 8
	; IndexExpr
	; SelectorExpr
	%225 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 1
	%226 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %225, align 8
	%227 = extractvalue {%..string*, i64, i64} %226, 0
	%228 = extractvalue {%..string*, i64, i64} %226, 1
	%229 = load i64, i64* %25, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$bc, i64 0, i32 0), i64 21}, i64 673, i64 36, i64 %229, i64 %228)
	%230 = getelementptr inbounds %..string, %..string* %227, i64 %229
	%231 = load %..string, %..string* %230, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %224, %..string %231)
	; AssignStmt
	store i1 true, i1* %7
	; break
	br label %for.index.done-42

if.done-41:
	br label %for.index.loop-38

for.index.done-42:
	br label %if.done-52

if.else-43:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%232 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 2
	%233 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %232, i64 0, i32 1
	%234 = load i64, i64* %233, align 8
	%235 = icmp eq i64 %234, 0
	br i1 %235, label %if.then-44, label %if.else-45

if.then-44:
	; SelectorExpr
	%236 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%237 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %236, i64 0
	%238 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %237, i64 0, i32 3
	%239 = load {i8*, i64, i64}*, {i8*, i64, i64}** %238, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %239, %..string zeroinitializer)
	; AssignStmt
	store i1 true, i1* %7
	br label %if.done-51

if.else-45:
	; RangeStmt
	; val
	store {[0 x <8 x i8>], [8 x i8]} zeroinitializer, {[0 x <8 x i8>], [8 x i8]}* %28
		; idx
	store i64 zeroinitializer, i64* %29
		; SelectorExpr
	%240 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 2
	%241 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %240, align 8
	store i64 zeroinitializer, i64* %30
	%242 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %241, 1
	store i64 %242, i64* %30
	store i64 zeroinitializer, i64* %31
	store i64 -1, i64* %31
	br label %for.index.loop-46

for.index.loop-46:
	%243 = load i64, i64* %31, align 8
	%244 = add i64 %243, 1
	store i64 %244, i64* %31
	%245 = load i64, i64* %30, align 8
	%246 = icmp slt i64 %244, %245
	br i1 %246, label %for.index.body-47, label %for.index.done-50

for.index.body-47:
	%247 = load i64, i64* %31, align 8
	%248 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %241, 0
	%249 = getelementptr inbounds {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %248, i64 %247
	%250 = load {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %249, align 8
	store {[0 x <8 x i8>], [8 x i8]} %250, {[0 x <8 x i8>], [8 x i8]}* %28
	store i64 %247, i64* %29
	; IfStmt
	; SelectorExpr
	%251 = bitcast {[0 x <8 x i8>], [8 x i8]}* %28 to i64*
	%252 = load i64, i64* %251, align 8
	%253 = load i64, i64* %5, align 8
	%254 = icmp eq i64 %252, %253
	br i1 %254, label %if.then-48, label %if.done-49

if.then-48:
	; SelectorExpr
	%255 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%256 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %255, i64 0
	%257 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %256, i64 0, i32 3
	%258 = load {i8*, i64, i64}*, {i8*, i64, i64}** %257, align 8
	; IndexExpr
	; SelectorExpr
	%259 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 1
	%260 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %259, align 8
	%261 = extractvalue {%..string*, i64, i64} %260, 0
	%262 = extractvalue {%..string*, i64, i64} %260, 1
	%263 = load i64, i64* %29, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$bd, i64 0, i32 0), i64 21}, i64 684, i64 36, i64 %263, i64 %262)
	%264 = getelementptr inbounds %..string, %..string* %261, i64 %263
	%265 = load %..string, %..string* %264, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %258, %..string %265)
	; AssignStmt
	store i1 true, i1* %7
	; break
	br label %for.index.done-50

if.done-49:
	br label %for.index.loop-46

for.index.done-50:
	br label %if.done-51

if.done-51:
	br label %if.done-52

if.done-52:
	; IfStmt
	%266 = load i1, i1* %7, align 1
	br i1 %266, label %if.done-54, label %if.then-53

if.then-53:
	; SelectorExpr
	%267 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%268 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %267, i64 0
	%269 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %268, i64 0, i32 3
	%270 = load {i8*, i64, i64}*, {i8*, i64, i64}** %269, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %270, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$be, i64 0, i32 0), i64 18})
	br label %if.done-54

if.done-54:
	br label %match.done-55

match.done-55:
	br label %typematch.done-56

typematch.done-56:
	ret void
}

define void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %fi, %..any %v, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info.Named, align 8
	%4 = alloca %Type_Info.Struct, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i8*, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %Type_Info*, align 8
	%11 = alloca %..any, align 8
	%12 = alloca %Type_Info.Boolean, align 1
	%13 = alloca %Type_Info.Float, align 8
	%14 = alloca %Type_Info.Integer, align 8
	%15 = alloca %Type_Info.String, align 1
	%16 = alloca %Type_Info.Pointer, align 8
	%17 = alloca %Type_Info.Array, align 8
	%18 = alloca i64, align 8
	%19 = alloca i64, align 8
	%20 = alloca i64, align 8
	%21 = alloca i8*, align 8
	%22 = alloca %..any, align 8
	%23 = alloca %Type_Info.Dynamic_Array, align 8
	%24 = alloca %Raw_Dynamic_Array*, align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	%28 = alloca i8*, align 8
	%29 = alloca %..any, align 8
	%30 = alloca %Type_Info.Map, align 8
	%31 = alloca %Raw_Dynamic_Array*, align 8
	%32 = alloca %Raw_Dynamic_Map*, align 8
	%33 = alloca %Type_Info.Struct*, align 8
	%34 = alloca {%Type_Info.Struct*, i1}, align 8
	%35 = alloca %Type_Info.Dynamic_Array*, align 8
	%36 = alloca {%Type_Info.Dynamic_Array*, i1}, align 8
	%37 = alloca %Type_Info.Struct*, align 8
	%38 = alloca {%Type_Info.Struct*, i1}, align 8
	%39 = alloca i64, align 8
	%40 = alloca i64, align 8
	%41 = alloca i64, align 8
	%42 = alloca i64, align 8
	%43 = alloca i8*, align 8
	%44 = alloca %__Map_Entry_Header*, align 8
	%45 = alloca %fmt-4.Fmt_Info, align 8
	%46 = alloca %fmt-4.Fmt_Info, align 8
	%47 = alloca %..any, align 8
	%48 = alloca i8*, align 8
	%49 = alloca %..any, align 8
	%50 = alloca %Type_Info.Slice, align 8
	%51 = alloca {i8*, i64, i64}*, align 8
	%52 = alloca i64, align 8
	%53 = alloca i64, align 8
	%54 = alloca i64, align 8
	%55 = alloca i8*, align 8
	%56 = alloca %..any, align 8
	%57 = alloca %Type_Info.Vector, align 8
	%58 = alloca i64, align 8
	%59 = alloca i64, align 8
	%60 = alloca i64, align 8
	%61 = alloca i8*, align 8
	%62 = alloca %..any, align 8
	%63 = alloca %Type_Info.Struct, align 8
	%64 = alloca i64, align 8
	%65 = alloca i64, align 8
	%66 = alloca i64, align 8
	%67 = alloca i8*, align 8
	%68 = alloca %..any, align 8
	%69 = alloca %Type_Info.Union, align 8
	%70 = alloca {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, align 8
	%71 = alloca i64, align 8
	%72 = alloca i64, align 8
	%73 = alloca i64, align 8
	%74 = alloca i8*, align 8
	%75 = alloca %..any, align 8
	%76 = alloca %Type_Info.Raw_Union, align 8
	%77 = alloca %Type_Info.Enum, align 8
	%78 = alloca %Type_Info.Procedure, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %v, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%79 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%80 = load %..rawptr, %..rawptr* %79, align 8
	%81 = icmp eq %..rawptr %80, zeroinitializer
	br i1 %81, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%82 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%83 = load %Type_Info*, %Type_Info** %82, align 8
	%84 = icmp eq %Type_Info* %83, zeroinitializer
	br i1 %84, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%85 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%86 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %85, i64 0
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0, i32 3
	%88 = load {i8*, i64, i64}*, {i8*, i64, i64}** %87, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %88, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$bf, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; TypeMatchStmt
	; SelectorExpr
	%89 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%90 = load %Type_Info*, %Type_Info** %89, align 8
	; get union's tag
	%91 = getelementptr inbounds %Type_Info, %Type_Info* %90, i64 0, i32 2 ; UnionTagPtr
	%92 = load i64, i64* %91, align 8
	%93 = bitcast %Type_Info* %90 to %..rawptr
	%94 = icmp eq i64 %92, 1
	br i1 %94, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	%95 = icmp eq i64 %92, 5
	br i1 %95, label %typematch.body-17, label %typematch.next-16

typematch.body-5:
	%96 = bitcast %..rawptr %93 to %Type_Info.Named*
	%97 = load %Type_Info.Named, %Type_Info.Named* %96, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %3
	store %Type_Info.Named %97, %Type_Info.Named* %3
	; TypeMatchStmt
	; SelectorExpr
	%98 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3, i64 0, i32 1
	%99 = load %Type_Info*, %Type_Info** %98, align 8
	; get union's tag
	%100 = getelementptr inbounds %Type_Info, %Type_Info* %99, i64 0, i32 2 ; UnionTagPtr
	%101 = load i64, i64* %100, align 8
	%102 = bitcast %Type_Info* %99 to %..rawptr
	%103 = icmp eq i64 %101, 14
	br i1 %103, label %typematch.body-7, label %typematch.next-6

typematch.next-6:
	store %Type_Info* zeroinitializer, %Type_Info** %10
	store %Type_Info* %99, %Type_Info** %10
	%104 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %11
	store %..any zeroinitializer, %..any* %11
	; SelectorExpr
	%105 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3, i64 0, i32 1
	%106 = load %Type_Info*, %Type_Info** %105, align 8
	%107 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	store %Type_Info* %106, %Type_Info** %107
	; SelectorExpr
	%108 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%109 = load %..rawptr, %..rawptr* %108, align 8
	%110 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %..rawptr %109, %..rawptr* %110
	%111 = load %..any, %..any* %11, align 8
	%112 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %104, %..any %111, i32 %112)
	br label %typematch.done-15

typematch.body-7:
	%113 = bitcast %..rawptr %102 to %Type_Info.Struct*
	%114 = load %Type_Info.Struct, %Type_Info.Struct* %113, align 8
	store %Type_Info.Struct zeroinitializer, %Type_Info.Struct* %4
	store %Type_Info.Struct %114, %Type_Info.Struct* %4
	; IfStmt
	%115 = load i32, i32* %2, align 4
	%116 = icmp ne i32 %115, 118
	br i1 %116, label %if.then-8, label %if.done-9

if.then-8:
	%117 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%118 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %117, i32 %118)
	; ReturnStmt
	ret void

if.done-9:
	; SelectorExpr
	%119 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%120 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %119, i64 0
	%121 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %120, i64 0, i32 3
	%122 = load {i8*, i64, i64}*, {i8*, i64, i64}** %121, align 8
	; SelectorExpr
	%123 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3, i64 0, i32 0
	%124 = load %..string, %..string* %123, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %122, %..string %124)
	; SelectorExpr
	%125 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%126 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %125, i64 0
	%127 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %126, i64 0, i32 3
	%128 = load {i8*, i64, i64}*, {i8*, i64, i64}** %127, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %128, i8 123)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%129 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%130 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %129, i64 0, i32 1
	%131 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %130, align 8
	store i64 zeroinitializer, i64* %6
	%132 = extractvalue {%..string*, i64, i64} %131, 1
	store i64 %132, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-10

for.index.loop-10:
	%133 = load i64, i64* %7, align 8
	%134 = add i64 %133, 1
	store i64 %134, i64* %7
	%135 = load i64, i64* %6, align 8
	%136 = icmp slt i64 %134, %135
	br i1 %136, label %for.index.body-11, label %for.index.done-14

for.index.body-11:
	%137 = load i64, i64* %7, align 8
	store i64 %137, i64* %5
	; IfStmt
	%138 = load i64, i64* %5, align 8
	%139 = icmp sgt i64 %138, 0
	br i1 %139, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%140 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%141 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %140, i64 0
	%142 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %141, i64 0, i32 3
	%143 = load {i8*, i64, i64}*, {i8*, i64, i64}** %142, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %143, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$c0, i64 0, i32 0), i64 2})
	br label %if.done-13

if.done-13:
	; SelectorExpr
	%144 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%145 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %144, i64 0
	%146 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %145, i64 0, i32 3
	%147 = load {i8*, i64, i64}*, {i8*, i64, i64}** %146, align 8
	; IndexExpr
	; SelectorExpr
	%148 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%149 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %148, i64 0, i32 1
	%150 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %149, align 8
	%151 = extractvalue {%..string*, i64, i64} %150, 0
	%152 = extractvalue {%..string*, i64, i64} %150, 1
	%153 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$c1, i64 0, i32 0), i64 21}, i64 723, i64 34, i64 %153, i64 %152)
	%154 = getelementptr inbounds %..string, %..string* %151, i64 %153
	%155 = load %..string, %..string* %154, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %147, %..string %155)
	; SelectorExpr
	%156 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%157 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %156, i64 0
	%158 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %157, i64 0, i32 3
	%159 = load {i8*, i64, i64}*, {i8*, i64, i64}** %158, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %159, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$c2, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %8
		; SelectorExpr
	%160 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%161 = load %..rawptr, %..rawptr* %160, align 8
	; cast - cast
	%162 = bitcast %..rawptr %161 to i8*
	; IndexExpr
	; SelectorExpr
	%163 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%164 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %163, i64 0, i32 2
	%165 = load {i64*, i64, i64}, {i64*, i64, i64}* %164, align 8
	%166 = extractvalue {i64*, i64, i64} %165, 0
	%167 = extractvalue {i64*, i64, i64} %165, 1
	%168 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$c3, i64 0, i32 0), i64 21}, i64 725, i64 43, i64 %168, i64 %167)
	%169 = getelementptr inbounds i64, i64* %166, i64 %168
	%170 = load i64, i64* %169, align 8
	%171 = getelementptr inbounds i8, i8* %162, i64 %170
	store i8* %171, i8** %8
	%172 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; IndexExpr
	; SelectorExpr
	%173 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%174 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %173, i64 0, i32 0
	%175 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %174, align 8
	%176 = extractvalue {%Type_Info**, i64, i64} %175, 0
	%177 = extractvalue {%Type_Info**, i64, i64} %175, 1
	%178 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$c4, i64 0, i32 0), i64 21}, i64 726, i64 29, i64 %178, i64 %177)
	%179 = getelementptr inbounds %Type_Info*, %Type_Info** %176, i64 %178
	%180 = load %Type_Info*, %Type_Info** %179, align 8
	%181 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %Type_Info* %180, %Type_Info** %181
	%182 = load i8*, i8** %8, align 8
	; cast - cast
	%183 = bitcast i8* %182 to %..rawptr
	%184 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..rawptr %183, %..rawptr* %184
	%185 = load %..any, %..any* %9, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %172, %..any %185, i32 118)
	br label %for.index.loop-10

for.index.done-14:
	; SelectorExpr
	%186 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%187 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %186, i64 0
	%188 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %187, i64 0, i32 3
	%189 = load {i8*, i64, i64}*, {i8*, i64, i64}** %188, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %189, i8 125)
	br label %typematch.done-15

typematch.done-15:
	br label %typematch.done-101

typematch.next-16:
	%190 = icmp eq i64 %92, 3
	br i1 %190, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%191 = bitcast %..rawptr %93 to %Type_Info.Boolean*
	%192 = load %Type_Info.Boolean, %Type_Info.Boolean* %191, align 1
	store %Type_Info.Boolean zeroinitializer, %Type_Info.Boolean* %12
	store %Type_Info.Boolean %192, %Type_Info.Boolean* %12
	%193 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%194 = load %..any, %..any* %1, align 8
	%195 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %193, %..any %194, i32 %195)
	br label %typematch.done-101

typematch.next-18:
	%196 = icmp eq i64 %92, 2
	br i1 %196, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%197 = bitcast %..rawptr %93 to %Type_Info.Float*
	%198 = load %Type_Info.Float, %Type_Info.Float* %197, align 8
	store %Type_Info.Float zeroinitializer, %Type_Info.Float* %13
	store %Type_Info.Float %198, %Type_Info.Float* %13
	%199 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%200 = load %..any, %..any* %1, align 8
	%201 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %199, %..any %200, i32 %201)
	br label %typematch.done-101

typematch.next-20:
	%202 = icmp eq i64 %92, 4
	br i1 %202, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%203 = bitcast %..rawptr %93 to %Type_Info.Integer*
	%204 = load %Type_Info.Integer, %Type_Info.Integer* %203, align 8
	store %Type_Info.Integer zeroinitializer, %Type_Info.Integer* %14
	store %Type_Info.Integer %204, %Type_Info.Integer* %14
	%205 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%206 = load %..any, %..any* %1, align 8
	%207 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %205, %..any %206, i32 %207)
	br label %typematch.done-101

typematch.next-22:
	%208 = icmp eq i64 %92, 7
	br i1 %208, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%209 = bitcast %..rawptr %93 to %Type_Info.String*
	%210 = load %Type_Info.String, %Type_Info.String* %209, align 1
	store %Type_Info.String zeroinitializer, %Type_Info.String* %15
	store %Type_Info.String %210, %Type_Info.String* %15
	%211 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%212 = load %..any, %..any* %1, align 8
	%213 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %211, %..any %212, i32 %213)
	br label %typematch.done-101

typematch.next-24:
	%214 = icmp eq i64 %92, 9
	br i1 %214, label %typematch.body-30, label %typematch.next-29

typematch.body-25:
	%215 = bitcast %..rawptr %93 to %Type_Info.Pointer*
	%216 = load %Type_Info.Pointer, %Type_Info.Pointer* %215, align 8
	store %Type_Info.Pointer zeroinitializer, %Type_Info.Pointer* %16
	store %Type_Info.Pointer %216, %Type_Info.Pointer* %16
	; IfStmt
	; SelectorExpr
	%217 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%218 = load %Type_Info*, %Type_Info** %217, align 8
	%219 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%220 = icmp eq %Type_Info* %218, %219
	br i1 %220, label %if.then-26, label %if.else-27

if.then-26:
	; SelectorExpr
	%221 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%222 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %221, i64 0
	%223 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %222, i64 0, i32 3
	%224 = load {i8*, i64, i64}*, {i8*, i64, i64}** %223, align 8
	; SelectorExpr
	%225 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%226 = load %..rawptr, %..rawptr* %225, align 8
	; cast - cast
	%227 = bitcast %..rawptr %226 to %Type_Info**
	%228 = getelementptr inbounds %Type_Info*, %Type_Info** %227, i64 0
	%229 = load %Type_Info*, %Type_Info** %228, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %224, %Type_Info* %229)
	br label %if.done-28

if.else-27:
	%230 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%231 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%232 = load %..rawptr, %..rawptr* %231, align 8
	; cast - cast
	%233 = bitcast %..rawptr %232 to %..rawptr*
	%234 = getelementptr inbounds %..rawptr, %..rawptr* %233, i64 0
	%235 = load %..rawptr, %..rawptr* %234, align 8
	%236 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %230, %..rawptr %235, i32 %236)
	br label %if.done-28

if.done-28:
	br label %typematch.done-101

typematch.next-29:
	%237 = icmp eq i64 %92, 10
	br i1 %237, label %typematch.body-39, label %typematch.next-38

typematch.body-30:
	%238 = bitcast %..rawptr %93 to %Type_Info.Array*
	%239 = load %Type_Info.Array, %Type_Info.Array* %238, align 8
	store %Type_Info.Array zeroinitializer, %Type_Info.Array* %17
	store %Type_Info.Array %239, %Type_Info.Array* %17
	; IfStmt
	%240 = load i32, i32* %2, align 4
	%241 = icmp ne i32 %240, 118
	br i1 %241, label %if.then-31, label %if.done-32

if.then-31:
	%242 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%243 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %242, i32 %243)
	; ReturnStmt
	ret void

if.done-32:
	; SelectorExpr
	%244 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%245 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %244, i64 0
	%246 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %245, i64 0, i32 3
	%247 = load {i8*, i64, i64}*, {i8*, i64, i64}** %246, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %247, i8 91)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %18
		store i64 zeroinitializer, i64* %19
	store i64 0, i64* %19
	store i64 zeroinitializer, i64* %20
	store i64 0, i64* %20
	br label %for.interval.loop-33

for.interval.loop-33:
	; SelectorExpr
	%248 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %17, i64 0, i32 2
	%249 = load i64, i64* %248, align 8
	%250 = load i64, i64* %19, align 8
	%251 = icmp slt i64 %250, %249
	br i1 %251, label %for.interval.body-34, label %for.interval.done-37

for.interval.body-34:
	%252 = load i64, i64* %19, align 8
	%253 = load i64, i64* %20, align 8
	%254 = load i64, i64* %19, align 8
	%255 = add i64 %254, 1
	store i64 %255, i64* %19
	%256 = load i64, i64* %20, align 8
	%257 = add i64 %256, 1
	store i64 %257, i64* %20
	store i64 %252, i64* %18
	; IfStmt
	%258 = load i64, i64* %18, align 8
	%259 = icmp sgt i64 %258, 0
	br i1 %259, label %if.then-35, label %if.done-36

if.then-35:
	; SelectorExpr
	%260 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%261 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %260, i64 0
	%262 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %261, i64 0, i32 3
	%263 = load {i8*, i64, i64}*, {i8*, i64, i64}** %262, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %263, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$c5, i64 0, i32 0), i64 2})
	br label %if.done-36

if.done-36:
	; data
	store i8* zeroinitializer, i8** %21
		; SelectorExpr
	%264 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%265 = load %..rawptr, %..rawptr* %264, align 8
	; cast - cast
	%266 = bitcast %..rawptr %265 to i8*
	%267 = load i64, i64* %18, align 8
	; SelectorExpr
	%268 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %17, i64 0, i32 1
	%269 = load i64, i64* %268, align 8
	%270 = mul i64 %267, %269
	%271 = getelementptr inbounds i8, i8* %266, i64 %270
	store i8* %271, i8** %21
	%272 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %22
	store %..any zeroinitializer, %..any* %22
	; SelectorExpr
	%273 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %17, i64 0, i32 0
	%274 = load %Type_Info*, %Type_Info** %273, align 8
	%275 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 0
	store %Type_Info* %274, %Type_Info** %275
	%276 = load i8*, i8** %21, align 8
	; cast - cast
	%277 = bitcast i8* %276 to %..rawptr
	%278 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 1
	store %..rawptr %277, %..rawptr* %278
	%279 = load %..any, %..any* %22, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %272, %..any %279, i32 118)
	br label %for.interval.loop-33

for.interval.done-37:
	; defer
	; SelectorExpr
	%280 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%281 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %280, i64 0
	%282 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %281, i64 0, i32 3
	%283 = load {i8*, i64, i64}*, {i8*, i64, i64}** %282, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %283, i8 93)
	br label %typematch.done-101

typematch.next-38:
	%284 = icmp eq i64 %92, 18
	br i1 %284, label %typematch.body-48, label %typematch.next-47

typematch.body-39:
	%285 = bitcast %..rawptr %93 to %Type_Info.Dynamic_Array*
	%286 = load %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %285, align 8
	store %Type_Info.Dynamic_Array zeroinitializer, %Type_Info.Dynamic_Array* %23
	store %Type_Info.Dynamic_Array %286, %Type_Info.Dynamic_Array* %23
	; IfStmt
	%287 = load i32, i32* %2, align 4
	%288 = icmp ne i32 %287, 118
	br i1 %288, label %if.then-40, label %if.done-41

if.then-40:
	%289 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%290 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %289, i32 %290)
	; ReturnStmt
	ret void

if.done-41:
	; SelectorExpr
	%291 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%292 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %291, i64 0
	%293 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %292, i64 0, i32 3
	%294 = load {i8*, i64, i64}*, {i8*, i64, i64}** %293, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %294, i8 91)
	; DeferStmt
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %24
		; SelectorExpr
	%295 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%296 = load %..rawptr, %..rawptr* %295, align 8
	; cast - cast
	%297 = bitcast %..rawptr %296 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %297, %Raw_Dynamic_Array** %24
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %25
		store i64 zeroinitializer, i64* %26
	store i64 0, i64* %26
	store i64 zeroinitializer, i64* %27
	store i64 0, i64* %27
	br label %for.interval.loop-42

for.interval.loop-42:
	; SelectorExpr
	%298 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %24, align 8
	%299 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %298, i64 0
	%300 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %299, i64 0, i32 1
	%301 = load i64, i64* %300, align 8
	%302 = load i64, i64* %26, align 8
	%303 = icmp slt i64 %302, %301
	br i1 %303, label %for.interval.body-43, label %for.interval.done-46

for.interval.body-43:
	%304 = load i64, i64* %26, align 8
	%305 = load i64, i64* %27, align 8
	%306 = load i64, i64* %26, align 8
	%307 = add i64 %306, 1
	store i64 %307, i64* %26
	%308 = load i64, i64* %27, align 8
	%309 = add i64 %308, 1
	store i64 %309, i64* %27
	store i64 %304, i64* %25
	; IfStmt
	%310 = load i64, i64* %25, align 8
	%311 = icmp sgt i64 %310, 0
	br i1 %311, label %if.then-44, label %if.done-45

if.then-44:
	; SelectorExpr
	%312 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%313 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %312, i64 0
	%314 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %313, i64 0, i32 3
	%315 = load {i8*, i64, i64}*, {i8*, i64, i64}** %314, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %315, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$c6, i64 0, i32 0), i64 2})
	br label %if.done-45

if.done-45:
	; data
	store i8* zeroinitializer, i8** %28
		; SelectorExpr
	%316 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %24, align 8
	%317 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %316, i64 0
	%318 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %317, i64 0, i32 0
	%319 = load %..rawptr, %..rawptr* %318, align 8
	; cast - cast
	%320 = bitcast %..rawptr %319 to i8*
	%321 = load i64, i64* %25, align 8
	; SelectorExpr
	%322 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %23, i64 0, i32 1
	%323 = load i64, i64* %322, align 8
	%324 = mul i64 %321, %323
	%325 = getelementptr inbounds i8, i8* %320, i64 %324
	store i8* %325, i8** %28
	%326 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %29
	store %..any zeroinitializer, %..any* %29
	; SelectorExpr
	%327 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %23, i64 0, i32 0
	%328 = load %Type_Info*, %Type_Info** %327, align 8
	%329 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 0
	store %Type_Info* %328, %Type_Info** %329
	%330 = load i8*, i8** %28, align 8
	; cast - cast
	%331 = bitcast i8* %330 to %..rawptr
	%332 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 1
	store %..rawptr %331, %..rawptr* %332
	%333 = load %..any, %..any* %29, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %326, %..any %333, i32 118)
	br label %for.interval.loop-42

for.interval.done-46:
	; defer
	; SelectorExpr
	%334 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%335 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %334, i64 0
	%336 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %335, i64 0, i32 3
	%337 = load {i8*, i64, i64}*, {i8*, i64, i64}** %336, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %337, i8 93)
	br label %typematch.done-101

typematch.next-47:
	%338 = icmp eq i64 %92, 11
	br i1 %338, label %typematch.body-66, label %typematch.next-65

typematch.body-48:
	%339 = bitcast %..rawptr %93 to %Type_Info.Map*
	%340 = load %Type_Info.Map, %Type_Info.Map* %339, align 8
	store %Type_Info.Map zeroinitializer, %Type_Info.Map* %30
	store %Type_Info.Map %340, %Type_Info.Map* %30
	; IfStmt
	%341 = load i32, i32* %2, align 4
	%342 = icmp ne i32 %341, 118
	br i1 %342, label %if.then-49, label %if.done-50

if.then-49:
	%343 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%344 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %343, i32 %344)
	; ReturnStmt
	ret void

if.done-50:
	; SelectorExpr
	%345 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%346 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %345, i64 0
	%347 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %346, i64 0, i32 3
	%348 = load {i8*, i64, i64}*, {i8*, i64, i64}** %347, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %348, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$c7, i64 0, i32 0), i64 4})
	; DeferStmt
	; entries
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %31
		; SelectorExpr
	; Cast - cast
	store %Raw_Dynamic_Map* zeroinitializer, %Raw_Dynamic_Map** %32
	; SelectorExpr
	%349 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%350 = load %..rawptr, %..rawptr* %349, align 8
	%351 = bitcast %..rawptr %350 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %351, %Raw_Dynamic_Map** %32
	%352 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %32, align 8
	%353 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %352, i64 0
	%354 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %353, i64 0, i32 1
	%355 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %354, i64 0
	store %Raw_Dynamic_Array* %355, %Raw_Dynamic_Array** %31
	; gs
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %33
		; SelectorExpr
	%356 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %30, i64 0, i32 2
	%357 = load %Type_Info*, %Type_Info** %356, align 8
	%358 = call %Type_Info* @.type_info_base(%Type_Info* %357)
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %34
	%359 = getelementptr inbounds %Type_Info, %Type_Info* %358, i64 0, i32 2 ; UnionTagPtr
	%360 = load i64, i64* %359, align 8
	%361 = icmp eq i64 %360, 14
	br i1 %361, label %union_cast.ok-51, label %union_cast.end-52

union_cast.ok-51:
	%362 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %34, i64 0, i32 0
	%363 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %34, i64 0, i32 1
	%364 = bitcast %Type_Info* %358 to %Type_Info.Struct*
	store %Type_Info.Struct* %364, %Type_Info.Struct** %362
	store i1 true, i1* %363
	br label %union_cast.end-52

union_cast.end-52:
	%365 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %34, i64 0, i32 1
	%366 = load i1, i1* %365, align 1
	%367 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%368 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	call void @.__union_cast_check(i1 %366, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$c8, i64 0, i32 0), i64 21}, i64 788, i64 9, %Type_Info* %367, %Type_Info* %368)
	%369 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %34, i64 0, i32 0
	%370 = load %Type_Info.Struct*, %Type_Info.Struct** %369, align 8
	store %Type_Info.Struct* %370, %Type_Info.Struct** %33
	; ed
	store %Type_Info.Dynamic_Array* zeroinitializer, %Type_Info.Dynamic_Array** %35
		; IndexExpr
	; SelectorExpr
	%371 = load %Type_Info.Struct*, %Type_Info.Struct** %33, align 8
	%372 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %371, i64 0
	%373 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %372, i64 0, i32 0
	%374 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %373, i64 0, i32 0
	%375 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %374, align 8
	%376 = extractvalue {%Type_Info**, i64, i64} %375, 0
	%377 = extractvalue {%Type_Info**, i64, i64} %375, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$c9, i64 0, i32 0), i64 21}, i64 789, i64 59, i64 1, i64 %377)
	%378 = getelementptr inbounds %Type_Info*, %Type_Info** %376, i64 1
	%379 = load %Type_Info*, %Type_Info** %378, align 8
	%380 = call %Type_Info* @.type_info_base(%Type_Info* %379)
	; cast - union_cast
	store {%Type_Info.Dynamic_Array*, i1} zeroinitializer, {%Type_Info.Dynamic_Array*, i1}* %36
	%381 = getelementptr inbounds %Type_Info, %Type_Info* %380, i64 0, i32 2 ; UnionTagPtr
	%382 = load i64, i64* %381, align 8
	%383 = icmp eq i64 %382, 10
	br i1 %383, label %union_cast.ok-53, label %union_cast.end-54

union_cast.ok-53:
	%384 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %36, i64 0, i32 0
	%385 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %36, i64 0, i32 1
	%386 = bitcast %Type_Info* %380 to %Type_Info.Dynamic_Array*
	store %Type_Info.Dynamic_Array* %386, %Type_Info.Dynamic_Array** %384
	store i1 true, i1* %385
	br label %union_cast.end-54

union_cast.end-54:
	%387 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %36, i64 0, i32 1
	%388 = load i1, i1* %387, align 1
	%389 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%390 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	call void @.__union_cast_check(i1 %388, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ca, i64 0, i32 0), i64 21}, i64 789, i64 9, %Type_Info* %389, %Type_Info* %390)
	%391 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %36, i64 0, i32 0
	%392 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %391, align 8
	store %Type_Info.Dynamic_Array* %392, %Type_Info.Dynamic_Array** %35
	; entry_type
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %37
		; SelectorExpr
	%393 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %35, align 8
	%394 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %393, i64 0
	%395 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %394, i64 0, i32 0
	%396 = load %Type_Info*, %Type_Info** %395, align 8
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %38
	%397 = getelementptr inbounds %Type_Info, %Type_Info* %396, i64 0, i32 2 ; UnionTagPtr
	%398 = load i64, i64* %397, align 8
	%399 = icmp eq i64 %398, 14
	br i1 %399, label %union_cast.ok-55, label %union_cast.end-56

union_cast.ok-55:
	%400 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %38, i64 0, i32 0
	%401 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %38, i64 0, i32 1
	%402 = bitcast %Type_Info* %396 to %Type_Info.Struct*
	store %Type_Info.Struct* %402, %Type_Info.Struct** %400
	store i1 true, i1* %401
	br label %union_cast.end-56

union_cast.end-56:
	%403 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %38, i64 0, i32 1
	%404 = load i1, i1* %403, align 1
	%405 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%406 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	call void @.__union_cast_check(i1 %404, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$cb, i64 0, i32 0), i64 21}, i64 791, i64 17, %Type_Info* %405, %Type_Info* %406)
	%407 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %38, i64 0, i32 0
	%408 = load %Type_Info.Struct*, %Type_Info.Struct** %407, align 8
	store %Type_Info.Struct* %408, %Type_Info.Struct** %37
	; entry_size
	store i64 zeroinitializer, i64* %39
		; SelectorExpr
	%409 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %35, align 8
	%410 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %409, i64 0
	%411 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %410, i64 0, i32 1
	%412 = load i64, i64* %411, align 8
	store i64 %412, i64* %39
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %40
		store i64 zeroinitializer, i64* %41
	store i64 0, i64* %41
	store i64 zeroinitializer, i64* %42
	store i64 0, i64* %42
	br label %for.interval.loop-57

for.interval.loop-57:
	; SelectorExpr
	%413 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %31, align 8
	%414 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %413, i64 0
	%415 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %414, i64 0, i32 1
	%416 = load i64, i64* %415, align 8
	%417 = load i64, i64* %41, align 8
	%418 = icmp slt i64 %417, %416
	br i1 %418, label %for.interval.body-58, label %for.interval.done-64

for.interval.body-58:
	%419 = load i64, i64* %41, align 8
	%420 = load i64, i64* %42, align 8
	%421 = load i64, i64* %41, align 8
	%422 = add i64 %421, 1
	store i64 %422, i64* %41
	%423 = load i64, i64* %42, align 8
	%424 = add i64 %423, 1
	store i64 %424, i64* %42
	store i64 %419, i64* %40
	; IfStmt
	%425 = load i64, i64* %40, align 8
	%426 = icmp sgt i64 %425, 0
	br i1 %426, label %if.then-59, label %if.done-60

if.then-59:
	; SelectorExpr
	%427 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%428 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %427, i64 0
	%429 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %428, i64 0, i32 3
	%430 = load {i8*, i64, i64}*, {i8*, i64, i64}** %429, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %430, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$cc, i64 0, i32 0), i64 2})
	br label %if.done-60

if.done-60:
	; data
	store i8* zeroinitializer, i8** %43
		; SelectorExpr
	%431 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %31, align 8
	%432 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %431, i64 0
	%433 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %432, i64 0, i32 0
	%434 = load %..rawptr, %..rawptr* %433, align 8
	; cast - cast
	%435 = bitcast %..rawptr %434 to i8*
	%436 = load i64, i64* %40, align 8
	%437 = load i64, i64* %39, align 8
	%438 = mul i64 %436, %437
	%439 = getelementptr inbounds i8, i8* %435, i64 %438
	store i8* %439, i8** %43
	; header
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %44
		%440 = load i8*, i8** %43, align 8
	; cast - cast
	%441 = bitcast i8* %440 to %__Map_Entry_Header*
	store %__Map_Entry_Header* %441, %__Map_Entry_Header** %44
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%442 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %30, i64 0, i32 0
	%443 = load %Type_Info*, %Type_Info** %442, align 8
	%444 = call i1 @.types-21.is_string(%Type_Info* %443)
	br i1 %444, label %if.then-61, label %if.else-62

if.then-61:
	; SelectorExpr
	%445 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%446 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %445, i64 0
	%447 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %446, i64 0, i32 3
	%448 = load {i8*, i64, i64}*, {i8*, i64, i64}** %447, align 8
	; SelectorExpr
	; SelectorExpr
	%449 = load %__Map_Entry_Header*, %__Map_Entry_Header** %44, align 8
	%450 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %449, i64 0
	%451 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %450, i64 0, i32 0
	%452 = getelementptr inbounds %__Map_Key, %__Map_Key* %451, i64 0, i32 1
	%453 = load %..string, %..string* %452, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %448, %..string %453)
	br label %if.done-63

if.else-62:
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %45
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %46
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %46
	; SelectorExpr
	%454 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%455 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %454, i64 0
	%456 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %455, i64 0, i32 3
	%457 = load {i8*, i64, i64}*, {i8*, i64, i64}** %456, align 8
	%458 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0, i32 3
	store {i8*, i64, i64}* %457, {i8*, i64, i64}** %458
	%459 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, align 8
	store %fmt-4.Fmt_Info %459, %fmt-4.Fmt_Info* %45
	%460 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %45, i64 0
	; CompoundLit
	store %..any zeroinitializer, %..any* %47
	store %..any zeroinitializer, %..any* %47
	; SelectorExpr
	%461 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %30, i64 0, i32 0
	%462 = load %Type_Info*, %Type_Info** %461, align 8
	%463 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 0
	store %Type_Info* %462, %Type_Info** %463
	; SelectorExpr
	; SelectorExpr
	%464 = load %__Map_Entry_Header*, %__Map_Entry_Header** %44, align 8
	%465 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %464, i64 0
	%466 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %465, i64 0, i32 0
	%467 = getelementptr inbounds %__Map_Key, %__Map_Key* %466, i64 0, i32 0
	%468 = getelementptr inbounds i64, i64* %467, i64 0
	; cast - cast
	%469 = bitcast i64* %468 to %..rawptr
	%470 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 1
	store %..rawptr %469, %..rawptr* %470
	%471 = load %..any, %..any* %47, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %460, %..any %471, i32 118)
	br label %if.done-63

if.done-63:
	; SelectorExpr
	%472 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%473 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %472, i64 0
	%474 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %473, i64 0, i32 3
	%475 = load {i8*, i64, i64}*, {i8*, i64, i64}** %474, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %475, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$cd, i64 0, i32 0), i64 1})
	; value
	store i8* zeroinitializer, i8** %48
		%476 = load i8*, i8** %43, align 8
	; IndexExpr
	; SelectorExpr
	%477 = load %Type_Info.Struct*, %Type_Info.Struct** %37, align 8
	%478 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %477, i64 0
	%479 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %478, i64 0, i32 0
	%480 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %479, i64 0, i32 2
	%481 = load {i64*, i64, i64}, {i64*, i64, i64}* %480, align 8
	%482 = extractvalue {i64*, i64, i64} %481, 0
	%483 = extractvalue {i64*, i64, i64} %481, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ce, i64 0, i32 0), i64 21}, i64 809, i64 39, i64 2, i64 %483)
	%484 = getelementptr inbounds i64, i64* %482, i64 2
	%485 = load i64, i64* %484, align 8
	%486 = getelementptr inbounds i8, i8* %476, i64 %485
	store i8* %486, i8** %48
	%487 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %49
	store %..any zeroinitializer, %..any* %49
	; SelectorExpr
	%488 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %30, i64 0, i32 1
	%489 = load %Type_Info*, %Type_Info** %488, align 8
	%490 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 0
	store %Type_Info* %489, %Type_Info** %490
	%491 = load i8*, i8** %48, align 8
	; cast - cast
	%492 = bitcast i8* %491 to %..rawptr
	%493 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 1
	store %..rawptr %492, %..rawptr* %493
	%494 = load %..any, %..any* %49, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %487, %..any %494, i32 118)
	br label %for.interval.loop-57

for.interval.done-64:
	; defer
	; SelectorExpr
	%495 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%496 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %495, i64 0
	%497 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %496, i64 0, i32 3
	%498 = load {i8*, i64, i64}*, {i8*, i64, i64}** %497, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %498, i8 93)
	br label %typematch.done-101

typematch.next-65:
	%499 = icmp eq i64 %92, 12
	br i1 %499, label %typematch.body-75, label %typematch.next-74

typematch.body-66:
	%500 = bitcast %..rawptr %93 to %Type_Info.Slice*
	%501 = load %Type_Info.Slice, %Type_Info.Slice* %500, align 8
	store %Type_Info.Slice zeroinitializer, %Type_Info.Slice* %50
	store %Type_Info.Slice %501, %Type_Info.Slice* %50
	; IfStmt
	%502 = load i32, i32* %2, align 4
	%503 = icmp ne i32 %502, 118
	br i1 %503, label %if.then-67, label %if.done-68

if.then-67:
	%504 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%505 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %504, i32 %505)
	; ReturnStmt
	ret void

if.done-68:
	; SelectorExpr
	%506 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%507 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %506, i64 0
	%508 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %507, i64 0, i32 3
	%509 = load {i8*, i64, i64}*, {i8*, i64, i64}** %508, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %509, i8 91)
	; DeferStmt
	; slice
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %51
		; SelectorExpr
	%510 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%511 = load %..rawptr, %..rawptr* %510, align 8
	; cast - cast
	%512 = bitcast %..rawptr %511 to {i8*, i64, i64}*
	store {i8*, i64, i64}* %512, {i8*, i64, i64}** %51
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %52
		store i64 zeroinitializer, i64* %53
	store i64 0, i64* %53
	store i64 zeroinitializer, i64* %54
	store i64 0, i64* %54
	br label %for.interval.loop-69

for.interval.loop-69:
	; SelectorExpr
	%513 = load {i8*, i64, i64}*, {i8*, i64, i64}** %51, align 8
	%514 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %513, i64 0
	%515 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %514, i64 0, i32 1
	%516 = load i64, i64* %515, align 8
	%517 = load i64, i64* %53, align 8
	%518 = icmp slt i64 %517, %516
	br i1 %518, label %for.interval.body-70, label %for.interval.done-73

for.interval.body-70:
	%519 = load i64, i64* %53, align 8
	%520 = load i64, i64* %54, align 8
	%521 = load i64, i64* %53, align 8
	%522 = add i64 %521, 1
	store i64 %522, i64* %53
	%523 = load i64, i64* %54, align 8
	%524 = add i64 %523, 1
	store i64 %524, i64* %54
	store i64 %519, i64* %52
	; IfStmt
	%525 = load i64, i64* %52, align 8
	%526 = icmp sgt i64 %525, 0
	br i1 %526, label %if.then-71, label %if.done-72

if.then-71:
	; SelectorExpr
	%527 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%528 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %527, i64 0
	%529 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %528, i64 0, i32 3
	%530 = load {i8*, i64, i64}*, {i8*, i64, i64}** %529, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %530, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$cf, i64 0, i32 0), i64 2})
	br label %if.done-72

if.done-72:
	; data
	store i8* zeroinitializer, i8** %55
		; SelectorExpr
	%531 = load {i8*, i64, i64}*, {i8*, i64, i64}** %51, align 8
	%532 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %531, i64 0
	%533 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %532, i64 0, i32 0
	%534 = load i8*, i8** %533, align 8
	%535 = load i64, i64* %52, align 8
	; SelectorExpr
	%536 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %50, i64 0, i32 1
	%537 = load i64, i64* %536, align 8
	%538 = mul i64 %535, %537
	%539 = getelementptr inbounds i8, i8* %534, i64 %538
	store i8* %539, i8** %55
	%540 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %56
	store %..any zeroinitializer, %..any* %56
	; SelectorExpr
	%541 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %50, i64 0, i32 0
	%542 = load %Type_Info*, %Type_Info** %541, align 8
	%543 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 0
	store %Type_Info* %542, %Type_Info** %543
	%544 = load i8*, i8** %55, align 8
	; cast - cast
	%545 = bitcast i8* %544 to %..rawptr
	%546 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 1
	store %..rawptr %545, %..rawptr* %546
	%547 = load %..any, %..any* %56, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %540, %..any %547, i32 118)
	br label %for.interval.loop-69

for.interval.done-73:
	; defer
	; SelectorExpr
	%548 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%549 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %548, i64 0
	%550 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %549, i64 0, i32 3
	%551 = load {i8*, i64, i64}*, {i8*, i64, i64}** %550, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %551, i8 93)
	br label %typematch.done-101

typematch.next-74:
	%552 = icmp eq i64 %92, 14
	br i1 %552, label %typematch.body-82, label %typematch.next-81

typematch.body-75:
	%553 = bitcast %..rawptr %93 to %Type_Info.Vector*
	%554 = load %Type_Info.Vector, %Type_Info.Vector* %553, align 8
	store %Type_Info.Vector zeroinitializer, %Type_Info.Vector* %57
	store %Type_Info.Vector %554, %Type_Info.Vector* %57
	; SelectorExpr
	%555 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%556 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %555, i64 0
	%557 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %556, i64 0, i32 3
	%558 = load {i8*, i64, i64}*, {i8*, i64, i64}** %557, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %558, i8 60)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %58
		store i64 zeroinitializer, i64* %59
	store i64 0, i64* %59
	store i64 zeroinitializer, i64* %60
	store i64 0, i64* %60
	br label %for.interval.loop-76

for.interval.loop-76:
	; SelectorExpr
	%559 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %57, i64 0, i32 2
	%560 = load i64, i64* %559, align 8
	%561 = load i64, i64* %59, align 8
	%562 = icmp slt i64 %561, %560
	br i1 %562, label %for.interval.body-77, label %for.interval.done-80

for.interval.body-77:
	%563 = load i64, i64* %59, align 8
	%564 = load i64, i64* %60, align 8
	%565 = load i64, i64* %59, align 8
	%566 = add i64 %565, 1
	store i64 %566, i64* %59
	%567 = load i64, i64* %60, align 8
	%568 = add i64 %567, 1
	store i64 %568, i64* %60
	store i64 %563, i64* %58
	; IfStmt
	%569 = load i64, i64* %58, align 8
	%570 = icmp sgt i64 %569, 0
	br i1 %570, label %if.then-78, label %if.done-79

if.then-78:
	; SelectorExpr
	%571 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%572 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %571, i64 0
	%573 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %572, i64 0, i32 3
	%574 = load {i8*, i64, i64}*, {i8*, i64, i64}** %573, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %574, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$d0, i64 0, i32 0), i64 2})
	br label %if.done-79

if.done-79:
	; data
	store i8* zeroinitializer, i8** %61
		; SelectorExpr
	%575 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%576 = load %..rawptr, %..rawptr* %575, align 8
	; cast - cast
	%577 = bitcast %..rawptr %576 to i8*
	%578 = load i64, i64* %58, align 8
	; SelectorExpr
	%579 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %57, i64 0, i32 1
	%580 = load i64, i64* %579, align 8
	%581 = mul i64 %578, %580
	%582 = getelementptr inbounds i8, i8* %577, i64 %581
	store i8* %582, i8** %61
	%583 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %62
	store %..any zeroinitializer, %..any* %62
	; SelectorExpr
	%584 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %57, i64 0, i32 0
	%585 = load %Type_Info*, %Type_Info** %584, align 8
	%586 = getelementptr inbounds %..any, %..any* %62, i64 0, i32 0
	store %Type_Info* %585, %Type_Info** %586
	%587 = load i8*, i8** %61, align 8
	; cast - cast
	%588 = bitcast i8* %587 to %..rawptr
	%589 = getelementptr inbounds %..any, %..any* %62, i64 0, i32 1
	store %..rawptr %588, %..rawptr* %589
	%590 = load %..any, %..any* %62, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %583, %..any %590, i32 118)
	br label %for.interval.loop-76

for.interval.done-80:
	; defer
	; SelectorExpr
	%591 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%592 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %591, i64 0
	%593 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %592, i64 0, i32 3
	%594 = load {i8*, i64, i64}*, {i8*, i64, i64}** %593, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %594, i8 62)
	br label %typematch.done-101

typematch.next-81:
	%595 = icmp eq i64 %92, 16
	br i1 %595, label %typematch.body-89, label %typematch.next-88

typematch.body-82:
	%596 = bitcast %..rawptr %93 to %Type_Info.Struct*
	%597 = load %Type_Info.Struct, %Type_Info.Struct* %596, align 8
	store %Type_Info.Struct zeroinitializer, %Type_Info.Struct* %63
	store %Type_Info.Struct %597, %Type_Info.Struct* %63
	; SelectorExpr
	%598 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%599 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %598, i64 0
	%600 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %599, i64 0, i32 3
	%601 = load {i8*, i64, i64}*, {i8*, i64, i64}** %600, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %601, i8 123)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %64
		; SelectorExpr
	%602 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %63, i64 0, i32 0
	%603 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %602, i64 0, i32 1
	%604 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %603, align 8
	store i64 zeroinitializer, i64* %65
	%605 = extractvalue {%..string*, i64, i64} %604, 1
	store i64 %605, i64* %65
	store i64 zeroinitializer, i64* %66
	store i64 -1, i64* %66
	br label %for.index.loop-83

for.index.loop-83:
	%606 = load i64, i64* %66, align 8
	%607 = add i64 %606, 1
	store i64 %607, i64* %66
	%608 = load i64, i64* %65, align 8
	%609 = icmp slt i64 %607, %608
	br i1 %609, label %for.index.body-84, label %for.index.done-87

for.index.body-84:
	%610 = load i64, i64* %66, align 8
	store i64 %610, i64* %64
	; IfStmt
	%611 = load i64, i64* %64, align 8
	%612 = icmp sgt i64 %611, 0
	br i1 %612, label %if.then-85, label %if.done-86

if.then-85:
	; SelectorExpr
	%613 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%614 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %613, i64 0
	%615 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %614, i64 0, i32 3
	%616 = load {i8*, i64, i64}*, {i8*, i64, i64}** %615, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %616, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$d1, i64 0, i32 0), i64 2})
	br label %if.done-86

if.done-86:
	; SelectorExpr
	%617 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%618 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %617, i64 0
	%619 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %618, i64 0, i32 3
	%620 = load {i8*, i64, i64}*, {i8*, i64, i64}** %619, align 8
	; IndexExpr
	; SelectorExpr
	%621 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %63, i64 0, i32 0
	%622 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %621, i64 0, i32 1
	%623 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %622, align 8
	%624 = extractvalue {%..string*, i64, i64} %623, 0
	%625 = extractvalue {%..string*, i64, i64} %623, 1
	%626 = load i64, i64* %64, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$d2, i64 0, i32 0), i64 21}, i64 851, i64 36, i64 %626, i64 %625)
	%627 = getelementptr inbounds %..string, %..string* %624, i64 %626
	%628 = load %..string, %..string* %627, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %620, %..string %628)
	; SelectorExpr
	%629 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%630 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %629, i64 0
	%631 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %630, i64 0, i32 3
	%632 = load {i8*, i64, i64}*, {i8*, i64, i64}** %631, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %632, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$d3, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %67
		; SelectorExpr
	%633 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%634 = load %..rawptr, %..rawptr* %633, align 8
	; cast - cast
	%635 = bitcast %..rawptr %634 to i8*
	; IndexExpr
	; SelectorExpr
	%636 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %63, i64 0, i32 0
	%637 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %636, i64 0, i32 2
	%638 = load {i64*, i64, i64}, {i64*, i64, i64}* %637, align 8
	%639 = extractvalue {i64*, i64, i64} %638, 0
	%640 = extractvalue {i64*, i64, i64} %638, 1
	%641 = load i64, i64* %64, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$d4, i64 0, i32 0), i64 21}, i64 853, i64 45, i64 %641, i64 %640)
	%642 = getelementptr inbounds i64, i64* %639, i64 %641
	%643 = load i64, i64* %642, align 8
	%644 = getelementptr inbounds i8, i8* %635, i64 %643
	store i8* %644, i8** %67
	%645 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %68
	store %..any zeroinitializer, %..any* %68
	; IndexExpr
	; SelectorExpr
	%646 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %63, i64 0, i32 0
	%647 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %646, i64 0, i32 0
	%648 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %647, align 8
	%649 = extractvalue {%Type_Info**, i64, i64} %648, 0
	%650 = extractvalue {%Type_Info**, i64, i64} %648, 1
	%651 = load i64, i64* %64, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$d5, i64 0, i32 0), i64 21}, i64 854, i64 33, i64 %651, i64 %650)
	%652 = getelementptr inbounds %Type_Info*, %Type_Info** %649, i64 %651
	%653 = load %Type_Info*, %Type_Info** %652, align 8
	%654 = getelementptr inbounds %..any, %..any* %68, i64 0, i32 0
	store %Type_Info* %653, %Type_Info** %654
	%655 = load i8*, i8** %67, align 8
	; cast - cast
	%656 = bitcast i8* %655 to %..rawptr
	%657 = getelementptr inbounds %..any, %..any* %68, i64 0, i32 1
	store %..rawptr %656, %..rawptr* %657
	%658 = load %..any, %..any* %68, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %645, %..any %658, i32 118)
	br label %for.index.loop-83

for.index.done-87:
	; defer
	; SelectorExpr
	%659 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%660 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %659, i64 0
	%661 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %660, i64 0, i32 3
	%662 = load {i8*, i64, i64}*, {i8*, i64, i64}** %661, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %662, i8 125)
	br label %typematch.done-101

typematch.next-88:
	%663 = icmp eq i64 %92, 15
	br i1 %663, label %typematch.body-96, label %typematch.next-95

typematch.body-89:
	%664 = bitcast %..rawptr %93 to %Type_Info.Union*
	%665 = load %Type_Info.Union, %Type_Info.Union* %664, align 8
	store %Type_Info.Union zeroinitializer, %Type_Info.Union* %69
	store %Type_Info.Union %665, %Type_Info.Union* %69
	; SelectorExpr
	%666 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%667 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %666, i64 0
	%668 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %667, i64 0, i32 3
	%669 = load {i8*, i64, i64}*, {i8*, i64, i64}** %668, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %669, i8 123)
	; DeferStmt
	; cf
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} zeroinitializer, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %70
		; SelectorExpr
	%670 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %69, i64 0, i32 0
	%671 = load {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %670, align 8
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} %671, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %70
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %71
		; SelectorExpr
	%672 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %70, i64 0, i32 1
	%673 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %672, align 8
	store i64 zeroinitializer, i64* %72
	%674 = extractvalue {%..string*, i64, i64} %673, 1
	store i64 %674, i64* %72
	store i64 zeroinitializer, i64* %73
	store i64 -1, i64* %73
	br label %for.index.loop-90

for.index.loop-90:
	%675 = load i64, i64* %73, align 8
	%676 = add i64 %675, 1
	store i64 %676, i64* %73
	%677 = load i64, i64* %72, align 8
	%678 = icmp slt i64 %676, %677
	br i1 %678, label %for.index.body-91, label %for.index.done-94

for.index.body-91:
	%679 = load i64, i64* %73, align 8
	store i64 %679, i64* %71
	; IfStmt
	%680 = load i64, i64* %71, align 8
	%681 = icmp sgt i64 %680, 0
	br i1 %681, label %if.then-92, label %if.done-93

if.then-92:
	; SelectorExpr
	%682 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%683 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %682, i64 0
	%684 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %683, i64 0, i32 3
	%685 = load {i8*, i64, i64}*, {i8*, i64, i64}** %684, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %685, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$d6, i64 0, i32 0), i64 2})
	br label %if.done-93

if.done-93:
	; SelectorExpr
	%686 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%687 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %686, i64 0
	%688 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %687, i64 0, i32 3
	%689 = load {i8*, i64, i64}*, {i8*, i64, i64}** %688, align 8
	; IndexExpr
	; SelectorExpr
	%690 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %70, i64 0, i32 1
	%691 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %690, align 8
	%692 = extractvalue {%..string*, i64, i64} %691, 0
	%693 = extractvalue {%..string*, i64, i64} %691, 1
	%694 = load i64, i64* %71, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$d7, i64 0, i32 0), i64 21}, i64 867, i64 34, i64 %694, i64 %693)
	%695 = getelementptr inbounds %..string, %..string* %692, i64 %694
	%696 = load %..string, %..string* %695, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %689, %..string %696)
	; SelectorExpr
	%697 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%698 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %697, i64 0
	%699 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %698, i64 0, i32 3
	%700 = load {i8*, i64, i64}*, {i8*, i64, i64}** %699, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %700, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$d8, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %74
		; SelectorExpr
	%701 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%702 = load %..rawptr, %..rawptr* %701, align 8
	; cast - cast
	%703 = bitcast %..rawptr %702 to i8*
	; IndexExpr
	; SelectorExpr
	%704 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %70, i64 0, i32 2
	%705 = load {i64*, i64, i64}, {i64*, i64, i64}* %704, align 8
	%706 = extractvalue {i64*, i64, i64} %705, 0
	%707 = extractvalue {i64*, i64, i64} %705, 1
	%708 = load i64, i64* %71, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$d9, i64 0, i32 0), i64 21}, i64 869, i64 43, i64 %708, i64 %707)
	%709 = getelementptr inbounds i64, i64* %706, i64 %708
	%710 = load i64, i64* %709, align 8
	%711 = getelementptr inbounds i8, i8* %703, i64 %710
	store i8* %711, i8** %74
	%712 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %75
	store %..any zeroinitializer, %..any* %75
	; IndexExpr
	; SelectorExpr
	%713 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %70, i64 0, i32 0
	%714 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %713, align 8
	%715 = extractvalue {%Type_Info**, i64, i64} %714, 0
	%716 = extractvalue {%Type_Info**, i64, i64} %714, 1
	%717 = load i64, i64* %71, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$da, i64 0, i32 0), i64 21}, i64 870, i64 31, i64 %717, i64 %716)
	%718 = getelementptr inbounds %Type_Info*, %Type_Info** %715, i64 %717
	%719 = load %Type_Info*, %Type_Info** %718, align 8
	%720 = getelementptr inbounds %..any, %..any* %75, i64 0, i32 0
	store %Type_Info* %719, %Type_Info** %720
	%721 = load i8*, i8** %74, align 8
	; cast - cast
	%722 = bitcast i8* %721 to %..rawptr
	%723 = getelementptr inbounds %..any, %..any* %75, i64 0, i32 1
	store %..rawptr %722, %..rawptr* %723
	%724 = load %..any, %..any* %75, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %712, %..any %724, i32 118)
	br label %for.index.loop-90

for.index.done-94:
	; defer
	; SelectorExpr
	%725 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%726 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %725, i64 0
	%727 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %726, i64 0, i32 3
	%728 = load {i8*, i64, i64}*, {i8*, i64, i64}** %727, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %728, i8 125)
	br label %typematch.done-101

typematch.next-95:
	%729 = icmp eq i64 %92, 17
	br i1 %729, label %typematch.body-98, label %typematch.next-97

typematch.body-96:
	%730 = bitcast %..rawptr %93 to %Type_Info.Raw_Union*
	%731 = load %Type_Info.Raw_Union, %Type_Info.Raw_Union* %730, align 8
	store %Type_Info.Raw_Union zeroinitializer, %Type_Info.Raw_Union* %76
	store %Type_Info.Raw_Union %731, %Type_Info.Raw_Union* %76
	; SelectorExpr
	%732 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%733 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %732, i64 0
	%734 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %733, i64 0, i32 3
	%735 = load {i8*, i64, i64}*, {i8*, i64, i64}** %734, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %735, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$db, i64 0, i32 0), i64 11})
	br label %typematch.done-101

typematch.next-97:
	%736 = icmp eq i64 %92, 8
	br i1 %736, label %typematch.body-100, label %typematch.next-99

typematch.body-98:
	%737 = bitcast %..rawptr %93 to %Type_Info.Enum*
	%738 = load %Type_Info.Enum, %Type_Info.Enum* %737, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %77
	store %Type_Info.Enum %738, %Type_Info.Enum* %77
	%739 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%740 = load %..any, %..any* %1, align 8
	%741 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_enum(%fmt-4.Fmt_Info* %739, %..any %740, i32 %741)
	br label %typematch.done-101

typematch.next-99:
	br label %typematch.done-101

typematch.body-100:
	%742 = bitcast %..rawptr %93 to %Type_Info.Procedure*
	%743 = load %Type_Info.Procedure, %Type_Info.Procedure* %742, align 8
	store %Type_Info.Procedure zeroinitializer, %Type_Info.Procedure* %78
	store %Type_Info.Procedure %743, %Type_Info.Procedure* %78
	; SelectorExpr
	%744 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%745 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %744, i64 0
	%746 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %745, i64 0, i32 3
	%747 = load {i8*, i64, i64}*, {i8*, i64, i64}** %746, align 8
	; SelectorExpr
	%748 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%749 = load %Type_Info*, %Type_Info** %748, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %747, %Type_Info* %749)
	; SelectorExpr
	%750 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%751 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %750, i64 0
	%752 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %751, i64 0, i32 3
	%753 = load {i8*, i64, i64}*, {i8*, i64, i64}** %752, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %753, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$dc, i64 0, i32 0), i64 3})
	%754 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%755 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%756 = load %..rawptr, %..rawptr* %755, align 8
	; cast - cast
	%757 = bitcast %..rawptr %756 to %..rawptr*
	%758 = getelementptr inbounds %..rawptr, %..rawptr* %757, i64 0
	%759 = load %..rawptr, %..rawptr* %758, align 8
	call void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %754, %..rawptr %759, i32 112)
	br label %typematch.done-101

typematch.done-101:
	ret void
}

define void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %fi, %..any %arg, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info*, align 8
	%4 = alloca %Type_Info*, align 8
	%5 = alloca %..any, align 8
	%6 = alloca i1, align 1
	%7 = alloca float, align 4
	%8 = alloca double, align 8
	%9 = alloca i64, align 8
	%10 = alloca i8, align 1
	%11 = alloca i16, align 2
	%12 = alloca i32, align 4
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i16, align 2
	%17 = alloca i32, align 4
	%18 = alloca i64, align 8
	%19 = alloca %..string, align 8
	%20 = alloca %..any, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %arg, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%21 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%22 = load %..rawptr, %..rawptr* %21, align 8
	%23 = icmp eq %..rawptr %22, zeroinitializer
	br i1 %23, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%24 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%25 = load %Type_Info*, %Type_Info** %24, align 8
	%26 = icmp eq %Type_Info* %25, zeroinitializer
	br i1 %26, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 3
	%30 = load {i8*, i64, i64}*, {i8*, i64, i64}** %29, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %30, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$dd, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; AssignStmt
	; SelectorExpr
	%31 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%32 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %31, i64 0
	%33 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %32, i64 0, i32 0
	%34 = load %..any, %..any* %1, align 8
	store %..any %34, %..any* %33
	; IfStmt
	%35 = load i32, i32* %2, align 4
	%36 = icmp eq i32 %35, 84
	br i1 %36, label %if.then-4, label %if.done-8

if.then-4:
	; ti
	store %Type_Info* zeroinitializer, %Type_Info** %3
		; SelectorExpr
	%37 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%38 = load %Type_Info*, %Type_Info** %37, align 8
	store %Type_Info* %38, %Type_Info** %3
	; TypeMatchStmt
	%39 = load %..any, %..any* %1, align 8
	%40 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%41 = load %Type_Info*, %Type_Info** %40, align 8
	%42 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%43 = icmp eq %Type_Info* %41, %42
	br i1 %43, label %typematch.body-6, label %typematch.next-5

typematch.next-5:
	br label %typematch.done-7

typematch.body-6:
	%44 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%45 = load %..rawptr, %..rawptr* %44, align 8
	%46 = bitcast %..rawptr %45 to %Type_Info**
	%47 = load %Type_Info*, %Type_Info** %46, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %4
	store %Type_Info* %47, %Type_Info** %4
	; AssignStmt
	%48 = load %Type_Info*, %Type_Info** %4, align 8
	store %Type_Info* %48, %Type_Info** %3
	br label %typematch.done-7

typematch.done-7:
	; SelectorExpr
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %49, i64 0
	%51 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %50, i64 0, i32 3
	%52 = load {i8*, i64, i64}*, {i8*, i64, i64}** %51, align 8
	%53 = load %Type_Info*, %Type_Info** %3, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %52, %Type_Info* %53)
	; ReturnStmt
	ret void

if.done-8:
	; base_arg
	store %..any zeroinitializer, %..any* %5
		%54 = load %..any, %..any* %1, align 8
	store %..any %54, %..any* %5
	; AssignStmt
	; SelectorExpr
	%55 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	; SelectorExpr
	%56 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%57 = load %Type_Info*, %Type_Info** %56, align 8
	%58 = call %Type_Info* @.type_info_base(%Type_Info* %57)
	store %Type_Info* %58, %Type_Info** %55
	; TypeMatchStmt
	%59 = load %..any, %..any* %5, align 8
	%60 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%61 = load %Type_Info*, %Type_Info** %60, align 8
	%62 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%63 = icmp eq %Type_Info* %61, %62
	br i1 %63, label %typematch.body-10, label %typematch.next-9

typematch.next-9:
	%64 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%65 = load %Type_Info*, %Type_Info** %64, align 8
	%66 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%67 = icmp eq %Type_Info* %65, %66
	br i1 %67, label %typematch.body-12, label %typematch.next-11

typematch.body-10:
	%68 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%69 = load %..rawptr, %..rawptr* %68, align 8
	%70 = bitcast %..rawptr %69 to i1*
	%71 = load i1, i1* %70, align 1
	store i1 zeroinitializer, i1* %6
	store i1 %71, i1* %6
	%72 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%73 = load i1, i1* %6, align 1
	%74 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bool(%fmt-4.Fmt_Info* %72, i1 %73, i32 %74)
	br label %typematch.done-37

typematch.next-11:
	%75 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%76 = load %Type_Info*, %Type_Info** %75, align 8
	%77 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	%78 = icmp eq %Type_Info* %76, %77
	br i1 %78, label %typematch.body-14, label %typematch.next-13

typematch.body-12:
	%79 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%80 = load %..rawptr, %..rawptr* %79, align 8
	%81 = bitcast %..rawptr %80 to float*
	%82 = load float, float* %81, align 4
	store float zeroinitializer, float* %7
	store float %82, float* %7
	%83 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%84 = load float, float* %7, align 4
	; cast - cast
	%85 = fpext float %84 to double
	%86 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %83, double %85, i64 32, i32 %86)
	br label %typematch.done-37

typematch.next-13:
	%87 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%88 = load %Type_Info*, %Type_Info** %87, align 8
	%89 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%90 = icmp eq %Type_Info* %88, %89
	br i1 %90, label %typematch.body-16, label %typematch.next-15

typematch.body-14:
	%91 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%92 = load %..rawptr, %..rawptr* %91, align 8
	%93 = bitcast %..rawptr %92 to double*
	%94 = load double, double* %93, align 8
	store double zeroinitializer, double* %8
	store double %94, double* %8
	%95 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%96 = load double, double* %8, align 8
	%97 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %95, double %96, i64 64, i32 %97)
	br label %typematch.done-37

typematch.next-15:
	%98 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%99 = load %Type_Info*, %Type_Info** %98, align 8
	%100 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	%101 = icmp eq %Type_Info* %99, %100
	br i1 %101, label %typematch.body-18, label %typematch.next-17

typematch.body-16:
	%102 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%103 = load %..rawptr, %..rawptr* %102, align 8
	%104 = bitcast %..rawptr %103 to i64*
	%105 = load i64, i64* %104, align 8
	store i64 zeroinitializer, i64* %9
	store i64 %105, i64* %9
	%106 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%107 = load i64, i64* %9, align 8
	; cast - cast
	%108 = bitcast i64 %107 to i64
	%109 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %106, i64 %108, i1 true, i64 64, i32 %109)
	br label %typematch.done-37

typematch.next-17:
	%110 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%111 = load %Type_Info*, %Type_Info** %110, align 8
	%112 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	%113 = icmp eq %Type_Info* %111, %112
	br i1 %113, label %typematch.body-20, label %typematch.next-19

typematch.body-18:
	%114 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%115 = load %..rawptr, %..rawptr* %114, align 8
	%116 = bitcast %..rawptr %115 to i8*
	%117 = load i8, i8* %116, align 1
	store i8 zeroinitializer, i8* %10
	store i8 %117, i8* %10
	%118 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%119 = load i8, i8* %10, align 1
	; cast - cast
	%120 = sext i8 %119 to i64
	%121 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %118, i64 %120, i1 true, i64 8, i32 %121)
	br label %typematch.done-37

typematch.next-19:
	%122 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%123 = load %Type_Info*, %Type_Info** %122, align 8
	%124 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%125 = icmp eq %Type_Info* %123, %124
	br i1 %125, label %typematch.body-22, label %typematch.next-21

typematch.body-20:
	%126 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%127 = load %..rawptr, %..rawptr* %126, align 8
	%128 = bitcast %..rawptr %127 to i16*
	%129 = load i16, i16* %128, align 2
	store i16 zeroinitializer, i16* %11
	store i16 %129, i16* %11
	%130 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%131 = load i16, i16* %11, align 2
	; cast - cast
	%132 = sext i16 %131 to i64
	%133 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %130, i64 %132, i1 true, i64 16, i32 %133)
	br label %typematch.done-37

typematch.next-21:
	%134 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%135 = load %Type_Info*, %Type_Info** %134, align 8
	%136 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%137 = icmp eq %Type_Info* %135, %136
	br i1 %137, label %typematch.body-24, label %typematch.next-23

typematch.body-22:
	%138 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%139 = load %..rawptr, %..rawptr* %138, align 8
	%140 = bitcast %..rawptr %139 to i32*
	%141 = load i32, i32* %140, align 4
	store i32 zeroinitializer, i32* %12
	store i32 %141, i32* %12
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = load i32, i32* %12, align 4
	; cast - cast
	%144 = sext i32 %143 to i64
	%145 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %142, i64 %144, i1 true, i64 32, i32 %145)
	br label %typematch.done-37

typematch.next-23:
	%146 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%147 = load %Type_Info*, %Type_Info** %146, align 8
	%148 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	%149 = icmp eq %Type_Info* %147, %148
	br i1 %149, label %typematch.body-26, label %typematch.next-25

typematch.body-24:
	%150 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%151 = load %..rawptr, %..rawptr* %150, align 8
	%152 = bitcast %..rawptr %151 to i64*
	%153 = load i64, i64* %152, align 8
	store i64 zeroinitializer, i64* %13
	store i64 %153, i64* %13
	%154 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%155 = load i64, i64* %13, align 8
	; cast - cast
	%156 = bitcast i64 %155 to i64
	%157 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %154, i64 %156, i1 true, i64 64, i32 %157)
	br label %typematch.done-37

typematch.next-25:
	%158 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%159 = load %Type_Info*, %Type_Info** %158, align 8
	%160 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%161 = icmp eq %Type_Info* %159, %160
	br i1 %161, label %typematch.body-28, label %typematch.next-27

typematch.body-26:
	%162 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%163 = load %..rawptr, %..rawptr* %162, align 8
	%164 = bitcast %..rawptr %163 to i64*
	%165 = load i64, i64* %164, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %165, i64* %14
	%166 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%167 = load i64, i64* %14, align 8
	; cast - cast
	%168 = bitcast i64 %167 to i64
	%169 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %166, i64 %168, i1 false, i64 64, i32 %169)
	br label %typematch.done-37

typematch.next-27:
	%170 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%171 = load %Type_Info*, %Type_Info** %170, align 8
	%172 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%173 = icmp eq %Type_Info* %171, %172
	br i1 %173, label %typematch.body-30, label %typematch.next-29

typematch.body-28:
	%174 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%175 = load %..rawptr, %..rawptr* %174, align 8
	%176 = bitcast %..rawptr %175 to i8*
	%177 = load i8, i8* %176, align 1
	store i8 zeroinitializer, i8* %15
	store i8 %177, i8* %15
	%178 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%179 = load i8, i8* %15, align 1
	; cast - cast
	%180 = zext i8 %179 to i64
	%181 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %178, i64 %180, i1 false, i64 8, i32 %181)
	br label %typematch.done-37

typematch.next-29:
	%182 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%183 = load %Type_Info*, %Type_Info** %182, align 8
	%184 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%185 = icmp eq %Type_Info* %183, %184
	br i1 %185, label %typematch.body-32, label %typematch.next-31

typematch.body-30:
	%186 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%187 = load %..rawptr, %..rawptr* %186, align 8
	%188 = bitcast %..rawptr %187 to i16*
	%189 = load i16, i16* %188, align 2
	store i16 zeroinitializer, i16* %16
	store i16 %189, i16* %16
	%190 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%191 = load i16, i16* %16, align 2
	; cast - cast
	%192 = zext i16 %191 to i64
	%193 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %190, i64 %192, i1 false, i64 16, i32 %193)
	br label %typematch.done-37

typematch.next-31:
	%194 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%195 = load %Type_Info*, %Type_Info** %194, align 8
	%196 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%197 = icmp eq %Type_Info* %195, %196
	br i1 %197, label %typematch.body-34, label %typematch.next-33

typematch.body-32:
	%198 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%199 = load %..rawptr, %..rawptr* %198, align 8
	%200 = bitcast %..rawptr %199 to i32*
	%201 = load i32, i32* %200, align 4
	store i32 zeroinitializer, i32* %17
	store i32 %201, i32* %17
	%202 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%203 = load i32, i32* %17, align 4
	; cast - cast
	%204 = zext i32 %203 to i64
	%205 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %202, i64 %204, i1 false, i64 32, i32 %205)
	br label %typematch.done-37

typematch.next-33:
	%206 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%207 = load %Type_Info*, %Type_Info** %206, align 8
	%208 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%209 = icmp eq %Type_Info* %207, %208
	br i1 %209, label %typematch.body-36, label %typematch.next-35

typematch.body-34:
	%210 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%211 = load %..rawptr, %..rawptr* %210, align 8
	%212 = bitcast %..rawptr %211 to i64*
	%213 = load i64, i64* %212, align 8
	store i64 zeroinitializer, i64* %18
	store i64 %213, i64* %18
	%214 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%215 = load i64, i64* %18, align 8
	; cast - cast
	%216 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %214, i64 %215, i1 false, i64 64, i32 %216)
	br label %typematch.done-37

typematch.next-35:
	store %..any zeroinitializer, %..any* %20
	store %..any %59, %..any* %20
	%217 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%218 = load %..any, %..any* %1, align 8
	%219 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %217, %..any %218, i32 %219)
	br label %typematch.done-37

typematch.body-36:
	%220 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%221 = load %..rawptr, %..rawptr* %220, align 8
	%222 = bitcast %..rawptr %221 to %..string*
	%223 = load %..string, %..string* %222, align 8
	store %..string zeroinitializer, %..string* %19
	store %..string %223, %..string* %19
	%224 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%225 = load %..string, %..string* %19, align 8
	%226 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_string(%fmt-4.Fmt_Info* %224, %..string %225, i32 %226)
	br label %typematch.done-37

typematch.done-37:
	ret void
}

define i64 @.fmt-4.bprintf({i8*, i64, i64}* %b, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca %fmt-4.Fmt_Info, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca %fmt-4.Fmt_Info, align 8
	%9 = alloca i64, align 8
	%10 = alloca %..string, align 8
	%11 = alloca i32, align 4
	%12 = alloca i64, align 8
	%13 = alloca %..string, align 8
	%14 = alloca %..any, align 8
	%15 = alloca i64, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %b, {i8*, i64, i64}** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %3
		store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %3
	; end
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%19 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	store i64 %20, i64* %4
	; arg_index
	store i64 zeroinitializer, i64* %5
		store i64 0, i64* %5
	; was_prev_index
	store i1 zeroinitializer, i1* %6
		store i1 false, i1* %6
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %7
		store i64 0, i64* %7
	br label %for.loop-1

for.loop-1:
	%21 = load i64, i64* %7, align 8
	%22 = load i64, i64* %4, align 8
	%23 = icmp slt i64 %21, %22
	br i1 %23, label %for.body-2, label %for.done-64

for.body-2:
	; AssignStmt
	; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %8
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 true}, %fmt-4.Fmt_Info* %8
	%24 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0, i32 3
	store {i8*, i64, i64}* %24, {i8*, i64, i64}** %25
	%26 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, align 8
	store %fmt-4.Fmt_Info %26, %fmt-4.Fmt_Info* %3
	; prev_i
	store i64 zeroinitializer, i64* %9
		%27 = load i64, i64* %7, align 8
	store i64 %27, i64* %9
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%28 = load i64, i64* %7, align 8
	%29 = load i64, i64* %4, align 8
	%30 = icmp slt i64 %28, %29
	br i1 %30, label %cmp.and-4, label %for.done-6

cmp.and-4:
	; IndexExpr
	%31 = load %..string, %..string* %1, align 8
	%32 = extractvalue %..string %31, 0
	%33 = extractvalue %..string %31, 1
	%34 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$de, i64 0, i32 0), i64 21}, i64 936, i64 22, i64 %34, i64 %33)
	%35 = getelementptr inbounds i8, i8* %32, i64 %34
	%36 = load i8, i8* %35, align 1
	%37 = icmp ne i8 %36, 37
	br i1 %37, label %for.body-5, label %for.done-6

for.body-5:
	%38 = load i64, i64* %7, align 8
	%39 = add i64 %38, 1
	store i64 %39, i64* %7
	br label %for.loop-3

for.done-6:
	; IfStmt
	%40 = load i64, i64* %7, align 8
	%41 = load i64, i64* %9, align 8
	%42 = icmp sgt i64 %40, %41
	br i1 %42, label %if.then-7, label %if.done-8

if.then-7:
	%43 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SliceExpr
	%44 = load i64, i64* %9, align 8
	%45 = load i64, i64* %7, align 8
	%46 = load %..string, %..string* %1, align 8
	%47 = extractvalue %..string %46, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$df, i64 0, i32 0), i64 21}, i64 940, i64 23, i64 %44, i64 %45)
	%48 = extractvalue %..string %46, 0
	%49 = getelementptr inbounds i8, i8* %48, i64 %44
	%50 = sub i64 %45, %44
	store %..string zeroinitializer, %..string* %10
	%51 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %49, i8** %51
	%52 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %50, i64* %52
	%53 = load %..string, %..string* %10, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %43, %..string %53)
	br label %if.done-8

if.done-8:
	; IfStmt
	%54 = load i64, i64* %7, align 8
	%55 = load i64, i64* %4, align 8
	%56 = icmp sge i64 %54, %55
	br i1 %56, label %if.then-9, label %if.done-10

if.then-9:
	; break
	br label %for.done-64

if.done-10:
	%57 = load i64, i64* %7, align 8
	%58 = add i64 %57, 1
	store i64 %58, i64* %7
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%59 = load i64, i64* %7, align 8
	%60 = load i64, i64* %4, align 8
	%61 = icmp slt i64 %59, %60
	br i1 %61, label %for.body-12, label %for.done-24

for.body-12:
	; MatchStmt
	; IndexExpr
	%62 = load %..string, %..string* %1, align 8
	%63 = extractvalue %..string %62, 0
	%64 = extractvalue %..string %62, 1
	%65 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$e0, i64 0, i32 0), i64 21}, i64 951, i64 14, i64 %65, i64 %64)
	%66 = getelementptr inbounds i8, i8* %63, i64 %65
	%67 = load i8, i8* %66, align 1
	%68 = icmp eq i8 %67, 43
	br i1 %68, label %match.case.body-14, label %match.case.next-13

match.case.next-13:
	%69 = icmp eq i8 %67, 45
	br i1 %69, label %match.fall.body-16, label %match.case.next-15

match.case.body-14:
	; AssignStmt
	; SelectorExpr
	%70 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 5
	store i1 true, i1* %70
	br label %match.done-23

match.case.next-15:
	%71 = icmp eq i8 %67, 32
	br i1 %71, label %match.fall.body-18, label %match.case.next-17

match.fall.body-16:
	; AssignStmt
	; SelectorExpr
	%72 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	store i1 true, i1* %72
	; AssignStmt
	; SelectorExpr
	%73 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	store i1 false, i1* %73
	br label %match.done-23

match.case.next-17:
	%74 = icmp eq i8 %67, 35
	br i1 %74, label %match.fall.body-20, label %match.case.next-19

match.fall.body-18:
	; AssignStmt
	; SelectorExpr
	%75 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 6
	store i1 true, i1* %75
	br label %match.done-23

match.case.next-19:
	%76 = icmp eq i8 %67, 48
	br i1 %76, label %match.fall.body-22, label %match.case.next-21

match.fall.body-20:
	; AssignStmt
	; SelectorExpr
	%77 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 8
	store i1 true, i1* %77
	br label %match.done-23

match.case.next-21:
	; break
	br label %for.done-24

match.fall.body-22:
	; AssignStmt
	; SelectorExpr
	%78 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	; SelectorExpr
	%79 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	%80 = load i1, i1* %79, align 1
	%81 = xor i1 -1, %80
	store i1 %81, i1* %78
	br label %match.done-23

match.done-23:
	%82 = load i64, i64* %7, align 8
	%83 = add i64 %82, 1
	store i64 %83, i64* %7
	br label %for.loop-11

for.done-24:
	; AssignStmt
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%85 = load i64, i64* %5, align 8
	%86 = load %..string, %..string* %1, align 8
	%87 = load i64, i64* %7, align 8
	; SelectorExpr
	%88 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	%89 = load i64, i64* %88, align 8
	%90 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %84, i64 %85, %..string %86, i64 %87, i64 %89)
	%91 = extractvalue {i64, i64, i1} %90, 0
	%92 = extractvalue {i64, i64, i1} %90, 1
	%93 = extractvalue {i64, i64, i1} %90, 2
	store i64 %91, i64* %5
	store i64 %92, i64* %7
	store i1 %93, i1* %6
	; IfStmt
	%94 = load i64, i64* %7, align 8
	%95 = load i64, i64* %4, align 8
	%96 = icmp slt i64 %94, %95
	br i1 %96, label %cmp.and-25, label %if.else-31

cmp.and-25:
	; IndexExpr
	%97 = load %..string, %..string* %1, align 8
	%98 = extractvalue %..string %97, 0
	%99 = extractvalue %..string %97, 1
	%100 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$e1, i64 0, i32 0), i64 21}, i64 971, i64 21, i64 %100, i64 %99)
	%101 = getelementptr inbounds i8, i8* %98, i64 %100
	%102 = load i8, i8* %101, align 1
	%103 = icmp eq i8 %102, 42
	br i1 %103, label %if.then-26, label %if.else-31

if.then-26:
	%104 = load i64, i64* %7, align 8
	%105 = add i64 %104, 1
	store i64 %105, i64* %7
	; AssignStmt
	; SelectorExpr
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%107 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%108 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%109 = load i64, i64* %5, align 8
	%110 = call {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %108, i64 %109)
	%111 = extractvalue {i64, i64, i1} %110, 0
	%112 = extractvalue {i64, i64, i1} %110, 1
	%113 = extractvalue {i64, i64, i1} %110, 2
	store i64 %111, i64* %106
	store i64 %112, i64* %5
	store i1 %113, i1* %107
	; IfStmt
	; SelectorExpr
	%114 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%115 = load i1, i1* %114, align 1
	br i1 %115, label %if.done-28, label %if.then-27

if.then-27:
	%116 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %116, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$e2, i64 0, i32 0), i64 13})
	br label %if.done-28

if.done-28:
	; IfStmt
	; SelectorExpr
	%117 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	%118 = load i64, i64* %117, align 8
	%119 = icmp slt i64 %118, 0
	br i1 %119, label %if.then-29, label %if.done-30

if.then-29:
	; AssignStmt
	; SelectorExpr
	%120 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%121 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	%122 = load i64, i64* %121, align 8
	%123 = sub i64 0, %122
	store i64 %123, i64* %120
	; AssignStmt
	; SelectorExpr
	%124 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	store i1 true, i1* %124
	; AssignStmt
	; SelectorExpr
	%125 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	store i1 false, i1* %125
	br label %if.done-30

if.done-30:
	; AssignStmt
	store i1 false, i1* %6
	br label %if.done-35

if.else-31:
	; AssignStmt
	; SelectorExpr
	%126 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%127 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%128 = load %..string, %..string* %1, align 8
	%129 = load i64, i64* %7, align 8
	%130 = call {i64, i64, i1} @.fmt-4.parse_int(%..string %128, i64 %129)
	%131 = extractvalue {i64, i64, i1} %130, 0
	%132 = extractvalue {i64, i64, i1} %130, 1
	%133 = extractvalue {i64, i64, i1} %130, 2
	store i64 %131, i64* %126
	store i64 %132, i64* %7
	store i1 %133, i1* %127
	; IfStmt
	%134 = load i1, i1* %6, align 1
	br i1 %134, label %cmp.and-32, label %if.done-34

cmp.and-32:
	; SelectorExpr
	%135 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%136 = load i1, i1* %135, align 1
	br i1 %136, label %if.then-33, label %if.done-34

if.then-33:
	; AssignStmt
	; SelectorExpr
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	store i1 false, i1* %137
	br label %if.done-34

if.done-34:
	br label %if.done-35

if.done-35:
	; IfStmt
	%138 = load i64, i64* %7, align 8
	%139 = load i64, i64* %4, align 8
	%140 = icmp slt i64 %138, %139
	br i1 %140, label %cmp.and-36, label %if.done-50

cmp.and-36:
	; IndexExpr
	%141 = load %..string, %..string* %1, align 8
	%142 = extractvalue %..string %141, 0
	%143 = extractvalue %..string %141, 1
	%144 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$e3, i64 0, i32 0), i64 21}, i64 992, i64 21, i64 %144, i64 %143)
	%145 = getelementptr inbounds i8, i8* %142, i64 %144
	%146 = load i8, i8* %145, align 1
	%147 = icmp eq i8 %146, 46
	br i1 %147, label %if.then-37, label %if.done-50

if.then-37:
	%148 = load i64, i64* %7, align 8
	%149 = add i64 %148, 1
	store i64 %149, i64* %7
	; IfStmt
	%150 = load i1, i1* %6, align 1
	br i1 %150, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	; SelectorExpr
	%151 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	store i1 false, i1* %151
	br label %if.done-39

if.done-39:
	; IfStmt
	%152 = load i64, i64* %7, align 8
	%153 = load i64, i64* %4, align 8
	%154 = icmp slt i64 %152, %153
	br i1 %154, label %cmp.and-40, label %if.else-46

cmp.and-40:
	; IndexExpr
	%155 = load %..string, %..string* %1, align 8
	%156 = extractvalue %..string %155, 0
	%157 = extractvalue %..string %155, 1
	%158 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$e4, i64 0, i32 0), i64 21}, i64 997, i64 22, i64 %158, i64 %157)
	%159 = getelementptr inbounds i8, i8* %156, i64 %158
	%160 = load i8, i8* %159, align 1
	%161 = icmp eq i8 %160, 42
	br i1 %161, label %if.then-41, label %if.else-46

if.then-41:
	; AssignStmt
	%162 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%163 = load i64, i64* %5, align 8
	%164 = load %..string, %..string* %1, align 8
	%165 = load i64, i64* %7, align 8
	; SelectorExpr
	%166 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	%167 = load i64, i64* %166, align 8
	%168 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %162, i64 %163, %..string %164, i64 %165, i64 %167)
	%169 = extractvalue {i64, i64, i1} %168, 0
	%170 = extractvalue {i64, i64, i1} %168, 1
	%171 = extractvalue {i64, i64, i1} %168, 2
	store i64 %169, i64* %5
	store i64 %170, i64* %7
	store i1 %171, i1* %6
	%172 = load i64, i64* %7, align 8
	%173 = add i64 %172, 1
	store i64 %173, i64* %7
	; AssignStmt
	; SelectorExpr
	%174 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	; SelectorExpr
	%175 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%176 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%177 = load i64, i64* %5, align 8
	%178 = call {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %176, i64 %177)
	%179 = extractvalue {i64, i64, i1} %178, 0
	%180 = extractvalue {i64, i64, i1} %178, 1
	%181 = extractvalue {i64, i64, i1} %178, 2
	store i64 %179, i64* %174
	store i64 %180, i64* %5
	store i1 %181, i1* %175
	; IfStmt
	; SelectorExpr
	%182 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	%183 = load i64, i64* %182, align 8
	%184 = icmp slt i64 %183, 0
	br i1 %184, label %if.then-42, label %if.done-43

if.then-42:
	; AssignStmt
	; SelectorExpr
	%185 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	store i64 0, i64* %185
	; AssignStmt
	; SelectorExpr
	%186 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	store i1 false, i1* %186
	br label %if.done-43

if.done-43:
	; IfStmt
	; SelectorExpr
	%187 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%188 = load i1, i1* %187, align 1
	br i1 %188, label %if.done-45, label %if.then-44

if.then-44:
	; SelectorExpr
	%189 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 3
	%190 = load {i8*, i64, i64}*, {i8*, i64, i64}** %189, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %190, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$e5, i64 0, i32 0), i64 17})
	br label %if.done-45

if.done-45:
	; AssignStmt
	store i1 false, i1* %6
	br label %if.done-49

if.else-46:
	; AssignStmt
	; SelectorExpr
	%191 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	; SelectorExpr
	%192 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%193 = load %..string, %..string* %1, align 8
	%194 = load i64, i64* %7, align 8
	%195 = call {i64, i64, i1} @.fmt-4.parse_int(%..string %193, i64 %194)
	%196 = extractvalue {i64, i64, i1} %195, 0
	%197 = extractvalue {i64, i64, i1} %195, 1
	%198 = extractvalue {i64, i64, i1} %195, 2
	store i64 %196, i64* %191
	store i64 %197, i64* %7
	store i1 %198, i1* %192
	; IfStmt
	; SelectorExpr
	%199 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%200 = load i1, i1* %199, align 1
	br i1 %200, label %if.done-48, label %if.then-47

if.then-47:
	; AssignStmt
	; SelectorExpr
	%201 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	store i1 true, i1* %201
	; AssignStmt
	; SelectorExpr
	%202 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	store i64 0, i64* %202
	br label %if.done-48

if.done-48:
	br label %if.done-49

if.done-49:
	br label %if.done-50

if.done-50:
	; IfStmt
	%203 = load i1, i1* %6, align 1
	br i1 %203, label %if.done-52, label %if.then-51

if.then-51:
	; AssignStmt
	%204 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%205 = load i64, i64* %5, align 8
	%206 = load %..string, %..string* %1, align 8
	%207 = load i64, i64* %7, align 8
	; SelectorExpr
	%208 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	%209 = load i64, i64* %208, align 8
	%210 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %204, i64 %205, %..string %206, i64 %207, i64 %209)
	%211 = extractvalue {i64, i64, i1} %210, 0
	%212 = extractvalue {i64, i64, i1} %210, 1
	%213 = extractvalue {i64, i64, i1} %210, 2
	store i64 %211, i64* %5
	store i64 %212, i64* %7
	store i1 %213, i1* %6
	br label %if.done-52

if.done-52:
	; IfStmt
	%214 = load i64, i64* %7, align 8
	%215 = load i64, i64* %4, align 8
	%216 = icmp sge i64 %214, %215
	br i1 %216, label %if.then-53, label %if.done-54

if.then-53:
	%217 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %217, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$e6, i64 0, i32 0), i64 11})
	; break
	br label %for.done-64

if.done-54:
	; verb
	store i32 zeroinitializer, i32* %11
		; w
	store i64 zeroinitializer, i64* %12
		; SelectorExpr
	; SliceExpr
	%218 = load i64, i64* %7, align 8
	%219 = load %..string, %..string* %1, align 8
	%220 = extractvalue %..string %219, 1
	%221 = extractvalue %..string %219, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$e7, i64 0, i32 0), i64 21}, i64 1027, i64 34, i64 %218, i64 %220)
	%222 = extractvalue %..string %219, 0
	%223 = getelementptr inbounds i8, i8* %222, i64 %218
	%224 = sub i64 %220, %218
	store %..string zeroinitializer, %..string* %13
	%225 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 0
	store i8* %223, i8** %225
	%226 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 1
	store i64 %224, i64* %226
	%227 = load %..string, %..string* %13, align 8
	%228 = call {i32, i64} @.utf8-6.decode_rune-1824837333280(%..string %227)
	%229 = extractvalue {i32, i64} %228, 0
	%230 = extractvalue {i32, i64} %228, 1
	store i32 %229, i32* %11
	store i64 %230, i64* %12
	; AssignStmt
	%231 = load i64, i64* %12, align 8
	%232 = load i64, i64* %7, align 8
	%233 = add i64 %232, %231
	store i64 %233, i64* %7
	; IfStmt
	%234 = load i32, i32* %11, align 4
	%235 = icmp eq i32 %234, 37
	br i1 %235, label %if.then-55, label %if.else-56

if.then-55:
	%236 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %236, i8 37)
	br label %if.done-63

if.else-56:
	; IfStmt
	; SelectorExpr
	%237 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	%238 = load i1, i1* %237, align 1
	br i1 %238, label %if.else-58, label %if.then-57

if.then-57:
	%239 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %239, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$e8, i64 0, i32 0), i64 23})
	br label %if.done-62

if.else-58:
	; IfStmt
	%240 = load i64, i64* %5, align 8
	; SelectorExpr
	%241 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	%242 = load i64, i64* %241, align 8
	%243 = icmp sge i64 %240, %242
	br i1 %243, label %if.then-59, label %if.else-60

if.then-59:
	%244 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %244, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$e9, i64 0, i32 0), i64 20})
	br label %if.done-61

if.else-60:
	%245 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	; IndexExpr
	%246 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%247 = extractvalue {%..any*, i64, i64} %246, 0
	%248 = extractvalue {%..any*, i64, i64} %246, 1
	%249 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ea, i64 0, i32 0), i64 21}, i64 1037, i64 22, i64 %249, i64 %248)
	%250 = getelementptr inbounds %..any, %..any* %247, i64 %249
	%251 = load %..any, %..any* %250, align 8
	%252 = load i32, i32* %11, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %245, %..any %251, i32 %252)
	%253 = load i64, i64* %5, align 8
	%254 = add i64 %253, 1
	store i64 %254, i64* %5
	br label %if.done-61

if.done-61:
	br label %if.done-62

if.done-62:
	br label %if.done-63

if.done-63:
	br label %for.loop-1

for.done-64:
	; IfStmt
	; SelectorExpr
	%255 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 11
	%256 = load i1, i1* %255, align 1
	br i1 %256, label %if.done-76, label %cmp.and-65

cmp.and-65:
	%257 = load i64, i64* %5, align 8
	; SelectorExpr
	%258 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	%259 = load i64, i64* %258, align 8
	%260 = icmp slt i64 %257, %259
	br i1 %260, label %if.then-66, label %if.done-76

if.then-66:
	%261 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %261, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$eb, i64 0, i32 0), i64 9})
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %14
		; index
	store i64 zeroinitializer, i64* %15
		; SliceExpr
	%262 = load i64, i64* %5, align 8
	%263 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%264 = extractvalue {%..any*, i64, i64} %263, 1
	%265 = extractvalue {%..any*, i64, i64} %263, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ec, i64 0, i32 0), i64 21}, i64 1044, i64 25, i64 %262, i64 %264, i64 %265)
	%266 = extractvalue {%..any*, i64, i64} %263, 0
	%267 = getelementptr inbounds %..any, %..any* %266, i64 %262
	%268 = sub i64 %264, %262
	%269 = sub i64 %265, %262
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	%270 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %267, %..any** %270
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 %268, i64* %271
	%272 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 %269, i64* %272
	%273 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	store i64 zeroinitializer, i64* %17
	%274 = extractvalue {%..any*, i64, i64} %273, 1
	store i64 %274, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-67

for.index.loop-67:
	%275 = load i64, i64* %18, align 8
	%276 = add i64 %275, 1
	store i64 %276, i64* %18
	%277 = load i64, i64* %17, align 8
	%278 = icmp slt i64 %276, %277
	br i1 %278, label %for.index.body-68, label %for.index.done-75

for.index.body-68:
	%279 = load i64, i64* %18, align 8
	%280 = extractvalue {%..any*, i64, i64} %273, 0
	%281 = getelementptr inbounds %..any, %..any* %280, i64 %279
	%282 = load %..any, %..any* %281, align 8
	store %..any %282, %..any* %14
	store i64 %279, i64* %15
	; IfStmt
	%283 = load i64, i64* %15, align 8
	%284 = icmp sgt i64 %283, 0
	br i1 %284, label %if.then-69, label %if.done-70

if.then-69:
	%285 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %285, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ed, i64 0, i32 0), i64 2})
	br label %if.done-70

if.done-70:
	; IfStmt
	; SelectorExpr
	%286 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	%287 = load %..rawptr, %..rawptr* %286, align 8
	%288 = icmp eq %..rawptr %287, zeroinitializer
	br i1 %288, label %if.then-72, label %cmp.or-71

cmp.or-71:
	; SelectorExpr
	%289 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%290 = load %Type_Info*, %Type_Info** %289, align 8
	%291 = icmp eq %Type_Info* %290, zeroinitializer
	br i1 %291, label %if.then-72, label %if.else-73

if.then-72:
	%292 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %292, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$ee, i64 0, i32 0), i64 5})
	br label %if.done-74

if.else-73:
	%293 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	; IndexExpr
	%294 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%295 = extractvalue {%..any*, i64, i64} %294, 0
	%296 = extractvalue {%..any*, i64, i64} %294, 1
	%297 = load i64, i64* %15, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$ef, i64 0, i32 0), i64 21}, i64 1051, i64 23, i64 %297, i64 %296)
	%298 = getelementptr inbounds %..any, %..any* %295, i64 %297
	%299 = load %..any, %..any* %298, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %293, %..any %299, i32 118)
	br label %if.done-74

if.done-74:
	br label %for.index.loop-67

for.index.done-75:
	%300 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %300, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$f0, i64 0, i32 0), i64 1})
	br label %if.done-76

if.done-76:
	; ReturnStmt
	; SelectorExpr
	%301 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%302 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %301, i64 0
	%303 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %302, i64 0, i32 1
	%304 = load i64, i64* %303, align 8
	ret i64 %304
}

define %..rawptr @.mem-5.zero(%..rawptr %data, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %len, i64* %1
	; ReturnStmt
	%2 = load %..rawptr, %..rawptr* %0, align 8
	%3 = load i64, i64* %1, align 8
	%4 = call %..rawptr @.__mem_zero(%..rawptr %2, i64 %3)
	ret %..rawptr %4
}

define %..rawptr @.mem-5.copy(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	; ReturnStmt
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	%6 = call %..rawptr @.__mem_copy(%..rawptr %3, %..rawptr %4, i64 %5)
	ret %..rawptr %6
}

define i64 @.mem-5.compare({i8*, i64, i64} %a, {i8*, i64, i64} %b) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %a, {i8*, i64, i64}* %0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		store {i8*, i64, i64} %b, {i8*, i64, i64}* %1
	; ReturnStmt
	; SelectorExpr
	%2 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0, i32 0
	%3 = load i8*, i8** %2, align 8
	; SelectorExpr
	%4 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %1, i64 0, i32 0
	%5 = load i8*, i8** %4, align 8
	; min
	; SelectorExpr
	%6 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0, i32 1
	%7 = load i64, i64* %6, align 8
	; SelectorExpr
	%8 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %1, i64 0, i32 1
	%9 = load i64, i64* %8, align 8
	%10 = icmp slt i64 %7, %9
	%11 = select i1 %10, i64 %7, i64 %9
	%12 = call i64 @.__mem_compare(i8* %3, i8* %5, i64 %11)
	ret i64 %12
}

define {[4 x i8], i64} @.utf8-6.encode_rune(i32 %r) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca [4 x i8], align 1
	%2 = alloca i32, align 4
	%3 = alloca {[4 x i8], i64}, align 8
	%4 = alloca {[4 x i8], i64}, align 8
	%5 = alloca {[4 x i8], i64}, align 8
	%6 = alloca {[4 x i8], i64}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %r, i32* %0
	; buf
	store [4 x i8] zeroinitializer, [4 x i8]* %1
		; i
	store i32 zeroinitializer, i32* %2
		%7 = load i32, i32* %0, align 4
	; cast - cast
	%8 = bitcast i32 %7 to i32
	store i32 %8, i32* %2
	; IfStmt
	%9 = load i32, i32* %2, align 4
	%10 = icmp ule i32 %9, 127
	br i1 %10, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	%11 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f1, i64 0, i32 0), i64 22}, i64 66, i64 7, i64 0, i64 4)
	%12 = load i32, i32* %0, align 4
	; cast - cast
	%13 = trunc i32 %12 to i8
	store i8 %13, i8* %11
	; ReturnStmt
	%14 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %3
	%15 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 0
	store [4 x i8] %14, [4 x i8]* %15
	%16 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 1
	store i64 1, i64* %16
	%17 = load {[4 x i8], i64}, {[4 x i8], i64}* %3, align 8
	ret {[4 x i8], i64} %17

if.done-2:
	; IfStmt
	%18 = load i32, i32* %2, align 4
	%19 = icmp ule i32 %18, 2047
	br i1 %19, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f2, i64 0, i32 0), i64 22}, i64 70, i64 7, i64 0, i64 4)
	%21 = load i32, i32* %0, align 4
	%22 = lshr i32 %21, 6
	; cast - cast
	%23 = trunc i32 %22 to i8
	%24 = or i8 192, %23
	store i8 %24, i8* %20
	; AssignStmt
	; IndexExpr
	%25 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f3, i64 0, i32 0), i64 22}, i64 71, i64 7, i64 1, i64 4)
	%26 = load i32, i32* %0, align 4
	; cast - cast
	%27 = trunc i32 %26 to i8
	%28 = and i8 %27, 63
	%29 = or i8 128, %28
	store i8 %29, i8* %25
	; ReturnStmt
	%30 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %4
	%31 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 0
	store [4 x i8] %30, [4 x i8]* %31
	%32 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 1
	store i64 2, i64* %32
	%33 = load {[4 x i8], i64}, {[4 x i8], i64}* %4, align 8
	ret {[4 x i8], i64} %33

if.done-4:
	; IfStmt
	%34 = load i32, i32* %2, align 4
	%35 = icmp ugt i32 %34, 1114111
	br i1 %35, label %if.then-7, label %cmp.or-5

cmp.or-5:
	%36 = load i32, i32* %2, align 4
	%37 = icmp ule i32 55296, %36
	br i1 %37, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%38 = load i32, i32* %2, align 4
	%39 = icmp ule i32 %38, 57343
	br i1 %39, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	store i32 65533, i32* %0
	br label %if.done-8

if.done-8:
	; IfStmt
	%40 = load i32, i32* %2, align 4
	%41 = icmp ule i32 %40, 65535
	br i1 %41, label %if.then-9, label %if.done-10

if.then-9:
	; AssignStmt
	; IndexExpr
	%42 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f4, i64 0, i32 0), i64 22}, i64 82, i64 7, i64 0, i64 4)
	%43 = load i32, i32* %0, align 4
	%44 = lshr i32 %43, 12
	; cast - cast
	%45 = trunc i32 %44 to i8
	%46 = or i8 224, %45
	store i8 %46, i8* %42
	; AssignStmt
	; IndexExpr
	%47 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f5, i64 0, i32 0), i64 22}, i64 83, i64 7, i64 1, i64 4)
	%48 = load i32, i32* %0, align 4
	%49 = lshr i32 %48, 6
	; cast - cast
	%50 = trunc i32 %49 to i8
	%51 = and i8 %50, 63
	%52 = or i8 128, %51
	store i8 %52, i8* %47
	; AssignStmt
	; IndexExpr
	%53 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f6, i64 0, i32 0), i64 22}, i64 84, i64 7, i64 2, i64 4)
	%54 = load i32, i32* %0, align 4
	; cast - cast
	%55 = trunc i32 %54 to i8
	%56 = and i8 %55, 63
	%57 = or i8 128, %56
	store i8 %57, i8* %53
	; ReturnStmt
	%58 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %5
	%59 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 0
	store [4 x i8] %58, [4 x i8]* %59
	%60 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 1
	store i64 3, i64* %60
	%61 = load {[4 x i8], i64}, {[4 x i8], i64}* %5, align 8
	ret {[4 x i8], i64} %61

if.done-10:
	; AssignStmt
	; IndexExpr
	%62 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f7, i64 0, i32 0), i64 22}, i64 88, i64 6, i64 0, i64 4)
	%63 = load i32, i32* %0, align 4
	%64 = lshr i32 %63, 18
	; cast - cast
	%65 = trunc i32 %64 to i8
	%66 = or i8 240, %65
	store i8 %66, i8* %62
	; AssignStmt
	; IndexExpr
	%67 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f8, i64 0, i32 0), i64 22}, i64 89, i64 6, i64 1, i64 4)
	%68 = load i32, i32* %0, align 4
	%69 = lshr i32 %68, 12
	; cast - cast
	%70 = trunc i32 %69 to i8
	%71 = and i8 %70, 63
	%72 = or i8 128, %71
	store i8 %72, i8* %67
	; AssignStmt
	; IndexExpr
	%73 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$f9, i64 0, i32 0), i64 22}, i64 90, i64 6, i64 2, i64 4)
	%74 = load i32, i32* %0, align 4
	%75 = lshr i32 %74, 6
	; cast - cast
	%76 = trunc i32 %75 to i8
	%77 = and i8 %76, 63
	%78 = or i8 128, %77
	store i8 %78, i8* %73
	; AssignStmt
	; IndexExpr
	%79 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$fa, i64 0, i32 0), i64 22}, i64 91, i64 6, i64 3, i64 4)
	%80 = load i32, i32* %0, align 4
	; cast - cast
	%81 = trunc i32 %80 to i8
	%82 = and i8 %81, 63
	%83 = or i8 128, %82
	store i8 %83, i8* %79
	; ReturnStmt
	%84 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %6
	%85 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 0
	store [4 x i8] %84, [4 x i8]* %85
	%86 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 1
	store i64 4, i64* %86
	%87 = load {[4 x i8], i64}, {[4 x i8], i64}* %6, align 8
	ret {[4 x i8], i64} %87
}

define {i32, i64} @.utf8-6.decode_rune-1824837333280(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca {i32, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%4 = load %..string, %..string* %0, align 8
	; cast - cast
	%5 = extractvalue %..string %4, 0
	store i8* zeroinitializer, i8** %1
	store i8* %5, i8** %1
	%6 = extractvalue %..string %4, 1
	%7 = sub i64 %6, 0
	%8 = sub i64 %6, 0
	%9 = load i8*, i8** %1, align 8
	%10 = getelementptr inbounds i8, i8* %9, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %8, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%15 = call {i32, i64} @.utf8-6.decode_rune-1824837333648({i8*, i64, i64} %14)
	%16 = extractvalue {i32, i64} %15, 0
	%17 = extractvalue {i32, i64} %15, 1
	store {i32, i64} zeroinitializer, {i32, i64}* %3
	%18 = getelementptr inbounds {i32, i64}, {i32, i64}* %3, i64 0, i32 0
	store i32 %16, i32* %18
	%19 = getelementptr inbounds {i32, i64}, {i32, i64}* %3, i64 0, i32 1
	store i64 %17, i64* %19
	%20 = load {i32, i64}, {i32, i64}* %3, align 8
	ret {i32, i64} %20
}

define {i32, i64} @.utf8-6.decode_rune-1824837333648({i8*, i64, i64} %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca {i32, i64}, align 8
	%3 = alloca i8, align 1
	%4 = alloca i8, align 1
	%5 = alloca i32, align 4
	%6 = alloca {i32, i64}, align 8
	%7 = alloca i8, align 1
	%8 = alloca %utf8-6.Accept_Range, align 1
	%9 = alloca {i32, i64}, align 8
	%10 = alloca i8, align 1
	%11 = alloca {i32, i64}, align 8
	%12 = alloca {i32, i64}, align 8
	%13 = alloca i8, align 1
	%14 = alloca {i32, i64}, align 8
	%15 = alloca {i32, i64}, align 8
	%16 = alloca i8, align 1
	%17 = alloca {i32, i64}, align 8
	%18 = alloca {i32, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %s, {i8*, i64, i64}* %0
	; n
	store i64 zeroinitializer, i64* %1
		; SelectorExpr
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	store i64 %20, i64* %1
	; IfStmt
	%21 = load i64, i64* %1, align 8
	%22 = icmp slt i64 %21, 1
	br i1 %22, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %2
	%23 = getelementptr inbounds {i32, i64}, {i32, i64}* %2, i64 0, i32 0
	store i32 65533, i32* %23
	%24 = getelementptr inbounds {i32, i64}, {i32, i64}* %2, i64 0, i32 1
	store i64 0, i64* %24
	%25 = load {i32, i64}, {i32, i64}* %2, align 8
	ret {i32, i64} %25

if.done-2:
	; s0
	store i8 zeroinitializer, i8* %3
		; IndexExpr
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%27 = extractvalue {i8*, i64, i64} %26, 0
	%28 = extractvalue {i8*, i64, i64} %26, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$fb, i64 0, i32 0), i64 22}, i64 101, i64 10, i64 0, i64 %28)
	%29 = getelementptr inbounds i8, i8* %27, i64 0
	%30 = load i8, i8* %29, align 1
	store i8 %30, i8* %3
	; x
	store i8 zeroinitializer, i8* %4
		; IndexExpr
	%31 = load i8, i8* %3, align 1
	%32 = zext i8 %31 to i64
	%33 = trunc i64 %32 to i32
	%34 = getelementptr inbounds [256 x i8], [256 x i8]* @.accept_sizes, i64 0, i32 %33
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$fc, i64 0, i32 0), i64 22}, i64 102, i64 20, i64 %32, i64 256)
	%35 = load i8, i8* %34, align 1
	store i8 %35, i8* %4
	; IfStmt
	%36 = load i8, i8* %4, align 1
	%37 = icmp uge i8 %36, 240
	br i1 %37, label %if.then-3, label %if.done-4

if.then-3:
	; mask
	store i32 zeroinitializer, i32* %5
		%38 = load i8, i8* %4, align 1
	; cast - cast
	%39 = zext i8 %38 to i32
	%40 = shl i32 %39, 31
	%41 = lshr i32 %40, 31
	store i32 %41, i32* %5
	; ReturnStmt
	; IndexExpr
	%42 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%43 = extractvalue {i8*, i64, i64} %42, 0
	%44 = extractvalue {i8*, i64, i64} %42, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$fd, i64 0, i32 0), i64 22}, i64 105, i64 23, i64 0, i64 %44)
	%45 = getelementptr inbounds i8, i8* %43, i64 0
	%46 = load i8, i8* %45, align 1
	; cast - cast
	%47 = zext i8 %46 to i32
	%48 = load i32, i32* %5, align 4
	%49 = xor i32 %48, -1
	%50 = and i32 %47, %49
	%51 = load i32, i32* %5, align 4
	%52 = and i32 65533, %51
	%53 = or i32 %50, %52
	store {i32, i64} zeroinitializer, {i32, i64}* %6
	%54 = getelementptr inbounds {i32, i64}, {i32, i64}* %6, i64 0, i32 0
	store i32 %53, i32* %54
	%55 = getelementptr inbounds {i32, i64}, {i32, i64}* %6, i64 0, i32 1
	store i64 1, i64* %55
	%56 = load {i32, i64}, {i32, i64}* %6, align 8
	ret {i32, i64} %56

if.done-4:
	; sz
	store i8 zeroinitializer, i8* %7
		%57 = load i8, i8* %4, align 1
	%58 = and i8 %57, 7
	store i8 %58, i8* %7
	; accept
	store %utf8-6.Accept_Range zeroinitializer, %utf8-6.Accept_Range* %8
		; IndexExpr
	%59 = load i8, i8* %4, align 1
	%60 = lshr i8 %59, 4
	%61 = zext i8 %60 to i64
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [5 x %utf8-6.Accept_Range], [5 x %utf8-6.Accept_Range]* @.accept_ranges, i64 0, i32 %62
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$fe, i64 0, i32 0), i64 22}, i64 108, i64 26, i64 %61, i64 5)
	%64 = load %utf8-6.Accept_Range, %utf8-6.Accept_Range* %63, align 1
	store %utf8-6.Accept_Range %64, %utf8-6.Accept_Range* %8
	; IfStmt
	%65 = load i64, i64* %1, align 8
	%66 = load i8, i8* %7, align 1
	; cast - cast
	%67 = zext i8 %66 to i64
	%68 = icmp slt i64 %65, %67
	br i1 %68, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %9
	%69 = getelementptr inbounds {i32, i64}, {i32, i64}* %9, i64 0, i32 0
	store i32 65533, i32* %69
	%70 = getelementptr inbounds {i32, i64}, {i32, i64}* %9, i64 0, i32 1
	store i64 1, i64* %70
	%71 = load {i32, i64}, {i32, i64}* %9, align 8
	ret {i32, i64} %71

if.done-6:
	; b1
	store i8 zeroinitializer, i8* %10
		; IndexExpr
	%72 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%73 = extractvalue {i8*, i64, i64} %72, 0
	%74 = extractvalue {i8*, i64, i64} %72, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$ff, i64 0, i32 0), i64 22}, i64 112, i64 10, i64 1, i64 %74)
	%75 = getelementptr inbounds i8, i8* %73, i64 1
	%76 = load i8, i8* %75, align 1
	store i8 %76, i8* %10
	; IfStmt
	%77 = load i8, i8* %10, align 1
	; SelectorExpr
	%78 = getelementptr inbounds %utf8-6.Accept_Range, %utf8-6.Accept_Range* %8, i64 0, i32 0
	%79 = load i8, i8* %78, align 1
	%80 = icmp ult i8 %77, %79
	br i1 %80, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; SelectorExpr
	%81 = getelementptr inbounds %utf8-6.Accept_Range, %utf8-6.Accept_Range* %8, i64 0, i32 1
	%82 = load i8, i8* %81, align 1
	%83 = load i8, i8* %10, align 1
	%84 = icmp ult i8 %82, %83
	br i1 %84, label %if.then-8, label %if.done-9

if.then-8:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %11
	%85 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 0
	store i32 65533, i32* %85
	%86 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 1
	store i64 1, i64* %86
	%87 = load {i32, i64}, {i32, i64}* %11, align 8
	ret {i32, i64} %87

if.done-9:
	; IfStmt
	%88 = load i8, i8* %7, align 1
	%89 = icmp eq i8 %88, 2
	br i1 %89, label %if.then-10, label %if.done-11

if.then-10:
	; ReturnStmt
	%90 = load i8, i8* %3, align 1
	%91 = and i8 %90, 31
	; cast - cast
	%92 = zext i8 %91 to i32
	%93 = shl i32 %92, 6
	%94 = load i8, i8* %10, align 1
	%95 = and i8 %94, 63
	; cast - cast
	%96 = zext i8 %95 to i32
	%97 = or i32 %93, %96
	store {i32, i64} zeroinitializer, {i32, i64}* %12
	%98 = getelementptr inbounds {i32, i64}, {i32, i64}* %12, i64 0, i32 0
	store i32 %97, i32* %98
	%99 = getelementptr inbounds {i32, i64}, {i32, i64}* %12, i64 0, i32 1
	store i64 2, i64* %99
	%100 = load {i32, i64}, {i32, i64}* %12, align 8
	ret {i32, i64} %100

if.done-11:
	; b2
	store i8 zeroinitializer, i8* %13
		; IndexExpr
	%101 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%102 = extractvalue {i8*, i64, i64} %101, 0
	%103 = extractvalue {i8*, i64, i64} %101, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$100, i64 0, i32 0), i64 22}, i64 119, i64 10, i64 2, i64 %103)
	%104 = getelementptr inbounds i8, i8* %102, i64 2
	%105 = load i8, i8* %104, align 1
	store i8 %105, i8* %13
	; IfStmt
	%106 = load i8, i8* %13, align 1
	%107 = icmp ult i8 %106, 128
	br i1 %107, label %if.then-13, label %cmp.or-12

cmp.or-12:
	%108 = load i8, i8* %13, align 1
	%109 = icmp ult i8 191, %108
	br i1 %109, label %if.then-13, label %if.done-14

if.then-13:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %14
	%110 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 0
	store i32 65533, i32* %110
	%111 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 1
	store i64 1, i64* %111
	%112 = load {i32, i64}, {i32, i64}* %14, align 8
	ret {i32, i64} %112

if.done-14:
	; IfStmt
	%113 = load i8, i8* %7, align 1
	%114 = icmp eq i8 %113, 3
	br i1 %114, label %if.then-15, label %if.done-16

if.then-15:
	; ReturnStmt
	%115 = load i8, i8* %3, align 1
	%116 = and i8 %115, 15
	; cast - cast
	%117 = zext i8 %116 to i32
	%118 = shl i32 %117, 12
	%119 = load i8, i8* %10, align 1
	%120 = and i8 %119, 63
	; cast - cast
	%121 = zext i8 %120 to i32
	%122 = shl i32 %121, 6
	%123 = or i32 %118, %122
	%124 = load i8, i8* %13, align 1
	%125 = and i8 %124, 63
	; cast - cast
	%126 = zext i8 %125 to i32
	%127 = or i32 %123, %126
	store {i32, i64} zeroinitializer, {i32, i64}* %15
	%128 = getelementptr inbounds {i32, i64}, {i32, i64}* %15, i64 0, i32 0
	store i32 %127, i32* %128
	%129 = getelementptr inbounds {i32, i64}, {i32, i64}* %15, i64 0, i32 1
	store i64 3, i64* %129
	%130 = load {i32, i64}, {i32, i64}* %15, align 8
	ret {i32, i64} %130

if.done-16:
	; b3
	store i8 zeroinitializer, i8* %16
		; IndexExpr
	%131 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%132 = extractvalue {i8*, i64, i64} %131, 0
	%133 = extractvalue {i8*, i64, i64} %131, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$101, i64 0, i32 0), i64 22}, i64 126, i64 10, i64 3, i64 %133)
	%134 = getelementptr inbounds i8, i8* %132, i64 3
	%135 = load i8, i8* %134, align 1
	store i8 %135, i8* %16
	; IfStmt
	%136 = load i8, i8* %16, align 1
	%137 = icmp ult i8 %136, 128
	br i1 %137, label %if.then-18, label %cmp.or-17

cmp.or-17:
	%138 = load i8, i8* %16, align 1
	%139 = icmp ult i8 191, %138
	br i1 %139, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %17
	%140 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 0
	store i32 65533, i32* %140
	%141 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 1
	store i64 1, i64* %141
	%142 = load {i32, i64}, {i32, i64}* %17, align 8
	ret {i32, i64} %142

if.done-19:
	; ReturnStmt
	%143 = load i8, i8* %3, align 1
	%144 = and i8 %143, 7
	; cast - cast
	%145 = zext i8 %144 to i32
	%146 = shl i32 %145, 18
	%147 = load i8, i8* %10, align 1
	%148 = and i8 %147, 63
	; cast - cast
	%149 = zext i8 %148 to i32
	%150 = shl i32 %149, 12
	%151 = or i32 %146, %150
	%152 = load i8, i8* %13, align 1
	%153 = and i8 %152, 63
	; cast - cast
	%154 = zext i8 %153 to i32
	%155 = shl i32 %154, 6
	%156 = or i32 %151, %155
	%157 = load i8, i8* %16, align 1
	%158 = and i8 %157, 63
	; cast - cast
	%159 = zext i8 %158 to i32
	%160 = or i32 %156, %159
	store {i32, i64} zeroinitializer, {i32, i64}* %18
	%161 = getelementptr inbounds {i32, i64}, {i32, i64}* %18, i64 0, i32 0
	store i32 %160, i32* %161
	%162 = getelementptr inbounds {i32, i64}, {i32, i64}* %18, i64 0, i32 1
	store i64 4, i64* %162
	%163 = load {i32, i64}, {i32, i64}* %18, align 8
	ret {i32, i64} %163
}

define i64 @.utf8-6.rune_count-1824837335856(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%3 = load %..string, %..string* %0, align 8
	; cast - cast
	%4 = extractvalue %..string %3, 0
	store i8* zeroinitializer, i8** %1
	store i8* %4, i8** %1
	%5 = extractvalue %..string %3, 1
	%6 = sub i64 %5, 0
	%7 = sub i64 %5, 0
	%8 = load i8*, i8** %1, align 8
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %6, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = call i64 @.utf8-6.rune_count-1824837336224({i8*, i64, i64} %13)
	ret i64 %14
}

define i64 @.utf8-6.rune_count-1824837336224({i8*, i64, i64} %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i8, align 1
	%5 = alloca i8, align 1
	%6 = alloca i64, align 8
	%7 = alloca %utf8-6.Accept_Range, align 1
	%8 = alloca i8, align 1
	%9 = alloca i8, align 1
	%10 = alloca i8, align 1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %s, {i8*, i64, i64}* %0
	; count
	store i64 zeroinitializer, i64* %1
		store i64 0, i64* %1
	; n
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	store i64 %12, i64* %2
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	br label %for.loop-1

for.loop-1:
	%13 = load i64, i64* %3, align 8
	%14 = load i64, i64* %2, align 8
	%15 = icmp slt i64 %13, %14
	br i1 %15, label %for.body-2, label %for.done-26

for.body-2:
	; DeferStmt
	; si
	store i8 zeroinitializer, i8* %4
		; IndexExpr
	%16 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%17 = extractvalue {i8*, i64, i64} %16, 0
	%18 = extractvalue {i8*, i64, i64} %16, 1
	%19 = load i64, i64* %3, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$102, i64 0, i32 0), i64 22}, i64 227, i64 11, i64 %19, i64 %18)
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	%21 = load i8, i8* %20, align 1
	store i8 %21, i8* %4
	; IfStmt
	%22 = load i8, i8* %4, align 1
	%23 = icmp ult i8 %22, 128
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	; defer
	%26 = load i64, i64* %1, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %1
	; continue
	br label %for.loop-1

if.done-4:
	; x
	store i8 zeroinitializer, i8* %5
		; IndexExpr
	%28 = load i8, i8* %4, align 1
	%29 = zext i8 %28 to i64
	%30 = trunc i64 %29 to i32
	%31 = getelementptr inbounds [256 x i8], [256 x i8]* @.accept_sizes, i64 0, i32 %30
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$103, i64 0, i32 0), i64 22}, i64 232, i64 21, i64 %29, i64 256)
	%32 = load i8, i8* %31, align 1
	store i8 %32, i8* %5
	; IfStmt
	%33 = load i8, i8* %5, align 1
	%34 = icmp eq i8 %33, 241
	br i1 %34, label %if.then-5, label %if.done-6

if.then-5:
	%35 = load i64, i64* %3, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %3
	; defer
	%37 = load i64, i64* %1, align 8
	%38 = add i64 %37, 1
	store i64 %38, i64* %1
	; continue
	br label %for.loop-1

if.done-6:
	; size
	store i64 zeroinitializer, i64* %6
		%39 = load i8, i8* %5, align 1
	%40 = and i8 %39, 7
	; cast - cast
	%41 = zext i8 %40 to i64
	store i64 %41, i64* %6
	; IfStmt
	%42 = load i64, i64* %3, align 8
	%43 = load i64, i64* %6, align 8
	%44 = add i64 %42, %43
	%45 = load i64, i64* %2, align 8
	%46 = icmp sgt i64 %44, %45
	br i1 %46, label %if.then-7, label %if.done-8

if.then-7:
	%47 = load i64, i64* %3, align 8
	%48 = add i64 %47, 1
	store i64 %48, i64* %3
	; defer
	%49 = load i64, i64* %1, align 8
	%50 = add i64 %49, 1
	store i64 %50, i64* %1
	; continue
	br label %for.loop-1

if.done-8:
	; ar
	store %utf8-6.Accept_Range zeroinitializer, %utf8-6.Accept_Range* %7
		; IndexExpr
	%51 = load i8, i8* %5, align 1
	%52 = lshr i8 %51, 4
	%53 = zext i8 %52 to i64
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [5 x %utf8-6.Accept_Range], [5 x %utf8-6.Accept_Range]* @.accept_ranges, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$104, i64 0, i32 0), i64 22}, i64 242, i64 23, i64 %53, i64 5)
	%56 = load %utf8-6.Accept_Range, %utf8-6.Accept_Range* %55, align 1
	store %utf8-6.Accept_Range %56, %utf8-6.Accept_Range* %7
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %8
		; IndexExpr
	%57 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%58 = extractvalue {i8*, i64, i64} %57, 0
	%59 = extractvalue {i8*, i64, i64} %57, 1
	%60 = load i64, i64* %3, align 8
	%61 = add i64 %60, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$105, i64 0, i32 0), i64 22}, i64 243, i64 13, i64 %61, i64 %59)
	%62 = getelementptr inbounds i8, i8* %58, i64 %61
	%63 = load i8, i8* %62, align 1
	store i8 %63, i8* %8
	%64 = load i8, i8* %8, align 1
	; SelectorExpr
	%65 = getelementptr inbounds %utf8-6.Accept_Range, %utf8-6.Accept_Range* %7, i64 0, i32 0
	%66 = load i8, i8* %65, align 1
	%67 = icmp ult i8 %64, %66
	br i1 %67, label %if.then-10, label %cmp.or-9

cmp.or-9:
	; SelectorExpr
	%68 = getelementptr inbounds %utf8-6.Accept_Range, %utf8-6.Accept_Range* %7, i64 0, i32 1
	%69 = load i8, i8* %68, align 1
	%70 = load i8, i8* %8, align 1
	%71 = icmp ult i8 %69, %70
	br i1 %71, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-25

if.else-11:
	; IfStmt
	%72 = load i64, i64* %6, align 8
	%73 = icmp eq i64 %72, 2
	br i1 %73, label %if.then-12, label %if.else-13

if.then-12:
	br label %if.done-24

if.else-13:
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %9
		; IndexExpr
	%74 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%75 = extractvalue {i8*, i64, i64} %74, 0
	%76 = extractvalue {i8*, i64, i64} %74, 1
	%77 = load i64, i64* %3, align 8
	%78 = add i64 %77, 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$106, i64 0, i32 0), i64 22}, i64 247, i64 20, i64 %78, i64 %76)
	%79 = getelementptr inbounds i8, i8* %75, i64 %78
	%80 = load i8, i8* %79, align 1
	store i8 %80, i8* %9
	%81 = load i8, i8* %9, align 1
	%82 = icmp ult i8 %81, 128
	br i1 %82, label %if.then-15, label %cmp.or-14

cmp.or-14:
	%83 = load i8, i8* %9, align 1
	%84 = icmp ult i8 191, %83
	br i1 %84, label %if.then-15, label %if.else-16

if.then-15:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-23

if.else-16:
	; IfStmt
	%85 = load i64, i64* %6, align 8
	%86 = icmp eq i64 %85, 3
	br i1 %86, label %if.then-17, label %if.else-18

if.then-17:
	br label %if.done-22

if.else-18:
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %10
		; IndexExpr
	%87 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%88 = extractvalue {i8*, i64, i64} %87, 0
	%89 = extractvalue {i8*, i64, i64} %87, 1
	%90 = load i64, i64* %3, align 8
	%91 = add i64 %90, 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.__str$107, i64 0, i32 0), i64 22}, i64 251, i64 20, i64 %91, i64 %89)
	%92 = getelementptr inbounds i8, i8* %88, i64 %91
	%93 = load i8, i8* %92, align 1
	store i8 %93, i8* %10
	%94 = load i8, i8* %10, align 1
	%95 = icmp ult i8 %94, 128
	br i1 %95, label %if.then-20, label %cmp.or-19

cmp.or-19:
	%96 = load i8, i8* %10, align 1
	%97 = icmp ult i8 191, %96
	br i1 %97, label %if.then-20, label %if.done-21

if.then-20:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-21

if.done-21:
	br label %if.done-22

if.done-22:
	br label %if.done-23

if.done-23:
	br label %if.done-24

if.done-24:
	br label %if.done-25

if.done-25:
	; AssignStmt
	%98 = load i64, i64* %6, align 8
	%99 = load i64, i64* %3, align 8
	%100 = add i64 %99, %98
	store i64 %100, i64* %3
	; defer
	%101 = load i64, i64* %1, align 8
	%102 = add i64 %101, 1
	store i64 %102, i64* %1
	br label %for.loop-1

for.done-26:
	; ReturnStmt
	%103 = load i64, i64* %1, align 8
	ret i64 %103
}

define i64 @.hash-7.fnv64a({i8*, i64, i64} %data) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %0
	; h
	store i64 zeroinitializer, i64* %1
		store i64 -3750763034362895579, i64* %1
	; RangeStmt
	; b
	store i8 zeroinitializer, i8* %2
		%5 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	store i64 zeroinitializer, i64* %3
	%6 = extractvalue {i8*, i64, i64} %5, 1
	store i64 %6, i64* %3
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%7 = load i64, i64* %4, align 8
	%8 = add i64 %7, 1
	store i64 %8, i64* %4
	%9 = load i64, i64* %3, align 8
	%10 = icmp slt i64 %8, %9
	br i1 %10, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%11 = load i64, i64* %4, align 8
	%12 = extractvalue {i8*, i64, i64} %5, 0
	%13 = getelementptr inbounds i8, i8* %12, i64 %11
	%14 = load i8, i8* %13, align 1
	store i8 %14, i8* %2
	; AssignStmt
	%15 = load i64, i64* %1, align 8
	%16 = load i8, i8* %2, align 1
	; cast - cast
	%17 = zext i8 %16 to i64
	%18 = xor i64 %15, %17
	%19 = mul i64 %18, 1099511628211
	store i64 %19, i64* %1
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%20 = load i64, i64* %1, align 8
	ret i64 %20
}

define i1 @.windows-8.is_key_down(i32 %key) alwaysinline {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %key, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 8
	; cast - cast
	%2 = call ccc i16 @GetAsyncKeyState(i32 %1)
	%3 = icmp slt i16 %2, 0
	ret i1 %3
}

define i1 @.imgui-10.Begin(%..string %name, i1* %open, i32 %flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i1*, align 8
	%2 = alloca i32, align 8
	%3 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	store i1* zeroinitializer, i1** %1
		store i1* %open, i1** %1
	store i32 zeroinitializer, i32* %2
		store i32 %flags, i32* %2
	; str
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%4 = load %..string, %..string* %0, align 8
	%5 = call i8* @.strings-11.new_c_string(%..string %4)
	store i8* %5, i8** %3
	; DeferStmt
	; ReturnStmt
	%6 = load i8*, i8** %3, align 8
	%7 = load i1*, i1** %1, align 8
	%8 = load i32, i32* %2, align 8
	%9 = call ccc i1 @igBegin(i8* %6, i1* %7, i32 %8)
	; defer
	; free
	%10 = load i8*, i8** %3, align 8
	%11 = bitcast i8* %10 to %..rawptr
	call void @.free_ptr(%..rawptr %11)
	ret i1 %9
}

define i1 @.imgui-10.BeginChild(%..string %str_id, %imgui-10.Vec2 %size, i1 %border, i32 %extra_flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %imgui-10.Vec2, align 4
	%2 = alloca i1, align 1
	%3 = alloca i32, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %str_id, %..string* %0
	store %imgui-10.Vec2 zeroinitializer, %imgui-10.Vec2* %1
		store %imgui-10.Vec2 %size, %imgui-10.Vec2* %1
	store i1 zeroinitializer, i1* %2
		store i1 %border, i1* %2
	store i32 zeroinitializer, i32* %3
		store i32 %extra_flags, i32* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call i8* @.strings-11.new_c_string(%..string %6)
	store i8* %7, i8** %4
	; DeferStmt
	; ReturnStmt
	%8 = load i8*, i8** %4, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %5
	%9 = load %imgui-10.Vec2, %imgui-10.Vec2* %1, align 4
	%10 = bitcast %imgui-10.Vec2* %1 to i64*
	%11 = load i64, i64* %10, align 8
	store i64 %11, i64* %5
	%12 = load i64, i64* %5, align 8
	%13 = load i1, i1* %2, align 1
	%14 = load i32, i32* %3, align 8
	%15 = call ccc i1 @igBeginChild(i8* %8, i64 %12, i1 %13, i32 %14)
	; defer
	; free
	%16 = load i8*, i8** %4, align 8
	%17 = bitcast i8* %16 to %..rawptr
	call void @.free_ptr(%..rawptr %17)
	ret i1 %15
}

define void @.imgui-10.Text(%..string %fmt_, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [1024 x i8], align 1
	%3 = alloca %..string, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %fmt_, %..string* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; buf
	store [1024 x i8] zeroinitializer, [1024 x i8]* %2
		; s
	store %..string zeroinitializer, %..string* %3
		; SelectorExpr
	; SliceExpr
	%6 = load [1024 x i8], [1024 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$108, i64 0, i32 0), i64 34}, i64 524, i64 25, i64 0, i64 0, i64 1024)
	%7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%15 = load %..string, %..string* %0, align 8
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %14, %..string %15, {%..any*, i64, i64} %16)
	store %..string %17, %..string* %3
	; assert
	; SelectorExpr
	%18 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 1
	%19 = load i64, i64* %18, align 8
	%20 = icmp slt i64 %19, 1024
	%21 = icmp eq i1 %20, false
	br i1 %21, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$109, i64 0, i32 0), i64 34}, i64 525, i64 14, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$10a, i64 0, i32 0), i64 19})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; c_str
	store i8* zeroinitializer, i8** %5
		; IndexExpr
	%22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.__str$10b, i64 0, i32 0), i64 34}, i64 526, i64 19, i64 0, i64 1024)
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	store i8* %23, i8** %5
	%24 = load i8*, i8** %5, align 8
	call ccc void @igText(i8* %24)
	ret void
}

define i1 @.imgui-10.Button(%..string %label, %imgui-10.Vec2 %size) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %imgui-10.Vec2, align 4
	%2 = alloca i8*, align 8
	%3 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store %imgui-10.Vec2 zeroinitializer, %imgui-10.Vec2* %1
		store %imgui-10.Vec2 %size, %imgui-10.Vec2* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%4 = load %..string, %..string* %0, align 8
	%5 = call i8* @.strings-11.new_c_string(%..string %4)
	store i8* %5, i8** %2
	; DeferStmt
	; ReturnStmt
	%6 = load i8*, i8** %2, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %3
	%7 = load %imgui-10.Vec2, %imgui-10.Vec2* %1, align 4
	%8 = bitcast %imgui-10.Vec2* %1 to i64*
	%9 = load i64, i64* %8, align 8
	store i64 %9, i64* %3
	%10 = load i64, i64* %3, align 8
	%11 = call ccc i1 @igButton(i8* %6, i64 %10)
	; defer
	; free
	%12 = load i8*, i8** %2, align 8
	%13 = bitcast i8* %12 to %..rawptr
	call void @.free_ptr(%..rawptr %13)
	ret i1 %11
}

define void @.imgui-10.Image(%..rawptr %user_texture_id, %imgui-10.Vec2 %size, %imgui-10.Vec2 %uv0, %imgui-10.Vec2 %uv1, %imgui-10.Vec4 %tint_col, %imgui-10.Vec4 %border_col) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %imgui-10.Vec2, align 4
	%2 = alloca %imgui-10.Vec2, align 4
	%3 = alloca %imgui-10.Vec2, align 4
	%4 = alloca %imgui-10.Vec4, align 4
	%5 = alloca %imgui-10.Vec4, align 4
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [6 x %..any], align 8
	%14 = alloca i64, align 8
	%15 = alloca i64, align 8
	%16 = alloca i64, align 8
	%17 = alloca %..any, align 8
	%18 = alloca %..any, align 8
	%19 = alloca %..any, align 8
	%20 = alloca %..any, align 8
	%21 = alloca %..any, align 8
	%22 = alloca %..any, align 8
	%23 = alloca {%..any*, i64, i64}, align 8
	%24 = alloca [6 x %..any], align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %user_texture_id, %..rawptr* %0
	store %imgui-10.Vec2 zeroinitializer, %imgui-10.Vec2* %1
		store %imgui-10.Vec2 %size, %imgui-10.Vec2* %1
	store %imgui-10.Vec2 zeroinitializer, %imgui-10.Vec2* %2
		store %imgui-10.Vec2 %uv0, %imgui-10.Vec2* %2
	store %imgui-10.Vec2 zeroinitializer, %imgui-10.Vec2* %3
		store %imgui-10.Vec2 %uv1, %imgui-10.Vec2* %3
	store %imgui-10.Vec4 zeroinitializer, %imgui-10.Vec4* %4
		store %imgui-10.Vec4 %tint_col, %imgui-10.Vec4* %4
	store %imgui-10.Vec4 zeroinitializer, %imgui-10.Vec4* %5
		store %imgui-10.Vec4 %border_col, %imgui-10.Vec4* %5
	; SelectorExpr
	%28 = load %..rawptr, %..rawptr* %0, align 8
	%29 = load %imgui-10.Vec2, %imgui-10.Vec2* %1, align 4
	%30 = load %imgui-10.Vec2, %imgui-10.Vec2* %2, align 4
	%31 = load %imgui-10.Vec2, %imgui-10.Vec2* %3, align 4
	%32 = load %imgui-10.Vec4, %imgui-10.Vec4* %4, align 4
	%33 = load %imgui-10.Vec4, %imgui-10.Vec4* %5, align 4
	store %..any zeroinitializer, %..any* %6
	%34 = bitcast %..rawptr* %0 to %..rawptr
	%35 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%36 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%39 = bitcast %imgui-10.Vec2* %1 to %..rawptr
	%40 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%41 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%42 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %40, %Type_Info** %41
	store %..rawptr %39, %..rawptr* %42
	%43 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%44 = bitcast %imgui-10.Vec2* %2 to %..rawptr
	%45 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%46 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%47 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %45, %Type_Info** %46
	store %..rawptr %44, %..rawptr* %47
	%48 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%49 = bitcast %imgui-10.Vec2* %3 to %..rawptr
	%50 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	%51 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%54 = bitcast %imgui-10.Vec4* %4 to %..rawptr
	%55 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%56 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%57 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %55, %Type_Info** %56
	store %..rawptr %54, %..rawptr* %57
	%58 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%59 = bitcast %imgui-10.Vec4* %5 to %..rawptr
	%60 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%61 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%62 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %60, %Type_Info** %61
	store %..rawptr %59, %..rawptr* %62
	%63 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [6 x %..any] zeroinitializer, [6 x %..any]* %13
	%64 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	store %..any %38, %..any* %64
	%65 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 1
	store %..any %43, %..any* %65
	%66 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 2
	store %..any %48, %..any* %66
	%67 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 3
	store %..any %53, %..any* %67
	%68 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 4
	store %..any %58, %..any* %68
	%69 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 5
	store %..any %63, %..any* %69
	%70 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	%71 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %70, %..any** %71
	%72 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 6, i64* %72
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 6, i64* %73
	%74 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%75 = call i64 @.fmt-4.println({%..any*, i64, i64} %74)
	; SelectorExpr
	%76 = load %..rawptr, %..rawptr* %0, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %14
	%77 = load %imgui-10.Vec2, %imgui-10.Vec2* %1, align 4
	%78 = bitcast %imgui-10.Vec2* %1 to i64*
	%79 = load i64, i64* %78, align 8
	store i64 %79, i64* %14
	%80 = load i64, i64* %14, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %15
	%81 = load %imgui-10.Vec2, %imgui-10.Vec2* %2, align 4
	%82 = bitcast %imgui-10.Vec2* %2 to i64*
	%83 = load i64, i64* %82, align 8
	store i64 %83, i64* %15
	%84 = load i64, i64* %15, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %16
	%85 = load %imgui-10.Vec2, %imgui-10.Vec2* %3, align 4
	%86 = bitcast %imgui-10.Vec2* %3 to i64*
	%87 = load i64, i64* %86, align 8
	store i64 %87, i64* %16
	%88 = load i64, i64* %16, align 8
	%89 = load %imgui-10.Vec4, %imgui-10.Vec4* %4, align 4
	%90 = load %imgui-10.Vec4, %imgui-10.Vec4* %5, align 4
	store %..any zeroinitializer, %..any* %17
	%91 = bitcast %..rawptr* %0 to %..rawptr
	%92 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%93 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%94 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %92, %Type_Info** %93
	store %..rawptr %91, %..rawptr* %94
	%95 = load %..any, %..any* %17, align 8
	store %..any zeroinitializer, %..any* %18
	%96 = bitcast i64* %14 to %..rawptr
	%97 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%98 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%99 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %97, %Type_Info** %98
	store %..rawptr %96, %..rawptr* %99
	%100 = load %..any, %..any* %18, align 8
	store %..any zeroinitializer, %..any* %19
	%101 = bitcast i64* %15 to %..rawptr
	%102 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%103 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 0
	%104 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 1
	store %Type_Info* %102, %Type_Info** %103
	store %..rawptr %101, %..rawptr* %104
	%105 = load %..any, %..any* %19, align 8
	store %..any zeroinitializer, %..any* %20
	%106 = bitcast i64* %16 to %..rawptr
	%107 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%108 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%109 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %107, %Type_Info** %108
	store %..rawptr %106, %..rawptr* %109
	%110 = load %..any, %..any* %20, align 8
	store %..any zeroinitializer, %..any* %21
	%111 = bitcast %imgui-10.Vec4* %4 to %..rawptr
	%112 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%113 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 0
	%114 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 1
	store %Type_Info* %112, %Type_Info** %113
	store %..rawptr %111, %..rawptr* %114
	%115 = load %..any, %..any* %21, align 8
	store %..any zeroinitializer, %..any* %22
	%116 = bitcast %imgui-10.Vec4* %5 to %..rawptr
	%117 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%118 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 0
	%119 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 1
	store %Type_Info* %117, %Type_Info** %118
	store %..rawptr %116, %..rawptr* %119
	%120 = load %..any, %..any* %22, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %23
	store [6 x %..any] zeroinitializer, [6 x %..any]* %24
	%121 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 0
	store %..any %95, %..any* %121
	%122 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 1
	store %..any %100, %..any* %122
	%123 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 2
	store %..any %105, %..any* %123
	%124 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 3
	store %..any %110, %..any* %124
	%125 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 4
	store %..any %115, %..any* %125
	%126 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 5
	store %..any %120, %..any* %126
	%127 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 0
	%128 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 0
	store %..any* %127, %..any** %128
	%129 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 1
	store i64 6, i64* %129
	%130 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 2
	store i64 6, i64* %130
	%131 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %23, align 8
	%132 = call i64 @.fmt-4.println({%..any*, i64, i64} %131)
	%133 = load %..rawptr, %..rawptr* %0, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %25
	%134 = load %imgui-10.Vec2, %imgui-10.Vec2* %1, align 4
	%135 = bitcast %imgui-10.Vec2* %1 to i64*
	%136 = load i64, i64* %135, align 8
	store i64 %136, i64* %25
	%137 = load i64, i64* %25, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %26
	%138 = load %imgui-10.Vec2, %imgui-10.Vec2* %2, align 4
	%139 = bitcast %imgui-10.Vec2* %2 to i64*
	%140 = load i64, i64* %139, align 8
	store i64 %140, i64* %26
	%141 = load i64, i64* %26, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %27
	%142 = load %imgui-10.Vec2, %imgui-10.Vec2* %3, align 4
	%143 = bitcast %imgui-10.Vec2* %3 to i64*
	%144 = load i64, i64* %143, align 8
	store i64 %144, i64* %27
	%145 = load i64, i64* %27, align 8
	%146 = load %imgui-10.Vec4, %imgui-10.Vec4* %4, align 4
	%147 = load %imgui-10.Vec4, %imgui-10.Vec4* %5, align 4
	call ccc void @igImage(%..rawptr %133, i64 %137, i64 %141, i64 %145, %imgui-10.Vec4 %146, %imgui-10.Vec4 %147)
	ret void
}

define i1 @.imgui-10.CollapsingHeader(%..string %label, i32 %flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i32, align 8
	%2 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i32 zeroinitializer, i32* %1
		store i32 %flags, i32* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @.strings-11.new_c_string(%..string %3)
	store i8* %4, i8** %2
	; DeferStmt
	; ReturnStmt
	%5 = load i8*, i8** %2, align 8
	%6 = load i32, i32* %1, align 8
	%7 = call ccc i1 @igCollapsingHeader(i8* %5, i32 %6)
	; defer
	; free
	%8 = load i8*, i8** %2, align 8
	%9 = bitcast i8* %8 to %..rawptr
	call void @.free_ptr(%..rawptr %9)
	ret i1 %7
}

define i1 @.imgui-10.BeginMenu(%..string %label, i1 %enabled) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i1, align 1
	%2 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i1 zeroinitializer, i1* %1
		store i1 %enabled, i1* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @.strings-11.new_c_string(%..string %3)
	store i8* %4, i8** %2
	; DeferStmt
	; ReturnStmt
	%5 = load i8*, i8** %2, align 8
	%6 = load i1, i1* %1, align 1
	%7 = call ccc i1 @igBeginMenu(i8* %5, i1 %6)
	; defer
	; free
	%8 = load i8*, i8** %2, align 8
	%9 = bitcast i8* %8 to %..rawptr
	call void @.free_ptr(%..rawptr %9)
	ret i1 %7
}

define i1 @.imgui-10.MenuItem(%..string %label, %..string %shortcut, i1 %selected, i1 %enabled) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i1, align 1
	%3 = alloca i1, align 1
	%4 = alloca i8*, align 8
	%5 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %shortcut, %..string* %1
	store i1 zeroinitializer, i1* %2
		store i1 %selected, i1* %2
	store i1 zeroinitializer, i1* %3
		store i1 %enabled, i1* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call i8* @.strings-11.new_c_string(%..string %6)
	store i8* %7, i8** %4
	; DeferStmt
	; shrt
	store i8* zeroinitializer, i8** %5
		; SelectorExpr
	%8 = load %..string, %..string* %1, align 8
	%9 = call i8* @.strings-11.new_c_string(%..string %8)
	store i8* %9, i8** %5
	; DeferStmt
	; ReturnStmt
	%10 = load i8*, i8** %4, align 8
	%11 = load i8*, i8** %5, align 8
	%12 = load i1, i1* %2, align 1
	%13 = load i1, i1* %3, align 1
	%14 = call ccc i1 @igMenuItem(i8* %10, i8* %11, i1 %12, i1 %13)
	; defer
	; free
	%15 = load i8*, i8** %5, align 8
	%16 = bitcast i8* %15 to %..rawptr
	call void @.free_ptr(%..rawptr %16)
	; defer
	; free
	%17 = load i8*, i8** %4, align 8
	%18 = bitcast i8* %17 to %..rawptr
	call void @.free_ptr(%..rawptr %18)
	ret i1 %14
}

define i8* @.strings-11.new_c_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca i8*, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; c
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		; new_slice
	; SelectorExpr
	%5 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%6 = load i64, i64* %5, align 8
	%7 = add i64 %6, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$10c, i64 0, i32 0), i64 25}, i64 2, i64 25, i64 0, i64 %7, i64 %7)
	%8 = mul i64 1, %7
	%9 = call %..rawptr @.alloc_align(i64 %8, i64 1)
	%10 = bitcast %..rawptr %9 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %1
	; copy
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%16 = load %..string, %..string* %0, align 8
	; cast - cast
	%17 = extractvalue %..string %16, 0
	store i8* zeroinitializer, i8** %3
	store i8* %17, i8** %3
	%18 = extractvalue %..string %16, 1
	%19 = sub i64 %18, 0
	%20 = sub i64 %18, 0
	%21 = load i8*, i8** %3, align 8
	%22 = getelementptr inbounds i8, i8* %21, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %22, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %19, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %20, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %15, 0
	%28 = bitcast i8* %27 to %..rawptr
	%29 = extractvalue {i8*, i64, i64} %26, 0
	%30 = bitcast i8* %29 to %..rawptr
	%31 = extractvalue {i8*, i64, i64} %15, 1
	%32 = extractvalue {i8*, i64, i64} %26, 1
	%33 = icmp slt i64 %31, %32
	%34 = select i1 %33, i64 %31, i64 %32
	%35 = mul i64 %34, 1
	%36 = call %..rawptr @.__mem_copy(%..rawptr %28, %..rawptr %30, i64 %35)
	; AssignStmt
	; IndexExpr
	%37 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%38 = extractvalue {i8*, i64, i64} %37, 0
	%39 = extractvalue {i8*, i64, i64} %37, 1
	; SelectorExpr
	%40 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%41 = load i64, i64* %40, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$10d, i64 0, i32 0), i64 25}, i64 4, i64 6, i64 %41, i64 %39)
	%42 = getelementptr inbounds i8, i8* %38, i64 %41
	store i8 0, i8* %42
	; ReturnStmt
	; SelectorExpr
	%43 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %1, i64 0, i32 0
	%44 = load i8*, i8** %43, align 8
	ret i8* %44
}

define %..string @.strings-11.to_odin_string(i8* %c) {
decls-0:
	%0 = alloca i8*, align 8
	%1 = alloca %..string, align 8
	store i8* zeroinitializer, i8** %0
		store i8* %c, i8** %0
	; s
	store %..string zeroinitializer, %..string* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 0
	%3 = load i8*, i8** %0, align 8
	store i8* %3, i8** %2
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%4 = load i8*, i8** %0, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 1
	%6 = load i64, i64* %5, align 8
	%7 = getelementptr inbounds i8, i8* %4, i64 %6
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = load i8, i8* %8, align 1
	%10 = icmp ne i8 %9, 0
	br i1 %10, label %for.body-2, label %for.done-3

for.body-2:
	; SelectorExpr
	%11 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	%13 = add i64 %12, 1
	store i64 %13, i64* %11
	br label %for.loop-1

for.done-3:
	; ReturnStmt
	%14 = load %..string, %..string* %1, align 8
	ret %..string %14
}

define i16 @.jaze_win32-13.HIWORD-1824837624416(i64 %wParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %wParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i32
	%3 = lshr i32 %2, 16
	%4 = and i32 %3, 65535
	; cast - cast
	%5 = trunc i32 %4 to i16
	ret i16 %5
}

define i16 @.jaze_win32-13.HIWORD-1824837624784(i64 %lParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %lParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i32
	%3 = lshr i32 %2, 16
	%4 = and i32 %3, 65535
	; cast - cast
	%5 = trunc i32 %4 to i16
	ret i16 %5
}

define i16 @.jaze_win32-13.LOWORD-1824837625520(i64 %lParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %lParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i16
	ret i16 %2
}

define {%jaze_gl-14.Shader, i1} @.jaze_gl-14.UtilCreateAndCompileShader(i32 %type, %..string %source) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %jaze_gl-14.Shader, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca %..string, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [1 x %..any], align 8
	%11 = alloca %..any, align 8
	%12 = alloca %..string, align 8
	%13 = alloca {%..any*, i64, i64}, align 8
	%14 = alloca [1 x %..any], align 8
	%15 = alloca %..string, align 8
	%16 = alloca %..any, align 8
	%17 = alloca {%..any*, i64, i64}, align 8
	%18 = alloca [1 x %..any], align 8
	%19 = alloca {%jaze_gl-14.Shader, i1}, align 8
	%20 = alloca {%jaze_gl-14.Shader, i1}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %type, i32* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %source, %..string* %1
	; shader
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %2
		; AssignStmt
	%21 = load i32, i32* %0, align 8
	%22 = call %jaze_gl-14.Shader @.jaze_gl-14.CreateShader(i32 %21)
	store %jaze_gl-14.Shader %22, %jaze_gl-14.Shader* %2
	%23 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	%24 = load %..string, %..string* %1, align 8
	call void @.jaze_gl-14.ShaderSource-1824837659664(%jaze_gl-14.Shader %23, %..string %24)
	%25 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	call void @.jaze_gl-14.CompileShader(%jaze_gl-14.Shader %25)
	; success
	store i32 zeroinitializer, i32* %3
		%26 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	%27 = call i32 @.jaze_gl-14.GetShaderValue(%jaze_gl-14.Shader %26, i32 35713)
	store i32 %27, i32* %3
	; IfStmt
	%28 = load i32, i32* %3, align 4
	%29 = icmp eq i32 %28, 0
	br i1 %29, label %if.then-1, label %if.done-2

if.then-1:
	; logSize
	store i32 zeroinitializer, i32* %4
		%30 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	%31 = call i32 @.jaze_gl-14.GetShaderValue(%jaze_gl-14.Shader %30, i32 35716)
	store i32 %31, i32* %4
	; logBytes
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
		; new_slice
	%32 = load i32, i32* %4, align 4
	%33 = sext i32 %32 to i64
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$10e, i64 0, i32 0), i64 24}, i64 134, i64 37, i64 0, i64 %33, i64 %33)
	%34 = mul i64 1, %33
	%35 = call %..rawptr @.alloc_align(i64 %34, i64 1)
	%36 = bitcast %..rawptr %35 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%37 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %36, i8** %37
	%38 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %33, i64* %38
	%39 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %33, i64* %39
	%40 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	store {i8*, i64, i64} %40, {i8*, i64, i64}* %5
	%41 = load void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)** @._GetShaderInfoLog, align 8
	; SelectorExpr
	%42 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, i64 0, i32 1
	%43 = load i32, i32* %42, align 4
	%44 = load i32, i32* %4, align 4
	%45 = getelementptr inbounds i32, i32* %4, i64 0
	; SelectorExpr
	%46 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	%47 = load i8*, i8** %46, align 8
	call ccc void %41(i32 %43, i32 %44, i32* %45, i8* %47)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %7
	store %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$10f, i64 0, i32 0), i64 26}, %..string* %7
	%48 = load %..string, %..string* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%49 = bitcast %..string* %7 to %..rawptr
	%50 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%51 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [1 x %..any] zeroinitializer, [1 x %..any]* %10
	%54 = getelementptr inbounds [1 x %..any], [1 x %..any]* %10, i64 0, i32 0
	store %..any %53, %..any* %54
	%55 = getelementptr inbounds [1 x %..any], [1 x %..any]* %10, i64 0, i32 0
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %55, %..any** %56
	%57 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 1, i64* %57
	%58 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 1, i64* %58
	%59 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	%60 = call i64 @.fmt-4.println({%..any*, i64, i64} %59)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%61 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	%62 = load i8*, i8** %61, align 8
	%63 = call %..string @.strings-11.to_odin_string(i8* %62)
	store %..any zeroinitializer, %..any* %11
	store %..string zeroinitializer, %..string* %12
	store %..string %63, %..string* %12
	%64 = bitcast %..string* %12 to %..rawptr
	%65 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%66 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%67 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %65, %Type_Info** %66
	store %..rawptr %64, %..rawptr* %67
	%68 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %13
	store [1 x %..any] zeroinitializer, [1 x %..any]* %14
	%69 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	store %..any %68, %..any* %69
	%70 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	%71 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 0
	store %..any* %70, %..any** %71
	%72 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 1
	store i64 1, i64* %72
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 2
	store i64 1, i64* %73
	%74 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %13, align 8
	%75 = call i64 @.fmt-4.print({%..any*, i64, i64} %74)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %15
	store %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$110, i64 0, i32 0), i64 26}, %..string* %15
	%76 = load %..string, %..string* %15, align 8
	store %..any zeroinitializer, %..any* %16
	%77 = bitcast %..string* %15 to %..rawptr
	%78 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%79 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 0
	%80 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 1
	store %Type_Info* %78, %Type_Info** %79
	store %..rawptr %77, %..rawptr* %80
	%81 = load %..any, %..any* %16, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %17
	store [1 x %..any] zeroinitializer, [1 x %..any]* %18
	%82 = getelementptr inbounds [1 x %..any], [1 x %..any]* %18, i64 0, i32 0
	store %..any %81, %..any* %82
	%83 = getelementptr inbounds [1 x %..any], [1 x %..any]* %18, i64 0, i32 0
	%84 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %17, i64 0, i32 0
	store %..any* %83, %..any** %84
	%85 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %17, i64 0, i32 1
	store i64 1, i64* %85
	%86 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %17, i64 0, i32 2
	store i64 1, i64* %86
	%87 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %17, align 8
	%88 = call i64 @.fmt-4.println({%..any*, i64, i64} %87)
	; AssignStmt
	; SelectorExpr
	%89 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, i64 0, i32 2
	store i1 false, i1* %89
	; ReturnStmt
	%90 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	store {%jaze_gl-14.Shader, i1} zeroinitializer, {%jaze_gl-14.Shader, i1}* %19
	%91 = getelementptr inbounds {%jaze_gl-14.Shader, i1}, {%jaze_gl-14.Shader, i1}* %19, i64 0, i32 0
	store %jaze_gl-14.Shader %90, %jaze_gl-14.Shader* %91
	%92 = getelementptr inbounds {%jaze_gl-14.Shader, i1}, {%jaze_gl-14.Shader, i1}* %19, i64 0, i32 1
	store i1 false, i1* %92
	%93 = load {%jaze_gl-14.Shader, i1}, {%jaze_gl-14.Shader, i1}* %19, align 8
	ret {%jaze_gl-14.Shader, i1} %93

if.done-2:
	; AssignStmt
	; SelectorExpr
	%94 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, i64 0, i32 2
	store i1 true, i1* %94
	; ReturnStmt
	%95 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	store {%jaze_gl-14.Shader, i1} zeroinitializer, {%jaze_gl-14.Shader, i1}* %20
	%96 = getelementptr inbounds {%jaze_gl-14.Shader, i1}, {%jaze_gl-14.Shader, i1}* %20, i64 0, i32 0
	store %jaze_gl-14.Shader %95, %jaze_gl-14.Shader* %96
	%97 = getelementptr inbounds {%jaze_gl-14.Shader, i1}, {%jaze_gl-14.Shader, i1}* %20, i64 0, i32 1
	store i1 true, i1* %97
	%98 = load {%jaze_gl-14.Shader, i1}, {%jaze_gl-14.Shader, i1}* %20, align 8
	ret {%jaze_gl-14.Shader, i1} %98
}

define void @.jaze_gl-14.DebugMessageControl(i32 %source, i32 %type, i32 %severity, i32 %count, i32* %ids, i1 %enabled) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32*, align 8
	%5 = alloca i1, align 1
	store i32 zeroinitializer, i32* %0
		store i32 %source, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %type, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %severity, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %count, i32* %3
	store i32* zeroinitializer, i32** %4
		store i32* %ids, i32** %4
	store i1 zeroinitializer, i1* %5
		store i1 %enabled, i1* %5
	; IfStmt
	%6 = load void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @._DebugMessageControl, align 8
	%7 = icmp ne void (i32, i32, i32, i32, i32*, i1)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.else-2

if.then-1:
	%8 = load void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @._DebugMessageControl, align 8
	%9 = load i32, i32* %0, align 8
	; cast - cast
	%10 = load i32, i32* %1, align 8
	; cast - cast
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i32, i32* %3, align 4
	%13 = load i32*, i32** %4, align 8
	%14 = load i1, i1* %5, align 1
	call ccc void %8(i32 %9, i32 %10, i32 %11, i32 %12, i32* %13, i1 %14)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.DebugMessageCallback(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %callback, %..rawptr %userParam) {
decls-0:
	%0 = alloca void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, align 8
	%1 = alloca %..rawptr, align 8
	store void (i32, i32, i32, i32, i32, i8*, %..rawptr)* zeroinitializer, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0
		store void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %callback, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %userParam, %..rawptr* %1
	; IfStmt
	%2 = load void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @._DebugMessageCallback, align 8
	%3 = icmp ne void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @._DebugMessageCallback, align 8
	%5 = load void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0, align 8
	%6 = load %..rawptr, %..rawptr* %1, align 8
	call ccc void %4(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %5, %..rawptr %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.Clear(i32 %mask) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mask, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glClear(i32 %1)
	ret void
}

define void @.jaze_gl-14.BufferData(i32 %target, i32 %size, %..rawptr %data, i32 %usage) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca %..rawptr, align 8
	%3 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %size, i32* %1
	store %..rawptr zeroinitializer, %..rawptr* %2
		store %..rawptr %data, %..rawptr* %2
	store i32 zeroinitializer, i32* %3
		store i32 %usage, i32* %3
	; IfStmt
	%4 = load void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @._BufferData, align 8
	%5 = icmp ne void (i32, i32, %..rawptr, i32)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	%6 = load void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @._BufferData, align 8
	%7 = load i32, i32* %0, align 8
	; cast - cast
	%8 = load i32, i32* %1, align 4
	%9 = load %..rawptr, %..rawptr* %2, align 8
	%10 = load i32, i32* %3, align 8
	; cast - cast
	call ccc void %6(i32 %7, i32 %8, %..rawptr %9, i32 %10)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GenBuffer() {
decls-0:
	%0 = alloca i32, align 4
	; IfStmt
	%1 = load void (i32, i32*)*, void (i32, i32*)** @._GenBuffers, align 8
	%2 = icmp ne void (i32, i32*)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %0
		%3 = load void (i32, i32*)*, void (i32, i32*)** @._GenBuffers, align 8
	%4 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%5 = bitcast i32* %4 to i32*
	call ccc void %3(i32 1, i32* %5)
	; ReturnStmt
	%6 = load i32, i32* %0, align 4
	ret i32 %6

if.else-2:
	; ReturnStmt
	ret i32 0

if.done-3:
	unreachable
}

define void @.jaze_gl-14.BindBuffer-1824837645312(i32 %target, i32 %buffer) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %buffer, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @._BindBuffer, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @._BindBuffer, align 8
	%5 = load i32, i32* %0, align 8
	; cast - cast
	%6 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.BindBuffer-1824837645680(i32 %vbo) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %vbo, i32* %0
	%1 = load i32, i32* %0, align 4
	; cast - cast
	call void @.jaze_gl-14.BindBuffer-1824837645312(i32 34962, i32 %1)
	ret void
}

define void @.jaze_gl-14.BindBuffer-1824837646048(i32 %ebo) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %ebo, i32* %0
	%1 = load i32, i32* %0, align 4
	; cast - cast
	call void @.jaze_gl-14.BindBuffer-1824837645312(i32 34963, i32 %1)
	ret void
}

define i32 @.jaze_gl-14.GenVertexArray() {
decls-0:
	%0 = alloca i32, align 4
	; IfStmt
	%1 = load void (i32, i32*)*, void (i32, i32*)** @._GenVertexArrays, align 8
	%2 = icmp ne void (i32, i32*)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %0
		%3 = load void (i32, i32*)*, void (i32, i32*)** @._GenVertexArrays, align 8
	%4 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%5 = bitcast i32* %4 to i32*
	call ccc void %3(i32 1, i32* %5)
	; ReturnStmt
	%6 = load i32, i32* %0, align 4
	ret i32 %6

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret i32 0
}

define void @.jaze_gl-14.EnableVertexAttribArray(i32 %index) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %index, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._EnableVertexAttribArray, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._EnableVertexAttribArray, align 8
	%4 = load i32, i32* %0, align 4
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.VertexAttribPointer(i32 %index, i32 %size, i32 %type, i1 %normalized, i32 %stride, %..rawptr %pointer) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca i1, align 1
	%4 = alloca i32, align 4
	%5 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %index, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %size, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %type, i32* %2
	store i1 zeroinitializer, i1* %3
		store i1 %normalized, i1* %3
	store i32 zeroinitializer, i32* %4
		store i32 %stride, i32* %4
	store %..rawptr zeroinitializer, %..rawptr* %5
		store %..rawptr %pointer, %..rawptr* %5
	; IfStmt
	%6 = load void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @._VertexAttribPointer, align 8
	%7 = icmp ne void (i32, i32, i32, i1, i32, %..rawptr)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.else-2

if.then-1:
	%8 = load void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @._VertexAttribPointer, align 8
	%9 = load i32, i32* %0, align 4
	%10 = load i32, i32* %1, align 4
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i1, i1* %3, align 1
	%13 = load i32, i32* %4, align 4
	%14 = load %..rawptr, %..rawptr* %5, align 8
	call ccc void %8(i32 %9, i32 %10, i32 %11, i1 %12, i32 %13, %..rawptr %14)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.BindVertexArray(i32 %buffer) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %buffer, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._BindVertexArray, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._BindVertexArray, align 8
	%4 = load i32, i32* %0, align 4
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.Uniform-1824837648256(i32 %loc, i32 %v0) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %loc, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %v0, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @._Uniform1i, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @._Uniform1i, align 8
	%5 = load i32, i32* %0, align 4
	%6 = load i32, i32* %1, align 4
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %program, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca i32, align 4
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; IfStmt
	%4 = load i32 (i32, i8*)*, i32 (i32, i8*)** @._GetUniformLocation, align 8
	%5 = icmp ne i32 (i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = call i8* @.strings-11.new_c_string(%..string %6)
	store i8* %7, i8** %2
	; DeferStmt
	; res
	store i32 zeroinitializer, i32* %3
		%8 = load i32 (i32, i8*)*, i32 (i32, i8*)** @._GetUniformLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 4
	%10 = load i32, i32* %9, align 4
	; cast - cast
	%11 = load i8*, i8** %2, align 8
	%12 = call ccc i32 %8(i32 %10, i8* %11)
	store i32 %12, i32* %3
	; ReturnStmt
	%13 = load i32, i32* %3, align 4
	; defer
	; free
	%14 = load i8*, i8** %2, align 8
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	ret i32 %13

if.else-2:
	; ReturnStmt
	unreachable
}

define i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %program, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca i32, align 4
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; IfStmt
	%4 = load i32 (i32, i8*)*, i32 (i32, i8*)** @._GetAttribLocation, align 8
	%5 = icmp ne i32 (i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = call i8* @.strings-11.new_c_string(%..string %6)
	store i8* %7, i8** %2
	; DeferStmt
	; res
	store i32 zeroinitializer, i32* %3
		%8 = load i32 (i32, i8*)*, i32 (i32, i8*)** @._GetAttribLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 4
	%10 = load i32, i32* %9, align 4
	; cast - cast
	%11 = load i8*, i8** %2, align 8
	%12 = call ccc i32 %8(i32 %10, i8* %11)
	store i32 %12, i32* %3
	; ReturnStmt
	%13 = load i32, i32* %3, align 4
	; defer
	; free
	%14 = load i8*, i8** %2, align 8
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	ret i32 %13

if.else-2:
	; ReturnStmt
	unreachable
}

define void @.jaze_gl-14.DrawElements(i32 %mode, i32 %count, i32 %type, %..rawptr %indices) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mode, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %count, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %type, i32* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %indices, %..rawptr* %3
	; IfStmt
	%4 = load void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @._DrawElements, align 8
	%5 = icmp ne void (i32, i32, i32, %..rawptr)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	%6 = load void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @._DrawElements, align 8
	%7 = load i32, i32* %0, align 8
	; cast - cast
	%8 = load i32, i32* %1, align 4
	%9 = load i32, i32* %2, align 8
	; cast - cast
	%10 = load %..rawptr, %..rawptr* %3, align 8
	call ccc void %6(i32 %7, i32 %8, i32 %9, %..rawptr %10)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.UseProgram(%jaze_gl-14.Program %program) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._UseProgram, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._UseProgram, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 4
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.LinkProgram(%jaze_gl-14.Program %program) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._LinkProgram, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._LinkProgram, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 4
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.TexImage2D(i32 %target, i32 %lod, i32 %internalFormat, i32 %width, i32 %height, i32 %format, i32 %type_, %..rawptr %data) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca i32, align 8
	%6 = alloca i32, align 8
	%7 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %lod, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %internalFormat, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %width, i32* %3
	store i32 zeroinitializer, i32* %4
		store i32 %height, i32* %4
	store i32 zeroinitializer, i32* %5
		store i32 %format, i32* %5
	store i32 zeroinitializer, i32* %6
		store i32 %type_, i32* %6
	store %..rawptr zeroinitializer, %..rawptr* %7
		store %..rawptr %data, %..rawptr* %7
	%8 = load i32, i32* %0, align 8
	; cast - cast
	%9 = bitcast i32 %8 to i32
	%10 = load i32, i32* %1, align 4
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i32, i32* %3, align 4
	%13 = load i32, i32* %4, align 4
	%14 = load i32, i32* %5, align 8
	; cast - cast
	%15 = load i32, i32* %6, align 8
	; cast - cast
	%16 = load %..rawptr, %..rawptr* %7, align 8
	call ccc void @glTexImage2D(i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 0, i32 %14, i32 %15, %..rawptr %16)
	ret void
}

define void @.jaze_gl-14.TexParameteri(i32 %target, i32 %pname, i32 %param) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %pname, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %param, i32* %2
	%3 = load i32, i32* %0, align 8
	; cast - cast
	%4 = bitcast i32 %3 to i32
	%5 = load i32, i32* %1, align 8
	; cast - cast
	%6 = load i32, i32* %2, align 8
	; cast - cast
	call ccc void @glTexParameteri(i32 %4, i32 %5, i32 %6)
	ret void
}

define void @.jaze_gl-14.BindTexture(i32 %target, i32 %texture) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %texture, i32* %1
	%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = bitcast i32 %2 to i32
	%4 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void @glBindTexture(i32 %3, i32 %4)
	ret void
}

define void @.jaze_gl-14.ActiveTexture(i32 %texture) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %texture, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._ActiveTexture, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._ActiveTexture, align 8
	%4 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-14.GenTexture() {
decls-0:
	%0 = alloca i32, align 4
	; res
	store i32 zeroinitializer, i32* %0
		%1 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%2 = bitcast i32* %1 to i32*
	call ccc void @glGenTextures(i32 1, i32* %2)
	; ReturnStmt
	%3 = load i32, i32* %0, align 4
	ret i32 %3
}

define void @.jaze_gl-14.BlendEquation(i32 %mode) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mode, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._BlendEquation, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._BlendEquation, align 8
	%4 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.BlendFunc(i32 %sfactor, i32 %dfactor) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %sfactor, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %dfactor, i32* %1
	%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = load i32, i32* %1, align 8
	; cast - cast
	call ccc void @glBlendFunc(i32 %2, i32 %3)
	ret void
}

define i32 @.jaze_gl-14.GetShaderValue(%jaze_gl-14.Shader %shader, i32 %name) {
decls-0:
	%0 = alloca %jaze_gl-14.Shader, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 4
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %0
		store %jaze_gl-14.Shader %shader, %jaze_gl-14.Shader* %0
	store i32 zeroinitializer, i32* %1
		store i32 %name, i32* %1
	; IfStmt
	%3 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** @._GetShaderiv, align 8
	%4 = icmp ne void (i32, i32, i32*)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %2
		%5 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** @._GetShaderiv, align 8
	; SelectorExpr
	%6 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %0, i64 0, i32 1
	%7 = load i32, i32* %6, align 4
	%8 = load i32, i32* %1, align 8
	; cast - cast
	%9 = getelementptr inbounds i32, i32* %2, i64 0
	call ccc void %5(i32 %7, i32 %8, i32* %9)
	; ReturnStmt
	%10 = load i32, i32* %2, align 4
	ret i32 %10

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret i32 0
}

define %..string @.jaze_gl-14.GetString-1824837657088(i32 %name, i32 %index) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i8*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %index, i32* %1
	; IfStmt
	%3 = load i8* (i32, i32)*, i8* (i32, i32)** @._GetStringi, align 8
	%4 = icmp ne i8* (i32, i32)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i8* zeroinitializer, i8** %2
		%5 = load i8* (i32, i32)*, i8* (i32, i32)** @._GetStringi, align 8
	%6 = load i32, i32* %0, align 8
	; cast - cast
	%7 = load i32, i32* %1, align 4
	%8 = call ccc i8* %5(i32 %6, i32 %7)
	store i8* %8, i8** %2
	; ReturnStmt
	; SelectorExpr
	%9 = load i8*, i8** %2, align 8
	%10 = call %..string @.strings-11.to_odin_string(i8* %9)
	ret %..string %10

if.else-2:
	; ReturnStmt
	ret %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$111, i64 0, i32 0), i64 3}

if.done-3:
	unreachable
}

define %..string @.jaze_gl-14.GetString-1824837657456(i32 %name) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i8*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	; res
	store i8* zeroinitializer, i8** %1
		%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = call ccc i8* @glGetString(i32 %2)
	store i8* %3, i8** %1
	; ReturnStmt
	; SelectorExpr
	%4 = load i8*, i8** %1, align 8
	%5 = call %..string @.strings-11.to_odin_string(i8* %4)
	ret %..string %5
}

define i32 @.jaze_gl-14.GetInteger(i32 %name) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	; res
	store i32 zeroinitializer, i32* %1
		%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = getelementptr inbounds i32, i32* %1, i64 0
	call ccc void @glGetIntegerv(i32 %2, i32* %3)
	; ReturnStmt
	%4 = load i32, i32* %1, align 4
	ret i32 %4
}

define void @.jaze_gl-14.Enable(i32 %cap) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %cap, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glEnable(i32 %1)
	ret void
}

define void @.jaze_gl-14.Disable(i32 %cap) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %cap, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glDisable(i32 %1)
	ret void
}

define void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %program, %jaze_gl-14.Shader %shader) {
decls-0:
	%0 = alloca %jaze_gl-14.Program, align 8
	%1 = alloca %jaze_gl-14.Shader, align 8
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %0
		store %jaze_gl-14.Program %program, %jaze_gl-14.Program* %0
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %1
		store %jaze_gl-14.Shader %shader, %jaze_gl-14.Shader* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @._AttachShader, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @._AttachShader, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %0, i64 0, i32 4
	%6 = load i32, i32* %5, align 4
	; SelectorExpr
	%7 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %1, i64 0, i32 1
	%8 = load i32, i32* %7, align 4
	call ccc void %4(i32 %6, i32 %8)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define %jaze_gl-14.Program @.jaze_gl-14.CreateProgram() {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_gl-14.Program, align 8
	; IfStmt
	%2 = load i32 ()*, i32 ()** @._CreateProgram, align 8
	%3 = icmp ne i32 ()* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	; id
	store i32 zeroinitializer, i32* %0
		%4 = load i32 ()*, i32 ()** @._CreateProgram, align 8
	%5 = call ccc i32 %4()
	store i32 %5, i32* %0
	; res
	store %jaze_gl-14.Program zeroinitializer, %jaze_gl-14.Program* %1
		; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %1, i64 0, i32 4
	%7 = load i32, i32* %0, align 4
	store i32 %7, i32* %6
	; ReturnStmt
	%8 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %1, align 8
	ret %jaze_gl-14.Program %8

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret %jaze_gl-14.Program zeroinitializer
}

define void @.jaze_gl-14.ShaderSource-1824837659664(%jaze_gl-14.Shader %obj, %..string %str) {
decls-0:
	%0 = alloca %jaze_gl-14.Shader, align 8
	%1 = alloca %..string, align 8
	%2 = alloca [1 x %..string], align 8
	%3 = alloca {%..string*, i64, i64}, align 8
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %0
		store %jaze_gl-14.Shader %obj, %jaze_gl-14.Shader* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %str, %..string* %1
	; array
	store [1 x %..string] zeroinitializer, [1 x %..string]* %2
		; AssignStmt
	; IndexExpr
	%4 = getelementptr inbounds [1 x %..string], [1 x %..string]* %2, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$112, i64 0, i32 0), i64 24}, i64 504, i64 11, i64 0, i64 1)
	%5 = load %..string, %..string* %1, align 8
	store %..string %5, %..string* %4
	%6 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %0, align 8
	; SliceExpr
	%7 = load [1 x %..string], [1 x %..string]* %2, align 8
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$113, i64 0, i32 0), i64 24}, i64 505, i64 28, i64 0, i64 1, i64 1)
	%8 = getelementptr inbounds [1 x %..string], [1 x %..string]* %2, i64 0, i32 0
	%9 = getelementptr inbounds %..string, %..string* %8, i64 0
	%10 = sub i64 1, 0
	%11 = sub i64 1, 0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %3
	%12 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 0
	store %..string* %9, %..string** %12
	%13 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %13
	%14 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 2
	store i64 %11, i64* %14
	%15 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %3, align 8
	call void @.jaze_gl-14.ShaderSource-1824837660032(%jaze_gl-14.Shader %6, {%..string*, i64, i64} %15)
	ret void
}

define void @.jaze_gl-14.ShaderSource-1824837660032(%jaze_gl-14.Shader %obj, {%..string*, i64, i64} %strs) {
decls-0:
	%0 = alloca %jaze_gl-14.Shader, align 8
	%1 = alloca {%..string*, i64, i64}, align 8
	%2 = alloca {i8**, i64, i64}, align 8
	%3 = alloca {i8**, i64, i64}, align 8
	%4 = alloca {i32*, i64, i64}, align 8
	%5 = alloca {i32*, i64, i64}, align 8
	%6 = alloca %..string, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %0
		store %jaze_gl-14.Shader %obj, %jaze_gl-14.Shader* %0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %1
		store {%..string*, i64, i64} %strs, {%..string*, i64, i64}* %1
	; IfStmt
	%10 = load void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @._ShaderSource, align 8
	%11 = icmp ne void (i32, i32, i8**, i32*)* %10, zeroinitializer
	br i1 %11, label %if.then-1, label %if.else-5

if.then-1:
	; newStrs
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %2
		; new_slice
	; SelectorExpr
	%12 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1, i64 0, i32 1
	%13 = load i64, i64* %12, align 8
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$114, i64 0, i32 0), i64 24}, i64 510, i64 42, i64 0, i64 %13, i64 %13)
	%14 = mul i64 8, %13
	%15 = call %..rawptr @.alloc_align(i64 %14, i64 8)
	%16 = bitcast %..rawptr %15 to i8**
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %3
	%17 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 0
	store i8** %16, i8*** %17
	%18 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 1
	store i64 %13, i64* %18
	%19 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 2
	store i64 %13, i64* %19
	%20 = load {i8**, i64, i64}, {i8**, i64, i64}* %3, align 8
	store {i8**, i64, i64} %20, {i8**, i64, i64}* %2
	; DeferStmt
	; lengths
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %4
		; new_slice
	; SelectorExpr
	%21 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1, i64 0, i32 1
	%22 = load i64, i64* %21, align 8
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$115, i64 0, i32 0), i64 24}, i64 511, i64 40, i64 0, i64 %22, i64 %22)
	%23 = mul i64 4, %22
	%24 = call %..rawptr @.alloc_align(i64 %23, i64 4)
	%25 = bitcast %..rawptr %24 to i32*
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %5
	%26 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 0
	store i32* %25, i32** %26
	%27 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 1
	store i64 %22, i64* %27
	%28 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 2
	store i64 %22, i64* %28
	%29 = load {i32*, i64, i64}, {i32*, i64, i64}* %5, align 8
	store {i32*, i64, i64} %29, {i32*, i64, i64}* %4
	; DeferStmt
	; RangeStmt
	; s
	store %..string zeroinitializer, %..string* %6
		; i
	store i64 zeroinitializer, i64* %7
		%30 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %8
	%31 = extractvalue {%..string*, i64, i64} %30, 1
	store i64 %31, i64* %8
	store i64 zeroinitializer, i64* %9
	store i64 -1, i64* %9
	br label %for.index.loop-2

for.index.loop-2:
	%32 = load i64, i64* %9, align 8
	%33 = add i64 %32, 1
	store i64 %33, i64* %9
	%34 = load i64, i64* %8, align 8
	%35 = icmp slt i64 %33, %34
	br i1 %35, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%36 = load i64, i64* %9, align 8
	%37 = extractvalue {%..string*, i64, i64} %30, 0
	%38 = getelementptr inbounds %..string, %..string* %37, i64 %36
	%39 = load %..string, %..string* %38, align 8
	store %..string %39, %..string* %6
	store i64 %36, i64* %7
	; AssignStmt
	; IndexExpr
	%40 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%41 = extractvalue {i8**, i64, i64} %40, 0
	%42 = extractvalue {i8**, i64, i64} %40, 1
	%43 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$116, i64 0, i32 0), i64 24}, i64 513, i64 21, i64 %43, i64 %42)
	%44 = getelementptr inbounds i8*, i8** %41, i64 %43
	; SelectorExpr
	%45 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 0
	%46 = load i8*, i8** %45, align 8
	store i8* %46, i8** %44
	; AssignStmt
	; IndexExpr
	%47 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%48 = extractvalue {i32*, i64, i64} %47, 0
	%49 = extractvalue {i32*, i64, i64} %47, 1
	%50 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$117, i64 0, i32 0), i64 24}, i64 514, i64 21, i64 %50, i64 %49)
	%51 = getelementptr inbounds i32, i32* %48, i64 %50
	; SelectorExpr
	%52 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 1
	%53 = load i64, i64* %52, align 8
	; cast - cast
	%54 = trunc i64 %53 to i32
	store i32 %54, i32* %51
	br label %for.index.loop-2

for.index.done-4:
	%55 = load void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @._ShaderSource, align 8
	; SelectorExpr
	%56 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %0, i64 0, i32 1
	%57 = load i32, i32* %56, align 4
	; SelectorExpr
	%58 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1, i64 0, i32 1
	%59 = load i64, i64* %58, align 8
	; cast - cast
	%60 = trunc i64 %59 to i32
	; SelectorExpr
	%61 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %2, i64 0, i32 0
	%62 = load i8**, i8*** %61, align 8
	; SelectorExpr
	%63 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 0
	%64 = load i32*, i32** %63, align 8
	call ccc void %55(i32 %57, i32 %60, i8** %62, i32* %64)
	; AssignStmt
	; SelectorExpr
	%65 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %0, i64 0, i32 0
	; IndexExpr
	%66 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%67 = extractvalue {%..string*, i64, i64} %66, 0
	%68 = extractvalue {%..string*, i64, i64} %66, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$118, i64 0, i32 0), i64 24}, i64 517, i64 27, i64 0, i64 %68)
	%69 = getelementptr inbounds %..string, %..string* %67, i64 0
	%70 = load %..string, %..string* %69, align 8
	store %..string %70, %..string* %65
	; defer
	; free
	%71 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%72 = extractvalue {i32*, i64, i64} %71, 0
	%73 = bitcast i32* %72 to %..rawptr
	call void @.free_ptr(%..rawptr %73)
	; defer
	; free
	%74 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%75 = extractvalue {i8**, i64, i64} %74, 0
	%76 = bitcast i8** %75 to %..rawptr
	call void @.free_ptr(%..rawptr %76)
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	ret void
}

define %jaze_gl-14.Shader @.jaze_gl-14.CreateShader(i32 %type) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca %jaze_gl-14.Shader, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %type, i32* %0
	; IfStmt
	%3 = load i32 (i32)*, i32 (i32)** @._CreateShader, align 8
	%4 = icmp ne i32 (i32)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; id
	store i32 zeroinitializer, i32* %1
		%5 = load i32 (i32)*, i32 (i32)** @._CreateShader, align 8
	%6 = load i32, i32* %0, align 8
	; cast - cast
	%7 = call ccc i32 %5(i32 %6)
	store i32 %7, i32* %1
	; res
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %2
		; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, i64 0, i32 1
	%9 = load i32, i32* %1, align 4
	store i32 %9, i32* %8
	; ReturnStmt
	%10 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %2, align 8
	ret %jaze_gl-14.Shader %10

if.else-2:
	; ReturnStmt
	ret %jaze_gl-14.Shader zeroinitializer

if.done-3:
	unreachable
}

define void @.jaze_gl-14.CompileShader(%jaze_gl-14.Shader %obj) {
decls-0:
	%0 = alloca %jaze_gl-14.Shader, align 8
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %0
		store %jaze_gl-14.Shader %obj, %jaze_gl-14.Shader* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @._CompileShader, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @._CompileShader, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-14.Shader, %jaze_gl-14.Shader* %0, i64 0, i32 1
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-14.GetInfo(%jaze_gl-14.OpenGLVars_t* %vars) {
decls-0:
	%0 = alloca %jaze_gl-14.OpenGLVars_t*, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 4
	%3 = alloca i64, align 8
	%4 = alloca %..string, align 8
	%5 = alloca {%..string*, i64, i64}, align 8
	%6 = alloca [1 x %..string], align 8
	store %jaze_gl-14.OpenGLVars_t* zeroinitializer, %jaze_gl-14.OpenGLVars_t** %0
		store %jaze_gl-14.OpenGLVars_t* %vars, %jaze_gl-14.OpenGLVars_t** %0
	; AssignStmt
	; SelectorExpr
	%7 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%8 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %7, i64 0
	%9 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %8, i64 0, i32 8
	%10 = call i32 @.jaze_gl-14.GetInteger(i32 33307)
	store i32 %10, i32* %9
	; AssignStmt
	; SelectorExpr
	%11 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%12 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %11, i64 0
	%13 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %12, i64 0, i32 10
	%14 = call i32 @.jaze_gl-14.GetInteger(i32 33308)
	store i32 %14, i32* %13
	; AssignStmt
	; SelectorExpr
	%15 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%16 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %15, i64 0
	%17 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %16, i64 0, i32 11
	%18 = call i32 @.jaze_gl-14.GetInteger(i32 33310)
	store i32 %18, i32* %17
	; AssignStmt
	; SelectorExpr
	%19 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%20 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %19, i64 0
	%21 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %20, i64 0, i32 2
	%22 = call %..string @.jaze_gl-14.GetString-1824837657456(i32 7938)
	store %..string %22, %..string* %21
	; AssignStmt
	; SelectorExpr
	%23 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%24 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %23, i64 0
	%25 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %24, i64 0, i32 3
	%26 = call %..string @.jaze_gl-14.GetString-1824837657456(i32 35724)
	store %..string %26, %..string* %25
	; AssignStmt
	; SelectorExpr
	%27 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%28 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %27, i64 0
	%29 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %28, i64 0, i32 4
	%30 = call %..string @.jaze_gl-14.GetString-1824837657456(i32 7936)
	store %..string %30, %..string* %29
	; AssignStmt
	; SelectorExpr
	%31 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%32 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %31, i64 0
	%33 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %32, i64 0, i32 5
	%34 = call %..string @.jaze_gl-14.GetString-1824837657456(i32 7937)
	store %..string %34, %..string* %33
	; AssignStmt
	; SelectorExpr
	%35 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%36 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %35, i64 0
	%37 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %36, i64 0, i32 12
	%38 = call i32 @.jaze_gl-14.GetInteger(i32 33309)
	store i32 %38, i32* %37
	; reserve
	; SelectorExpr
	%39 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%40 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %39, i64 0
	%41 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %40, i64 0, i32 0
	; SelectorExpr
	%42 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%43 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %42, i64 0
	%44 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %43, i64 0, i32 12
	%45 = load i32, i32* %44, align 4
	%46 = sext i32 %45 to i64
	%47 = bitcast {%..string*, i64, i64,%Allocator}* %41 to %..rawptr
	%48 = call i1 @.__dynamic_array_reserve(%..rawptr %47, i64 16, i64 8, i64 %46)
	; RangeStmt
	; i
	store i32 zeroinitializer, i32* %1
		store i32 zeroinitializer, i32* %2
	store i32 0, i32* %2
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	br label %for.interval.loop-1

for.interval.loop-1:
	; SelectorExpr
	%49 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%50 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %49, i64 0
	%51 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %50, i64 0, i32 12
	%52 = load i32, i32* %51, align 4
	%53 = load i32, i32* %2, align 4
	%54 = icmp slt i32 %53, %52
	br i1 %54, label %for.interval.body-2, label %for.interval.done-3

for.interval.body-2:
	%55 = load i32, i32* %2, align 4
	%56 = load i64, i64* %3, align 8
	%57 = load i32, i32* %2, align 4
	%58 = add i32 %57, 1
	store i32 %58, i32* %2
	%59 = load i64, i64* %3, align 8
	%60 = add i64 %59, 1
	store i64 %60, i64* %3
	store i32 %55, i32* %1
	; ext
	store %..string zeroinitializer, %..string* %4
		%61 = load i32, i32* %1, align 4
	; cast - cast
	%62 = bitcast i32 %61 to i32
	%63 = call %..string @.jaze_gl-14.GetString-1824837657088(i32 7939, i32 %62)
	store %..string %63, %..string* %4
	; append
	; SelectorExpr
	%64 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%65 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %64, i64 0
	%66 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %65, i64 0, i32 0
	%67 = bitcast {%..string*, i64, i64,%Allocator}* %66 to %..rawptr
	; SelectorExpr
	%68 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%69 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %68, i64 0
	%70 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %69, i64 0, i32 0
	%71 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %70, align 8
	%72 = load %..string, %..string* %4, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %5
	store [1 x %..string] zeroinitializer, [1 x %..string]* %6
	%73 = getelementptr inbounds [1 x %..string], [1 x %..string]* %6, i64 0, i32 0
	store %..string %72, %..string* %73
	%74 = getelementptr inbounds [1 x %..string], [1 x %..string]* %6, i64 0, i32 0
	%75 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 0
	store %..string* %74, %..string** %75
	%76 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 1
	store i64 1, i64* %76
	%77 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 2
	store i64 1, i64* %77
	%78 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %5, align 8
	%79 = extractvalue {%..string*, i64, i64} %78, 0
	%80 = extractvalue {%..string*, i64, i64} %78, 1
	%81 = bitcast %..string* %79 to %..rawptr
	%82 = call i64 @.__dynamic_array_append(%..rawptr %67, i64 16, i64 8, %..rawptr %81, i64 %80)
	br label %for.interval.loop-1

for.interval.done-3:
	ret void
}

define void @.jaze_gl-14.Init() {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..string, align 8
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %0
		; SelectorExpr
	; SelectorExpr
	; Cast - cast
	store %..string zeroinitializer, %..string* %1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$119, i64 0, i32 0), i64 13}, %..string* %1
	%2 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 0
	%3 = load i8*, i8** %2, align 8
	%4 = call ccc %..rawptr @LoadLibraryA(i8* %3)
	store %..rawptr %4, %..rawptr* %0
	; DeferStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = getelementptr inbounds void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @._DrawElements, i64 0
	%7 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%8 = bitcast void (i32, i32, i32, %..rawptr)** %6 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %5, %..rawptr %8, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$11a, i64 0, i32 0), i64 14}, %Type_Info* %7)
	%9 = load %..rawptr, %..rawptr* %0, align 8
	%10 = getelementptr inbounds void (i32)*, void (i32)** @._BindVertexArray, i64 0
	%11 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%12 = bitcast void (i32)** %10 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %9, %..rawptr %12, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$11b, i64 0, i32 0), i64 17}, %Type_Info* %11)
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = getelementptr inbounds void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @._VertexAttribPointer, i64 0
	%15 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%16 = bitcast void (i32, i32, i32, i1, i32, %..rawptr)** %14 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %13, %..rawptr %16, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$11c, i64 0, i32 0), i64 21}, %Type_Info* %15)
	%17 = load %..rawptr, %..rawptr* %0, align 8
	%18 = getelementptr inbounds void (i32)*, void (i32)** @._EnableVertexAttribArray, i64 0
	%19 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%20 = bitcast void (i32)** %18 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %17, %..rawptr %20, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$11d, i64 0, i32 0), i64 25}, %Type_Info* %19)
	%21 = load %..rawptr, %..rawptr* %0, align 8
	%22 = getelementptr inbounds void (i32, i32*)*, void (i32, i32*)** @._GenVertexArrays, i64 0
	%23 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%24 = bitcast void (i32, i32*)** %22 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %21, %..rawptr %24, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$11e, i64 0, i32 0), i64 17}, %Type_Info* %23)
	%25 = load %..rawptr, %..rawptr* %0, align 8
	%26 = getelementptr inbounds void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @._BufferData, i64 0
	%27 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%28 = bitcast void (i32, i32, %..rawptr, i32)** %26 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %25, %..rawptr %28, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$11f, i64 0, i32 0), i64 12}, %Type_Info* %27)
	%29 = load %..rawptr, %..rawptr* %0, align 8
	%30 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @._BindBuffer, i64 0
	%31 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 91
	%32 = bitcast void (i32, i32)** %30 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %29, %..rawptr %32, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$120, i64 0, i32 0), i64 12}, %Type_Info* %31)
	%33 = load %..rawptr, %..rawptr* %0, align 8
	%34 = getelementptr inbounds void (i32, i32*)*, void (i32, i32*)** @._GenBuffers, i64 0
	%35 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%36 = bitcast void (i32, i32*)** %34 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %33, %..rawptr %36, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$121, i64 0, i32 0), i64 12}, %Type_Info* %35)
	%37 = load %..rawptr, %..rawptr* %0, align 8
	%38 = getelementptr inbounds void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @._DebugMessageControl, i64 0
	%39 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	%40 = bitcast void (i32, i32, i32, i32, i32*, i1)** %38 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %37, %..rawptr %40, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$122, i64 0, i32 0), i64 24}, %Type_Info* %39)
	%41 = load %..rawptr, %..rawptr* %0, align 8
	%42 = getelementptr inbounds void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @._DebugMessageCallback, i64 0
	%43 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	%44 = bitcast void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** %42 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %41, %..rawptr %44, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$123, i64 0, i32 0), i64 25}, %Type_Info* %43)
	%45 = load %..rawptr, %..rawptr* %0, align 8
	%46 = getelementptr inbounds void (i32, i32, i32*)*, void (i32, i32, i32*)** @._GetShaderiv, i64 0
	%47 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 100
	%48 = bitcast void (i32, i32, i32*)** %46 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %45, %..rawptr %48, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$124, i64 0, i32 0), i64 13}, %Type_Info* %47)
	%49 = load %..rawptr, %..rawptr* %0, align 8
	%50 = getelementptr inbounds void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)** @._GetShaderInfoLog, i64 0
	%51 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	%52 = bitcast void (i32, i32, i32*, i8*)** %50 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %49, %..rawptr %52, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$125, i64 0, i32 0), i64 18}, %Type_Info* %51)
	%53 = load %..rawptr, %..rawptr* %0, align 8
	%54 = getelementptr inbounds i8* (i32, i32)*, i8* (i32, i32)** @._GetStringi, i64 0
	%55 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%56 = bitcast i8* (i32, i32)** %54 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %53, %..rawptr %56, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$126, i64 0, i32 0), i64 12}, %Type_Info* %55)
	%57 = load %..rawptr, %..rawptr* %0, align 8
	%58 = getelementptr inbounds void (i32)*, void (i32)** @._BlendEquation, i64 0
	%59 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	%60 = bitcast void (i32)** %58 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %57, %..rawptr %60, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$127, i64 0, i32 0), i64 15}, %Type_Info* %59)
	%61 = load %..rawptr, %..rawptr* %0, align 8
	%62 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @._BlendEquationSeparate, i64 0
	%63 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%64 = bitcast void (i32, i32)** %62 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %61, %..rawptr %64, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$128, i64 0, i32 0), i64 23}, %Type_Info* %63)
	%65 = load %..rawptr, %..rawptr* %0, align 8
	%66 = getelementptr inbounds void (i32)*, void (i32)** @._CompileShader, i64 0
	%67 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%68 = bitcast void (i32)** %66 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %65, %..rawptr %68, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$129, i64 0, i32 0), i64 15}, %Type_Info* %67)
	%69 = load %..rawptr, %..rawptr* %0, align 8
	%70 = getelementptr inbounds i32 (i32)*, i32 (i32)** @._CreateShader, i64 0
	%71 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 111
	%72 = bitcast i32 (i32)** %70 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %69, %..rawptr %72, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$12a, i64 0, i32 0), i64 14}, %Type_Info* %71)
	%73 = load %..rawptr, %..rawptr* %0, align 8
	%74 = getelementptr inbounds void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @._ShaderSource, i64 0
	%75 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 112
	%76 = bitcast void (i32, i32, i8**, i32*)** %74 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %73, %..rawptr %76, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$12b, i64 0, i32 0), i64 14}, %Type_Info* %75)
	%77 = load %..rawptr, %..rawptr* %0, align 8
	%78 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @._AttachShader, i64 0
	%79 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	%80 = bitcast void (i32, i32)** %78 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %77, %..rawptr %80, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$12c, i64 0, i32 0), i64 14}, %Type_Info* %79)
	%81 = load %..rawptr, %..rawptr* %0, align 8
	%82 = getelementptr inbounds i32 ()*, i32 ()** @._CreateProgram, i64 0
	%83 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 117
	%84 = bitcast i32 ()** %82 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %81, %..rawptr %84, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$12d, i64 0, i32 0), i64 15}, %Type_Info* %83)
	%85 = load %..rawptr, %..rawptr* %0, align 8
	%86 = getelementptr inbounds void (i32)*, void (i32)** @._LinkProgram, i64 0
	%87 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%88 = bitcast void (i32)** %86 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %85, %..rawptr %88, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$12e, i64 0, i32 0), i64 13}, %Type_Info* %87)
	%89 = load %..rawptr, %..rawptr* %0, align 8
	%90 = getelementptr inbounds void (i32)*, void (i32)** @._UseProgram, i64 0
	%91 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%92 = bitcast void (i32)** %90 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %89, %..rawptr %92, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$12f, i64 0, i32 0), i64 12}, %Type_Info* %91)
	%93 = load %..rawptr, %..rawptr* %0, align 8
	%94 = getelementptr inbounds void (i32)*, void (i32)** @._ActiveTexture, i64 0
	%95 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	%96 = bitcast void (i32)** %94 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %93, %..rawptr %96, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$130, i64 0, i32 0), i64 15}, %Type_Info* %95)
	%97 = load %..rawptr, %..rawptr* %0, align 8
	%98 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @._Uniform1i, i64 0
	%99 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%100 = bitcast void (i32, i32)** %98 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %97, %..rawptr %100, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$131, i64 0, i32 0), i64 11}, %Type_Info* %99)
	%101 = load %..rawptr, %..rawptr* %0, align 8
	%102 = getelementptr inbounds void (i32, i32, i32)*, void (i32, i32, i32)** @._Uniform2i, i64 0
	%103 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 118
	%104 = bitcast void (i32, i32, i32)** %102 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %101, %..rawptr %104, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$132, i64 0, i32 0), i64 11}, %Type_Info* %103)
	%105 = load %..rawptr, %..rawptr* %0, align 8
	%106 = getelementptr inbounds void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** @._Uniform3i, i64 0
	%107 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 120
	%108 = bitcast void (i32, i32, i32, i32)** %106 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %105, %..rawptr %108, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$133, i64 0, i32 0), i64 11}, %Type_Info* %107)
	%109 = load %..rawptr, %..rawptr* %0, align 8
	%110 = getelementptr inbounds void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** @._Uniform4i, i64 0
	%111 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 122
	%112 = bitcast void (i32, i32, i32, i32, i32)** %110 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %109, %..rawptr %112, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$134, i64 0, i32 0), i64 11}, %Type_Info* %111)
	%113 = load %..rawptr, %..rawptr* %0, align 8
	%114 = getelementptr inbounds void (i32, float)*, void (i32, float)** @._Uniform1f, i64 0
	%115 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	%116 = bitcast void (i32, float)** %114 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %113, %..rawptr %116, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$135, i64 0, i32 0), i64 11}, %Type_Info* %115)
	%117 = load %..rawptr, %..rawptr* %0, align 8
	%118 = getelementptr inbounds void (i32, float, float)*, void (i32, float, float)** @._Uniform2f, i64 0
	%119 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 126
	%120 = bitcast void (i32, float, float)** %118 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %117, %..rawptr %120, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$136, i64 0, i32 0), i64 11}, %Type_Info* %119)
	%121 = load %..rawptr, %..rawptr* %0, align 8
	%122 = getelementptr inbounds void (i32, float, float, float)*, void (i32, float, float, float)** @._Uniform3f, i64 0
	%123 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 128
	%124 = bitcast void (i32, float, float, float)** %122 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %121, %..rawptr %124, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$137, i64 0, i32 0), i64 11}, %Type_Info* %123)
	%125 = load %..rawptr, %..rawptr* %0, align 8
	%126 = getelementptr inbounds void (i32, float, float, float, float)*, void (i32, float, float, float, float)** @._Uniform4f, i64 0
	%127 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%128 = bitcast void (i32, float, float, float, float)** %126 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %125, %..rawptr %128, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$138, i64 0, i32 0), i64 11}, %Type_Info* %127)
	%129 = load %..rawptr, %..rawptr* %0, align 8
	%130 = getelementptr inbounds void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)** @._UniformMatrix4fv, i64 0
	%131 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%132 = bitcast void (i32, i32, i32, float*)** %130 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %129, %..rawptr %132, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$139, i64 0, i32 0), i64 18}, %Type_Info* %131)
	%133 = load %..rawptr, %..rawptr* %0, align 8
	%134 = getelementptr inbounds i32 (i32, i8*)*, i32 (i32, i8*)** @._GetUniformLocation, i64 0
	%135 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	%136 = bitcast i32 (i32, i8*)** %134 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %133, %..rawptr %136, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$13a, i64 0, i32 0), i64 20}, %Type_Info* %135)
	%137 = load %..rawptr, %..rawptr* %0, align 8
	%138 = getelementptr inbounds i32 (i32, i8*)*, i32 (i32, i8*)** @._GetAttribLocation, i64 0
	%139 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	%140 = bitcast i32 (i32, i8*)** %138 to %..rawptr
	call void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %137, %..rawptr %140, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$13b, i64 0, i32 0), i64 19}, %Type_Info* %139)
	; defer
	; SelectorExpr
	%141 = load %..rawptr, %..rawptr* %0, align 8
	call ccc void @FreeLibrary(%..rawptr %141)
	ret void
}

define void @.jaze_gl-14.Init.set_proc_address-0(%..rawptr %h, %..rawptr %p, %..string %name, %Type_Info* %info) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %Type_Info*, align 8
	%4 = alloca i8*, align 8
	%5 = alloca void ()*, align 8
	%6 = alloca %jaze_gl-14.DebugFunctionLoadStatus, align 8
	%7 = alloca {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, align 8
	%8 = alloca [1 x %jaze_gl-14.DebugFunctionLoadStatus], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %h, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	store %Type_Info* zeroinitializer, %Type_Info** %3
		store %Type_Info* %info, %Type_Info** %3
	; txt
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%9 = load %..string, %..string* %2, align 8
	%10 = call i8* @.strings-11.new_c_string(%..string %9)
	store i8* %10, i8** %4
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %5
		; SelectorExpr
	%11 = load i8*, i8** %4, align 8
	%12 = call ccc void ()* @wglGetProcAddress(i8* %11)
	store void ()* %12, void ()** %5
	; IfStmt
	%13 = load void ()*, void ()** %5, align 8
	%14 = icmp eq void ()* %13, zeroinitializer
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%15 = load %..rawptr, %..rawptr* %0, align 8
	%16 = load i8*, i8** %4, align 8
	%17 = call ccc void ()* @GetProcAddress(%..rawptr %15, i8* %16)
	store void ()* %17, void ()** %5
	br label %if.done-2

if.done-2:
	; AssignStmt
	%18 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%19 = bitcast %..rawptr %18 to void ()**
	%20 = getelementptr inbounds void ()*, void ()** %19, i64 0
	%21 = load void ()*, void ()** %5, align 8
	store void ()* %21, void ()** %20
	; status
	store %jaze_gl-14.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-14.DebugFunctionLoadStatus* %6
		store %jaze_gl-14.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-14.DebugFunctionLoadStatus* %6
	; AssignStmt
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 0
	%23 = load %..string, %..string* %2, align 8
	store %..string %23, %..string* %22
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 1
	%25 = load void ()*, void ()** %5, align 8
	; cast - cast
	%26 = bitcast void ()* %25 to %..rawptr
	; cast - cast
	%27 = ptrtoint %..rawptr %26 to i64
	store i64 %27, i64* %24
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 3
	store i1 false, i1* %28
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 2
	%30 = load %Type_Info*, %Type_Info** %3, align 8
	store %Type_Info* %30, %Type_Info** %29
	; AssignStmt
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 2
	%32 = load i32, i32* %31, align 4
	%33 = add i32 %32, 1
	store i32 %33, i32* %31
	; IfStmt
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	%36 = icmp ne i64 %35, 0
	br i1 %36, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%37 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, i64 0, i32 3
	store i1 true, i1* %37
	; AssignStmt
	; SelectorExpr
	%38 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 3
	%39 = load i32, i32* %38, align 4
	%40 = add i32 %39, 1
	store i32 %40, i32* %38
	br label %if.done-4

if.done-4:
	; append
	; SelectorExpr
	%41 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 0
	%42 = bitcast {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %41 to %..rawptr
	; SelectorExpr
	%43 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 0
	%44 = load {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %43, align 8
	%45 = load %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %6, align 8
	; variadic call argument generation
	store {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64} zeroinitializer, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7
	store [1 x %jaze_gl-14.DebugFunctionLoadStatus] zeroinitializer, [1 x %jaze_gl-14.DebugFunctionLoadStatus]* %8
	%46 = getelementptr inbounds [1 x %jaze_gl-14.DebugFunctionLoadStatus], [1 x %jaze_gl-14.DebugFunctionLoadStatus]* %8, i64 0, i32 0
	store %jaze_gl-14.DebugFunctionLoadStatus %45, %jaze_gl-14.DebugFunctionLoadStatus* %46
	%47 = getelementptr inbounds [1 x %jaze_gl-14.DebugFunctionLoadStatus], [1 x %jaze_gl-14.DebugFunctionLoadStatus]* %8, i64 0, i32 0
	%48 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 0
	store %jaze_gl-14.DebugFunctionLoadStatus* %47, %jaze_gl-14.DebugFunctionLoadStatus** %48
	%49 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 1
	store i64 1, i64* %49
	%50 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 2
	store i64 1, i64* %50
	%51 = load {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64}* %7, align 8
	%52 = extractvalue {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64} %51, 0
	%53 = extractvalue {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64} %51, 1
	%54 = bitcast %jaze_gl-14.DebugFunctionLoadStatus* %52 to %..rawptr
	%55 = call i64 @.__dynamic_array_append(%..rawptr %42, i64 40, i64 8, %..rawptr %54, i64 %53)
	; defer
	; free
	%56 = load i8*, i8** %4, align 8
	%57 = bitcast i8* %56 to %..rawptr
	call void @.free_ptr(%..rawptr %57)
	ret void
}

define i8* @.jaze_wgl-15.to_c_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca i8*, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; c
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		; new_slice
	; SelectorExpr
	%5 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%6 = load i64, i64* %5, align 8
	%7 = add i64 %6, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$13c, i64 0, i32 0), i64 25}, i64 8, i64 28, i64 0, i64 %7, i64 %7)
	%8 = mul i64 1, %7
	%9 = call %..rawptr @.alloc_align(i64 %8, i64 1)
	%10 = bitcast %..rawptr %9 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %1
	; copy
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%16 = load %..string, %..string* %0, align 8
	; cast - cast
	%17 = extractvalue %..string %16, 0
	store i8* zeroinitializer, i8** %3
	store i8* %17, i8** %3
	%18 = extractvalue %..string %16, 1
	%19 = sub i64 %18, 0
	%20 = sub i64 %18, 0
	%21 = load i8*, i8** %3, align 8
	%22 = getelementptr inbounds i8, i8* %21, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %22, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %19, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %20, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %15, 0
	%28 = bitcast i8* %27 to %..rawptr
	%29 = extractvalue {i8*, i64, i64} %26, 0
	%30 = bitcast i8* %29 to %..rawptr
	%31 = extractvalue {i8*, i64, i64} %15, 1
	%32 = extractvalue {i8*, i64, i64} %26, 1
	%33 = icmp slt i64 %31, %32
	%34 = select i1 %33, i64 %31, i64 %32
	%35 = mul i64 %34, 1
	%36 = call %..rawptr @.__mem_copy(%..rawptr %28, %..rawptr %30, i64 %35)
	; AssignStmt
	; IndexExpr
	%37 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%38 = extractvalue {i8*, i64, i64} %37, 0
	%39 = extractvalue {i8*, i64, i64} %37, 1
	; SelectorExpr
	%40 = getelementptr inbounds %..string, %..string* %0, i64 0, i32 1
	%41 = load i64, i64* %40, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$13d, i64 0, i32 0), i64 25}, i64 10, i64 9, i64 %41, i64 %39)
	%42 = getelementptr inbounds i8, i8* %38, i64 %41
	store i8 0, i8* %42
	; ReturnStmt
	; SelectorExpr
	%43 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %1, i64 0, i32 0
	%44 = load i8*, i8** %43, align 8
	ret i8* %44
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.DRAW_TO_WINDOW_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8193, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.DOUBLE_BUFFER_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8209, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.SUPPORT_OPENGL_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8208, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.ACCELERATION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8195, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.PIXEL_TYPE_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8211, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.COLOR_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8212, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.ALPHA_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8219, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.DEPTH_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8226, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.FRAMEBUFFER_SRGB_CAPABLE_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8361, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %6
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MAJOR_VERSION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8337, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_MINOR_VERSION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8338, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_FLAGS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 8340, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define %jaze_wgl-15.Attrib @.jaze_wgl-15.CONTEXT_PROFILE_MASK_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-15.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 0
	store i32 37158, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %1, align 4
	ret %jaze_wgl-15.Attrib %5
}

define {i32*, i64, i64,%Allocator} @.jaze_wgl-15.PrepareAttribArray({%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %attribList) {
decls-0:
	%0 = alloca {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, align 8
	%1 = alloca {i32*, i64, i64,%Allocator}, align 8
	%2 = alloca %jaze_wgl-15.Attrib, align 4
	%3 = alloca i64, align 8
	%4 = alloca {i32*, i64, i64}, align 8
	%5 = alloca [1 x i32], align 4
	%6 = alloca {i32*, i64, i64}, align 8
	%7 = alloca [1 x i32], align 4
	%8 = alloca {i32*, i64, i64}, align 8
	%9 = alloca [1 x i32], align 4
	store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0
		store {%jaze_wgl-15.Attrib*, i64, i64,%Allocator} %attribList, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0
	; array
	store {i32*, i64, i64,%Allocator} zeroinitializer, {i32*, i64, i64,%Allocator}* %1
		; RangeStmt
	; attr
	store %jaze_wgl-15.Attrib zeroinitializer, %jaze_wgl-15.Attrib* %2
		%10 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0, i64 0, i32 1
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%11 = load i64, i64* %3, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %3
	%13 = load i64, i64* %10, align 8
	%14 = icmp slt i64 %12, %13
	br i1 %14, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%15 = load i64, i64* %3, align 8
	%16 = getelementptr inbounds {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-15.Attrib*, i64, i64,%Allocator}* %0, i64 0, i32 0
	%17 = load %jaze_wgl-15.Attrib*, %jaze_wgl-15.Attrib** %16, align 8
	%18 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %17, i64 %15
	%19 = load %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %18, align 4
	store %jaze_wgl-15.Attrib %19, %jaze_wgl-15.Attrib* %2
	; append
	%20 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%21 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %2, i64 0, i32 0
	%23 = load i32, i32* %22, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %4
	store [1 x i32] zeroinitializer, [1 x i32]* %5
	%24 = getelementptr inbounds [1 x i32], [1 x i32]* %5, i64 0, i32 0
	store i32 %23, i32* %24
	%25 = getelementptr inbounds [1 x i32], [1 x i32]* %5, i64 0, i32 0
	%26 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 0
	store i32* %25, i32** %26
	%27 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %27
	%28 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %28
	%29 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%30 = extractvalue {i32*, i64, i64} %29, 0
	%31 = extractvalue {i32*, i64, i64} %29, 1
	%32 = bitcast i32* %30 to %..rawptr
	%33 = call i64 @.__dynamic_array_append(%..rawptr %20, i64 4, i64 4, %..rawptr %32, i64 %31)
	; append
	%34 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%35 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_wgl-15.Attrib, %jaze_wgl-15.Attrib* %2, i64 0, i32 1
	%37 = load i32, i32* %36, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %6
	store [1 x i32] zeroinitializer, [1 x i32]* %7
	%38 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	store i32 %37, i32* %38
	%39 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	%40 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 0
	store i32* %39, i32** %40
	%41 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %41
	%42 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %42
	%43 = load {i32*, i64, i64}, {i32*, i64, i64}* %6, align 8
	%44 = extractvalue {i32*, i64, i64} %43, 0
	%45 = extractvalue {i32*, i64, i64} %43, 1
	%46 = bitcast i32* %44 to %..rawptr
	%47 = call i64 @.__dynamic_array_append(%..rawptr %34, i64 4, i64 4, %..rawptr %46, i64 %45)
	br label %for.index.loop-1

for.index.done-3:
	; append
	%48 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%49 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %8
	store [1 x i32] zeroinitializer, [1 x i32]* %9
	%50 = getelementptr inbounds [1 x i32], [1 x i32]* %9, i64 0, i32 0
	store i32 0, i32* %50
	%51 = getelementptr inbounds [1 x i32], [1 x i32]* %9, i64 0, i32 0
	%52 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 0
	store i32* %51, i32** %52
	%53 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %53
	%54 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %54
	%55 = load {i32*, i64, i64}, {i32*, i64, i64}* %8, align 8
	%56 = extractvalue {i32*, i64, i64} %55, 0
	%57 = extractvalue {i32*, i64, i64} %55, 1
	%58 = bitcast i32* %56 to %..rawptr
	%59 = call i64 @.__dynamic_array_append(%..rawptr %48, i64 4, i64 4, %..rawptr %58, i64 %57)
	; ReturnStmt
	%60 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	ret {i32*, i64, i64,%Allocator} %60
}

define void @.jaze_wgl-15.TryGetExtension(%jaze_wgl-15.TryGetExtensionList* %list, %..rawptr %p, %..string %name) {
decls-0:
	%0 = alloca %jaze_wgl-15.TryGetExtensionList*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %__Map_Header, align 8
	%4 = alloca %__Map_Key, align 8
	store %jaze_wgl-15.TryGetExtensionList* zeroinitializer, %jaze_wgl-15.TryGetExtensionList** %0
		store %jaze_wgl-15.TryGetExtensionList* %list, %jaze_wgl-15.TryGetExtensionList** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%5 = load %jaze_wgl-15.TryGetExtensionList*, %jaze_wgl-15.TryGetExtensionList** %0, align 8
	%6 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %5, i64 0
	%7 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %6, i64 0, i32 0
	%8 = load %..string, %..string* %2, align 8
	%9 = load %..rawptr, %..rawptr* %1, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %3
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 0
	%11 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %7 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %11, %Raw_Dynamic_Map** %10
	%12 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 1
	store i1 true, i1* %12
	%13 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 2
	store i64 40, i64* %13
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 3
	store i64 8, i64* %14
	%15 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 4
	store i64 32, i64* %15
	%16 = load %__Map_Header, %__Map_Header* %3, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %4
	%17 = call i64 @.__default_hash_string(%..string %8)
	%18 = getelementptr inbounds %__Map_Key, %__Map_Key* %4, i64 0, i32 0
	store i64 %17, i64* %18
	%19 = getelementptr inbounds %__Map_Key, %__Map_Key* %4, i64 0, i32 1
	store %..string %8, %..string* %19
	%20 = load %__Map_Key, %__Map_Key* %4, align 8
	%21 = bitcast %..rawptr* %1 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %16, %__Map_Key %20, %..rawptr %21)
	ret void
}

define void @.jaze_wgl-15.LoadExtensions(%..rawptr %GLContext, %..rawptr %WindowDC, %jaze_wgl-15.TryGetExtensionList %list) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %jaze_wgl-15.TryGetExtensionList, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca %..string, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %GLContext, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %WindowDC, %..rawptr* %1
	store %jaze_wgl-15.TryGetExtensionList zeroinitializer, %jaze_wgl-15.TryGetExtensionList* %2
		store %jaze_wgl-15.TryGetExtensionList %list, %jaze_wgl-15.TryGetExtensionList* %2
	; IfStmt
	; SelectorExpr
	%7 = load %..rawptr, %..rawptr* %1, align 8
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = call ccc i32 @wglMakeCurrent(%..rawptr %7, %..rawptr %8)
	%10 = icmp eq i32 %9, 1
	br i1 %10, label %if.then-1, label %if.done-5

if.then-1:
	; DeferStmt
	; RangeStmt
	; val
	store %..rawptr zeroinitializer, %..rawptr* %3
		; key
	store %..string zeroinitializer, %..string* %4
		; SelectorExpr
	%11 = getelementptr inbounds %jaze_wgl-15.TryGetExtensionList, %jaze_wgl-15.TryGetExtensionList* %2, i64 0, i32 0
	%12 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %11, i64 0, i32 1
	%13 = getelementptr inbounds {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}* %12, i64 0, i32 1
	store %..string zeroinitializer, %..string* %5
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-2

for.index.loop-2:
	%14 = load i64, i64* %6, align 8
	%15 = add i64 %14, 1
	store i64 %15, i64* %6
	%16 = load i64, i64* %13, align 8
	%17 = icmp slt i64 %15, %16
	br i1 %17, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%18 = load i64, i64* %6, align 8
	%19 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %11, i64 0, i32 1
	%20 = getelementptr inbounds {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}* %19, i64 0, i32 0
	%21 = load {%__Map_Key, i64, %..rawptr}*, {%__Map_Key, i64, %..rawptr}** %20, align 8
	%22 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %21, i64 %18
	%23 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %22, i64 0, i32 2
	%24 = load %..rawptr, %..rawptr* %23, align 8
	%25 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %22, i64 0, i32 0
	%26 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	%27 = load %..string, %..string* %26, align 8
	store %..string %27, %..string* %5
	%28 = load %..string, %..string* %5, align 8
	store %..rawptr %24, %..rawptr* %3
	store %..string %28, %..string* %4
	%29 = load %..rawptr, %..rawptr* %3, align 8
	%30 = load %..string, %..string* %4, align 8
	call void @.jaze_wgl-15.LoadExtensions.set_proc_address-0(%..rawptr %29, %..string %30)
	br label %for.index.loop-2

for.index.done-4:
	; defer
	; SelectorExpr
	%31 = call ccc i32 @wglMakeCurrent(%..rawptr zeroinitializer, %..rawptr zeroinitializer)
	br label %if.done-5

if.done-5:
	ret void
}

define void @.jaze_wgl-15.LoadExtensions.set_proc_address-0(%..rawptr %p, %..string %name) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca void ()*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %p, %..rawptr* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; txt
	store i8* zeroinitializer, i8** %2
		%4 = load %..string, %..string* %1, align 8
	%5 = call i8* @.jaze_wgl-15.to_c_string(%..string %4)
	store i8* %5, i8** %2
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %3
		; SelectorExpr
	%6 = load i8*, i8** %2, align 8
	%7 = call ccc void ()* @wglGetProcAddress(i8* %6)
	store void ()* %7, void ()** %3
	; assert
	%8 = load void ()*, void ()** %3, align 8
	%9 = icmp ne void ()* %8, zeroinitializer
	%10 = icmp eq i1 %9, false
	br i1 %10, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$13e, i64 0, i32 0), i64 25}, i64 162, i64 20, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$13f, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; AssignStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%12 = bitcast %..rawptr %11 to void ()**
	%13 = getelementptr inbounds void ()*, void ()** %12, i64 0
	%14 = load void ()*, void ()** %3, align 8
	store void ()* %14, void ()** %13
	; defer
	; free
	%15 = load i8*, i8** %2, align 8
	%16 = bitcast i8* %15 to %..rawptr
	call void @.free_ptr(%..rawptr %16)
	ret void
}

define void @.jaze_wgl-15.GetInfo(%jaze_gl-14.OpenGLVars_t* %vars, %..rawptr %dc) {
decls-0:
	%0 = alloca %jaze_gl-14.OpenGLVars_t*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i64, align 8
	%4 = alloca i32, align 4
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca %..string, align 8
	%9 = alloca %..string, align 8
	%10 = alloca {%..string*, i64, i64}, align 8
	%11 = alloca [1 x %..string], align 8
	store %jaze_gl-14.OpenGLVars_t* zeroinitializer, %jaze_gl-14.OpenGLVars_t** %0
		store %jaze_gl-14.OpenGLVars_t* %vars, %jaze_gl-14.OpenGLVars_t** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %dc, %..rawptr* %1
	; wglExts
	store %..string zeroinitializer, %..string* %2
		; SelectorExpr
	%12 = load i8* (%..rawptr)*, i8* (%..rawptr)** @.GetExtensionsStringARB, align 8
	%13 = load %..rawptr, %..rawptr* %1, align 8
	%14 = call ccc i8* %12(%..rawptr %13)
	%15 = call %..string @.strings-11.to_odin_string(i8* %14)
	store %..string %15, %..string* %2
	; s
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; RangeStmt
	; r
	store i32 zeroinitializer, i32* %4
		; i
	store i64 zeroinitializer, i64* %5
		%16 = load %..string, %..string* %2, align 8
	%17 = extractvalue %..string %16, 1
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 0, i64* %6
	br label %for.string.loop-1

for.string.loop-1:
	%18 = load i64, i64* %7, align 8
	%19 = icmp slt i64 %18, %17
	br i1 %19, label %for.string.body-2, label %for.string.done-5

for.string.body-2:
	%20 = extractvalue %..string %16, 0
	%21 = getelementptr inbounds i8, i8* %20, i64 %18
	%22 = sub i64 %17, %18
	store %..string zeroinitializer, %..string* %8
	%23 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	%24 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 1
	store i8* %21, i8** %23
	store i64 %22, i64* %24
	%25 = load %..string, %..string* %8, align 8
	%26 = call {i32, i64} @.__string_decode_rune(%..string %25)
	%27 = extractvalue {i32, i64} %26, 1
	%28 = add i64 %18, %27
	store i64 %28, i64* %7
	%29 = load i64, i64* %6, align 8
	%30 = extractvalue {i32, i64} %26, 0
	%31 = load i64, i64* %6, align 8
	%32 = add i64 %31, 1
	store i64 %32, i64* %6
	store i32 %30, i32* %4
	store i64 %29, i64* %5
	; IfStmt
	%33 = load i32, i32* %4, align 4
	%34 = icmp eq i32 %33, 32
	br i1 %34, label %if.then-3, label %if.done-4

if.then-3:
	; append
	; SelectorExpr
	%35 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%36 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %35, i64 0
	%37 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %36, i64 0, i32 1
	%38 = bitcast {%..string*, i64, i64,%Allocator}* %37 to %..rawptr
	; SelectorExpr
	%39 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%40 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %39, i64 0
	%41 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %40, i64 0, i32 1
	%42 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %41, align 8
	; SliceExpr
	%43 = load i64, i64* %3, align 8
	%44 = load i64, i64* %5, align 8
	%45 = load %..string, %..string* %2, align 8
	%46 = extractvalue %..string %45, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$140, i64 0, i32 0), i64 25}, i64 177, i64 47, i64 %43, i64 %44)
	%47 = extractvalue %..string %45, 0
	%48 = getelementptr inbounds i8, i8* %47, i64 %43
	%49 = sub i64 %44, %43
	store %..string zeroinitializer, %..string* %9
	%50 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %48, i8** %50
	%51 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %49, i64* %51
	%52 = load %..string, %..string* %9, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %10
	store [1 x %..string] zeroinitializer, [1 x %..string]* %11
	%53 = getelementptr inbounds [1 x %..string], [1 x %..string]* %11, i64 0, i32 0
	store %..string %52, %..string* %53
	%54 = getelementptr inbounds [1 x %..string], [1 x %..string]* %11, i64 0, i32 0
	%55 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %10, i64 0, i32 0
	store %..string* %54, %..string** %55
	%56 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %10, i64 0, i32 1
	store i64 1, i64* %56
	%57 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %10, i64 0, i32 2
	store i64 1, i64* %57
	%58 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %10, align 8
	%59 = extractvalue {%..string*, i64, i64} %58, 0
	%60 = extractvalue {%..string*, i64, i64} %58, 1
	%61 = bitcast %..string* %59 to %..rawptr
	%62 = call i64 @.__dynamic_array_append(%..rawptr %38, i64 16, i64 8, %..rawptr %61, i64 %60)
	; AssignStmt
	; SelectorExpr
	%63 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%64 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %63, i64 0
	%65 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %64, i64 0, i32 13
	%66 = load i32, i32* %65, align 4
	%67 = add i32 %66, 1
	store i32 %67, i32* %65
	; AssignStmt
	%68 = load i64, i64* %5, align 8
	%69 = add i64 %68, 1
	store i64 %69, i64* %3
	br label %if.done-4

if.done-4:
	br label %for.string.loop-1

for.string.done-5:
	ret void
}

define void @.jaze_debug_windows-16.OpenGLExtensions(%..string %name, {%..string*, i64, i64,%Allocator} %extensions, i1* %show) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..string*, i64, i64,%Allocator}, align 8
	%2 = alloca i1*, align 8
	%3 = alloca %..string, align 8
	%4 = alloca i64, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	store {%..string*, i64, i64,%Allocator} zeroinitializer, {%..string*, i64, i64,%Allocator}* %1
		store {%..string*, i64, i64,%Allocator} %extensions, {%..string*, i64, i64,%Allocator}* %1
	store i1* zeroinitializer, i1** %2
		store i1* %show, i1** %2
	; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = load i1*, i1** %2, align 8
	%8 = call i1 @.imgui-10.Begin(%..string %6, i1* %7, i32 160)
	; RangeStmt
	; ext
	store %..string zeroinitializer, %..string* %3
		%9 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %1, i64 0, i32 1
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%10 = load i64, i64* %4, align 8
	%11 = add i64 %10, 1
	store i64 %11, i64* %4
	%12 = load i64, i64* %9, align 8
	%13 = icmp slt i64 %11, %12
	br i1 %13, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%14 = load i64, i64* %4, align 8
	%15 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %1, i64 0, i32 0
	%16 = load %..string*, %..string** %15, align 8
	%17 = getelementptr inbounds %..string, %..string* %16, i64 %14
	%18 = load %..string, %..string* %17, align 8
	store %..string %18, %..string* %3
	; SelectorExpr
	%19 = load %..string, %..string* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	%20 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-10.Text(%..string %19, {%..any*, i64, i64} %20)
	br label %for.index.loop-1

for.index.done-3:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.OpenGLTextureOverview(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	%3 = alloca %..any, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %__Map_Header, align 8
	%7 = alloca %__Map_Key, align 8
	%8 = alloca i1, align 1
	%9 = alloca {i1, i1}, align 1
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i1, i1}, align 1
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca %__Map_Header, align 8
	%17 = alloca %__Map_Key, align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%18 = load i1*, i1** %0, align 8
	%19 = call i1 @.imgui-10.Begin(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$141, i64 0, i32 0), i64 15}, i1* %18, i32 160)
	; RangeStmt
	; id
	store i32 zeroinitializer, i32* %1
		; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 1
	%21 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %20, i64 0, i32 1
	store i64 zeroinitializer, i64* %2
	store i64 -1, i64* %2
	br label %for.index.loop-1

for.index.loop-1:
	%22 = load i64, i64* %2, align 8
	%23 = add i64 %22, 1
	store i64 %23, i64* %2
	%24 = load i64, i64* %21, align 8
	%25 = icmp slt i64 %23, %24
	br i1 %25, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%26 = load i64, i64* %2, align 8
	%27 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %20, i64 0, i32 0
	%28 = load i32*, i32** %27, align 8
	%29 = getelementptr inbounds i32, i32* %28, i64 %26
	%30 = load i32, i32* %29, align 4
	store i32 %30, i32* %1
	; SelectorExpr
	%31 = load i32, i32* %1, align 4
	; cast - cast
	%32 = bitcast i32 %31 to i32
	call ccc void @igPushIdInt(i32 %32)
	; SelectorExpr
	%33 = load i32, i32* %1, align 4
	store %..any zeroinitializer, %..any* %3
	%34 = bitcast i32* %1 to %..rawptr
	%35 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 137
	%36 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%39 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %38, %..any* %39
	%40 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %40, %..any** %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %42
	%43 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %43
	%44 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$142, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %44)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%45 = call i1 @.imgui-10.Button(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$143, i64 0, i32 0), i64 4}, %imgui-10.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %45, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	%46 = load i32, i32* %1, align 4
	store i32 %46, i32* @.CurrentViewTexture
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %6
	%47 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 0
	%48 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %48, %Raw_Dynamic_Map** %47
	%49 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 1
	store i1 true, i1* %49
	%50 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 2
	store i64 40, i64* %50
	%51 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 3
	store i64 8, i64* %51
	%52 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 4
	store i64 32, i64* %52
	%53 = load %__Map_Header, %__Map_Header* %6, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %7
	%54 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 0
	store i64 -2244582010140912990, i64* %54
	%55 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$144, i64 0, i32 0), i64 13}, %..string* %55
	%56 = load %__Map_Key, %__Map_Key* %7, align 8
	store i1 zeroinitializer, i1* %8
	store i1 true, i1* %8
	%57 = bitcast i1* %8 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %53, %__Map_Key %56, %..rawptr %57)
	br label %if.done-4

if.done-4:
	; SelectorExpr
	call ccc void @igPopId()
	br label %for.index.loop-1

for.index.done-5:
	; SelectorExpr
	call ccc void @igEnd()
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %9
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%58 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%59 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %59, %Raw_Dynamic_Map** %58
	%60 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %60
	%61 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %61
	%62 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %62
	%63 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %63
	%64 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%65 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 -2244582010140912990, i64* %65
	%66 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$145, i64 0, i32 0), i64 13}, %..string* %66
	%67 = load %__Map_Key, %__Map_Key* %11, align 8
	%68 = call %..rawptr @.__dynamic_map_get(%__Map_Header %64, %__Map_Key %67)
	%69 = icmp ne %..rawptr %68, null
	%70 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 1
	store i1 %69, i1* %70
	br i1 %69, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%71 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 0
	%72 = bitcast %..rawptr %68 to i1*
	%73 = load i1, i1* %72, align 1
	store i1 %73, i1* %71
	br label %map.get.done-7

map.get.done-7:
	%74 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 0
	%75 = load i1, i1* %74, align 1
	%76 = icmp eq i1 %75, true
	br i1 %76, label %if.then-8, label %if.done-11

if.then-8:
	; b
	store i1 zeroinitializer, i1* %12
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %13
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%77 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%78 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %78, %Raw_Dynamic_Map** %77
	%79 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %79
	%80 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %80
	%81 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %81
	%82 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %82
	%83 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%84 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 -2244582010140912990, i64* %84
	%85 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$146, i64 0, i32 0), i64 13}, %..string* %85
	%86 = load %__Map_Key, %__Map_Key* %15, align 8
	%87 = call %..rawptr @.__dynamic_map_get(%__Map_Header %83, %__Map_Key %86)
	%88 = icmp ne %..rawptr %87, null
	%89 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 1
	store i1 %88, i1* %89
	br i1 %88, label %map.get.then-9, label %map.get.done-10

map.get.then-9:
	%90 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%91 = bitcast %..rawptr %87 to i1*
	%92 = load i1, i1* %91, align 1
	store i1 %92, i1* %90
	br label %map.get.done-10

map.get.done-10:
	%93 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%94 = load i1, i1* %93, align 1
	store i1 %94, i1* %12
	%95 = load i32, i32* @.CurrentViewTexture, align 4
	%96 = getelementptr inbounds i1, i1* %12, i64 0
	call void @.jaze_debug_windows-16.OpenGLTextureView(i32 %95, i1* %96)
	; AssignStmt
	; IndexExpr
	%97 = load i1, i1* %12, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	%98 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 0
	%99 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %99, %Raw_Dynamic_Map** %98
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 1
	store i1 true, i1* %100
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 2
	store i64 40, i64* %101
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 3
	store i64 8, i64* %102
	%103 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 4
	store i64 32, i64* %103
	%104 = load %__Map_Header, %__Map_Header* %16, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %17
	%105 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 0
	store i64 -2244582010140912990, i64* %105
	%106 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$147, i64 0, i32 0), i64 13}, %..string* %106
	%107 = load %__Map_Key, %__Map_Key* %17, align 8
	%108 = bitcast i1* %12 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %104, %__Map_Key %107, %..rawptr %108)
	br label %if.done-11

if.done-11:
	ret void
}

define void @.jaze_debug_windows-16.OpenGLTextureView(i32 %textureId, i1* %show) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i1*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %textureId, i32* %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%2 = load i1*, i1** %1, align 8
	%3 = call i1 @.imgui-10.Begin(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$148, i64 0, i32 0), i64 12}, i1* %2, i32 160)
	; SelectorExpr
	call void @.imgui-10.Image(%..rawptr inttoptr (i64 1 to %..rawptr), %imgui-10.Vec2 {float 0x4059000000000000, float 0x4059000000000000}, %imgui-10.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, %imgui-10.Vec2 {float 0x3ff0000000000000, float 0x3ff0000000000000}, %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000}, %imgui-10.Vec4 {float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000})
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.OpenGLInfo(%jaze_gl-14.OpenGLVars_t* %vars, i1* %show) {
decls-0:
	%0 = alloca %jaze_gl-14.OpenGLVars_t*, align 8
	%1 = alloca i1*, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca %..any, align 8
	%4 = alloca %..any, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	%6 = alloca [2 x %..any], align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [2 x %..any], align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [1 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca {%..any*, i64, i64}, align 8
	%16 = alloca [1 x %..any], align 8
	%17 = alloca %..any, align 8
	%18 = alloca {%..any*, i64, i64}, align 8
	%19 = alloca [1 x %..any], align 8
	%20 = alloca %..any, align 8
	%21 = alloca {%..any*, i64, i64}, align 8
	%22 = alloca [1 x %..any], align 8
	%23 = alloca %..any, align 8
	%24 = alloca {%..any*, i64, i64}, align 8
	%25 = alloca [1 x %..any], align 8
	%26 = alloca %__Map_Header, align 8
	%27 = alloca %__Map_Key, align 8
	%28 = alloca i1, align 1
	%29 = alloca %..any, align 8
	%30 = alloca {%..any*, i64, i64}, align 8
	%31 = alloca [1 x %..any], align 8
	%32 = alloca %__Map_Header, align 8
	%33 = alloca %__Map_Key, align 8
	%34 = alloca i1, align 1
	%35 = alloca %..any, align 8
	%36 = alloca %..any, align 8
	%37 = alloca {%..any*, i64, i64}, align 8
	%38 = alloca [2 x %..any], align 8
	%39 = alloca %..string, align 8
	%40 = alloca %jaze_gl-14.DebugFunctionLoadStatus, align 8
	%41 = alloca i64, align 8
	%42 = alloca {%..any*, i64, i64}, align 8
	%43 = alloca %..any, align 8
	%44 = alloca %..any, align 8
	%45 = alloca {%..any*, i64, i64}, align 8
	%46 = alloca [2 x %..any], align 8
	%47 = alloca %Type_Info.Procedure*, align 8
	%48 = alloca i1, align 1
	%49 = alloca {%Type_Info.Procedure*, i1}, align 8
	%50 = alloca %Type_Info.Tuple*, align 8
	%51 = alloca i1, align 1
	%52 = alloca {%Type_Info.Tuple*, i1}, align 8
	%53 = alloca %..any, align 8
	%54 = alloca {%..any*, i64, i64}, align 8
	%55 = alloca [1 x %..any], align 8
	%56 = alloca %..any, align 8
	%57 = alloca {%..any*, i64, i64}, align 8
	%58 = alloca [1 x %..any], align 8
	%59 = alloca %..any, align 8
	%60 = alloca {%..any*, i64, i64}, align 8
	%61 = alloca [1 x %..any], align 8
	%62 = alloca %..string, align 8
	%63 = alloca i64, align 8
	%64 = alloca i64, align 8
	%65 = alloca {%..any*, i64, i64}, align 8
	%66 = alloca %..any, align 8
	%67 = alloca {%..any*, i64, i64}, align 8
	%68 = alloca [1 x %..any], align 8
	%69 = alloca %..any, align 8
	%70 = alloca {%..any*, i64, i64}, align 8
	%71 = alloca [1 x %..any], align 8
	%72 = alloca %__Map_Header, align 8
	%73 = alloca %__Map_Key, align 8
	%74 = alloca i1, align 1
	%75 = alloca {i1, i1}, align 1
	%76 = alloca %__Map_Header, align 8
	%77 = alloca %__Map_Key, align 8
	%78 = alloca i1, align 1
	%79 = alloca {i1, i1}, align 1
	%80 = alloca %__Map_Header, align 8
	%81 = alloca %__Map_Key, align 8
	%82 = alloca %__Map_Header, align 8
	%83 = alloca %__Map_Key, align 8
	%84 = alloca {i1, i1}, align 1
	%85 = alloca %__Map_Header, align 8
	%86 = alloca %__Map_Key, align 8
	%87 = alloca i1, align 1
	%88 = alloca {i1, i1}, align 1
	%89 = alloca %__Map_Header, align 8
	%90 = alloca %__Map_Key, align 8
	%91 = alloca %__Map_Header, align 8
	%92 = alloca %__Map_Key, align 8
	%93 = alloca {i1, i1}, align 1
	%94 = alloca %__Map_Header, align 8
	%95 = alloca %__Map_Key, align 8
	%96 = alloca i1, align 1
	%97 = alloca {i1, i1}, align 1
	%98 = alloca %__Map_Header, align 8
	%99 = alloca %__Map_Key, align 8
	%100 = alloca %__Map_Header, align 8
	%101 = alloca %__Map_Key, align 8
	store %jaze_gl-14.OpenGLVars_t* zeroinitializer, %jaze_gl-14.OpenGLVars_t** %0
		store %jaze_gl-14.OpenGLVars_t* %vars, %jaze_gl-14.OpenGLVars_t** %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%102 = load i1*, i1** %1, align 8
	%103 = call i1 @.imgui-10.Begin(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$149, i64 0, i32 0), i64 11}, i1* %102, i32 160)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	%104 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$14a, i64 0, i32 0), i64 9}, {%..any*, i64, i64} %104)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	%105 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%106 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %105, i64 0
	%107 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %106, i64 0, i32 7
	%108 = load i32, i32* %107, align 4
	; SelectorExpr
	%109 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%110 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %109, i64 0
	%111 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %110, i64 0, i32 9
	%112 = load i32, i32* %111, align 4
	store %..any zeroinitializer, %..any* %3
	%113 = bitcast i32* %107 to %..rawptr
	%114 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%115 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%116 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %114, %Type_Info** %115
	store %..rawptr %113, %..rawptr* %116
	%117 = load %..any, %..any* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%118 = bitcast i32* %111 to %..rawptr
	%119 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%120 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%121 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %119, %Type_Info** %120
	store %..rawptr %118, %..rawptr* %121
	%122 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	store [2 x %..any] zeroinitializer, [2 x %..any]* %6
	%123 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	store %..any %117, %..any* %123
	%124 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 1
	store %..any %122, %..any* %124
	%125 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	%126 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 0
	store %..any* %125, %..any** %126
	%127 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 1
	store i64 2, i64* %127
	%128 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 2
	store i64 2, i64* %128
	%129 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$14b, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %129)
	; SelectorExpr
	; SelectorExpr
	%130 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%131 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %130, i64 0
	%132 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %131, i64 0, i32 8
	%133 = load i32, i32* %132, align 4
	; SelectorExpr
	%134 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%135 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %134, i64 0
	%136 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %135, i64 0, i32 8
	%137 = load i32, i32* %136, align 4
	store %..any zeroinitializer, %..any* %7
	%138 = bitcast i32* %132 to %..rawptr
	%139 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%140 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%141 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %139, %Type_Info** %140
	store %..rawptr %138, %..rawptr* %141
	%142 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%143 = bitcast i32* %136 to %..rawptr
	%144 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%145 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%146 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %144, %Type_Info** %145
	store %..rawptr %143, %..rawptr* %146
	%147 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [2 x %..any] zeroinitializer, [2 x %..any]* %10
	%148 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	store %..any %142, %..any* %148
	%149 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 1
	store %..any %147, %..any* %149
	%150 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	%151 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %150, %..any** %151
	%152 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 2, i64* %152
	%153 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 2, i64* %153
	%154 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$14c, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %154)
	; SelectorExpr
	; SelectorExpr
	%155 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%156 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %155, i64 0
	%157 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %156, i64 0, i32 3
	%158 = load %..string, %..string* %157, align 8
	store %..any zeroinitializer, %..any* %11
	%159 = bitcast %..string* %157 to %..rawptr
	%160 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%161 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%162 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %160, %Type_Info** %161
	store %..rawptr %159, %..rawptr* %162
	%163 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [1 x %..any] zeroinitializer, [1 x %..any]* %13
	%164 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	store %..any %163, %..any* %164
	%165 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	%166 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %165, %..any** %166
	%167 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 1, i64* %167
	%168 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 1, i64* %168
	%169 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$14d, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %169)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; SelectorExpr
	%170 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%171 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %170, i64 0
	%172 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %171, i64 0, i32 4
	%173 = load %..string, %..string* %172, align 8
	store %..any zeroinitializer, %..any* %14
	%174 = bitcast %..string* %172 to %..rawptr
	%175 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%176 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%177 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %175, %Type_Info** %176
	store %..rawptr %174, %..rawptr* %177
	%178 = load %..any, %..any* %14, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %15
	store [1 x %..any] zeroinitializer, [1 x %..any]* %16
	%179 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	store %..any %178, %..any* %179
	%180 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	%181 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 0
	store %..any* %180, %..any** %181
	%182 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 1
	store i64 1, i64* %182
	%183 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 2
	store i64 1, i64* %183
	%184 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %15, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$14e, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %184)
	; SelectorExpr
	; SelectorExpr
	%185 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%186 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %185, i64 0
	%187 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %186, i64 0, i32 5
	%188 = load %..string, %..string* %187, align 8
	store %..any zeroinitializer, %..any* %17
	%189 = bitcast %..string* %187 to %..rawptr
	%190 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%191 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%192 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %190, %Type_Info** %191
	store %..rawptr %189, %..rawptr* %192
	%193 = load %..any, %..any* %17, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %18
	store [1 x %..any] zeroinitializer, [1 x %..any]* %19
	%194 = getelementptr inbounds [1 x %..any], [1 x %..any]* %19, i64 0, i32 0
	store %..any %193, %..any* %194
	%195 = getelementptr inbounds [1 x %..any], [1 x %..any]* %19, i64 0, i32 0
	%196 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 0
	store %..any* %195, %..any** %196
	%197 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 1
	store i64 1, i64* %197
	%198 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 2
	store i64 1, i64* %198
	%199 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %18, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$14f, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %199)
	; SelectorExpr
	; SelectorExpr
	%200 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%201 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %200, i64 0
	%202 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %201, i64 0, i32 11
	%203 = load i32, i32* %202, align 4
	store %..any zeroinitializer, %..any* %20
	%204 = bitcast i32* %202 to %..rawptr
	%205 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%206 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%207 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %205, %Type_Info** %206
	store %..rawptr %204, %..rawptr* %207
	%208 = load %..any, %..any* %20, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %21
	store [1 x %..any] zeroinitializer, [1 x %..any]* %22
	%209 = getelementptr inbounds [1 x %..any], [1 x %..any]* %22, i64 0, i32 0
	store %..any %208, %..any* %209
	%210 = getelementptr inbounds [1 x %..any], [1 x %..any]* %22, i64 0, i32 0
	%211 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 0
	store %..any* %210, %..any** %211
	%212 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 1
	store i64 1, i64* %212
	%213 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 2
	store i64 1, i64* %213
	%214 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %21, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$150, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %214)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; SelectorExpr
	%215 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%216 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %215, i64 0
	%217 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %216, i64 0, i32 12
	%218 = load i32, i32* %217, align 4
	store %..any zeroinitializer, %..any* %23
	%219 = bitcast i32* %217 to %..rawptr
	%220 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%221 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 0
	%222 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 1
	store %Type_Info* %220, %Type_Info** %221
	store %..rawptr %219, %..rawptr* %222
	%223 = load %..any, %..any* %23, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %24
	store [1 x %..any] zeroinitializer, [1 x %..any]* %25
	%224 = getelementptr inbounds [1 x %..any], [1 x %..any]* %25, i64 0, i32 0
	store %..any %223, %..any* %224
	%225 = getelementptr inbounds [1 x %..any], [1 x %..any]* %25, i64 0, i32 0
	%226 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 0
	store %..any* %225, %..any** %226
	%227 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 1
	store i64 1, i64* %227
	%228 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 2
	store i64 1, i64* %228
	%229 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %24, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$151, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %229)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%230 = call i1 @.imgui-10.Button(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$152, i64 0, i32 0), i64 9}, %imgui-10.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %230, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %26
	%231 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 0
	%232 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %232, %Raw_Dynamic_Map** %231
	%233 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 1
	store i1 true, i1* %233
	%234 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 2
	store i64 40, i64* %234
	%235 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 3
	store i64 8, i64* %235
	%236 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 4
	store i64 32, i64* %236
	%237 = load %__Map_Header, %__Map_Header* %26, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %27
	%238 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 0
	store i64 9087275691730913177, i64* %238
	%239 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$153, i64 0, i32 0), i64 20}, %..string* %239
	%240 = load %__Map_Key, %__Map_Key* %27, align 8
	store i1 zeroinitializer, i1* %28
	store i1 true, i1* %28
	%241 = bitcast i1* %28 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %237, %__Map_Key %240, %..rawptr %241)
	br label %if.done-2

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%242 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%243 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %242, i64 0
	%244 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %243, i64 0, i32 13
	%245 = load i32, i32* %244, align 4
	store %..any zeroinitializer, %..any* %29
	%246 = bitcast i32* %244 to %..rawptr
	%247 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%248 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 0
	%249 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 1
	store %Type_Info* %247, %Type_Info** %248
	store %..rawptr %246, %..rawptr* %249
	%250 = load %..any, %..any* %29, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %30
	store [1 x %..any] zeroinitializer, [1 x %..any]* %31
	%251 = getelementptr inbounds [1 x %..any], [1 x %..any]* %31, i64 0, i32 0
	store %..any %250, %..any* %251
	%252 = getelementptr inbounds [1 x %..any], [1 x %..any]* %31, i64 0, i32 0
	%253 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %30, i64 0, i32 0
	store %..any* %252, %..any** %253
	%254 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %30, i64 0, i32 1
	store i64 1, i64* %254
	%255 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %30, i64 0, i32 2
	store i64 1, i64* %255
	%256 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %30, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$154, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %256)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%257 = call i1 @.imgui-10.Button(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$155, i64 0, i32 0), i64 9}, %imgui-10.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %257, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %32
	%258 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 0
	%259 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %259, %Raw_Dynamic_Map** %258
	%260 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 1
	store i1 true, i1* %260
	%261 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 2
	store i64 40, i64* %261
	%262 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 3
	store i64 8, i64* %262
	%263 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 4
	store i64 32, i64* %263
	%264 = load %__Map_Header, %__Map_Header* %32, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %33
	%265 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 0
	store i64 1665422548027325, i64* %265
	%266 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$156, i64 0, i32 0), i64 23}, %..string* %266
	%267 = load %__Map_Key, %__Map_Key* %33, align 8
	store i1 zeroinitializer, i1* %34
	store i1 true, i1* %34
	%268 = bitcast i1* %34 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %264, %__Map_Key %267, %..rawptr %268)
	br label %if.done-4

if.done-4:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%269 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 3
	%270 = load i32, i32* %269, align 4
	; SelectorExpr
	; SelectorExpr
	%271 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 2
	%272 = load i32, i32* %271, align 4
	store %..any zeroinitializer, %..any* %35
	%273 = bitcast i32* %269 to %..rawptr
	%274 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%275 = getelementptr inbounds %..any, %..any* %35, i64 0, i32 0
	%276 = getelementptr inbounds %..any, %..any* %35, i64 0, i32 1
	store %Type_Info* %274, %Type_Info** %275
	store %..rawptr %273, %..rawptr* %276
	%277 = load %..any, %..any* %35, align 8
	store %..any zeroinitializer, %..any* %36
	%278 = bitcast i32* %271 to %..rawptr
	%279 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%280 = getelementptr inbounds %..any, %..any* %36, i64 0, i32 0
	%281 = getelementptr inbounds %..any, %..any* %36, i64 0, i32 1
	store %Type_Info* %279, %Type_Info** %280
	store %..rawptr %278, %..rawptr* %281
	%282 = load %..any, %..any* %36, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %37
	store [2 x %..any] zeroinitializer, [2 x %..any]* %38
	%283 = getelementptr inbounds [2 x %..any], [2 x %..any]* %38, i64 0, i32 0
	store %..any %277, %..any* %283
	%284 = getelementptr inbounds [2 x %..any], [2 x %..any]* %38, i64 0, i32 1
	store %..any %282, %..any* %284
	%285 = getelementptr inbounds [2 x %..any], [2 x %..any]* %38, i64 0, i32 0
	%286 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %37, i64 0, i32 0
	store %..any* %285, %..any** %286
	%287 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %37, i64 0, i32 1
	store i64 2, i64* %287
	%288 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %37, i64 0, i32 2
	store i64 2, i64* %288
	%289 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %37, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.__str$157, i64 0, i32 0), i64 33}, {%..any*, i64, i64} %289)
	; SelectorExpr
	call ccc void @igSeparator()
	; IfStmt
	; SelectorExpr
	%290 = call i1 @.imgui-10.CollapsingHeader(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$158, i64 0, i32 0), i64 16}, i32 0)
	br i1 %290, label %if.then-5, label %if.done-21

if.then-5:
	; SelectorExpr
	%291 = call i1 @.imgui-10.BeginChild(%..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$159, i64 0, i32 0), i64 20}, %imgui-10.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, i1 true, i32 0)
	; SelectorExpr
	call ccc void @igColumns(i32 2, i8* zeroinitializer, i1 false)
	; suc
	store %..string zeroinitializer, %..string* %39
		; RangeStmt
	; status
	store %jaze_gl-14.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-14.DebugFunctionLoadStatus* %40
		; SelectorExpr
	; SelectorExpr
	%292 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 0
	%293 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %292, i64 0, i32 1
	store i64 zeroinitializer, i64* %41
	store i64 -1, i64* %41
	br label %for.index.loop-6

for.index.loop-6:
	%294 = load i64, i64* %41, align 8
	%295 = add i64 %294, 1
	store i64 %295, i64* %41
	%296 = load i64, i64* %293, align 8
	%297 = icmp slt i64 %295, %296
	br i1 %297, label %for.index.body-7, label %for.index.done-20

for.index.body-7:
	%298 = load i64, i64* %41, align 8
	%299 = getelementptr inbounds {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-14.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %292, i64 0, i32 0
	%300 = load %jaze_gl-14.DebugFunctionLoadStatus*, %jaze_gl-14.DebugFunctionLoadStatus** %299, align 8
	%301 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %300, i64 %298
	%302 = load %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %301, align 8
	store %jaze_gl-14.DebugFunctionLoadStatus %302, %jaze_gl-14.DebugFunctionLoadStatus* %40
	; SelectorExpr
	; SelectorExpr
	%303 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %40, i64 0, i32 0
	%304 = load %..string, %..string* %303, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %42
	%305 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %42, align 8
	call void @.imgui-10.Text(%..string %304, {%..any*, i64, i64} %305)
	; IfStmt
	; SelectorExpr
	%306 = call ccc i1 @igIsItemHovered()
	br i1 %306, label %if.then-8, label %if.done-16

if.then-8:
	; SelectorExpr
	call ccc void @igBeginTooltip()
	; SelectorExpr
	call ccc void @igPushTextWrapPos(float 0x407c200000000000)
	; SelectorExpr
	; SelectorExpr
	%307 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %40, i64 0, i32 0
	%308 = load %..string, %..string* %307, align 8
	; SelectorExpr
	%309 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %40, i64 0, i32 1
	%310 = load i64, i64* %309, align 8
	store %..any zeroinitializer, %..any* %43
	%311 = bitcast %..string* %307 to %..rawptr
	%312 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%313 = getelementptr inbounds %..any, %..any* %43, i64 0, i32 0
	%314 = getelementptr inbounds %..any, %..any* %43, i64 0, i32 1
	store %Type_Info* %312, %Type_Info** %313
	store %..rawptr %311, %..rawptr* %314
	%315 = load %..any, %..any* %43, align 8
	store %..any zeroinitializer, %..any* %44
	%316 = bitcast i64* %309 to %..rawptr
	%317 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%318 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 0
	%319 = getelementptr inbounds %..any, %..any* %44, i64 0, i32 1
	store %Type_Info* %317, %Type_Info** %318
	store %..rawptr %316, %..rawptr* %319
	%320 = load %..any, %..any* %44, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %45
	store [2 x %..any] zeroinitializer, [2 x %..any]* %46
	%321 = getelementptr inbounds [2 x %..any], [2 x %..any]* %46, i64 0, i32 0
	store %..any %315, %..any* %321
	%322 = getelementptr inbounds [2 x %..any], [2 x %..any]* %46, i64 0, i32 1
	store %..any %320, %..any* %322
	%323 = getelementptr inbounds [2 x %..any], [2 x %..any]* %46, i64 0, i32 0
	%324 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %45, i64 0, i32 0
	store %..any* %323, %..any** %324
	%325 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %45, i64 0, i32 1
	store i64 2, i64* %325
	%326 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %45, i64 0, i32 2
	store i64 2, i64* %326
	%327 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %45, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$15a, i64 0, i32 0), i64 9}, {%..any*, i64, i64} %327)
	; test1
	store %Type_Info.Procedure* zeroinitializer, %Type_Info.Procedure** %47
		; ok1
	store i1 zeroinitializer, i1* %48
		; SelectorExpr
	%328 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %40, i64 0, i32 2
	%329 = load %Type_Info*, %Type_Info** %328, align 8
	; cast - union_cast
	store {%Type_Info.Procedure*, i1} zeroinitializer, {%Type_Info.Procedure*, i1}* %49
	%330 = getelementptr inbounds %Type_Info, %Type_Info* %329, i64 0, i32 2 ; UnionTagPtr
	%331 = load i64, i64* %330, align 8
	%332 = icmp eq i64 %331, 8
	br i1 %332, label %union_cast.ok-9, label %union_cast.end-10

union_cast.ok-9:
	%333 = getelementptr inbounds {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %49, i64 0, i32 0
	%334 = getelementptr inbounds {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %49, i64 0, i32 1
	%335 = bitcast %Type_Info* %329 to %Type_Info.Procedure*
	store %Type_Info.Procedure* %335, %Type_Info.Procedure** %333
	store i1 true, i1* %334
	br label %union_cast.end-10

union_cast.end-10:
	%336 = load {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %49, align 8
	%337 = extractvalue {%Type_Info.Procedure*, i1} %336, 0
	%338 = extractvalue {%Type_Info.Procedure*, i1} %336, 1
	store %Type_Info.Procedure* %337, %Type_Info.Procedure** %47
	store i1 %338, i1* %48
	; test2
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %50
		; ok2
	store i1 zeroinitializer, i1* %51
		; SelectorExpr
	%339 = load %Type_Info.Procedure*, %Type_Info.Procedure** %47, align 8
	%340 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %339, i64 0
	%341 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %340, i64 0, i32 0
	%342 = load %Type_Info*, %Type_Info** %341, align 8
	; cast - union_cast
	store {%Type_Info.Tuple*, i1} zeroinitializer, {%Type_Info.Tuple*, i1}* %52
	%343 = getelementptr inbounds %Type_Info, %Type_Info* %342, i64 0, i32 2 ; UnionTagPtr
	%344 = load i64, i64* %343, align 8
	%345 = icmp eq i64 %344, 13
	br i1 %345, label %union_cast.ok-11, label %union_cast.end-12

union_cast.ok-11:
	%346 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %52, i64 0, i32 0
	%347 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %52, i64 0, i32 1
	%348 = bitcast %Type_Info* %342 to %Type_Info.Tuple*
	store %Type_Info.Tuple* %348, %Type_Info.Tuple** %346
	store i1 true, i1* %347
	br label %union_cast.end-12

union_cast.end-12:
	%349 = load {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %52, align 8
	%350 = extractvalue {%Type_Info.Tuple*, i1} %349, 0
	%351 = extractvalue {%Type_Info.Tuple*, i1} %349, 1
	store %Type_Info.Tuple* %350, %Type_Info.Tuple** %50
	store i1 %351, i1* %51
	; SelectorExpr
	%352 = load i1, i1* %48, align 1
	store %..any zeroinitializer, %..any* %53
	%353 = bitcast i1* %48 to %..rawptr
	%354 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%355 = getelementptr inbounds %..any, %..any* %53, i64 0, i32 0
	%356 = getelementptr inbounds %..any, %..any* %53, i64 0, i32 1
	store %Type_Info* %354, %Type_Info** %355
	store %..rawptr %353, %..rawptr* %356
	%357 = load %..any, %..any* %53, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %54
	store [1 x %..any] zeroinitializer, [1 x %..any]* %55
	%358 = getelementptr inbounds [1 x %..any], [1 x %..any]* %55, i64 0, i32 0
	store %..any %357, %..any* %358
	%359 = getelementptr inbounds [1 x %..any], [1 x %..any]* %55, i64 0, i32 0
	%360 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %54, i64 0, i32 0
	store %..any* %359, %..any** %360
	%361 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %54, i64 0, i32 1
	store i64 1, i64* %361
	%362 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %54, i64 0, i32 2
	store i64 1, i64* %362
	%363 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %54, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$15b, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %363)
	; SelectorExpr
	%364 = load i1, i1* %51, align 1
	store %..any zeroinitializer, %..any* %56
	%365 = bitcast i1* %51 to %..rawptr
	%366 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%367 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 0
	%368 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 1
	store %Type_Info* %366, %Type_Info** %367
	store %..rawptr %365, %..rawptr* %368
	%369 = load %..any, %..any* %56, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %57
	store [1 x %..any] zeroinitializer, [1 x %..any]* %58
	%370 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	store %..any %369, %..any* %370
	%371 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	%372 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 0
	store %..any* %371, %..any** %372
	%373 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 1
	store i64 1, i64* %373
	%374 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 2
	store i64 1, i64* %374
	%375 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %57, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$15c, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %375)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%376 = load %Type_Info.Tuple*, %Type_Info.Tuple** %50, align 8
	%377 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %376, i64 0
	%378 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %377, i64 0, i32 0
	%379 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 1
	%380 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %379, i64 0, i32 1
	%381 = load i64, i64* %380, align 8
	store %..any zeroinitializer, %..any* %59
	%382 = bitcast i64* %380 to %..rawptr
	%383 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%384 = getelementptr inbounds %..any, %..any* %59, i64 0, i32 0
	%385 = getelementptr inbounds %..any, %..any* %59, i64 0, i32 1
	store %Type_Info* %383, %Type_Info** %384
	store %..rawptr %382, %..rawptr* %385
	%386 = load %..any, %..any* %59, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %60
	store [1 x %..any] zeroinitializer, [1 x %..any]* %61
	%387 = getelementptr inbounds [1 x %..any], [1 x %..any]* %61, i64 0, i32 0
	store %..any %386, %..any* %387
	%388 = getelementptr inbounds [1 x %..any], [1 x %..any]* %61, i64 0, i32 0
	%389 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 0
	store %..any* %388, %..any** %389
	%390 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 1
	store i64 1, i64* %390
	%391 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 2
	store i64 1, i64* %391
	%392 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %60, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$15d, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %392)
	; RangeStmt
	; info
	store %..string zeroinitializer, %..string* %62
		; SelectorExpr
	%393 = load %Type_Info.Tuple*, %Type_Info.Tuple** %50, align 8
	%394 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %393, i64 0
	%395 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %394, i64 0, i32 0
	%396 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %395, i64 0, i32 1
	%397 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %396, align 8
	store i64 zeroinitializer, i64* %63
	%398 = extractvalue {%..string*, i64, i64} %397, 1
	store i64 %398, i64* %63
	store i64 zeroinitializer, i64* %64
	store i64 -1, i64* %64
	br label %for.index.loop-13

for.index.loop-13:
	%399 = load i64, i64* %64, align 8
	%400 = add i64 %399, 1
	store i64 %400, i64* %64
	%401 = load i64, i64* %63, align 8
	%402 = icmp slt i64 %400, %401
	br i1 %402, label %for.index.body-14, label %for.index.done-15

for.index.body-14:
	%403 = load i64, i64* %64, align 8
	%404 = extractvalue {%..string*, i64, i64} %397, 0
	%405 = getelementptr inbounds %..string, %..string* %404, i64 %403
	%406 = load %..string, %..string* %405, align 8
	store %..string %406, %..string* %62
	; SelectorExpr
	%407 = load %..string, %..string* %62, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %65
	%408 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %65, align 8
	call void @.imgui-10.Text(%..string %407, {%..any*, i64, i64} %408)
	br label %for.index.loop-13

for.index.done-15:
	; SelectorExpr
	call ccc void @igPopTextWrapPos()
	; SelectorExpr
	call ccc void @igEndTooltip()
	br label %if.done-16

if.done-16:
	; SelectorExpr
	call ccc void @igNextColumn()
	; IfStmt
	; SelectorExpr
	%409 = getelementptr inbounds %jaze_gl-14.DebugFunctionLoadStatus, %jaze_gl-14.DebugFunctionLoadStatus* %40, i64 0, i32 3
	%410 = load i1, i1* %409, align 1
	br i1 %410, label %if.then-17, label %if.else-18

if.then-17:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$15e, i64 0, i32 0), i64 4}, %..string* %39
	br label %if.done-19

if.else-18:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$15f, i64 0, i32 0), i64 5}, %..string* %39
	br label %if.done-19

if.done-19:
	; SelectorExpr
	%411 = load %..string, %..string* %39, align 8
	store %..any zeroinitializer, %..any* %66
	%412 = bitcast %..string* %39 to %..rawptr
	%413 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%414 = getelementptr inbounds %..any, %..any* %66, i64 0, i32 0
	%415 = getelementptr inbounds %..any, %..any* %66, i64 0, i32 1
	store %Type_Info* %413, %Type_Info** %414
	store %..rawptr %412, %..rawptr* %415
	%416 = load %..any, %..any* %66, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %67
	store [1 x %..any] zeroinitializer, [1 x %..any]* %68
	%417 = getelementptr inbounds [1 x %..any], [1 x %..any]* %68, i64 0, i32 0
	store %..any %416, %..any* %417
	%418 = getelementptr inbounds [1 x %..any], [1 x %..any]* %68, i64 0, i32 0
	%419 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 0
	store %..any* %418, %..any** %419
	%420 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 1
	store i64 1, i64* %420
	%421 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 2
	store i64 1, i64* %421
	%422 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %67, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$160, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %422)
	; SelectorExpr
	call ccc void @igNextColumn()
	br label %for.index.loop-6

for.index.done-20:
	; SelectorExpr
	call ccc void @igColumns(i32 1, i8* zeroinitializer, i1 false)
	; SelectorExpr
	call ccc void @igEndChild()
	br label %if.done-21

if.done-21:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%423 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 1
	%424 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %423, i64 0, i32 1
	%425 = load i64, i64* %424, align 8
	store %..any zeroinitializer, %..any* %69
	%426 = bitcast i64* %424 to %..rawptr
	%427 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%428 = getelementptr inbounds %..any, %..any* %69, i64 0, i32 0
	%429 = getelementptr inbounds %..any, %..any* %69, i64 0, i32 1
	store %Type_Info* %427, %Type_Info** %428
	store %..rawptr %426, %..rawptr* %429
	%430 = load %..any, %..any* %69, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %70
	store [1 x %..any] zeroinitializer, [1 x %..any]* %71
	%431 = getelementptr inbounds [1 x %..any], [1 x %..any]* %71, i64 0, i32 0
	store %..any %430, %..any* %431
	%432 = getelementptr inbounds [1 x %..any], [1 x %..any]* %71, i64 0, i32 0
	%433 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %70, i64 0, i32 0
	store %..any* %432, %..any** %433
	%434 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %70, i64 0, i32 1
	store i64 1, i64* %434
	%435 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %70, i64 0, i32 2
	store i64 1, i64* %435
	%436 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %70, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$161, i64 0, i32 0), i64 29}, {%..any*, i64, i64} %436)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%437 = call i1 @.imgui-10.Button(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$162, i64 0, i32 0), i64 13}, %imgui-10.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %437, label %if.then-22, label %if.done-23

if.then-22:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %72
	%438 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 0
	%439 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %439, %Raw_Dynamic_Map** %438
	%440 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 1
	store i1 true, i1* %440
	%441 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 2
	store i64 40, i64* %441
	%442 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 3
	store i64 8, i64* %442
	%443 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 4
	store i64 32, i64* %443
	%444 = load %__Map_Header, %__Map_Header* %72, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %73
	%445 = getelementptr inbounds %__Map_Key, %__Map_Key* %73, i64 0, i32 0
	store i64 -1305467488239390059, i64* %445
	%446 = getelementptr inbounds %__Map_Key, %__Map_Key* %73, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$163, i64 0, i32 0), i64 21}, %..string* %446
	%447 = load %__Map_Key, %__Map_Key* %73, align 8
	store i1 zeroinitializer, i1* %74
	store i1 true, i1* %74
	%448 = bitcast i1* %74 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %444, %__Map_Key %447, %..rawptr %448)
	br label %if.done-23

if.done-23:
	; SelectorExpr
	call ccc void @igEnd()
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %75
	store %__Map_Header zeroinitializer, %__Map_Header* %76
	%449 = getelementptr inbounds %__Map_Header, %__Map_Header* %76, i64 0, i32 0
	%450 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %450, %Raw_Dynamic_Map** %449
	%451 = getelementptr inbounds %__Map_Header, %__Map_Header* %76, i64 0, i32 1
	store i1 true, i1* %451
	%452 = getelementptr inbounds %__Map_Header, %__Map_Header* %76, i64 0, i32 2
	store i64 40, i64* %452
	%453 = getelementptr inbounds %__Map_Header, %__Map_Header* %76, i64 0, i32 3
	store i64 8, i64* %453
	%454 = getelementptr inbounds %__Map_Header, %__Map_Header* %76, i64 0, i32 4
	store i64 32, i64* %454
	%455 = load %__Map_Header, %__Map_Header* %76, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %77
	%456 = getelementptr inbounds %__Map_Key, %__Map_Key* %77, i64 0, i32 0
	store i64 9087275691730913177, i64* %456
	%457 = getelementptr inbounds %__Map_Key, %__Map_Key* %77, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$164, i64 0, i32 0), i64 20}, %..string* %457
	%458 = load %__Map_Key, %__Map_Key* %77, align 8
	%459 = call %..rawptr @.__dynamic_map_get(%__Map_Header %455, %__Map_Key %458)
	%460 = icmp ne %..rawptr %459, null
	%461 = getelementptr inbounds {i1, i1}, {i1, i1}* %75, i64 0, i32 1
	store i1 %460, i1* %461
	br i1 %460, label %map.get.then-24, label %map.get.done-25

map.get.then-24:
	%462 = getelementptr inbounds {i1, i1}, {i1, i1}* %75, i64 0, i32 0
	%463 = bitcast %..rawptr %459 to i1*
	%464 = load i1, i1* %463, align 1
	store i1 %464, i1* %462
	br label %map.get.done-25

map.get.done-25:
	%465 = getelementptr inbounds {i1, i1}, {i1, i1}* %75, i64 0, i32 0
	%466 = load i1, i1* %465, align 1
	%467 = icmp eq i1 %466, true
	br i1 %467, label %if.then-26, label %if.done-29

if.then-26:
	; b
	store i1 zeroinitializer, i1* %78
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %79
	store %__Map_Header zeroinitializer, %__Map_Header* %80
	%468 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 0
	%469 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %469, %Raw_Dynamic_Map** %468
	%470 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 1
	store i1 true, i1* %470
	%471 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 2
	store i64 40, i64* %471
	%472 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 3
	store i64 8, i64* %472
	%473 = getelementptr inbounds %__Map_Header, %__Map_Header* %80, i64 0, i32 4
	store i64 32, i64* %473
	%474 = load %__Map_Header, %__Map_Header* %80, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %81
	%475 = getelementptr inbounds %__Map_Key, %__Map_Key* %81, i64 0, i32 0
	store i64 9087275691730913177, i64* %475
	%476 = getelementptr inbounds %__Map_Key, %__Map_Key* %81, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$165, i64 0, i32 0), i64 20}, %..string* %476
	%477 = load %__Map_Key, %__Map_Key* %81, align 8
	%478 = call %..rawptr @.__dynamic_map_get(%__Map_Header %474, %__Map_Key %477)
	%479 = icmp ne %..rawptr %478, null
	%480 = getelementptr inbounds {i1, i1}, {i1, i1}* %79, i64 0, i32 1
	store i1 %479, i1* %480
	br i1 %479, label %map.get.then-27, label %map.get.done-28

map.get.then-27:
	%481 = getelementptr inbounds {i1, i1}, {i1, i1}* %79, i64 0, i32 0
	%482 = bitcast %..rawptr %478 to i1*
	%483 = load i1, i1* %482, align 1
	store i1 %483, i1* %481
	br label %map.get.done-28

map.get.done-28:
	%484 = getelementptr inbounds {i1, i1}, {i1, i1}* %79, i64 0, i32 0
	%485 = load i1, i1* %484, align 1
	store i1 %485, i1* %78
	; SelectorExpr
	%486 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%487 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %486, i64 0
	%488 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %487, i64 0, i32 0
	%489 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %488, align 8
	%490 = getelementptr inbounds i1, i1* %78, i64 0
	call void @.jaze_debug_windows-16.OpenGLExtensions(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$166, i64 0, i32 0), i64 15}, {%..string*, i64, i64,%Allocator} %489, i1* %490)
	; AssignStmt
	; IndexExpr
	%491 = load i1, i1* %78, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %82
	%492 = getelementptr inbounds %__Map_Header, %__Map_Header* %82, i64 0, i32 0
	%493 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %493, %Raw_Dynamic_Map** %492
	%494 = getelementptr inbounds %__Map_Header, %__Map_Header* %82, i64 0, i32 1
	store i1 true, i1* %494
	%495 = getelementptr inbounds %__Map_Header, %__Map_Header* %82, i64 0, i32 2
	store i64 40, i64* %495
	%496 = getelementptr inbounds %__Map_Header, %__Map_Header* %82, i64 0, i32 3
	store i64 8, i64* %496
	%497 = getelementptr inbounds %__Map_Header, %__Map_Header* %82, i64 0, i32 4
	store i64 32, i64* %497
	%498 = load %__Map_Header, %__Map_Header* %82, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %83
	%499 = getelementptr inbounds %__Map_Key, %__Map_Key* %83, i64 0, i32 0
	store i64 9087275691730913177, i64* %499
	%500 = getelementptr inbounds %__Map_Key, %__Map_Key* %83, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$167, i64 0, i32 0), i64 20}, %..string* %500
	%501 = load %__Map_Key, %__Map_Key* %83, align 8
	%502 = bitcast i1* %78 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %498, %__Map_Key %501, %..rawptr %502)
	br label %if.done-29

if.done-29:
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %84
	store %__Map_Header zeroinitializer, %__Map_Header* %85
	%503 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 0
	%504 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %504, %Raw_Dynamic_Map** %503
	%505 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 1
	store i1 true, i1* %505
	%506 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 2
	store i64 40, i64* %506
	%507 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 3
	store i64 8, i64* %507
	%508 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 4
	store i64 32, i64* %508
	%509 = load %__Map_Header, %__Map_Header* %85, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %86
	%510 = getelementptr inbounds %__Map_Key, %__Map_Key* %86, i64 0, i32 0
	store i64 1665422548027325, i64* %510
	%511 = getelementptr inbounds %__Map_Key, %__Map_Key* %86, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$168, i64 0, i32 0), i64 23}, %..string* %511
	%512 = load %__Map_Key, %__Map_Key* %86, align 8
	%513 = call %..rawptr @.__dynamic_map_get(%__Map_Header %509, %__Map_Key %512)
	%514 = icmp ne %..rawptr %513, null
	%515 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 1
	store i1 %514, i1* %515
	br i1 %514, label %map.get.then-30, label %map.get.done-31

map.get.then-30:
	%516 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 0
	%517 = bitcast %..rawptr %513 to i1*
	%518 = load i1, i1* %517, align 1
	store i1 %518, i1* %516
	br label %map.get.done-31

map.get.done-31:
	%519 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 0
	%520 = load i1, i1* %519, align 1
	%521 = icmp eq i1 %520, true
	br i1 %521, label %if.then-32, label %if.done-35

if.then-32:
	; b
	store i1 zeroinitializer, i1* %87
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %88
	store %__Map_Header zeroinitializer, %__Map_Header* %89
	%522 = getelementptr inbounds %__Map_Header, %__Map_Header* %89, i64 0, i32 0
	%523 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %523, %Raw_Dynamic_Map** %522
	%524 = getelementptr inbounds %__Map_Header, %__Map_Header* %89, i64 0, i32 1
	store i1 true, i1* %524
	%525 = getelementptr inbounds %__Map_Header, %__Map_Header* %89, i64 0, i32 2
	store i64 40, i64* %525
	%526 = getelementptr inbounds %__Map_Header, %__Map_Header* %89, i64 0, i32 3
	store i64 8, i64* %526
	%527 = getelementptr inbounds %__Map_Header, %__Map_Header* %89, i64 0, i32 4
	store i64 32, i64* %527
	%528 = load %__Map_Header, %__Map_Header* %89, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %90
	%529 = getelementptr inbounds %__Map_Key, %__Map_Key* %90, i64 0, i32 0
	store i64 1665422548027325, i64* %529
	%530 = getelementptr inbounds %__Map_Key, %__Map_Key* %90, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$169, i64 0, i32 0), i64 23}, %..string* %530
	%531 = load %__Map_Key, %__Map_Key* %90, align 8
	%532 = call %..rawptr @.__dynamic_map_get(%__Map_Header %528, %__Map_Key %531)
	%533 = icmp ne %..rawptr %532, null
	%534 = getelementptr inbounds {i1, i1}, {i1, i1}* %88, i64 0, i32 1
	store i1 %533, i1* %534
	br i1 %533, label %map.get.then-33, label %map.get.done-34

map.get.then-33:
	%535 = getelementptr inbounds {i1, i1}, {i1, i1}* %88, i64 0, i32 0
	%536 = bitcast %..rawptr %532 to i1*
	%537 = load i1, i1* %536, align 1
	store i1 %537, i1* %535
	br label %map.get.done-34

map.get.done-34:
	%538 = getelementptr inbounds {i1, i1}, {i1, i1}* %88, i64 0, i32 0
	%539 = load i1, i1* %538, align 1
	store i1 %539, i1* %87
	; SelectorExpr
	%540 = load %jaze_gl-14.OpenGLVars_t*, %jaze_gl-14.OpenGLVars_t** %0, align 8
	%541 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %540, i64 0
	%542 = getelementptr inbounds %jaze_gl-14.OpenGLVars_t, %jaze_gl-14.OpenGLVars_t* %541, i64 0, i32 1
	%543 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %542, align 8
	%544 = getelementptr inbounds i1, i1* %87, i64 0
	call void @.jaze_debug_windows-16.OpenGLExtensions(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$16a, i64 0, i32 0), i64 14}, {%..string*, i64, i64,%Allocator} %543, i1* %544)
	; AssignStmt
	; IndexExpr
	%545 = load i1, i1* %87, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %91
	%546 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 0
	%547 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %547, %Raw_Dynamic_Map** %546
	%548 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 1
	store i1 true, i1* %548
	%549 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 2
	store i64 40, i64* %549
	%550 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 3
	store i64 8, i64* %550
	%551 = getelementptr inbounds %__Map_Header, %__Map_Header* %91, i64 0, i32 4
	store i64 32, i64* %551
	%552 = load %__Map_Header, %__Map_Header* %91, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %92
	%553 = getelementptr inbounds %__Map_Key, %__Map_Key* %92, i64 0, i32 0
	store i64 1665422548027325, i64* %553
	%554 = getelementptr inbounds %__Map_Key, %__Map_Key* %92, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$16b, i64 0, i32 0), i64 23}, %..string* %554
	%555 = load %__Map_Key, %__Map_Key* %92, align 8
	%556 = bitcast i1* %87 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %552, %__Map_Key %555, %..rawptr %556)
	br label %if.done-35

if.done-35:
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %93
	store %__Map_Header zeroinitializer, %__Map_Header* %94
	%557 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 0
	%558 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %558, %Raw_Dynamic_Map** %557
	%559 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 1
	store i1 true, i1* %559
	%560 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 2
	store i64 40, i64* %560
	%561 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 3
	store i64 8, i64* %561
	%562 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 4
	store i64 32, i64* %562
	%563 = load %__Map_Header, %__Map_Header* %94, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %95
	%564 = getelementptr inbounds %__Map_Key, %__Map_Key* %95, i64 0, i32 0
	store i64 -1305467488239390059, i64* %564
	%565 = getelementptr inbounds %__Map_Key, %__Map_Key* %95, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$16c, i64 0, i32 0), i64 21}, %..string* %565
	%566 = load %__Map_Key, %__Map_Key* %95, align 8
	%567 = call %..rawptr @.__dynamic_map_get(%__Map_Header %563, %__Map_Key %566)
	%568 = icmp ne %..rawptr %567, null
	%569 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 1
	store i1 %568, i1* %569
	br i1 %568, label %map.get.then-36, label %map.get.done-37

map.get.then-36:
	%570 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 0
	%571 = bitcast %..rawptr %567 to i1*
	%572 = load i1, i1* %571, align 1
	store i1 %572, i1* %570
	br label %map.get.done-37

map.get.done-37:
	%573 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 0
	%574 = load i1, i1* %573, align 1
	%575 = icmp eq i1 %574, true
	br i1 %575, label %if.then-38, label %if.done-41

if.then-38:
	; b
	store i1 zeroinitializer, i1* %96
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %97
	store %__Map_Header zeroinitializer, %__Map_Header* %98
	%576 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 0
	%577 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %577, %Raw_Dynamic_Map** %576
	%578 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 1
	store i1 true, i1* %578
	%579 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 2
	store i64 40, i64* %579
	%580 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 3
	store i64 8, i64* %580
	%581 = getelementptr inbounds %__Map_Header, %__Map_Header* %98, i64 0, i32 4
	store i64 32, i64* %581
	%582 = load %__Map_Header, %__Map_Header* %98, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %99
	%583 = getelementptr inbounds %__Map_Key, %__Map_Key* %99, i64 0, i32 0
	store i64 -1305467488239390059, i64* %583
	%584 = getelementptr inbounds %__Map_Key, %__Map_Key* %99, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$16d, i64 0, i32 0), i64 21}, %..string* %584
	%585 = load %__Map_Key, %__Map_Key* %99, align 8
	%586 = call %..rawptr @.__dynamic_map_get(%__Map_Header %582, %__Map_Key %585)
	%587 = icmp ne %..rawptr %586, null
	%588 = getelementptr inbounds {i1, i1}, {i1, i1}* %97, i64 0, i32 1
	store i1 %587, i1* %588
	br i1 %587, label %map.get.then-39, label %map.get.done-40

map.get.then-39:
	%589 = getelementptr inbounds {i1, i1}, {i1, i1}* %97, i64 0, i32 0
	%590 = bitcast %..rawptr %586 to i1*
	%591 = load i1, i1* %590, align 1
	store i1 %591, i1* %589
	br label %map.get.done-40

map.get.done-40:
	%592 = getelementptr inbounds {i1, i1}, {i1, i1}* %97, i64 0, i32 0
	%593 = load i1, i1* %592, align 1
	store i1 %593, i1* %96
	%594 = getelementptr inbounds i1, i1* %96, i64 0
	call void @.jaze_debug_windows-16.OpenGLTextureOverview(i1* %594)
	; AssignStmt
	; IndexExpr
	%595 = load i1, i1* %96, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %100
	%596 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 0
	%597 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %597, %Raw_Dynamic_Map** %596
	%598 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 1
	store i1 true, i1* %598
	%599 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 2
	store i64 40, i64* %599
	%600 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 3
	store i64 8, i64* %600
	%601 = getelementptr inbounds %__Map_Header, %__Map_Header* %100, i64 0, i32 4
	store i64 32, i64* %601
	%602 = load %__Map_Header, %__Map_Header* %100, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %101
	%603 = getelementptr inbounds %__Map_Key, %__Map_Key* %101, i64 0, i32 0
	store i64 -1305467488239390059, i64* %603
	%604 = getelementptr inbounds %__Map_Key, %__Map_Key* %101, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$16e, i64 0, i32 0), i64 21}, %..string* %604
	%605 = load %__Map_Key, %__Map_Key* %101, align 8
	%606 = bitcast i1* %96 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %602, %__Map_Key %605, %..rawptr %606)
	br label %if.done-41

if.done-41:
	ret void
}

define void @.jaze_debug_windows-16.Win32VarsInfo(%main-2.Win32Vars_t* %vars, i1* %show) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca i1*, align 8
	%2 = alloca %..any, align 8
	%3 = alloca i64, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %..any, align 8
	%7 = alloca i64, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [1 x %..any], align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [2 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca i64, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [1 x %..any], align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%18 = load i1*, i1** %1, align 8
	%19 = call i1 @.imgui-10.Begin(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$16f, i64 0, i32 0), i64 14}, i1* %18, i32 160)
	; SelectorExpr
	; SelectorExpr
	%20 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%21 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %20, i64 0
	%22 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %21, i64 0, i32 1
	%23 = load %..rawptr, %..rawptr* %22, align 8
	; cast - cast
	%24 = ptrtoint %..rawptr %23 to i64
	store %..any zeroinitializer, %..any* %2
	store i64 zeroinitializer, i64* %3
	store i64 %24, i64* %3
	%25 = bitcast i64* %3 to %..rawptr
	%26 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %2, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%30 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %29, %..any* %30
	%31 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%32 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %31, %..any** %32
	%33 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %33
	%34 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %34
	%35 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$170, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %35)
	; SelectorExpr
	; SelectorExpr
	%36 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%37 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %36, i64 0
	%38 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %37, i64 0, i32 2
	%39 = load %..rawptr, %..rawptr* %38, align 8
	; cast - cast
	%40 = ptrtoint %..rawptr %39 to i64
	store %..any zeroinitializer, %..any* %6
	store i64 zeroinitializer, i64* %7
	store i64 %40, i64* %7
	%41 = bitcast i64* %7 to %..rawptr
	%42 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%43 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%44 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %42, %Type_Info** %43
	store %..rawptr %41, %..rawptr* %44
	%45 = load %..any, %..any* %6, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [1 x %..any] zeroinitializer, [1 x %..any]* %9
	%46 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	store %..any %45, %..any* %46
	%47 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	%48 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %47, %..any** %48
	%49 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %49
	%50 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %50
	%51 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$171, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %51)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%52 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%53 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %52, i64 0
	%54 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %53, i64 0, i32 3
	%55 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %54, i64 0, i32 1, i32 0
	%56 = load float, float* %55, align 4
	; SelectorExpr
	; SelectorExpr
	%57 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %57, i64 0
	%59 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %58, i64 0, i32 3
	%60 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %59, i64 0, i32 1, i32 1
	%61 = load float, float* %60, align 4
	store %..any zeroinitializer, %..any* %10
	%62 = bitcast float* %55 to %..rawptr
	%63 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%64 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%65 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %63, %Type_Info** %64
	store %..rawptr %62, %..rawptr* %65
	%66 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%67 = bitcast float* %60 to %..rawptr
	%68 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%69 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%70 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %68, %Type_Info** %69
	store %..rawptr %67, %..rawptr* %70
	%71 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [2 x %..any] zeroinitializer, [2 x %..any]* %13
	%72 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	store %..any %66, %..any* %72
	%73 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 1
	store %..any %71, %..any* %73
	%74 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %74, %..any** %75
	%76 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 2, i64* %76
	%77 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 2, i64* %77
	%78 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$172, i64 0, i32 0), i64 35}, {%..any*, i64, i64} %78)
	; SelectorExpr
	; SelectorExpr
	%79 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%80 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %79, i64 0
	%81 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %80, i64 0, i32 4
	%82 = load %..rawptr, %..rawptr* %81, align 8
	; cast - cast
	%83 = ptrtoint %..rawptr %82 to i64
	store %..any zeroinitializer, %..any* %14
	store i64 zeroinitializer, i64* %15
	store i64 %83, i64* %15
	%84 = bitcast i64* %15 to %..rawptr
	%85 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%86 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%87 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %85, %Type_Info** %86
	store %..rawptr %84, %..rawptr* %87
	%88 = load %..any, %..any* %14, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [1 x %..any] zeroinitializer, [1 x %..any]* %17
	%89 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	store %..any %88, %..any* %89
	%90 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	%91 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %90, %..any** %91
	%92 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 1, i64* %92
	%93 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 1, i64* %93
	%94 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$173, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %94)
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-16.ShowXinputWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [1 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%4 = load i1*, i1** %0, align 8
	%5 = call i1 @.imgui-10.Begin(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$174, i64 0, i32 0), i64 6}, i1* %4, i32 160)
	; SelectorExpr
	; SelectorExpr
	%6 = load i64, i64* @.Version, align 8
	store %..any zeroinitializer, %..any* %1
	%7 = bitcast i64* @.Version to %..rawptr
	%8 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 139
	%9 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%10 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	store %Type_Info* %8, %Type_Info** %9
	store %..rawptr %7, %..rawptr* %10
	%11 = load %..any, %..any* %1, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	store [1 x %..any] zeroinitializer, [1 x %..any]* %3
	%12 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	store %..any %11, %..any* %12
	%13 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	%14 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 0
	store %..any* %13, %..any** %14
	%15 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %15
	%16 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %16
	%17 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	call void @.imgui-10.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$175, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %17)
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_imgui-17.SetStyle() {
decls-0:
	%0 = alloca %imgui-10.GuiStyle*, align 8
	; style
	store %imgui-10.GuiStyle* zeroinitializer, %imgui-10.GuiStyle** %0
		%1 = call ccc %imgui-10.GuiStyle* @igGetStyle()
	store %imgui-10.GuiStyle* %1, %imgui-10.GuiStyle** %0
	; AssignStmt
	; SelectorExpr
	%2 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%3 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %2, i64 0
	%4 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %3, i64 0, i32 3
	store float 0x4000000000000000, float* %4
	; AssignStmt
	; SelectorExpr
	%5 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%6 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %5, i64 0
	%7 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %6, i64 0, i32 5
	store float 0x4000000000000000, float* %7
	; AssignStmt
	; SelectorExpr
	%8 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%9 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %8, i64 0
	%10 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %9, i64 0, i32 7
	store float 0x4000000000000000, float* %10
	; AssignStmt
	; SelectorExpr
	%11 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%12 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %11, i64 0
	%13 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %12, i64 0, i32 16
	store float 0x4000000000000000, float* %13
	; AssignStmt
	; SelectorExpr
	%14 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%15 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %14, i64 0
	%16 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %15, i64 0, i32 13
	store float 0x402e000000000000, float* %16
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%17 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%18 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %17, i64 0
	%19 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %18, i64 0, i32 22
	%20 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %19, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$176, i64 0, i32 0), i64 27}, i64 32, i64 25, i64 0, i64 43)
	store %imgui-10.Vec4 {float 0x3fcc1c1c00000000, float 0x3fcc1c1c00000000, float 0x3fcc1c1c00000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %20
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%21 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%22 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %21, i64 0
	%23 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %22, i64 0, i32 22
	%24 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %23, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$177, i64 0, i32 0), i64 27}, i64 33, i64 25, i64 1, i64 43)
	store %imgui-10.Vec4 {float 0x3fe6969680000000, float 0x3fe6969680000000, float 0x3fe6969680000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %24
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%25 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%26 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %25, i64 0
	%27 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %26, i64 0, i32 22
	%28 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %27, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$178, i64 0, i32 0), i64 27}, i64 35, i64 25, i64 2, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3fee1e1e00000000}, %imgui-10.Vec4* %28
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%29 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%30 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %29, i64 0
	%31 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %30, i64 0, i32 22
	%32 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %31, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$179, i64 0, i32 0), i64 27}, i64 36, i64 25, i64 3, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x0000000000000000}, %imgui-10.Vec4* %32
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%33 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%34 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %33, i64 0
	%35 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %34, i64 0, i32 22
	%36 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %35, i64 0, i32 4
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$17a, i64 0, i32 0), i64 27}, i64 38, i64 25, i64 4, i64 43)
	store %imgui-10.Vec4 {float 0x3fef5f5f40000000, float 0x3fef5f5f40000000, float 0x3fef5f5f40000000, float 0x3fee1e1e00000000}, %imgui-10.Vec4* %36
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%37 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%38 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %37, i64 0
	%39 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %38, i64 0, i32 22
	%40 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %39, i64 0, i32 5
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$17b, i64 0, i32 0), i64 27}, i64 40, i64 25, i64 5, i64 43)
	store %imgui-10.Vec4 {float 0x3fe1919180000000, float 0x3fe1919180000000, float 0x3fe1919180000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %40
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%41 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%42 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %41, i64 0
	%43 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %42, i64 0, i32 22
	%44 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %43, i64 0, i32 6
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$17c, i64 0, i32 0), i64 27}, i64 41, i64 25, i64 6, i64 43)
	store %imgui-10.Vec4 {float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3fa4141400000000}, %imgui-10.Vec4* %44
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%45 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%46 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %45, i64 0
	%47 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %46, i64 0, i32 22
	%48 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %47, i64 0, i32 7
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$17d, i64 0, i32 0), i64 27}, i64 43, i64 25, i64 7, i64 43)
	store %imgui-10.Vec4 {float 0x3feafafae0000000, float 0x3feafafae0000000, float 0x3feafafae0000000, float 0x3fdcdcdcc0000000}, %imgui-10.Vec4* %48
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%49 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%50 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %49, i64 0
	%51 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %50, i64 0, i32 22
	%52 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %51, i64 0, i32 10
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$17e, i64 0, i32 0), i64 27}, i64 45, i64 25, i64 10, i64 43)
	store %imgui-10.Vec4 {float 0x3fe9191900000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %52
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%53 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%54 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %53, i64 0
	%55 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %54, i64 0, i32 22
	%56 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %55, i64 0, i32 11
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$17f, i64 0, i32 0), i64 27}, i64 46, i64 25, i64 11, i64 43)
	store %imgui-10.Vec4 {float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fe9999980000000, float 0x3fd9999980000000}, %imgui-10.Vec4* %56
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%57 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%58 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %57, i64 0
	%59 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %58, i64 0, i32 22
	%60 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %59, i64 0, i32 12
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$180, i64 0, i32 0), i64 27}, i64 47, i64 25, i64 12, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %60
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%61 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%62 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %61, i64 0
	%63 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %62, i64 0, i32 22
	%64 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %63, i64 0, i32 13
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$181, i64 0, i32 0), i64 27}, i64 49, i64 25, i64 13, i64 43)
	store %imgui-10.Vec4 {float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %64
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%65 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%66 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %65, i64 0
	%67 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %66, i64 0, i32 22
	%68 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %67, i64 0, i32 14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$182, i64 0, i32 0), i64 27}, i64 51, i64 25, i64 14, i64 43)
	store %imgui-10.Vec4 {float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee9e9e80000000}, %imgui-10.Vec4* %68
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%69 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%70 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %69, i64 0
	%71 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %70, i64 0, i32 22
	%72 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %71, i64 0, i32 15
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$183, i64 0, i32 0), i64 27}, i64 52, i64 25, i64 15, i64 43)
	store %imgui-10.Vec4 {float 0x3fe9999980000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fd3535340000000}, %imgui-10.Vec4* %72
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%73 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%74 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %73, i64 0
	%75 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %74, i64 0, i32 22
	%76 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %75, i64 0, i32 16
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$184, i64 0, i32 0), i64 27}, i64 53, i64 25, i64 16, i64 43)
	store %imgui-10.Vec4 {float 0x3fee1e1e00000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fd9999980000000}, %imgui-10.Vec4* %76
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%77 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%78 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %77, i64 0
	%79 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %78, i64 0, i32 22
	%80 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %79, i64 0, i32 17
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$185, i64 0, i32 0), i64 27}, i64 54, i64 25, i64 17, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3fe0101000000000, float 0x3fe0101000000000, float 0x3fd9999980000000}, %imgui-10.Vec4* %80
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%81 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%82 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %81, i64 0
	%83 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %82, i64 0, i32 22
	%84 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %83, i64 0, i32 18
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$186, i64 0, i32 0), i64 27}, i64 56, i64 25, i64 18, i64 43)
	store %imgui-10.Vec4 {float 0x3fecdcdcc0000000, float 0x3fecdcdcc0000000, float 0x3fecdcdcc0000000, float 0x3fef9f9f80000000}, %imgui-10.Vec4* %84
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%85 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%86 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %85, i64 0
	%87 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %86, i64 0, i32 22
	%88 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %87, i64 0, i32 19
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$187, i64 0, i32 0), i64 27}, i64 58, i64 25, i64 19, i64 43)
	store %imgui-10.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fef9f9f80000000}, %imgui-10.Vec4* %88
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%89 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%90 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %89, i64 0
	%91 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %90, i64 0, i32 22
	%92 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %91, i64 0, i32 20
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$188, i64 0, i32 0), i64 27}, i64 60, i64 25, i64 20, i64 43)
	store %imgui-10.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000}, %imgui-10.Vec4* %92
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%93 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%94 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %93, i64 0
	%95 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %94, i64 0, i32 22
	%96 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %95, i64 0, i32 21
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$189, i64 0, i32 0), i64 27}, i64 61, i64 25, i64 21, i64 43)
	store %imgui-10.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %96
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%97 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%98 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %97, i64 0
	%99 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %98, i64 0, i32 22
	%100 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %99, i64 0, i32 22
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18a, i64 0, i32 0), i64 27}, i64 63, i64 25, i64 22, i64 43)
	store %imgui-10.Vec4 {float 0x3fe9191900000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3fe3333320000000}, %imgui-10.Vec4* %100
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%102 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %101, i64 0
	%103 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %102, i64 0, i32 22
	%104 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %103, i64 0, i32 23
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18b, i64 0, i32 0), i64 27}, i64 64, i64 25, i64 23, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %104
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%105 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%106 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %105, i64 0
	%107 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %106, i64 0, i32 22
	%108 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %107, i64 0, i32 25
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18c, i64 0, i32 0), i64 27}, i64 66, i64 25, i64 25, i64 43)
	store %imgui-10.Vec4 {float 0x3fee1e1e00000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fdcdcdcc0000000}, %imgui-10.Vec4* %108
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%109 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%110 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %109, i64 0
	%111 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %110, i64 0, i32 22
	%112 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %111, i64 0, i32 26
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18d, i64 0, i32 0), i64 27}, i64 67, i64 25, i64 26, i64 43)
	store %imgui-10.Vec4 {float 0x3fee1e1e00000000, float 0x3fdcdcdcc0000000, float 0x3fe3737360000000, float 0x3fe9999980000000}, %imgui-10.Vec4* %112
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%113 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%114 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %113, i64 0
	%115 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %114, i64 0, i32 22
	%116 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %115, i64 0, i32 27
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18e, i64 0, i32 0), i64 27}, i64 68, i64 25, i64 27, i64 43)
	store %imgui-10.Vec4 {float 0x3febdbdbc0000000, float 0x3fe0f0f0e0000000, float 0x3fe2323220000000, float 0x3fe9999980000000}, %imgui-10.Vec4* %116
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%117 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%118 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %117, i64 0
	%119 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %118, i64 0, i32 22
	%120 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %119, i64 0, i32 31
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18f, i64 0, i32 0), i64 27}, i64 70, i64 25, i64 31, i64 43)
	store %imgui-10.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fd3535340000000}, %imgui-10.Vec4* %120
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%121 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%122 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %121, i64 0
	%123 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %122, i64 0, i32 22
	%124 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %123, i64 0, i32 32
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$190, i64 0, i32 0), i64 27}, i64 71, i64 25, i64 32, i64 43)
	store %imgui-10.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe3333320000000}, %imgui-10.Vec4* %124
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%125 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%126 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %125, i64 0
	%127 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %126, i64 0, i32 22
	%128 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %127, i64 0, i32 33
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$191, i64 0, i32 0), i64 27}, i64 72, i64 25, i64 33, i64 43)
	store %imgui-10.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fecdcdcc0000000}, %imgui-10.Vec4* %128
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%129 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%130 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %129, i64 0
	%131 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %130, i64 0, i32 22
	%132 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %131, i64 0, i32 37
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$192, i64 0, i32 0), i64 27}, i64 74, i64 25, i64 37, i64 43)
	store %imgui-10.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %132
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%133 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%134 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %133, i64 0
	%135 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %134, i64 0, i32 22
	%136 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %135, i64 0, i32 40
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$193, i64 0, i32 0), i64 27}, i64 75, i64 25, i64 40, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x3fdd1d1d00000000, float 0x0000000000000000, float 0x3ff0000000000000}, %imgui-10.Vec4* %136
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%137 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%138 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %137, i64 0
	%139 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %138, i64 0, i32 22
	%140 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %139, i64 0, i32 41
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$194, i64 0, i32 0), i64 27}, i64 77, i64 25, i64 41, i64 43)
	store %imgui-10.Vec4 {float 0x3ff0000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3fd6565640000000}, %imgui-10.Vec4* %140
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%141 = load %imgui-10.GuiStyle*, %imgui-10.GuiStyle** %0, align 8
	%142 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %141, i64 0
	%143 = getelementptr inbounds %imgui-10.GuiStyle, %imgui-10.GuiStyle* %142, i64 0, i32 22
	%144 = getelementptr inbounds [43 x %imgui-10.Vec4], [43 x %imgui-10.Vec4]* %143, i64 0, i32 42
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$195, i64 0, i32 0), i64 27}, i64 79, i64 25, i64 42, i64 43)
	store %imgui-10.Vec4 {float 0x3fc9999980000000, float 0x3fc9999980000000, float 0x3fc9999980000000, float 0x3fd6969680000000}, %imgui-10.Vec4* %144
	ret void
}

define void @.jaze_imgui-17.Init(%..rawptr %windowHandle) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %imgui-10.GuiIO*, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %jaze_gl-14.Shader, align 8
	%5 = alloca i1, align 1
	%6 = alloca %jaze_gl-14.Shader, align 8
	%7 = alloca i1, align 1
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca i32, align 4
	%11 = alloca %__Map_Header, align 8
	%12 = alloca %__Map_Key, align 8
	%13 = alloca i32, align 4
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca i32, align 4
	%17 = alloca %__Map_Header, align 8
	%18 = alloca %__Map_Key, align 8
	%19 = alloca i32, align 4
	%20 = alloca %__Map_Header, align 8
	%21 = alloca %__Map_Key, align 8
	%22 = alloca i32, align 4
	%23 = alloca {i32, i1}, align 4
	%24 = alloca %__Map_Header, align 8
	%25 = alloca %__Map_Key, align 8
	%26 = alloca {i32, i1}, align 4
	%27 = alloca %__Map_Header, align 8
	%28 = alloca %__Map_Key, align 8
	%29 = alloca {i32, i1}, align 4
	%30 = alloca %__Map_Header, align 8
	%31 = alloca %__Map_Key, align 8
	%32 = alloca {i32, i1}, align 4
	%33 = alloca %__Map_Header, align 8
	%34 = alloca %__Map_Key, align 8
	%35 = alloca {i32, i1}, align 4
	%36 = alloca %__Map_Header, align 8
	%37 = alloca %__Map_Key, align 8
	%38 = alloca {i32, i1}, align 4
	%39 = alloca %__Map_Header, align 8
	%40 = alloca %__Map_Key, align 8
	%41 = alloca i8*, align 8
	%42 = alloca i32, align 4
	%43 = alloca i32, align 4
	%44 = alloca i32, align 4
	%45 = alloca {i32*, i64, i64}, align 8
	%46 = alloca [1 x i32], align 4
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %windowHandle, %..rawptr* %0
	; io
	store %imgui-10.GuiIO* zeroinitializer, %imgui-10.GuiIO** %1
		%47 = call ccc %imgui-10.GuiIO* @igGetIO()
	store %imgui-10.GuiIO* %47, %imgui-10.GuiIO** %1
	; AssignStmt
	; SelectorExpr
	%48 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%49 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %48, i64 0
	%50 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %49, i64 0, i32 28
	%51 = load %..rawptr, %..rawptr* %0, align 8
	store %..rawptr %51, %..rawptr* %50
	; AssignStmt
	; SelectorExpr
	%52 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%53 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %52, i64 0
	%54 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %53, i64 0, i32 22
	store void (%imgui-10.DrawData*)* @.jaze_imgui-17.RenderProc, void (%imgui-10.DrawData*)** %54
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%55 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%56 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %55, i64 0
	%57 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %56, i64 0, i32 8
	%58 = getelementptr inbounds [19 x i32], [19 x i32]* %57, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$196, i64 0, i32 0), i64 27}, i64 87, i64 22, i64 0, i64 19)
	store i32 9, i32* %58
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%59 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%60 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %59, i64 0
	%61 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %60, i64 0, i32 8
	%62 = getelementptr inbounds [19 x i32], [19 x i32]* %61, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$197, i64 0, i32 0), i64 27}, i64 88, i64 22, i64 1, i64 19)
	store i32 37, i32* %62
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%63 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%64 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %63, i64 0
	%65 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %64, i64 0, i32 8
	%66 = getelementptr inbounds [19 x i32], [19 x i32]* %65, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$198, i64 0, i32 0), i64 27}, i64 89, i64 22, i64 2, i64 19)
	store i32 39, i32* %66
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%67 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%68 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %67, i64 0
	%69 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %68, i64 0, i32 8
	%70 = getelementptr inbounds [19 x i32], [19 x i32]* %69, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$199, i64 0, i32 0), i64 27}, i64 90, i64 22, i64 3, i64 19)
	store i32 38, i32* %70
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%71 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%72 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %71, i64 0
	%73 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %72, i64 0, i32 8
	%74 = getelementptr inbounds [19 x i32], [19 x i32]* %73, i64 0, i32 4
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$19a, i64 0, i32 0), i64 27}, i64 91, i64 22, i64 4, i64 19)
	store i32 40, i32* %74
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%75 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%76 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %75, i64 0
	%77 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %76, i64 0, i32 8
	%78 = getelementptr inbounds [19 x i32], [19 x i32]* %77, i64 0, i32 5
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$19b, i64 0, i32 0), i64 27}, i64 92, i64 22, i64 5, i64 19)
	store i32 34, i32* %78
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%79 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%80 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %79, i64 0
	%81 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %80, i64 0, i32 8
	%82 = getelementptr inbounds [19 x i32], [19 x i32]* %81, i64 0, i32 6
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$19c, i64 0, i32 0), i64 27}, i64 93, i64 22, i64 6, i64 19)
	store i32 33, i32* %82
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%83 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%84 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %83, i64 0
	%85 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %84, i64 0, i32 8
	%86 = getelementptr inbounds [19 x i32], [19 x i32]* %85, i64 0, i32 7
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$19d, i64 0, i32 0), i64 27}, i64 94, i64 22, i64 7, i64 19)
	store i32 36, i32* %86
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%87 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%88 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %87, i64 0
	%89 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %88, i64 0, i32 8
	%90 = getelementptr inbounds [19 x i32], [19 x i32]* %89, i64 0, i32 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$19e, i64 0, i32 0), i64 27}, i64 95, i64 22, i64 8, i64 19)
	store i32 35, i32* %90
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%91 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%92 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %91, i64 0
	%93 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %92, i64 0, i32 8
	%94 = getelementptr inbounds [19 x i32], [19 x i32]* %93, i64 0, i32 9
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$19f, i64 0, i32 0), i64 27}, i64 96, i64 22, i64 9, i64 19)
	store i32 46, i32* %94
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%95 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%96 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %95, i64 0
	%97 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %96, i64 0, i32 8
	%98 = getelementptr inbounds [19 x i32], [19 x i32]* %97, i64 0, i32 10
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a0, i64 0, i32 0), i64 27}, i64 97, i64 22, i64 10, i64 19)
	store i32 8, i32* %98
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%99 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%100 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %99, i64 0
	%101 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %100, i64 0, i32 8
	%102 = getelementptr inbounds [19 x i32], [19 x i32]* %101, i64 0, i32 11
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a1, i64 0, i32 0), i64 27}, i64 98, i64 22, i64 11, i64 19)
	store i32 13, i32* %102
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%103 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%104 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %103, i64 0
	%105 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %104, i64 0, i32 8
	%106 = getelementptr inbounds [19 x i32], [19 x i32]* %105, i64 0, i32 12
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a2, i64 0, i32 0), i64 27}, i64 99, i64 22, i64 12, i64 19)
	store i32 27, i32* %106
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%107 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%108 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %107, i64 0
	%109 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %108, i64 0, i32 8
	%110 = getelementptr inbounds [19 x i32], [19 x i32]* %109, i64 0, i32 13
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a3, i64 0, i32 0), i64 27}, i64 100, i64 22, i64 13, i64 19)
	store i32 65, i32* %110
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%111 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%112 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %111, i64 0
	%113 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %112, i64 0, i32 8
	%114 = getelementptr inbounds [19 x i32], [19 x i32]* %113, i64 0, i32 14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a4, i64 0, i32 0), i64 27}, i64 101, i64 22, i64 14, i64 19)
	store i32 67, i32* %114
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%115 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%116 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %115, i64 0
	%117 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %116, i64 0, i32 8
	%118 = getelementptr inbounds [19 x i32], [19 x i32]* %117, i64 0, i32 15
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a5, i64 0, i32 0), i64 27}, i64 102, i64 22, i64 15, i64 19)
	store i32 86, i32* %118
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%119 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%120 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %119, i64 0
	%121 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %120, i64 0, i32 8
	%122 = getelementptr inbounds [19 x i32], [19 x i32]* %121, i64 0, i32 16
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a6, i64 0, i32 0), i64 27}, i64 103, i64 22, i64 16, i64 19)
	store i32 88, i32* %122
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%123 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%124 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %123, i64 0
	%125 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %124, i64 0, i32 8
	%126 = getelementptr inbounds [19 x i32], [19 x i32]* %125, i64 0, i32 17
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a7, i64 0, i32 0), i64 27}, i64 104, i64 22, i64 17, i64 19)
	store i32 89, i32* %126
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%127 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%128 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %127, i64 0
	%129 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %128, i64 0, i32 8
	%130 = getelementptr inbounds [19 x i32], [19 x i32]* %129, i64 0, i32 18
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1a8, i64 0, i32 0), i64 27}, i64 105, i64 22, i64 18, i64 19)
	store i32 90, i32* %130
	; vertexShaderString
	store %..string zeroinitializer, %..string* %2
		store %..string {i8* getelementptr inbounds ([332 x i8], [332 x i8]* @.__str$1a9, i64 0, i32 0), i64 332}, %..string* %2
	; fragmentShaderString
	store %..string zeroinitializer, %..string* %3
		store %..string {i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.__str$1aa, i64 0, i32 0), i64 243}, %..string* %3
	; AssignStmt
	; SelectorExpr
	%131 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	; SelectorExpr
	%132 = call %jaze_gl-14.Program @.jaze_gl-14.CreateProgram()
	store %jaze_gl-14.Program %132, %jaze_gl-14.Program* %131
	; vertexShader
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %4
		; ok1
	store i1 zeroinitializer, i1* %5
		; SelectorExpr
	%133 = load %..string, %..string* %2, align 8
	%134 = call {%jaze_gl-14.Shader, i1} @.jaze_gl-14.UtilCreateAndCompileShader(i32 35633, %..string %133)
	%135 = extractvalue {%jaze_gl-14.Shader, i1} %134, 0
	%136 = extractvalue {%jaze_gl-14.Shader, i1} %134, 1
	store %jaze_gl-14.Shader %135, %jaze_gl-14.Shader* %4
	store i1 %136, i1* %5
	; fragmentShader
	store %jaze_gl-14.Shader zeroinitializer, %jaze_gl-14.Shader* %6
		; ok2
	store i1 zeroinitializer, i1* %7
		; SelectorExpr
	%137 = load %..string, %..string* %3, align 8
	%138 = call {%jaze_gl-14.Shader, i1} @.jaze_gl-14.UtilCreateAndCompileShader(i32 35632, %..string %137)
	%139 = extractvalue {%jaze_gl-14.Shader, i1} %138, 0
	%140 = extractvalue {%jaze_gl-14.Shader, i1} %138, 1
	store %jaze_gl-14.Shader %139, %jaze_gl-14.Shader* %6
	store i1 %140, i1* %7
	; IfStmt
	%141 = load i1, i1* %5, align 1
	br i1 %141, label %cmp.or-1, label %if.then-2

cmp.or-1:
	%142 = load i1, i1* %7, align 1
	br i1 %142, label %if.done-3, label %if.then-2

if.then-2:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1ab, i64 0, i32 0), i64 27}, i64 139, i64 15, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$1ac, i64 0, i32 0), i64 6})
	br label %if.done-3

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%143 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%144 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %143, align 8
	%145 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %4, align 8
	call void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %144, %jaze_gl-14.Shader %145)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%146 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%147 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %146, i64 0, i32 2
	%148 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %4, align 8
	store %jaze_gl-14.Shader %148, %jaze_gl-14.Shader* %147
	; SelectorExpr
	; SelectorExpr
	%149 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%150 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %149, align 8
	%151 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %6, align 8
	call void @.jaze_gl-14.AttachShader(%jaze_gl-14.Program %150, %jaze_gl-14.Shader %151)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%152 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%153 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %152, i64 0, i32 3
	%154 = load %jaze_gl-14.Shader, %jaze_gl-14.Shader* %6, align 8
	store %jaze_gl-14.Shader %154, %jaze_gl-14.Shader* %153
	; SelectorExpr
	; SelectorExpr
	%155 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%156 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %155, align 8
	call void @.jaze_gl-14.LinkProgram(%jaze_gl-14.Program %156)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%157 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%158 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %157, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%159 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%160 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %159, align 8
	%161 = call i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %160, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1ad, i64 0, i32 0), i64 7})
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%162 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%163 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %158 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %163, %Raw_Dynamic_Map** %162
	%164 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %164
	%165 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %165
	%166 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %166
	%167 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %167
	%168 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%169 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 2829778445906215252, i64* %169
	%170 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1ae, i64 0, i32 0), i64 7}, %..string* %170
	%171 = load %__Map_Key, %__Map_Key* %9, align 8
	store i32 zeroinitializer, i32* %10
	store i32 %161, i32* %10
	%172 = bitcast i32* %10 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %168, %__Map_Key %171, %..rawptr %172)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%173 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%174 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %173, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%175 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%176 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %175, align 8
	%177 = call i32 @.jaze_gl-14.GetUniformLocation(%jaze_gl-14.Program %176, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1af, i64 0, i32 0), i64 7})
	store %__Map_Header zeroinitializer, %__Map_Header* %11
	%178 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 0
	%179 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %174 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %179, %Raw_Dynamic_Map** %178
	%180 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 1
	store i1 true, i1* %180
	%181 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 2
	store i64 40, i64* %181
	%182 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 3
	store i64 8, i64* %182
	%183 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 4
	store i64 32, i64* %183
	%184 = load %__Map_Header, %__Map_Header* %11, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %12
	%185 = getelementptr inbounds %__Map_Key, %__Map_Key* %12, i64 0, i32 0
	store i64 -9017138883755609675, i64* %185
	%186 = getelementptr inbounds %__Map_Key, %__Map_Key* %12, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1b0, i64 0, i32 0), i64 7}, %..string* %186
	%187 = load %__Map_Key, %__Map_Key* %12, align 8
	store i32 zeroinitializer, i32* %13
	store i32 %177, i32* %13
	%188 = bitcast i32* %13 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %184, %__Map_Key %187, %..rawptr %188)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%189 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%190 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %189, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%191 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%192 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %191, align 8
	%193 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %192, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1b1, i64 0, i32 0), i64 8})
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%194 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%195 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %190 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %195, %Raw_Dynamic_Map** %194
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %196
	%197 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %197
	%198 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %198
	%199 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %199
	%200 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%201 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 -4512294542364210646, i64* %201
	%202 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1b2, i64 0, i32 0), i64 8}, %..string* %202
	%203 = load %__Map_Key, %__Map_Key* %15, align 8
	store i32 zeroinitializer, i32* %16
	store i32 %193, i32* %16
	%204 = bitcast i32* %16 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %200, %__Map_Key %203, %..rawptr %204)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%205 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%206 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %205, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%207 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%208 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %207, align 8
	%209 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %208, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1b3, i64 0, i32 0), i64 2})
	store %__Map_Header zeroinitializer, %__Map_Header* %17
	%210 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 0
	%211 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %206 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %211, %Raw_Dynamic_Map** %210
	%212 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 1
	store i1 true, i1* %212
	%213 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 2
	store i64 40, i64* %213
	%214 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 3
	store i64 8, i64* %214
	%215 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 4
	store i64 32, i64* %215
	%216 = load %__Map_Header, %__Map_Header* %17, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %18
	%217 = getelementptr inbounds %__Map_Key, %__Map_Key* %18, i64 0, i32 0
	store i64 662345837686521650, i64* %217
	%218 = getelementptr inbounds %__Map_Key, %__Map_Key* %18, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1b4, i64 0, i32 0), i64 2}, %..string* %218
	%219 = load %__Map_Key, %__Map_Key* %18, align 8
	store i32 zeroinitializer, i32* %19
	store i32 %209, i32* %19
	%220 = bitcast i32* %19 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %216, %__Map_Key %219, %..rawptr %220)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%221 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%222 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %221, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%223 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%224 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %223, align 8
	%225 = call i32 @.jaze_gl-14.GetAttribLocation(%jaze_gl-14.Program %224, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1b5, i64 0, i32 0), i64 5})
	store %__Map_Header zeroinitializer, %__Map_Header* %20
	%226 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 0
	%227 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %222 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %227, %Raw_Dynamic_Map** %226
	%228 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 1
	store i1 true, i1* %228
	%229 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 2
	store i64 40, i64* %229
	%230 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 3
	store i64 8, i64* %230
	%231 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 4
	store i64 32, i64* %231
	%232 = load %__Map_Header, %__Map_Header* %20, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %21
	%233 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 0
	store i64 3769135706557701272, i64* %233
	%234 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1b6, i64 0, i32 0), i64 5}, %..string* %234
	%235 = load %__Map_Key, %__Map_Key* %21, align 8
	store i32 zeroinitializer, i32* %22
	store i32 %225, i32* %22
	%236 = bitcast i32* %22 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %232, %__Map_Key %235, %..rawptr %236)
	; AssignStmt
	; SelectorExpr
	%237 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 2
	; SelectorExpr
	%238 = call i32 @.jaze_gl-14.GenBuffer()
	; cast - cast
	store i32 %238, i32* %237
	; AssignStmt
	; SelectorExpr
	%239 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 3
	; SelectorExpr
	%240 = call i32 @.jaze_gl-14.GenBuffer()
	; cast - cast
	store i32 %240, i32* %239
	; AssignStmt
	; SelectorExpr
	%241 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 4
	; SelectorExpr
	%242 = call i32 @.jaze_gl-14.GenVertexArray()
	store i32 %242, i32* %241
	; SelectorExpr
	; SelectorExpr
	%243 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 2
	%244 = load i32, i32* %243, align 4
	call void @.jaze_gl-14.BindBuffer-1824837645680(i32 %244)
	; SelectorExpr
	; SelectorExpr
	%245 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 3
	%246 = load i32, i32* %245, align 4
	call void @.jaze_gl-14.BindBuffer-1824837646048(i32 %246)
	; SelectorExpr
	; SelectorExpr
	%247 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 4
	%248 = load i32, i32* %247, align 4
	call void @.jaze_gl-14.BindVertexArray(i32 %248)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%249 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%250 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %249, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %23
	store %__Map_Header zeroinitializer, %__Map_Header* %24
	%251 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 0
	%252 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %250 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %252, %Raw_Dynamic_Map** %251
	%253 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 1
	store i1 true, i1* %253
	%254 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 2
	store i64 40, i64* %254
	%255 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 3
	store i64 8, i64* %255
	%256 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 4
	store i64 32, i64* %256
	%257 = load %__Map_Header, %__Map_Header* %24, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %25
	%258 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 0
	store i64 -4512294542364210646, i64* %258
	%259 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1b7, i64 0, i32 0), i64 8}, %..string* %259
	%260 = load %__Map_Key, %__Map_Key* %25, align 8
	%261 = call %..rawptr @.__dynamic_map_get(%__Map_Header %257, %__Map_Key %260)
	%262 = icmp ne %..rawptr %261, null
	%263 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 1
	store i1 %262, i1* %263
	br i1 %262, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%264 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 0
	%265 = bitcast %..rawptr %261 to i32*
	%266 = load i32, i32* %265, align 4
	store i32 %266, i32* %264
	br label %map.get.done-5

map.get.done-5:
	%267 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 0
	%268 = load i32, i32* %267, align 4
	; cast - cast
	%269 = bitcast i32 %268 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %269)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%270 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%271 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %270, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %26
	store %__Map_Header zeroinitializer, %__Map_Header* %27
	%272 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 0
	%273 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %271 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %273, %Raw_Dynamic_Map** %272
	%274 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 1
	store i1 true, i1* %274
	%275 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 2
	store i64 40, i64* %275
	%276 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 3
	store i64 8, i64* %276
	%277 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 4
	store i64 32, i64* %277
	%278 = load %__Map_Header, %__Map_Header* %27, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %28
	%279 = getelementptr inbounds %__Map_Key, %__Map_Key* %28, i64 0, i32 0
	store i64 662345837686521650, i64* %279
	%280 = getelementptr inbounds %__Map_Key, %__Map_Key* %28, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1b8, i64 0, i32 0), i64 2}, %..string* %280
	%281 = load %__Map_Key, %__Map_Key* %28, align 8
	%282 = call %..rawptr @.__dynamic_map_get(%__Map_Header %278, %__Map_Key %281)
	%283 = icmp ne %..rawptr %282, null
	%284 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 1
	store i1 %283, i1* %284
	br i1 %283, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%285 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 0
	%286 = bitcast %..rawptr %282 to i32*
	%287 = load i32, i32* %286, align 4
	store i32 %287, i32* %285
	br label %map.get.done-7

map.get.done-7:
	%288 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 0
	%289 = load i32, i32* %288, align 4
	; cast - cast
	%290 = bitcast i32 %289 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %290)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%291 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%292 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %291, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %29
	store %__Map_Header zeroinitializer, %__Map_Header* %30
	%293 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 0
	%294 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %292 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %294, %Raw_Dynamic_Map** %293
	%295 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 1
	store i1 true, i1* %295
	%296 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 2
	store i64 40, i64* %296
	%297 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 3
	store i64 8, i64* %297
	%298 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 4
	store i64 32, i64* %298
	%299 = load %__Map_Header, %__Map_Header* %30, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %31
	%300 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 0
	store i64 3769135706557701272, i64* %300
	%301 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1b9, i64 0, i32 0), i64 5}, %..string* %301
	%302 = load %__Map_Key, %__Map_Key* %31, align 8
	%303 = call %..rawptr @.__dynamic_map_get(%__Map_Header %299, %__Map_Key %302)
	%304 = icmp ne %..rawptr %303, null
	%305 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 1
	store i1 %304, i1* %305
	br i1 %304, label %map.get.then-8, label %map.get.done-9

map.get.then-8:
	%306 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 0
	%307 = bitcast %..rawptr %303 to i32*
	%308 = load i32, i32* %307, align 4
	store i32 %308, i32* %306
	br label %map.get.done-9

map.get.done-9:
	%309 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 0
	%310 = load i32, i32* %309, align 4
	; cast - cast
	%311 = bitcast i32 %310 to i32
	call void @.jaze_gl-14.EnableVertexAttribArray(i32 %311)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%312 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%313 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %312, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %32
	store %__Map_Header zeroinitializer, %__Map_Header* %33
	%314 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 0
	%315 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %313 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %315, %Raw_Dynamic_Map** %314
	%316 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 1
	store i1 true, i1* %316
	%317 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 2
	store i64 40, i64* %317
	%318 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 3
	store i64 8, i64* %318
	%319 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 4
	store i64 32, i64* %319
	%320 = load %__Map_Header, %__Map_Header* %33, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %34
	%321 = getelementptr inbounds %__Map_Key, %__Map_Key* %34, i64 0, i32 0
	store i64 -4512294542364210646, i64* %321
	%322 = getelementptr inbounds %__Map_Key, %__Map_Key* %34, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1ba, i64 0, i32 0), i64 8}, %..string* %322
	%323 = load %__Map_Key, %__Map_Key* %34, align 8
	%324 = call %..rawptr @.__dynamic_map_get(%__Map_Header %320, %__Map_Key %323)
	%325 = icmp ne %..rawptr %324, null
	%326 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 1
	store i1 %325, i1* %326
	br i1 %325, label %map.get.then-10, label %map.get.done-11

map.get.then-10:
	%327 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 0
	%328 = bitcast %..rawptr %324 to i32*
	%329 = load i32, i32* %328, align 4
	store i32 %329, i32* %327
	br label %map.get.done-11

map.get.done-11:
	%330 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 0
	%331 = load i32, i32* %330, align 4
	; cast - cast
	%332 = bitcast i32 %331 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %332, i32 2, i32 5126, i1 false, i32 20, %..rawptr null)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%333 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%334 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %333, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %35
	store %__Map_Header zeroinitializer, %__Map_Header* %36
	%335 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 0
	%336 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %334 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %336, %Raw_Dynamic_Map** %335
	%337 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 1
	store i1 true, i1* %337
	%338 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 2
	store i64 40, i64* %338
	%339 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 3
	store i64 8, i64* %339
	%340 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 4
	store i64 32, i64* %340
	%341 = load %__Map_Header, %__Map_Header* %36, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %37
	%342 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 0
	store i64 662345837686521650, i64* %342
	%343 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1bb, i64 0, i32 0), i64 2}, %..string* %343
	%344 = load %__Map_Key, %__Map_Key* %37, align 8
	%345 = call %..rawptr @.__dynamic_map_get(%__Map_Header %341, %__Map_Key %344)
	%346 = icmp ne %..rawptr %345, null
	%347 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 1
	store i1 %346, i1* %347
	br i1 %346, label %map.get.then-12, label %map.get.done-13

map.get.then-12:
	%348 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 0
	%349 = bitcast %..rawptr %345 to i32*
	%350 = load i32, i32* %349, align 4
	store i32 %350, i32* %348
	br label %map.get.done-13

map.get.done-13:
	%351 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 0
	%352 = load i32, i32* %351, align 4
	; cast - cast
	%353 = bitcast i32 %352 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %353, i32 2, i32 5126, i1 false, i32 20, %..rawptr inttoptr (i64 8 to %..rawptr))
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%354 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%355 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %354, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %38
	store %__Map_Header zeroinitializer, %__Map_Header* %39
	%356 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 0
	%357 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %355 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %357, %Raw_Dynamic_Map** %356
	%358 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 1
	store i1 true, i1* %358
	%359 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 2
	store i64 40, i64* %359
	%360 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 3
	store i64 8, i64* %360
	%361 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 4
	store i64 32, i64* %361
	%362 = load %__Map_Header, %__Map_Header* %39, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %40
	%363 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 0
	store i64 3769135706557701272, i64* %363
	%364 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1bc, i64 0, i32 0), i64 5}, %..string* %364
	%365 = load %__Map_Key, %__Map_Key* %40, align 8
	%366 = call %..rawptr @.__dynamic_map_get(%__Map_Header %362, %__Map_Key %365)
	%367 = icmp ne %..rawptr %366, null
	%368 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 1
	store i1 %367, i1* %368
	br i1 %367, label %map.get.then-14, label %map.get.done-15

map.get.then-14:
	%369 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 0
	%370 = bitcast %..rawptr %366 to i32*
	%371 = load i32, i32* %370, align 4
	store i32 %371, i32* %369
	br label %map.get.done-15

map.get.done-15:
	%372 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 0
	%373 = load i32, i32* %372, align 4
	; cast - cast
	%374 = bitcast i32 %373 to i32
	call void @.jaze_gl-14.VertexAttribPointer(i32 %374, i32 4, i32 5121, i1 true, i32 20, %..rawptr inttoptr (i64 16 to %..rawptr))
	; pixels
	store i8* zeroinitializer, i8** %41
		; width
	store i32 zeroinitializer, i32* %42
		; height
	store i32 zeroinitializer, i32* %43
		; bytePer
	store i32 zeroinitializer, i32* %44
		; SelectorExpr
	%375 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%376 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %375, i64 0
	%377 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %376, i64 0, i32 12
	%378 = load %imgui-10.FontAtlas*, %imgui-10.FontAtlas** %377, align 8
	%379 = getelementptr inbounds i8*, i8** %41, i64 0
	%380 = getelementptr inbounds i32, i32* %42, i64 0
	%381 = getelementptr inbounds i32, i32* %43, i64 0
	%382 = getelementptr inbounds i32, i32* %44, i64 0
	call ccc void @ImFontAtlas_GetTexDataAsRGBA32(%imgui-10.FontAtlas* %378, i8** %379, i32* %380, i32* %381, i32* %382)
	; AssignStmt
	; SelectorExpr
	%383 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 5
	; SelectorExpr
	%384 = call i32 @.jaze_gl-14.GenTexture()
	store i32 %384, i32* %383
	; SelectorExpr
	; SelectorExpr
	%385 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 5
	%386 = load i32, i32* %385, align 4
	call void @.jaze_gl-14.BindTexture(i32 3553, i32 %386)
	; SelectorExpr
	call void @.jaze_gl-14.TexParameteri(i32 3553, i32 10241, i32 9729)
	; SelectorExpr
	call void @.jaze_gl-14.TexParameteri(i32 3553, i32 10240, i32 9729)
	; SelectorExpr
	%387 = load i32, i32* %42, align 4
	%388 = load i32, i32* %43, align 4
	%389 = load i8*, i8** %41, align 8
	%390 = bitcast i8* %389 to %..rawptr
	call void @.jaze_gl-14.TexImage2D(i32 3553, i32 0, i32 6408, i32 %387, i32 %388, i32 6408, i32 5121, %..rawptr %390)
	; SelectorExpr
	%391 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%392 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %391, i64 0
	%393 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %392, i64 0, i32 12
	%394 = load %imgui-10.FontAtlas*, %imgui-10.FontAtlas** %393, align 8
	; SelectorExpr
	%395 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 5
	%396 = getelementptr inbounds i32, i32* %395, i64 0
	; cast - cast
	%397 = bitcast i32* %396 to %..rawptr
	call ccc void @ImFontAtlas_SetTexID(%imgui-10.FontAtlas* %394, %..rawptr %397)
	; append
	; SelectorExpr
	; SelectorExpr
	%398 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 1
	%399 = bitcast {i32*, i64, i64,%Allocator}* %398 to %..rawptr
	; SelectorExpr
	; SelectorExpr
	%400 = getelementptr inbounds %jaze_gl-14.DebugInfo_t, %jaze_gl-14.DebugInfo_t* @.DebugInfo, i64 0, i32 1
	%401 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %400, align 8
	; SelectorExpr
	%402 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 5
	%403 = load i32, i32* %402, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %45
	store [1 x i32] zeroinitializer, [1 x i32]* %46
	%404 = getelementptr inbounds [1 x i32], [1 x i32]* %46, i64 0, i32 0
	store i32 %403, i32* %404
	%405 = getelementptr inbounds [1 x i32], [1 x i32]* %46, i64 0, i32 0
	%406 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %45, i64 0, i32 0
	store i32* %405, i32** %406
	%407 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %45, i64 0, i32 1
	store i64 1, i64* %407
	%408 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %45, i64 0, i32 2
	store i64 1, i64* %408
	%409 = load {i32*, i64, i64}, {i32*, i64, i64}* %45, align 8
	%410 = extractvalue {i32*, i64, i64} %409, 0
	%411 = extractvalue {i32*, i64, i64} %409, 1
	%412 = bitcast i32* %410 to %..rawptr
	%413 = call i64 @.__dynamic_array_append(%..rawptr %399, i64 4, i64 4, %..rawptr %412, i64 %411)
	call void @.jaze_imgui-17.SetStyle()
	ret void
}

define void @.jaze_imgui-17.BeginNewFrame(double %deltaTime) {
decls-0:
	%0 = alloca double, align 8
	%1 = alloca %imgui-10.GuiIO*, align 8
	%2 = alloca %windows-8.Rect, align 4
	%3 = alloca %windows-8.Point, align 4
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store double zeroinitializer, double* %0
		store double %deltaTime, double* %0
	; io
	store %imgui-10.GuiIO* zeroinitializer, %imgui-10.GuiIO** %1
		%10 = call ccc %imgui-10.GuiIO* @igGetIO()
	store %imgui-10.GuiIO* %10, %imgui-10.GuiIO** %1
	; rect
	store %windows-8.Rect zeroinitializer, %windows-8.Rect* %2
		; SelectorExpr
	; SelectorExpr
	%11 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%12 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %11, i64 0
	%13 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %12, i64 0, i32 28
	%14 = load %..rawptr, %..rawptr* %13, align 8
	; cast - cast
	%15 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %2, i64 0
	%16 = call ccc i32 @GetClientRect(%..rawptr %14, %windows-8.Rect* %15)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%17 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%18 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %17, i64 0
	%19 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %18, i64 0, i32 0
	%20 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %19, i64 0, i32 0
	; SelectorExpr
	%21 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %2, i64 0, i32 2
	%22 = load i32, i32* %21, align 4
	; cast - cast
	%23 = sitofp i32 %22 to float
	store float %23, float* %20
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%25 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %24, i64 0
	%26 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %25, i64 0, i32 0
	%27 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %26, i64 0, i32 1
	; SelectorExpr
	%28 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %2, i64 0, i32 3
	%29 = load i32, i32* %28, align 4
	; cast - cast
	%30 = sitofp i32 %29 to float
	store float %30, float* %27
	; IfStmt
	; SelectorExpr
	%31 = call ccc %..rawptr @GetActiveWindow()
	; SelectorExpr
	%32 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%33 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %32, i64 0
	%34 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %33, i64 0, i32 28
	%35 = load %..rawptr, %..rawptr* %34, align 8
	; cast - cast
	%36 = icmp eq %..rawptr %31, %35
	br i1 %36, label %if.then-1, label %if.else-13

if.then-1:
	; pos
	store %windows-8.Point zeroinitializer, %windows-8.Point* %3
		; SelectorExpr
	%37 = getelementptr inbounds %windows-8.Point, %windows-8.Point* %3, i64 0
	%38 = call ccc i32 @GetCursorPos(%windows-8.Point* %37)
	; SelectorExpr
	; SelectorExpr
	%39 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%40 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %39, i64 0
	%41 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %40, i64 0, i32 28
	%42 = load %..rawptr, %..rawptr* %41, align 8
	; cast - cast
	%43 = getelementptr inbounds %windows-8.Point, %windows-8.Point* %3, i64 0
	%44 = call ccc i32 @ScreenToClient(%..rawptr %42, %windows-8.Point* %43)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%45 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%46 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %45, i64 0
	%47 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %46, i64 0, i32 29
	%48 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %47, i64 0, i32 0
	; SelectorExpr
	%49 = getelementptr inbounds %windows-8.Point, %windows-8.Point* %3, i64 0, i32 0
	%50 = load i32, i32* %49, align 4
	; cast - cast
	%51 = sitofp i32 %50 to float
	store float %51, float* %48
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%52 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%53 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %52, i64 0
	%54 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %53, i64 0, i32 29
	%55 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %54, i64 0, i32 1
	; SelectorExpr
	%56 = getelementptr inbounds %windows-8.Point, %windows-8.Point* %3, i64 0, i32 1
	%57 = load i32, i32* %56, align 4
	; cast - cast
	%58 = sitofp i32 %57 to float
	store float %58, float* %55
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%59 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%60 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %59, i64 0
	%61 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %60, i64 0, i32 30
	%62 = getelementptr inbounds [5 x i1], [5 x i1]* %61, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1bd, i64 0, i32 0), i64 27}, i64 202, i64 22, i64 0, i64 5)
	; SelectorExpr
	%63 = call i1 @.windows-8.is_key_down(i32 1)
	store i1 %63, i1* %62
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%64 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%65 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %64, i64 0
	%66 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %65, i64 0, i32 30
	%67 = getelementptr inbounds [5 x i1], [5 x i1]* %66, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1be, i64 0, i32 0), i64 27}, i64 203, i64 22, i64 1, i64 5)
	; SelectorExpr
	%68 = call i1 @.windows-8.is_key_down(i32 2)
	store i1 %68, i1* %67
	; AssignStmt
	; SelectorExpr
	%69 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%70 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %69, i64 0
	%71 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %70, i64 0, i32 31
	; SelectorExpr
	%72 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 1
	%73 = load i32, i32* %72, align 4
	; cast - cast
	%74 = sitofp i32 %73 to float
	store float %74, float* %71
	; AssignStmt
	; SelectorExpr
	%75 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%76 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %75, i64 0
	%77 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %76, i64 0, i32 33
	; SelectorExpr
	%78 = call i1 @.windows-8.is_key_down(i32 162)
	; SelectorExpr
	%79 = call i1 @.windows-8.is_key_down(i32 162)
	br i1 %79, label %logical.cmp.done-3, label %logical.cmp.rhs-2

logical.cmp.rhs-2:
	; SelectorExpr
	%80 = call i1 @.windows-8.is_key_down(i32 163)
	br label %logical.cmp.done-3

logical.cmp.done-3:
	%81 = phi i1 [ true, %if.then-1 ], [ %80, %logical.cmp.rhs-2 ]
	store i1 %81, i1* %77
	; AssignStmt
	; SelectorExpr
	%82 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%83 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %82, i64 0
	%84 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %83, i64 0, i32 34
	; SelectorExpr
	%85 = call i1 @.windows-8.is_key_down(i32 160)
	; SelectorExpr
	%86 = call i1 @.windows-8.is_key_down(i32 160)
	br i1 %86, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; SelectorExpr
	%87 = call i1 @.windows-8.is_key_down(i32 161)
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%88 = phi i1 [ true, %logical.cmp.done-3 ], [ %87, %logical.cmp.rhs-4 ]
	store i1 %88, i1* %84
	; AssignStmt
	; SelectorExpr
	%89 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%90 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %89, i64 0
	%91 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %90, i64 0, i32 35
	; SelectorExpr
	%92 = call i1 @.windows-8.is_key_down(i32 164)
	; SelectorExpr
	%93 = call i1 @.windows-8.is_key_down(i32 164)
	br i1 %93, label %logical.cmp.done-7, label %logical.cmp.rhs-6

logical.cmp.rhs-6:
	; SelectorExpr
	%94 = call i1 @.windows-8.is_key_down(i32 165)
	br label %logical.cmp.done-7

logical.cmp.done-7:
	%95 = phi i1 [ true, %logical.cmp.done-5 ], [ %94, %logical.cmp.rhs-6 ]
	store i1 %95, i1* %91
	; AssignStmt
	; SelectorExpr
	%96 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%97 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %96, i64 0
	%98 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %97, i64 0, i32 36
	; SelectorExpr
	%99 = call i1 @.windows-8.is_key_down(i32 91)
	; SelectorExpr
	%100 = call i1 @.windows-8.is_key_down(i32 91)
	br i1 %100, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; SelectorExpr
	%101 = call i1 @.windows-8.is_key_down(i32 92)
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%102 = phi i1 [ true, %logical.cmp.done-7 ], [ %101, %logical.cmp.rhs-8 ]
	store i1 %102, i1* %98
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %4
		store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.interval.loop-10

for.interval.loop-10:
	%103 = load i64, i64* %5, align 8
	%104 = icmp slt i64 %103, 257
	br i1 %104, label %for.interval.body-11, label %for.interval.done-12

for.interval.body-11:
	%105 = load i64, i64* %5, align 8
	%106 = load i64, i64* %6, align 8
	%107 = load i64, i64* %5, align 8
	%108 = add i64 %107, 1
	store i64 %108, i64* %5
	%109 = load i64, i64* %6, align 8
	%110 = add i64 %109, 1
	store i64 %110, i64* %6
	store i64 %105, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%111 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%112 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %111, i64 0
	%113 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %112, i64 0, i32 37
	%114 = load i64, i64* %4, align 8
	%115 = trunc i64 %114 to i32
	%116 = getelementptr inbounds [512 x i1], [512 x i1]* %113, i64 0, i32 %115
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1bf, i64 0, i32 0), i64 27}, i64 213, i64 25, i64 %114, i64 512)
	; SelectorExpr
	%117 = load i64, i64* %4, align 8
	; cast - cast
	%118 = trunc i64 %117 to i32
	%119 = call i1 @.windows-8.is_key_down(i32 %118)
	store i1 %119, i1* %116
	br label %for.interval.loop-10

for.interval.done-12:
	br label %if.done-17

if.else-13:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%120 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%121 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %120, i64 0
	%122 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %121, i64 0, i32 30
	%123 = getelementptr inbounds [5 x i1], [5 x i1]* %122, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1c0, i64 0, i32 0), i64 27}, i64 216, i64 22, i64 0, i64 5)
	store i1 false, i1* %123
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%124 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%125 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %124, i64 0
	%126 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %125, i64 0, i32 30
	%127 = getelementptr inbounds [5 x i1], [5 x i1]* %126, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1c1, i64 0, i32 0), i64 27}, i64 217, i64 22, i64 1, i64 5)
	store i1 false, i1* %127
	; AssignStmt
	; SelectorExpr
	%128 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%129 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %128, i64 0
	%130 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %129, i64 0, i32 33
	store i1 false, i1* %130
	; AssignStmt
	; SelectorExpr
	%131 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%132 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %131, i64 0
	%133 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %132, i64 0, i32 34
	store i1 false, i1* %133
	; AssignStmt
	; SelectorExpr
	%134 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%135 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %134, i64 0
	%136 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %135, i64 0, i32 35
	store i1 false, i1* %136
	; AssignStmt
	; SelectorExpr
	%137 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%138 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %137, i64 0
	%139 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %138, i64 0, i32 36
	store i1 false, i1* %139
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %7
		store i64 zeroinitializer, i64* %8
	store i64 0, i64* %8
	store i64 zeroinitializer, i64* %9
	store i64 0, i64* %9
	br label %for.interval.loop-14

for.interval.loop-14:
	%140 = load i64, i64* %8, align 8
	%141 = icmp slt i64 %140, 256
	br i1 %141, label %for.interval.body-15, label %for.interval.done-16

for.interval.body-15:
	%142 = load i64, i64* %8, align 8
	%143 = load i64, i64* %9, align 8
	%144 = load i64, i64* %8, align 8
	%145 = add i64 %144, 1
	store i64 %145, i64* %8
	%146 = load i64, i64* %9, align 8
	%147 = add i64 %146, 1
	store i64 %147, i64* %9
	store i64 %142, i64* %7
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%148 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%149 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %148, i64 0
	%150 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %149, i64 0, i32 37
	%151 = load i64, i64* %7, align 8
	%152 = trunc i64 %151 to i32
	%153 = getelementptr inbounds [512 x i1], [512 x i1]* %150, i64 0, i32 %152
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1c2, i64 0, i32 0), i64 27}, i64 224, i64 25, i64 %151, i64 512)
	store i1 false, i1* %153
	br label %for.interval.loop-14

for.interval.done-16:
	br label %if.done-17

if.done-17:
	; AssignStmt
	; SelectorExpr
	%154 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 1
	store i32 0, i32* %154
	; AssignStmt
	; SelectorExpr
	%155 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%156 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %155, i64 0
	%157 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %156, i64 0, i32 1
	%158 = load double, double* %0, align 8
	; cast - cast
	%159 = fptrunc double %158 to float
	store float %159, float* %157
	call ccc void @igNewFrame()
	ret void
}

define ccc void @.jaze_imgui-17.RenderProc(%imgui-10.DrawData* %data) {
decls-0:
	%0 = alloca %imgui-10.DrawData*, align 8
	%1 = alloca %imgui-10.GuiIO*, align 8
	%2 = alloca %windows-8.Rect, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca [4 x [4 x float]], align 4
	%6 = alloca [4 x [4 x float]], align 4
	%7 = alloca [4 x float], align 4
	%8 = alloca [4 x float], align 4
	%9 = alloca {i32, i1}, align 4
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca {i32, i1}, align 4
	%13 = alloca %__Map_Header, align 8
	%14 = alloca %__Map_Key, align 8
	%15 = alloca {%imgui-10.DrawList**, i64, i64}, align 8
	%16 = alloca {%imgui-10.DrawList**, i64, i64}, align 8
	%17 = alloca i32, align 4
	%18 = alloca %imgui-10.DrawList*, align 8
	%19 = alloca i16*, align 8
	%20 = alloca i32, align 4
	%21 = alloca %imgui-10.DrawCmd*, align 8
	store %imgui-10.DrawData* zeroinitializer, %imgui-10.DrawData** %0
		store %imgui-10.DrawData* %data, %imgui-10.DrawData** %0
	; io
	store %imgui-10.GuiIO* zeroinitializer, %imgui-10.GuiIO** %1
		%22 = call ccc %imgui-10.GuiIO* @igGetIO()
	store %imgui-10.GuiIO* %22, %imgui-10.GuiIO** %1
	; rect
	store %windows-8.Rect zeroinitializer, %windows-8.Rect* %2
		; SelectorExpr
	; SelectorExpr
	%23 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%24 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %23, i64 0
	%25 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %24, i64 0, i32 28
	%26 = load %..rawptr, %..rawptr* %25, align 8
	; cast - cast
	%27 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %2, i64 0
	%28 = call ccc i32 @GetClientRect(%..rawptr %26, %windows-8.Rect* %27)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%29 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%30 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %29, i64 0
	%31 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %30, i64 0, i32 0
	%32 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %31, i64 0, i32 0
	; SelectorExpr
	%33 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %2, i64 0, i32 2
	%34 = load i32, i32* %33, align 4
	; cast - cast
	%35 = sitofp i32 %34 to float
	store float %35, float* %32
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%36 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%37 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %36, i64 0
	%38 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %37, i64 0, i32 0
	%39 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %38, i64 0, i32 1
	; SelectorExpr
	%40 = getelementptr inbounds %windows-8.Rect, %windows-8.Rect* %2, i64 0, i32 3
	%41 = load i32, i32* %40, align 4
	; cast - cast
	%42 = sitofp i32 %41 to float
	store float %42, float* %39
	; width
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	; SelectorExpr
	%43 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%44 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %43, i64 0
	%45 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %44, i64 0, i32 0
	%46 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %45, i64 0, i32 0
	%47 = load float, float* %46, align 4
	; SelectorExpr
	; SelectorExpr
	%48 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%49 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %48, i64 0
	%50 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %49, i64 0, i32 15
	%51 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %50, i64 0, i32 0
	%52 = load float, float* %51, align 4
	%53 = fmul float %47, %52
	; cast - cast
	%54 = fptosi float %53 to i32
	store i32 %54, i32* %3
	; height
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	; SelectorExpr
	%55 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%56 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %55, i64 0
	%57 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %56, i64 0, i32 0
	%58 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %57, i64 0, i32 1
	%59 = load float, float* %58, align 4
	; SelectorExpr
	; SelectorExpr
	%60 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%61 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %60, i64 0
	%62 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %61, i64 0, i32 15
	%63 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %62, i64 0, i32 1
	%64 = load float, float* %63, align 4
	%65 = fmul float %59, %64
	; cast - cast
	%66 = fptosi float %65 to i32
	store i32 %66, i32* %4
	; IfStmt
	%67 = load i32, i32* %4, align 4
	%68 = icmp eq i32 %67, 0
	br i1 %68, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%69 = load i32, i32* %3, align 4
	%70 = icmp eq i32 %69, 0
	br i1 %70, label %if.then-2, label %if.done-3

if.then-2:
	br label %if.done-3

if.done-3:
	; SelectorExpr
	call void @.jaze_gl-14.Enable(i32 3042)
	; SelectorExpr
	call void @.jaze_gl-14.BlendEquation(i32 32774)
	; SelectorExpr
	call void @.jaze_gl-14.BlendFunc(i32 770, i32 771)
	; SelectorExpr
	call void @.jaze_gl-14.Disable(i32 2884)
	; SelectorExpr
	call void @.jaze_gl-14.Disable(i32 2929)
	; SelectorExpr
	call void @.jaze_gl-14.Enable(i32 3089)
	; SelectorExpr
	call void @.jaze_gl-14.ActiveTexture(i32 33984)
	; SelectorExpr
	%71 = load i32, i32* %3, align 4
	%72 = load i32, i32* %4, align 4
	call ccc void @glViewport(i32 0, i32 0, i32 %71, i32 %72)
	; ortho_projection
	store [4 x [4 x float]] zeroinitializer, [4 x [4 x float]]* %5
		; CompoundLit
	store [4 x [4 x float]] zeroinitializer, [4 x [4 x float]]* %6
	store [4 x [4 x float]] [[4 x float] zeroinitializer, [4 x float] zeroinitializer, [4 x float] [float 0x0000000000000000, float 0x0000000000000000, float 0xbff0000000000000, float 0x0000000000000000], [4 x float] [float 0xbff0000000000000, float 0x3ff0000000000000, float 0x0000000000000000, float 0x3ff0000000000000]], [4 x [4 x float]]* %6
	; CompoundLit
	store [4 x float] zeroinitializer, [4 x float]* %7
	store [4 x float] [float zeroinitializer, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000], [4 x float]* %7
	; SelectorExpr
	; SelectorExpr
	%73 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%74 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %73, i64 0
	%75 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %74, i64 0, i32 0
	%76 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %75, i64 0, i32 0
	%77 = load float, float* %76, align 4
	%78 = fdiv float 0x4000000000000000, %77
	%79 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i32 0
	store float %78, float* %79
	%80 = load [4 x float], [4 x float]* %7, align 4
	%81 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %6, i64 0, i32 0
	store [4 x float] %80, [4 x float]* %81
	; CompoundLit
	store [4 x float] zeroinitializer, [4 x float]* %8
	store [4 x float] [float 0x0000000000000000, float zeroinitializer, float 0x0000000000000000, float 0x0000000000000000], [4 x float]* %8
	; SelectorExpr
	; SelectorExpr
	%82 = load %imgui-10.GuiIO*, %imgui-10.GuiIO** %1, align 8
	%83 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %82, i64 0
	%84 = getelementptr inbounds %imgui-10.GuiIO, %imgui-10.GuiIO* %83, i64 0, i32 0
	%85 = getelementptr inbounds %imgui-10.Vec2, %imgui-10.Vec2* %84, i64 0, i32 1
	%86 = load float, float* %85, align 4
	%87 = fsub float 0x0000000000000000, %86
	%88 = fdiv float 0x4000000000000000, %87
	%89 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i32 1
	store float %88, float* %89
	%90 = load [4 x float], [4 x float]* %8, align 4
	%91 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %6, i64 0, i32 1
	store [4 x float] %90, [4 x float]* %91
	%92 = load [4 x [4 x float]], [4 x [4 x float]]* %6, align 4
	store [4 x [4 x float]] %92, [4 x [4 x float]]* %5
	; SelectorExpr
	; SelectorExpr
	%93 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%94 = load %jaze_gl-14.Program, %jaze_gl-14.Program* %93, align 8
	call void @.jaze_gl-14.UseProgram(%jaze_gl-14.Program %94)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%95 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%96 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %95, i64 0, i32 0
	store {i32, i1} zeroinitializer, {i32, i1}* %9
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%97 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%98 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %96 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %98, %Raw_Dynamic_Map** %97
	%99 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %99
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %100
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %101
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %102
	%103 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%104 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 2829778445906215252, i64* %104
	%105 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1c3, i64 0, i32 0), i64 7}, %..string* %105
	%106 = load %__Map_Key, %__Map_Key* %11, align 8
	%107 = call %..rawptr @.__dynamic_map_get(%__Map_Header %103, %__Map_Key %106)
	%108 = icmp ne %..rawptr %107, null
	%109 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 1
	store i1 %108, i1* %109
	br i1 %108, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%110 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 0
	%111 = bitcast %..rawptr %107 to i32*
	%112 = load i32, i32* %111, align 4
	store i32 %112, i32* %110
	br label %map.get.done-5

map.get.done-5:
	%113 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 0
	%114 = load i32, i32* %113, align 4
	call void @.jaze_gl-14.Uniform-1824837648256(i32 %114, i32 0)
	; SelectorExpr
	%115 = load void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)** @._UniformMatrix4fv, align 8
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%116 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 0
	%117 = getelementptr inbounds %jaze_gl-14.Program, %jaze_gl-14.Program* %116, i64 0, i32 0
	store {i32, i1} zeroinitializer, {i32, i1}* %12
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	%118 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 0
	%119 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %117 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %119, %Raw_Dynamic_Map** %118
	%120 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 1
	store i1 true, i1* %120
	%121 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 2
	store i64 40, i64* %121
	%122 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 3
	store i64 8, i64* %122
	%123 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 4
	store i64 32, i64* %123
	%124 = load %__Map_Header, %__Map_Header* %13, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %14
	%125 = getelementptr inbounds %__Map_Key, %__Map_Key* %14, i64 0, i32 0
	store i64 -9017138883755609675, i64* %125
	%126 = getelementptr inbounds %__Map_Key, %__Map_Key* %14, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1c4, i64 0, i32 0), i64 7}, %..string* %126
	%127 = load %__Map_Key, %__Map_Key* %14, align 8
	%128 = call %..rawptr @.__dynamic_map_get(%__Map_Header %124, %__Map_Key %127)
	%129 = icmp ne %..rawptr %128, null
	%130 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 1
	store i1 %129, i1* %130
	br i1 %129, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%131 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 0
	%132 = bitcast %..rawptr %128 to i32*
	%133 = load i32, i32* %132, align 4
	store i32 %133, i32* %131
	br label %map.get.done-7

map.get.done-7:
	%134 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 0
	%135 = load i32, i32* %134, align 4
	; IndexExpr
	; IndexExpr
	%136 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %5, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1c5, i64 0, i32 0), i64 27}, i64 267, i64 89, i64 0, i64 4)
	%137 = getelementptr inbounds [4 x float], [4 x float]* %136, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1c6, i64 0, i32 0), i64 27}, i64 267, i64 92, i64 0, i64 4)
	%138 = getelementptr inbounds float, float* %137, i64 0
	call ccc void %115(i32 %135, i32 1, i32 0, float* %138)
	; SelectorExpr
	; SelectorExpr
	%139 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 4
	%140 = load i32, i32* %139, align 4
	call void @.jaze_gl-14.BindVertexArray(i32 %140)
	; newList
	store {%imgui-10.DrawList**, i64, i64} zeroinitializer, {%imgui-10.DrawList**, i64, i64}* %15
		; slice_ptr
	; SelectorExpr
	%141 = load %imgui-10.DrawData*, %imgui-10.DrawData** %0, align 8
	%142 = getelementptr inbounds %imgui-10.DrawData, %imgui-10.DrawData* %141, i64 0
	%143 = getelementptr inbounds %imgui-10.DrawData, %imgui-10.DrawData* %142, i64 0, i32 1
	%144 = load %imgui-10.DrawList**, %imgui-10.DrawList*** %143, align 8
	; SelectorExpr
	%145 = load %imgui-10.DrawData*, %imgui-10.DrawData** %0, align 8
	%146 = getelementptr inbounds %imgui-10.DrawData, %imgui-10.DrawData* %145, i64 0
	%147 = getelementptr inbounds %imgui-10.DrawData, %imgui-10.DrawData* %146, i64 0, i32 2
	%148 = load i32, i32* %147, align 4
	%149 = sext i32 %148 to i64
	store {%imgui-10.DrawList**, i64, i64} zeroinitializer, {%imgui-10.DrawList**, i64, i64}* %16
	%150 = getelementptr inbounds {%imgui-10.DrawList**, i64, i64}, {%imgui-10.DrawList**, i64, i64}* %16, i64 0, i32 0
	store %imgui-10.DrawList** %144, %imgui-10.DrawList*** %150
	%151 = getelementptr inbounds {%imgui-10.DrawList**, i64, i64}, {%imgui-10.DrawList**, i64, i64}* %16, i64 0, i32 1
	store i64 %149, i64* %151
	%152 = getelementptr inbounds {%imgui-10.DrawList**, i64, i64}, {%imgui-10.DrawList**, i64, i64}* %16, i64 0, i32 2
	store i64 %149, i64* %152
	%153 = load {%imgui-10.DrawList**, i64, i64}, {%imgui-10.DrawList**, i64, i64}* %16, align 8
	store {%imgui-10.DrawList**, i64, i64} %153, {%imgui-10.DrawList**, i64, i64}* %15
	; ForStmt
	; n
	store i32 zeroinitializer, i32* %17
		store i32 0, i32* %17
	br label %for.loop-8

for.loop-8:
	%154 = load i32, i32* %17, align 4
	; SelectorExpr
	%155 = load %imgui-10.DrawData*, %imgui-10.DrawData** %0, align 8
	%156 = getelementptr inbounds %imgui-10.DrawData, %imgui-10.DrawData* %155, i64 0
	%157 = getelementptr inbounds %imgui-10.DrawData, %imgui-10.DrawData* %156, i64 0, i32 2
	%158 = load i32, i32* %157, align 4
	%159 = icmp slt i32 %154, %158
	br i1 %159, label %for.body-9, label %for.done-13

for.body-9:
	; list
	store %imgui-10.DrawList* zeroinitializer, %imgui-10.DrawList** %18
		; IndexExpr
	%160 = load {%imgui-10.DrawList**, i64, i64}, {%imgui-10.DrawList**, i64, i64}* %15, align 8
	%161 = extractvalue {%imgui-10.DrawList**, i64, i64} %160, 0
	%162 = extractvalue {%imgui-10.DrawList**, i64, i64} %160, 1
	%163 = load i32, i32* %17, align 4
	%164 = sext i32 %163 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$1c7, i64 0, i32 0), i64 27}, i64 272, i64 25, i64 %164, i64 %162)
	%165 = getelementptr inbounds %imgui-10.DrawList*, %imgui-10.DrawList** %161, i64 %164
	%166 = load %imgui-10.DrawList*, %imgui-10.DrawList** %165, align 8
	store %imgui-10.DrawList* %166, %imgui-10.DrawList** %18
	; idxBufferOffset
	store i16* zeroinitializer, i16** %19
		store i16* zeroinitializer, i16** %19
	; SelectorExpr
	; SelectorExpr
	%167 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 2
	%168 = load i32, i32* %167, align 4
	call void @.jaze_gl-14.BindBuffer-1824837645680(i32 %168)
	; SelectorExpr
	%169 = load %imgui-10.DrawList*, %imgui-10.DrawList** %18, align 8
	%170 = call ccc i32 @ImDrawList_GetVertexBufferSize(%imgui-10.DrawList* %169)
	%171 = mul i32 %170, 20
	; cast - cast
	%172 = load %imgui-10.DrawList*, %imgui-10.DrawList** %18, align 8
	%173 = call ccc %imgui-10.DrawVert* @ImDrawList_GetVertexPtr(%imgui-10.DrawList* %172, i32 0)
	%174 = bitcast %imgui-10.DrawVert* %173 to %..rawptr
	call void @.jaze_gl-14.BufferData(i32 34962, i32 %171, %..rawptr %174, i32 35040)
	; SelectorExpr
	; SelectorExpr
	%175 = getelementptr inbounds %jaze_imgui-17.State_t, %jaze_imgui-17.State_t* @.State, i64 0, i32 3
	%176 = load i32, i32* %175, align 4
	call void @.jaze_gl-14.BindBuffer-1824837646048(i32 %176)
	; SelectorExpr
	%177 = load %imgui-10.DrawList*, %imgui-10.DrawList** %18, align 8
	%178 = call ccc i32 @ImDrawList_GetIndexBufferSize(%imgui-10.DrawList* %177)
	%179 = mul i32 %178, 2
	; cast - cast
	%180 = load %imgui-10.DrawList*, %imgui-10.DrawList** %18, align 8
	%181 = call ccc i16* @ImDrawList_GetIndexPtr(%imgui-10.DrawList* %180, i32 0)
	%182 = bitcast i16* %181 to %..rawptr
	call void @.jaze_gl-14.BufferData(i32 34963, i32 %179, %..rawptr %182, i32 35040)
	; ForStmt
	; j
	store i32 zeroinitializer, i32* %20
		store i32 0, i32* %20
	br label %for.loop-10

for.loop-10:
	%183 = load i32, i32* %20, align 4
	%184 = load %imgui-10.DrawList*, %imgui-10.DrawList** %18, align 8
	%185 = call ccc i32 @ImDrawList_GetCmdSize(%imgui-10.DrawList* %184)
	%186 = icmp slt i32 %183, %185
	br i1 %186, label %for.body-11, label %for.done-12

for.body-11:
	; cmd
	store %imgui-10.DrawCmd* zeroinitializer, %imgui-10.DrawCmd** %21
		%187 = load %imgui-10.DrawList*, %imgui-10.DrawList** %18, align 8
	%188 = load i32, i32* %20, align 4
	%189 = call ccc %imgui-10.DrawCmd* @ImDrawList_GetCmdPtr(%imgui-10.DrawList* %187, i32 %188)
	store %imgui-10.DrawCmd* %189, %imgui-10.DrawCmd** %21
	; SelectorExpr
	; SelectorExpr
	%190 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%191 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %190, i64 0
	%192 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %191, i64 0, i32 2
	%193 = load %..rawptr, %..rawptr* %192, align 8
	; cast - cast
	%194 = bitcast %..rawptr %193 to i32*
	%195 = getelementptr inbounds i32, i32* %194, i64 0
	%196 = load i32, i32* %195, align 4
	; cast - cast
	call void @.jaze_gl-14.BindTexture(i32 3553, i32 %196)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%197 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%198 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %197, i64 0
	%199 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %198, i64 0, i32 1
	%200 = getelementptr inbounds %imgui-10.Vec4, %imgui-10.Vec4* %199, i64 0, i32 0
	%201 = load float, float* %200, align 4
	; cast - cast
	%202 = fptosi float %201 to i32
	%203 = load i32, i32* %4, align 4
	; SelectorExpr
	; SelectorExpr
	%204 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%205 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %204, i64 0
	%206 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %205, i64 0, i32 1
	%207 = getelementptr inbounds %imgui-10.Vec4, %imgui-10.Vec4* %206, i64 0, i32 3
	%208 = load float, float* %207, align 4
	; cast - cast
	%209 = fptosi float %208 to i32
	%210 = sub i32 %203, %209
	; SelectorExpr
	; SelectorExpr
	%211 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%212 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %211, i64 0
	%213 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %212, i64 0, i32 1
	%214 = getelementptr inbounds %imgui-10.Vec4, %imgui-10.Vec4* %213, i64 0, i32 2
	%215 = load float, float* %214, align 4
	; SelectorExpr
	; SelectorExpr
	%216 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%217 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %216, i64 0
	%218 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %217, i64 0, i32 1
	%219 = getelementptr inbounds %imgui-10.Vec4, %imgui-10.Vec4* %218, i64 0, i32 0
	%220 = load float, float* %219, align 4
	%221 = fsub float %215, %220
	; cast - cast
	%222 = fptosi float %221 to i32
	; SelectorExpr
	; SelectorExpr
	%223 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%224 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %223, i64 0
	%225 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %224, i64 0, i32 1
	%226 = getelementptr inbounds %imgui-10.Vec4, %imgui-10.Vec4* %225, i64 0, i32 3
	%227 = load float, float* %226, align 4
	; SelectorExpr
	; SelectorExpr
	%228 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%229 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %228, i64 0
	%230 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %229, i64 0, i32 1
	%231 = getelementptr inbounds %imgui-10.Vec4, %imgui-10.Vec4* %230, i64 0, i32 1
	%232 = load float, float* %231, align 4
	%233 = fsub float %227, %232
	; cast - cast
	%234 = fptosi float %233 to i32
	call ccc void @glScissor(i32 %202, i32 %210, i32 %222, i32 %234)
	; SelectorExpr
	; SelectorExpr
	%235 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%236 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %235, i64 0
	%237 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %236, i64 0, i32 0
	%238 = load i32, i32* %237, align 4
	; cast - cast
	%239 = bitcast i32 %238 to i32
	%240 = load i16*, i16** %19, align 8
	%241 = bitcast i16* %240 to %..rawptr
	call void @.jaze_gl-14.DrawElements(i32 4, i32 %239, i32 5123, %..rawptr %241)
	; AssignStmt
	; SelectorExpr
	%242 = load %imgui-10.DrawCmd*, %imgui-10.DrawCmd** %21, align 8
	%243 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %242, i64 0
	%244 = getelementptr inbounds %imgui-10.DrawCmd, %imgui-10.DrawCmd* %243, i64 0, i32 0
	%245 = load i32, i32* %244, align 4
	%246 = load i16*, i16** %19, align 8
	%247 = zext i32 %245 to i64
	%248 = getelementptr inbounds i16, i16* %246, i64 %247
	store i16* %248, i16** %19
	; AssignStmt
	%249 = load i32, i32* %20, align 4
	%250 = add i32 %249, 1
	store i32 %250, i32* %20
	br label %for.loop-10

for.done-12:
	; AssignStmt
	%251 = load i32, i32* %17, align 4
	%252 = add i32 %251, 1
	store i32 %252, i32* %17
	br label %for.loop-8

for.done-13:
	; SelectorExpr
	%253 = load i32, i32* %3, align 4
	%254 = load i32, i32* %4, align 4
	call ccc void @glScissor(i32 0, i32 0, i32 %253, i32 %254)
	ret void
}

define i1 @.jaze_xinput-18.Init() {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..any, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [1 x %..any], align 8
	%4 = alloca %..rawptr, align 8
	%5 = alloca %..string, align 8
	%6 = alloca %..string, align 8
	%7 = alloca %..rawptr, align 8
	%8 = alloca %..string, align 8
	; SelectorExpr
	store %..string zeroinitializer, %..string* %0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$1c8, i64 0, i32 0), i64 4}, %..string* %0
	%9 = load %..string, %..string* %0, align 8
	store %..any zeroinitializer, %..any* %1
	%10 = bitcast %..string* %0 to %..rawptr
	%11 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%12 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%13 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	store %Type_Info* %11, %Type_Info** %12
	store %..rawptr %10, %..rawptr* %13
	%14 = load %..any, %..any* %1, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	store [1 x %..any] zeroinitializer, [1 x %..any]* %3
	%15 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	store %..any %14, %..any* %15
	%16 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	%17 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 0
	store %..any* %16, %..any** %17
	%18 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %18
	%19 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %19
	%20 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%21 = call i64 @.fmt-4.println({%..any*, i64, i64} %20)
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	; SelectorExpr
	; Cast - cast
	store %..string zeroinitializer, %..string* %5
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1c9, i64 0, i32 0), i64 14}, %..string* %5
	%22 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%23 = load i8*, i8** %22, align 8
	%24 = call ccc %..rawptr @LoadLibraryA(i8* %23)
	store %..rawptr %24, %..rawptr* %4
	; DeferStmt
	; AssignStmt
	store i64 1, i64* @.Version
	; IfStmt
	%25 = load %..rawptr, %..rawptr* %4, align 8
	%26 = icmp eq %..rawptr %25, zeroinitializer
	br i1 %26, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	; Cast - cast
	store %..string zeroinitializer, %..string* %6
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1ca, i64 0, i32 0), i64 14}, %..string* %6
	%27 = getelementptr inbounds %..string, %..string* %6, i64 0, i32 0
	%28 = load i8*, i8** %27, align 8
	%29 = call ccc %..rawptr @LoadLibraryA(i8* %28)
	store %..rawptr %29, %..rawptr* %4
	; AssignStmt
	store i64 2, i64* @.Version
	br label %if.done-2

if.done-2:
	; IfStmt
	%30 = load %..rawptr, %..rawptr* %4, align 8
	%31 = icmp eq %..rawptr %30, zeroinitializer
	br i1 %31, label %if.then-3, label %if.done-4

if.then-3:
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	; SelectorExpr
	; Cast - cast
	store %..string zeroinitializer, %..string* %8
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$1cb, i64 0, i32 0), i64 16}, %..string* %8
	%32 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	%33 = load i8*, i8** %32, align 8
	%34 = call ccc %..rawptr @LoadLibraryA(i8* %33)
	store %..rawptr %34, %..rawptr* %7
	; AssignStmt
	store i64 3, i64* @.Version
	br label %if.done-4

if.done-4:
	; IfStmt
	%35 = load %..rawptr, %..rawptr* %4, align 8
	%36 = icmp eq %..rawptr %35, zeroinitializer
	br i1 %36, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	store i64 4, i64* @.Version
	; ReturnStmt
	; defer
	; SelectorExpr
	%37 = load %..rawptr, %..rawptr* %4, align 8
	call ccc void @FreeLibrary(%..rawptr %37)
	ret i1 false

if.done-6:
	%38 = load %..rawptr, %..rawptr* %4, align 8
	%39 = getelementptr inbounds void (i32)*, void (i32)** @._Enable, i64 0
	%40 = bitcast void (i32)** %39 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %38, %..rawptr %40, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$1cc, i64 0, i32 0), i64 6})
	%41 = load %..rawptr, %..rawptr* %4, align 8
	%42 = getelementptr inbounds i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)*, i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)** @._GetBatteryInformation, i64 0
	%43 = bitcast i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)** %42 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %41, %..rawptr %43, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1cd, i64 0, i32 0), i64 21})
	%44 = load %..rawptr, %..rawptr* %4, align 8
	%45 = getelementptr inbounds i32 (i32, i32, %jaze_xinput-18.Capabilities*)*, i32 (i32, i32, %jaze_xinput-18.Capabilities*)** @._GetCapabilities, i64 0
	%46 = bitcast i32 (i32, i32, %jaze_xinput-18.Capabilities*)** %45 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %44, %..rawptr %46, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1ce, i64 0, i32 0), i64 15})
	%47 = load %..rawptr, %..rawptr* %4, align 8
	%48 = getelementptr inbounds i32 (i32, i32, %jaze_xinput-18.KeyStroke*)*, i32 (i32, i32, %jaze_xinput-18.KeyStroke*)** @._GetKeystroke, i64 0
	%49 = bitcast i32 (i32, i32, %jaze_xinput-18.KeyStroke*)** %48 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %47, %..rawptr %49, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1cf, i64 0, i32 0), i64 12})
	%50 = load %..rawptr, %..rawptr* %4, align 8
	%51 = getelementptr inbounds void (i32, %jaze_xinput-18.State*)*, void (i32, %jaze_xinput-18.State*)** @._GetState, i64 0
	%52 = bitcast void (i32, %jaze_xinput-18.State*)** %51 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %50, %..rawptr %52, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1d0, i64 0, i32 0), i64 8})
	%53 = load %..rawptr, %..rawptr* %4, align 8
	%54 = getelementptr inbounds void (i32, %jaze_xinput-18.VibrationState)*, void (i32, %jaze_xinput-18.VibrationState)** @._SetState, i64 0
	%55 = bitcast void (i32, %jaze_xinput-18.VibrationState)** %54 to %..rawptr
	call void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %53, %..rawptr %55, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1d1, i64 0, i32 0), i64 8})
	; ReturnStmt
	; defer
	; SelectorExpr
	%56 = load %..rawptr, %..rawptr* %4, align 8
	call ccc void @FreeLibrary(%..rawptr %56)
	ret i1 true
}

define void @.jaze_xinput-18.Init.set_proc_address-0(%..rawptr %h, %..rawptr %p, %..string %name) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i8*, align 8
	%4 = alloca void ()*, align 8
	%5 = alloca %jaze_xinput-18.DebugFunctionLoadStatus, align 8
	%6 = alloca {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, align 8
	%7 = alloca [1 x %jaze_xinput-18.DebugFunctionLoadStatus], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %h, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; txt
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%8 = load %..string, %..string* %2, align 8
	%9 = call i8* @.strings-11.new_c_string(%..string %8)
	store i8* %9, i8** %3
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %4
		; SelectorExpr
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i8*, i8** %3, align 8
	%12 = call ccc void ()* @GetProcAddress(%..rawptr %10, i8* %11)
	store void ()* %12, void ()** %4
	; AssignStmt
	%13 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%14 = bitcast %..rawptr %13 to void ()**
	%15 = getelementptr inbounds void ()*, void ()** %14, i64 0
	%16 = load void ()*, void ()** %4, align 8
	store void ()* %16, void ()** %15
	; status
	store %jaze_xinput-18.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-18.DebugFunctionLoadStatus* %5
		store %jaze_xinput-18.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-18.DebugFunctionLoadStatus* %5
	; AssignStmt
	; SelectorExpr
	%17 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 0
	%18 = load %..string, %..string* %2, align 8
	store %..string %18, %..string* %17
	; AssignStmt
	; SelectorExpr
	%19 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 1
	%20 = load void ()*, void ()** %4, align 8
	; cast - cast
	%21 = bitcast void ()* %20 to %..rawptr
	; cast - cast
	%22 = ptrtoint %..rawptr %21 to i64
	store i64 %22, i64* %19
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 3
	store i1 false, i1* %23
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.DebugInfo, i64 0, i32 1
	%25 = load i32, i32* %24, align 4
	%26 = add i32 %25, 1
	store i32 %26, i32* %24
	; IfStmt
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	%29 = icmp ne i64 %28, 0
	br i1 %29, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%30 = getelementptr inbounds %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, i64 0, i32 3
	store i1 true, i1* %30
	; AssignStmt
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.DebugInfo, i64 0, i32 2
	%32 = load i32, i32* %31, align 4
	%33 = add i32 %32, 1
	store i32 %33, i32* %31
	br label %if.done-2

if.done-2:
	; append
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.DebugInfo, i64 0, i32 0
	%35 = bitcast {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %34 to %..rawptr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_xinput-18.DebugInfo_t, %jaze_xinput-18.DebugInfo_t* @.DebugInfo, i64 0, i32 0
	%37 = load {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %36, align 8
	%38 = load %jaze_xinput-18.DebugFunctionLoadStatus, %jaze_xinput-18.DebugFunctionLoadStatus* %5, align 8
	; variadic call argument generation
	store {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64} zeroinitializer, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6
	store [1 x %jaze_xinput-18.DebugFunctionLoadStatus] zeroinitializer, [1 x %jaze_xinput-18.DebugFunctionLoadStatus]* %7
	%39 = getelementptr inbounds [1 x %jaze_xinput-18.DebugFunctionLoadStatus], [1 x %jaze_xinput-18.DebugFunctionLoadStatus]* %7, i64 0, i32 0
	store %jaze_xinput-18.DebugFunctionLoadStatus %38, %jaze_xinput-18.DebugFunctionLoadStatus* %39
	%40 = getelementptr inbounds [1 x %jaze_xinput-18.DebugFunctionLoadStatus], [1 x %jaze_xinput-18.DebugFunctionLoadStatus]* %7, i64 0, i32 0
	%41 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 0
	store %jaze_xinput-18.DebugFunctionLoadStatus* %40, %jaze_xinput-18.DebugFunctionLoadStatus** %41
	%42 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %42
	%43 = getelementptr inbounds {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %43
	%44 = load {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64}* %6, align 8
	%45 = extractvalue {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64} %44, 0
	%46 = extractvalue {%jaze_xinput-18.DebugFunctionLoadStatus*, i64, i64} %44, 1
	%47 = bitcast %jaze_xinput-18.DebugFunctionLoadStatus* %45 to %..rawptr
	%48 = call i64 @.__dynamic_array_append(%..rawptr %35, i64 40, i64 8, %..rawptr %47, i64 %46)
	; defer
	; free
	%49 = load i8*, i8** %3, align 8
	%50 = bitcast i8* %49 to %..rawptr
	call void @.free_ptr(%..rawptr %50)
	ret void
}

define {i64, i64} @.os_windows-19.write(i64 %fd, {i8*, i64, i64} %data) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {i64, i64}, align 8
	%6 = alloca {i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %1
	; bytes_written
	store i32 zeroinitializer, i32* %2
		; e
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	%7 = load i64, i64* %0, align 8
	; cast - cast
	%8 = inttoptr i64 %7 to %..rawptr
	; SelectorExpr
	%9 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %1, i64 0, i32 0
	%10 = load i8*, i8** %9, align 8
	; SelectorExpr
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %1, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	; cast - cast
	%13 = trunc i64 %12 to i32
	%14 = getelementptr inbounds i32, i32* %2, i64 0
	%15 = bitcast i8* %10 to %..rawptr
	%16 = call ccc i32 @WriteFile(%..rawptr %8, %..rawptr %15, i32 %13, i32* %14, %..rawptr zeroinitializer)
	store i32 %16, i32* %3
	; IfStmt
	%17 = load i32, i32* %3, align 4
	%18 = icmp eq i32 %17, 0
	br i1 %18, label %if.then-1, label %if.done-2

if.then-1:
	; err
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	%19 = call ccc i32 @GetLastError()
	store i32 %19, i32* %4
	; ReturnStmt
	%20 = load i32, i32* %4, align 4
	; cast - cast
	%21 = sext i32 %20 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %5
	%22 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 0
	store i64 0, i64* %22
	%23 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 1
	store i64 %21, i64* %23
	%24 = load {i64, i64}, {i64, i64}* %5, align 8
	ret {i64, i64} %24

if.done-2:
	; ReturnStmt
	%25 = load i32, i32* %2, align 4
	; cast - cast
	%26 = sext i32 %25 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %6
	%27 = getelementptr inbounds {i64, i64}, {i64, i64}* %6, i64 0, i32 0
	store i64 %26, i64* %27
	%28 = getelementptr inbounds {i64, i64}, {i64, i64}* %6, i64 0, i32 1
	store i64 0, i64* %28
	%29 = load {i64, i64}, {i64, i64}* %6, align 8
	ret {i64, i64} %29
}

define i64 @.os_windows-19.get_std_handle(i64 %h) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..rawptr, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %h, i64* %0
	; fd
	store %..rawptr zeroinitializer, %..rawptr* %1
		; SelectorExpr
	%2 = load i64, i64* %0, align 8
	; cast - cast
	%3 = trunc i64 %2 to i32
	%4 = call ccc %..rawptr @GetStdHandle(i32 %3)
	store %..rawptr %4, %..rawptr* %1
	; SelectorExpr
	%5 = load %..rawptr, %..rawptr* %1, align 8
	%6 = call ccc i32 @SetHandleInformation(%..rawptr %5, i32 1, i32 0)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%8 = ptrtoint %..rawptr %7 to i64
	ret i64 %8
}

define %..rawptr @.os_windows-19.heap_alloc(i64 %size) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%1 = call ccc %..rawptr @GetProcessHeap()
	%2 = load i64, i64* %0, align 8
	%3 = call ccc %..rawptr @HeapAlloc(%..rawptr %1, i32 8, i64 %2)
	ret %..rawptr %3
}

define %..rawptr @.os_windows-19.heap_resize(%..rawptr %ptr, i64 %new_size) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %new_size, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp eq i64 %2, 0
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	%4 = load %..rawptr, %..rawptr* %0, align 8
	call void @.os_windows-19.heap_free(%..rawptr %4)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = icmp eq %..rawptr %5, zeroinitializer
	br i1 %6, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%7 = load i64, i64* %1, align 8
	%8 = call %..rawptr @.os_windows-19.heap_alloc(i64 %7)
	ret %..rawptr %8

if.done-4:
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%9 = call ccc %..rawptr @GetProcessHeap()
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = call ccc %..rawptr @HeapReAlloc(%..rawptr %9, i32 8, %..rawptr %10, i64 %11)
	ret %..rawptr %12
}

define void @.os_windows-19.heap_free(%..rawptr %ptr) {
decls-0:
	%0 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	; IfStmt
	%1 = load %..rawptr, %..rawptr* %0, align 8
	%2 = icmp eq %..rawptr %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%3 = call ccc %..rawptr @GetProcessHeap()
	%4 = load %..rawptr, %..rawptr* %0, align 8
	%5 = call ccc i32 @HeapFree(%..rawptr %3, i32 0, %..rawptr %4)
	ret void
}

define i64 @.os_windows-19.current_thread_id() {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = call ccc i32 @GetCurrentThreadId()
	; cast - cast
	%1 = zext i32 %0 to i64
	ret i64 %1
}

define i1 @.types-21.is_string(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info.String, align 1
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%2 = load %Type_Info*, %Type_Info** %0, align 8
	%3 = icmp eq %Type_Info* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; TypeMatchStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = call %Type_Info* @.type_info_base(%Type_Info* %4)
	; get union's tag
	%6 = getelementptr inbounds %Type_Info, %Type_Info* %5, i64 0, i32 2 ; UnionTagPtr
	%7 = load i64, i64* %6, align 8
	%8 = bitcast %Type_Info* %5 to %..rawptr
	%9 = icmp eq i64 %7, 4
	br i1 %9, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	br label %typematch.done-5

typematch.body-4:
	%10 = bitcast %..rawptr %8 to %Type_Info.String*
	%11 = load %Type_Info.String, %Type_Info.String* %10, align 1
	store %Type_Info.String zeroinitializer, %Type_Info.String* %1
	store %Type_Info.String %11, %Type_Info.String* %1
	; ReturnStmt
	ret i1 true

typematch.done-5:
	; ReturnStmt
	ret i1 false
}

define %..string @.strconv-22.append_float({i8*, i64, i64} %buf, double %f, i8 %fmt, i64 %prec, i64 %bit_size) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca double, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store double zeroinitializer, double* %1
		store double %f, double* %1
	store i8 zeroinitializer, i8* %2
		store i8 %fmt, i8* %2
	store i64 zeroinitializer, i64* %3
		store i64 %prec, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	; ReturnStmt
	%6 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%7 = load double, double* %1, align 8
	%8 = load i8, i8* %2, align 1
	%9 = load i64, i64* %3, align 8
	%10 = load i64, i64* %4, align 8
	%11 = call {i8*, i64, i64} @.strconv-22.generic_ftoa({i8*, i64, i64} %6, double %7, i8 %8, i64 %9, i64 %10)
	; cast - cast
	%12 = extractvalue {i8*, i64, i64} %11, 0
	%13 = extractvalue {i8*, i64, i64} %11, 1
	store %..string zeroinitializer, %..string* %5
	%14 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%15 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i8* %12, i8** %14
	store i64 %13, i64* %15
	%16 = load %..string, %..string* %5, align 8
	ret %..string %16
}

define {i8*, i64, i64} @.strconv-22.generic_ftoa({i8*, i64, i64} %buf, double %val, i8 %fmt, i64 %prec, i64 %bit_size) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca double, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca %strconv-22.Float_Info*, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	%9 = alloca i64, align 8
	%10 = alloca i64, align 8
	%11 = alloca %..string, align 8
	%12 = alloca i8*, align 8
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca %decimal-24.Decimal, align 8
	%15 = alloca %decimal-24.Decimal*, align 8
	%16 = alloca %strconv-22.Decimal_Slice, align 8
	%17 = alloca i1, align 1
	%18 = alloca %strconv-22.Decimal_Slice, align 8
	%19 = alloca {i8*, i64, i64}, align 8
	%20 = alloca %strconv-22.Decimal_Slice, align 8
	%21 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store double zeroinitializer, double* %1
		store double %val, double* %1
	store i8 zeroinitializer, i8* %2
		store i8 %fmt, i8* %2
	store i64 zeroinitializer, i64* %3
		store i64 %prec, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	; bits
	store i64 zeroinitializer, i64* %5
		; flt
	store %strconv-22.Float_Info* zeroinitializer, %strconv-22.Float_Info** %6
		; MatchStmt
	%22 = load i64, i64* %4, align 8
	%23 = icmp eq i64 %22, 32
	br i1 %23, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%24 = icmp eq i64 %22, 64
	br i1 %24, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; AssignStmt
	%25 = load double, double* %1, align 8
	; cast - cast
	%26 = fptrunc double %25 to float
	; cast - transmute
	%27 = bitcast float %26 to i32
	; cast - cast
	%28 = zext i32 %27 to i64
	store i64 %28, i64* %5
	; AssignStmt
	%29 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* @.f32_info, i64 0
	store %strconv-22.Float_Info* %29, %strconv-22.Float_Info** %6
	br label %match.done-5

match.case.next-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1d2, i64 0, i32 0), i64 25}, i64 70, i64 9, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1d3, i64 0, i32 0), i64 25})
	br label %match.done-5

match.fall.body-4:
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %7
	%30 = load double, double* %1, align 8
	%31 = bitcast double %30 to i64
	store i64 %31, i64* %7
	%32 = load i64, i64* %7, align 8
	store i64 %32, i64* %5
	; AssignStmt
	%33 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* @.f64_info, i64 0
	store %strconv-22.Float_Info* %33, %strconv-22.Float_Info** %6
	br label %match.done-5

match.done-5:
	; neg
	store i1 zeroinitializer, i1* %8
		%34 = load i64, i64* %5, align 8
	; SelectorExpr
	%35 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%36 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %35, i64 0
	%37 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %36, i64 0, i32 1
	%38 = load i64, i64* %37, align 8
	; SelectorExpr
	%39 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%40 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %39, i64 0
	%41 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %40, i64 0, i32 0
	%42 = load i64, i64* %41, align 8
	%43 = add i64 %38, %42
	%44 = lshr i64 %34, %43
	%45 = icmp ne i64 %44, 0
	store i1 %45, i1* %8
	; exp
	store i64 zeroinitializer, i64* %9
		%46 = load i64, i64* %5, align 8
	; SelectorExpr
	%47 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%48 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %47, i64 0
	%49 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %48, i64 0, i32 0
	%50 = load i64, i64* %49, align 8
	%51 = lshr i64 %46, %50
	; cast - cast
	%52 = bitcast i64 %51 to i64
	; SelectorExpr
	%53 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%54 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %53, i64 0
	%55 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %54, i64 0, i32 1
	%56 = load i64, i64* %55, align 8
	%57 = shl i64 1, %56
	%58 = sub i64 %57, 1
	%59 = and i64 %52, %58
	store i64 %59, i64* %9
	; mant
	store i64 zeroinitializer, i64* %10
		%60 = load i64, i64* %5, align 8
	; SelectorExpr
	%61 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%62 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %61, i64 0
	%63 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %62, i64 0, i32 0
	%64 = load i64, i64* %63, align 8
	%65 = shl i64 1, %64
	%66 = sub i64 %65, 1
	%67 = and i64 %60, %66
	store i64 %67, i64* %10
	; MatchStmt
	%68 = load i64, i64* %9, align 8
	; SelectorExpr
	%69 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%70 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %69, i64 0
	%71 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %70, i64 0, i32 1
	%72 = load i64, i64* %71, align 8
	%73 = shl i64 1, %72
	%74 = sub i64 %73, 1
	%75 = icmp eq i64 %68, %74
	br i1 %75, label %match.case.body-7, label %match.case.next-6

match.case.next-6:
	%76 = icmp eq i64 %68, 0
	br i1 %76, label %match.fall.body-15, label %match.case.next-14

match.case.body-7:
	; s
	store %..string zeroinitializer, %..string* %11
		; IfStmt
	%77 = load i64, i64* %10, align 8
	%78 = icmp ne i64 %77, 0
	br i1 %78, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$1d4, i64 0, i32 0), i64 3}, %..string* %11
	br label %if.done-13

if.else-9:
	; IfStmt
	%79 = load i1, i1* %8, align 1
	br i1 %79, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$1d5, i64 0, i32 0), i64 4}, %..string* %11
	br label %if.done-12

if.else-11:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$1d6, i64 0, i32 0), i64 4}, %..string* %11
	br label %if.done-12

if.done-12:
	br label %if.done-13

if.done-13:
	; append
	%80 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%81 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%82 = load %..string, %..string* %11, align 8
	; cast - cast
	%83 = extractvalue %..string %82, 0
	store i8* zeroinitializer, i8** %12
	store i8* %83, i8** %12
	%84 = extractvalue %..string %82, 1
	%85 = sub i64 %84, 0
	%86 = sub i64 %84, 0
	%87 = load i8*, i8** %12, align 8
	%88 = getelementptr inbounds i8, i8* %87, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%89 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %88, i8** %89
	%90 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %85, i64* %90
	%91 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %86, i64* %91
	%92 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%93 = extractvalue {i8*, i64, i64} %92, 0
	%94 = extractvalue {i8*, i64, i64} %92, 1
	%95 = bitcast i8* %93 to %..rawptr
	%96 = call i64 @.__slice_append(%..rawptr %80, i64 1, i64 1, %..rawptr %95, i64 %94)
	; ReturnStmt
	%97 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %97

match.case.next-14:
	; AssignStmt
	; SelectorExpr
	%98 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%99 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %98, i64 0
	%100 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %99, i64 0, i32 0
	%101 = load i64, i64* %100, align 8
	%102 = shl i64 1, %101
	%103 = load i64, i64* %10, align 8
	%104 = or i64 %103, %102
	store i64 %104, i64* %10
	br label %match.done-16

match.fall.body-15:
	%105 = load i64, i64* %9, align 8
	%106 = add i64 %105, 1
	store i64 %106, i64* %9
	br label %match.done-16

match.done-16:
	; AssignStmt
	; SelectorExpr
	%107 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%108 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %107, i64 0
	%109 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %108, i64 0, i32 2
	%110 = load i64, i64* %109, align 8
	%111 = load i64, i64* %9, align 8
	%112 = add i64 %111, %110
	store i64 %112, i64* %9
	; d_
	store %decimal-24.Decimal zeroinitializer, %decimal-24.Decimal* %14
		; d
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %15
		%113 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %14, i64 0
	store %decimal-24.Decimal* %113, %decimal-24.Decimal** %15
	%114 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%115 = load i64, i64* %10, align 8
	call void @.decimal-24.assign(%decimal-24.Decimal* %114, i64 %115)
	%116 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%117 = load i64, i64* %9, align 8
	; SelectorExpr
	%118 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	%119 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %118, i64 0
	%120 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %119, i64 0, i32 0
	%121 = load i64, i64* %120, align 8
	; cast - cast
	%122 = bitcast i64 %121 to i64
	%123 = sub i64 %117, %122
	call void @.decimal-24.shift(%decimal-24.Decimal* %116, i64 %123)
	; digs
	store %strconv-22.Decimal_Slice zeroinitializer, %strconv-22.Decimal_Slice* %16
		; shortest
	store i1 zeroinitializer, i1* %17
		%124 = load i64, i64* %3, align 8
	%125 = icmp slt i64 %124, 0
	store i1 %125, i1* %17
	; IfStmt
	%126 = load i1, i1* %17, align 1
	br i1 %126, label %if.then-17, label %if.else-28

if.then-17:
	%127 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%128 = load i64, i64* %10, align 8
	%129 = load i64, i64* %9, align 8
	%130 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %6, align 8
	call void @.strconv-22.round_shortest(%decimal-24.Decimal* %127, i64 %128, i64 %129, %strconv-22.Float_Info* %130)
	; AssignStmt
	; CompoundLit
	store %strconv-22.Decimal_Slice zeroinitializer, %strconv-22.Decimal_Slice* %18
	store %strconv-22.Decimal_Slice {{i8*, i64, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i1 zeroinitializer}, %strconv-22.Decimal_Slice* %18
	; SliceExpr
	; SelectorExpr
	%131 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%132 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %131, i64 0
	%133 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %132, i64 0, i32 2
	%134 = load [384 x i8], [384 x i8]* %133, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1d7, i64 0, i32 0), i64 25}, i64 107, i64 41, i64 0, i64 384, i64 384)
	%135 = getelementptr inbounds [384 x i8], [384 x i8]* %133, i64 0, i32 0
	%136 = getelementptr inbounds i8, i8* %135, i64 0
	%137 = sub i64 384, 0
	%138 = sub i64 384, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %19
	%139 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 0
	store i8* %136, i8** %139
	%140 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 1
	store i64 %137, i64* %140
	%141 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 2
	store i64 %138, i64* %141
	%142 = load {i8*, i64, i64}, {i8*, i64, i64}* %19, align 8
	%143 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %18, i64 0, i32 0
	store {i8*, i64, i64} %142, {i8*, i64, i64}* %143
	; SelectorExpr
	%144 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%145 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %144, i64 0
	%146 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %145, i64 0, i32 0
	%147 = load i64, i64* %146, align 8
	%148 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %18, i64 0, i32 1
	store i64 %147, i64* %148
	; SelectorExpr
	%149 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%150 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %149, i64 0
	%151 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %150, i64 0, i32 1
	%152 = load i64, i64* %151, align 8
	%153 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %18, i64 0, i32 2
	store i64 %152, i64* %153
	%154 = load %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %18, align 8
	store %strconv-22.Decimal_Slice %154, %strconv-22.Decimal_Slice* %16
	; MatchStmt
	%155 = load i8, i8* %2, align 1
	%156 = icmp eq i8 %155, 101
	br i1 %156, label %match.case.body-20, label %match.case.next-18

match.case.next-18:
	%157 = icmp eq i8 %155, 69
	br i1 %157, label %match.case.body-20, label %match.case.next-19

match.case.next-19:
	%158 = icmp eq i8 %155, 102
	br i1 %158, label %match.fall.body-23, label %match.case.next-21

match.case.body-20:
	; AssignStmt
	; SelectorExpr
	%159 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %16, i64 0, i32 1
	%160 = load i64, i64* %159, align 8
	%161 = sub i64 %160, 1
	store i64 %161, i64* %3
	br label %match.done-27

match.case.next-21:
	%162 = icmp eq i8 %155, 70
	br i1 %162, label %match.fall.body-23, label %match.case.next-22

match.case.next-22:
	%163 = icmp eq i8 %155, 103
	br i1 %163, label %match.fall.body-26, label %match.case.next-24

match.fall.body-23:
	; AssignStmt
	; max
	; SelectorExpr
	%164 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %16, i64 0, i32 1
	%165 = load i64, i64* %164, align 8
	; SelectorExpr
	%166 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %16, i64 0, i32 2
	%167 = load i64, i64* %166, align 8
	%168 = sub i64 %165, %167
	%169 = icmp sgt i64 %168, 0
	%170 = select i1 %169, i64 %168, i64 0
	store i64 %170, i64* %3
	br label %match.done-27

match.case.next-24:
	%171 = icmp eq i8 %155, 71
	br i1 %171, label %match.fall.body-26, label %match.case.next-25

match.case.next-25:
	br label %match.done-27

match.fall.body-26:
	; AssignStmt
	; SelectorExpr
	%172 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %16, i64 0, i32 1
	%173 = load i64, i64* %172, align 8
	store i64 %173, i64* %3
	br label %match.done-27

match.done-27:
	br label %if.done-41

if.else-28:
	; MatchStmt
	%174 = load i8, i8* %2, align 1
	%175 = icmp eq i8 %174, 101
	br i1 %175, label %match.case.body-31, label %match.case.next-29

match.case.next-29:
	%176 = icmp eq i8 %174, 69
	br i1 %176, label %match.case.body-31, label %match.case.next-30

match.case.next-30:
	%177 = icmp eq i8 %174, 102
	br i1 %177, label %match.fall.body-34, label %match.case.next-32

match.case.body-31:
	%178 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%179 = load i64, i64* %3, align 8
	%180 = add i64 %179, 1
	call void @.decimal-24.round(%decimal-24.Decimal* %178, i64 %180)
	br label %match.done-40

match.case.next-32:
	%181 = icmp eq i8 %174, 70
	br i1 %181, label %match.fall.body-34, label %match.case.next-33

match.case.next-33:
	%182 = icmp eq i8 %174, 103
	br i1 %182, label %match.fall.body-37, label %match.case.next-35

match.fall.body-34:
	%183 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	; SelectorExpr
	%184 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%185 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %184, i64 0
	%186 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %185, i64 0, i32 1
	%187 = load i64, i64* %186, align 8
	%188 = load i64, i64* %3, align 8
	%189 = add i64 %187, %188
	call void @.decimal-24.round(%decimal-24.Decimal* %183, i64 %189)
	br label %match.done-40

match.case.next-35:
	%190 = icmp eq i8 %174, 71
	br i1 %190, label %match.fall.body-37, label %match.case.next-36

match.case.next-36:
	br label %match.done-40

match.fall.body-37:
	; IfStmt
	%191 = load i64, i64* %3, align 8
	%192 = icmp eq i64 %191, 0
	br i1 %192, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	store i64 1, i64* %3
	br label %if.done-39

if.done-39:
	%193 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%194 = load i64, i64* %3, align 8
	call void @.decimal-24.round(%decimal-24.Decimal* %193, i64 %194)
	br label %match.done-40

match.done-40:
	; AssignStmt
	; CompoundLit
	store %strconv-22.Decimal_Slice zeroinitializer, %strconv-22.Decimal_Slice* %20
	store %strconv-22.Decimal_Slice {{i8*, i64, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i1 zeroinitializer}, %strconv-22.Decimal_Slice* %20
	; SliceExpr
	; SelectorExpr
	%195 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%196 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %195, i64 0
	%197 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %196, i64 0, i32 2
	%198 = load [384 x i8], [384 x i8]* %197, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1d8, i64 0, i32 0), i64 25}, i64 124, i64 41, i64 0, i64 384, i64 384)
	%199 = getelementptr inbounds [384 x i8], [384 x i8]* %197, i64 0, i32 0
	%200 = getelementptr inbounds i8, i8* %199, i64 0
	%201 = sub i64 384, 0
	%202 = sub i64 384, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %21
	%203 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 0
	store i8* %200, i8** %203
	%204 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 1
	store i64 %201, i64* %204
	%205 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 2
	store i64 %202, i64* %205
	%206 = load {i8*, i64, i64}, {i8*, i64, i64}* %21, align 8
	%207 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %20, i64 0, i32 0
	store {i8*, i64, i64} %206, {i8*, i64, i64}* %207
	; SelectorExpr
	%208 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%209 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %208, i64 0
	%210 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %209, i64 0, i32 0
	%211 = load i64, i64* %210, align 8
	%212 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %20, i64 0, i32 1
	store i64 %211, i64* %212
	; SelectorExpr
	%213 = load %decimal-24.Decimal*, %decimal-24.Decimal** %15, align 8
	%214 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %213, i64 0
	%215 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %214, i64 0, i32 1
	%216 = load i64, i64* %215, align 8
	%217 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %20, i64 0, i32 2
	store i64 %216, i64* %217
	%218 = load %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %20, align 8
	store %strconv-22.Decimal_Slice %218, %strconv-22.Decimal_Slice* %16
	br label %if.done-41

if.done-41:
	; ReturnStmt
	%219 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%220 = load i1, i1* %17, align 1
	%221 = load i1, i1* %8, align 1
	%222 = load %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %16, align 8
	%223 = load i64, i64* %3, align 8
	%224 = load i8, i8* %2, align 1
	%225 = call {i8*, i64, i64} @.strconv-22.format_digits({i8*, i64, i64} %219, i1 %220, i1 %221, %strconv-22.Decimal_Slice %222, i64 %223, i8 %224)
	ret {i8*, i64, i64} %225
}

define {i8*, i64, i64} @.strconv-22.format_digits({i8*, i64, i64} %buf, i1 %shortest, i1 %neg, %strconv-22.Decimal_Slice %digs, i64 %prec, i8 %fmt) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i1, align 1
	%2 = alloca i1, align 1
	%3 = alloca %strconv-22.Decimal_Slice, align 8
	%4 = alloca i64, align 8
	%5 = alloca i8, align 1
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca {i8*, i64, i64}, align 8
	%8 = alloca i64, align 8
	%9 = alloca {i8*, i64, i64}, align 8
	%10 = alloca [1 x i8], align 1
	%11 = alloca {i8*, i64, i64}, align 8
	%12 = alloca [1 x i8], align 1
	%13 = alloca i64, align 8
	%14 = alloca {i8*, i64, i64}, align 8
	%15 = alloca {i8*, i64, i64}, align 8
	%16 = alloca [1 x i8], align 1
	%17 = alloca {i8*, i64, i64}, align 8
	%18 = alloca [1 x i8], align 1
	%19 = alloca {i8*, i64, i64}, align 8
	%20 = alloca [1 x i8], align 1
	%21 = alloca i64, align 8
	%22 = alloca i64, align 8
	%23 = alloca i64, align 8
	%24 = alloca i8, align 1
	%25 = alloca i64, align 8
	%26 = alloca {i8*, i64, i64}, align 8
	%27 = alloca [1 x i8], align 1
	%28 = alloca {i8*, i64, i64}, align 8
	%29 = alloca [2 x i8], align 1
	%30 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store i1 zeroinitializer, i1* %1
		store i1 %shortest, i1* %1
	store i1 zeroinitializer, i1* %2
		store i1 %neg, i1* %2
	store %strconv-22.Decimal_Slice zeroinitializer, %strconv-22.Decimal_Slice* %3
		store %strconv-22.Decimal_Slice %digs, %strconv-22.Decimal_Slice* %3
	store i64 zeroinitializer, i64* %4
		store i64 %prec, i64* %4
	store i8 zeroinitializer, i8* %5
		store i8 %fmt, i8* %5
	; MatchStmt
	%31 = load i8, i8* %5, align 1
	%32 = icmp eq i8 %31, 102
	br i1 %32, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%33 = icmp eq i8 %31, 70
	br i1 %33, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%34 = icmp eq i8 %31, 101
	br i1 %34, label %match.fall.body-23, label %match.case.next-21

match.case.body-3:
	; dst
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
		; SliceExpr
	%35 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%36 = extractvalue {i8*, i64, i64} %35, 1
	%37 = extractvalue {i8*, i64, i64} %35, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1d9, i64 0, i32 0), i64 25}, i64 145, i64 13, i64 0, i64 %36, i64 %37)
	%38 = extractvalue {i8*, i64, i64} %35, 0
	%39 = getelementptr inbounds i8, i8* %38, i64 0
	%40 = sub i64 %36, 0
	%41 = sub i64 %37, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %7
	%42 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 0
	store i8* %39, i8** %42
	%43 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 1
	store i64 %40, i64* %43
	%44 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 2
	store i64 %41, i64* %44
	%45 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	store {i8*, i64, i64} %45, {i8*, i64, i64}* %6
	; w
	store i64 zeroinitializer, i64* %8
		store i64 0, i64* %8
	; IfStmt
	%46 = load i1, i1* %2, align 1
	br i1 %46, label %if.then-4, label %if.else-5

if.then-4:
	%47 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%48 = getelementptr inbounds i64, i64* %8, i64 0
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %9
	store [1 x i8] zeroinitializer, [1 x i8]* %10
	%49 = getelementptr inbounds [1 x i8], [1 x i8]* %10, i64 0, i32 0
	store i8 45, i8* %49
	%50 = getelementptr inbounds [1 x i8], [1 x i8]* %10, i64 0, i32 0
	%51 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 0
	store i8* %50, i8** %51
	%52 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 1
	store i64 1, i64* %52
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 2
	store i64 1, i64* %53
	%54 = load {i8*, i64, i64}, {i8*, i64, i64}* %9, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %47, i64* %48, {i8*, i64, i64} %54)
	br label %if.done-6

if.else-5:
	%55 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%56 = getelementptr inbounds i64, i64* %8, i64 0
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %11
	store [1 x i8] zeroinitializer, [1 x i8]* %12
	%57 = getelementptr inbounds [1 x i8], [1 x i8]* %12, i64 0, i32 0
	store i8 43, i8* %57
	%58 = getelementptr inbounds [1 x i8], [1 x i8]* %12, i64 0, i32 0
	%59 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 0
	store i8* %58, i8** %59
	%60 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 1
	store i64 1, i64* %60
	%61 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 2
	store i64 1, i64* %61
	%62 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %55, i64* %56, {i8*, i64, i64} %62)
	br label %if.done-6

if.done-6:
	; IfStmt
	; SelectorExpr
	%63 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 2
	%64 = load i64, i64* %63, align 8
	%65 = icmp sgt i64 %64, 0
	br i1 %65, label %if.then-7, label %if.else-11

if.then-7:
	; m
	store i64 zeroinitializer, i64* %13
		; min
	; SelectorExpr
	%66 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 1
	%67 = load i64, i64* %66, align 8
	; SelectorExpr
	%68 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 2
	%69 = load i64, i64* %68, align 8
	%70 = icmp slt i64 %67, %69
	%71 = select i1 %70, i64 %67, i64 %69
	store i64 %71, i64* %13
	%72 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%73 = getelementptr inbounds i64, i64* %8, i64 0
	; SliceExpr
	%74 = load i64, i64* %13, align 8
	; SelectorExpr
	%75 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 0
	%76 = load {i8*, i64, i64}, {i8*, i64, i64}* %75, align 8
	%77 = extractvalue {i8*, i64, i64} %76, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1da, i64 0, i32 0), i64 25}, i64 156, i64 37, i64 0, i64 %74, i64 %77)
	%78 = extractvalue {i8*, i64, i64} %76, 0
	%79 = getelementptr inbounds i8, i8* %78, i64 0
	%80 = sub i64 %74, 0
	%81 = sub i64 %77, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %14
	%82 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 0
	store i8* %79, i8** %82
	%83 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 1
	store i64 %80, i64* %83
	%84 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 2
	store i64 %81, i64* %84
	%85 = load {i8*, i64, i64}, {i8*, i64, i64}* %14, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %72, i64* %73, {i8*, i64, i64} %85)
	; ForStmt
	br label %for.loop-8

for.loop-8:
	%86 = load i64, i64* %13, align 8
	; SelectorExpr
	%87 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 2
	%88 = load i64, i64* %87, align 8
	%89 = icmp slt i64 %86, %88
	br i1 %89, label %for.body-9, label %for.done-10

for.body-9:
	%90 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%91 = getelementptr inbounds i64, i64* %8, i64 0
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %15
	store [1 x i8] zeroinitializer, [1 x i8]* %16
	%92 = getelementptr inbounds [1 x i8], [1 x i8]* %16, i64 0, i32 0
	store i8 48, i8* %92
	%93 = getelementptr inbounds [1 x i8], [1 x i8]* %16, i64 0, i32 0
	%94 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %15, i64 0, i32 0
	store i8* %93, i8** %94
	%95 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %15, i64 0, i32 1
	store i64 1, i64* %95
	%96 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %15, i64 0, i32 2
	store i64 1, i64* %96
	%97 = load {i8*, i64, i64}, {i8*, i64, i64}* %15, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %90, i64* %91, {i8*, i64, i64} %97)
	%98 = load i64, i64* %13, align 8
	%99 = add i64 %98, 1
	store i64 %99, i64* %13
	br label %for.loop-8

for.done-10:
	br label %if.done-12

if.else-11:
	%100 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%101 = getelementptr inbounds i64, i64* %8, i64 0
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %17
	store [1 x i8] zeroinitializer, [1 x i8]* %18
	%102 = getelementptr inbounds [1 x i8], [1 x i8]* %18, i64 0, i32 0
	store i8 48, i8* %102
	%103 = getelementptr inbounds [1 x i8], [1 x i8]* %18, i64 0, i32 0
	%104 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %17, i64 0, i32 0
	store i8* %103, i8** %104
	%105 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %17, i64 0, i32 1
	store i64 1, i64* %105
	%106 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %17, i64 0, i32 2
	store i64 1, i64* %106
	%107 = load {i8*, i64, i64}, {i8*, i64, i64}* %17, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %100, i64* %101, {i8*, i64, i64} %107)
	br label %if.done-12

if.done-12:
	; IfStmt
	%108 = load i64, i64* %4, align 8
	%109 = icmp sgt i64 %108, 0
	br i1 %109, label %if.then-13, label %if.done-20

if.then-13:
	%110 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%111 = getelementptr inbounds i64, i64* %8, i64 0
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %19
	store [1 x i8] zeroinitializer, [1 x i8]* %20
	%112 = getelementptr inbounds [1 x i8], [1 x i8]* %20, i64 0, i32 0
	store i8 46, i8* %112
	%113 = getelementptr inbounds [1 x i8], [1 x i8]* %20, i64 0, i32 0
	%114 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 0
	store i8* %113, i8** %114
	%115 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 1
	store i64 1, i64* %115
	%116 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 2
	store i64 1, i64* %116
	%117 = load {i8*, i64, i64}, {i8*, i64, i64}* %19, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %110, i64* %111, {i8*, i64, i64} %117)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %21
		store i64 zeroinitializer, i64* %22
	store i64 0, i64* %22
	store i64 zeroinitializer, i64* %23
	store i64 0, i64* %23
	br label %for.interval.loop-14

for.interval.loop-14:
	%118 = load i64, i64* %4, align 8
	%119 = load i64, i64* %22, align 8
	%120 = icmp slt i64 %119, %118
	br i1 %120, label %for.interval.body-15, label %for.interval.done-19

for.interval.body-15:
	%121 = load i64, i64* %22, align 8
	%122 = load i64, i64* %23, align 8
	%123 = load i64, i64* %22, align 8
	%124 = add i64 %123, 1
	store i64 %124, i64* %22
	%125 = load i64, i64* %23, align 8
	%126 = add i64 %125, 1
	store i64 %126, i64* %23
	store i64 %121, i64* %21
	; c
	store i8 zeroinitializer, i8* %24
		store i8 48, i8* %24
	; IfStmt
	; j
	store i64 zeroinitializer, i64* %25
		; SelectorExpr
	%127 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 2
	%128 = load i64, i64* %127, align 8
	%129 = load i64, i64* %21, align 8
	%130 = add i64 %128, %129
	store i64 %130, i64* %25
	%131 = load i64, i64* %25, align 8
	%132 = icmp sle i64 0, %131
	br i1 %132, label %cmp.and-16, label %if.done-18

cmp.and-16:
	%133 = load i64, i64* %25, align 8
	; SelectorExpr
	%134 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 1
	%135 = load i64, i64* %134, align 8
	%136 = icmp slt i64 %133, %135
	br i1 %136, label %if.then-17, label %if.done-18

if.then-17:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%137 = getelementptr inbounds %strconv-22.Decimal_Slice, %strconv-22.Decimal_Slice* %3, i64 0, i32 0
	%138 = load {i8*, i64, i64}, {i8*, i64, i64}* %137, align 8
	%139 = extractvalue {i8*, i64, i64} %138, 0
	%140 = extractvalue {i8*, i64, i64} %138, 1
	%141 = load i64, i64* %25, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1db, i64 0, i32 0), i64 25}, i64 171, i64 22, i64 %141, i64 %140)
	%142 = getelementptr inbounds i8, i8* %139, i64 %141
	%143 = load i8, i8* %142, align 1
	store i8 %143, i8* %24
	br label %if.done-18

if.done-18:
	%144 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0
	%145 = getelementptr inbounds i64, i64* %8, i64 0
	%146 = load i8, i8* %24, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %26
	store [1 x i8] zeroinitializer, [1 x i8]* %27
	%147 = getelementptr inbounds [1 x i8], [1 x i8]* %27, i64 0, i32 0
	store i8 %146, i8* %147
	%148 = getelementptr inbounds [1 x i8], [1 x i8]* %27, i64 0, i32 0
	%149 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %26, i64 0, i32 0
	store i8* %148, i8** %149
	%150 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %26, i64 0, i32 1
	store i64 1, i64* %150
	%151 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %26, i64 0, i32 2
	store i64 1, i64* %151
	%152 = load {i8*, i64, i64}, {i8*, i64, i64}* %26, align 8
	call void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %144, i64* %145, {i8*, i64, i64} %152)
	br label %for.interval.loop-14

for.interval.done-19:
	br label %if.done-20

if.done-20:
	; ReturnStmt
	; SliceExpr
	%153 = load i64, i64* %8, align 8
	%154 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%155 = extractvalue {i8*, i64, i64} %154, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1dc, i64 0, i32 0), i64 25}, i64 177, i64 13, i64 0, i64 %153, i64 %155)
	%156 = extractvalue {i8*, i64, i64} %154, 0
	%157 = getelementptr inbounds i8, i8* %156, i64 0
	%158 = sub i64 %153, 0
	%159 = sub i64 %155, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %28
	%160 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %28, i64 0, i32 0
	store i8* %157, i8** %160
	%161 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %28, i64 0, i32 1
	store i64 %158, i64* %161
	%162 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %28, i64 0, i32 2
	store i64 %159, i64* %162
	%163 = load {i8*, i64, i64}, {i8*, i64, i64}* %28, align 8
	ret {i8*, i64, i64} %163

match.case.next-21:
	%164 = icmp eq i8 %31, 69
	br i1 %164, label %match.fall.body-23, label %match.case.next-22

match.case.next-22:
	%165 = icmp eq i8 %31, 103
	br i1 %165, label %match.fall.body-26, label %match.case.next-24

match.fall.body-23:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1dd, i64 0, i32 0), i64 25}, i64 180, i64 9, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1de, i64 0, i32 0), i64 48})
	; ReturnStmt
	%166 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %166

match.case.next-24:
	%167 = icmp eq i8 %31, 71
	br i1 %167, label %match.fall.body-26, label %match.case.next-25

match.case.next-25:
	br label %match.done-27

match.fall.body-26:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1df, i64 0, i32 0), i64 25}, i64 184, i64 9, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e0, i64 0, i32 0), i64 48})
	; ReturnStmt
	%168 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %168

match.done-27:
	; c
	store [2 x i8] zeroinitializer, [2 x i8]* %29
		; AssignStmt
	; IndexExpr
	%169 = getelementptr inbounds [2 x i8], [2 x i8]* %29, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e1, i64 0, i32 0), i64 25}, i64 189, i64 4, i64 0, i64 2)
	store i8 37, i8* %169
	; AssignStmt
	; IndexExpr
	%170 = getelementptr inbounds [2 x i8], [2 x i8]* %29, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e2, i64 0, i32 0), i64 25}, i64 190, i64 4, i64 1, i64 2)
	%171 = load i8, i8* %5, align 1
	store i8 %171, i8* %170
	; append
	%172 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%173 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%174 = load [2 x i8], [2 x i8]* %29, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e3, i64 0, i32 0), i64 25}, i64 191, i64 17, i64 0, i64 2, i64 2)
	%175 = getelementptr inbounds [2 x i8], [2 x i8]* %29, i64 0, i32 0
	%176 = getelementptr inbounds i8, i8* %175, i64 0
	%177 = sub i64 2, 0
	%178 = sub i64 2, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %30
	%179 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %30, i64 0, i32 0
	store i8* %176, i8** %179
	%180 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %30, i64 0, i32 1
	store i64 %177, i64* %180
	%181 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %30, i64 0, i32 2
	store i64 %178, i64* %181
	%182 = load {i8*, i64, i64}, {i8*, i64, i64}* %30, align 8
	%183 = extractvalue {i8*, i64, i64} %182, 0
	%184 = extractvalue {i8*, i64, i64} %182, 1
	%185 = bitcast i8* %183 to %..rawptr
	%186 = call i64 @.__slice_append(%..rawptr %172, i64 1, i64 1, %..rawptr %185, i64 %184)
	; ReturnStmt
	%187 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %187
}

define void @.strconv-22.format_digits.add_bytes-0({i8*, i64, i64}* %dst, i64* %w, {i8*, i64, i64} %bytes) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i64*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca i8, align 1
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %dst, {i8*, i64, i64}** %0
	store i64* zeroinitializer, i64** %1
		store i64* %w, i64** %1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
		store {i8*, i64, i64} %bytes, {i8*, i64, i64}* %2
	; RangeStmt
	; b
	store i8 zeroinitializer, i8* %3
		%6 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	store i64 zeroinitializer, i64* %4
	%7 = extractvalue {i8*, i64, i64} %6, 1
	store i64 %7, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 -1, i64* %5
	br label %for.index.loop-1

for.index.loop-1:
	%8 = load i64, i64* %5, align 8
	%9 = add i64 %8, 1
	store i64 %9, i64* %5
	%10 = load i64, i64* %4, align 8
	%11 = icmp slt i64 %9, %10
	br i1 %11, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%12 = load i64, i64* %5, align 8
	%13 = extractvalue {i8*, i64, i64} %6, 0
	%14 = getelementptr inbounds i8, i8* %13, i64 %12
	%15 = load i8, i8* %14, align 1
	store i8 %15, i8* %3
	; IfStmt
	; SelectorExpr
	%16 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %16, i64 0
	%18 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %17, i64 0, i32 2
	%19 = load i64, i64* %18, align 8
	%20 = load i64*, i64** %1, align 8
	%21 = getelementptr inbounds i64, i64* %20, i64 0
	%22 = load i64, i64* %21, align 8
	%23 = icmp sle i64 %19, %22
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; break
	br label %for.index.done-5

if.done-4:
	; SelectorExpr
	%24 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0
	%26 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %25, i64 0, i32 1
	%27 = load i64, i64* %26, align 8
	%28 = add i64 %27, 1
	store i64 %28, i64* %26
	; AssignStmt
	; IndexExpr
	%29 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %29, align 8
	%31 = extractvalue {i8*, i64, i64} %30, 0
	%32 = extractvalue {i8*, i64, i64} %30, 1
	%33 = load i64*, i64** %1, align 8
	%34 = getelementptr inbounds i64, i64* %33, i64 0
	%35 = load i64, i64* %34, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e4, i64 0, i32 0), i64 25}, i64 140, i64 10, i64 %35, i64 %32)
	%36 = getelementptr inbounds i8, i8* %31, i64 %35
	%37 = load i8, i8* %3, align 1
	store i8 %37, i8* %36
	%38 = load i64*, i64** %1, align 8
	%39 = getelementptr inbounds i64, i64* %38, i64 0
	%40 = load i64, i64* %39, align 8
	%41 = add i64 %40, 1
	store i64 %41, i64* %39
	br label %for.index.loop-1

for.index.done-5:
	ret void
}

define void @.strconv-22.round_shortest(%decimal-24.Decimal* %d, i64 %mant, i64 %exp, %strconv-22.Float_Info* %flt) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %strconv-22.Float_Info*, align 8
	%4 = alloca i64, align 8
	%5 = alloca %decimal-24.Decimal, align 8
	%6 = alloca %decimal-24.Decimal*, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca %decimal-24.Decimal, align 8
	%10 = alloca %decimal-24.Decimal*, align 8
	%11 = alloca i1, align 1
	%12 = alloca i64, align 8
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i8, align 1
	%17 = alloca i8, align 1
	%18 = alloca i1, align 1
	%19 = alloca i1, align 1
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %d, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %mant, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %exp, i64* %2
	store %strconv-22.Float_Info* zeroinitializer, %strconv-22.Float_Info** %3
		store %strconv-22.Float_Info* %flt, %strconv-22.Float_Info** %3
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp eq i64 %20, 0
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ReturnStmt
	ret void

if.done-2:
	; minexp
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%25 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %3, align 8
	%26 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %25, i64 0
	%27 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %26, i64 0, i32 2
	%28 = load i64, i64* %27, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %4
	; IfStmt
	%30 = load i64, i64* %2, align 8
	%31 = load i64, i64* %4, align 8
	%32 = icmp sgt i64 %30, %31
	br i1 %32, label %cmp.and-3, label %if.done-5

cmp.and-3:
	; SelectorExpr
	%33 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %34, i64 0, i32 1
	%36 = load i64, i64* %35, align 8
	; SelectorExpr
	%37 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%38 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %37, i64 0
	%39 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %38, i64 0, i32 0
	%40 = load i64, i64* %39, align 8
	%41 = sub i64 %36, %40
	%42 = mul i64 332, %41
	%43 = load i64, i64* %2, align 8
	; SelectorExpr
	%44 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %3, align 8
	%45 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %44, i64 0
	%46 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %45, i64 0, i32 0
	%47 = load i64, i64* %46, align 8
	; cast - cast
	%48 = bitcast i64 %47 to i64
	%49 = sub i64 %43, %48
	%50 = mul i64 100, %49
	%51 = icmp sge i64 %42, %50
	br i1 %51, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	ret void

if.done-5:
	; upper_
	store %decimal-24.Decimal zeroinitializer, %decimal-24.Decimal* %5
		; upper
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %6
		%52 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %5, i64 0
	store %decimal-24.Decimal* %52, %decimal-24.Decimal** %6
	%53 = load %decimal-24.Decimal*, %decimal-24.Decimal** %6, align 8
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 2, %54
	%56 = sub i64 %55, 1
	call void @.decimal-24.assign(%decimal-24.Decimal* %53, i64 %56)
	%57 = load %decimal-24.Decimal*, %decimal-24.Decimal** %6, align 8
	%58 = load i64, i64* %2, align 8
	; SelectorExpr
	%59 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %3, align 8
	%60 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %59, i64 0
	%61 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %60, i64 0, i32 0
	%62 = load i64, i64* %61, align 8
	; cast - cast
	%63 = bitcast i64 %62 to i64
	%64 = sub i64 %58, %63
	%65 = sub i64 %64, 1
	call void @.decimal-24.shift(%decimal-24.Decimal* %57, i64 %65)
	; mantlo
	store i64 zeroinitializer, i64* %7
		; explo
	store i64 zeroinitializer, i64* %8
		; IfStmt
	%66 = load i64, i64* %1, align 8
	; SelectorExpr
	%67 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %3, align 8
	%68 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %67, i64 0
	%69 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %68, i64 0, i32 0
	%70 = load i64, i64* %69, align 8
	%71 = shl i64 1, %70
	%72 = icmp ugt i64 %66, %71
	br i1 %72, label %if.then-7, label %cmp.or-6

cmp.or-6:
	%73 = load i64, i64* %2, align 8
	%74 = load i64, i64* %4, align 8
	%75 = icmp eq i64 %73, %74
	br i1 %75, label %if.then-7, label %if.else-8

if.then-7:
	; AssignStmt
	%76 = load i64, i64* %1, align 8
	%77 = sub i64 %76, 1
	store i64 %77, i64* %7
	; AssignStmt
	%78 = load i64, i64* %2, align 8
	store i64 %78, i64* %8
	br label %if.done-9

if.else-8:
	; AssignStmt
	%79 = load i64, i64* %1, align 8
	%80 = mul i64 2, %79
	%81 = sub i64 %80, 1
	store i64 %81, i64* %7
	; AssignStmt
	%82 = load i64, i64* %2, align 8
	%83 = sub i64 %82, 1
	store i64 %83, i64* %8
	br label %if.done-9

if.done-9:
	; lower_
	store %decimal-24.Decimal zeroinitializer, %decimal-24.Decimal* %9
		; lower
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %10
		%84 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %9, i64 0
	store %decimal-24.Decimal* %84, %decimal-24.Decimal** %10
	%85 = load %decimal-24.Decimal*, %decimal-24.Decimal** %10, align 8
	%86 = load i64, i64* %7, align 8
	%87 = mul i64 2, %86
	%88 = add i64 %87, 1
	call void @.decimal-24.assign(%decimal-24.Decimal* %85, i64 %88)
	%89 = load %decimal-24.Decimal*, %decimal-24.Decimal** %10, align 8
	%90 = load i64, i64* %8, align 8
	; SelectorExpr
	%91 = load %strconv-22.Float_Info*, %strconv-22.Float_Info** %3, align 8
	%92 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %91, i64 0
	%93 = getelementptr inbounds %strconv-22.Float_Info, %strconv-22.Float_Info* %92, i64 0, i32 0
	%94 = load i64, i64* %93, align 8
	; cast - cast
	%95 = bitcast i64 %94 to i64
	%96 = sub i64 %90, %95
	%97 = sub i64 %96, 1
	call void @.decimal-24.shift(%decimal-24.Decimal* %89, i64 %97)
	; inclusive
	store i1 zeroinitializer, i1* %11
		%98 = load i64, i64* %1, align 8
	%99 = urem i64 %98, 2
	%100 = icmp eq i64 %99, 0
	store i1 %100, i1* %11
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %12
		store i64 zeroinitializer, i64* %13
	store i64 0, i64* %13
	store i64 zeroinitializer, i64* %14
	store i64 0, i64* %14
	br label %for.interval.loop-10

for.interval.loop-10:
	; SelectorExpr
	%101 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%102 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %101, i64 0
	%103 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %102, i64 0, i32 0
	%104 = load i64, i64* %103, align 8
	%105 = load i64, i64* %13, align 8
	%106 = icmp slt i64 %105, %104
	br i1 %106, label %for.interval.body-11, label %for.interval.done-34

for.interval.body-11:
	%107 = load i64, i64* %13, align 8
	%108 = load i64, i64* %14, align 8
	%109 = load i64, i64* %13, align 8
	%110 = add i64 %109, 1
	store i64 %110, i64* %13
	%111 = load i64, i64* %14, align 8
	%112 = add i64 %111, 1
	store i64 %112, i64* %14
	store i64 %107, i64* %12
	; l
	store i8 zeroinitializer, i8* %15
		store i8 48, i8* %15
	; IfStmt
	%113 = load i64, i64* %12, align 8
	; SelectorExpr
	%114 = load %decimal-24.Decimal*, %decimal-24.Decimal** %10, align 8
	%115 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %114, i64 0
	%116 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %115, i64 0, i32 0
	%117 = load i64, i64* %116, align 8
	%118 = icmp slt i64 %113, %117
	br i1 %118, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%119 = load %decimal-24.Decimal*, %decimal-24.Decimal** %10, align 8
	%120 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %119, i64 0
	%121 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %120, i64 0, i32 2
	%122 = load i64, i64* %12, align 8
	%123 = trunc i64 %122 to i32
	%124 = getelementptr inbounds [384 x i8], [384 x i8]* %121, i64 0, i32 %123
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e5, i64 0, i32 0), i64 25}, i64 235, i64 21, i64 %122, i64 384)
	%125 = load i8, i8* %124, align 1
	store i8 %125, i8* %15
	br label %if.done-13

if.done-13:
	; m
	store i8 zeroinitializer, i8* %16
		; IndexExpr
	; SelectorExpr
	%126 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%127 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %126, i64 0
	%128 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %127, i64 0, i32 2
	%129 = load i64, i64* %12, align 8
	%130 = trunc i64 %129 to i32
	%131 = getelementptr inbounds [384 x i8], [384 x i8]* %128, i64 0, i32 %130
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e6, i64 0, i32 0), i64 25}, i64 237, i64 17, i64 %129, i64 384)
	%132 = load i8, i8* %131, align 1
	store i8 %132, i8* %16
	; u
	store i8 zeroinitializer, i8* %17
		store i8 48, i8* %17
	; IfStmt
	%133 = load i64, i64* %12, align 8
	; SelectorExpr
	%134 = load %decimal-24.Decimal*, %decimal-24.Decimal** %6, align 8
	%135 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %134, i64 0
	%136 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %135, i64 0, i32 0
	%137 = load i64, i64* %136, align 8
	%138 = icmp slt i64 %133, %137
	br i1 %138, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%139 = load %decimal-24.Decimal*, %decimal-24.Decimal** %6, align 8
	%140 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %139, i64 0
	%141 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %140, i64 0, i32 2
	%142 = load i64, i64* %12, align 8
	%143 = trunc i64 %142 to i32
	%144 = getelementptr inbounds [384 x i8], [384 x i8]* %141, i64 0, i32 %143
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e7, i64 0, i32 0), i64 25}, i64 240, i64 21, i64 %142, i64 384)
	%145 = load i8, i8* %144, align 1
	store i8 %145, i8* %17
	br label %if.done-15

if.done-15:
	; ok_round_down
	store i1 zeroinitializer, i1* %18
		%146 = load i8, i8* %15, align 1
	%147 = load i8, i8* %16, align 1
	%148 = icmp ne i8 %146, %147
	%149 = load i8, i8* %15, align 1
	%150 = load i8, i8* %16, align 1
	%151 = icmp ne i8 %149, %150
	br i1 %151, label %logical.cmp.done-19, label %logical.cmp.rhs-16

logical.cmp.rhs-16:
	%152 = load i1, i1* %11, align 1
	%153 = load i1, i1* %11, align 1
	br i1 %153, label %logical.cmp.rhs-17, label %logical.cmp.done-18

logical.cmp.rhs-17:
	%154 = load i64, i64* %12, align 8
	%155 = add i64 %154, 1
	; SelectorExpr
	%156 = load %decimal-24.Decimal*, %decimal-24.Decimal** %10, align 8
	%157 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %156, i64 0
	%158 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %157, i64 0, i32 0
	%159 = load i64, i64* %158, align 8
	%160 = icmp eq i64 %155, %159
	br label %logical.cmp.done-18

logical.cmp.done-18:
	%161 = phi i1 [ false, %logical.cmp.rhs-16 ], [ %160, %logical.cmp.rhs-17 ]
	br label %logical.cmp.done-19

logical.cmp.done-19:
	%162 = phi i1 [ true, %if.done-15 ], [ %161, %logical.cmp.done-18 ]
	store i1 %162, i1* %18
	; ok_round_up
	store i1 zeroinitializer, i1* %19
		%163 = load i8, i8* %16, align 1
	%164 = load i8, i8* %17, align 1
	%165 = icmp ne i8 %163, %164
	%166 = load i8, i8* %16, align 1
	%167 = load i8, i8* %17, align 1
	%168 = icmp ne i8 %166, %167
	br i1 %168, label %logical.cmp.rhs-20, label %logical.cmp.done-26

logical.cmp.rhs-20:
	%169 = load i1, i1* %11, align 1
	%170 = load i1, i1* %11, align 1
	br i1 %170, label %logical.cmp.done-22, label %logical.cmp.rhs-21

logical.cmp.rhs-21:
	%171 = load i8, i8* %16, align 1
	%172 = add i8 %171, 1
	%173 = load i8, i8* %17, align 1
	%174 = icmp ult i8 %172, %173
	br label %logical.cmp.done-22

logical.cmp.done-22:
	%175 = phi i1 [ true, %logical.cmp.rhs-20 ], [ %174, %logical.cmp.rhs-21 ]
	%176 = load i1, i1* %11, align 1
	br i1 %176, label %logical.cmp.done-25, label %cmp.or-23

cmp.or-23:
	%177 = load i8, i8* %16, align 1
	%178 = add i8 %177, 1
	%179 = load i8, i8* %17, align 1
	%180 = icmp ult i8 %178, %179
	br i1 %180, label %logical.cmp.done-25, label %logical.cmp.rhs-24

logical.cmp.rhs-24:
	%181 = load i64, i64* %12, align 8
	%182 = add i64 %181, 1
	; SelectorExpr
	%183 = load %decimal-24.Decimal*, %decimal-24.Decimal** %6, align 8
	%184 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %183, i64 0
	%185 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %184, i64 0, i32 0
	%186 = load i64, i64* %185, align 8
	%187 = icmp slt i64 %182, %186
	br label %logical.cmp.done-25

logical.cmp.done-25:
	%188 = phi i1 [ true, %logical.cmp.done-22 ], [ true, %cmp.or-23 ], [ %187, %logical.cmp.rhs-24 ]
	br label %logical.cmp.done-26

logical.cmp.done-26:
	%189 = phi i1 [ false, %logical.cmp.done-19 ], [ %188, %logical.cmp.done-25 ]
	store i1 %189, i1* %19
	; IfStmt
	%190 = load i1, i1* %18, align 1
	br i1 %190, label %cmp.and-27, label %if.done-29

cmp.and-27:
	%191 = load i1, i1* %19, align 1
	br i1 %191, label %if.then-28, label %if.done-29

if.then-28:
	%192 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%193 = load i64, i64* %12, align 8
	%194 = add i64 %193, 1
	call void @.decimal-24.round(%decimal-24.Decimal* %192, i64 %194)
	; ReturnStmt
	ret void

if.done-29:
	; IfStmt
	%195 = load i1, i1* %18, align 1
	br i1 %195, label %if.then-30, label %if.done-31

if.then-30:
	%196 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%197 = load i64, i64* %12, align 8
	%198 = add i64 %197, 1
	call void @.decimal-24.round_down(%decimal-24.Decimal* %196, i64 %198)
	; ReturnStmt
	ret void

if.done-31:
	; IfStmt
	%199 = load i1, i1* %19, align 1
	br i1 %199, label %if.then-32, label %if.done-33

if.then-32:
	%200 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%201 = load i64, i64* %12, align 8
	%202 = add i64 %201, 1
	call void @.decimal-24.round_up(%decimal-24.Decimal* %200, i64 %202)
	; ReturnStmt
	ret void

if.done-33:
	br label %for.interval.loop-10

for.interval.done-34:
	ret void
}

define {i64, i1} @.strconv-22.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i1, align 1
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i8, align 1
	%5 = alloca i16, align 2
	%6 = alloca i32, align 4
	%7 = alloca i64, align 8
	%8 = alloca {i64, i1}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %u, i64* %0
	store i1 zeroinitializer, i1* %1
		store i1 %is_signed, i1* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	; neg
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; IfStmt
	%9 = load i1, i1* %1, align 1
	br i1 %9, label %if.then-1, label %if.done-19

if.then-1:
	; MatchStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 8
	br i1 %11, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%12 = icmp eq i64 %10, 16
	br i1 %12, label %match.fall.body-7, label %match.case.next-6

match.case.body-3:
	; i
	store i8 zeroinitializer, i8* %4
		%13 = load i64, i64* %0, align 8
	; cast - cast
	%14 = trunc i64 %13 to i8
	store i8 %14, i8* %4
	; AssignStmt
	%15 = load i8, i8* %4, align 1
	%16 = icmp slt i8 %15, 0
	store i1 %16, i1* %3
	; IfStmt
	%17 = load i1, i1* %3, align 1
	br i1 %17, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%18 = load i8, i8* %4, align 1
	%19 = sub i8 0, %18
	store i8 %19, i8* %4
	br label %if.done-5

if.done-5:
	; AssignStmt
	%20 = load i8, i8* %4, align 1
	; cast - cast
	%21 = sext i8 %20 to i64
	store i64 %21, i64* %0
	br label %match.done-18

match.case.next-6:
	%22 = icmp eq i64 %10, 32
	br i1 %22, label %match.fall.body-11, label %match.case.next-10

match.fall.body-7:
	; i
	store i16 zeroinitializer, i16* %5
		%23 = load i64, i64* %0, align 8
	; cast - cast
	%24 = trunc i64 %23 to i16
	store i16 %24, i16* %5
	; AssignStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 0
	store i1 %26, i1* %3
	; IfStmt
	%27 = load i1, i1* %3, align 1
	br i1 %27, label %if.then-8, label %if.done-9

if.then-8:
	; AssignStmt
	%28 = load i16, i16* %5, align 2
	%29 = sub i16 0, %28
	store i16 %29, i16* %5
	br label %if.done-9

if.done-9:
	; AssignStmt
	%30 = load i16, i16* %5, align 2
	; cast - cast
	%31 = sext i16 %30 to i64
	store i64 %31, i64* %0
	br label %match.done-18

match.case.next-10:
	%32 = icmp eq i64 %10, 64
	br i1 %32, label %match.fall.body-15, label %match.case.next-14

match.fall.body-11:
	; i
	store i32 zeroinitializer, i32* %6
		%33 = load i64, i64* %0, align 8
	; cast - cast
	%34 = trunc i64 %33 to i32
	store i32 %34, i32* %6
	; AssignStmt
	%35 = load i32, i32* %6, align 4
	%36 = icmp slt i32 %35, 0
	store i1 %36, i1* %3
	; IfStmt
	%37 = load i1, i1* %3, align 1
	br i1 %37, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%38 = load i32, i32* %6, align 4
	%39 = sub i32 0, %38
	store i32 %39, i32* %6
	br label %if.done-13

if.done-13:
	; AssignStmt
	%40 = load i32, i32* %6, align 4
	; cast - cast
	%41 = sext i32 %40 to i64
	store i64 %41, i64* %0
	br label %match.done-18

match.case.next-14:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1e8, i64 0, i32 0), i64 25}, i64 291, i64 10, %..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$1e9, i64 0, i32 0), i64 41})
	br label %match.done-18

match.fall.body-15:
	; i
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %0, align 8
	; cast - cast
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load i64, i64* %7, align 8
	%45 = icmp slt i64 %44, 0
	store i1 %45, i1* %3
	; IfStmt
	%46 = load i1, i1* %3, align 1
	br i1 %46, label %if.then-16, label %if.done-17

if.then-16:
	; AssignStmt
	%47 = load i64, i64* %7, align 8
	%48 = sub i64 0, %47
	store i64 %48, i64* %7
	br label %if.done-17

if.done-17:
	; AssignStmt
	%49 = load i64, i64* %7, align 8
	; cast - cast
	%50 = bitcast i64 %49 to i64
	store i64 %50, i64* %0
	br label %match.done-18

match.done-18:
	br label %if.done-19

if.done-19:
	; ReturnStmt
	%51 = load i64, i64* %0, align 8
	%52 = load i1, i1* %3, align 1
	store {i64, i1} zeroinitializer, {i64, i1}* %8
	%53 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 0
	store i64 %51, i64* %53
	%54 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 1
	store i1 %52, i1* %54
	%55 = load {i64, i1}, {i64, i1}* %8, align 8
	ret {i64, i1} %55
}

define %..string @.strconv-22.append_bits({i8*, i64, i64} %buf, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, i64 %flags) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i64, align 8
	%7 = alloca [65 x i8], align 1
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca i64, align 8
	%11 = alloca i64, align 8
	%12 = alloca i64, align 8
	%13 = alloca i64, align 8
	%14 = alloca i1, align 1
	%15 = alloca {i8*, i64, i64}, align 8
	%16 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %base, i64* %2
	store i1 zeroinitializer, i1* %3
		store i1 %is_signed, i1* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	store %..string zeroinitializer, %..string* %5
		store %..string %digits, %..string* %5
	store i64 zeroinitializer, i64* %6
		store i64 %flags, i64* %6
	; IfStmt
	%17 = load i64, i64* %2, align 8
	%18 = icmp slt i64 %17, 2
	br i1 %18, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%19 = load i64, i64* %2, align 8
	%20 = icmp sgt i64 %19, 32
	br i1 %20, label %if.then-2, label %if.done-3

if.then-2:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ea, i64 0, i32 0), i64 25}, i64 307, i64 9, %..string {i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.__str$1eb, i64 0, i32 0), i64 43})
	br label %if.done-3

if.done-3:
	; a
	store [65 x i8] zeroinitializer, [65 x i8]* %7
		; i
	store i64 zeroinitializer, i64* %8
		store i64 65, i64* %8
	; neg
	store i1 zeroinitializer, i1* %9
		; AssignStmt
	%21 = load i64, i64* %1, align 8
	%22 = load i1, i1* %3, align 1
	%23 = load i64, i64* %4, align 8
	%24 = call {i64, i1} @.strconv-22.is_integer_negative(i64 %21, i1 %22, i64 %23)
	%25 = extractvalue {i64, i1} %24, 0
	%26 = extractvalue {i64, i1} %24, 1
	store i64 %25, i64* %1
	store i1 %26, i1* %9
	; IfStmt
	%27 = load i64, i64* %2, align 8
	; cast - cast
	%28 = bitcast i64 %27 to i64
	%29 = call i1 @.strconv-22.append_bits.is_pow2-0(i64 %28)
	br i1 %29, label %if.then-4, label %if.else-8

if.then-4:
	; b
	store i64 zeroinitializer, i64* %10
		%30 = load i64, i64* %2, align 8
	; cast - cast
	%31 = bitcast i64 %30 to i64
	store i64 %31, i64* %10
	; m
	store i64 zeroinitializer, i64* %11
		%32 = load i64, i64* %10, align 8
	; cast - cast
	%33 = bitcast i64 %32 to i64
	%34 = sub i64 %33, 1
	store i64 %34, i64* %11
	; ForStmt
	br label %for.loop-5

for.loop-5:
	%35 = load i64, i64* %1, align 8
	%36 = load i64, i64* %10, align 8
	%37 = icmp uge i64 %35, %36
	br i1 %37, label %for.body-6, label %for.done-7

for.body-6:
	%38 = load i64, i64* %8, align 8
	%39 = sub i64 %38, 1
	store i64 %39, i64* %8
	; AssignStmt
	; IndexExpr
	%40 = load i64, i64* %8, align 8
	%41 = trunc i64 %40 to i32
	%42 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %41
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ec, i64 0, i32 0), i64 25}, i64 321, i64 6, i64 %40, i64 65)
	; IndexExpr
	%43 = load %..string, %..string* %5, align 8
	%44 = extractvalue %..string %43, 0
	%45 = extractvalue %..string %43, 1
	%46 = load i64, i64* %1, align 8
	; cast - cast
	%47 = bitcast i64 %46 to i64
	%48 = load i64, i64* %11, align 8
	%49 = and i64 %47, %48
	%50 = bitcast i64 %49 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ed, i64 0, i32 0), i64 25}, i64 321, i64 18, i64 %50, i64 %45)
	%51 = getelementptr inbounds i8, i8* %44, i64 %50
	%52 = load i8, i8* %51, align 1
	store i8 %52, i8* %42
	; AssignStmt
	%53 = load i64, i64* %10, align 8
	%54 = load i64, i64* %1, align 8
	%55 = lshr i64 %54, %53
	store i64 %55, i64* %1
	br label %for.loop-5

for.done-7:
	%56 = load i64, i64* %8, align 8
	%57 = sub i64 %56, 1
	store i64 %57, i64* %8
	; AssignStmt
	; IndexExpr
	%58 = load i64, i64* %8, align 8
	%59 = trunc i64 %58 to i32
	%60 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %59
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ee, i64 0, i32 0), i64 25}, i64 325, i64 5, i64 %58, i64 65)
	; IndexExpr
	%61 = load %..string, %..string* %5, align 8
	%62 = extractvalue %..string %61, 0
	%63 = extractvalue %..string %61, 1
	%64 = load i64, i64* %1, align 8
	; cast - cast
	%65 = bitcast i64 %64 to i64
	%66 = bitcast i64 %65 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ef, i64 0, i32 0), i64 25}, i64 325, i64 17, i64 %66, i64 %63)
	%67 = getelementptr inbounds i8, i8* %62, i64 %66
	%68 = load i8, i8* %67, align 1
	store i8 %68, i8* %60
	br label %if.done-12

if.else-8:
	; b
	store i64 zeroinitializer, i64* %12
		%69 = load i64, i64* %2, align 8
	; cast - cast
	%70 = bitcast i64 %69 to i64
	store i64 %70, i64* %12
	; ForStmt
	br label %for.loop-9

for.loop-9:
	%71 = load i64, i64* %1, align 8
	%72 = load i64, i64* %12, align 8
	%73 = icmp uge i64 %71, %72
	br i1 %73, label %for.body-10, label %for.done-11

for.body-10:
	%74 = load i64, i64* %8, align 8
	%75 = sub i64 %74, 1
	store i64 %75, i64* %8
	; q
	store i64 zeroinitializer, i64* %13
		%76 = load i64, i64* %1, align 8
	%77 = load i64, i64* %12, align 8
	%78 = udiv i64 %76, %77
	store i64 %78, i64* %13
	; AssignStmt
	; IndexExpr
	%79 = load i64, i64* %8, align 8
	%80 = trunc i64 %79 to i32
	%81 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %80
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f0, i64 0, i32 0), i64 25}, i64 331, i64 6, i64 %79, i64 65)
	; IndexExpr
	%82 = load %..string, %..string* %5, align 8
	%83 = extractvalue %..string %82, 0
	%84 = extractvalue %..string %82, 1
	%85 = load i64, i64* %1, align 8
	%86 = load i64, i64* %13, align 8
	%87 = load i64, i64* %12, align 8
	%88 = mul i64 %86, %87
	%89 = sub i64 %85, %88
	; cast - cast
	%90 = bitcast i64 %89 to i64
	%91 = bitcast i64 %90 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f1, i64 0, i32 0), i64 25}, i64 331, i64 18, i64 %91, i64 %84)
	%92 = getelementptr inbounds i8, i8* %83, i64 %91
	%93 = load i8, i8* %92, align 1
	store i8 %93, i8* %81
	; AssignStmt
	%94 = load i64, i64* %13, align 8
	store i64 %94, i64* %1
	br label %for.loop-9

for.done-11:
	%95 = load i64, i64* %8, align 8
	%96 = sub i64 %95, 1
	store i64 %96, i64* %8
	; AssignStmt
	; IndexExpr
	%97 = load i64, i64* %8, align 8
	%98 = trunc i64 %97 to i32
	%99 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %98
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f2, i64 0, i32 0), i64 25}, i64 336, i64 5, i64 %97, i64 65)
	; IndexExpr
	%100 = load %..string, %..string* %5, align 8
	%101 = extractvalue %..string %100, 0
	%102 = extractvalue %..string %100, 1
	%103 = load i64, i64* %1, align 8
	; cast - cast
	%104 = bitcast i64 %103 to i64
	%105 = bitcast i64 %104 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f3, i64 0, i32 0), i64 25}, i64 336, i64 17, i64 %105, i64 %102)
	%106 = getelementptr inbounds i8, i8* %101, i64 %105
	%107 = load i8, i8* %106, align 1
	store i8 %107, i8* %99
	br label %if.done-12

if.done-12:
	; IfStmt
	%108 = load i64, i64* %6, align 8
	%109 = and i64 %108, 1
	%110 = icmp ne i64 %109, 0
	br i1 %110, label %if.then-13, label %if.done-27

if.then-13:
	; ok
	store i1 zeroinitializer, i1* %14
		store i1 true, i1* %14
	; MatchStmt
	%111 = load i64, i64* %2, align 8
	%112 = icmp eq i64 %111, 2
	br i1 %112, label %match.case.body-15, label %match.case.next-14

match.case.next-14:
	%113 = icmp eq i64 %111, 8
	br i1 %113, label %match.fall.body-17, label %match.case.next-16

match.case.body-15:
	%114 = load i64, i64* %8, align 8
	%115 = sub i64 %114, 1
	store i64 %115, i64* %8
	; AssignStmt
	; IndexExpr
	%116 = load i64, i64* %8, align 8
	%117 = trunc i64 %116 to i32
	%118 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %117
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f4, i64 0, i32 0), i64 25}, i64 342, i64 19, i64 %116, i64 65)
	store i8 98, i8* %118
	br label %match.done-24

match.case.next-16:
	%119 = icmp eq i64 %111, 10
	br i1 %119, label %match.fall.body-19, label %match.case.next-18

match.fall.body-17:
	%120 = load i64, i64* %8, align 8
	%121 = sub i64 %120, 1
	store i64 %121, i64* %8
	; AssignStmt
	; IndexExpr
	%122 = load i64, i64* %8, align 8
	%123 = trunc i64 %122 to i32
	%124 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %123
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f5, i64 0, i32 0), i64 25}, i64 343, i64 19, i64 %122, i64 65)
	store i8 111, i8* %124
	br label %match.done-24

match.case.next-18:
	%125 = icmp eq i64 %111, 12
	br i1 %125, label %match.fall.body-21, label %match.case.next-20

match.fall.body-19:
	%126 = load i64, i64* %8, align 8
	%127 = sub i64 %126, 1
	store i64 %127, i64* %8
	; AssignStmt
	; IndexExpr
	%128 = load i64, i64* %8, align 8
	%129 = trunc i64 %128 to i32
	%130 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %129
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f6, i64 0, i32 0), i64 25}, i64 344, i64 19, i64 %128, i64 65)
	store i8 100, i8* %130
	br label %match.done-24

match.case.next-20:
	%131 = icmp eq i64 %111, 16
	br i1 %131, label %match.fall.body-23, label %match.case.next-22

match.fall.body-21:
	%132 = load i64, i64* %8, align 8
	%133 = sub i64 %132, 1
	store i64 %133, i64* %8
	; AssignStmt
	; IndexExpr
	%134 = load i64, i64* %8, align 8
	%135 = trunc i64 %134 to i32
	%136 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %135
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f7, i64 0, i32 0), i64 25}, i64 345, i64 19, i64 %134, i64 65)
	store i8 122, i8* %136
	br label %match.done-24

match.case.next-22:
	; AssignStmt
	store i1 false, i1* %14
	br label %match.done-24

match.fall.body-23:
	%137 = load i64, i64* %8, align 8
	%138 = sub i64 %137, 1
	store i64 %138, i64* %8
	; AssignStmt
	; IndexExpr
	%139 = load i64, i64* %8, align 8
	%140 = trunc i64 %139 to i32
	%141 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %140
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f8, i64 0, i32 0), i64 25}, i64 346, i64 19, i64 %139, i64 65)
	store i8 120, i8* %141
	br label %match.done-24

match.done-24:
	; IfStmt
	%142 = load i1, i1* %14, align 1
	br i1 %142, label %if.then-25, label %if.done-26

if.then-25:
	%143 = load i64, i64* %8, align 8
	%144 = sub i64 %143, 1
	store i64 %144, i64* %8
	; AssignStmt
	; IndexExpr
	%145 = load i64, i64* %8, align 8
	%146 = trunc i64 %145 to i32
	%147 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %146
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1f9, i64 0, i32 0), i64 25}, i64 351, i64 6, i64 %145, i64 65)
	store i8 48, i8* %147
	br label %if.done-26

if.done-26:
	br label %if.done-27

if.done-27:
	; IfStmt
	%148 = load i1, i1* %9, align 1
	br i1 %148, label %if.then-28, label %if.else-29

if.then-28:
	%149 = load i64, i64* %8, align 8
	%150 = sub i64 %149, 1
	store i64 %150, i64* %8
	; AssignStmt
	; IndexExpr
	%151 = load i64, i64* %8, align 8
	%152 = trunc i64 %151 to i32
	%153 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %152
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fa, i64 0, i32 0), i64 25}, i64 356, i64 10, i64 %151, i64 65)
	store i8 45, i8* %153
	br label %if.done-35

if.else-29:
	; IfStmt
	%154 = load i64, i64* %6, align 8
	%155 = and i64 %154, 2
	%156 = icmp ne i64 %155, 0
	br i1 %156, label %if.then-30, label %if.else-31

if.then-30:
	%157 = load i64, i64* %8, align 8
	%158 = sub i64 %157, 1
	store i64 %158, i64* %8
	; AssignStmt
	; IndexExpr
	%159 = load i64, i64* %8, align 8
	%160 = trunc i64 %159 to i32
	%161 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %160
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fb, i64 0, i32 0), i64 25}, i64 358, i64 10, i64 %159, i64 65)
	store i8 43, i8* %161
	br label %if.done-34

if.else-31:
	; IfStmt
	%162 = load i64, i64* %6, align 8
	%163 = and i64 %162, 4
	%164 = icmp ne i64 %163, 0
	br i1 %164, label %if.then-32, label %if.done-33

if.then-32:
	%165 = load i64, i64* %8, align 8
	%166 = sub i64 %165, 1
	store i64 %166, i64* %8
	; AssignStmt
	; IndexExpr
	%167 = load i64, i64* %8, align 8
	%168 = trunc i64 %167 to i32
	%169 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %168
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fc, i64 0, i32 0), i64 25}, i64 360, i64 10, i64 %167, i64 65)
	store i8 32, i8* %169
	br label %if.done-33

if.done-33:
	br label %if.done-34

if.done-34:
	br label %if.done-35

if.done-35:
	; append
	%170 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%171 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%172 = load i64, i64* %8, align 8
	%173 = load [65 x i8], [65 x i8]* %7, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fd, i64 0, i32 0), i64 25}, i64 364, i64 17, i64 %172, i64 65, i64 65)
	%174 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 0
	%175 = getelementptr inbounds i8, i8* %174, i64 %172
	%176 = sub i64 65, %172
	%177 = sub i64 65, %172
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %15
	%178 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %15, i64 0, i32 0
	store i8* %175, i8** %178
	%179 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %15, i64 0, i32 1
	store i64 %176, i64* %179
	%180 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %15, i64 0, i32 2
	store i64 %177, i64* %180
	%181 = load {i8*, i64, i64}, {i8*, i64, i64}* %15, align 8
	%182 = extractvalue {i8*, i64, i64} %181, 0
	%183 = extractvalue {i8*, i64, i64} %181, 1
	%184 = bitcast i8* %182 to %..rawptr
	%185 = call i64 @.__slice_append(%..rawptr %170, i64 1, i64 1, %..rawptr %184, i64 %183)
	; ReturnStmt
	%186 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; cast - cast
	%187 = extractvalue {i8*, i64, i64} %186, 0
	%188 = extractvalue {i8*, i64, i64} %186, 1
	store %..string zeroinitializer, %..string* %16
	%189 = getelementptr inbounds %..string, %..string* %16, i64 0, i32 0
	%190 = getelementptr inbounds %..string, %..string* %16, i64 0, i32 1
	store i8* %187, i8** %189
	store i64 %188, i64* %190
	%191 = load %..string, %..string* %16, align 8
	ret %..string %191
}

define i1 @.strconv-22.append_bits.is_pow2-0(i64 %x) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %x, i64* %0
	; IfStmt
	%1 = load i64, i64* %0, align 8
	%2 = icmp sle i64 %1, 0
	br i1 %2, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; ReturnStmt
	%3 = load i64, i64* %0, align 8
	%4 = load i64, i64* %0, align 8
	%5 = sub i64 %4, 1
	%6 = and i64 %3, %5
	%7 = icmp eq i64 %6, 0
	ret i1 %7
}

define void @.decimal-24.trim(%decimal-24.Decimal* %a) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	; ForStmt
	br label %for.loop-1

for.loop-1:
	; SelectorExpr
	%1 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%2 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %1, i64 0
	%3 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %2, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	%5 = icmp sgt i64 %4, 0
	br i1 %5, label %cmp.and-2, label %for.done-4

cmp.and-2:
	; IndexExpr
	; SelectorExpr
	%6 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%7 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %6, i64 0
	%8 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %7, i64 0, i32 2
	; SelectorExpr
	%9 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%10 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %9, i64 0
	%11 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %10, i64 0, i32 0
	%12 = load i64, i64* %11, align 8
	%13 = sub i64 %12, 1
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [384 x i8], [384 x i8]* %8, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1fe, i64 0, i32 0), i64 25}, i64 52, i64 32, i64 %13, i64 384)
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 48
	br i1 %17, label %for.body-3, label %for.done-4

for.body-3:
	; SelectorExpr
	%18 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%19 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %18, i64 0
	%20 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %19, i64 0, i32 0
	%21 = load i64, i64* %20, align 8
	%22 = sub i64 %21, 1
	store i64 %22, i64* %20
	br label %for.loop-1

for.done-4:
	; IfStmt
	; SelectorExpr
	%23 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%24 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %23, i64 0
	%25 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %24, i64 0, i32 0
	%26 = load i64, i64* %25, align 8
	%27 = icmp eq i64 %26, 0
	br i1 %27, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%28 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%29 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %28, i64 0
	%30 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %29, i64 0, i32 1
	store i64 0, i64* %30
	br label %if.done-6

if.done-6:
	ret void
}

define void @.decimal-24.assign(%decimal-24.Decimal* %a, i64 %i) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca [32 x i8], align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %i, i64* %1
	; buf
	store [32 x i8] zeroinitializer, [32 x i8]* %2
		; n
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%5 = load i64, i64* %1, align 8
	%6 = icmp ugt i64 %5, 0
	br i1 %6, label %for.body-2, label %for.done-3

for.body-2:
	; j
	store i64 zeroinitializer, i64* %4
		%7 = load i64, i64* %1, align 8
	%8 = udiv i64 %7, 10
	store i64 %8, i64* %4
	; AssignStmt
	%9 = load i64, i64* %4, align 8
	%10 = mul i64 10, %9
	%11 = load i64, i64* %1, align 8
	%12 = sub i64 %11, %10
	store i64 %12, i64* %1
	; AssignStmt
	; IndexExpr
	%13 = load i64, i64* %3, align 8
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ff, i64 0, i32 0), i64 25}, i64 67, i64 7, i64 %13, i64 32)
	%16 = load i64, i64* %1, align 8
	%17 = add i64 48, %16
	; cast - cast
	%18 = trunc i64 %17 to i8
	store i8 %18, i8* %15
	%19 = load i64, i64* %3, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %3
	; AssignStmt
	%21 = load i64, i64* %4, align 8
	store i64 %21, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ForStmt
	%25 = load i64, i64* %3, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %3
	br label %for.loop-4

for.loop-4:
	%27 = load i64, i64* %3, align 8
	%28 = icmp sge i64 %27, 0
	br i1 %28, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%29 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%30 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %29, i64 0
	%31 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %30, i64 0, i32 2
	; SelectorExpr
	%32 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%33 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %32, i64 0
	%34 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %33, i64 0, i32 0
	%35 = load i64, i64* %34, align 8
	%36 = trunc i64 %35 to i32
	%37 = getelementptr inbounds [384 x i8], [384 x i8]* %31, i64 0, i32 %36
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$200, i64 0, i32 0), i64 25}, i64 74, i64 14, i64 %35, i64 384)
	; IndexExpr
	%38 = load i64, i64* %3, align 8
	%39 = trunc i64 %38 to i32
	%40 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i32 %39
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$201, i64 0, i32 0), i64 25}, i64 74, i64 27, i64 %38, i64 32)
	%41 = load i8, i8* %40, align 1
	store i8 %41, i8* %37
	; SelectorExpr
	%42 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%43 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %42, i64 0
	%44 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %43, i64 0, i32 0
	%45 = load i64, i64* %44, align 8
	%46 = add i64 %45, 1
	store i64 %46, i64* %44
	%47 = load i64, i64* %3, align 8
	%48 = sub i64 %47, 1
	store i64 %48, i64* %3
	br label %for.loop-4

for.done-6:
	; AssignStmt
	; SelectorExpr
	%49 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%50 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %49, i64 0
	%51 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %50, i64 0, i32 1
	; SelectorExpr
	%52 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%53 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %52, i64 0
	%54 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %53, i64 0, i32 0
	%55 = load i64, i64* %54, align 8
	store i64 %55, i64* %51
	%56 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	call void @.decimal-24.trim(%decimal-24.Decimal* %56)
	ret void
}

define void @.decimal-24.shift_right(%decimal-24.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; r
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; w
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; n
	store i64 zeroinitializer, i64* %4
		; ForStmt
	br label %for.loop-1

for.loop-1:
	%10 = load i64, i64* %4, align 8
	%11 = load i64, i64* %1, align 8
	%12 = lshr i64 %10, %11
	%13 = icmp eq i64 %12, 0
	br i1 %13, label %for.body-2, label %for.done-10

for.body-2:
	; IfStmt
	%14 = load i64, i64* %2, align 8
	; SelectorExpr
	%15 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%16 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %15, i64 0
	%17 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %16, i64 0, i32 0
	%18 = load i64, i64* %17, align 8
	%19 = icmp sge i64 %14, %18
	br i1 %19, label %if.then-3, label %if.done-9

if.then-3:
	; IfStmt
	%20 = load i64, i64* %4, align 8
	%21 = icmp eq i64 %20, 0
	br i1 %21, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ReturnStmt
	ret void

if.done-5:
	; ForStmt
	br label %for.loop-6

for.loop-6:
	%25 = load i64, i64* %4, align 8
	%26 = load i64, i64* %1, align 8
	%27 = lshr i64 %25, %26
	%28 = icmp eq i64 %27, 0
	br i1 %28, label %for.body-7, label %for.done-8

for.body-7:
	; AssignStmt
	%29 = load i64, i64* %4, align 8
	%30 = mul i64 %29, 10
	store i64 %30, i64* %4
	%31 = load i64, i64* %2, align 8
	%32 = add i64 %31, 1
	store i64 %32, i64* %2
	br label %for.loop-6

for.done-8:
	; break
	br label %for.done-10

if.done-9:
	; c
	store i64 zeroinitializer, i64* %5
		; IndexExpr
	; SelectorExpr
	%33 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %34, i64 0, i32 2
	%36 = load i64, i64* %2, align 8
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %37
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$202, i64 0, i32 0), i64 25}, i64 102, i64 27, i64 %36, i64 384)
	%39 = load i8, i8* %38, align 1
	; cast - cast
	%40 = zext i8 %39 to i64
	store i64 %40, i64* %5
	; AssignStmt
	%41 = load i64, i64* %4, align 8
	%42 = mul i64 %41, 10
	%43 = load i64, i64* %5, align 8
	%44 = add i64 %42, %43
	%45 = sub i64 %44, 48
	store i64 %45, i64* %4
	%46 = load i64, i64* %2, align 8
	%47 = add i64 %46, 1
	store i64 %47, i64* %2
	br label %for.loop-1

for.done-10:
	; AssignStmt
	; SelectorExpr
	%48 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %49, i64 0, i32 1
	%51 = load i64, i64* %2, align 8
	%52 = sub i64 %51, 1
	%53 = load i64, i64* %50, align 8
	%54 = sub i64 %53, %52
	store i64 %54, i64* %50
	; mask
	store i64 zeroinitializer, i64* %6
		%55 = load i64, i64* %1, align 8
	%56 = shl i64 1, %55
	%57 = bitcast i64 %56 to i64
	%58 = sub i64 %57, 1
	%59 = bitcast i64 %58 to i64
	store i64 %59, i64* %6
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%60 = load i64, i64* %2, align 8
	; SelectorExpr
	%61 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%62 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %61, i64 0
	%63 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %62, i64 0, i32 0
	%64 = load i64, i64* %63, align 8
	%65 = icmp slt i64 %60, %64
	br i1 %65, label %for.body-12, label %for.done-13

for.body-12:
	; c
	store i64 zeroinitializer, i64* %7
		; IndexExpr
	; SelectorExpr
	%66 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%67 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %66, i64 0
	%68 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %67, i64 0, i32 2
	%69 = load i64, i64* %2, align 8
	%70 = trunc i64 %69 to i32
	%71 = getelementptr inbounds [384 x i8], [384 x i8]* %68, i64 0, i32 %70
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$203, i64 0, i32 0), i64 25}, i64 110, i64 27, i64 %69, i64 384)
	%72 = load i8, i8* %71, align 1
	; cast - cast
	%73 = zext i8 %72 to i64
	store i64 %73, i64* %7
	; dig
	store i64 zeroinitializer, i64* %8
		%74 = load i64, i64* %4, align 8
	%75 = load i64, i64* %1, align 8
	%76 = lshr i64 %74, %75
	store i64 %76, i64* %8
	; AssignStmt
	%77 = load i64, i64* %6, align 8
	%78 = load i64, i64* %4, align 8
	%79 = and i64 %78, %77
	store i64 %79, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%80 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%81 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %80, i64 0
	%82 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %81, i64 0, i32 2
	%83 = load i64, i64* %3, align 8
	%84 = trunc i64 %83 to i32
	%85 = getelementptr inbounds [384 x i8], [384 x i8]* %82, i64 0, i32 %84
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$204, i64 0, i32 0), i64 25}, i64 113, i64 12, i64 %83, i64 384)
	%86 = load i64, i64* %8, align 8
	%87 = add i64 48, %86
	; cast - cast
	%88 = trunc i64 %87 to i8
	store i8 %88, i8* %85
	%89 = load i64, i64* %3, align 8
	%90 = add i64 %89, 1
	store i64 %90, i64* %3
	; AssignStmt
	%91 = load i64, i64* %4, align 8
	%92 = mul i64 %91, 10
	%93 = load i64, i64* %7, align 8
	%94 = add i64 %92, %93
	%95 = sub i64 %94, 48
	store i64 %95, i64* %4
	%96 = load i64, i64* %2, align 8
	%97 = add i64 %96, 1
	store i64 %97, i64* %2
	br label %for.loop-11

for.done-13:
	; ForStmt
	br label %for.loop-14

for.loop-14:
	%98 = load i64, i64* %4, align 8
	%99 = icmp ugt i64 %98, 0
	br i1 %99, label %for.body-15, label %for.done-21

for.body-15:
	; dig
	store i64 zeroinitializer, i64* %9
		%100 = load i64, i64* %4, align 8
	%101 = load i64, i64* %1, align 8
	%102 = lshr i64 %100, %101
	store i64 %102, i64* %9
	; AssignStmt
	%103 = load i64, i64* %6, align 8
	%104 = load i64, i64* %4, align 8
	%105 = and i64 %104, %103
	store i64 %105, i64* %4
	; IfStmt
	%106 = load i64, i64* %3, align 8
	%107 = icmp slt i64 %106, 384
	br i1 %107, label %if.then-16, label %if.else-17

if.then-16:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%108 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%109 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %108, i64 0
	%110 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %109, i64 0, i32 2
	%111 = load i64, i64* %3, align 8
	%112 = trunc i64 %111 to i32
	%113 = getelementptr inbounds [384 x i8], [384 x i8]* %110, i64 0, i32 %112
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$205, i64 0, i32 0), i64 25}, i64 122, i64 13, i64 %111, i64 384)
	%114 = load i64, i64* %9, align 8
	%115 = add i64 48, %114
	; cast - cast
	%116 = trunc i64 %115 to i8
	store i8 %116, i8* %113
	%117 = load i64, i64* %3, align 8
	%118 = add i64 %117, 1
	store i64 %118, i64* %3
	br label %if.done-20

if.else-17:
	; IfStmt
	%119 = load i64, i64* %9, align 8
	%120 = icmp ugt i64 %119, 0
	br i1 %120, label %if.then-18, label %if.done-19

if.then-18:
	; AssignStmt
	; SelectorExpr
	%121 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%122 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %121, i64 0
	%123 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %122, i64 0, i32 4
	store i1 true, i1* %123
	br label %if.done-19

if.done-19:
	br label %if.done-20

if.done-20:
	; AssignStmt
	%124 = load i64, i64* %4, align 8
	%125 = mul i64 %124, 10
	store i64 %125, i64* %4
	br label %for.loop-14

for.done-21:
	; AssignStmt
	; SelectorExpr
	%126 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%127 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %126, i64 0
	%128 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %127, i64 0, i32 0
	%129 = load i64, i64* %3, align 8
	store i64 %129, i64* %128
	%130 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	call void @.decimal-24.trim(%decimal-24.Decimal* %130)
	ret void
}

define void @.decimal-24.shift_left(%decimal-24.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; delta
	store i64 zeroinitializer, i64* %2
		%10 = load i64, i64* %1, align 8
	%11 = udiv i64 %10, 4
	; cast - cast
	%12 = bitcast i64 %11 to i64
	store i64 %12, i64* %2
	; r
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%13 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%14 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %13, i64 0
	%15 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %14, i64 0, i32 0
	%16 = load i64, i64* %15, align 8
	store i64 %16, i64* %3
	; w
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%17 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%18 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %17, i64 0
	%19 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %18, i64 0, i32 0
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %2, align 8
	%22 = add i64 %20, %21
	store i64 %22, i64* %4
	; n
	store i64 zeroinitializer, i64* %5
		; ForStmt
	%23 = load i64, i64* %3, align 8
	%24 = sub i64 %23, 1
	store i64 %24, i64* %3
	br label %for.loop-1

for.loop-1:
	%25 = load i64, i64* %3, align 8
	%26 = icmp sge i64 %25, 0
	br i1 %26, label %for.body-2, label %for.done-8

for.body-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%27 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%28 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %27, i64 0
	%29 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %28, i64 0, i32 2
	%30 = load i64, i64* %3, align 8
	%31 = trunc i64 %30 to i32
	%32 = getelementptr inbounds [384 x i8], [384 x i8]* %29, i64 0, i32 %31
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$206, i64 0, i32 0), i64 25}, i64 143, i64 28, i64 %30, i64 384)
	%33 = load i8, i8* %32, align 1
	; cast - cast
	%34 = zext i8 %33 to i64
	%35 = sub i64 %34, 48
	%36 = load i64, i64* %1, align 8
	%37 = shl i64 %35, %36
	%38 = load i64, i64* %5, align 8
	%39 = add i64 %38, %37
	store i64 %39, i64* %5
	; quo
	store i64 zeroinitializer, i64* %6
		%40 = load i64, i64* %5, align 8
	%41 = udiv i64 %40, 10
	store i64 %41, i64* %6
	; rem
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %5, align 8
	%43 = load i64, i64* %6, align 8
	%44 = mul i64 10, %43
	%45 = sub i64 %42, %44
	store i64 %45, i64* %7
	%46 = load i64, i64* %4, align 8
	%47 = sub i64 %46, 1
	store i64 %47, i64* %4
	; IfStmt
	%48 = load i64, i64* %4, align 8
	%49 = icmp slt i64 %48, 384
	br i1 %49, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%50 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%51 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %50, i64 0
	%52 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %51, i64 0, i32 2
	%53 = load i64, i64* %4, align 8
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [384 x i8], [384 x i8]* %52, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$207, i64 0, i32 0), i64 25}, i64 148, i64 13, i64 %53, i64 384)
	%56 = load i64, i64* %7, align 8
	%57 = add i64 48, %56
	; cast - cast
	%58 = trunc i64 %57 to i8
	store i8 %58, i8* %55
	br label %if.done-7

if.else-4:
	; IfStmt
	%59 = load i64, i64* %7, align 8
	%60 = icmp ne i64 %59, 0
	br i1 %60, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%61 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%62 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %61, i64 0
	%63 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %62, i64 0, i32 4
	store i1 true, i1* %63
	br label %if.done-6

if.done-6:
	br label %if.done-7

if.done-7:
	; AssignStmt
	%64 = load i64, i64* %6, align 8
	store i64 %64, i64* %5
	%65 = load i64, i64* %3, align 8
	%66 = sub i64 %65, 1
	store i64 %66, i64* %3
	br label %for.loop-1

for.done-8:
	; ForStmt
	br label %for.loop-9

for.loop-9:
	%67 = load i64, i64* %5, align 8
	%68 = icmp ugt i64 %67, 0
	br i1 %68, label %for.body-10, label %for.done-16

for.body-10:
	; quo
	store i64 zeroinitializer, i64* %8
		%69 = load i64, i64* %5, align 8
	%70 = udiv i64 %69, 10
	store i64 %70, i64* %8
	; rem
	store i64 zeroinitializer, i64* %9
		%71 = load i64, i64* %5, align 8
	%72 = load i64, i64* %8, align 8
	%73 = mul i64 10, %72
	%74 = sub i64 %71, %73
	store i64 %74, i64* %9
	%75 = load i64, i64* %4, align 8
	%76 = sub i64 %75, 1
	store i64 %76, i64* %4
	; IfStmt
	%77 = load i64, i64* %4, align 8
	%78 = icmp slt i64 %77, 384
	br i1 %78, label %if.then-11, label %if.else-12

if.then-11:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%79 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%80 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %79, i64 0
	%81 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %80, i64 0, i32 2
	%82 = load i64, i64* %4, align 8
	%83 = trunc i64 %82 to i32
	%84 = getelementptr inbounds [384 x i8], [384 x i8]* %81, i64 0, i32 %83
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$208, i64 0, i32 0), i64 25}, i64 160, i64 13, i64 %82, i64 384)
	%85 = load i64, i64* %9, align 8
	%86 = add i64 48, %85
	; cast - cast
	%87 = trunc i64 %86 to i8
	store i8 %87, i8* %84
	br label %if.done-15

if.else-12:
	; IfStmt
	%88 = load i64, i64* %9, align 8
	%89 = icmp ne i64 %88, 0
	br i1 %89, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; SelectorExpr
	%90 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%91 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %90, i64 0
	%92 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %91, i64 0, i32 4
	store i1 true, i1* %92
	br label %if.done-14

if.done-14:
	br label %if.done-15

if.done-15:
	; AssignStmt
	%93 = load i64, i64* %8, align 8
	store i64 %93, i64* %5
	br label %for.loop-9

for.done-16:
	; AssignStmt
	; SelectorExpr
	%94 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%95 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %94, i64 0
	%96 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %95, i64 0, i32 0
	%97 = load i64, i64* %2, align 8
	%98 = load i64, i64* %96, align 8
	%99 = add i64 %98, %97
	store i64 %99, i64* %96
	; AssignStmt
	; SelectorExpr
	%100 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%101 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %100, i64 0
	%102 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %101, i64 0, i32 0
	; min
	; SelectorExpr
	%103 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%104 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %103, i64 0
	%105 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %104, i64 0, i32 0
	%106 = load i64, i64* %105, align 8
	%107 = icmp slt i64 %106, 384
	%108 = select i1 %107, i64 %106, i64 384
	store i64 %108, i64* %102
	; AssignStmt
	; SelectorExpr
	%109 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%110 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %109, i64 0
	%111 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %110, i64 0, i32 1
	%112 = load i64, i64* %2, align 8
	%113 = load i64, i64* %111, align 8
	%114 = add i64 %113, %112
	store i64 %114, i64* %111
	%115 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	call void @.decimal-24.trim(%decimal-24.Decimal* %115)
	ret void
}

define void @.decimal-24.shift(%decimal-24.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; MatchStmt
	; SelectorExpr
	%2 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%3 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %2, i64 0
	%4 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %3, i64 0, i32 0
	%5 = load i64, i64* %4, align 8
	%6 = icmp eq i64 %5, 0
	%7 = icmp eq i1 true, %6
	br i1 %7, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%8 = load i64, i64* %1, align 8
	%9 = icmp sgt i64 %8, 0
	%10 = icmp eq i1 true, %9
	br i1 %10, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	br label %match.done-13

match.case.next-3:
	%11 = load i64, i64* %1, align 8
	%12 = icmp slt i64 %11, 0
	%13 = icmp eq i1 true, %12
	br i1 %13, label %match.fall.body-9, label %match.case.next-8

match.fall.body-4:
	; ForStmt
	br label %for.loop-5

for.loop-5:
	%14 = load i64, i64* %1, align 8
	%15 = icmp sgt i64 %14, 60
	br i1 %15, label %for.body-6, label %for.done-7

for.body-6:
	%16 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	call void @.decimal-24.shift_left(%decimal-24.Decimal* %16, i64 60)
	; AssignStmt
	%17 = load i64, i64* %1, align 8
	%18 = sub i64 %17, 60
	store i64 %18, i64* %1
	br label %for.loop-5

for.done-7:
	%19 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%20 = load i64, i64* %1, align 8
	; cast - cast
	%21 = bitcast i64 %20 to i64
	call void @.decimal-24.shift_left(%decimal-24.Decimal* %19, i64 %21)
	br label %match.done-13

match.case.next-8:
	br label %match.done-13

match.fall.body-9:
	; ForStmt
	br label %for.loop-10

for.loop-10:
	%22 = load i64, i64* %1, align 8
	%23 = icmp slt i64 %22, -60
	br i1 %23, label %for.body-11, label %for.done-12

for.body-11:
	%24 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	call void @.decimal-24.shift_right(%decimal-24.Decimal* %24, i64 60)
	; AssignStmt
	%25 = load i64, i64* %1, align 8
	%26 = add i64 %25, 60
	store i64 %26, i64* %1
	br label %for.loop-10

for.done-12:
	%27 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%28 = load i64, i64* %1, align 8
	%29 = sub i64 0, %28
	; cast - cast
	%30 = bitcast i64 %29 to i64
	call void @.decimal-24.shift_right(%decimal-24.Decimal* %27, i64 %30)
	br label %match.done-13

match.done-13:
	ret void
}

define i1 @.decimal-24.can_round_up(%decimal-24.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret i1 false

if.done-3:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	%10 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%11 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %10, i64 0
	%12 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %11, i64 0, i32 2
	%13 = load i64, i64* %1, align 8
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [384 x i8], [384 x i8]* %12, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$209, i64 0, i32 0), i64 25}, i64 196, i64 14, i64 %13, i64 384)
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 53
	br i1 %17, label %cmp.and-4, label %if.done-10

cmp.and-4:
	%18 = load i64, i64* %1, align 8
	%19 = add i64 %18, 1
	; SelectorExpr
	%20 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%21 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %20, i64 0
	%22 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %21, i64 0, i32 0
	%23 = load i64, i64* %22, align 8
	%24 = icmp eq i64 %19, %23
	br i1 %24, label %if.then-5, label %if.done-10

if.then-5:
	; IfStmt
	; SelectorExpr
	%25 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%26 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %25, i64 0
	%27 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %26, i64 0, i32 4
	%28 = load i1, i1* %27, align 1
	br i1 %28, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	ret i1 true

if.done-7:
	; ReturnStmt
	%29 = load i64, i64* %1, align 8
	%30 = icmp sgt i64 %29, 0
	%31 = load i64, i64* %1, align 8
	%32 = icmp sgt i64 %31, 0
	br i1 %32, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; IndexExpr
	; SelectorExpr
	%33 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %34, i64 0, i32 2
	%36 = load i64, i64* %1, align 8
	%37 = sub i64 %36, 1
	%38 = trunc i64 %37 to i32
	%39 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %38
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$20a, i64 0, i32 0), i64 25}, i64 200, i64 30, i64 %37, i64 384)
	%40 = load i8, i8* %39, align 1
	%41 = sub i8 %40, 48
	%42 = urem i8 %41, 2
	%43 = icmp ne i8 %42, 0
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%44 = phi i1 [ false, %if.done-7 ], [ %43, %logical.cmp.rhs-8 ]
	ret i1 %44

if.done-10:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%45 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%46 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %45, i64 0
	%47 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %46, i64 0, i32 2
	%48 = load i64, i64* %1, align 8
	%49 = trunc i64 %48 to i32
	%50 = getelementptr inbounds [384 x i8], [384 x i8]* %47, i64 0, i32 %49
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$20b, i64 0, i32 0), i64 25}, i64 203, i64 18, i64 %48, i64 384)
	%51 = load i8, i8* %50, align 1
	%52 = icmp uge i8 %51, 53
	ret i1 %52
}

define void @.decimal-24.round(%decimal-24.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; IfStmt
	%10 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = call i1 @.decimal-24.can_round_up(%decimal-24.Decimal* %10, i64 %11)
	br i1 %12, label %if.then-4, label %if.else-5

if.then-4:
	%13 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%14 = load i64, i64* %1, align 8
	call void @.decimal-24.round_up(%decimal-24.Decimal* %13, i64 %14)
	br label %if.done-6

if.else-5:
	%15 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%16 = load i64, i64* %1, align 8
	call void @.decimal-24.round_down(%decimal-24.Decimal* %15, i64 %16)
	br label %if.done-6

if.done-6:
	ret void
}

define void @.decimal-24.round_up(%decimal-24.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i8, align 1
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%4 = load i64, i64* %1, align 8
	%5 = icmp slt i64 %4, 0
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %8, i64 0, i32 0
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	br i1 %11, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %2
		%12 = load i64, i64* %1, align 8
	%13 = sub i64 %12, 1
	store i64 %13, i64* %2
	br label %for.loop-4

for.loop-4:
	%14 = load i64, i64* %2, align 8
	%15 = icmp sge i64 %14, 0
	br i1 %15, label %for.body-5, label %for.done-8

for.body-5:
	; IfStmt
	; c
	store i8 zeroinitializer, i8* %3
		; IndexExpr
	; SelectorExpr
	%16 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%17 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %16, i64 0
	%18 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %17, i64 0, i32 2
	%19 = load i64, i64* %2, align 8
	%20 = trunc i64 %19 to i32
	%21 = getelementptr inbounds [384 x i8], [384 x i8]* %18, i64 0, i32 %20
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$20c, i64 0, i32 0), i64 25}, i64 219, i64 20, i64 %19, i64 384)
	%22 = load i8, i8* %21, align 1
	store i8 %22, i8* %3
	%23 = load i8, i8* %3, align 1
	%24 = icmp ult i8 %23, 57
	br i1 %24, label %if.then-6, label %if.done-7

if.then-6:
	; IndexExpr
	; SelectorExpr
	%25 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%26 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %25, i64 0
	%27 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %26, i64 0, i32 2
	%28 = load i64, i64* %2, align 8
	%29 = trunc i64 %28 to i32
	%30 = getelementptr inbounds [384 x i8], [384 x i8]* %27, i64 0, i32 %29
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$20d, i64 0, i32 0), i64 25}, i64 220, i64 13, i64 %28, i64 384)
	%31 = load i8, i8* %30, align 1
	%32 = add i8 %31, 1
	store i8 %32, i8* %30
	; AssignStmt
	; SelectorExpr
	%33 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %34, i64 0, i32 0
	%36 = load i64, i64* %2, align 8
	%37 = add i64 %36, 1
	store i64 %37, i64* %35
	; ReturnStmt
	ret void

if.done-7:
	%38 = load i64, i64* %2, align 8
	%39 = sub i64 %38, 1
	store i64 %39, i64* %2
	br label %for.loop-4

for.done-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%40 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%41 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %40, i64 0
	%42 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %41, i64 0, i32 2
	%43 = getelementptr inbounds [384 x i8], [384 x i8]* %42, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$20e, i64 0, i32 0), i64 25}, i64 227, i64 11, i64 0, i64 384)
	store i8 49, i8* %43
	; AssignStmt
	; SelectorExpr
	%44 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%45 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %44, i64 0
	%46 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %45, i64 0, i32 0
	store i64 1, i64* %46
	; SelectorExpr
	%47 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%48 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %47, i64 0
	%49 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %48, i64 0, i32 1
	%50 = load i64, i64* %49, align 8
	%51 = add i64 %50, 1
	store i64 %51, i64* %49
	ret void
}

define void @.decimal-24.round_down(%decimal-24.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-24.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-24.Decimal* zeroinitializer, %decimal-24.Decimal** %0
		store %decimal-24.Decimal* %a, %decimal-24.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; AssignStmt
	; SelectorExpr
	%10 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	%11 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %10, i64 0
	%12 = getelementptr inbounds %decimal-24.Decimal, %decimal-24.Decimal* %11, i64 0, i32 0
	%13 = load i64, i64* %1, align 8
	store i64 %13, i64* %12
	%14 = load %decimal-24.Decimal*, %decimal-24.Decimal** %0, align 8
	call void @.decimal-24.trim(%decimal-24.Decimal* %14)
	ret void
}

define void @.__$startup_runtime() noinline {
decls-0:
	%0 = call i64 @.os_windows-19.get_std_handle(i64 -11)
	%1 = call i64 @.os_windows-19.get_std_handle(i64 -12)
	store i64 %0, i64* @.stdout
	store i64 %1, i64* @.stderr
	%2 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%3 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 0
	store %Type_Info* %2, %Type_Info** %3
	%4 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 1
	store i64 142, i64* %4
	%5 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 2
	store i64 142, i64* %5
	%6 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	; Type_Info_Named
	%7 = bitcast %Type_Info* %6 to %Type_Info.Named*
	%8 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%9 = bitcast %Type_Info* %8 to %Type_Info*
	%10 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %7, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$20f, i64 0, i32 0), i64 5}, %..string* %10
	%11 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %7, i64 0, i32 1
	store %Type_Info* %9, %Type_Info** %11
	%12 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %12
	%13 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	; Type_Info_Struct
	%14 = bitcast %Type_Info* %13 to %Type_Info.Struct*
	%15 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %14, i64 0, i32 0
	%16 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 3
	store i64 24, i64* %16
	%17 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 4
	store i64 8, i64* %17
	%18 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 5
	store i1 false, i1* %18
	%19 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 6
	store i1 true, i1* %19
	%20 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 7
	store i1 false, i1* %20
	%21 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 0
	%22 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 0
	%23 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 0
	%24 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%25 = bitcast %Type_Info* %24 to %Type_Info*
	%26 = getelementptr inbounds %Type_Info*, %Type_Info** %21, i64 0
	%27 = getelementptr inbounds i64, i64* %23, i64 0
	%28 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	store %Type_Info* %28, %Type_Info** %26
	%29 = getelementptr inbounds %..string, %..string* %22, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$210, i64 0, i32 0), i64 4}, %..string* %29
	store i64 0, i64* %27
	%30 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%31 = bitcast %Type_Info* %30 to %Type_Info*
	%32 = getelementptr inbounds %Type_Info*, %Type_Info** %21, i64 1
	%33 = getelementptr inbounds i64, i64* %23, i64 1
	%34 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %34, %Type_Info** %32
	%35 = getelementptr inbounds %..string, %..string* %22, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$211, i64 0, i32 0), i64 4}, %..string* %35
	store i64 16, i64* %33
	%36 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 0
	%37 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %36, i64 0, i32 0
	store %Type_Info** %21, %Type_Info*** %37
	%38 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %36, i64 0, i32 1
	store i64 2, i64* %38
	%39 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %36, i64 0, i32 2
	store i64 2, i64* %39
	%40 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 1
	%41 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %40, i64 0, i32 0
	store %..string* %22, %..string** %41
	%42 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %40, i64 0, i32 1
	store i64 2, i64* %42
	%43 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %40, i64 0, i32 2
	store i64 2, i64* %43
	%44 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 2
	%45 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %44, i64 0, i32 0
	store i64* %23, i64** %45
	%46 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %44, i64 0, i32 1
	store i64 2, i64* %46
	%47 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %44, i64 0, i32 2
	store i64 2, i64* %47
	%48 = getelementptr inbounds %Type_Info, %Type_Info* %13, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %48
	%49 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	; Type_Info_Basic
	%50 = bitcast %Type_Info* %49 to %Type_Info.String*
	%51 = getelementptr inbounds %Type_Info, %Type_Info* %49, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %51
	%52 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%53 = bitcast %Type_Info* %52 to %Type_Info.Pointer*
	%54 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%55 = bitcast %Type_Info* %54 to %Type_Info*
	%56 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %53, i64 0, i32 0
	store %Type_Info* %55, %Type_Info** %56
	%57 = getelementptr inbounds %Type_Info, %Type_Info* %52, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %57
	%58 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	; Type_Info_Basic
	%59 = bitcast %Type_Info* %58 to %Type_Info.Integer*
	%60 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %59, i64 0, i32 0
	store i64 1, i64* %60
	%61 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %59, i64 0, i32 1
	store i1 false, i1* %61
	%62 = getelementptr inbounds %Type_Info, %Type_Info* %58, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %62
	%63 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	; Type_Info_Basic
	%64 = bitcast %Type_Info* %63 to %Type_Info.Integer*
	%65 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %64, i64 0, i32 0
	store i64 8, i64* %65
	%66 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %64, i64 0, i32 1
	store i1 true, i1* %66
	%67 = getelementptr inbounds %Type_Info, %Type_Info* %63, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %67
	%68 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%69 = bitcast %Type_Info* %68 to %Type_Info.Pointer*
	%70 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%71 = bitcast %Type_Info* %70 to %Type_Info*
	%72 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %69, i64 0, i32 0
	store %Type_Info* %71, %Type_Info** %72
	%73 = getelementptr inbounds %Type_Info, %Type_Info* %68, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %73
	%74 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	; Type_Info_Named
	%75 = bitcast %Type_Info* %74 to %Type_Info.Named*
	%76 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%77 = bitcast %Type_Info* %76 to %Type_Info*
	%78 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %75, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$212, i64 0, i32 0), i64 9}, %..string* %78
	%79 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %75, i64 0, i32 1
	store %Type_Info* %77, %Type_Info** %79
	%80 = getelementptr inbounds %Type_Info, %Type_Info* %74, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %80
	%81 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	; Type_Info_Union
	%82 = bitcast %Type_Info* %81 to %Type_Info.Union*
	%83 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 3
	store i64 144, i64* %83
	%84 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 4
	store i64 8, i64* %84
	%85 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 0
	%86 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 2
	%87 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 2
	%88 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 2
	%89 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %85, i64 0, i32 0
	%90 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %89, i64 0, i32 0
	store %Type_Info** %86, %Type_Info*** %90
	%91 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %89, i64 0, i32 1
	store i64 0, i64* %91
	%92 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %89, i64 0, i32 2
	store i64 0, i64* %92
	%93 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %85, i64 0, i32 1
	%94 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %93, i64 0, i32 0
	store %..string* %87, %..string** %94
	%95 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %93, i64 0, i32 1
	store i64 0, i64* %95
	%96 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %93, i64 0, i32 2
	store i64 0, i64* %96
	%97 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %85, i64 0, i32 2
	%98 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %97, i64 0, i32 0
	store i64* %88, i64** %98
	%99 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %97, i64 0, i32 1
	store i64 0, i64* %99
	%100 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %97, i64 0, i32 2
	store i64 0, i64* %100
	%101 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 1
	%102 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 2
	%103 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 2
	%104 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 2
	%105 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%106 = bitcast %Type_Info* %105 to %Type_Info*
	%107 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 0
	%108 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	store %Type_Info* %108, %Type_Info** %107
	%109 = getelementptr inbounds %..string, %..string* %103, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$213, i64 0, i32 0), i64 5}, %..string* %109
	%110 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%111 = bitcast %Type_Info* %110 to %Type_Info*
	%112 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 1
	%113 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	store %Type_Info* %113, %Type_Info** %112
	%114 = getelementptr inbounds %..string, %..string* %103, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$214, i64 0, i32 0), i64 7}, %..string* %114
	%115 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%116 = bitcast %Type_Info* %115 to %Type_Info*
	%117 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 2
	%118 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %118, %Type_Info** %117
	%119 = getelementptr inbounds %..string, %..string* %103, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$215, i64 0, i32 0), i64 5}, %..string* %119
	%120 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%121 = bitcast %Type_Info* %120 to %Type_Info*
	%122 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 3
	%123 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	store %Type_Info* %123, %Type_Info** %122
	%124 = getelementptr inbounds %..string, %..string* %103, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$216, i64 0, i32 0), i64 6}, %..string* %124
	%125 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%126 = bitcast %Type_Info* %125 to %Type_Info*
	%127 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 4
	%128 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	store %Type_Info* %128, %Type_Info** %127
	%129 = getelementptr inbounds %..string, %..string* %103, i64 4
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$217, i64 0, i32 0), i64 7}, %..string* %129
	%130 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%131 = bitcast %Type_Info* %130 to %Type_Info*
	%132 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 5
	%133 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	store %Type_Info* %133, %Type_Info** %132
	%134 = getelementptr inbounds %..string, %..string* %103, i64 5
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$218, i64 0, i32 0), i64 3}, %..string* %134
	%135 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%136 = bitcast %Type_Info* %135 to %Type_Info*
	%137 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 6
	%138 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	store %Type_Info* %138, %Type_Info** %137
	%139 = getelementptr inbounds %..string, %..string* %103, i64 6
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$219, i64 0, i32 0), i64 7}, %..string* %139
	%140 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%141 = bitcast %Type_Info* %140 to %Type_Info*
	%142 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 7
	%143 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	store %Type_Info* %143, %Type_Info** %142
	%144 = getelementptr inbounds %..string, %..string* %103, i64 7
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$21a, i64 0, i32 0), i64 9}, %..string* %144
	%145 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	%146 = bitcast %Type_Info* %145 to %Type_Info*
	%147 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 8
	%148 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	store %Type_Info* %148, %Type_Info** %147
	%149 = getelementptr inbounds %..string, %..string* %103, i64 8
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$21b, i64 0, i32 0), i64 5}, %..string* %149
	%150 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%151 = bitcast %Type_Info* %150 to %Type_Info*
	%152 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 9
	%153 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	store %Type_Info* %153, %Type_Info** %152
	%154 = getelementptr inbounds %..string, %..string* %103, i64 9
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$21c, i64 0, i32 0), i64 13}, %..string* %154
	%155 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%156 = bitcast %Type_Info* %155 to %Type_Info*
	%157 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 10
	%158 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	store %Type_Info* %158, %Type_Info** %157
	%159 = getelementptr inbounds %..string, %..string* %103, i64 10
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$21d, i64 0, i32 0), i64 5}, %..string* %159
	%160 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%161 = bitcast %Type_Info* %160 to %Type_Info*
	%162 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 11
	%163 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	store %Type_Info* %163, %Type_Info** %162
	%164 = getelementptr inbounds %..string, %..string* %103, i64 11
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$21e, i64 0, i32 0), i64 6}, %..string* %164
	%165 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%166 = bitcast %Type_Info* %165 to %Type_Info*
	%167 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 12
	%168 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	store %Type_Info* %168, %Type_Info** %167
	%169 = getelementptr inbounds %..string, %..string* %103, i64 12
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$21f, i64 0, i32 0), i64 5}, %..string* %169
	%170 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%171 = bitcast %Type_Info* %170 to %Type_Info*
	%172 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 13
	%173 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	store %Type_Info* %173, %Type_Info** %172
	%174 = getelementptr inbounds %..string, %..string* %103, i64 13
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$220, i64 0, i32 0), i64 6}, %..string* %174
	%175 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	%176 = bitcast %Type_Info* %175 to %Type_Info*
	%177 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 14
	%178 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	store %Type_Info* %178, %Type_Info** %177
	%179 = getelementptr inbounds %..string, %..string* %103, i64 14
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$221, i64 0, i32 0), i64 9}, %..string* %179
	%180 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%181 = bitcast %Type_Info* %180 to %Type_Info*
	%182 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 15
	%183 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	store %Type_Info* %183, %Type_Info** %182
	%184 = getelementptr inbounds %..string, %..string* %103, i64 15
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$222, i64 0, i32 0), i64 5}, %..string* %184
	%185 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	%186 = bitcast %Type_Info* %185 to %Type_Info*
	%187 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 16
	%188 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	store %Type_Info* %188, %Type_Info** %187
	%189 = getelementptr inbounds %..string, %..string* %103, i64 16
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$223, i64 0, i32 0), i64 4}, %..string* %189
	%190 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	%191 = bitcast %Type_Info* %190 to %Type_Info*
	%192 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 17
	%193 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	store %Type_Info* %193, %Type_Info** %192
	%194 = getelementptr inbounds %..string, %..string* %103, i64 17
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$224, i64 0, i32 0), i64 3}, %..string* %194
	%195 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %101, i64 0, i32 0
	store %..string* %103, %..string** %195
	%196 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %101, i64 0, i32 1
	store i64 18, i64* %196
	%197 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %101, i64 0, i32 2
	store i64 18, i64* %197
	%198 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %102, i64 0, i32 0
	store %Type_Info** %104, %Type_Info*** %198
	%199 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %102, i64 0, i32 1
	store i64 18, i64* %199
	%200 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %102, i64 0, i32 2
	store i64 18, i64* %200
	%201 = getelementptr inbounds %Type_Info, %Type_Info* %81, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %201
	%202 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	; Type_Info_Named
	%203 = bitcast %Type_Info* %202 to %Type_Info.Named*
	%204 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%205 = bitcast %Type_Info* %204 to %Type_Info*
	%206 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %203, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$225, i64 0, i32 0), i64 7}, %..string* %206
	%207 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %203, i64 0, i32 1
	store %Type_Info* %205, %Type_Info** %207
	%208 = getelementptr inbounds %Type_Info, %Type_Info* %202, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %208
	%209 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	; Type_Info_Struct
	%210 = bitcast %Type_Info* %209 to %Type_Info.Struct*
	%211 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %210, i64 0, i32 0
	%212 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 3
	store i64 16, i64* %212
	%213 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 4
	store i64 8, i64* %213
	%214 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 5
	store i1 false, i1* %214
	%215 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 6
	store i1 true, i1* %215
	%216 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 7
	store i1 false, i1* %216
	%217 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 20
	%218 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 20
	%219 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 2
	%220 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%221 = bitcast %Type_Info* %220 to %Type_Info*
	%222 = getelementptr inbounds %Type_Info*, %Type_Info** %217, i64 0
	%223 = getelementptr inbounds i64, i64* %219, i64 0
	%224 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %224, %Type_Info** %222
	%225 = getelementptr inbounds %..string, %..string* %218, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$226, i64 0, i32 0), i64 4}, %..string* %225
	store i64 0, i64* %223
	%226 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%227 = bitcast %Type_Info* %226 to %Type_Info*
	%228 = getelementptr inbounds %Type_Info*, %Type_Info** %217, i64 1
	%229 = getelementptr inbounds i64, i64* %219, i64 1
	%230 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %230, %Type_Info** %228
	%231 = getelementptr inbounds %..string, %..string* %218, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$227, i64 0, i32 0), i64 6}, %..string* %231
	store i64 8, i64* %229
	%232 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 0
	%233 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %232, i64 0, i32 0
	store %Type_Info** %217, %Type_Info*** %233
	%234 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %232, i64 0, i32 1
	store i64 2, i64* %234
	%235 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %232, i64 0, i32 2
	store i64 2, i64* %235
	%236 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 1
	%237 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %236, i64 0, i32 0
	store %..string* %218, %..string** %237
	%238 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %236, i64 0, i32 1
	store i64 2, i64* %238
	%239 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %236, i64 0, i32 2
	store i64 2, i64* %239
	%240 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %211, i64 0, i32 2
	%241 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %240, i64 0, i32 0
	store i64* %219, i64** %241
	%242 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %240, i64 0, i32 1
	store i64 2, i64* %242
	%243 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %240, i64 0, i32 2
	store i64 2, i64* %243
	%244 = getelementptr inbounds %Type_Info, %Type_Info* %209, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %244
	%245 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	; Type_Info_Basic
	%246 = bitcast %Type_Info* %245 to %Type_Info.Boolean*
	%247 = getelementptr inbounds %Type_Info, %Type_Info* %245, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %247
	%248 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	; Type_Info_Named
	%249 = bitcast %Type_Info* %248 to %Type_Info.Named*
	%250 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%251 = bitcast %Type_Info* %250 to %Type_Info*
	%252 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %249, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$228, i64 0, i32 0), i64 5}, %..string* %252
	%253 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %249, i64 0, i32 1
	store %Type_Info* %251, %Type_Info** %253
	%254 = getelementptr inbounds %Type_Info, %Type_Info* %248, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %254
	%255 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	; Type_Info_Struct
	%256 = bitcast %Type_Info* %255 to %Type_Info.Struct*
	%257 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %256, i64 0, i32 0
	%258 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 3
	store i64 8, i64* %258
	%259 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 4
	store i64 8, i64* %259
	%260 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 5
	store i1 false, i1* %260
	%261 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 6
	store i1 true, i1* %261
	%262 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 7
	store i1 false, i1* %262
	%263 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 22
	%264 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 22
	%265 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 4
	%266 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%267 = bitcast %Type_Info* %266 to %Type_Info*
	%268 = getelementptr inbounds %Type_Info*, %Type_Info** %263, i64 0
	%269 = getelementptr inbounds i64, i64* %265, i64 0
	%270 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %270, %Type_Info** %268
	%271 = getelementptr inbounds %..string, %..string* %264, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$229, i64 0, i32 0), i64 4}, %..string* %271
	store i64 0, i64* %269
	%272 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 0
	%273 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %272, i64 0, i32 0
	store %Type_Info** %263, %Type_Info*** %273
	%274 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %272, i64 0, i32 1
	store i64 1, i64* %274
	%275 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %272, i64 0, i32 2
	store i64 1, i64* %275
	%276 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 1
	%277 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %276, i64 0, i32 0
	store %..string* %264, %..string** %277
	%278 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %276, i64 0, i32 1
	store i64 1, i64* %278
	%279 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %276, i64 0, i32 2
	store i64 1, i64* %279
	%280 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %257, i64 0, i32 2
	%281 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %280, i64 0, i32 0
	store i64* %265, i64** %281
	%282 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %280, i64 0, i32 1
	store i64 1, i64* %282
	%283 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %280, i64 0, i32 2
	store i64 1, i64* %283
	%284 = getelementptr inbounds %Type_Info, %Type_Info* %255, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %284
	%285 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	; Type_Info_Named
	%286 = bitcast %Type_Info* %285 to %Type_Info.Named*
	%287 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%288 = bitcast %Type_Info* %287 to %Type_Info*
	%289 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %286, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$22a, i64 0, i32 0), i64 6}, %..string* %289
	%290 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %286, i64 0, i32 1
	store %Type_Info* %288, %Type_Info** %290
	%291 = getelementptr inbounds %Type_Info, %Type_Info* %285, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %291
	%292 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	; Type_Info_Struct
	%293 = bitcast %Type_Info* %292 to %Type_Info.Struct*
	%294 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %293, i64 0, i32 0
	%295 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 3
	store i64 0, i64* %295
	%296 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 4
	store i64 1, i64* %296
	%297 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 5
	store i1 false, i1* %297
	%298 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 6
	store i1 true, i1* %298
	%299 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 7
	store i1 false, i1* %299
	%300 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 23
	%301 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 23
	%302 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 5
	%303 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 0
	%304 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %303, i64 0, i32 0
	store %Type_Info** %300, %Type_Info*** %304
	%305 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %303, i64 0, i32 1
	store i64 0, i64* %305
	%306 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %303, i64 0, i32 2
	store i64 0, i64* %306
	%307 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 1
	%308 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %307, i64 0, i32 0
	store %..string* %301, %..string** %308
	%309 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %307, i64 0, i32 1
	store i64 0, i64* %309
	%310 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %307, i64 0, i32 2
	store i64 0, i64* %310
	%311 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %294, i64 0, i32 2
	%312 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %311, i64 0, i32 0
	store i64* %302, i64** %312
	%313 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %311, i64 0, i32 1
	store i64 0, i64* %313
	%314 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %311, i64 0, i32 2
	store i64 0, i64* %314
	%315 = getelementptr inbounds %Type_Info, %Type_Info* %292, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %315
	%316 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	; Type_Info_Named
	%317 = bitcast %Type_Info* %316 to %Type_Info.Named*
	%318 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%319 = bitcast %Type_Info* %318 to %Type_Info*
	%320 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %317, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$22b, i64 0, i32 0), i64 7}, %..string* %320
	%321 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %317, i64 0, i32 1
	store %Type_Info* %319, %Type_Info** %321
	%322 = getelementptr inbounds %Type_Info, %Type_Info* %316, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %322
	%323 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	; Type_Info_Struct
	%324 = bitcast %Type_Info* %323 to %Type_Info.Struct*
	%325 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %324, i64 0, i32 0
	%326 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 3
	store i64 0, i64* %326
	%327 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 4
	store i64 1, i64* %327
	%328 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 5
	store i1 false, i1* %328
	%329 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 6
	store i1 true, i1* %329
	%330 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 7
	store i1 false, i1* %330
	%331 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 23
	%332 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 23
	%333 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 5
	%334 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 0
	%335 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %334, i64 0, i32 0
	store %Type_Info** %331, %Type_Info*** %335
	%336 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %334, i64 0, i32 1
	store i64 0, i64* %336
	%337 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %334, i64 0, i32 2
	store i64 0, i64* %337
	%338 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 1
	%339 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %338, i64 0, i32 0
	store %..string* %332, %..string** %339
	%340 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %338, i64 0, i32 1
	store i64 0, i64* %340
	%341 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %338, i64 0, i32 2
	store i64 0, i64* %341
	%342 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 2
	%343 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %342, i64 0, i32 0
	store i64* %333, i64** %343
	%344 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %342, i64 0, i32 1
	store i64 0, i64* %344
	%345 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %342, i64 0, i32 2
	store i64 0, i64* %345
	%346 = getelementptr inbounds %Type_Info, %Type_Info* %323, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %346
	%347 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	; Type_Info_Named
	%348 = bitcast %Type_Info* %347 to %Type_Info.Named*
	%349 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%350 = bitcast %Type_Info* %349 to %Type_Info*
	%351 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %348, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$22c, i64 0, i32 0), i64 3}, %..string* %351
	%352 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %348, i64 0, i32 1
	store %Type_Info* %350, %Type_Info** %352
	%353 = getelementptr inbounds %Type_Info, %Type_Info* %347, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %353
	%354 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	; Type_Info_Struct
	%355 = bitcast %Type_Info* %354 to %Type_Info.Struct*
	%356 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %355, i64 0, i32 0
	%357 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 3
	store i64 0, i64* %357
	%358 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 4
	store i64 1, i64* %358
	%359 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 5
	store i1 false, i1* %359
	%360 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 6
	store i1 true, i1* %360
	%361 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 7
	store i1 false, i1* %361
	%362 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 23
	%363 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 23
	%364 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 5
	%365 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 0
	%366 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %365, i64 0, i32 0
	store %Type_Info** %362, %Type_Info*** %366
	%367 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %365, i64 0, i32 1
	store i64 0, i64* %367
	%368 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %365, i64 0, i32 2
	store i64 0, i64* %368
	%369 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 1
	%370 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %369, i64 0, i32 0
	store %..string* %363, %..string** %370
	%371 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %369, i64 0, i32 1
	store i64 0, i64* %371
	%372 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %369, i64 0, i32 2
	store i64 0, i64* %372
	%373 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %356, i64 0, i32 2
	%374 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %373, i64 0, i32 0
	store i64* %364, i64** %374
	%375 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %373, i64 0, i32 1
	store i64 0, i64* %375
	%376 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %373, i64 0, i32 2
	store i64 0, i64* %376
	%377 = getelementptr inbounds %Type_Info, %Type_Info* %354, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %377
	%378 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	; Type_Info_Named
	%379 = bitcast %Type_Info* %378 to %Type_Info.Named*
	%380 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%381 = bitcast %Type_Info* %380 to %Type_Info*
	%382 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %379, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$22d, i64 0, i32 0), i64 7}, %..string* %382
	%383 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %379, i64 0, i32 1
	store %Type_Info* %381, %Type_Info** %383
	%384 = getelementptr inbounds %Type_Info, %Type_Info* %378, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %384
	%385 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	; Type_Info_Struct
	%386 = bitcast %Type_Info* %385 to %Type_Info.Struct*
	%387 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %386, i64 0, i32 0
	%388 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 3
	store i64 8, i64* %388
	%389 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 4
	store i64 8, i64* %389
	%390 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 5
	store i1 false, i1* %390
	%391 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 6
	store i1 true, i1* %391
	%392 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 7
	store i1 false, i1* %392
	%393 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 23
	%394 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 23
	%395 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 5
	%396 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%397 = bitcast %Type_Info* %396 to %Type_Info*
	%398 = getelementptr inbounds %Type_Info*, %Type_Info** %393, i64 0
	%399 = getelementptr inbounds i64, i64* %395, i64 0
	%400 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %400, %Type_Info** %398
	%401 = getelementptr inbounds %..string, %..string* %394, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$22e, i64 0, i32 0), i64 4}, %..string* %401
	store i64 0, i64* %399
	%402 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 0
	%403 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %402, i64 0, i32 0
	store %Type_Info** %393, %Type_Info*** %403
	%404 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %402, i64 0, i32 1
	store i64 1, i64* %404
	%405 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %402, i64 0, i32 2
	store i64 1, i64* %405
	%406 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 1
	%407 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %406, i64 0, i32 0
	store %..string* %394, %..string** %407
	%408 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %406, i64 0, i32 1
	store i64 1, i64* %408
	%409 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %406, i64 0, i32 2
	store i64 1, i64* %409
	%410 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 2
	%411 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %410, i64 0, i32 0
	store i64* %395, i64** %411
	%412 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %410, i64 0, i32 1
	store i64 1, i64* %412
	%413 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %410, i64 0, i32 2
	store i64 1, i64* %413
	%414 = getelementptr inbounds %Type_Info, %Type_Info* %385, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %414
	%415 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%416 = bitcast %Type_Info* %415 to %Type_Info.Pointer*
	%417 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%418 = bitcast %Type_Info* %417 to %Type_Info*
	%419 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %416, i64 0, i32 0
	store %Type_Info* %418, %Type_Info** %419
	%420 = getelementptr inbounds %Type_Info, %Type_Info* %415, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %420
	%421 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	; Type_Info_Named
	%422 = bitcast %Type_Info* %421 to %Type_Info.Named*
	%423 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 21
	%424 = bitcast %Type_Info* %423 to %Type_Info*
	%425 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %422, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$22f, i64 0, i32 0), i64 9}, %..string* %425
	%426 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %422, i64 0, i32 1
	store %Type_Info* %424, %Type_Info** %426
	%427 = getelementptr inbounds %Type_Info, %Type_Info* %421, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %427
	%428 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 21
	; Type_Info_Struct
	%429 = bitcast %Type_Info* %428 to %Type_Info.Struct*
	%430 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %429, i64 0, i32 0
	%431 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 3
	store i64 32, i64* %431
	%432 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 4
	store i64 8, i64* %432
	%433 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 5
	store i1 false, i1* %433
	%434 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 6
	store i1 true, i1* %434
	%435 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 7
	store i1 false, i1* %435
	%436 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 24
	%437 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 24
	%438 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 6
	%439 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%440 = bitcast %Type_Info* %439 to %Type_Info*
	%441 = getelementptr inbounds %Type_Info*, %Type_Info** %436, i64 0
	%442 = getelementptr inbounds i64, i64* %438, i64 0
	%443 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %443, %Type_Info** %441
	%444 = getelementptr inbounds %..string, %..string* %437, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$230, i64 0, i32 0), i64 6}, %..string* %444
	store i64 0, i64* %442
	%445 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%446 = bitcast %Type_Info* %445 to %Type_Info*
	%447 = getelementptr inbounds %Type_Info*, %Type_Info** %436, i64 1
	%448 = getelementptr inbounds i64, i64* %438, i64 1
	%449 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %449, %Type_Info** %447
	%450 = getelementptr inbounds %..string, %..string* %437, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$231, i64 0, i32 0), i64 7}, %..string* %450
	store i64 8, i64* %448
	%451 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%452 = bitcast %Type_Info* %451 to %Type_Info*
	%453 = getelementptr inbounds %Type_Info*, %Type_Info** %436, i64 2
	%454 = getelementptr inbounds i64, i64* %438, i64 2
	%455 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %455, %Type_Info** %453
	%456 = getelementptr inbounds %..string, %..string* %437, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$232, i64 0, i32 0), i64 8}, %..string* %456
	store i64 16, i64* %454
	%457 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%458 = bitcast %Type_Info* %457 to %Type_Info*
	%459 = getelementptr inbounds %Type_Info*, %Type_Info** %436, i64 3
	%460 = getelementptr inbounds i64, i64* %438, i64 3
	%461 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	store %Type_Info* %461, %Type_Info** %459
	%462 = getelementptr inbounds %..string, %..string* %437, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$233, i64 0, i32 0), i64 10}, %..string* %462
	store i64 24, i64* %460
	%463 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 0
	%464 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %463, i64 0, i32 0
	store %Type_Info** %436, %Type_Info*** %464
	%465 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %463, i64 0, i32 1
	store i64 4, i64* %465
	%466 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %463, i64 0, i32 2
	store i64 4, i64* %466
	%467 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 1
	%468 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %467, i64 0, i32 0
	store %..string* %437, %..string** %468
	%469 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %467, i64 0, i32 1
	store i64 4, i64* %469
	%470 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %467, i64 0, i32 2
	store i64 4, i64* %470
	%471 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %430, i64 0, i32 2
	%472 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %471, i64 0, i32 0
	store i64* %438, i64** %472
	%473 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %471, i64 0, i32 1
	store i64 4, i64* %473
	%474 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %471, i64 0, i32 2
	store i64 4, i64* %474
	%475 = getelementptr inbounds %Type_Info, %Type_Info* %428, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %475
	%476 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%477 = bitcast %Type_Info* %476 to %Type_Info.Pointer*
	%478 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%479 = bitcast %Type_Info* %478 to %Type_Info*
	%480 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %477, i64 0, i32 0
	store %Type_Info* %479, %Type_Info** %480
	%481 = getelementptr inbounds %Type_Info, %Type_Info* %476, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %481
	%482 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%483 = bitcast %Type_Info* %482 to %Type_Info.Pointer*
	%484 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%485 = bitcast %Type_Info* %484 to %Type_Info*
	%486 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %483, i64 0, i32 0
	store %Type_Info* %485, %Type_Info** %486
	%487 = getelementptr inbounds %Type_Info, %Type_Info* %482, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %487
	%488 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	; Type_Info_Named
	%489 = bitcast %Type_Info* %488 to %Type_Info.Named*
	%490 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 23
	%491 = bitcast %Type_Info* %490 to %Type_Info*
	%492 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %489, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$234, i64 0, i32 0), i64 18}, %..string* %492
	%493 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %489, i64 0, i32 1
	store %Type_Info* %491, %Type_Info** %493
	%494 = getelementptr inbounds %Type_Info, %Type_Info* %488, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %494
	%495 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 23
	; Type_Info_Enum
	%496 = bitcast %Type_Info* %495 to %Type_Info.Enum*
	%497 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%498 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %496, i64 0, i32 0
	store %Type_Info* %497, %Type_Info** %498
	%499 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-17, i64 0, i32 0
	%500 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-17, i64 0, i32 0
	%501 = bitcast {[0 x <8 x i8>], [8 x i8]}* %500 to i64*
	store i64 0, i64* %501
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$235, i64 0, i32 0), i64 4}, %..string* %499
	%502 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-17, i64 0, i32 1
	%503 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-17, i64 0, i32 1
	%504 = bitcast {[0 x <8 x i8>], [8 x i8]}* %503 to i64*
	store i64 1, i64* %504
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$236, i64 0, i32 0), i64 1}, %..string* %502
	%505 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-17, i64 0, i32 2
	%506 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-17, i64 0, i32 2
	%507 = bitcast {[0 x <8 x i8>], [8 x i8]}* %506 to i64*
	store i64 2, i64* %507
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$237, i64 0, i32 0), i64 3}, %..string* %505
	%508 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-17, i64 0, i32 3
	%509 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-17, i64 0, i32 3
	%510 = bitcast {[0 x <8 x i8>], [8 x i8]}* %509 to i64*
	store i64 3, i64* %510
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$238, i64 0, i32 0), i64 4}, %..string* %508
	%511 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %496, i64 0, i32 1
	%512 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-17, i64 0, i32 0
	%513 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %511, i64 0, i32 0
	store %..string* %512, %..string** %513
	%514 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %511, i64 0, i32 1
	store i64 4, i64* %514
	%515 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %496, i64 0, i32 2
	%516 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-17, i64 0, i32 0
	%517 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %515, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %516, {[0 x <8 x i8>], [8 x i8]}** %517
	%518 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %515, i64 0, i32 1
	store i64 4, i64* %518
	%519 = getelementptr inbounds %Type_Info, %Type_Info* %495, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %519
	%520 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	; Type_Info_Named
	%521 = bitcast %Type_Info* %520 to %Type_Info.Named*
	%522 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 25
	%523 = bitcast %Type_Info* %522 to %Type_Info*
	%524 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %521, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$239, i64 0, i32 0), i64 5}, %..string* %524
	%525 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %521, i64 0, i32 1
	store %Type_Info* %523, %Type_Info** %525
	%526 = getelementptr inbounds %Type_Info, %Type_Info* %520, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %526
	%527 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 25
	; Type_Info_Struct
	%528 = bitcast %Type_Info* %527 to %Type_Info.Struct*
	%529 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %528, i64 0, i32 0
	%530 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 3
	store i64 24, i64* %530
	%531 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 4
	store i64 8, i64* %531
	%532 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 5
	store i1 false, i1* %532
	%533 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 6
	store i1 true, i1* %533
	%534 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 7
	store i1 false, i1* %534
	%535 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 28
	%536 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 28
	%537 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 10
	%538 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%539 = bitcast %Type_Info* %538 to %Type_Info*
	%540 = getelementptr inbounds %Type_Info*, %Type_Info** %535, i64 0
	%541 = getelementptr inbounds i64, i64* %537, i64 0
	%542 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %542, %Type_Info** %540
	%543 = getelementptr inbounds %..string, %..string* %536, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$23a, i64 0, i32 0), i64 4}, %..string* %543
	store i64 0, i64* %541
	%544 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%545 = bitcast %Type_Info* %544 to %Type_Info*
	%546 = getelementptr inbounds %Type_Info*, %Type_Info** %535, i64 1
	%547 = getelementptr inbounds i64, i64* %537, i64 1
	%548 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %548, %Type_Info** %546
	%549 = getelementptr inbounds %..string, %..string* %536, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$23b, i64 0, i32 0), i64 9}, %..string* %549
	store i64 8, i64* %547
	%550 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%551 = bitcast %Type_Info* %550 to %Type_Info*
	%552 = getelementptr inbounds %Type_Info*, %Type_Info** %535, i64 2
	%553 = getelementptr inbounds i64, i64* %537, i64 2
	%554 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %554, %Type_Info** %552
	%555 = getelementptr inbounds %..string, %..string* %536, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$23c, i64 0, i32 0), i64 5}, %..string* %555
	store i64 16, i64* %553
	%556 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 0
	%557 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %556, i64 0, i32 0
	store %Type_Info** %535, %Type_Info*** %557
	%558 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %556, i64 0, i32 1
	store i64 3, i64* %558
	%559 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %556, i64 0, i32 2
	store i64 3, i64* %559
	%560 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 1
	%561 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %560, i64 0, i32 0
	store %..string* %536, %..string** %561
	%562 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %560, i64 0, i32 1
	store i64 3, i64* %562
	%563 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %560, i64 0, i32 2
	store i64 3, i64* %563
	%564 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %529, i64 0, i32 2
	%565 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %564, i64 0, i32 0
	store i64* %537, i64** %565
	%566 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %564, i64 0, i32 1
	store i64 3, i64* %566
	%567 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %564, i64 0, i32 2
	store i64 3, i64* %567
	%568 = getelementptr inbounds %Type_Info, %Type_Info* %527, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %568
	%569 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%570 = bitcast %Type_Info* %569 to %Type_Info.Pointer*
	%571 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%572 = bitcast %Type_Info* %571 to %Type_Info*
	%573 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %570, i64 0, i32 0
	store %Type_Info* %572, %Type_Info** %573
	%574 = getelementptr inbounds %Type_Info, %Type_Info* %569, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %574
	%575 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	; Type_Info_Named
	%576 = bitcast %Type_Info* %575 to %Type_Info.Named*
	%577 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%578 = bitcast %Type_Info* %577 to %Type_Info*
	%579 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %576, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$23d, i64 0, i32 0), i64 13}, %..string* %579
	%580 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %576, i64 0, i32 1
	store %Type_Info* %578, %Type_Info** %580
	%581 = getelementptr inbounds %Type_Info, %Type_Info* %575, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %581
	%582 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	; Type_Info_Struct
	%583 = bitcast %Type_Info* %582 to %Type_Info.Struct*
	%584 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %583, i64 0, i32 0
	%585 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 3
	store i64 16, i64* %585
	%586 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 4
	store i64 8, i64* %586
	%587 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 5
	store i1 false, i1* %587
	%588 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 6
	store i1 true, i1* %588
	%589 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 7
	store i1 false, i1* %589
	%590 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 31
	%591 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 31
	%592 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 13
	%593 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%594 = bitcast %Type_Info* %593 to %Type_Info*
	%595 = getelementptr inbounds %Type_Info*, %Type_Info** %590, i64 0
	%596 = getelementptr inbounds i64, i64* %592, i64 0
	%597 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %597, %Type_Info** %595
	%598 = getelementptr inbounds %..string, %..string* %591, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$23e, i64 0, i32 0), i64 4}, %..string* %598
	store i64 0, i64* %596
	%599 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%600 = bitcast %Type_Info* %599 to %Type_Info*
	%601 = getelementptr inbounds %Type_Info*, %Type_Info** %590, i64 1
	%602 = getelementptr inbounds i64, i64* %592, i64 1
	%603 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %603, %Type_Info** %601
	%604 = getelementptr inbounds %..string, %..string* %591, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$23f, i64 0, i32 0), i64 9}, %..string* %604
	store i64 8, i64* %602
	%605 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 0
	%606 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %605, i64 0, i32 0
	store %Type_Info** %590, %Type_Info*** %606
	%607 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %605, i64 0, i32 1
	store i64 2, i64* %607
	%608 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %605, i64 0, i32 2
	store i64 2, i64* %608
	%609 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 1
	%610 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %609, i64 0, i32 0
	store %..string* %591, %..string** %610
	%611 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %609, i64 0, i32 1
	store i64 2, i64* %611
	%612 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %609, i64 0, i32 2
	store i64 2, i64* %612
	%613 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %584, i64 0, i32 2
	%614 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %613, i64 0, i32 0
	store i64* %592, i64** %614
	%615 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %613, i64 0, i32 1
	store i64 2, i64* %615
	%616 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %613, i64 0, i32 2
	store i64 2, i64* %616
	%617 = getelementptr inbounds %Type_Info, %Type_Info* %582, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %617
	%618 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%619 = bitcast %Type_Info* %618 to %Type_Info.Pointer*
	%620 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%621 = bitcast %Type_Info* %620 to %Type_Info*
	%622 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %619, i64 0, i32 0
	store %Type_Info* %621, %Type_Info** %622
	%623 = getelementptr inbounds %Type_Info, %Type_Info* %618, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %623
	%624 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	; Type_Info_Named
	%625 = bitcast %Type_Info* %624 to %Type_Info.Named*
	%626 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%627 = bitcast %Type_Info* %626 to %Type_Info*
	%628 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %625, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$240, i64 0, i32 0), i64 5}, %..string* %628
	%629 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %625, i64 0, i32 1
	store %Type_Info* %627, %Type_Info** %629
	%630 = getelementptr inbounds %Type_Info, %Type_Info* %624, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %630
	%631 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	; Type_Info_Struct
	%632 = bitcast %Type_Info* %631 to %Type_Info.Struct*
	%633 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %632, i64 0, i32 0
	%634 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 3
	store i64 16, i64* %634
	%635 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 4
	store i64 8, i64* %635
	%636 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 5
	store i1 false, i1* %636
	%637 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 6
	store i1 true, i1* %637
	%638 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 7
	store i1 false, i1* %638
	%639 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 33
	%640 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 33
	%641 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 15
	%642 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%643 = bitcast %Type_Info* %642 to %Type_Info*
	%644 = getelementptr inbounds %Type_Info*, %Type_Info** %639, i64 0
	%645 = getelementptr inbounds i64, i64* %641, i64 0
	%646 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %646, %Type_Info** %644
	%647 = getelementptr inbounds %..string, %..string* %640, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$241, i64 0, i32 0), i64 4}, %..string* %647
	store i64 0, i64* %645
	%648 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%649 = bitcast %Type_Info* %648 to %Type_Info*
	%650 = getelementptr inbounds %Type_Info*, %Type_Info** %639, i64 1
	%651 = getelementptr inbounds i64, i64* %641, i64 1
	%652 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %652, %Type_Info** %650
	%653 = getelementptr inbounds %..string, %..string* %640, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$242, i64 0, i32 0), i64 9}, %..string* %653
	store i64 8, i64* %651
	%654 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 0
	%655 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %654, i64 0, i32 0
	store %Type_Info** %639, %Type_Info*** %655
	%656 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %654, i64 0, i32 1
	store i64 2, i64* %656
	%657 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %654, i64 0, i32 2
	store i64 2, i64* %657
	%658 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 1
	%659 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %658, i64 0, i32 0
	store %..string* %640, %..string** %659
	%660 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %658, i64 0, i32 1
	store i64 2, i64* %660
	%661 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %658, i64 0, i32 2
	store i64 2, i64* %661
	%662 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %633, i64 0, i32 2
	%663 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %662, i64 0, i32 0
	store i64* %641, i64** %663
	%664 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %662, i64 0, i32 1
	store i64 2, i64* %664
	%665 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %662, i64 0, i32 2
	store i64 2, i64* %665
	%666 = getelementptr inbounds %Type_Info, %Type_Info* %631, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %666
	%667 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%668 = bitcast %Type_Info* %667 to %Type_Info.Pointer*
	%669 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%670 = bitcast %Type_Info* %669 to %Type_Info*
	%671 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %668, i64 0, i32 0
	store %Type_Info* %670, %Type_Info** %671
	%672 = getelementptr inbounds %Type_Info, %Type_Info* %667, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %672
	%673 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	; Type_Info_Named
	%674 = bitcast %Type_Info* %673 to %Type_Info.Named*
	%675 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%676 = bitcast %Type_Info* %675 to %Type_Info*
	%677 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %674, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$243, i64 0, i32 0), i64 6}, %..string* %677
	%678 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %674, i64 0, i32 1
	store %Type_Info* %676, %Type_Info** %678
	%679 = getelementptr inbounds %Type_Info, %Type_Info* %673, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %679
	%680 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	; Type_Info_Struct
	%681 = bitcast %Type_Info* %680 to %Type_Info.Struct*
	%682 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %681, i64 0, i32 0
	%683 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 3
	store i64 32, i64* %683
	%684 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 4
	store i64 8, i64* %684
	%685 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 5
	store i1 false, i1* %685
	%686 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 6
	store i1 true, i1* %686
	%687 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 7
	store i1 false, i1* %687
	%688 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 35
	%689 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 35
	%690 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 17
	%691 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%692 = bitcast %Type_Info* %691 to %Type_Info*
	%693 = getelementptr inbounds %Type_Info*, %Type_Info** %688, i64 0
	%694 = getelementptr inbounds i64, i64* %690, i64 0
	%695 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %695, %Type_Info** %693
	%696 = getelementptr inbounds %..string, %..string* %689, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$244, i64 0, i32 0), i64 4}, %..string* %696
	store i64 0, i64* %694
	%697 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%698 = bitcast %Type_Info* %697 to %Type_Info*
	%699 = getelementptr inbounds %Type_Info*, %Type_Info** %688, i64 1
	%700 = getelementptr inbounds i64, i64* %690, i64 1
	%701 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %701, %Type_Info** %699
	%702 = getelementptr inbounds %..string, %..string* %689, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$245, i64 0, i32 0), i64 9}, %..string* %702
	store i64 8, i64* %700
	%703 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%704 = bitcast %Type_Info* %703 to %Type_Info*
	%705 = getelementptr inbounds %Type_Info*, %Type_Info** %688, i64 2
	%706 = getelementptr inbounds i64, i64* %690, i64 2
	%707 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %707, %Type_Info** %705
	%708 = getelementptr inbounds %..string, %..string* %689, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$246, i64 0, i32 0), i64 5}, %..string* %708
	store i64 16, i64* %706
	%709 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%710 = bitcast %Type_Info* %709 to %Type_Info*
	%711 = getelementptr inbounds %Type_Info*, %Type_Info** %688, i64 3
	%712 = getelementptr inbounds i64, i64* %690, i64 3
	%713 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %713, %Type_Info** %711
	%714 = getelementptr inbounds %..string, %..string* %689, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$247, i64 0, i32 0), i64 5}, %..string* %714
	store i64 24, i64* %712
	%715 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 0
	%716 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %715, i64 0, i32 0
	store %Type_Info** %688, %Type_Info*** %716
	%717 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %715, i64 0, i32 1
	store i64 4, i64* %717
	%718 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %715, i64 0, i32 2
	store i64 4, i64* %718
	%719 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 1
	%720 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %719, i64 0, i32 0
	store %..string* %689, %..string** %720
	%721 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %719, i64 0, i32 1
	store i64 4, i64* %721
	%722 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %719, i64 0, i32 2
	store i64 4, i64* %722
	%723 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %682, i64 0, i32 2
	%724 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %723, i64 0, i32 0
	store i64* %690, i64** %724
	%725 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %723, i64 0, i32 1
	store i64 4, i64* %725
	%726 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %723, i64 0, i32 2
	store i64 4, i64* %726
	%727 = getelementptr inbounds %Type_Info, %Type_Info* %680, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %727
	%728 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%729 = bitcast %Type_Info* %728 to %Type_Info.Pointer*
	%730 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%731 = bitcast %Type_Info* %730 to %Type_Info*
	%732 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %729, i64 0, i32 0
	store %Type_Info* %731, %Type_Info** %732
	%733 = getelementptr inbounds %Type_Info, %Type_Info* %728, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %733
	%734 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	; Type_Info_Named
	%735 = bitcast %Type_Info* %734 to %Type_Info.Named*
	%736 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%737 = bitcast %Type_Info* %736 to %Type_Info*
	%738 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %735, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$248, i64 0, i32 0), i64 5}, %..string* %738
	%739 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %735, i64 0, i32 1
	store %Type_Info* %737, %Type_Info** %739
	%740 = getelementptr inbounds %Type_Info, %Type_Info* %734, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %740
	%741 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	; Type_Info_Struct
	%742 = bitcast %Type_Info* %741 to %Type_Info.Struct*
	%743 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %742, i64 0, i32 0
	%744 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 3
	store i64 96, i64* %744
	%745 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 4
	store i64 8, i64* %745
	%746 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 5
	store i1 false, i1* %746
	%747 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 6
	store i1 true, i1* %747
	%748 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 7
	store i1 false, i1* %748
	%749 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 39
	%750 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 39
	%751 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 21
	%752 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%753 = bitcast %Type_Info* %752 to %Type_Info*
	%754 = getelementptr inbounds %Type_Info*, %Type_Info** %749, i64 0
	%755 = getelementptr inbounds i64, i64* %751, i64 0
	%756 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	store %Type_Info* %756, %Type_Info** %754
	%757 = getelementptr inbounds %..string, %..string* %750, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$249, i64 0, i32 0), i64 6}, %..string* %757
	store i64 0, i64* %755
	%758 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 0
	%759 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %758, i64 0, i32 0
	store %Type_Info** %749, %Type_Info*** %759
	%760 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %758, i64 0, i32 1
	store i64 1, i64* %760
	%761 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %758, i64 0, i32 2
	store i64 1, i64* %761
	%762 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 1
	%763 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %762, i64 0, i32 0
	store %..string* %750, %..string** %763
	%764 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %762, i64 0, i32 1
	store i64 1, i64* %764
	%765 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %762, i64 0, i32 2
	store i64 1, i64* %765
	%766 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %743, i64 0, i32 2
	%767 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %766, i64 0, i32 0
	store i64* %751, i64** %767
	%768 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %766, i64 0, i32 1
	store i64 1, i64* %768
	%769 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %766, i64 0, i32 2
	store i64 1, i64* %769
	%770 = getelementptr inbounds %Type_Info, %Type_Info* %741, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %770
	%771 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	; Type_Info_Named
	%772 = bitcast %Type_Info* %771 to %Type_Info.Named*
	%773 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%774 = bitcast %Type_Info* %773 to %Type_Info*
	%775 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %772, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$24a, i64 0, i32 0), i64 16}, %..string* %775
	%776 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %772, i64 0, i32 1
	store %Type_Info* %774, %Type_Info** %776
	%777 = getelementptr inbounds %Type_Info, %Type_Info* %771, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %777
	%778 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	; Type_Info_Struct
	%779 = bitcast %Type_Info* %778 to %Type_Info.Struct*
	%780 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %779, i64 0, i32 0
	%781 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 3
	store i64 96, i64* %781
	%782 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 4
	store i64 8, i64* %782
	%783 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 5
	store i1 false, i1* %783
	%784 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 6
	store i1 true, i1* %784
	%785 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 7
	store i1 false, i1* %785
	%786 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 40
	%787 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 40
	%788 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 22
	%789 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%790 = bitcast %Type_Info* %789 to %Type_Info*
	%791 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 0
	%792 = getelementptr inbounds i64, i64* %788, i64 0
	%793 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	store %Type_Info* %793, %Type_Info** %791
	%794 = getelementptr inbounds %..string, %..string* %787, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$24b, i64 0, i32 0), i64 5}, %..string* %794
	store i64 0, i64* %792
	%795 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%796 = bitcast %Type_Info* %795 to %Type_Info*
	%797 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 1
	%798 = getelementptr inbounds i64, i64* %788, i64 1
	%799 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %799, %Type_Info** %797
	%800 = getelementptr inbounds %..string, %..string* %787, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$24c, i64 0, i32 0), i64 5}, %..string* %800
	store i64 24, i64* %798
	%801 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%802 = bitcast %Type_Info* %801 to %Type_Info*
	%803 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 2
	%804 = getelementptr inbounds i64, i64* %788, i64 2
	%805 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	store %Type_Info* %805, %Type_Info** %803
	%806 = getelementptr inbounds %..string, %..string* %787, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$24d, i64 0, i32 0), i64 7}, %..string* %806
	store i64 48, i64* %804
	%807 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%808 = bitcast %Type_Info* %807 to %Type_Info*
	%809 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 3
	%810 = getelementptr inbounds i64, i64* %788, i64 3
	%811 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %811, %Type_Info** %809
	%812 = getelementptr inbounds %..string, %..string* %787, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$24e, i64 0, i32 0), i64 4}, %..string* %812
	store i64 72, i64* %810
	%813 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%814 = bitcast %Type_Info* %813 to %Type_Info*
	%815 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 4
	%816 = getelementptr inbounds i64, i64* %788, i64 4
	%817 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %817, %Type_Info** %815
	%818 = getelementptr inbounds %..string, %..string* %787, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$24f, i64 0, i32 0), i64 5}, %..string* %818
	store i64 80, i64* %816
	%819 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%820 = bitcast %Type_Info* %819 to %Type_Info*
	%821 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 5
	%822 = getelementptr inbounds i64, i64* %788, i64 5
	%823 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %823, %Type_Info** %821
	%824 = getelementptr inbounds %..string, %..string* %787, i64 5
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$250, i64 0, i32 0), i64 6}, %..string* %824
	store i64 88, i64* %822
	%825 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%826 = bitcast %Type_Info* %825 to %Type_Info*
	%827 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 6
	%828 = getelementptr inbounds i64, i64* %788, i64 6
	%829 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %829, %Type_Info** %827
	%830 = getelementptr inbounds %..string, %..string* %787, i64 6
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$251, i64 0, i32 0), i64 7}, %..string* %830
	store i64 89, i64* %828
	%831 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%832 = bitcast %Type_Info* %831 to %Type_Info*
	%833 = getelementptr inbounds %Type_Info*, %Type_Info** %786, i64 7
	%834 = getelementptr inbounds i64, i64* %788, i64 7
	%835 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %835, %Type_Info** %833
	%836 = getelementptr inbounds %..string, %..string* %787, i64 7
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$252, i64 0, i32 0), i64 12}, %..string* %836
	store i64 90, i64* %834
	%837 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 0
	%838 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %837, i64 0, i32 0
	store %Type_Info** %786, %Type_Info*** %838
	%839 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %837, i64 0, i32 1
	store i64 8, i64* %839
	%840 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %837, i64 0, i32 2
	store i64 8, i64* %840
	%841 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 1
	%842 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %841, i64 0, i32 0
	store %..string* %787, %..string** %842
	%843 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %841, i64 0, i32 1
	store i64 8, i64* %843
	%844 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %841, i64 0, i32 2
	store i64 8, i64* %844
	%845 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %780, i64 0, i32 2
	%846 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %845, i64 0, i32 0
	store i64* %788, i64** %846
	%847 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %845, i64 0, i32 1
	store i64 8, i64* %847
	%848 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %845, i64 0, i32 2
	store i64 8, i64* %848
	%849 = getelementptr inbounds %Type_Info, %Type_Info* %778, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %849
	%850 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	; Type_Info_Slice
	%851 = bitcast %Type_Info* %850 to %Type_Info.Slice*
	%852 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%853 = bitcast %Type_Info* %852 to %Type_Info*
	%854 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %851, i64 0, i32 0
	store %Type_Info* %853, %Type_Info** %854
	%855 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %851, i64 0, i32 1
	store i64 8, i64* %855
	%856 = getelementptr inbounds %Type_Info, %Type_Info* %850, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %856
	%857 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%858 = bitcast %Type_Info* %857 to %Type_Info.Pointer*
	%859 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%860 = bitcast %Type_Info* %859 to %Type_Info*
	%861 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %858, i64 0, i32 0
	store %Type_Info* %860, %Type_Info** %861
	%862 = getelementptr inbounds %Type_Info, %Type_Info* %857, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %862
	%863 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	; Type_Info_Pointer
	%864 = bitcast %Type_Info* %863 to %Type_Info.Pointer*
	%865 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%866 = bitcast %Type_Info* %865 to %Type_Info*
	%867 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %864, i64 0, i32 0
	store %Type_Info* %866, %Type_Info** %867
	%868 = getelementptr inbounds %Type_Info, %Type_Info* %863, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %868
	%869 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%870 = bitcast %Type_Info* %869 to %Type_Info.Slice*
	%871 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%872 = bitcast %Type_Info* %871 to %Type_Info*
	%873 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %870, i64 0, i32 0
	store %Type_Info* %872, %Type_Info** %873
	%874 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %870, i64 0, i32 1
	store i64 16, i64* %874
	%875 = getelementptr inbounds %Type_Info, %Type_Info* %869, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %875
	%876 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%877 = bitcast %Type_Info* %876 to %Type_Info.Pointer*
	%878 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%879 = bitcast %Type_Info* %878 to %Type_Info*
	%880 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %877, i64 0, i32 0
	store %Type_Info* %879, %Type_Info** %880
	%881 = getelementptr inbounds %Type_Info, %Type_Info* %876, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %881
	%882 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	; Type_Info_Slice
	%883 = bitcast %Type_Info* %882 to %Type_Info.Slice*
	%884 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%885 = bitcast %Type_Info* %884 to %Type_Info*
	%886 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %883, i64 0, i32 0
	store %Type_Info* %885, %Type_Info** %886
	%887 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %883, i64 0, i32 1
	store i64 8, i64* %887
	%888 = getelementptr inbounds %Type_Info, %Type_Info* %882, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %888
	%889 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	; Type_Info_Pointer
	%890 = bitcast %Type_Info* %889 to %Type_Info.Pointer*
	%891 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%892 = bitcast %Type_Info* %891 to %Type_Info*
	%893 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %890, i64 0, i32 0
	store %Type_Info* %892, %Type_Info** %893
	%894 = getelementptr inbounds %Type_Info, %Type_Info* %889, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %894
	%895 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	; Type_Info_Named
	%896 = bitcast %Type_Info* %895 to %Type_Info.Named*
	%897 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%898 = bitcast %Type_Info* %897 to %Type_Info*
	%899 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %896, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$253, i64 0, i32 0), i64 6}, %..string* %899
	%900 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %896, i64 0, i32 1
	store %Type_Info* %898, %Type_Info** %900
	%901 = getelementptr inbounds %Type_Info, %Type_Info* %895, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %901
	%902 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	; Type_Info_Struct
	%903 = bitcast %Type_Info* %902 to %Type_Info.Struct*
	%904 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %903, i64 0, i32 0
	%905 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 3
	store i64 96, i64* %905
	%906 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 4
	store i64 8, i64* %906
	%907 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 5
	store i1 false, i1* %907
	%908 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 6
	store i1 true, i1* %908
	%909 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 7
	store i1 false, i1* %909
	%910 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 48
	%911 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 48
	%912 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 30
	%913 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%914 = bitcast %Type_Info* %913 to %Type_Info*
	%915 = getelementptr inbounds %Type_Info*, %Type_Info** %910, i64 0
	%916 = getelementptr inbounds i64, i64* %912, i64 0
	%917 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	store %Type_Info* %917, %Type_Info** %915
	%918 = getelementptr inbounds %..string, %..string* %911, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$254, i64 0, i32 0), i64 6}, %..string* %918
	store i64 0, i64* %916
	%919 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 0
	%920 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %919, i64 0, i32 0
	store %Type_Info** %910, %Type_Info*** %920
	%921 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %919, i64 0, i32 1
	store i64 1, i64* %921
	%922 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %919, i64 0, i32 2
	store i64 1, i64* %922
	%923 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 1
	%924 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %923, i64 0, i32 0
	store %..string* %911, %..string** %924
	%925 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %923, i64 0, i32 1
	store i64 1, i64* %925
	%926 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %923, i64 0, i32 2
	store i64 1, i64* %926
	%927 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %904, i64 0, i32 2
	%928 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %927, i64 0, i32 0
	store i64* %912, i64** %928
	%929 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %927, i64 0, i32 1
	store i64 1, i64* %929
	%930 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %927, i64 0, i32 2
	store i64 1, i64* %930
	%931 = getelementptr inbounds %Type_Info, %Type_Info* %902, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %931
	%932 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	; Type_Info_Named
	%933 = bitcast %Type_Info* %932 to %Type_Info.Named*
	%934 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%935 = bitcast %Type_Info* %934 to %Type_Info*
	%936 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %933, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$255, i64 0, i32 0), i64 9}, %..string* %936
	%937 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %933, i64 0, i32 1
	store %Type_Info* %935, %Type_Info** %937
	%938 = getelementptr inbounds %Type_Info, %Type_Info* %932, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %938
	%939 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	; Type_Info_Struct
	%940 = bitcast %Type_Info* %939 to %Type_Info.Struct*
	%941 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %940, i64 0, i32 0
	%942 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 3
	store i64 96, i64* %942
	%943 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 4
	store i64 8, i64* %943
	%944 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 5
	store i1 false, i1* %944
	%945 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 6
	store i1 true, i1* %945
	%946 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 7
	store i1 false, i1* %946
	%947 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 49
	%948 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 49
	%949 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 31
	%950 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%951 = bitcast %Type_Info* %950 to %Type_Info*
	%952 = getelementptr inbounds %Type_Info*, %Type_Info** %947, i64 0
	%953 = getelementptr inbounds i64, i64* %949, i64 0
	%954 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	store %Type_Info* %954, %Type_Info** %952
	%955 = getelementptr inbounds %..string, %..string* %948, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$256, i64 0, i32 0), i64 6}, %..string* %955
	store i64 0, i64* %953
	%956 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 0
	%957 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %956, i64 0, i32 0
	store %Type_Info** %947, %Type_Info*** %957
	%958 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %956, i64 0, i32 1
	store i64 1, i64* %958
	%959 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %956, i64 0, i32 2
	store i64 1, i64* %959
	%960 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 1
	%961 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %960, i64 0, i32 0
	store %..string* %948, %..string** %961
	%962 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %960, i64 0, i32 1
	store i64 1, i64* %962
	%963 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %960, i64 0, i32 2
	store i64 1, i64* %963
	%964 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %941, i64 0, i32 2
	%965 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %964, i64 0, i32 0
	store i64* %949, i64** %965
	%966 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %964, i64 0, i32 1
	store i64 1, i64* %966
	%967 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %964, i64 0, i32 2
	store i64 1, i64* %967
	%968 = getelementptr inbounds %Type_Info, %Type_Info* %939, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %968
	%969 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	; Type_Info_Named
	%970 = bitcast %Type_Info* %969 to %Type_Info.Named*
	%971 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%972 = bitcast %Type_Info* %971 to %Type_Info*
	%973 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %970, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$257, i64 0, i32 0), i64 5}, %..string* %973
	%974 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %970, i64 0, i32 1
	store %Type_Info* %972, %Type_Info** %974
	%975 = getelementptr inbounds %Type_Info, %Type_Info* %969, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %975
	%976 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	; Type_Info_Struct
	%977 = bitcast %Type_Info* %976 to %Type_Info.Struct*
	%978 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %977, i64 0, i32 0
	%979 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 3
	store i64 136, i64* %979
	%980 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 4
	store i64 8, i64* %980
	%981 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 5
	store i1 false, i1* %981
	%982 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 6
	store i1 true, i1* %982
	%983 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 7
	store i1 false, i1* %983
	%984 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 50
	%985 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 50
	%986 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 32
	%987 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	%988 = bitcast %Type_Info* %987 to %Type_Info*
	%989 = getelementptr inbounds %Type_Info*, %Type_Info** %984, i64 0
	%990 = getelementptr inbounds i64, i64* %986, i64 0
	%991 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	store %Type_Info* %991, %Type_Info** %989
	%992 = getelementptr inbounds %..string, %..string* %985, i64 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$258, i64 0, i32 0), i64 13}, %..string* %992
	store i64 0, i64* %990
	%993 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%994 = bitcast %Type_Info* %993 to %Type_Info*
	%995 = getelementptr inbounds %Type_Info*, %Type_Info** %984, i64 1
	%996 = getelementptr inbounds i64, i64* %986, i64 1
	%997 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %997, %Type_Info** %995
	%998 = getelementptr inbounds %..string, %..string* %985, i64 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$259, i64 0, i32 0), i64 13}, %..string* %998
	store i64 72, i64* %996
	%999 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%1000 = bitcast %Type_Info* %999 to %Type_Info*
	%1001 = getelementptr inbounds %Type_Info*, %Type_Info** %984, i64 2
	%1002 = getelementptr inbounds i64, i64* %986, i64 2
	%1003 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	store %Type_Info* %1003, %Type_Info** %1001
	%1004 = getelementptr inbounds %..string, %..string* %985, i64 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$25a, i64 0, i32 0), i64 13}, %..string* %1004
	store i64 96, i64* %1002
	%1005 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1006 = bitcast %Type_Info* %1005 to %Type_Info*
	%1007 = getelementptr inbounds %Type_Info*, %Type_Info** %984, i64 3
	%1008 = getelementptr inbounds i64, i64* %986, i64 3
	%1009 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %1009, %Type_Info** %1007
	%1010 = getelementptr inbounds %..string, %..string* %985, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$25b, i64 0, i32 0), i64 4}, %..string* %1010
	store i64 120, i64* %1008
	%1011 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1012 = bitcast %Type_Info* %1011 to %Type_Info*
	%1013 = getelementptr inbounds %Type_Info*, %Type_Info** %984, i64 4
	%1014 = getelementptr inbounds i64, i64* %986, i64 4
	%1015 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %1015, %Type_Info** %1013
	%1016 = getelementptr inbounds %..string, %..string* %985, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$25c, i64 0, i32 0), i64 5}, %..string* %1016
	store i64 128, i64* %1014
	%1017 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 0
	%1018 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1017, i64 0, i32 0
	store %Type_Info** %984, %Type_Info*** %1018
	%1019 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1017, i64 0, i32 1
	store i64 5, i64* %1019
	%1020 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1017, i64 0, i32 2
	store i64 5, i64* %1020
	%1021 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 1
	%1022 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1021, i64 0, i32 0
	store %..string* %985, %..string** %1022
	%1023 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1021, i64 0, i32 1
	store i64 5, i64* %1023
	%1024 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1021, i64 0, i32 2
	store i64 5, i64* %1024
	%1025 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %978, i64 0, i32 2
	%1026 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1025, i64 0, i32 0
	store i64* %986, i64** %1026
	%1027 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1025, i64 0, i32 1
	store i64 5, i64* %1027
	%1028 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1025, i64 0, i32 2
	store i64 5, i64* %1028
	%1029 = getelementptr inbounds %Type_Info, %Type_Info* %976, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1029
	%1030 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	; Type_Info_Struct
	%1031 = bitcast %Type_Info* %1030 to %Type_Info.Struct*
	%1032 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1031, i64 0, i32 0
	%1033 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 3
	store i64 72, i64* %1033
	%1034 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 4
	store i64 8, i64* %1034
	%1035 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 5
	store i1 false, i1* %1035
	%1036 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 6
	store i1 false, i1* %1036
	%1037 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 7
	store i1 false, i1* %1037
	%1038 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 55
	%1039 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 55
	%1040 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 37
	%1041 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%1042 = bitcast %Type_Info* %1041 to %Type_Info*
	%1043 = getelementptr inbounds %Type_Info*, %Type_Info** %1038, i64 0
	%1044 = getelementptr inbounds i64, i64* %1040, i64 0
	%1045 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	store %Type_Info* %1045, %Type_Info** %1043
	%1046 = getelementptr inbounds %..string, %..string* %1039, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$25d, i64 0, i32 0), i64 5}, %..string* %1046
	store i64 0, i64* %1044
	%1047 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1048 = bitcast %Type_Info* %1047 to %Type_Info*
	%1049 = getelementptr inbounds %Type_Info*, %Type_Info** %1038, i64 1
	%1050 = getelementptr inbounds i64, i64* %1040, i64 1
	%1051 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %1051, %Type_Info** %1049
	%1052 = getelementptr inbounds %..string, %..string* %1039, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$25e, i64 0, i32 0), i64 5}, %..string* %1052
	store i64 24, i64* %1050
	%1053 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1054 = bitcast %Type_Info* %1053 to %Type_Info*
	%1055 = getelementptr inbounds %Type_Info*, %Type_Info** %1038, i64 2
	%1056 = getelementptr inbounds i64, i64* %1040, i64 2
	%1057 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	store %Type_Info* %1057, %Type_Info** %1055
	%1058 = getelementptr inbounds %..string, %..string* %1039, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$25f, i64 0, i32 0), i64 7}, %..string* %1058
	store i64 48, i64* %1056
	%1059 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 0
	%1060 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1059, i64 0, i32 0
	store %Type_Info** %1038, %Type_Info*** %1060
	%1061 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1059, i64 0, i32 1
	store i64 3, i64* %1061
	%1062 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1059, i64 0, i32 2
	store i64 3, i64* %1062
	%1063 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 1
	%1064 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1063, i64 0, i32 0
	store %..string* %1039, %..string** %1064
	%1065 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1063, i64 0, i32 1
	store i64 3, i64* %1065
	%1066 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1063, i64 0, i32 2
	store i64 3, i64* %1066
	%1067 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1032, i64 0, i32 2
	%1068 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1067, i64 0, i32 0
	store i64* %1040, i64** %1068
	%1069 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1067, i64 0, i32 1
	store i64 3, i64* %1069
	%1070 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1067, i64 0, i32 2
	store i64 3, i64* %1070
	%1071 = getelementptr inbounds %Type_Info, %Type_Info* %1030, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1071
	%1072 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	; Type_Info_Slice
	%1073 = bitcast %Type_Info* %1072 to %Type_Info.Slice*
	%1074 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1075 = bitcast %Type_Info* %1074 to %Type_Info*
	%1076 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1073, i64 0, i32 0
	store %Type_Info* %1075, %Type_Info** %1076
	%1077 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1073, i64 0, i32 1
	store i64 8, i64* %1077
	%1078 = getelementptr inbounds %Type_Info, %Type_Info* %1072, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1078
	%1079 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1080 = bitcast %Type_Info* %1079 to %Type_Info.Pointer*
	%1081 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1082 = bitcast %Type_Info* %1081 to %Type_Info*
	%1083 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1080, i64 0, i32 0
	store %Type_Info* %1082, %Type_Info** %1083
	%1084 = getelementptr inbounds %Type_Info, %Type_Info* %1079, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1084
	%1085 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	; Type_Info_Pointer
	%1086 = bitcast %Type_Info* %1085 to %Type_Info.Pointer*
	%1087 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1088 = bitcast %Type_Info* %1087 to %Type_Info*
	%1089 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1086, i64 0, i32 0
	store %Type_Info* %1088, %Type_Info** %1089
	%1090 = getelementptr inbounds %Type_Info, %Type_Info* %1085, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1090
	%1091 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%1092 = bitcast %Type_Info* %1091 to %Type_Info.Slice*
	%1093 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1094 = bitcast %Type_Info* %1093 to %Type_Info*
	%1095 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1092, i64 0, i32 0
	store %Type_Info* %1094, %Type_Info** %1095
	%1096 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1092, i64 0, i32 1
	store i64 16, i64* %1096
	%1097 = getelementptr inbounds %Type_Info, %Type_Info* %1091, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1097
	%1098 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%1099 = bitcast %Type_Info* %1098 to %Type_Info.Pointer*
	%1100 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1101 = bitcast %Type_Info* %1100 to %Type_Info*
	%1102 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1099, i64 0, i32 0
	store %Type_Info* %1101, %Type_Info** %1102
	%1103 = getelementptr inbounds %Type_Info, %Type_Info* %1098, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1103
	%1104 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	; Type_Info_Slice
	%1105 = bitcast %Type_Info* %1104 to %Type_Info.Slice*
	%1106 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1107 = bitcast %Type_Info* %1106 to %Type_Info*
	%1108 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1105, i64 0, i32 0
	store %Type_Info* %1107, %Type_Info** %1108
	%1109 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1105, i64 0, i32 1
	store i64 8, i64* %1109
	%1110 = getelementptr inbounds %Type_Info, %Type_Info* %1104, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1110
	%1111 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	; Type_Info_Pointer
	%1112 = bitcast %Type_Info* %1111 to %Type_Info.Pointer*
	%1113 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1114 = bitcast %Type_Info* %1113 to %Type_Info*
	%1115 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1112, i64 0, i32 0
	store %Type_Info* %1114, %Type_Info** %1115
	%1116 = getelementptr inbounds %Type_Info, %Type_Info* %1111, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1116
	%1117 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%1118 = bitcast %Type_Info* %1117 to %Type_Info.Slice*
	%1119 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1120 = bitcast %Type_Info* %1119 to %Type_Info*
	%1121 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1118, i64 0, i32 0
	store %Type_Info* %1120, %Type_Info** %1121
	%1122 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1118, i64 0, i32 1
	store i64 16, i64* %1122
	%1123 = getelementptr inbounds %Type_Info, %Type_Info* %1117, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1123
	%1124 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%1125 = bitcast %Type_Info* %1124 to %Type_Info.Pointer*
	%1126 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1127 = bitcast %Type_Info* %1126 to %Type_Info*
	%1128 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1125, i64 0, i32 0
	store %Type_Info* %1127, %Type_Info** %1128
	%1129 = getelementptr inbounds %Type_Info, %Type_Info* %1124, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1129
	%1130 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	; Type_Info_Slice
	%1131 = bitcast %Type_Info* %1130 to %Type_Info.Slice*
	%1132 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1133 = bitcast %Type_Info* %1132 to %Type_Info*
	%1134 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1131, i64 0, i32 0
	store %Type_Info* %1133, %Type_Info** %1134
	%1135 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1131, i64 0, i32 1
	store i64 8, i64* %1135
	%1136 = getelementptr inbounds %Type_Info, %Type_Info* %1130, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1136
	%1137 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1138 = bitcast %Type_Info* %1137 to %Type_Info.Pointer*
	%1139 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1140 = bitcast %Type_Info* %1139 to %Type_Info*
	%1141 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1138, i64 0, i32 0
	store %Type_Info* %1140, %Type_Info** %1141
	%1142 = getelementptr inbounds %Type_Info, %Type_Info* %1137, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1142
	%1143 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	; Type_Info_Pointer
	%1144 = bitcast %Type_Info* %1143 to %Type_Info.Pointer*
	%1145 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1146 = bitcast %Type_Info* %1145 to %Type_Info*
	%1147 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1144, i64 0, i32 0
	store %Type_Info* %1146, %Type_Info** %1147
	%1148 = getelementptr inbounds %Type_Info, %Type_Info* %1143, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1148
	%1149 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	; Type_Info_Named
	%1150 = bitcast %Type_Info* %1149 to %Type_Info.Named*
	%1151 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%1152 = bitcast %Type_Info* %1151 to %Type_Info*
	%1153 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1150, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$260, i64 0, i32 0), i64 4}, %..string* %1153
	%1154 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1150, i64 0, i32 1
	store %Type_Info* %1152, %Type_Info** %1154
	%1155 = getelementptr inbounds %Type_Info, %Type_Info* %1149, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1155
	%1156 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	; Type_Info_Struct
	%1157 = bitcast %Type_Info* %1156 to %Type_Info.Struct*
	%1158 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1157, i64 0, i32 0
	%1159 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 3
	store i64 56, i64* %1159
	%1160 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 4
	store i64 8, i64* %1160
	%1161 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 5
	store i1 false, i1* %1161
	%1162 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 6
	store i1 true, i1* %1162
	%1163 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 7
	store i1 false, i1* %1163
	%1164 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 58
	%1165 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 58
	%1166 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 40
	%1167 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1168 = bitcast %Type_Info* %1167 to %Type_Info*
	%1169 = getelementptr inbounds %Type_Info*, %Type_Info** %1164, i64 0
	%1170 = getelementptr inbounds i64, i64* %1166, i64 0
	%1171 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1171, %Type_Info** %1169
	%1172 = getelementptr inbounds %..string, %..string* %1165, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$261, i64 0, i32 0), i64 4}, %..string* %1172
	store i64 0, i64* %1170
	%1173 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1174 = bitcast %Type_Info* %1173 to %Type_Info*
	%1175 = getelementptr inbounds %Type_Info*, %Type_Info** %1164, i64 1
	%1176 = getelementptr inbounds i64, i64* %1166, i64 1
	%1177 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %1177, %Type_Info** %1175
	%1178 = getelementptr inbounds %..string, %..string* %1165, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$262, i64 0, i32 0), i64 5}, %..string* %1178
	store i64 8, i64* %1176
	%1179 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	%1180 = bitcast %Type_Info* %1179 to %Type_Info*
	%1181 = getelementptr inbounds %Type_Info*, %Type_Info** %1164, i64 2
	%1182 = getelementptr inbounds i64, i64* %1166, i64 2
	%1183 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	store %Type_Info* %1183, %Type_Info** %1181
	%1184 = getelementptr inbounds %..string, %..string* %1165, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$263, i64 0, i32 0), i64 6}, %..string* %1184
	store i64 32, i64* %1182
	%1185 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 0
	%1186 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1185, i64 0, i32 0
	store %Type_Info** %1164, %Type_Info*** %1186
	%1187 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1185, i64 0, i32 1
	store i64 3, i64* %1187
	%1188 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1185, i64 0, i32 2
	store i64 3, i64* %1188
	%1189 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 1
	%1190 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1189, i64 0, i32 0
	store %..string* %1165, %..string** %1190
	%1191 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1189, i64 0, i32 1
	store i64 3, i64* %1191
	%1192 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1189, i64 0, i32 2
	store i64 3, i64* %1192
	%1193 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1158, i64 0, i32 2
	%1194 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1193, i64 0, i32 0
	store i64* %1166, i64** %1194
	%1195 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1193, i64 0, i32 1
	store i64 3, i64* %1195
	%1196 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1193, i64 0, i32 2
	store i64 3, i64* %1196
	%1197 = getelementptr inbounds %Type_Info, %Type_Info* %1156, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1197
	%1198 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1199 = bitcast %Type_Info* %1198 to %Type_Info.Pointer*
	%1200 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1201 = bitcast %Type_Info* %1200 to %Type_Info*
	%1202 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1199, i64 0, i32 0
	store %Type_Info* %1201, %Type_Info** %1202
	%1203 = getelementptr inbounds %Type_Info, %Type_Info* %1198, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1203
	%1204 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%1205 = bitcast %Type_Info* %1204 to %Type_Info.Slice*
	%1206 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1207 = bitcast %Type_Info* %1206 to %Type_Info*
	%1208 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1205, i64 0, i32 0
	store %Type_Info* %1207, %Type_Info** %1208
	%1209 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1205, i64 0, i32 1
	store i64 16, i64* %1209
	%1210 = getelementptr inbounds %Type_Info, %Type_Info* %1204, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1210
	%1211 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%1212 = bitcast %Type_Info* %1211 to %Type_Info.Pointer*
	%1213 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1214 = bitcast %Type_Info* %1213 to %Type_Info*
	%1215 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1212, i64 0, i32 0
	store %Type_Info* %1214, %Type_Info** %1215
	%1216 = getelementptr inbounds %Type_Info, %Type_Info* %1211, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1216
	%1217 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	; Type_Info_Slice
	%1218 = bitcast %Type_Info* %1217 to %Type_Info.Slice*
	%1219 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	%1220 = bitcast %Type_Info* %1219 to %Type_Info*
	%1221 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1218, i64 0, i32 0
	store %Type_Info* %1220, %Type_Info** %1221
	%1222 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1218, i64 0, i32 1
	store i64 8, i64* %1222
	%1223 = getelementptr inbounds %Type_Info, %Type_Info* %1217, i64 0, i32 2 ; UnionTagPtr
	store i64 11, i64* %1223
	%1224 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	; Type_Info_Named
	%1225 = bitcast %Type_Info* %1224 to %Type_Info.Named*
	%1226 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	%1227 = bitcast %Type_Info* %1226 to %Type_Info*
	%1228 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1225, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$264, i64 0, i32 0), i64 20}, %..string* %1228
	%1229 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1225, i64 0, i32 1
	store %Type_Info* %1227, %Type_Info** %1229
	%1230 = getelementptr inbounds %Type_Info, %Type_Info* %1224, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1230
	%1231 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	; Type_Info_RawUnion
	%1232 = bitcast %Type_Info* %1231 to %Type_Info.Raw_Union*
	%1233 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %1232, i64 0, i32 0
	%1234 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1233, i64 0, i32 3
	store i64 8, i64* %1234
	%1235 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1233, i64 0, i32 4
	store i64 8, i64* %1235
	%1236 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 61
	%1237 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 61
	%1238 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 43
	%1239 = getelementptr inbounds %Type_Info*, %Type_Info** %1236, i64 0
	%1240 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	store %Type_Info* %1240, %Type_Info** %1239
	%1241 = getelementptr inbounds %..string, %..string* %1237, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$265, i64 0, i32 0), i64 1}, %..string* %1241
	%1242 = getelementptr inbounds %Type_Info*, %Type_Info** %1236, i64 1
	%1243 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	store %Type_Info* %1243, %Type_Info** %1242
	%1244 = getelementptr inbounds %..string, %..string* %1237, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$266, i64 0, i32 0), i64 1}, %..string* %1244
	%1245 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1233, i64 0, i32 0
	%1246 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1245, i64 0, i32 0
	store %Type_Info** %1236, %Type_Info*** %1246
	%1247 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1245, i64 0, i32 1
	store i64 2, i64* %1247
	%1248 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1245, i64 0, i32 2
	store i64 2, i64* %1248
	%1249 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1233, i64 0, i32 1
	%1250 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1249, i64 0, i32 0
	store %..string* %1237, %..string** %1250
	%1251 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1249, i64 0, i32 1
	store i64 2, i64* %1251
	%1252 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1249, i64 0, i32 2
	store i64 2, i64* %1252
	%1253 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1233, i64 0, i32 2
	%1254 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1253, i64 0, i32 0
	store i64* %1238, i64** %1254
	%1255 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1253, i64 0, i32 1
	store i64 2, i64* %1255
	%1256 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1253, i64 0, i32 2
	store i64 2, i64* %1256
	%1257 = getelementptr inbounds %Type_Info, %Type_Info* %1231, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1257
	%1258 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	; Type_Info_Basic
	%1259 = bitcast %Type_Info* %1258 to %Type_Info.Float*
	%1260 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %1259, i64 0, i32 0
	store i64 8, i64* %1260
	%1261 = getelementptr inbounds %Type_Info, %Type_Info* %1258, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %1261
	%1262 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	; Type_Info_Basic
	%1263 = bitcast %Type_Info* %1262 to %Type_Info.Integer*
	%1264 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1263, i64 0, i32 0
	store i64 8, i64* %1264
	%1265 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1263, i64 0, i32 1
	store i1 true, i1* %1265
	%1266 = getelementptr inbounds %Type_Info, %Type_Info* %1262, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1266
	%1267 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	; Type_Info_Pointer
	%1268 = bitcast %Type_Info* %1267 to %Type_Info.Pointer*
	%1269 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	%1270 = bitcast %Type_Info* %1269 to %Type_Info*
	%1271 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1268, i64 0, i32 0
	store %Type_Info* %1270, %Type_Info** %1271
	%1272 = getelementptr inbounds %Type_Info, %Type_Info* %1267, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1272
	%1273 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	; Type_Info_Named
	%1274 = bitcast %Type_Info* %1273 to %Type_Info.Named*
	%1275 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	%1276 = bitcast %Type_Info* %1275 to %Type_Info*
	%1277 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1274, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$267, i64 0, i32 0), i64 3}, %..string* %1277
	%1278 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1274, i64 0, i32 1
	store %Type_Info* %1276, %Type_Info** %1278
	%1279 = getelementptr inbounds %Type_Info, %Type_Info* %1273, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1279
	%1280 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	; Type_Info_Struct
	%1281 = bitcast %Type_Info* %1280 to %Type_Info.Struct*
	%1282 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1281, i64 0, i32 0
	%1283 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 3
	store i64 32, i64* %1283
	%1284 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 4
	store i64 8, i64* %1284
	%1285 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 5
	store i1 false, i1* %1285
	%1286 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 6
	store i1 true, i1* %1286
	%1287 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 7
	store i1 false, i1* %1287
	%1288 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 63
	%1289 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 63
	%1290 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 45
	%1291 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1292 = bitcast %Type_Info* %1291 to %Type_Info*
	%1293 = getelementptr inbounds %Type_Info*, %Type_Info** %1288, i64 0
	%1294 = getelementptr inbounds i64, i64* %1290, i64 0
	%1295 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1295, %Type_Info** %1293
	%1296 = getelementptr inbounds %..string, %..string* %1289, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$268, i64 0, i32 0), i64 3}, %..string* %1296
	store i64 0, i64* %1294
	%1297 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1298 = bitcast %Type_Info* %1297 to %Type_Info*
	%1299 = getelementptr inbounds %Type_Info*, %Type_Info** %1288, i64 1
	%1300 = getelementptr inbounds i64, i64* %1290, i64 1
	%1301 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1301, %Type_Info** %1299
	%1302 = getelementptr inbounds %..string, %..string* %1289, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$269, i64 0, i32 0), i64 5}, %..string* %1302
	store i64 8, i64* %1300
	%1303 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1304 = bitcast %Type_Info* %1303 to %Type_Info*
	%1305 = getelementptr inbounds %Type_Info*, %Type_Info** %1288, i64 2
	%1306 = getelementptr inbounds i64, i64* %1290, i64 2
	%1307 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1307, %Type_Info** %1305
	%1308 = getelementptr inbounds %..string, %..string* %1289, i64 2
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$26a, i64 0, i32 0), i64 16}, %..string* %1308
	store i64 16, i64* %1306
	%1309 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1310 = bitcast %Type_Info* %1309 to %Type_Info*
	%1311 = getelementptr inbounds %Type_Info*, %Type_Info** %1288, i64 3
	%1312 = getelementptr inbounds i64, i64* %1290, i64 3
	%1313 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %1313, %Type_Info** %1311
	%1314 = getelementptr inbounds %..string, %..string* %1289, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$26b, i64 0, i32 0), i64 5}, %..string* %1314
	store i64 24, i64* %1312
	%1315 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 0
	%1316 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1315, i64 0, i32 0
	store %Type_Info** %1288, %Type_Info*** %1316
	%1317 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1315, i64 0, i32 1
	store i64 4, i64* %1317
	%1318 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1315, i64 0, i32 2
	store i64 4, i64* %1318
	%1319 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 1
	%1320 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1319, i64 0, i32 0
	store %..string* %1289, %..string** %1320
	%1321 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1319, i64 0, i32 1
	store i64 4, i64* %1321
	%1322 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1319, i64 0, i32 2
	store i64 4, i64* %1322
	%1323 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1282, i64 0, i32 2
	%1324 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1323, i64 0, i32 0
	store i64* %1290, i64** %1324
	%1325 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1323, i64 0, i32 1
	store i64 4, i64* %1325
	%1326 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1323, i64 0, i32 2
	store i64 4, i64* %1326
	%1327 = getelementptr inbounds %Type_Info, %Type_Info* %1280, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1327
	%1328 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1329 = bitcast %Type_Info* %1328 to %Type_Info.Pointer*
	%1330 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1331 = bitcast %Type_Info* %1330 to %Type_Info*
	%1332 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1329, i64 0, i32 0
	store %Type_Info* %1331, %Type_Info** %1332
	%1333 = getelementptr inbounds %Type_Info, %Type_Info* %1328, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1333
	%1334 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1335 = bitcast %Type_Info* %1334 to %Type_Info.Pointer*
	%1336 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1337 = bitcast %Type_Info* %1336 to %Type_Info*
	%1338 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1335, i64 0, i32 0
	store %Type_Info* %1337, %Type_Info** %1338
	%1339 = getelementptr inbounds %Type_Info, %Type_Info* %1334, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1339
	%1340 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1341 = bitcast %Type_Info* %1340 to %Type_Info.Pointer*
	%1342 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1343 = bitcast %Type_Info* %1342 to %Type_Info*
	%1344 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1341, i64 0, i32 0
	store %Type_Info* %1343, %Type_Info** %1344
	%1345 = getelementptr inbounds %Type_Info, %Type_Info* %1340, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1345
	%1346 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1347 = bitcast %Type_Info* %1346 to %Type_Info.Pointer*
	%1348 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1349 = bitcast %Type_Info* %1348 to %Type_Info*
	%1350 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1347, i64 0, i32 0
	store %Type_Info* %1349, %Type_Info** %1350
	%1351 = getelementptr inbounds %Type_Info, %Type_Info* %1346, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1351
	%1352 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	; Type_Info_Basic
	%1353 = bitcast %Type_Info* %1352 to %Type_Info.Integer*
	%1354 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1353, i64 0, i32 0
	store i64 4, i64* %1354
	%1355 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1353, i64 0, i32 1
	store i1 true, i1* %1355
	%1356 = getelementptr inbounds %Type_Info, %Type_Info* %1352, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1356
	%1357 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	; Type_Info_Named
	%1358 = bitcast %Type_Info* %1357 to %Type_Info.Named*
	%1359 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%1360 = bitcast %Type_Info* %1359 to %Type_Info*
	%1361 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1358, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$26c, i64 0, i32 0), i64 11}, %..string* %1361
	%1362 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1358, i64 0, i32 1
	store %Type_Info* %1360, %Type_Info** %1362
	%1363 = getelementptr inbounds %Type_Info, %Type_Info* %1357, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1363
	%1364 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	; Type_Info_Enum
	%1365 = bitcast %Type_Info* %1364 to %Type_Info.Enum*
	%1366 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%1367 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1365, i64 0, i32 0
	store %Type_Info* %1366, %Type_Info** %1367
	%1368 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 0
	%1369 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 0
	%1370 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1369 to i64*
	store i64 33350, i64* %1370
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$26d, i64 0, i32 0), i64 3}, %..string* %1368
	%1371 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 1
	%1372 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 1
	%1373 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1372 to i64*
	store i64 33351, i64* %1373
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$26e, i64 0, i32 0), i64 12}, %..string* %1371
	%1374 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 2
	%1375 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 2
	%1376 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1375 to i64*
	store i64 33352, i64* %1376
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$26f, i64 0, i32 0), i64 14}, %..string* %1374
	%1377 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 3
	%1378 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 3
	%1379 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1378 to i64*
	store i64 33353, i64* %1379
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$270, i64 0, i32 0), i64 10}, %..string* %1377
	%1380 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 4
	%1381 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 4
	%1382 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1381 to i64*
	store i64 33354, i64* %1382
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$271, i64 0, i32 0), i64 11}, %..string* %1380
	%1383 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 5
	%1384 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 5
	%1385 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1384 to i64*
	store i64 33355, i64* %1385
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$272, i64 0, i32 0), i64 5}, %..string* %1383
	%1386 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 6
	%1387 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 6
	%1388 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1387 to i64*
	store i64 4352, i64* %1388
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$273, i64 0, i32 0), i64 8}, %..string* %1386
	%1389 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1365, i64 0, i32 1
	%1390 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3a, i64 0, i32 0
	%1391 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1389, i64 0, i32 0
	store %..string* %1390, %..string** %1391
	%1392 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1389, i64 0, i32 1
	store i64 7, i64* %1392
	%1393 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1365, i64 0, i32 2
	%1394 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3a, i64 0, i32 0
	%1395 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1393, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %1394, {[0 x <8 x i8>], [8 x i8]}** %1395
	%1396 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1393, i64 0, i32 1
	store i64 7, i64* %1396
	%1397 = getelementptr inbounds %Type_Info, %Type_Info* %1364, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1397
	%1398 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	; Type_Info_Named
	%1399 = bitcast %Type_Info* %1398 to %Type_Info.Named*
	%1400 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 60
	%1401 = bitcast %Type_Info* %1400 to %Type_Info*
	%1402 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1399, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$274, i64 0, i32 0), i64 9}, %..string* %1402
	%1403 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1399, i64 0, i32 1
	store %Type_Info* %1401, %Type_Info** %1403
	%1404 = getelementptr inbounds %Type_Info, %Type_Info* %1398, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1404
	%1405 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 60
	; Type_Info_Enum
	%1406 = bitcast %Type_Info* %1405 to %Type_Info.Enum*
	%1407 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%1408 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1406, i64 0, i32 0
	store %Type_Info* %1407, %Type_Info** %1408
	%1409 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 0
	%1410 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 0
	%1411 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1410 to i64*
	store i64 33356, i64* %1411
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$275, i64 0, i32 0), i64 5}, %..string* %1409
	%1412 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 1
	%1413 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 1
	%1414 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1413 to i64*
	store i64 33357, i64* %1414
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$276, i64 0, i32 0), i64 18}, %..string* %1412
	%1415 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 2
	%1416 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 2
	%1417 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1416 to i64*
	store i64 33358, i64* %1417
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$277, i64 0, i32 0), i64 17}, %..string* %1415
	%1418 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 3
	%1419 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 3
	%1420 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1419 to i64*
	store i64 33359, i64* %1420
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$278, i64 0, i32 0), i64 11}, %..string* %1418
	%1421 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 4
	%1422 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 4
	%1423 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1422 to i64*
	store i64 33360, i64* %1423
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$279, i64 0, i32 0), i64 11}, %..string* %1421
	%1424 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 5
	%1425 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 5
	%1426 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1425 to i64*
	store i64 33384, i64* %1426
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$27a, i64 0, i32 0), i64 6}, %..string* %1424
	%1427 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 6
	%1428 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 6
	%1429 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1428 to i64*
	store i64 33385, i64* %1429
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$27b, i64 0, i32 0), i64 9}, %..string* %1427
	%1430 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 7
	%1431 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 7
	%1432 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1431 to i64*
	store i64 33386, i64* %1432
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$27c, i64 0, i32 0), i64 8}, %..string* %1430
	%1433 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 8
	%1434 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 8
	%1435 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1434 to i64*
	store i64 33361, i64* %1435
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$27d, i64 0, i32 0), i64 5}, %..string* %1433
	%1436 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 9
	%1437 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 9
	%1438 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1437 to i64*
	store i64 4352, i64* %1438
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$27e, i64 0, i32 0), i64 8}, %..string* %1436
	%1439 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1406, i64 0, i32 1
	%1440 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3c, i64 0, i32 0
	%1441 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1439, i64 0, i32 0
	store %..string* %1440, %..string** %1441
	%1442 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1439, i64 0, i32 1
	store i64 10, i64* %1442
	%1443 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1406, i64 0, i32 2
	%1444 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 0
	%1445 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1443, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %1444, {[0 x <8 x i8>], [8 x i8]}** %1445
	%1446 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1443, i64 0, i32 1
	store i64 10, i64* %1446
	%1447 = getelementptr inbounds %Type_Info, %Type_Info* %1405, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1447
	%1448 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	; Type_Info_Named
	%1449 = bitcast %Type_Info* %1448 to %Type_Info.Named*
	%1450 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 62
	%1451 = bitcast %Type_Info* %1450 to %Type_Info*
	%1452 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1449, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$27f, i64 0, i32 0), i64 13}, %..string* %1452
	%1453 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1449, i64 0, i32 1
	store %Type_Info* %1451, %Type_Info** %1453
	%1454 = getelementptr inbounds %Type_Info, %Type_Info* %1448, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1454
	%1455 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 62
	; Type_Info_Enum
	%1456 = bitcast %Type_Info* %1455 to %Type_Info.Enum*
	%1457 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%1458 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1456, i64 0, i32 0
	store %Type_Info* %1457, %Type_Info** %1458
	%1459 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-3e, i64 0, i32 0
	%1460 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 0
	%1461 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1460 to i64*
	store i64 37190, i64* %1461
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$280, i64 0, i32 0), i64 4}, %..string* %1459
	%1462 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-3e, i64 0, i32 1
	%1463 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 1
	%1464 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1463 to i64*
	store i64 37191, i64* %1464
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$281, i64 0, i32 0), i64 6}, %..string* %1462
	%1465 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-3e, i64 0, i32 2
	%1466 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 2
	%1467 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1466 to i64*
	store i64 37192, i64* %1467
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$282, i64 0, i32 0), i64 3}, %..string* %1465
	%1468 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-3e, i64 0, i32 3
	%1469 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 3
	%1470 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1469 to i64*
	store i64 33387, i64* %1470
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$283, i64 0, i32 0), i64 12}, %..string* %1468
	%1471 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-3e, i64 0, i32 4
	%1472 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 4
	%1473 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1472 to i64*
	store i64 4352, i64* %1473
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$284, i64 0, i32 0), i64 8}, %..string* %1471
	%1474 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1456, i64 0, i32 1
	%1475 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-3e, i64 0, i32 0
	%1476 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1474, i64 0, i32 0
	store %..string* %1475, %..string** %1476
	%1477 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1474, i64 0, i32 1
	store i64 5, i64* %1477
	%1478 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1456, i64 0, i32 2
	%1479 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 0
	%1480 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1478, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %1479, {[0 x <8 x i8>], [8 x i8]}** %1480
	%1481 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1478, i64 0, i32 1
	store i64 5, i64* %1481
	%1482 = getelementptr inbounds %Type_Info, %Type_Info* %1455, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1482
	%1483 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	; Type_Info_Basic
	%1484 = bitcast %Type_Info* %1483 to %Type_Info.Integer*
	%1485 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1484, i64 0, i32 0
	store i64 8, i64* %1485
	%1486 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1484, i64 0, i32 1
	store i1 false, i1* %1486
	%1487 = getelementptr inbounds %Type_Info, %Type_Info* %1483, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1487
	%1488 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	; Type_Info_Pointer
	%1489 = bitcast %Type_Info* %1488 to %Type_Info.Pointer*
	%1490 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%1491 = bitcast %Type_Info* %1490 to %Type_Info*
	%1492 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1489, i64 0, i32 0
	store %Type_Info* %1491, %Type_Info** %1492
	%1493 = getelementptr inbounds %Type_Info, %Type_Info* %1488, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1493
	%1494 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1495 = bitcast %Type_Info* %1494 to %Type_Info.Pointer*
	%1496 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1497 = bitcast %Type_Info* %1496 to %Type_Info*
	%1498 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1495, i64 0, i32 0
	store %Type_Info* %1497, %Type_Info** %1498
	%1499 = getelementptr inbounds %Type_Info, %Type_Info* %1494, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1499
	%1500 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	; Type_Info_Pointer
	%1501 = bitcast %Type_Info* %1500 to %Type_Info.Pointer*
	%1502 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%1503 = bitcast %Type_Info* %1502 to %Type_Info*
	%1504 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1501, i64 0, i32 0
	store %Type_Info* %1503, %Type_Info** %1504
	%1505 = getelementptr inbounds %Type_Info, %Type_Info* %1500, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1505
	%1506 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	; Type_Info_Basic
	%1507 = bitcast %Type_Info* %1506 to %Type_Info.Integer*
	%1508 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1507, i64 0, i32 0
	store i64 1, i64* %1508
	%1509 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1507, i64 0, i32 1
	store i1 true, i1* %1509
	%1510 = getelementptr inbounds %Type_Info, %Type_Info* %1506, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1510
	%1511 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	; Type_Info_Basic
	%1512 = bitcast %Type_Info* %1511 to %Type_Info.Integer*
	%1513 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1512, i64 0, i32 0
	store i64 2, i64* %1513
	%1514 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1512, i64 0, i32 1
	store i1 true, i1* %1514
	%1515 = getelementptr inbounds %Type_Info, %Type_Info* %1511, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1515
	%1516 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	; Type_Info_Basic
	%1517 = bitcast %Type_Info* %1516 to %Type_Info.Integer*
	%1518 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1517, i64 0, i32 0
	store i64 2, i64* %1518
	%1519 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1517, i64 0, i32 1
	store i1 false, i1* %1519
	%1520 = getelementptr inbounds %Type_Info, %Type_Info* %1516, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1520
	%1521 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	; Type_Info_Basic
	%1522 = bitcast %Type_Info* %1521 to %Type_Info.Integer*
	%1523 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1522, i64 0, i32 0
	store i64 4, i64* %1523
	%1524 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1522, i64 0, i32 1
	store i1 false, i1* %1524
	%1525 = getelementptr inbounds %Type_Info, %Type_Info* %1521, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1525
	%1526 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	; Type_Info_Basic
	%1527 = bitcast %Type_Info* %1526 to %Type_Info.Integer*
	%1528 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1527, i64 0, i32 0
	store i64 8, i64* %1528
	%1529 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1527, i64 0, i32 1
	store i1 false, i1* %1529
	%1530 = getelementptr inbounds %Type_Info, %Type_Info* %1526, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1530
	%1531 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	; Type_Info_Basic
	%1532 = bitcast %Type_Info* %1531 to %Type_Info.Any*
	%1533 = getelementptr inbounds %Type_Info, %Type_Info* %1531, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %1533
	%1534 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1535 = bitcast %Type_Info* %1534 to %Type_Info.Pointer*
	%1536 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1537 = bitcast %Type_Info* %1536 to %Type_Info*
	%1538 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1535, i64 0, i32 0
	store %Type_Info* %1537, %Type_Info** %1538
	%1539 = getelementptr inbounds %Type_Info, %Type_Info* %1534, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1539
	%1540 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	; Type_Info_Basic
	%1541 = bitcast %Type_Info* %1540 to %Type_Info.Pointer*
	%1542 = getelementptr inbounds %Type_Info, %Type_Info* %1540, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1542
	%1543 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	; Type_Info_Basic
	%1544 = bitcast %Type_Info* %1543 to %Type_Info.Float*
	%1545 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %1544, i64 0, i32 0
	store i64 4, i64* %1545
	%1546 = getelementptr inbounds %Type_Info, %Type_Info* %1543, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %1546
	%1547 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1548 = bitcast %Type_Info* %1547 to %Type_Info.Pointer*
	%1549 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1550 = bitcast %Type_Info* %1549 to %Type_Info*
	%1551 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1548, i64 0, i32 0
	store %Type_Info* %1550, %Type_Info** %1551
	%1552 = getelementptr inbounds %Type_Info, %Type_Info* %1547, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1552
	%1553 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	; Type_Info_Pointer
	%1554 = bitcast %Type_Info* %1553 to %Type_Info.Pointer*
	%1555 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%1556 = bitcast %Type_Info* %1555 to %Type_Info*
	%1557 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1554, i64 0, i32 0
	store %Type_Info* %1556, %Type_Info** %1557
	%1558 = getelementptr inbounds %Type_Info, %Type_Info* %1553, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1558
	%1559 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	; Type_Info_Pointer
	%1560 = bitcast %Type_Info* %1559 to %Type_Info.Pointer*
	%1561 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%1562 = bitcast %Type_Info* %1561 to %Type_Info*
	%1563 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1560, i64 0, i32 0
	store %Type_Info* %1562, %Type_Info** %1563
	%1564 = getelementptr inbounds %Type_Info, %Type_Info* %1559, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1564
	%1565 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	; Type_Info_Pointer
	%1566 = bitcast %Type_Info* %1565 to %Type_Info.Pointer*
	%1567 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%1568 = bitcast %Type_Info* %1567 to %Type_Info*
	%1569 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1566, i64 0, i32 0
	store %Type_Info* %1568, %Type_Info** %1569
	%1570 = getelementptr inbounds %Type_Info, %Type_Info* %1565, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1570
	%1571 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1572 = bitcast %Type_Info* %1571 to %Type_Info.Pointer*
	%1573 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1574 = bitcast %Type_Info* %1573 to %Type_Info*
	%1575 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1572, i64 0, i32 0
	store %Type_Info* %1574, %Type_Info** %1575
	%1576 = getelementptr inbounds %Type_Info, %Type_Info* %1571, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1576
	%1577 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	; Type_Info_Named
	%1578 = bitcast %Type_Info* %1577 to %Type_Info.Named*
	%1579 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%1580 = bitcast %Type_Info* %1579 to %Type_Info*
	%1581 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1578, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$285, i64 0, i32 0), i64 9}, %..string* %1581
	%1582 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1578, i64 0, i32 1
	store %Type_Info* %1580, %Type_Info** %1582
	%1583 = getelementptr inbounds %Type_Info, %Type_Info* %1577, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1583
	%1584 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	; Type_Info_Named
	%1585 = bitcast %Type_Info* %1584 to %Type_Info.Named*
	%1586 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%1587 = bitcast %Type_Info* %1586 to %Type_Info*
	%1588 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1585, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$286, i64 0, i32 0), i64 4}, %..string* %1588
	%1589 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1585, i64 0, i32 1
	store %Type_Info* %1587, %Type_Info** %1589
	%1590 = getelementptr inbounds %Type_Info, %Type_Info* %1584, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1590
	%1591 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	; Type_Info_Struct
	%1592 = bitcast %Type_Info* %1591 to %Type_Info.Struct*
	%1593 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1592, i64 0, i32 0
	%1594 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 3
	store i64 8, i64* %1594
	%1595 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 4
	store i64 4, i64* %1595
	%1596 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 5
	store i1 false, i1* %1596
	%1597 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 6
	store i1 true, i1* %1597
	%1598 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 7
	store i1 false, i1* %1598
	%1599 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 67
	%1600 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 67
	%1601 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 49
	%1602 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%1603 = bitcast %Type_Info* %1602 to %Type_Info*
	%1604 = getelementptr inbounds %Type_Info*, %Type_Info** %1599, i64 0
	%1605 = getelementptr inbounds i64, i64* %1601, i64 0
	%1606 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %1606, %Type_Info** %1604
	%1607 = getelementptr inbounds %..string, %..string* %1600, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$287, i64 0, i32 0), i64 1}, %..string* %1607
	store i64 0, i64* %1605
	%1608 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%1609 = bitcast %Type_Info* %1608 to %Type_Info*
	%1610 = getelementptr inbounds %Type_Info*, %Type_Info** %1599, i64 1
	%1611 = getelementptr inbounds i64, i64* %1601, i64 1
	%1612 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %1612, %Type_Info** %1610
	%1613 = getelementptr inbounds %..string, %..string* %1600, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$288, i64 0, i32 0), i64 1}, %..string* %1613
	store i64 4, i64* %1611
	%1614 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 0
	%1615 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1614, i64 0, i32 0
	store %Type_Info** %1599, %Type_Info*** %1615
	%1616 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1614, i64 0, i32 1
	store i64 2, i64* %1616
	%1617 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1614, i64 0, i32 2
	store i64 2, i64* %1617
	%1618 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 1
	%1619 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1618, i64 0, i32 0
	store %..string* %1600, %..string** %1619
	%1620 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1618, i64 0, i32 1
	store i64 2, i64* %1620
	%1621 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1618, i64 0, i32 2
	store i64 2, i64* %1621
	%1622 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1593, i64 0, i32 2
	%1623 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1622, i64 0, i32 0
	store i64* %1601, i64** %1623
	%1624 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1622, i64 0, i32 1
	store i64 2, i64* %1624
	%1625 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1622, i64 0, i32 2
	store i64 2, i64* %1625
	%1626 = getelementptr inbounds %Type_Info, %Type_Info* %1591, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1626
	%1627 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	; Type_Info_Named
	%1628 = bitcast %Type_Info* %1627 to %Type_Info.Named*
	%1629 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%1630 = bitcast %Type_Info* %1629 to %Type_Info*
	%1631 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1628, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$289, i64 0, i32 0), i64 4}, %..string* %1631
	%1632 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1628, i64 0, i32 1
	store %Type_Info* %1630, %Type_Info** %1632
	%1633 = getelementptr inbounds %Type_Info, %Type_Info* %1627, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1633
	%1634 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	; Type_Info_Struct
	%1635 = bitcast %Type_Info* %1634 to %Type_Info.Struct*
	%1636 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1635, i64 0, i32 0
	%1637 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 3
	store i64 16, i64* %1637
	%1638 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 4
	store i64 4, i64* %1638
	%1639 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 5
	store i1 false, i1* %1639
	%1640 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 6
	store i1 true, i1* %1640
	%1641 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 7
	store i1 false, i1* %1641
	%1642 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 69
	%1643 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 69
	%1644 = getelementptr inbounds [175 x i64], [175 x i64]* @.__$type_info_offsets_data, i64 0, i32 51
	%1645 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%1646 = bitcast %Type_Info* %1645 to %Type_Info*
	%1647 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 0
	%1648 = getelementptr inbounds i64, i64* %1644, i64 0
	%1649 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %1649, %Type_Info** %1647
	%1650 = getelementptr inbounds %..string, %..string* %1643, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$28a, i64 0, i32 0), i64 1}, %..string* %1650
	store i64 0, i64* %1648
	%1651 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%1652 = bitcast %Type_Info* %1651 to %Type_Info*
	%1653 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 1
	%1654 = getelementptr inbounds i64, i64* %1644, i64 1
	%1655 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %1655, %Type_Info** %1653
	%1656 = getelementptr inbounds %..string, %..string* %1643, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$28b, i64 0, i32 0), i64 1}, %..string* %1656
	store i64 4, i64* %1654
	%1657 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%1658 = bitcast %Type_Info* %1657 to %Type_Info*
	%1659 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 2
	%1660 = getelementptr inbounds i64, i64* %1644, i64 2
	%1661 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %1661, %Type_Info** %1659
	%1662 = getelementptr inbounds %..string, %..string* %1643, i64 2
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$28c, i64 0, i32 0), i64 1}, %..string* %1662
	store i64 8, i64* %1660
	%1663 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%1664 = bitcast %Type_Info* %1663 to %Type_Info*
	%1665 = getelementptr inbounds %Type_Info*, %Type_Info** %1642, i64 3
	%1666 = getelementptr inbounds i64, i64* %1644, i64 3
	%1667 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %1667, %Type_Info** %1665
	%1668 = getelementptr inbounds %..string, %..string* %1643, i64 3
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$28d, i64 0, i32 0), i64 1}, %..string* %1668
	store i64 12, i64* %1666
	%1669 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 0
	%1670 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1669, i64 0, i32 0
	store %Type_Info** %1642, %Type_Info*** %1670
	%1671 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1669, i64 0, i32 1
	store i64 4, i64* %1671
	%1672 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1669, i64 0, i32 2
	store i64 4, i64* %1672
	%1673 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 1
	%1674 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1673, i64 0, i32 0
	store %..string* %1643, %..string** %1674
	%1675 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1673, i64 0, i32 1
	store i64 4, i64* %1675
	%1676 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1673, i64 0, i32 2
	store i64 4, i64* %1676
	%1677 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1636, i64 0, i32 2
	%1678 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1677, i64 0, i32 0
	store i64* %1644, i64** %1678
	%1679 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1677, i64 0, i32 1
	store i64 4, i64* %1679
	%1680 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1677, i64 0, i32 2
	store i64 4, i64* %1680
	%1681 = getelementptr inbounds %Type_Info, %Type_Info* %1634, i64 0, i32 2 ; UnionTagPtr
	store i64 14, i64* %1681
	%1682 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	; Type_Info_Proc
	%1683 = bitcast %Type_Info* %1682 to %Type_Info.Procedure*
	%1684 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1683, i64 0, i32 0
	%1685 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1683, i64 0, i32 1
	%1686 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1683, i64 0, i32 2
	%1687 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1683, i64 0, i32 3
	%1688 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%1689 = bitcast %Type_Info* %1688 to %Type_Info*
	store %Type_Info* %1689, %Type_Info** %1684
	store i1 false, i1* %1686
	store i64 1, i64* %1687
	%1690 = getelementptr inbounds %Type_Info, %Type_Info* %1682, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1690
	%1691 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	; Type_Info_Tuple
	%1692 = bitcast %Type_Info* %1691 to %Type_Info.Tuple*
	%1693 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1692, i64 0, i32 0
	%1694 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 4
	store i64 8, i64* %1694
	%1695 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 73
	%1696 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 73
	%1697 = getelementptr inbounds %Type_Info*, %Type_Info** %1695, i64 0
	%1698 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1698, %Type_Info** %1697
	%1699 = getelementptr inbounds %..string, %..string* %1696, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$28e, i64 0, i32 0), i64 4}, %..string* %1699
	%1700 = getelementptr inbounds %Type_Info*, %Type_Info** %1695, i64 1
	%1701 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1701, %Type_Info** %1700
	%1702 = getelementptr inbounds %..string, %..string* %1696, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$28f, i64 0, i32 0), i64 5}, %..string* %1702
	%1703 = getelementptr inbounds %Type_Info*, %Type_Info** %1695, i64 2
	%1704 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1704, %Type_Info** %1703
	%1705 = getelementptr inbounds %..string, %..string* %1696, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$290, i64 0, i32 0), i64 5}, %..string* %1705
	%1706 = getelementptr inbounds %Type_Info*, %Type_Info** %1695, i64 3
	%1707 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	store %Type_Info* %1707, %Type_Info** %1706
	%1708 = getelementptr inbounds %..string, %..string* %1696, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$291, i64 0, i32 0), i64 7}, %..string* %1708
	%1709 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 0
	%1710 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1709, i64 0, i32 0
	store %Type_Info** %1695, %Type_Info*** %1710
	%1711 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1709, i64 0, i32 1
	store i64 4, i64* %1711
	%1712 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1709, i64 0, i32 2
	store i64 4, i64* %1712
	%1713 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 1
	%1714 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1713, i64 0, i32 0
	store %..string* %1696, %..string** %1714
	%1715 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1713, i64 0, i32 1
	store i64 4, i64* %1715
	%1716 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1713, i64 0, i32 2
	store i64 4, i64* %1716
	%1717 = getelementptr inbounds %Type_Info, %Type_Info* %1691, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1717
	%1718 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	; Type_Info_Proc
	%1719 = bitcast %Type_Info* %1718 to %Type_Info.Procedure*
	%1720 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1719, i64 0, i32 0
	%1721 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1719, i64 0, i32 1
	%1722 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1719, i64 0, i32 2
	%1723 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1719, i64 0, i32 3
	%1724 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%1725 = bitcast %Type_Info* %1724 to %Type_Info*
	store %Type_Info* %1725, %Type_Info** %1720
	store i1 false, i1* %1722
	store i64 1, i64* %1723
	%1726 = getelementptr inbounds %Type_Info, %Type_Info* %1718, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1726
	%1727 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%1728 = bitcast %Type_Info* %1727 to %Type_Info.Tuple*
	%1729 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1728, i64 0, i32 0
	%1730 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1729, i64 0, i32 4
	store i64 4, i64* %1730
	%1731 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 77
	%1732 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 77
	%1733 = getelementptr inbounds %Type_Info*, %Type_Info** %1731, i64 0
	%1734 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %1734, %Type_Info** %1733
	%1735 = getelementptr inbounds %..string, %..string* %1732, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$292, i64 0, i32 0), i64 6}, %..string* %1735
	%1736 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1729, i64 0, i32 0
	%1737 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1736, i64 0, i32 0
	store %Type_Info** %1731, %Type_Info*** %1737
	%1738 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1736, i64 0, i32 1
	store i64 1, i64* %1738
	%1739 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1736, i64 0, i32 2
	store i64 1, i64* %1739
	%1740 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1729, i64 0, i32 1
	%1741 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1740, i64 0, i32 0
	store %..string* %1732, %..string** %1741
	%1742 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1740, i64 0, i32 1
	store i64 1, i64* %1742
	%1743 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1740, i64 0, i32 2
	store i64 1, i64* %1743
	%1744 = getelementptr inbounds %Type_Info, %Type_Info* %1727, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1744
	%1745 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	; Type_Info_Proc
	%1746 = bitcast %Type_Info* %1745 to %Type_Info.Procedure*
	%1747 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1746, i64 0, i32 0
	%1748 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1746, i64 0, i32 1
	%1749 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1746, i64 0, i32 2
	%1750 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1746, i64 0, i32 3
	%1751 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	%1752 = bitcast %Type_Info* %1751 to %Type_Info*
	store %Type_Info* %1752, %Type_Info** %1747
	store i1 false, i1* %1749
	store i64 1, i64* %1750
	%1753 = getelementptr inbounds %Type_Info, %Type_Info* %1745, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1753
	%1754 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	; Type_Info_Tuple
	%1755 = bitcast %Type_Info* %1754 to %Type_Info.Tuple*
	%1756 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1755, i64 0, i32 0
	%1757 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1756, i64 0, i32 4
	store i64 8, i64* %1757
	%1758 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 78
	%1759 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 78
	%1760 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 0
	%1761 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %1761, %Type_Info** %1760
	%1762 = getelementptr inbounds %..string, %..string* %1759, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$293, i64 0, i32 0), i64 5}, %..string* %1762
	%1763 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 1
	%1764 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1764, %Type_Info** %1763
	%1765 = getelementptr inbounds %..string, %..string* %1759, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$294, i64 0, i32 0), i64 4}, %..string* %1765
	%1766 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 2
	%1767 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1767, %Type_Info** %1766
	%1768 = getelementptr inbounds %..string, %..string* %1759, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$295, i64 0, i32 0), i64 4}, %..string* %1768
	%1769 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 3
	%1770 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %1770, %Type_Info** %1769
	%1771 = getelementptr inbounds %..string, %..string* %1759, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$296, i64 0, i32 0), i64 10}, %..string* %1771
	%1772 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 4
	%1773 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %1773, %Type_Info** %1772
	%1774 = getelementptr inbounds %..string, %..string* %1759, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$297, i64 0, i32 0), i64 6}, %..string* %1774
	%1775 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 5
	%1776 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	store %Type_Info* %1776, %Type_Info** %1775
	%1777 = getelementptr inbounds %..string, %..string* %1759, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$298, i64 0, i32 0), i64 7}, %..string* %1777
	%1778 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1756, i64 0, i32 0
	%1779 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1778, i64 0, i32 0
	store %Type_Info** %1758, %Type_Info*** %1779
	%1780 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1778, i64 0, i32 1
	store i64 6, i64* %1780
	%1781 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1778, i64 0, i32 2
	store i64 6, i64* %1781
	%1782 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1756, i64 0, i32 1
	%1783 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1782, i64 0, i32 0
	store %..string* %1759, %..string** %1783
	%1784 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1782, i64 0, i32 1
	store i64 6, i64* %1784
	%1785 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1782, i64 0, i32 2
	store i64 6, i64* %1785
	%1786 = getelementptr inbounds %Type_Info, %Type_Info* %1754, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1786
	%1787 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	; Type_Info_Proc
	%1788 = bitcast %Type_Info* %1787 to %Type_Info.Procedure*
	%1789 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1788, i64 0, i32 0
	%1790 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1788, i64 0, i32 1
	%1791 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1788, i64 0, i32 2
	%1792 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1788, i64 0, i32 3
	%1793 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%1794 = bitcast %Type_Info* %1793 to %Type_Info*
	store %Type_Info* %1794, %Type_Info** %1789
	store i1 false, i1* %1791
	store i64 1, i64* %1792
	%1795 = getelementptr inbounds %Type_Info, %Type_Info* %1787, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1795
	%1796 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%1797 = bitcast %Type_Info* %1796 to %Type_Info.Tuple*
	%1798 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1797, i64 0, i32 0
	%1799 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1798, i64 0, i32 4
	store i64 4, i64* %1799
	%1800 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 84
	%1801 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 84
	%1802 = getelementptr inbounds %Type_Info*, %Type_Info** %1800, i64 0
	%1803 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %1803, %Type_Info** %1802
	%1804 = getelementptr inbounds %..string, %..string* %1801, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$299, i64 0, i32 0), i64 5}, %..string* %1804
	%1805 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1798, i64 0, i32 0
	%1806 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1805, i64 0, i32 0
	store %Type_Info** %1800, %Type_Info*** %1806
	%1807 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1805, i64 0, i32 1
	store i64 1, i64* %1807
	%1808 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1805, i64 0, i32 2
	store i64 1, i64* %1808
	%1809 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1798, i64 0, i32 1
	%1810 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1809, i64 0, i32 0
	store %..string* %1801, %..string** %1810
	%1811 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1809, i64 0, i32 1
	store i64 1, i64* %1811
	%1812 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1809, i64 0, i32 2
	store i64 1, i64* %1812
	%1813 = getelementptr inbounds %Type_Info, %Type_Info* %1796, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1813
	%1814 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	; Type_Info_Proc
	%1815 = bitcast %Type_Info* %1814 to %Type_Info.Procedure*
	%1816 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1815, i64 0, i32 0
	%1817 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1815, i64 0, i32 1
	%1818 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1815, i64 0, i32 2
	%1819 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1815, i64 0, i32 3
	%1820 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%1821 = bitcast %Type_Info* %1820 to %Type_Info*
	store %Type_Info* %1821, %Type_Info** %1816
	store i1 false, i1* %1818
	store i64 1, i64* %1819
	%1822 = getelementptr inbounds %Type_Info, %Type_Info* %1814, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1822
	%1823 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	; Type_Info_Tuple
	%1824 = bitcast %Type_Info* %1823 to %Type_Info.Tuple*
	%1825 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1824, i64 0, i32 0
	%1826 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1825, i64 0, i32 4
	store i64 8, i64* %1826
	%1827 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 85
	%1828 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 85
	%1829 = getelementptr inbounds %Type_Info*, %Type_Info** %1827, i64 0
	%1830 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1830, %Type_Info** %1829
	%1831 = getelementptr inbounds %..string, %..string* %1828, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$29a, i64 0, i32 0), i64 5}, %..string* %1831
	%1832 = getelementptr inbounds %Type_Info*, %Type_Info** %1827, i64 1
	%1833 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	store %Type_Info* %1833, %Type_Info** %1832
	%1834 = getelementptr inbounds %..string, %..string* %1828, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$29b, i64 0, i32 0), i64 7}, %..string* %1834
	%1835 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1825, i64 0, i32 0
	%1836 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1835, i64 0, i32 0
	store %Type_Info** %1827, %Type_Info*** %1836
	%1837 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1835, i64 0, i32 1
	store i64 2, i64* %1837
	%1838 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1835, i64 0, i32 2
	store i64 2, i64* %1838
	%1839 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1825, i64 0, i32 1
	%1840 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1839, i64 0, i32 0
	store %..string* %1828, %..string** %1840
	%1841 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1839, i64 0, i32 1
	store i64 2, i64* %1841
	%1842 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1839, i64 0, i32 2
	store i64 2, i64* %1842
	%1843 = getelementptr inbounds %Type_Info, %Type_Info* %1823, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1843
	%1844 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Pointer
	%1845 = bitcast %Type_Info* %1844 to %Type_Info.Pointer*
	%1846 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%1847 = bitcast %Type_Info* %1846 to %Type_Info*
	%1848 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1845, i64 0, i32 0
	store %Type_Info* %1847, %Type_Info** %1848
	%1849 = getelementptr inbounds %Type_Info, %Type_Info* %1844, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1849
	%1850 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Proc
	%1851 = bitcast %Type_Info* %1850 to %Type_Info.Procedure*
	%1852 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1851, i64 0, i32 0
	%1853 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1851, i64 0, i32 1
	%1854 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1851, i64 0, i32 2
	%1855 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1851, i64 0, i32 3
	%1856 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%1857 = bitcast %Type_Info* %1856 to %Type_Info*
	store %Type_Info* %1857, %Type_Info** %1852
	store i1 false, i1* %1854
	store i64 1, i64* %1855
	%1858 = getelementptr inbounds %Type_Info, %Type_Info* %1850, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1858
	%1859 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	; Type_Info_Tuple
	%1860 = bitcast %Type_Info* %1859 to %Type_Info.Tuple*
	%1861 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1860, i64 0, i32 0
	%1862 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1861, i64 0, i32 4
	store i64 8, i64* %1862
	%1863 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 87
	%1864 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 87
	%1865 = getelementptr inbounds %Type_Info*, %Type_Info** %1863, i64 0
	%1866 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1866, %Type_Info** %1865
	%1867 = getelementptr inbounds %..string, %..string* %1864, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$29c, i64 0, i32 0), i64 6}, %..string* %1867
	%1868 = getelementptr inbounds %Type_Info*, %Type_Info** %1863, i64 1
	%1869 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1869, %Type_Info** %1868
	%1870 = getelementptr inbounds %..string, %..string* %1864, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$29d, i64 0, i32 0), i64 4}, %..string* %1870
	%1871 = getelementptr inbounds %Type_Info*, %Type_Info** %1863, i64 2
	%1872 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	store %Type_Info* %1872, %Type_Info** %1871
	%1873 = getelementptr inbounds %..string, %..string* %1864, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$29e, i64 0, i32 0), i64 4}, %..string* %1873
	%1874 = getelementptr inbounds %Type_Info*, %Type_Info** %1863, i64 3
	%1875 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1875, %Type_Info** %1874
	%1876 = getelementptr inbounds %..string, %..string* %1864, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$29f, i64 0, i32 0), i64 5}, %..string* %1876
	%1877 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1861, i64 0, i32 0
	%1878 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1877, i64 0, i32 0
	store %Type_Info** %1863, %Type_Info*** %1878
	%1879 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1877, i64 0, i32 1
	store i64 4, i64* %1879
	%1880 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1877, i64 0, i32 2
	store i64 4, i64* %1880
	%1881 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1861, i64 0, i32 1
	%1882 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1881, i64 0, i32 0
	store %..string* %1864, %..string** %1882
	%1883 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1881, i64 0, i32 1
	store i64 4, i64* %1883
	%1884 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1881, i64 0, i32 2
	store i64 4, i64* %1884
	%1885 = getelementptr inbounds %Type_Info, %Type_Info* %1859, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1885
	%1886 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 91
	; Type_Info_Proc
	%1887 = bitcast %Type_Info* %1886 to %Type_Info.Procedure*
	%1888 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1887, i64 0, i32 0
	%1889 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1887, i64 0, i32 1
	%1890 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1887, i64 0, i32 2
	%1891 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1887, i64 0, i32 3
	%1892 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	%1893 = bitcast %Type_Info* %1892 to %Type_Info*
	store %Type_Info* %1893, %Type_Info** %1888
	store i1 false, i1* %1890
	store i64 1, i64* %1891
	%1894 = getelementptr inbounds %Type_Info, %Type_Info* %1886, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1894
	%1895 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	; Type_Info_Tuple
	%1896 = bitcast %Type_Info* %1895 to %Type_Info.Tuple*
	%1897 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1896, i64 0, i32 0
	%1898 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1897, i64 0, i32 4
	store i64 4, i64* %1898
	%1899 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 91
	%1900 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 91
	%1901 = getelementptr inbounds %Type_Info*, %Type_Info** %1899, i64 0
	%1902 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1902, %Type_Info** %1901
	%1903 = getelementptr inbounds %..string, %..string* %1900, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a0, i64 0, i32 0), i64 6}, %..string* %1903
	%1904 = getelementptr inbounds %Type_Info*, %Type_Info** %1899, i64 1
	%1905 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %1905, %Type_Info** %1904
	%1906 = getelementptr inbounds %..string, %..string* %1900, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a1, i64 0, i32 0), i64 6}, %..string* %1906
	%1907 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1897, i64 0, i32 0
	%1908 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1907, i64 0, i32 0
	store %Type_Info** %1899, %Type_Info*** %1908
	%1909 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1907, i64 0, i32 1
	store i64 2, i64* %1909
	%1910 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1907, i64 0, i32 2
	store i64 2, i64* %1910
	%1911 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1897, i64 0, i32 1
	%1912 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1911, i64 0, i32 0
	store %..string* %1900, %..string** %1912
	%1913 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1911, i64 0, i32 1
	store i64 2, i64* %1913
	%1914 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1911, i64 0, i32 2
	store i64 2, i64* %1914
	%1915 = getelementptr inbounds %Type_Info, %Type_Info* %1895, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1915
	%1916 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	; Type_Info_Proc
	%1917 = bitcast %Type_Info* %1916 to %Type_Info.Procedure*
	%1918 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1917, i64 0, i32 0
	%1919 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1917, i64 0, i32 1
	%1920 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1917, i64 0, i32 2
	%1921 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1917, i64 0, i32 3
	%1922 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%1923 = bitcast %Type_Info* %1922 to %Type_Info*
	store %Type_Info* %1923, %Type_Info** %1918
	store i1 false, i1* %1920
	store i64 1, i64* %1921
	%1924 = getelementptr inbounds %Type_Info, %Type_Info* %1916, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1924
	%1925 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	; Type_Info_Tuple
	%1926 = bitcast %Type_Info* %1925 to %Type_Info.Tuple*
	%1927 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1926, i64 0, i32 0
	%1928 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1927, i64 0, i32 4
	store i64 8, i64* %1928
	%1929 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 93
	%1930 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 93
	%1931 = getelementptr inbounds %Type_Info*, %Type_Info** %1929, i64 0
	%1932 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1932, %Type_Info** %1931
	%1933 = getelementptr inbounds %..string, %..string* %1930, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2a2, i64 0, i32 0), i64 1}, %..string* %1933
	%1934 = getelementptr inbounds %Type_Info*, %Type_Info** %1929, i64 1
	%1935 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	store %Type_Info* %1935, %Type_Info** %1934
	%1936 = getelementptr inbounds %..string, %..string* %1930, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a3, i64 0, i32 0), i64 6}, %..string* %1936
	%1937 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1927, i64 0, i32 0
	%1938 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1937, i64 0, i32 0
	store %Type_Info** %1929, %Type_Info*** %1938
	%1939 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1937, i64 0, i32 1
	store i64 2, i64* %1939
	%1940 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1937, i64 0, i32 2
	store i64 2, i64* %1940
	%1941 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1927, i64 0, i32 1
	%1942 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1941, i64 0, i32 0
	store %..string* %1930, %..string** %1942
	%1943 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1941, i64 0, i32 1
	store i64 2, i64* %1943
	%1944 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1941, i64 0, i32 2
	store i64 2, i64* %1944
	%1945 = getelementptr inbounds %Type_Info, %Type_Info* %1925, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1945
	%1946 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Pointer
	%1947 = bitcast %Type_Info* %1946 to %Type_Info.Pointer*
	%1948 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%1949 = bitcast %Type_Info* %1948 to %Type_Info*
	%1950 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1947, i64 0, i32 0
	store %Type_Info* %1949, %Type_Info** %1950
	%1951 = getelementptr inbounds %Type_Info, %Type_Info* %1946, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1951
	%1952 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	; Type_Info_Proc
	%1953 = bitcast %Type_Info* %1952 to %Type_Info.Procedure*
	%1954 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1953, i64 0, i32 0
	%1955 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1953, i64 0, i32 1
	%1956 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1953, i64 0, i32 2
	%1957 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1953, i64 0, i32 3
	%1958 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	%1959 = bitcast %Type_Info* %1958 to %Type_Info*
	store %Type_Info* %1959, %Type_Info** %1954
	store i1 false, i1* %1956
	store i64 1, i64* %1957
	%1960 = getelementptr inbounds %Type_Info, %Type_Info* %1952, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1960
	%1961 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	; Type_Info_Tuple
	%1962 = bitcast %Type_Info* %1961 to %Type_Info.Tuple*
	%1963 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1962, i64 0, i32 0
	%1964 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1963, i64 0, i32 4
	store i64 8, i64* %1964
	%1965 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 95
	%1966 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 95
	%1967 = getelementptr inbounds %Type_Info*, %Type_Info** %1965, i64 0
	%1968 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1968, %Type_Info** %1967
	%1969 = getelementptr inbounds %..string, %..string* %1966, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a4, i64 0, i32 0), i64 6}, %..string* %1969
	%1970 = getelementptr inbounds %Type_Info*, %Type_Info** %1965, i64 1
	%1971 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1971, %Type_Info** %1970
	%1972 = getelementptr inbounds %..string, %..string* %1966, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2a5, i64 0, i32 0), i64 4}, %..string* %1972
	%1973 = getelementptr inbounds %Type_Info*, %Type_Info** %1965, i64 2
	%1974 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1974, %Type_Info** %1973
	%1975 = getelementptr inbounds %..string, %..string* %1966, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2a6, i64 0, i32 0), i64 8}, %..string* %1975
	%1976 = getelementptr inbounds %Type_Info*, %Type_Info** %1965, i64 3
	%1977 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %1977, %Type_Info** %1976
	%1978 = getelementptr inbounds %..string, %..string* %1966, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a7, i64 0, i32 0), i64 5}, %..string* %1978
	%1979 = getelementptr inbounds %Type_Info*, %Type_Info** %1965, i64 4
	%1980 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	store %Type_Info* %1980, %Type_Info** %1979
	%1981 = getelementptr inbounds %..string, %..string* %1966, i64 4
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2a8, i64 0, i32 0), i64 3}, %..string* %1981
	%1982 = getelementptr inbounds %Type_Info*, %Type_Info** %1965, i64 5
	%1983 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %1983, %Type_Info** %1982
	%1984 = getelementptr inbounds %..string, %..string* %1966, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2a9, i64 0, i32 0), i64 7}, %..string* %1984
	%1985 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1963, i64 0, i32 0
	%1986 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1985, i64 0, i32 0
	store %Type_Info** %1965, %Type_Info*** %1986
	%1987 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1985, i64 0, i32 1
	store i64 6, i64* %1987
	%1988 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1985, i64 0, i32 2
	store i64 6, i64* %1988
	%1989 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1963, i64 0, i32 1
	%1990 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1989, i64 0, i32 0
	store %..string* %1966, %..string** %1990
	%1991 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1989, i64 0, i32 1
	store i64 6, i64* %1991
	%1992 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1989, i64 0, i32 2
	store i64 6, i64* %1992
	%1993 = getelementptr inbounds %Type_Info, %Type_Info* %1961, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1993
	%1994 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Pointer
	%1995 = bitcast %Type_Info* %1994 to %Type_Info.Pointer*
	%1996 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%1997 = bitcast %Type_Info* %1996 to %Type_Info*
	%1998 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1995, i64 0, i32 0
	store %Type_Info* %1997, %Type_Info** %1998
	%1999 = getelementptr inbounds %Type_Info, %Type_Info* %1994, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %1999
	%2000 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	; Type_Info_Proc
	%2001 = bitcast %Type_Info* %2000 to %Type_Info.Procedure*
	%2002 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2001, i64 0, i32 0
	%2003 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2001, i64 0, i32 1
	%2004 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2001, i64 0, i32 2
	%2005 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2001, i64 0, i32 3
	%2006 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	%2007 = bitcast %Type_Info* %2006 to %Type_Info*
	store %Type_Info* %2007, %Type_Info** %2002
	store i1 false, i1* %2004
	store i64 1, i64* %2005
	%2008 = getelementptr inbounds %Type_Info, %Type_Info* %2000, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2008
	%2009 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	; Type_Info_Tuple
	%2010 = bitcast %Type_Info* %2009 to %Type_Info.Tuple*
	%2011 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2010, i64 0, i32 0
	%2012 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2011, i64 0, i32 4
	store i64 8, i64* %2012
	%2013 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 101
	%2014 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 101
	%2015 = getelementptr inbounds %Type_Info*, %Type_Info** %2013, i64 0
	%2016 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 97
	store %Type_Info* %2016, %Type_Info** %2015
	%2017 = getelementptr inbounds %..string, %..string* %2014, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2aa, i64 0, i32 0), i64 8}, %..string* %2017
	%2018 = getelementptr inbounds %Type_Info*, %Type_Info** %2013, i64 1
	%2019 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	store %Type_Info* %2019, %Type_Info** %2018
	%2020 = getelementptr inbounds %..string, %..string* %2014, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2ab, i64 0, i32 0), i64 9}, %..string* %2020
	%2021 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2011, i64 0, i32 0
	%2022 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2021, i64 0, i32 0
	store %Type_Info** %2013, %Type_Info*** %2022
	%2023 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2021, i64 0, i32 1
	store i64 2, i64* %2023
	%2024 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2021, i64 0, i32 2
	store i64 2, i64* %2024
	%2025 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2011, i64 0, i32 1
	%2026 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2025, i64 0, i32 0
	store %..string* %2014, %..string** %2026
	%2027 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2025, i64 0, i32 1
	store i64 2, i64* %2027
	%2028 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2025, i64 0, i32 2
	store i64 2, i64* %2028
	%2029 = getelementptr inbounds %Type_Info, %Type_Info* %2009, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2029
	%2030 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 97
	; Type_Info_Named
	%2031 = bitcast %Type_Info* %2030 to %Type_Info.Named*
	%2032 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%2033 = bitcast %Type_Info* %2032 to %Type_Info*
	%2034 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2031, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$2ac, i64 0, i32 0), i64 24}, %..string* %2034
	%2035 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2031, i64 0, i32 1
	store %Type_Info* %2033, %Type_Info** %2035
	%2036 = getelementptr inbounds %Type_Info, %Type_Info* %2030, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2036
	%2037 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	; Type_Info_Proc
	%2038 = bitcast %Type_Info* %2037 to %Type_Info.Procedure*
	%2039 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2038, i64 0, i32 0
	%2040 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2038, i64 0, i32 1
	%2041 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2038, i64 0, i32 2
	%2042 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2038, i64 0, i32 3
	%2043 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 99
	%2044 = bitcast %Type_Info* %2043 to %Type_Info*
	store %Type_Info* %2044, %Type_Info** %2039
	store i1 false, i1* %2041
	store i64 1, i64* %2042
	%2045 = getelementptr inbounds %Type_Info, %Type_Info* %2037, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2045
	%2046 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 99
	; Type_Info_Tuple
	%2047 = bitcast %Type_Info* %2046 to %Type_Info.Tuple*
	%2048 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2047, i64 0, i32 0
	%2049 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2048, i64 0, i32 4
	store i64 8, i64* %2049
	%2050 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 103
	%2051 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 103
	%2052 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 0
	%2053 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	store %Type_Info* %2053, %Type_Info** %2052
	%2054 = getelementptr inbounds %..string, %..string* %2051, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2ad, i64 0, i32 0), i64 6}, %..string* %2054
	%2055 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 1
	%2056 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	store %Type_Info* %2056, %Type_Info** %2055
	%2057 = getelementptr inbounds %..string, %..string* %2051, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2ae, i64 0, i32 0), i64 4}, %..string* %2057
	%2058 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 2
	%2059 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2059, %Type_Info** %2058
	%2060 = getelementptr inbounds %..string, %..string* %2051, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2af, i64 0, i32 0), i64 2}, %..string* %2060
	%2061 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 3
	%2062 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	store %Type_Info* %2062, %Type_Info** %2061
	%2063 = getelementptr inbounds %..string, %..string* %2051, i64 3
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2b0, i64 0, i32 0), i64 8}, %..string* %2063
	%2064 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 4
	%2065 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2065, %Type_Info** %2064
	%2066 = getelementptr inbounds %..string, %..string* %2051, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2b1, i64 0, i32 0), i64 6}, %..string* %2066
	%2067 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 5
	%2068 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2068, %Type_Info** %2067
	%2069 = getelementptr inbounds %..string, %..string* %2051, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2b2, i64 0, i32 0), i64 7}, %..string* %2069
	%2070 = getelementptr inbounds %Type_Info*, %Type_Info** %2050, i64 6
	%2071 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	store %Type_Info* %2071, %Type_Info** %2070
	%2072 = getelementptr inbounds %..string, %..string* %2051, i64 6
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2b3, i64 0, i32 0), i64 9}, %..string* %2072
	%2073 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2048, i64 0, i32 0
	%2074 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2073, i64 0, i32 0
	store %Type_Info** %2050, %Type_Info*** %2074
	%2075 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2073, i64 0, i32 1
	store i64 7, i64* %2075
	%2076 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2073, i64 0, i32 2
	store i64 7, i64* %2076
	%2077 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2048, i64 0, i32 1
	%2078 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2077, i64 0, i32 0
	store %..string* %2051, %..string** %2078
	%2079 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2077, i64 0, i32 1
	store i64 7, i64* %2079
	%2080 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2077, i64 0, i32 2
	store i64 7, i64* %2080
	%2081 = getelementptr inbounds %Type_Info, %Type_Info* %2046, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2081
	%2082 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2083 = bitcast %Type_Info* %2082 to %Type_Info.Pointer*
	%2084 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2085 = bitcast %Type_Info* %2084 to %Type_Info*
	%2086 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2083, i64 0, i32 0
	store %Type_Info* %2085, %Type_Info** %2086
	%2087 = getelementptr inbounds %Type_Info, %Type_Info* %2082, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2087
	%2088 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	; Type_Info_Basic
	%2089 = bitcast %Type_Info* %2088 to %Type_Info.Integer*
	%2090 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2089, i64 0, i32 0
	store i64 1, i64* %2090
	%2091 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2089, i64 0, i32 1
	store i1 false, i1* %2091
	%2092 = getelementptr inbounds %Type_Info, %Type_Info* %2088, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2092
	%2093 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 100
	; Type_Info_Proc
	%2094 = bitcast %Type_Info* %2093 to %Type_Info.Procedure*
	%2095 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2094, i64 0, i32 0
	%2096 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2094, i64 0, i32 1
	%2097 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2094, i64 0, i32 2
	%2098 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2094, i64 0, i32 3
	%2099 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 101
	%2100 = bitcast %Type_Info* %2099 to %Type_Info*
	store %Type_Info* %2100, %Type_Info** %2095
	store i1 false, i1* %2097
	store i64 1, i64* %2098
	%2101 = getelementptr inbounds %Type_Info, %Type_Info* %2093, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2101
	%2102 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 101
	; Type_Info_Tuple
	%2103 = bitcast %Type_Info* %2102 to %Type_Info.Tuple*
	%2104 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2103, i64 0, i32 0
	%2105 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2104, i64 0, i32 4
	store i64 8, i64* %2105
	%2106 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 110
	%2107 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 110
	%2108 = getelementptr inbounds %Type_Info*, %Type_Info** %2106, i64 0
	%2109 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2109, %Type_Info** %2108
	%2110 = getelementptr inbounds %..string, %..string* %2107, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2b4, i64 0, i32 0), i64 6}, %..string* %2110
	%2111 = getelementptr inbounds %Type_Info*, %Type_Info** %2106, i64 1
	%2112 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2112, %Type_Info** %2111
	%2113 = getelementptr inbounds %..string, %..string* %2107, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2b5, i64 0, i32 0), i64 5}, %..string* %2113
	%2114 = getelementptr inbounds %Type_Info*, %Type_Info** %2106, i64 2
	%2115 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	store %Type_Info* %2115, %Type_Info** %2114
	%2116 = getelementptr inbounds %..string, %..string* %2107, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2b6, i64 0, i32 0), i64 6}, %..string* %2116
	%2117 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2104, i64 0, i32 0
	%2118 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2117, i64 0, i32 0
	store %Type_Info** %2106, %Type_Info*** %2118
	%2119 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2117, i64 0, i32 1
	store i64 3, i64* %2119
	%2120 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2117, i64 0, i32 2
	store i64 3, i64* %2120
	%2121 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2104, i64 0, i32 1
	%2122 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2121, i64 0, i32 0
	store %..string* %2107, %..string** %2122
	%2123 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2121, i64 0, i32 1
	store i64 3, i64* %2123
	%2124 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2121, i64 0, i32 2
	store i64 3, i64* %2124
	%2125 = getelementptr inbounds %Type_Info, %Type_Info* %2102, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2125
	%2126 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	; Type_Info_Pointer
	%2127 = bitcast %Type_Info* %2126 to %Type_Info.Pointer*
	%2128 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%2129 = bitcast %Type_Info* %2128 to %Type_Info*
	%2130 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2127, i64 0, i32 0
	store %Type_Info* %2129, %Type_Info** %2130
	%2131 = getelementptr inbounds %Type_Info, %Type_Info* %2126, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2131
	%2132 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	; Type_Info_Proc
	%2133 = bitcast %Type_Info* %2132 to %Type_Info.Procedure*
	%2134 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2133, i64 0, i32 0
	%2135 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2133, i64 0, i32 1
	%2136 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2133, i64 0, i32 2
	%2137 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2133, i64 0, i32 3
	%2138 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%2139 = bitcast %Type_Info* %2138 to %Type_Info*
	store %Type_Info* %2139, %Type_Info** %2134
	store i1 false, i1* %2136
	store i64 1, i64* %2137
	%2140 = getelementptr inbounds %Type_Info, %Type_Info* %2132, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2140
	%2141 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	; Type_Info_Tuple
	%2142 = bitcast %Type_Info* %2141 to %Type_Info.Tuple*
	%2143 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2142, i64 0, i32 0
	%2144 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2143, i64 0, i32 4
	store i64 8, i64* %2144
	%2145 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 113
	%2146 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 113
	%2147 = getelementptr inbounds %Type_Info*, %Type_Info** %2145, i64 0
	%2148 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2148, %Type_Info** %2147
	%2149 = getelementptr inbounds %..string, %..string* %2146, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2b7, i64 0, i32 0), i64 6}, %..string* %2149
	%2150 = getelementptr inbounds %Type_Info*, %Type_Info** %2145, i64 1
	%2151 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2151, %Type_Info** %2150
	%2152 = getelementptr inbounds %..string, %..string* %2146, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2b8, i64 0, i32 0), i64 9}, %..string* %2152
	%2153 = getelementptr inbounds %Type_Info*, %Type_Info** %2145, i64 2
	%2154 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	store %Type_Info* %2154, %Type_Info** %2153
	%2155 = getelementptr inbounds %..string, %..string* %2146, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2b9, i64 0, i32 0), i64 6}, %..string* %2155
	%2156 = getelementptr inbounds %Type_Info*, %Type_Info** %2145, i64 3
	%2157 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2157, %Type_Info** %2156
	%2158 = getelementptr inbounds %..string, %..string* %2146, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2ba, i64 0, i32 0), i64 7}, %..string* %2158
	%2159 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2143, i64 0, i32 0
	%2160 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2159, i64 0, i32 0
	store %Type_Info** %2145, %Type_Info*** %2160
	%2161 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2159, i64 0, i32 1
	store i64 4, i64* %2161
	%2162 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2159, i64 0, i32 2
	store i64 4, i64* %2162
	%2163 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2143, i64 0, i32 1
	%2164 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2163, i64 0, i32 0
	store %..string* %2146, %..string** %2164
	%2165 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2163, i64 0, i32 1
	store i64 4, i64* %2165
	%2166 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2163, i64 0, i32 2
	store i64 4, i64* %2166
	%2167 = getelementptr inbounds %Type_Info, %Type_Info* %2141, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2167
	%2168 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	; Type_Info_Pointer
	%2169 = bitcast %Type_Info* %2168 to %Type_Info.Pointer*
	%2170 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%2171 = bitcast %Type_Info* %2170 to %Type_Info*
	%2172 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2169, i64 0, i32 0
	store %Type_Info* %2171, %Type_Info** %2172
	%2173 = getelementptr inbounds %Type_Info, %Type_Info* %2168, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2173
	%2174 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2175 = bitcast %Type_Info* %2174 to %Type_Info.Pointer*
	%2176 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2177 = bitcast %Type_Info* %2176 to %Type_Info*
	%2178 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2175, i64 0, i32 0
	store %Type_Info* %2177, %Type_Info** %2178
	%2179 = getelementptr inbounds %Type_Info, %Type_Info* %2174, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2179
	%2180 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	; Type_Info_Proc
	%2181 = bitcast %Type_Info* %2180 to %Type_Info.Procedure*
	%2182 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2181, i64 0, i32 0
	%2183 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2181, i64 0, i32 1
	%2184 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2181, i64 0, i32 2
	%2185 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2181, i64 0, i32 3
	%2186 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	%2187 = bitcast %Type_Info* %2186 to %Type_Info*
	store %Type_Info* %2187, %Type_Info** %2182
	%2188 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 106
	%2189 = bitcast %Type_Info* %2188 to %Type_Info*
	store %Type_Info* %2189, %Type_Info** %2183
	store i1 false, i1* %2184
	store i64 1, i64* %2185
	%2190 = getelementptr inbounds %Type_Info, %Type_Info* %2180, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2190
	%2191 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	; Type_Info_Tuple
	%2192 = bitcast %Type_Info* %2191 to %Type_Info.Tuple*
	%2193 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2192, i64 0, i32 0
	%2194 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2193, i64 0, i32 4
	store i64 4, i64* %2194
	%2195 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 117
	%2196 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 117
	%2197 = getelementptr inbounds %Type_Info*, %Type_Info** %2195, i64 0
	%2198 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2198, %Type_Info** %2197
	%2199 = getelementptr inbounds %..string, %..string* %2196, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2bb, i64 0, i32 0), i64 4}, %..string* %2199
	%2200 = getelementptr inbounds %Type_Info*, %Type_Info** %2195, i64 1
	%2201 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2201, %Type_Info** %2200
	%2202 = getelementptr inbounds %..string, %..string* %2196, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2bc, i64 0, i32 0), i64 5}, %..string* %2202
	%2203 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2193, i64 0, i32 0
	%2204 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2203, i64 0, i32 0
	store %Type_Info** %2195, %Type_Info*** %2204
	%2205 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2203, i64 0, i32 1
	store i64 2, i64* %2205
	%2206 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2203, i64 0, i32 2
	store i64 2, i64* %2206
	%2207 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2193, i64 0, i32 1
	%2208 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2207, i64 0, i32 0
	store %..string* %2196, %..string** %2208
	%2209 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2207, i64 0, i32 1
	store i64 2, i64* %2209
	%2210 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2207, i64 0, i32 2
	store i64 2, i64* %2210
	%2211 = getelementptr inbounds %Type_Info, %Type_Info* %2191, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2211
	%2212 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 106
	; Type_Info_Tuple
	%2213 = bitcast %Type_Info* %2212 to %Type_Info.Tuple*
	%2214 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2213, i64 0, i32 0
	%2215 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2214, i64 0, i32 4
	store i64 8, i64* %2215
	%2216 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 119
	%2217 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 119
	%2218 = getelementptr inbounds %Type_Info*, %Type_Info** %2216, i64 0
	%2219 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2219, %Type_Info** %2218
	%2220 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2214, i64 0, i32 0
	%2221 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2220, i64 0, i32 0
	store %Type_Info** %2216, %Type_Info*** %2221
	%2222 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2220, i64 0, i32 1
	store i64 1, i64* %2222
	%2223 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2220, i64 0, i32 2
	store i64 1, i64* %2223
	%2224 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2214, i64 0, i32 1
	%2225 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2224, i64 0, i32 0
	store %..string* %2217, %..string** %2225
	%2226 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2224, i64 0, i32 1
	store i64 1, i64* %2226
	%2227 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2224, i64 0, i32 2
	store i64 1, i64* %2227
	%2228 = getelementptr inbounds %Type_Info, %Type_Info* %2212, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2228
	%2229 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2230 = bitcast %Type_Info* %2229 to %Type_Info.Pointer*
	%2231 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2232 = bitcast %Type_Info* %2231 to %Type_Info*
	%2233 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2230, i64 0, i32 0
	store %Type_Info* %2232, %Type_Info** %2233
	%2234 = getelementptr inbounds %Type_Info, %Type_Info* %2229, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2234
	%2235 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	; Type_Info_Proc
	%2236 = bitcast %Type_Info* %2235 to %Type_Info.Procedure*
	%2237 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2236, i64 0, i32 0
	%2238 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2236, i64 0, i32 1
	%2239 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2236, i64 0, i32 2
	%2240 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2236, i64 0, i32 3
	%2241 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%2242 = bitcast %Type_Info* %2241 to %Type_Info*
	store %Type_Info* %2242, %Type_Info** %2237
	store i1 false, i1* %2239
	store i64 1, i64* %2240
	%2243 = getelementptr inbounds %Type_Info, %Type_Info* %2235, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2243
	%2244 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Tuple
	%2245 = bitcast %Type_Info* %2244 to %Type_Info.Tuple*
	%2246 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2245, i64 0, i32 0
	%2247 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2246, i64 0, i32 4
	store i64 4, i64* %2247
	%2248 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 120
	%2249 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 120
	%2250 = getelementptr inbounds %Type_Info*, %Type_Info** %2248, i64 0
	%2251 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2251, %Type_Info** %2250
	%2252 = getelementptr inbounds %..string, %..string* %2249, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2bd, i64 0, i32 0), i64 4}, %..string* %2252
	%2253 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2246, i64 0, i32 0
	%2254 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2253, i64 0, i32 0
	store %Type_Info** %2248, %Type_Info*** %2254
	%2255 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2253, i64 0, i32 1
	store i64 1, i64* %2255
	%2256 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2253, i64 0, i32 2
	store i64 1, i64* %2256
	%2257 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2246, i64 0, i32 1
	%2258 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2257, i64 0, i32 0
	store %..string* %2249, %..string** %2258
	%2259 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2257, i64 0, i32 1
	store i64 1, i64* %2259
	%2260 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2257, i64 0, i32 2
	store i64 1, i64* %2260
	%2261 = getelementptr inbounds %Type_Info, %Type_Info* %2244, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2261
	%2262 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	; Type_Info_Proc
	%2263 = bitcast %Type_Info* %2262 to %Type_Info.Procedure*
	%2264 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2263, i64 0, i32 0
	%2265 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2263, i64 0, i32 1
	%2266 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2263, i64 0, i32 2
	%2267 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2263, i64 0, i32 3
	%2268 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	%2269 = bitcast %Type_Info* %2268 to %Type_Info*
	store %Type_Info* %2269, %Type_Info** %2264
	store i1 false, i1* %2266
	store i64 1, i64* %2267
	%2270 = getelementptr inbounds %Type_Info, %Type_Info* %2262, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2270
	%2271 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	; Type_Info_Tuple
	%2272 = bitcast %Type_Info* %2271 to %Type_Info.Tuple*
	%2273 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2272, i64 0, i32 0
	%2274 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2273, i64 0, i32 4
	store i64 4, i64* %2274
	%2275 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 121
	%2276 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 121
	%2277 = getelementptr inbounds %Type_Info*, %Type_Info** %2275, i64 0
	%2278 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2278, %Type_Info** %2277
	%2279 = getelementptr inbounds %..string, %..string* %2276, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2be, i64 0, i32 0), i64 7}, %..string* %2279
	%2280 = getelementptr inbounds %Type_Info*, %Type_Info** %2275, i64 1
	%2281 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2281, %Type_Info** %2280
	%2282 = getelementptr inbounds %..string, %..string* %2276, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2bf, i64 0, i32 0), i64 9}, %..string* %2282
	%2283 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2273, i64 0, i32 0
	%2284 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2283, i64 0, i32 0
	store %Type_Info** %2275, %Type_Info*** %2284
	%2285 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2283, i64 0, i32 1
	store i64 2, i64* %2285
	%2286 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2283, i64 0, i32 2
	store i64 2, i64* %2286
	%2287 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2273, i64 0, i32 1
	%2288 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2287, i64 0, i32 0
	store %..string* %2276, %..string** %2288
	%2289 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2287, i64 0, i32 1
	store i64 2, i64* %2289
	%2290 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2287, i64 0, i32 2
	store i64 2, i64* %2290
	%2291 = getelementptr inbounds %Type_Info, %Type_Info* %2271, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2291
	%2292 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	; Type_Info_Proc
	%2293 = bitcast %Type_Info* %2292 to %Type_Info.Procedure*
	%2294 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2293, i64 0, i32 0
	%2295 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2293, i64 0, i32 1
	%2296 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2293, i64 0, i32 2
	%2297 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2293, i64 0, i32 3
	%2298 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%2299 = bitcast %Type_Info* %2298 to %Type_Info*
	store %Type_Info* %2299, %Type_Info** %2294
	store i1 false, i1* %2296
	store i64 1, i64* %2297
	%2300 = getelementptr inbounds %Type_Info, %Type_Info* %2292, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2300
	%2301 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%2302 = bitcast %Type_Info* %2301 to %Type_Info.Tuple*
	%2303 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2302, i64 0, i32 0
	%2304 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2303, i64 0, i32 4
	store i64 4, i64* %2304
	%2305 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 123
	%2306 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 123
	%2307 = getelementptr inbounds %Type_Info*, %Type_Info** %2305, i64 0
	%2308 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2308, %Type_Info** %2307
	%2309 = getelementptr inbounds %..string, %..string* %2306, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2c0, i64 0, i32 0), i64 6}, %..string* %2309
	%2310 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2303, i64 0, i32 0
	%2311 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2310, i64 0, i32 0
	store %Type_Info** %2305, %Type_Info*** %2311
	%2312 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2310, i64 0, i32 1
	store i64 1, i64* %2312
	%2313 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2310, i64 0, i32 2
	store i64 1, i64* %2313
	%2314 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2303, i64 0, i32 1
	%2315 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2314, i64 0, i32 0
	store %..string* %2306, %..string** %2315
	%2316 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2314, i64 0, i32 1
	store i64 1, i64* %2316
	%2317 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2314, i64 0, i32 2
	store i64 1, i64* %2317
	%2318 = getelementptr inbounds %Type_Info, %Type_Info* %2301, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2318
	%2319 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 111
	; Type_Info_Proc
	%2320 = bitcast %Type_Info* %2319 to %Type_Info.Procedure*
	%2321 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2320, i64 0, i32 0
	%2322 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2320, i64 0, i32 1
	%2323 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2320, i64 0, i32 2
	%2324 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2320, i64 0, i32 3
	%2325 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%2326 = bitcast %Type_Info* %2325 to %Type_Info*
	store %Type_Info* %2326, %Type_Info** %2321
	%2327 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%2328 = bitcast %Type_Info* %2327 to %Type_Info*
	store %Type_Info* %2328, %Type_Info** %2322
	store i1 false, i1* %2323
	store i64 1, i64* %2324
	%2329 = getelementptr inbounds %Type_Info, %Type_Info* %2319, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2329
	%2330 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Tuple
	%2331 = bitcast %Type_Info* %2330 to %Type_Info.Tuple*
	%2332 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2331, i64 0, i32 0
	%2333 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2332, i64 0, i32 4
	store i64 4, i64* %2333
	%2334 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 124
	%2335 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 124
	%2336 = getelementptr inbounds %Type_Info*, %Type_Info** %2334, i64 0
	%2337 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2337, %Type_Info** %2336
	%2338 = getelementptr inbounds %..string, %..string* %2335, i64 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$2c1, i64 0, i32 0), i64 11}, %..string* %2338
	%2339 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2332, i64 0, i32 0
	%2340 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2339, i64 0, i32 0
	store %Type_Info** %2334, %Type_Info*** %2340
	%2341 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2339, i64 0, i32 1
	store i64 1, i64* %2341
	%2342 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2339, i64 0, i32 2
	store i64 1, i64* %2342
	%2343 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2332, i64 0, i32 1
	%2344 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2343, i64 0, i32 0
	store %..string* %2335, %..string** %2344
	%2345 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2343, i64 0, i32 1
	store i64 1, i64* %2345
	%2346 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2343, i64 0, i32 2
	store i64 1, i64* %2346
	%2347 = getelementptr inbounds %Type_Info, %Type_Info* %2330, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2347
	%2348 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%2349 = bitcast %Type_Info* %2348 to %Type_Info.Tuple*
	%2350 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2349, i64 0, i32 0
	%2351 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2350, i64 0, i32 4
	store i64 4, i64* %2351
	%2352 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 125
	%2353 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 125
	%2354 = getelementptr inbounds %Type_Info*, %Type_Info** %2352, i64 0
	%2355 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2355, %Type_Info** %2354
	%2356 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2350, i64 0, i32 0
	%2357 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2356, i64 0, i32 0
	store %Type_Info** %2352, %Type_Info*** %2357
	%2358 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2356, i64 0, i32 1
	store i64 1, i64* %2358
	%2359 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2356, i64 0, i32 2
	store i64 1, i64* %2359
	%2360 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2350, i64 0, i32 1
	%2361 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2360, i64 0, i32 0
	store %..string* %2353, %..string** %2361
	%2362 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2360, i64 0, i32 1
	store i64 1, i64* %2362
	%2363 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2360, i64 0, i32 2
	store i64 1, i64* %2363
	%2364 = getelementptr inbounds %Type_Info, %Type_Info* %2348, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2364
	%2365 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 112
	; Type_Info_Proc
	%2366 = bitcast %Type_Info* %2365 to %Type_Info.Procedure*
	%2367 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2366, i64 0, i32 0
	%2368 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2366, i64 0, i32 1
	%2369 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2366, i64 0, i32 2
	%2370 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2366, i64 0, i32 3
	%2371 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	%2372 = bitcast %Type_Info* %2371 to %Type_Info*
	store %Type_Info* %2372, %Type_Info** %2367
	store i1 false, i1* %2369
	store i64 1, i64* %2370
	%2373 = getelementptr inbounds %Type_Info, %Type_Info* %2365, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2373
	%2374 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	; Type_Info_Tuple
	%2375 = bitcast %Type_Info* %2374 to %Type_Info.Tuple*
	%2376 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2375, i64 0, i32 0
	%2377 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2376, i64 0, i32 4
	store i64 8, i64* %2377
	%2378 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 126
	%2379 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 126
	%2380 = getelementptr inbounds %Type_Info*, %Type_Info** %2378, i64 0
	%2381 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2381, %Type_Info** %2380
	%2382 = getelementptr inbounds %..string, %..string* %2379, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2c2, i64 0, i32 0), i64 6}, %..string* %2382
	%2383 = getelementptr inbounds %Type_Info*, %Type_Info** %2378, i64 1
	%2384 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2384, %Type_Info** %2383
	%2385 = getelementptr inbounds %..string, %..string* %2379, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2c3, i64 0, i32 0), i64 5}, %..string* %2385
	%2386 = getelementptr inbounds %Type_Info*, %Type_Info** %2378, i64 2
	%2387 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	store %Type_Info* %2387, %Type_Info** %2386
	%2388 = getelementptr inbounds %..string, %..string* %2379, i64 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2c4, i64 0, i32 0), i64 3}, %..string* %2388
	%2389 = getelementptr inbounds %Type_Info*, %Type_Info** %2378, i64 3
	%2390 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	store %Type_Info* %2390, %Type_Info** %2389
	%2391 = getelementptr inbounds %..string, %..string* %2379, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2c5, i64 0, i32 0), i64 6}, %..string* %2391
	%2392 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2376, i64 0, i32 0
	%2393 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2392, i64 0, i32 0
	store %Type_Info** %2378, %Type_Info*** %2393
	%2394 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2392, i64 0, i32 1
	store i64 4, i64* %2394
	%2395 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2392, i64 0, i32 2
	store i64 4, i64* %2395
	%2396 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2376, i64 0, i32 1
	%2397 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2396, i64 0, i32 0
	store %..string* %2379, %..string** %2397
	%2398 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2396, i64 0, i32 1
	store i64 4, i64* %2398
	%2399 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2396, i64 0, i32 2
	store i64 4, i64* %2399
	%2400 = getelementptr inbounds %Type_Info, %Type_Info* %2374, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2400
	%2401 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	; Type_Info_Pointer
	%2402 = bitcast %Type_Info* %2401 to %Type_Info.Pointer*
	%2403 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%2404 = bitcast %Type_Info* %2403 to %Type_Info*
	%2405 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2402, i64 0, i32 0
	store %Type_Info* %2404, %Type_Info** %2405
	%2406 = getelementptr inbounds %Type_Info, %Type_Info* %2401, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2406
	%2407 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2408 = bitcast %Type_Info* %2407 to %Type_Info.Pointer*
	%2409 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2410 = bitcast %Type_Info* %2409 to %Type_Info*
	%2411 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2408, i64 0, i32 0
	store %Type_Info* %2410, %Type_Info** %2411
	%2412 = getelementptr inbounds %Type_Info, %Type_Info* %2407, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2412
	%2413 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	; Type_Info_Pointer
	%2414 = bitcast %Type_Info* %2413 to %Type_Info.Pointer*
	%2415 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%2416 = bitcast %Type_Info* %2415 to %Type_Info*
	%2417 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2414, i64 0, i32 0
	store %Type_Info* %2416, %Type_Info** %2417
	%2418 = getelementptr inbounds %Type_Info, %Type_Info* %2413, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2418
	%2419 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	; Type_Info_Proc
	%2420 = bitcast %Type_Info* %2419 to %Type_Info.Procedure*
	%2421 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 0
	%2422 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 1
	%2423 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 2
	%2424 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 3
	%2425 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	%2426 = bitcast %Type_Info* %2425 to %Type_Info*
	store %Type_Info* %2426, %Type_Info** %2421
	store i1 false, i1* %2423
	store i64 1, i64* %2424
	%2427 = getelementptr inbounds %Type_Info, %Type_Info* %2419, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2427
	%2428 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	; Type_Info_Tuple
	%2429 = bitcast %Type_Info* %2428 to %Type_Info.Tuple*
	%2430 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2429, i64 0, i32 0
	%2431 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2430, i64 0, i32 4
	store i64 4, i64* %2431
	%2432 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 130
	%2433 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 130
	%2434 = getelementptr inbounds %Type_Info*, %Type_Info** %2432, i64 0
	%2435 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2435, %Type_Info** %2434
	%2436 = getelementptr inbounds %..string, %..string* %2433, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2c6, i64 0, i32 0), i64 7}, %..string* %2436
	%2437 = getelementptr inbounds %Type_Info*, %Type_Info** %2432, i64 1
	%2438 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2438, %Type_Info** %2437
	%2439 = getelementptr inbounds %..string, %..string* %2433, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2c7, i64 0, i32 0), i64 6}, %..string* %2439
	%2440 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2430, i64 0, i32 0
	%2441 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2440, i64 0, i32 0
	store %Type_Info** %2432, %Type_Info*** %2441
	%2442 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2440, i64 0, i32 1
	store i64 2, i64* %2442
	%2443 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2440, i64 0, i32 2
	store i64 2, i64* %2443
	%2444 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2430, i64 0, i32 1
	%2445 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2444, i64 0, i32 0
	store %..string* %2433, %..string** %2445
	%2446 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2444, i64 0, i32 1
	store i64 2, i64* %2446
	%2447 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2444, i64 0, i32 2
	store i64 2, i64* %2447
	%2448 = getelementptr inbounds %Type_Info, %Type_Info* %2428, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2448
	%2449 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 117
	; Type_Info_Proc
	%2450 = bitcast %Type_Info* %2449 to %Type_Info.Procedure*
	%2451 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2450, i64 0, i32 0
	%2452 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2450, i64 0, i32 1
	%2453 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2450, i64 0, i32 2
	%2454 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2450, i64 0, i32 3
	%2455 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%2456 = bitcast %Type_Info* %2455 to %Type_Info*
	store %Type_Info* %2456, %Type_Info** %2452
	store i1 false, i1* %2453
	store i64 1, i64* %2454
	%2457 = getelementptr inbounds %Type_Info, %Type_Info* %2449, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2457
	%2458 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%2459 = bitcast %Type_Info* %2458 to %Type_Info.Tuple*
	%2460 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2459, i64 0, i32 0
	%2461 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2460, i64 0, i32 4
	store i64 4, i64* %2461
	%2462 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 132
	%2463 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 132
	%2464 = getelementptr inbounds %Type_Info*, %Type_Info** %2462, i64 0
	%2465 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2465, %Type_Info** %2464
	%2466 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2460, i64 0, i32 0
	%2467 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2466, i64 0, i32 0
	store %Type_Info** %2462, %Type_Info*** %2467
	%2468 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2466, i64 0, i32 1
	store i64 1, i64* %2468
	%2469 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2466, i64 0, i32 2
	store i64 1, i64* %2469
	%2470 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2460, i64 0, i32 1
	%2471 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2470, i64 0, i32 0
	store %..string* %2463, %..string** %2471
	%2472 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2470, i64 0, i32 1
	store i64 1, i64* %2472
	%2473 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2470, i64 0, i32 2
	store i64 1, i64* %2473
	%2474 = getelementptr inbounds %Type_Info, %Type_Info* %2458, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2474
	%2475 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	; Type_Info_Proc
	%2476 = bitcast %Type_Info* %2475 to %Type_Info.Procedure*
	%2477 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2476, i64 0, i32 0
	%2478 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2476, i64 0, i32 1
	%2479 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2476, i64 0, i32 2
	%2480 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2476, i64 0, i32 3
	%2481 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%2482 = bitcast %Type_Info* %2481 to %Type_Info*
	store %Type_Info* %2482, %Type_Info** %2477
	store i1 false, i1* %2479
	store i64 1, i64* %2480
	%2483 = getelementptr inbounds %Type_Info, %Type_Info* %2475, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2483
	%2484 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%2485 = bitcast %Type_Info* %2484 to %Type_Info.Tuple*
	%2486 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2485, i64 0, i32 0
	%2487 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2486, i64 0, i32 4
	store i64 4, i64* %2487
	%2488 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 133
	%2489 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 133
	%2490 = getelementptr inbounds %Type_Info*, %Type_Info** %2488, i64 0
	%2491 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2491, %Type_Info** %2490
	%2492 = getelementptr inbounds %..string, %..string* %2489, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2c8, i64 0, i32 0), i64 7}, %..string* %2492
	%2493 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2486, i64 0, i32 0
	%2494 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2493, i64 0, i32 0
	store %Type_Info** %2488, %Type_Info*** %2494
	%2495 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2493, i64 0, i32 1
	store i64 1, i64* %2495
	%2496 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2493, i64 0, i32 2
	store i64 1, i64* %2496
	%2497 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2486, i64 0, i32 1
	%2498 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2497, i64 0, i32 0
	store %..string* %2489, %..string** %2498
	%2499 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2497, i64 0, i32 1
	store i64 1, i64* %2499
	%2500 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2497, i64 0, i32 2
	store i64 1, i64* %2500
	%2501 = getelementptr inbounds %Type_Info, %Type_Info* %2484, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2501
	%2502 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	; Type_Info_Proc
	%2503 = bitcast %Type_Info* %2502 to %Type_Info.Procedure*
	%2504 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2503, i64 0, i32 0
	%2505 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2503, i64 0, i32 1
	%2506 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2503, i64 0, i32 2
	%2507 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2503, i64 0, i32 3
	%2508 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%2509 = bitcast %Type_Info* %2508 to %Type_Info*
	store %Type_Info* %2509, %Type_Info** %2504
	store i1 false, i1* %2506
	store i64 1, i64* %2507
	%2510 = getelementptr inbounds %Type_Info, %Type_Info* %2502, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2510
	%2511 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Tuple
	%2512 = bitcast %Type_Info* %2511 to %Type_Info.Tuple*
	%2513 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2512, i64 0, i32 0
	%2514 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2513, i64 0, i32 4
	store i64 4, i64* %2514
	%2515 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 134
	%2516 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 134
	%2517 = getelementptr inbounds %Type_Info*, %Type_Info** %2515, i64 0
	%2518 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2518, %Type_Info** %2517
	%2519 = getelementptr inbounds %..string, %..string* %2516, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2c9, i64 0, i32 0), i64 7}, %..string* %2519
	%2520 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2513, i64 0, i32 0
	%2521 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2520, i64 0, i32 0
	store %Type_Info** %2515, %Type_Info*** %2521
	%2522 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2520, i64 0, i32 1
	store i64 1, i64* %2522
	%2523 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2520, i64 0, i32 2
	store i64 1, i64* %2523
	%2524 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2513, i64 0, i32 1
	%2525 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2524, i64 0, i32 0
	store %..string* %2516, %..string** %2525
	%2526 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2524, i64 0, i32 1
	store i64 1, i64* %2526
	%2527 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2524, i64 0, i32 2
	store i64 1, i64* %2527
	%2528 = getelementptr inbounds %Type_Info, %Type_Info* %2511, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2528
	%2529 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	; Type_Info_Proc
	%2530 = bitcast %Type_Info* %2529 to %Type_Info.Procedure*
	%2531 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2530, i64 0, i32 0
	%2532 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2530, i64 0, i32 1
	%2533 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2530, i64 0, i32 2
	%2534 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2530, i64 0, i32 3
	%2535 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%2536 = bitcast %Type_Info* %2535 to %Type_Info*
	store %Type_Info* %2536, %Type_Info** %2531
	store i1 false, i1* %2533
	store i64 1, i64* %2534
	%2537 = getelementptr inbounds %Type_Info, %Type_Info* %2529, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2537
	%2538 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Tuple
	%2539 = bitcast %Type_Info* %2538 to %Type_Info.Tuple*
	%2540 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2539, i64 0, i32 0
	%2541 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2540, i64 0, i32 4
	store i64 4, i64* %2541
	%2542 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 135
	%2543 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 135
	%2544 = getelementptr inbounds %Type_Info*, %Type_Info** %2542, i64 0
	%2545 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2545, %Type_Info** %2544
	%2546 = getelementptr inbounds %..string, %..string* %2543, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2ca, i64 0, i32 0), i64 7}, %..string* %2546
	%2547 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2540, i64 0, i32 0
	%2548 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2547, i64 0, i32 0
	store %Type_Info** %2542, %Type_Info*** %2548
	%2549 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2547, i64 0, i32 1
	store i64 1, i64* %2549
	%2550 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2547, i64 0, i32 2
	store i64 1, i64* %2550
	%2551 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2540, i64 0, i32 1
	%2552 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2551, i64 0, i32 0
	store %..string* %2543, %..string** %2552
	%2553 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2551, i64 0, i32 1
	store i64 1, i64* %2553
	%2554 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2551, i64 0, i32 2
	store i64 1, i64* %2554
	%2555 = getelementptr inbounds %Type_Info, %Type_Info* %2538, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2555
	%2556 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	; Type_Info_Proc
	%2557 = bitcast %Type_Info* %2556 to %Type_Info.Procedure*
	%2558 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2557, i64 0, i32 0
	%2559 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2557, i64 0, i32 1
	%2560 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2557, i64 0, i32 2
	%2561 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2557, i64 0, i32 3
	%2562 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	%2563 = bitcast %Type_Info* %2562 to %Type_Info*
	store %Type_Info* %2563, %Type_Info** %2558
	store i1 false, i1* %2560
	store i64 1, i64* %2561
	%2564 = getelementptr inbounds %Type_Info, %Type_Info* %2556, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2564
	%2565 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	; Type_Info_Tuple
	%2566 = bitcast %Type_Info* %2565 to %Type_Info.Tuple*
	%2567 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2566, i64 0, i32 0
	%2568 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2567, i64 0, i32 4
	store i64 4, i64* %2568
	%2569 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 136
	%2570 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 136
	%2571 = getelementptr inbounds %Type_Info*, %Type_Info** %2569, i64 0
	%2572 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2572, %Type_Info** %2571
	%2573 = getelementptr inbounds %..string, %..string* %2570, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2cb, i64 0, i32 0), i64 3}, %..string* %2573
	%2574 = getelementptr inbounds %Type_Info*, %Type_Info** %2569, i64 1
	%2575 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2575, %Type_Info** %2574
	%2576 = getelementptr inbounds %..string, %..string* %2570, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2cc, i64 0, i32 0), i64 2}, %..string* %2576
	%2577 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2567, i64 0, i32 0
	%2578 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2577, i64 0, i32 0
	store %Type_Info** %2569, %Type_Info*** %2578
	%2579 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2577, i64 0, i32 1
	store i64 2, i64* %2579
	%2580 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2577, i64 0, i32 2
	store i64 2, i64* %2580
	%2581 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2567, i64 0, i32 1
	%2582 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2581, i64 0, i32 0
	store %..string* %2570, %..string** %2582
	%2583 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2581, i64 0, i32 1
	store i64 2, i64* %2583
	%2584 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2581, i64 0, i32 2
	store i64 2, i64* %2584
	%2585 = getelementptr inbounds %Type_Info, %Type_Info* %2565, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2585
	%2586 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 118
	; Type_Info_Proc
	%2587 = bitcast %Type_Info* %2586 to %Type_Info.Procedure*
	%2588 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2587, i64 0, i32 0
	%2589 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2587, i64 0, i32 1
	%2590 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2587, i64 0, i32 2
	%2591 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2587, i64 0, i32 3
	%2592 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 119
	%2593 = bitcast %Type_Info* %2592 to %Type_Info*
	store %Type_Info* %2593, %Type_Info** %2588
	store i1 false, i1* %2590
	store i64 1, i64* %2591
	%2594 = getelementptr inbounds %Type_Info, %Type_Info* %2586, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2594
	%2595 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 119
	; Type_Info_Tuple
	%2596 = bitcast %Type_Info* %2595 to %Type_Info.Tuple*
	%2597 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2596, i64 0, i32 0
	%2598 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2597, i64 0, i32 4
	store i64 4, i64* %2598
	%2599 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 138
	%2600 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 138
	%2601 = getelementptr inbounds %Type_Info*, %Type_Info** %2599, i64 0
	%2602 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2602, %Type_Info** %2601
	%2603 = getelementptr inbounds %..string, %..string* %2600, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2cd, i64 0, i32 0), i64 3}, %..string* %2603
	%2604 = getelementptr inbounds %Type_Info*, %Type_Info** %2599, i64 1
	%2605 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2605, %Type_Info** %2604
	%2606 = getelementptr inbounds %..string, %..string* %2600, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2ce, i64 0, i32 0), i64 2}, %..string* %2606
	%2607 = getelementptr inbounds %Type_Info*, %Type_Info** %2599, i64 2
	%2608 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2608, %Type_Info** %2607
	%2609 = getelementptr inbounds %..string, %..string* %2600, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2cf, i64 0, i32 0), i64 2}, %..string* %2609
	%2610 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2597, i64 0, i32 0
	%2611 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2610, i64 0, i32 0
	store %Type_Info** %2599, %Type_Info*** %2611
	%2612 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2610, i64 0, i32 1
	store i64 3, i64* %2612
	%2613 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2610, i64 0, i32 2
	store i64 3, i64* %2613
	%2614 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2597, i64 0, i32 1
	%2615 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2614, i64 0, i32 0
	store %..string* %2600, %..string** %2615
	%2616 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2614, i64 0, i32 1
	store i64 3, i64* %2616
	%2617 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2614, i64 0, i32 2
	store i64 3, i64* %2617
	%2618 = getelementptr inbounds %Type_Info, %Type_Info* %2595, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2618
	%2619 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 120
	; Type_Info_Proc
	%2620 = bitcast %Type_Info* %2619 to %Type_Info.Procedure*
	%2621 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2620, i64 0, i32 0
	%2622 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2620, i64 0, i32 1
	%2623 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2620, i64 0, i32 2
	%2624 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2620, i64 0, i32 3
	%2625 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 121
	%2626 = bitcast %Type_Info* %2625 to %Type_Info*
	store %Type_Info* %2626, %Type_Info** %2621
	store i1 false, i1* %2623
	store i64 1, i64* %2624
	%2627 = getelementptr inbounds %Type_Info, %Type_Info* %2619, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2627
	%2628 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 121
	; Type_Info_Tuple
	%2629 = bitcast %Type_Info* %2628 to %Type_Info.Tuple*
	%2630 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2629, i64 0, i32 0
	%2631 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2630, i64 0, i32 4
	store i64 4, i64* %2631
	%2632 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 141
	%2633 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 141
	%2634 = getelementptr inbounds %Type_Info*, %Type_Info** %2632, i64 0
	%2635 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2635, %Type_Info** %2634
	%2636 = getelementptr inbounds %..string, %..string* %2633, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2d0, i64 0, i32 0), i64 3}, %..string* %2636
	%2637 = getelementptr inbounds %Type_Info*, %Type_Info** %2632, i64 1
	%2638 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2638, %Type_Info** %2637
	%2639 = getelementptr inbounds %..string, %..string* %2633, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d1, i64 0, i32 0), i64 2}, %..string* %2639
	%2640 = getelementptr inbounds %Type_Info*, %Type_Info** %2632, i64 2
	%2641 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2641, %Type_Info** %2640
	%2642 = getelementptr inbounds %..string, %..string* %2633, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d2, i64 0, i32 0), i64 2}, %..string* %2642
	%2643 = getelementptr inbounds %Type_Info*, %Type_Info** %2632, i64 3
	%2644 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2644, %Type_Info** %2643
	%2645 = getelementptr inbounds %..string, %..string* %2633, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d3, i64 0, i32 0), i64 2}, %..string* %2645
	%2646 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2630, i64 0, i32 0
	%2647 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2646, i64 0, i32 0
	store %Type_Info** %2632, %Type_Info*** %2647
	%2648 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2646, i64 0, i32 1
	store i64 4, i64* %2648
	%2649 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2646, i64 0, i32 2
	store i64 4, i64* %2649
	%2650 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2630, i64 0, i32 1
	%2651 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2650, i64 0, i32 0
	store %..string* %2633, %..string** %2651
	%2652 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2650, i64 0, i32 1
	store i64 4, i64* %2652
	%2653 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2650, i64 0, i32 2
	store i64 4, i64* %2653
	%2654 = getelementptr inbounds %Type_Info, %Type_Info* %2628, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2654
	%2655 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 122
	; Type_Info_Proc
	%2656 = bitcast %Type_Info* %2655 to %Type_Info.Procedure*
	%2657 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2656, i64 0, i32 0
	%2658 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2656, i64 0, i32 1
	%2659 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2656, i64 0, i32 2
	%2660 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2656, i64 0, i32 3
	%2661 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 123
	%2662 = bitcast %Type_Info* %2661 to %Type_Info*
	store %Type_Info* %2662, %Type_Info** %2657
	store i1 false, i1* %2659
	store i64 1, i64* %2660
	%2663 = getelementptr inbounds %Type_Info, %Type_Info* %2655, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2663
	%2664 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 123
	; Type_Info_Tuple
	%2665 = bitcast %Type_Info* %2664 to %Type_Info.Tuple*
	%2666 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2665, i64 0, i32 0
	%2667 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2666, i64 0, i32 4
	store i64 4, i64* %2667
	%2668 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 145
	%2669 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 145
	%2670 = getelementptr inbounds %Type_Info*, %Type_Info** %2668, i64 0
	%2671 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2671, %Type_Info** %2670
	%2672 = getelementptr inbounds %..string, %..string* %2669, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2d4, i64 0, i32 0), i64 3}, %..string* %2672
	%2673 = getelementptr inbounds %Type_Info*, %Type_Info** %2668, i64 1
	%2674 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2674, %Type_Info** %2673
	%2675 = getelementptr inbounds %..string, %..string* %2669, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d5, i64 0, i32 0), i64 2}, %..string* %2675
	%2676 = getelementptr inbounds %Type_Info*, %Type_Info** %2668, i64 2
	%2677 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2677, %Type_Info** %2676
	%2678 = getelementptr inbounds %..string, %..string* %2669, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d6, i64 0, i32 0), i64 2}, %..string* %2678
	%2679 = getelementptr inbounds %Type_Info*, %Type_Info** %2668, i64 3
	%2680 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2680, %Type_Info** %2679
	%2681 = getelementptr inbounds %..string, %..string* %2669, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d7, i64 0, i32 0), i64 2}, %..string* %2681
	%2682 = getelementptr inbounds %Type_Info*, %Type_Info** %2668, i64 4
	%2683 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2683, %Type_Info** %2682
	%2684 = getelementptr inbounds %..string, %..string* %2669, i64 4
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2d8, i64 0, i32 0), i64 2}, %..string* %2684
	%2685 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2666, i64 0, i32 0
	%2686 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2685, i64 0, i32 0
	store %Type_Info** %2668, %Type_Info*** %2686
	%2687 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2685, i64 0, i32 1
	store i64 5, i64* %2687
	%2688 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2685, i64 0, i32 2
	store i64 5, i64* %2688
	%2689 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2666, i64 0, i32 1
	%2690 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2689, i64 0, i32 0
	store %..string* %2669, %..string** %2690
	%2691 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2689, i64 0, i32 1
	store i64 5, i64* %2691
	%2692 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2689, i64 0, i32 2
	store i64 5, i64* %2692
	%2693 = getelementptr inbounds %Type_Info, %Type_Info* %2664, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2693
	%2694 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	; Type_Info_Proc
	%2695 = bitcast %Type_Info* %2694 to %Type_Info.Procedure*
	%2696 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2695, i64 0, i32 0
	%2697 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2695, i64 0, i32 1
	%2698 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2695, i64 0, i32 2
	%2699 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2695, i64 0, i32 3
	%2700 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 125
	%2701 = bitcast %Type_Info* %2700 to %Type_Info*
	store %Type_Info* %2701, %Type_Info** %2696
	store i1 false, i1* %2698
	store i64 1, i64* %2699
	%2702 = getelementptr inbounds %Type_Info, %Type_Info* %2694, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2702
	%2703 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 125
	; Type_Info_Tuple
	%2704 = bitcast %Type_Info* %2703 to %Type_Info.Tuple*
	%2705 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2704, i64 0, i32 0
	%2706 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2705, i64 0, i32 4
	store i64 4, i64* %2706
	%2707 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 150
	%2708 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 150
	%2709 = getelementptr inbounds %Type_Info*, %Type_Info** %2707, i64 0
	%2710 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2710, %Type_Info** %2709
	%2711 = getelementptr inbounds %..string, %..string* %2708, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2d9, i64 0, i32 0), i64 3}, %..string* %2711
	%2712 = getelementptr inbounds %Type_Info*, %Type_Info** %2707, i64 1
	%2713 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2713, %Type_Info** %2712
	%2714 = getelementptr inbounds %..string, %..string* %2708, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2da, i64 0, i32 0), i64 2}, %..string* %2714
	%2715 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2705, i64 0, i32 0
	%2716 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2715, i64 0, i32 0
	store %Type_Info** %2707, %Type_Info*** %2716
	%2717 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2715, i64 0, i32 1
	store i64 2, i64* %2717
	%2718 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2715, i64 0, i32 2
	store i64 2, i64* %2718
	%2719 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2705, i64 0, i32 1
	%2720 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2719, i64 0, i32 0
	store %..string* %2708, %..string** %2720
	%2721 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2719, i64 0, i32 1
	store i64 2, i64* %2721
	%2722 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2719, i64 0, i32 2
	store i64 2, i64* %2722
	%2723 = getelementptr inbounds %Type_Info, %Type_Info* %2703, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2723
	%2724 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 126
	; Type_Info_Proc
	%2725 = bitcast %Type_Info* %2724 to %Type_Info.Procedure*
	%2726 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2725, i64 0, i32 0
	%2727 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2725, i64 0, i32 1
	%2728 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2725, i64 0, i32 2
	%2729 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2725, i64 0, i32 3
	%2730 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 127
	%2731 = bitcast %Type_Info* %2730 to %Type_Info*
	store %Type_Info* %2731, %Type_Info** %2726
	store i1 false, i1* %2728
	store i64 1, i64* %2729
	%2732 = getelementptr inbounds %Type_Info, %Type_Info* %2724, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2732
	%2733 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 127
	; Type_Info_Tuple
	%2734 = bitcast %Type_Info* %2733 to %Type_Info.Tuple*
	%2735 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2734, i64 0, i32 0
	%2736 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2735, i64 0, i32 4
	store i64 4, i64* %2736
	%2737 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 152
	%2738 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 152
	%2739 = getelementptr inbounds %Type_Info*, %Type_Info** %2737, i64 0
	%2740 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2740, %Type_Info** %2739
	%2741 = getelementptr inbounds %..string, %..string* %2738, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2db, i64 0, i32 0), i64 3}, %..string* %2741
	%2742 = getelementptr inbounds %Type_Info*, %Type_Info** %2737, i64 1
	%2743 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2743, %Type_Info** %2742
	%2744 = getelementptr inbounds %..string, %..string* %2738, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2dc, i64 0, i32 0), i64 2}, %..string* %2744
	%2745 = getelementptr inbounds %Type_Info*, %Type_Info** %2737, i64 2
	%2746 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2746, %Type_Info** %2745
	%2747 = getelementptr inbounds %..string, %..string* %2738, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2dd, i64 0, i32 0), i64 2}, %..string* %2747
	%2748 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2735, i64 0, i32 0
	%2749 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2748, i64 0, i32 0
	store %Type_Info** %2737, %Type_Info*** %2749
	%2750 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2748, i64 0, i32 1
	store i64 3, i64* %2750
	%2751 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2748, i64 0, i32 2
	store i64 3, i64* %2751
	%2752 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2735, i64 0, i32 1
	%2753 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2752, i64 0, i32 0
	store %..string* %2738, %..string** %2753
	%2754 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2752, i64 0, i32 1
	store i64 3, i64* %2754
	%2755 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2752, i64 0, i32 2
	store i64 3, i64* %2755
	%2756 = getelementptr inbounds %Type_Info, %Type_Info* %2733, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2756
	%2757 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 128
	; Type_Info_Proc
	%2758 = bitcast %Type_Info* %2757 to %Type_Info.Procedure*
	%2759 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2758, i64 0, i32 0
	%2760 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2758, i64 0, i32 1
	%2761 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2758, i64 0, i32 2
	%2762 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2758, i64 0, i32 3
	%2763 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	%2764 = bitcast %Type_Info* %2763 to %Type_Info*
	store %Type_Info* %2764, %Type_Info** %2759
	store i1 false, i1* %2761
	store i64 1, i64* %2762
	%2765 = getelementptr inbounds %Type_Info, %Type_Info* %2757, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2765
	%2766 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	; Type_Info_Tuple
	%2767 = bitcast %Type_Info* %2766 to %Type_Info.Tuple*
	%2768 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2767, i64 0, i32 0
	%2769 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2768, i64 0, i32 4
	store i64 4, i64* %2769
	%2770 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 155
	%2771 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 155
	%2772 = getelementptr inbounds %Type_Info*, %Type_Info** %2770, i64 0
	%2773 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2773, %Type_Info** %2772
	%2774 = getelementptr inbounds %..string, %..string* %2771, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2de, i64 0, i32 0), i64 3}, %..string* %2774
	%2775 = getelementptr inbounds %Type_Info*, %Type_Info** %2770, i64 1
	%2776 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2776, %Type_Info** %2775
	%2777 = getelementptr inbounds %..string, %..string* %2771, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2df, i64 0, i32 0), i64 2}, %..string* %2777
	%2778 = getelementptr inbounds %Type_Info*, %Type_Info** %2770, i64 2
	%2779 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2779, %Type_Info** %2778
	%2780 = getelementptr inbounds %..string, %..string* %2771, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2e0, i64 0, i32 0), i64 2}, %..string* %2780
	%2781 = getelementptr inbounds %Type_Info*, %Type_Info** %2770, i64 3
	%2782 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2782, %Type_Info** %2781
	%2783 = getelementptr inbounds %..string, %..string* %2771, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2e1, i64 0, i32 0), i64 2}, %..string* %2783
	%2784 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2768, i64 0, i32 0
	%2785 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2784, i64 0, i32 0
	store %Type_Info** %2770, %Type_Info*** %2785
	%2786 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2784, i64 0, i32 1
	store i64 4, i64* %2786
	%2787 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2784, i64 0, i32 2
	store i64 4, i64* %2787
	%2788 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2768, i64 0, i32 1
	%2789 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2788, i64 0, i32 0
	store %..string* %2771, %..string** %2789
	%2790 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2788, i64 0, i32 1
	store i64 4, i64* %2790
	%2791 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2788, i64 0, i32 2
	store i64 4, i64* %2791
	%2792 = getelementptr inbounds %Type_Info, %Type_Info* %2766, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2792
	%2793 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	; Type_Info_Proc
	%2794 = bitcast %Type_Info* %2793 to %Type_Info.Procedure*
	%2795 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2794, i64 0, i32 0
	%2796 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2794, i64 0, i32 1
	%2797 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2794, i64 0, i32 2
	%2798 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2794, i64 0, i32 3
	%2799 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%2800 = bitcast %Type_Info* %2799 to %Type_Info*
	store %Type_Info* %2800, %Type_Info** %2795
	store i1 false, i1* %2797
	store i64 1, i64* %2798
	%2801 = getelementptr inbounds %Type_Info, %Type_Info* %2793, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2801
	%2802 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	; Type_Info_Tuple
	%2803 = bitcast %Type_Info* %2802 to %Type_Info.Tuple*
	%2804 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2803, i64 0, i32 0
	%2805 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2804, i64 0, i32 4
	store i64 4, i64* %2805
	%2806 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 159
	%2807 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 159
	%2808 = getelementptr inbounds %Type_Info*, %Type_Info** %2806, i64 0
	%2809 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2809, %Type_Info** %2808
	%2810 = getelementptr inbounds %..string, %..string* %2807, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2e2, i64 0, i32 0), i64 3}, %..string* %2810
	%2811 = getelementptr inbounds %Type_Info*, %Type_Info** %2806, i64 1
	%2812 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2812, %Type_Info** %2811
	%2813 = getelementptr inbounds %..string, %..string* %2807, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2e3, i64 0, i32 0), i64 2}, %..string* %2813
	%2814 = getelementptr inbounds %Type_Info*, %Type_Info** %2806, i64 2
	%2815 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2815, %Type_Info** %2814
	%2816 = getelementptr inbounds %..string, %..string* %2807, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2e4, i64 0, i32 0), i64 2}, %..string* %2816
	%2817 = getelementptr inbounds %Type_Info*, %Type_Info** %2806, i64 3
	%2818 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2818, %Type_Info** %2817
	%2819 = getelementptr inbounds %..string, %..string* %2807, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2e5, i64 0, i32 0), i64 2}, %..string* %2819
	%2820 = getelementptr inbounds %Type_Info*, %Type_Info** %2806, i64 4
	%2821 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	store %Type_Info* %2821, %Type_Info** %2820
	%2822 = getelementptr inbounds %..string, %..string* %2807, i64 4
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2e6, i64 0, i32 0), i64 2}, %..string* %2822
	%2823 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2804, i64 0, i32 0
	%2824 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2823, i64 0, i32 0
	store %Type_Info** %2806, %Type_Info*** %2824
	%2825 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2823, i64 0, i32 1
	store i64 5, i64* %2825
	%2826 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2823, i64 0, i32 2
	store i64 5, i64* %2826
	%2827 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2804, i64 0, i32 1
	%2828 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2827, i64 0, i32 0
	store %..string* %2807, %..string** %2828
	%2829 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2827, i64 0, i32 1
	store i64 5, i64* %2829
	%2830 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2827, i64 0, i32 2
	store i64 5, i64* %2830
	%2831 = getelementptr inbounds %Type_Info, %Type_Info* %2802, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2831
	%2832 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	; Type_Info_Proc
	%2833 = bitcast %Type_Info* %2832 to %Type_Info.Procedure*
	%2834 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2833, i64 0, i32 0
	%2835 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2833, i64 0, i32 1
	%2836 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2833, i64 0, i32 2
	%2837 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2833, i64 0, i32 3
	%2838 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 133
	%2839 = bitcast %Type_Info* %2838 to %Type_Info*
	store %Type_Info* %2839, %Type_Info** %2834
	store i1 false, i1* %2836
	store i64 1, i64* %2837
	%2840 = getelementptr inbounds %Type_Info, %Type_Info* %2832, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2840
	%2841 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 133
	; Type_Info_Tuple
	%2842 = bitcast %Type_Info* %2841 to %Type_Info.Tuple*
	%2843 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2842, i64 0, i32 0
	%2844 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2843, i64 0, i32 4
	store i64 8, i64* %2844
	%2845 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 164
	%2846 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 164
	%2847 = getelementptr inbounds %Type_Info*, %Type_Info** %2845, i64 0
	%2848 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2848, %Type_Info** %2847
	%2849 = getelementptr inbounds %..string, %..string* %2846, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2e7, i64 0, i32 0), i64 3}, %..string* %2849
	%2850 = getelementptr inbounds %Type_Info*, %Type_Info** %2845, i64 1
	%2851 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2851, %Type_Info** %2850
	%2852 = getelementptr inbounds %..string, %..string* %2846, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2e8, i64 0, i32 0), i64 5}, %..string* %2852
	%2853 = getelementptr inbounds %Type_Info*, %Type_Info** %2845, i64 2
	%2854 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2854, %Type_Info** %2853
	%2855 = getelementptr inbounds %..string, %..string* %2846, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2e9, i64 0, i32 0), i64 9}, %..string* %2855
	%2856 = getelementptr inbounds %Type_Info*, %Type_Info** %2845, i64 3
	%2857 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 134
	store %Type_Info* %2857, %Type_Info** %2856
	%2858 = getelementptr inbounds %..string, %..string* %2846, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2ea, i64 0, i32 0), i64 5}, %..string* %2858
	%2859 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2843, i64 0, i32 0
	%2860 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2859, i64 0, i32 0
	store %Type_Info** %2845, %Type_Info*** %2860
	%2861 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2859, i64 0, i32 1
	store i64 4, i64* %2861
	%2862 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2859, i64 0, i32 2
	store i64 4, i64* %2862
	%2863 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2843, i64 0, i32 1
	%2864 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2863, i64 0, i32 0
	store %..string* %2846, %..string** %2864
	%2865 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2863, i64 0, i32 1
	store i64 4, i64* %2865
	%2866 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2863, i64 0, i32 2
	store i64 4, i64* %2866
	%2867 = getelementptr inbounds %Type_Info, %Type_Info* %2841, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2867
	%2868 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 134
	; Type_Info_Pointer
	%2869 = bitcast %Type_Info* %2868 to %Type_Info.Pointer*
	%2870 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	%2871 = bitcast %Type_Info* %2870 to %Type_Info*
	%2872 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2869, i64 0, i32 0
	store %Type_Info* %2871, %Type_Info** %2872
	%2873 = getelementptr inbounds %Type_Info, %Type_Info* %2868, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2873
	%2874 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	; Type_Info_Proc
	%2875 = bitcast %Type_Info* %2874 to %Type_Info.Procedure*
	%2876 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2875, i64 0, i32 0
	%2877 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2875, i64 0, i32 1
	%2878 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2875, i64 0, i32 2
	%2879 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2875, i64 0, i32 3
	%2880 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	%2881 = bitcast %Type_Info* %2880 to %Type_Info*
	store %Type_Info* %2881, %Type_Info** %2876
	%2882 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%2883 = bitcast %Type_Info* %2882 to %Type_Info*
	store %Type_Info* %2883, %Type_Info** %2877
	store i1 false, i1* %2878
	store i64 1, i64* %2879
	%2884 = getelementptr inbounds %Type_Info, %Type_Info* %2874, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2884
	%2885 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	; Type_Info_Tuple
	%2886 = bitcast %Type_Info* %2885 to %Type_Info.Tuple*
	%2887 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2886, i64 0, i32 0
	%2888 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2887, i64 0, i32 4
	store i64 8, i64* %2888
	%2889 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 168
	%2890 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 168
	%2891 = getelementptr inbounds %Type_Info*, %Type_Info** %2889, i64 0
	%2892 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2892, %Type_Info** %2891
	%2893 = getelementptr inbounds %..string, %..string* %2890, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2eb, i64 0, i32 0), i64 7}, %..string* %2893
	%2894 = getelementptr inbounds %Type_Info*, %Type_Info** %2889, i64 1
	%2895 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2895, %Type_Info** %2894
	%2896 = getelementptr inbounds %..string, %..string* %2890, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2ec, i64 0, i32 0), i64 4}, %..string* %2896
	%2897 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2887, i64 0, i32 0
	%2898 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2897, i64 0, i32 0
	store %Type_Info** %2889, %Type_Info*** %2898
	%2899 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2897, i64 0, i32 1
	store i64 2, i64* %2899
	%2900 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2897, i64 0, i32 2
	store i64 2, i64* %2900
	%2901 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2887, i64 0, i32 1
	%2902 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2901, i64 0, i32 0
	store %..string* %2890, %..string** %2902
	%2903 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2901, i64 0, i32 1
	store i64 2, i64* %2903
	%2904 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2901, i64 0, i32 2
	store i64 2, i64* %2904
	%2905 = getelementptr inbounds %Type_Info, %Type_Info* %2885, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2905
	%2906 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2907 = bitcast %Type_Info* %2906 to %Type_Info.Pointer*
	%2908 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2909 = bitcast %Type_Info* %2908 to %Type_Info*
	%2910 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2907, i64 0, i32 0
	store %Type_Info* %2909, %Type_Info** %2910
	%2911 = getelementptr inbounds %Type_Info, %Type_Info* %2906, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2911
	%2912 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Tuple
	%2913 = bitcast %Type_Info* %2912 to %Type_Info.Tuple*
	%2914 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2913, i64 0, i32 0
	%2915 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2914, i64 0, i32 4
	store i64 4, i64* %2915
	%2916 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 170
	%2917 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 170
	%2918 = getelementptr inbounds %Type_Info*, %Type_Info** %2916, i64 0
	%2919 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2919, %Type_Info** %2918
	%2920 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2914, i64 0, i32 0
	%2921 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2920, i64 0, i32 0
	store %Type_Info** %2916, %Type_Info*** %2921
	%2922 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2920, i64 0, i32 1
	store i64 1, i64* %2922
	%2923 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2920, i64 0, i32 2
	store i64 1, i64* %2923
	%2924 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2914, i64 0, i32 1
	%2925 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2924, i64 0, i32 0
	store %..string* %2917, %..string** %2925
	%2926 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2924, i64 0, i32 1
	store i64 1, i64* %2926
	%2927 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2924, i64 0, i32 2
	store i64 1, i64* %2927
	%2928 = getelementptr inbounds %Type_Info, %Type_Info* %2912, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2928
	%2929 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	; Type_Info_Proc
	%2930 = bitcast %Type_Info* %2929 to %Type_Info.Procedure*
	%2931 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2930, i64 0, i32 0
	%2932 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2930, i64 0, i32 1
	%2933 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2930, i64 0, i32 2
	%2934 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2930, i64 0, i32 3
	%2935 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	%2936 = bitcast %Type_Info* %2935 to %Type_Info*
	store %Type_Info* %2936, %Type_Info** %2931
	%2937 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	%2938 = bitcast %Type_Info* %2937 to %Type_Info*
	store %Type_Info* %2938, %Type_Info** %2932
	store i1 false, i1* %2933
	store i64 1, i64* %2934
	%2939 = getelementptr inbounds %Type_Info, %Type_Info* %2929, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %2939
	%2940 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	; Type_Info_Tuple
	%2941 = bitcast %Type_Info* %2940 to %Type_Info.Tuple*
	%2942 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2941, i64 0, i32 0
	%2943 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2942, i64 0, i32 4
	store i64 8, i64* %2943
	%2944 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 171
	%2945 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 171
	%2946 = getelementptr inbounds %Type_Info*, %Type_Info** %2944, i64 0
	%2947 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	store %Type_Info* %2947, %Type_Info** %2946
	%2948 = getelementptr inbounds %..string, %..string* %2945, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2ed, i64 0, i32 0), i64 7}, %..string* %2948
	%2949 = getelementptr inbounds %Type_Info*, %Type_Info** %2944, i64 1
	%2950 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2950, %Type_Info** %2949
	%2951 = getelementptr inbounds %..string, %..string* %2945, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2ee, i64 0, i32 0), i64 4}, %..string* %2951
	%2952 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2942, i64 0, i32 0
	%2953 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2952, i64 0, i32 0
	store %Type_Info** %2944, %Type_Info*** %2953
	%2954 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2952, i64 0, i32 1
	store i64 2, i64* %2954
	%2955 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2952, i64 0, i32 2
	store i64 2, i64* %2955
	%2956 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2942, i64 0, i32 1
	%2957 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2956, i64 0, i32 0
	store %..string* %2945, %..string** %2957
	%2958 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2956, i64 0, i32 1
	store i64 2, i64* %2958
	%2959 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2956, i64 0, i32 2
	store i64 2, i64* %2959
	%2960 = getelementptr inbounds %Type_Info, %Type_Info* %2940, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2960
	%2961 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2962 = bitcast %Type_Info* %2961 to %Type_Info.Pointer*
	%2963 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2964 = bitcast %Type_Info* %2963 to %Type_Info*
	%2965 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2962, i64 0, i32 0
	store %Type_Info* %2964, %Type_Info** %2965
	%2966 = getelementptr inbounds %Type_Info, %Type_Info* %2961, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2966
	%2967 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Tuple
	%2968 = bitcast %Type_Info* %2967 to %Type_Info.Tuple*
	%2969 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2968, i64 0, i32 0
	%2970 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2969, i64 0, i32 4
	store i64 4, i64* %2970
	%2971 = getelementptr inbounds [175 x %Type_Info*], [175 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 173
	%2972 = getelementptr inbounds [175 x %..string], [175 x %..string]* @.__$type_info_names_data, i64 0, i32 173
	%2973 = getelementptr inbounds %Type_Info*, %Type_Info** %2971, i64 0
	%2974 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %2974, %Type_Info** %2973
	%2975 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2969, i64 0, i32 0
	%2976 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2975, i64 0, i32 0
	store %Type_Info** %2971, %Type_Info*** %2976
	%2977 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2975, i64 0, i32 1
	store i64 1, i64* %2977
	%2978 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2975, i64 0, i32 2
	store i64 1, i64* %2978
	%2979 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2969, i64 0, i32 1
	%2980 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2979, i64 0, i32 0
	store %..string* %2972, %..string** %2980
	%2981 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2979, i64 0, i32 1
	store i64 1, i64* %2981
	%2982 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2979, i64 0, i32 2
	store i64 1, i64* %2982
	%2983 = getelementptr inbounds %Type_Info, %Type_Info* %2967, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %2983
	%2984 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 137
	; Type_Info_Named
	%2985 = bitcast %Type_Info* %2984 to %Type_Info.Named*
	%2986 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%2987 = bitcast %Type_Info* %2986 to %Type_Info*
	%2988 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2985, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2ef, i64 0, i32 0), i64 7}, %..string* %2988
	%2989 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2985, i64 0, i32 1
	store %Type_Info* %2987, %Type_Info** %2989
	%2990 = getelementptr inbounds %Type_Info, %Type_Info* %2984, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2990
	%2991 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%2992 = bitcast %Type_Info* %2991 to %Type_Info.Pointer*
	%2993 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%2994 = bitcast %Type_Info* %2993 to %Type_Info*
	%2995 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2992, i64 0, i32 0
	store %Type_Info* %2994, %Type_Info** %2995
	%2996 = getelementptr inbounds %Type_Info, %Type_Info* %2991, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %2996
	%2997 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 138
	; Type_Info_Pointer
	%2998 = bitcast %Type_Info* %2997 to %Type_Info.Pointer*
	%2999 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%3000 = bitcast %Type_Info* %2999 to %Type_Info*
	%3001 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2998, i64 0, i32 0
	store %Type_Info* %3000, %Type_Info** %3001
	%3002 = getelementptr inbounds %Type_Info, %Type_Info* %2997, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %3002
	%3003 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	; Type_Info_Pointer
	%3004 = bitcast %Type_Info* %3003 to %Type_Info.Pointer*
	%3005 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%3006 = bitcast %Type_Info* %3005 to %Type_Info*
	%3007 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3004, i64 0, i32 0
	store %Type_Info* %3006, %Type_Info** %3007
	%3008 = getelementptr inbounds %Type_Info, %Type_Info* %3003, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %3008
	%3009 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 139
	; Type_Info_Named
	%3010 = bitcast %Type_Info* %3009 to %Type_Info.Named*
	%3011 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 140
	%3012 = bitcast %Type_Info* %3011 to %Type_Info*
	%3013 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3010, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2f0, i64 0, i32 0), i64 13}, %..string* %3013
	%3014 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3010, i64 0, i32 1
	store %Type_Info* %3012, %Type_Info** %3014
	%3015 = getelementptr inbounds %Type_Info, %Type_Info* %3009, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3015
	%3016 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 140
	; Type_Info_Enum
	%3017 = bitcast %Type_Info* %3016 to %Type_Info.Enum*
	%3018 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%3019 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3017, i64 0, i32 0
	store %Type_Info* %3018, %Type_Info** %3019
	%3020 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-8c, i64 0, i32 0
	%3021 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-8c, i64 0, i32 0
	%3022 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3021 to i64*
	store i64 0, i64* %3022
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2f1, i64 0, i32 0), i64 9}, %..string* %3020
	%3023 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-8c, i64 0, i32 1
	%3024 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-8c, i64 0, i32 1
	%3025 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3024 to i64*
	store i64 1, i64* %3025
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$2f2, i64 0, i32 0), i64 10}, %..string* %3023
	%3026 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-8c, i64 0, i32 2
	%3027 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-8c, i64 0, i32 2
	%3028 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3027 to i64*
	store i64 2, i64* %3028
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$2f3, i64 0, i32 0), i64 10}, %..string* %3026
	%3029 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-8c, i64 0, i32 3
	%3030 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-8c, i64 0, i32 3
	%3031 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3030 to i64*
	store i64 3, i64* %3031
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$2f4, i64 0, i32 0), i64 12}, %..string* %3029
	%3032 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-8c, i64 0, i32 4
	%3033 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-8c, i64 0, i32 4
	%3034 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3033 to i64*
	store i64 4, i64* %3034
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2f5, i64 0, i32 0), i64 5}, %..string* %3032
	%3035 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3017, i64 0, i32 1
	%3036 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-8c, i64 0, i32 0
	%3037 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3035, i64 0, i32 0
	store %..string* %3036, %..string** %3037
	%3038 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3035, i64 0, i32 1
	store i64 5, i64* %3038
	%3039 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3017, i64 0, i32 2
	%3040 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-8c, i64 0, i32 0
	%3041 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %3039, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %3040, {[0 x <8 x i8>], [8 x i8]}** %3041
	%3042 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %3039, i64 0, i32 1
	store i64 5, i64* %3042
	%3043 = getelementptr inbounds %Type_Info, %Type_Info* %3016, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %3043
	%3044 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%3045 = bitcast %Type_Info* %3044 to %Type_Info.Pointer*
	%3046 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%3047 = bitcast %Type_Info* %3046 to %Type_Info*
	%3048 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3045, i64 0, i32 0
	store %Type_Info* %3047, %Type_Info** %3048
	%3049 = getelementptr inbounds %Type_Info, %Type_Info* %3044, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %3049
	%3050 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	; Type_Info_Pointer
	%3051 = bitcast %Type_Info* %3050 to %Type_Info.Pointer*
	%3052 = getelementptr inbounds [142 x %Type_Info], [142 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%3053 = bitcast %Type_Info* %3052 to %Type_Info*
	%3054 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3051, i64 0, i32 0
	store %Type_Info* %3053, %Type_Info** %3054
	%3055 = getelementptr inbounds %Type_Info, %Type_Info* %3050, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %3055
	ret void
}
@.__$type_info_data = private global [142 x %Type_Info] zeroinitializer
@.__$type_info_types_data = global [175 x %Type_Info*] zeroinitializer
@.__$type_info_names_data = global [175 x %..string] zeroinitializer
@.__$type_info_offsets_data = global [175 x i64] zeroinitializer
@__type_table = global {%Type_Info*, i64, i64} zeroinitializer
@__context = thread_local global %Context zeroinitializer
@ProgramRunning = global i1 zeroinitializer
@ShowDebugMenu = global i1 false
@GlobalWin32VarsPtr = global %main-2.Win32Vars_t* zeroinitializer
@GlobalWindowPosition = global %jaze_win32-13.WINDOWPLACEMENT zeroinitializer
@.__DIGITS_LOWER = global %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$2f6, i64 0, i32 0), i64 17}
@.__DIGITS_UPPER = global %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$2f7, i64 0, i32 0), i64 17}
@.accept_ranges = global [5 x %utf8-6.Accept_Range] [%utf8-6.Accept_Range {i8 128, i8 191}, %utf8-6.Accept_Range {i8 160, i8 191}, %utf8-6.Accept_Range {i8 128, i8 159}, %utf8-6.Accept_Range {i8 144, i8 191}, %utf8-6.Accept_Range {i8 128, i8 143}]
@.accept_sizes = global [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241]
@.DebugInfo = global %jaze_gl-14.DebugInfo_t zeroinitializer
@._BufferData = global void (i32, i32, %..rawptr, i32)* zeroinitializer
@._BindBuffer = global void (i32, i32)* zeroinitializer
@._GenBuffers = global void (i32, i32*)* zeroinitializer
@._GenVertexArrays = global void (i32, i32*)* zeroinitializer
@._EnableVertexAttribArray = global void (i32)* zeroinitializer
@._VertexAttribPointer = global void (i32, i32, i32, i1, i32, %..rawptr)* zeroinitializer
@._BindVertexArray = global void (i32)* zeroinitializer
@._Uniform1i = global void (i32, i32)* zeroinitializer
@._Uniform2i = global void (i32, i32, i32)* zeroinitializer
@._Uniform3i = global void (i32, i32, i32, i32)* zeroinitializer
@._Uniform4i = global void (i32, i32, i32, i32, i32)* zeroinitializer
@._Uniform1f = global void (i32, float)* zeroinitializer
@._Uniform2f = global void (i32, float, float)* zeroinitializer
@._Uniform3f = global void (i32, float, float, float)* zeroinitializer
@._Uniform4f = global void (i32, float, float, float, float)* zeroinitializer
@._UniformMatrix4fv = global void (i32, i32, i32, float*)* zeroinitializer
@._GetUniformLocation = global i32 (i32, i8*)* zeroinitializer
@._GetAttribLocation = global i32 (i32, i8*)* zeroinitializer
@._DrawElements = global void (i32, i32, i32, %..rawptr)* zeroinitializer
@._UseProgram = global void (i32)* zeroinitializer
@._LinkProgram = global void (i32)* zeroinitializer
@._ActiveTexture = global void (i32)* zeroinitializer
@._BlendEquationSeparate = global void (i32, i32)* zeroinitializer
@._BlendEquation = global void (i32)* zeroinitializer
@._AttachShader = global void (i32, i32)* zeroinitializer
@._CreateProgram = global i32 ()* zeroinitializer
@._ShaderSource = global void (i32, i32, i8**, i32*)* zeroinitializer
@._CreateShader = global i32 (i32)* zeroinitializer
@._CompileShader = global void (i32)* zeroinitializer
@._DebugMessageControl = global void (i32, i32, i32, i32, i32*, i1)* zeroinitializer
@._DebugMessageCallback = global void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)* zeroinitializer
@._GetShaderiv = global void (i32, i32, i32*)* zeroinitializer
@._GetShaderInfoLog = global void (i32, i32, i32*, i8*)* zeroinitializer
@._GetStringi = global i8* (i32, i32)* zeroinitializer
@.CreateContextAttribsARB = global %..rawptr (%..rawptr, %..rawptr, i32*)* zeroinitializer
@.ChoosePixelFormatARB = global i32 (%..rawptr, i32*, float*, i32, i32*, i32*)* zeroinitializer
@.SwapIntervalEXT = global i1 (i32)* zeroinitializer
@.GetExtensionsStringARB = global i8* (%..rawptr)* zeroinitializer
@.GlobalDebugWndBools = global {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}} zeroinitializer
@.CurrentViewTexture = global i32 zeroinitializer
@.State = global %jaze_imgui-17.State_t zeroinitializer
@._Enable = global void (i32)* zeroinitializer
@._GetBatteryInformation = global i32 (i32, i8, %jaze_xinput-18.BatteryInformation*)* zeroinitializer
@._GetCapabilities = global i32 (i32, i32, %jaze_xinput-18.Capabilities*)* zeroinitializer
@._GetKeystroke = global i32 (i32, i32, %jaze_xinput-18.KeyStroke*)* zeroinitializer
@._GetState = global void (i32, %jaze_xinput-18.State*)* zeroinitializer
@._SetState = global void (i32, %jaze_xinput-18.VibrationState)* zeroinitializer
@.DebugInfo = global %jaze_xinput-18.DebugInfo_t zeroinitializer
@.Version = global i64 0
@.stdout = global i64 zeroinitializer
@.stderr = global i64 zeroinitializer
@.f32_info = global %strconv-22.Float_Info {i64 23, i64 8, i64 -127}
@.f64_info = global %strconv-22.Float_Info {i64 52, i64 11, i64 -1023}
@.__$enum_names-17 = private global [4 x %..string] zeroinitializer
@.__$enum_values-17 = private global [4 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3a = private global [7 x %..string] zeroinitializer
@.__$enum_values-3a = private global [7 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3c = private global [10 x %..string] zeroinitializer
@.__$enum_values-3c = private global [10 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3e = private global [5 x %..string] zeroinitializer
@.__$enum_values-3e = private global [5 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-8c = private global [5 x %..string] zeroinitializer
@.__$enum_values-8c = private global [5 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__str$0 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$1 = private global [10 x i8] c"ptr\20\21\3D\20nil"
@.__str$2 = private global [32 x i8] c"\25s\28\25d\3A\25d\29\20Runtime\20assertion\3A\20\25s\0A"
@.__str$3 = private global [20 x i8] c"\25s\28\25d\3A\25d\29\20Panic\3A\20\25s\0A"
@.__str$4 = private global [48 x i8] c"\25s\28\25d\3A\25d\29\20Index\20\25d\20is\20out\20of\20bounds\20range\200..\25d\0A"
@.__str$5 = private global [46 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20slice\20indices\3A\20\5B\25d..\25d..\25d\5D\0A"
@.__str$6 = private global [46 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20substring\20indices\3A\20\5B\25d..\25d\5D\0A"
@.__str$7 = private global [45 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20\60union_cast\60\20from\20\25T\20to\20\25T\0A"
@.__str$8 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$9 = private global [32 x i8] c"array.allocator.procedure\20\21\3D\20nil"
@.__str$a = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$b = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$c = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$d = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$e = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$f = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$10 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$11 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$12 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$13 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$14 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$15 = private global [26 x i8] c"E\3A\5COdin\5Ccore\5C_preload.odin"
@.__str$16 = private global [10 x i8] c"jaze_class"
@.__str$17 = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$18 = private global [24 x i8] c"Could\20Not\20Register\20Class"
@.__str$19 = private global [4 x i8] c"Jaze"
@.__str$1a = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$1b = private global [23 x i8] c"Could\20Not\20Create\20Window"
@.__str$1c = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$1d = private global [10 x i8] c"ctx\20\21\3D\20nil"
@.__str$1e = private global [6 x i8] c"STATIC"
@.__str$1f = private global [13 x i8] c"OpenGL\20Loader"
@.__str$20 = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$21 = private global [16 x i8] c"wndHandle\20\21\3D\20nil"
@.__str$22 = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$23 = private global [12 x i8] c"wndDc\20\21\3D\20nil"
@.__str$24 = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$25 = private global [13 x i8] c"oldCtx\20\21\3D\20nil"
@.__str$26 = private global [23 x i8] c"wglChoosePixelFormatARB"
@.__str$27 = private global [26 x i8] c"wglCreateContextAttribsARB"
@.__str$28 = private global [25 x i8] c"wglGetExtensionsStringARB"
@.__str$29 = private global [18 x i8] c"wglSwapIntervalEXT"
@.__str$2a = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$2b = private global [35 x i8] c"Couldn\27t\20find\20suitable\20pixel\20format"
@.__str$2c = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$2d = private global [10 x i8] c"ctx\20\21\3D\20nil"
@.__str$2e = private global [6 x i8] c"Sizing"
@.__str$2f = private global [6 x i8] c"\25d\2C\20\25d"
@.__str$30 = private global [17 x i8] c"\5B\25v\20\7C\20\25v\20\7C\20\25v\5D\20\25s"
@.__str$31 = private global [4 x i8] c"Misc"
@.__str$32 = private global [11 x i8] c"OpenGL\20Info"
@.__str$33 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$34 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$35 = private global [13 x i8] c"Win32Var\20Info"
@.__str$36 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$37 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$38 = private global [16 x i8] c"Show\20XInput\20Info"
@.__str$39 = private global [14 x i8] c"ShowXinputInfo"
@.__str$3a = private global [14 x i8] c"ShowXinputInfo"
@.__str$3b = private global [16 x i8] c"Show\20Test\20Window"
@.__str$3c = private global [14 x i8] c"ShowTestWindow"
@.__str$3d = private global [14 x i8] c"ShowTestWindow"
@.__str$3e = private global [17 x i8] c"Toggle\20Fullscreen"
@.__str$3f = private global [9 x i8] c"Alt\2BEnter"
@.__str$40 = private global [4 x i8] c"Exit"
@.__str$41 = private global [6 x i8] c"Escape"
@.__str$42 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$43 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$44 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$45 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$46 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$47 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$48 = private global [14 x i8] c"ShowXinputInfo"
@.__str$49 = private global [14 x i8] c"ShowXinputInfo"
@.__str$4a = private global [14 x i8] c"ShowXinputInfo"
@.__str$4b = private global [14 x i8] c"ShowTestWindow"
@.__str$4c = private global [14 x i8] c"ShowTestWindow"
@.__str$4d = private global [14 x i8] c"ShowTestWindow"
@.__str$4e = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$4f = private global [5 x i8] c"Jaze\20"
@.__str$50 = private global [21 x i8] c"W\3A\5CJaze\5Csrc\5Cmain.odin"
@.__str$51 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$52 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$53 = private global [14 x i8] c"ShowTestWindow"
@.__str$54 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$55 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$56 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$57 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$58 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$59 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$5a = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$5b = private global [3 x i8] c"int"
@.__str$5c = private global [4 x i8] c"uint"
@.__str$5d = private global [1 x i8] c"i"
@.__str$5e = private global [1 x i8] c"u"
@.__str$5f = private global [3 x i8] c"f32"
@.__str$60 = private global [3 x i8] c"f64"
@.__str$61 = private global [6 x i8] c"string"
@.__str$62 = private global [4 x i8] c"bool"
@.__str$63 = private global [6 x i8] c"rawptr"
@.__str$64 = private global [1 x i8] c"\5E"
@.__str$65 = private global [4 x i8] c"proc"
@.__str$66 = private global [2 x i8] c"\28\29"
@.__str$67 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$68 = private global [1 x i8] c"\28"
@.__str$69 = private global [2 x i8] c"\2C\20"
@.__str$6a = private global [1 x i8] c"\29"
@.__str$6b = private global [4 x i8] c"\20-\3E\20"
@.__str$6c = private global [1 x i8] c"\28"
@.__str$6d = private global [2 x i8] c"\2C\20"
@.__str$6e = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$6f = private global [2 x i8] c"\3A\20"
@.__str$70 = private global [1 x i8] c"\29"
@.__str$71 = private global [1 x i8] c"\5B"
@.__str$72 = private global [1 x i8] c"\5D"
@.__str$73 = private global [4 x i8] c"\5B..\5D"
@.__str$74 = private global [1 x i8] c"\5B"
@.__str$75 = private global [1 x i8] c"\5D"
@.__str$76 = private global [8 x i8] c"\5Bvector\20"
@.__str$77 = private global [1 x i8] c"\5D"
@.__str$78 = private global [4 x i8] c"map\5B"
@.__str$79 = private global [7 x i8] c"struct\20"
@.__str$7a = private global [8 x i8] c"\23packed\20"
@.__str$7b = private global [9 x i8] c"\23ordered\20"
@.__str$7c = private global [7 x i8] c"\23align\20"
@.__str$7d = private global [2 x i8] c"\2C\20"
@.__str$7e = private global [2 x i8] c"\3A\20"
@.__str$7f = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$80 = private global [7 x i8] c"union\20\7B"
@.__str$81 = private global [2 x i8] c"\2C\20"
@.__str$82 = private global [2 x i8] c"\3A\20"
@.__str$83 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$84 = private global [2 x i8] c"\2C\20"
@.__str$85 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$86 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$87 = private global [2 x i8] c"\2C\20"
@.__str$88 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$89 = private global [2 x i8] c"\3A\20"
@.__str$8a = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$8b = private global [1 x i8] c"\7D"
@.__str$8c = private global [11 x i8] c"raw_union\20\7B"
@.__str$8d = private global [2 x i8] c"\2C\20"
@.__str$8e = private global [2 x i8] c"\3A\20"
@.__str$8f = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$90 = private global [1 x i8] c"\7D"
@.__str$91 = private global [5 x i8] c"enum\20"
@.__str$92 = private global [2 x i8] c"\20\7B"
@.__str$93 = private global [2 x i8] c"\2C\20"
@.__str$94 = private global [1 x i8] c"\7D"
@.__str$95 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$96 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$97 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$98 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$99 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$9a = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$9b = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$9c = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$9d = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$9e = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$9f = private global [9 x i8] c"verb\20\21\3D\20v"
@.__str$a0 = private global [2 x i8] c"\25\21"
@.__str$a1 = private global [5 x i8] c"\3Cnil\3E"
@.__str$a2 = private global [4 x i8] c"true"
@.__str$a3 = private global [5 x i8] c"false"
@.__str$a4 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$a5 = private global [41 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size"
@.__str$a6 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$a7 = private global [55 x i8] c"_write_int\3A\20buffer\20overrun.\20Width\20and\20precision\20too\20big"
@.__str$a8 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$a9 = private global [32 x i8] c"_write_int\3A\20unknown\20base\2C\20whoops"
@.__str$aa = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$ab = private global [2 x i8] c"U\2B"
@.__str$ac = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$ad = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$ae = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$af = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b0 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b1 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b2 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b3 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b4 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b5 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b6 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b7 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b8 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$b9 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$ba = private global [2 x i8] c"0x"
@.__str$bb = private global [5 x i8] c"\3Cnil\3E"
@.__str$bc = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$bd = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$be = private global [18 x i8] c"\21\25\28BAD\20ENUM\20VALUE\29"
@.__str$bf = private global [5 x i8] c"\3Cnil\3E"
@.__str$c0 = private global [2 x i8] c"\2C\20"
@.__str$c1 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$c2 = private global [3 x i8] c"\20\3D\20"
@.__str$c3 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$c4 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$c5 = private global [2 x i8] c"\2C\20"
@.__str$c6 = private global [2 x i8] c"\2C\20"
@.__str$c7 = private global [4 x i8] c"map\5B"
@.__str$c8 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$c9 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$ca = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$cb = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$cc = private global [2 x i8] c"\2C\20"
@.__str$cd = private global [1 x i8] c"\3D"
@.__str$ce = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$cf = private global [2 x i8] c"\2C\20"
@.__str$d0 = private global [2 x i8] c"\2C\20"
@.__str$d1 = private global [2 x i8] c"\2C\20"
@.__str$d2 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$d3 = private global [3 x i8] c"\20\3D\20"
@.__str$d4 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$d5 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$d6 = private global [2 x i8] c"\2C\20"
@.__str$d7 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$d8 = private global [3 x i8] c"\20\3D\20"
@.__str$d9 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$da = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$db = private global [11 x i8] c"\28raw_union\29"
@.__str$dc = private global [3 x i8] c"\20\40\20"
@.__str$dd = private global [5 x i8] c"\3Cnil\3E"
@.__str$de = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$df = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$e0 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$e1 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$e2 = private global [13 x i8] c"\25\21\28BAD\20WIDTH\29"
@.__str$e3 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$e4 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$e5 = private global [17 x i8] c"\25\21\28BAD\20PRECISION\29"
@.__str$e6 = private global [11 x i8] c"\25\21\28NO\20VERB\29"
@.__str$e7 = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$e8 = private global [23 x i8] c"\25\21\28BAD\20ARGUMENT\20NUMBER\29"
@.__str$e9 = private global [20 x i8] c"\25\21\28MISSING\20ARGUMENT\29"
@.__str$ea = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$eb = private global [9 x i8] c"\25\21\28EXTRA\20"
@.__str$ec = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$ed = private global [2 x i8] c"\2C\20"
@.__str$ee = private global [5 x i8] c"\3Cnil\3E"
@.__str$ef = private global [21 x i8] c"E\3A\5COdin\5Ccore\5Cfmt.odin"
@.__str$f0 = private global [1 x i8] c"\29"
@.__str$f1 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f2 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f3 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f4 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f5 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f6 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f7 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f8 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$f9 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$fa = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$fb = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$fc = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$fd = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$fe = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$ff = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$100 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$101 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$102 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$103 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$104 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$105 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$106 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$107 = private global [22 x i8] c"E\3A\5COdin\5Ccore\5Cutf8.odin"
@.__str$108 = private global [34 x i8] c"W\3A\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$109 = private global [34 x i8] c"W\3A\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$10a = private global [19 x i8] c"s.count\20\3C\20buf.count"
@.__str$10b = private global [34 x i8] c"W\3A\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$10c = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrings.odin"
@.__str$10d = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrings.odin"
@.__str$10e = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$10f = private global [26 x i8] c"------\20Shader\20Error\20------"
@.__str$110 = private global [26 x i8] c"--------------------------"
@.__str$111 = private global [3 x i8] c"nil"
@.__str$112 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$113 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$114 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$115 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$116 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$117 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$118 = private global [24 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$119 = private global [13 x i8] c"opengl32.dll\00"
@.__str$11a = private global [14 x i8] c"glDrawElements"
@.__str$11b = private global [17 x i8] c"glBindVertexArray"
@.__str$11c = private global [21 x i8] c"glVertexAttribPointer"
@.__str$11d = private global [25 x i8] c"glEnableVertexAttribArray"
@.__str$11e = private global [17 x i8] c"glGenVertexArrays"
@.__str$11f = private global [12 x i8] c"glBufferData"
@.__str$120 = private global [12 x i8] c"glBindBuffer"
@.__str$121 = private global [12 x i8] c"glGenBuffers"
@.__str$122 = private global [24 x i8] c"glDebugMessageControlARB"
@.__str$123 = private global [25 x i8] c"glDebugMessageCallbackARB"
@.__str$124 = private global [13 x i8] c"glGetShaderiv"
@.__str$125 = private global [18 x i8] c"glGetShaderInfoLog"
@.__str$126 = private global [12 x i8] c"glGetStringi"
@.__str$127 = private global [15 x i8] c"glBlendEquation"
@.__str$128 = private global [23 x i8] c"glBlendEquationSeparate"
@.__str$129 = private global [15 x i8] c"glCompileShader"
@.__str$12a = private global [14 x i8] c"glCreateShader"
@.__str$12b = private global [14 x i8] c"glShaderSource"
@.__str$12c = private global [14 x i8] c"glAttachShader"
@.__str$12d = private global [15 x i8] c"glCreateProgram"
@.__str$12e = private global [13 x i8] c"glLinkProgram"
@.__str$12f = private global [12 x i8] c"glUseProgram"
@.__str$130 = private global [15 x i8] c"glActiveTexture"
@.__str$131 = private global [11 x i8] c"glUniform1i"
@.__str$132 = private global [11 x i8] c"glUniform2i"
@.__str$133 = private global [11 x i8] c"glUniform3i"
@.__str$134 = private global [11 x i8] c"glUniform4i"
@.__str$135 = private global [11 x i8] c"glUniform1f"
@.__str$136 = private global [11 x i8] c"glUniform2f"
@.__str$137 = private global [11 x i8] c"glUniform3f"
@.__str$138 = private global [11 x i8] c"glUniform4f"
@.__str$139 = private global [18 x i8] c"glUniformMatrix4fv"
@.__str$13a = private global [20 x i8] c"glGetUniformLocation"
@.__str$13b = private global [19 x i8] c"glGetAttribLocation"
@.__str$13c = private global [25 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$13d = private global [25 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$13e = private global [25 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$13f = private global [10 x i8] c"res\20\21\3D\20nil"
@.__str$140 = private global [25 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$141 = private global [15 x i8] c"Loaded\20Textures"
@.__str$142 = private global [11 x i8] c"Texture\20\25d\3A"
@.__str$143 = private global [4 x i8] c"View"
@.__str$144 = private global [13 x i8] c"ViewGLTexture"
@.__str$145 = private global [13 x i8] c"ViewGLTexture"
@.__str$146 = private global [13 x i8] c"ViewGLTexture"
@.__str$147 = private global [13 x i8] c"ViewGLTexture"
@.__str$148 = private global [12 x i8] c"Texture\20View"
@.__str$149 = private global [11 x i8] c"OpenGL\20Info"
@.__str$14a = private global [9 x i8] c"Versions\3A"
@.__str$14b = private global [14 x i8] c"Highest\3A\20\25d.\25d"
@.__str$14c = private global [14 x i8] c"Current\3A\20\25d.\25d"
@.__str$14d = private global [11 x i8] c"GLSL\3A\20\20\20\20\25s"
@.__str$14e = private global [12 x i8] c"Vendor\3A\20\20\20\25s"
@.__str$14f = private global [12 x i8] c"Render\3A\20\20\20\25s"
@.__str$150 = private global [12 x i8] c"CtxFlags\3A\20\25d"
@.__str$151 = private global [30 x i8] c"Number\20of\20extensions\3A\20\20\20\20\20\20\20\25d"
@.__str$152 = private global [9 x i8] c"View\23\23Ext"
@.__str$153 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$154 = private global [30 x i8] c"Number\20of\20WGL\20extensions\3A\20\20\20\25d"
@.__str$155 = private global [9 x i8] c"View\23\23WGL"
@.__str$156 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$157 = private global [33 x i8] c"Number\20of\20functions\20loaded\3A\20\25d\2F\25d"
@.__str$158 = private global [16 x i8] c"Loaded\20Functions"
@.__str$159 = private global [20 x i8] c"Functions\23\23\23FuncLoad"
@.__str$15a = private global [9 x i8] c"\25s\20\40\200x\25X"
@.__str$15b = private global [2 x i8] c"\25t"
@.__str$15c = private global [2 x i8] c"\25t"
@.__str$15d = private global [2 x i8] c"\25d"
@.__str$15e = private global [4 x i8] c"true"
@.__str$15f = private global [5 x i8] c"false"
@.__str$160 = private global [10 x i8] c"Loaded\3A\20\25s"
@.__str$161 = private global [29 x i8] c"Number\20of\20loaded\20textures\3A\20\25d"
@.__str$162 = private global [13 x i8] c"View\23\23Texture"
@.__str$163 = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$164 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$165 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$166 = private global [15 x i8] c"Extensions\23\23Ext"
@.__str$167 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$168 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$169 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$16a = private global [14 x i8] c"WGL\20Extensions"
@.__str$16b = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$16c = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$16d = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$16e = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$16f = private global [14 x i8] c"Win32Vars\20Info"
@.__str$170 = private global [27 x i8] c"Application\20Handle\3A\20\20\20\200x\25X"
@.__str$171 = private global [27 x i8] c"Window\20Handle\3A\20\20\20\20\20\20\20\20\200x\25X"
@.__str$172 = private global [35 x i8] c"Window\20Size\3A\20\20\20\20\20\20\20\20\20\20\20\7B\25.3f\2C\20\25.3f\7D"
@.__str$173 = private global [27 x i8] c"Device\20Context\20Handle\3A\200x\25X"
@.__str$174 = private global [6 x i8] c"XInput"
@.__str$175 = private global [11 x i8] c"Version\3A\20\25s"
@.__str$176 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$177 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$178 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$179 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$17a = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$17b = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$17c = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$17d = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$17e = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$17f = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$180 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$181 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$182 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$183 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$184 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$185 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$186 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$187 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$188 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$189 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$18a = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$18b = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$18c = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$18d = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$18e = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$18f = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$190 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$191 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$192 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$193 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$194 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$195 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$196 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$197 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$198 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$199 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$19a = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$19b = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$19c = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$19d = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$19e = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$19f = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a0 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a1 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a2 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a3 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a4 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a5 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a6 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a7 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a8 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1a9 = private global [332 x i8] c"\23version\20330\0D\0A\20\20\20\20\20\20\20\20uniform\20mat4\20ProjMtx\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec2\20Position\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec2\20UV\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec4\20Color\3B\0D\0A\20\20\20\20\20\20\20\20out\20vec2\20Frag_UV\3B\0D\0A\20\20\20\20\20\20\20\20out\20vec4\20Frag_Color\3B\0D\0A\20\20\20\20\20\20\20\20void\20main\28\29\0D\0A\20\20\20\20\20\20\20\20\7B\0D\0A\20\20\20\20\20\20\20\20\20\20\20Frag_UV\20\3D\20UV\3B\0D\0A\20\20\20\20\20\20\20\20\20\20\20Frag_Color\20\3D\20Color\3B\0D\0A\20\20\20\20\20\20\20\20\20\20\20gl_Position\20\3D\20ProjMtx\20\2A\20vec4\28Position.xy\2C0\2C1\29\3B\0D\0A\20\20\20\20\20\20\20\20\7D"
@.__str$1aa = private global [243 x i8] c"\23version\20330\0D\0A\20\20\20\20\20\20\20\20uniform\20sampler2D\20Texture\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec2\20Frag_UV\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec4\20Frag_Color\3B\0D\0A\20\20\20\20\20\20\20\20out\20vec4\20Out_Color\3B\0D\0A\20\20\20\20\20\20\20\20void\20main\28\29\0D\0A\20\20\20\20\20\20\20\20\7B\0D\0A\20\20\20\20\20\20\20\20\20\20\20Out_Color\20\3D\20Frag_Color\20\2A\20texture\28\20Texture\2C\20Frag_UV.st\29\3B\0D\0A\20\20\20\20\20\20\20\20\7D"
@.__str$1ab = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ac = private global [6 x i8] c"FUUUCK"
@.__str$1ad = private global [7 x i8] c"Texture"
@.__str$1ae = private global [7 x i8] c"Texture"
@.__str$1af = private global [7 x i8] c"ProjMtx"
@.__str$1b0 = private global [7 x i8] c"ProjMtx"
@.__str$1b1 = private global [8 x i8] c"Position"
@.__str$1b2 = private global [8 x i8] c"Position"
@.__str$1b3 = private global [2 x i8] c"UV"
@.__str$1b4 = private global [2 x i8] c"UV"
@.__str$1b5 = private global [5 x i8] c"Color"
@.__str$1b6 = private global [5 x i8] c"Color"
@.__str$1b7 = private global [8 x i8] c"Position"
@.__str$1b8 = private global [2 x i8] c"UV"
@.__str$1b9 = private global [5 x i8] c"Color"
@.__str$1ba = private global [8 x i8] c"Position"
@.__str$1bb = private global [2 x i8] c"UV"
@.__str$1bc = private global [5 x i8] c"Color"
@.__str$1bd = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1be = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1bf = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c0 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c1 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c2 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c3 = private global [7 x i8] c"Texture"
@.__str$1c4 = private global [7 x i8] c"ProjMtx"
@.__str$1c5 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c6 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c7 = private global [27 x i8] c"W\3A\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c8 = private global [4 x i8] c"TEST"
@.__str$1c9 = private global [14 x i8] c"xinput1_4.dll\00"
@.__str$1ca = private global [14 x i8] c"xinput1_3.dll\00"
@.__str$1cb = private global [16 x i8] c"xinput9_1_0.dll\00"
@.__str$1cc = private global [6 x i8] c"Enable"
@.__str$1cd = private global [21 x i8] c"GetBatteryInformation"
@.__str$1ce = private global [15 x i8] c"GetCapabilities"
@.__str$1cf = private global [12 x i8] c"GetKeystroke"
@.__str$1d0 = private global [8 x i8] c"GetState"
@.__str$1d1 = private global [8 x i8] c"SetState"
@.__str$1d2 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1d3 = private global [25 x i8] c"strconv\3A\20invalid\20bit_size"
@.__str$1d4 = private global [3 x i8] c"NaN"
@.__str$1d5 = private global [4 x i8] c"-Inf"
@.__str$1d6 = private global [4 x i8] c"\2BInf"
@.__str$1d7 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1d8 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1d9 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1da = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1db = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1dc = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1dd = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1de = private global [48 x i8] c"strconv\3A\20e\2FE\20float\20printing\20is\20not\20yet\20supported"
@.__str$1df = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e0 = private global [48 x i8] c"strconv\3A\20g\2FG\20float\20printing\20is\20not\20yet\20supported"
@.__str$1e1 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e2 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e3 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e4 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e5 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e6 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e7 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e8 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1e9 = private global [41 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size"
@.__str$1ea = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1eb = private global [43 x i8] c"strconv\3A\20illegal\20base\20passed\20to\20append_bits"
@.__str$1ec = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1ed = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1ee = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1ef = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f0 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f1 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f2 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f3 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f4 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f5 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f6 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f7 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f8 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1f9 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1fa = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1fb = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1fc = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1fd = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cstrconv.odin"
@.__str$1fe = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$1ff = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$200 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$201 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$202 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$203 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$204 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$205 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$206 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$207 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$208 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$209 = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$20a = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$20b = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$20c = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$20d = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$20e = private global [25 x i8] c"E\3A\5COdin\5Ccore\5Cdecimal.odin"
@.__str$20f = private global [5 x i8] c"Named"
@.__str$210 = private global [4 x i8] c"name"
@.__str$211 = private global [4 x i8] c"base"
@.__str$212 = private global [9 x i8] c"Type_Info"
@.__str$213 = private global [5 x i8] c"Named"
@.__str$214 = private global [7 x i8] c"Integer"
@.__str$215 = private global [5 x i8] c"Float"
@.__str$216 = private global [6 x i8] c"String"
@.__str$217 = private global [7 x i8] c"Boolean"
@.__str$218 = private global [3 x i8] c"Any"
@.__str$219 = private global [7 x i8] c"Pointer"
@.__str$21a = private global [9 x i8] c"Procedure"
@.__str$21b = private global [5 x i8] c"Array"
@.__str$21c = private global [13 x i8] c"Dynamic_Array"
@.__str$21d = private global [5 x i8] c"Slice"
@.__str$21e = private global [6 x i8] c"Vector"
@.__str$21f = private global [5 x i8] c"Tuple"
@.__str$220 = private global [6 x i8] c"Struct"
@.__str$221 = private global [9 x i8] c"Raw_Union"
@.__str$222 = private global [5 x i8] c"Union"
@.__str$223 = private global [4 x i8] c"Enum"
@.__str$224 = private global [3 x i8] c"Map"
@.__str$225 = private global [7 x i8] c"Integer"
@.__str$226 = private global [4 x i8] c"size"
@.__str$227 = private global [6 x i8] c"signed"
@.__str$228 = private global [5 x i8] c"Float"
@.__str$229 = private global [4 x i8] c"size"
@.__str$22a = private global [6 x i8] c"String"
@.__str$22b = private global [7 x i8] c"Boolean"
@.__str$22c = private global [3 x i8] c"Any"
@.__str$22d = private global [7 x i8] c"Pointer"
@.__str$22e = private global [4 x i8] c"elem"
@.__str$22f = private global [9 x i8] c"Procedure"
@.__str$230 = private global [6 x i8] c"params"
@.__str$231 = private global [7 x i8] c"results"
@.__str$232 = private global [8 x i8] c"variadic"
@.__str$233 = private global [10 x i8] c"convention"
@.__str$234 = private global [18 x i8] c"Calling_Convention"
@.__str$235 = private global [4 x i8] c"ODIN"
@.__str$236 = private global [1 x i8] c"C"
@.__str$237 = private global [3 x i8] c"STD"
@.__str$238 = private global [4 x i8] c"FAST"
@.__str$239 = private global [5 x i8] c"Array"
@.__str$23a = private global [4 x i8] c"elem"
@.__str$23b = private global [9 x i8] c"elem_size"
@.__str$23c = private global [5 x i8] c"count"
@.__str$23d = private global [13 x i8] c"Dynamic_Array"
@.__str$23e = private global [4 x i8] c"elem"
@.__str$23f = private global [9 x i8] c"elem_size"
@.__str$240 = private global [5 x i8] c"Slice"
@.__str$241 = private global [4 x i8] c"elem"
@.__str$242 = private global [9 x i8] c"elem_size"
@.__str$243 = private global [6 x i8] c"Vector"
@.__str$244 = private global [4 x i8] c"elem"
@.__str$245 = private global [9 x i8] c"elem_size"
@.__str$246 = private global [5 x i8] c"count"
@.__str$247 = private global [5 x i8] c"align"
@.__str$248 = private global [5 x i8] c"Tuple"
@.__str$249 = private global [6 x i8] c"record"
@.__str$24a = private global [16 x i8] c"Type_Info_Record"
@.__str$24b = private global [5 x i8] c"types"
@.__str$24c = private global [5 x i8] c"names"
@.__str$24d = private global [7 x i8] c"offsets"
@.__str$24e = private global [4 x i8] c"size"
@.__str$24f = private global [5 x i8] c"align"
@.__str$250 = private global [6 x i8] c"packed"
@.__str$251 = private global [7 x i8] c"ordered"
@.__str$252 = private global [12 x i8] c"custom_align"
@.__str$253 = private global [6 x i8] c"Struct"
@.__str$254 = private global [6 x i8] c"record"
@.__str$255 = private global [9 x i8] c"Raw_Union"
@.__str$256 = private global [6 x i8] c"record"
@.__str$257 = private global [5 x i8] c"Union"
@.__str$258 = private global [13 x i8] c"common_fields"
@.__str$259 = private global [13 x i8] c"variant_names"
@.__str$25a = private global [13 x i8] c"variant_types"
@.__str$25b = private global [4 x i8] c"size"
@.__str$25c = private global [5 x i8] c"align"
@.__str$25d = private global [5 x i8] c"types"
@.__str$25e = private global [5 x i8] c"names"
@.__str$25f = private global [7 x i8] c"offsets"
@.__str$260 = private global [4 x i8] c"Enum"
@.__str$261 = private global [4 x i8] c"base"
@.__str$262 = private global [5 x i8] c"names"
@.__str$263 = private global [6 x i8] c"values"
@.__str$264 = private global [20 x i8] c"Type_Info_Enum_Value"
@.__str$265 = private global [1 x i8] c"f"
@.__str$266 = private global [1 x i8] c"i"
@.__str$267 = private global [3 x i8] c"Map"
@.__str$268 = private global [3 x i8] c"key"
@.__str$269 = private global [5 x i8] c"value"
@.__str$26a = private global [16 x i8] c"generated_struct"
@.__str$26b = private global [5 x i8] c"count"
@.__str$26c = private global [11 x i8] c"DebugSource"
@.__str$26d = private global [3 x i8] c"Api"
@.__str$26e = private global [12 x i8] c"WindowSystem"
@.__str$26f = private global [14 x i8] c"ShaderCompiler"
@.__str$270 = private global [10 x i8] c"ThirdParty"
@.__str$271 = private global [11 x i8] c"Application"
@.__str$272 = private global [5 x i8] c"Other"
@.__str$273 = private global [8 x i8] c"DontCare"
@.__str$274 = private global [9 x i8] c"DebugType"
@.__str$275 = private global [5 x i8] c"Error"
@.__str$276 = private global [18 x i8] c"DeprecatedBehavior"
@.__str$277 = private global [17 x i8] c"UndefinedBehavior"
@.__str$278 = private global [11 x i8] c"Portability"
@.__str$279 = private global [11 x i8] c"Performance"
@.__str$27a = private global [6 x i8] c"Marker"
@.__str$27b = private global [9 x i8] c"PushGroup"
@.__str$27c = private global [8 x i8] c"PopGroup"
@.__str$27d = private global [5 x i8] c"Other"
@.__str$27e = private global [8 x i8] c"DontCare"
@.__str$27f = private global [13 x i8] c"DebugSeverity"
@.__str$280 = private global [4 x i8] c"High"
@.__str$281 = private global [6 x i8] c"Medium"
@.__str$282 = private global [3 x i8] c"Low"
@.__str$283 = private global [12 x i8] c"Notification"
@.__str$284 = private global [8 x i8] c"DontCare"
@.__str$285 = private global [9 x i8] c"TextureID"
@.__str$286 = private global [4 x i8] c"Vec2"
@.__str$287 = private global [1 x i8] c"x"
@.__str$288 = private global [1 x i8] c"y"
@.__str$289 = private global [4 x i8] c"Vec4"
@.__str$28a = private global [1 x i8] c"x"
@.__str$28b = private global [1 x i8] c"y"
@.__str$28c = private global [1 x i8] c"z"
@.__str$28d = private global [1 x i8] c"w"
@.__str$28e = private global [4 x i8] c"mode"
@.__str$28f = private global [5 x i8] c"count"
@.__str$290 = private global [5 x i8] c"type_"
@.__str$291 = private global [7 x i8] c"indices"
@.__str$292 = private global [6 x i8] c"buffer"
@.__str$293 = private global [5 x i8] c"index"
@.__str$294 = private global [4 x i8] c"size"
@.__str$295 = private global [4 x i8] c"type"
@.__str$296 = private global [10 x i8] c"normalized"
@.__str$297 = private global [6 x i8] c"stride"
@.__str$298 = private global [7 x i8] c"pointer"
@.__str$299 = private global [5 x i8] c"index"
@.__str$29a = private global [5 x i8] c"count"
@.__str$29b = private global [7 x i8] c"buffers"
@.__str$29c = private global [6 x i8] c"target"
@.__str$29d = private global [4 x i8] c"size"
@.__str$29e = private global [4 x i8] c"data"
@.__str$29f = private global [5 x i8] c"usage"
@.__str$2a0 = private global [6 x i8] c"target"
@.__str$2a1 = private global [6 x i8] c"buffer"
@.__str$2a2 = private global [1 x i8] c"n"
@.__str$2a3 = private global [6 x i8] c"buffer"
@.__str$2a4 = private global [6 x i8] c"source"
@.__str$2a5 = private global [4 x i8] c"type"
@.__str$2a6 = private global [8 x i8] c"severity"
@.__str$2a7 = private global [5 x i8] c"count"
@.__str$2a8 = private global [3 x i8] c"ids"
@.__str$2a9 = private global [7 x i8] c"enabled"
@.__str$2aa = private global [8 x i8] c"callback"
@.__str$2ab = private global [9 x i8] c"userParam"
@.__str$2ac = private global [24 x i8] c"DebugMessageCallbackProc"
@.__str$2ad = private global [6 x i8] c"source"
@.__str$2ae = private global [4 x i8] c"type"
@.__str$2af = private global [2 x i8] c"id"
@.__str$2b0 = private global [8 x i8] c"severity"
@.__str$2b1 = private global [6 x i8] c"length"
@.__str$2b2 = private global [7 x i8] c"message"
@.__str$2b3 = private global [9 x i8] c"userParam"
@.__str$2b4 = private global [6 x i8] c"shader"
@.__str$2b5 = private global [5 x i8] c"pname"
@.__str$2b6 = private global [6 x i8] c"params"
@.__str$2b7 = private global [6 x i8] c"shader"
@.__str$2b8 = private global [9 x i8] c"maxLength"
@.__str$2b9 = private global [6 x i8] c"length"
@.__str$2ba = private global [7 x i8] c"infoLog"
@.__str$2bb = private global [4 x i8] c"name"
@.__str$2bc = private global [5 x i8] c"index"
@.__str$2bd = private global [4 x i8] c"mode"
@.__str$2be = private global [7 x i8] c"modeRGB"
@.__str$2bf = private global [9 x i8] c"modeAlpha"
@.__str$2c0 = private global [6 x i8] c"shader"
@.__str$2c1 = private global [11 x i8] c"shader_type"
@.__str$2c2 = private global [6 x i8] c"shader"
@.__str$2c3 = private global [5 x i8] c"count"
@.__str$2c4 = private global [3 x i8] c"str"
@.__str$2c5 = private global [6 x i8] c"length"
@.__str$2c6 = private global [7 x i8] c"program"
@.__str$2c7 = private global [6 x i8] c"shader"
@.__str$2c8 = private global [7 x i8] c"program"
@.__str$2c9 = private global [7 x i8] c"program"
@.__str$2ca = private global [7 x i8] c"texture"
@.__str$2cb = private global [3 x i8] c"loc"
@.__str$2cc = private global [2 x i8] c"v0"
@.__str$2cd = private global [3 x i8] c"loc"
@.__str$2ce = private global [2 x i8] c"v0"
@.__str$2cf = private global [2 x i8] c"v1"
@.__str$2d0 = private global [3 x i8] c"loc"
@.__str$2d1 = private global [2 x i8] c"v0"
@.__str$2d2 = private global [2 x i8] c"v1"
@.__str$2d3 = private global [2 x i8] c"v2"
@.__str$2d4 = private global [3 x i8] c"loc"
@.__str$2d5 = private global [2 x i8] c"v0"
@.__str$2d6 = private global [2 x i8] c"v1"
@.__str$2d7 = private global [2 x i8] c"v2"
@.__str$2d8 = private global [2 x i8] c"v3"
@.__str$2d9 = private global [3 x i8] c"loc"
@.__str$2da = private global [2 x i8] c"v0"
@.__str$2db = private global [3 x i8] c"loc"
@.__str$2dc = private global [2 x i8] c"v0"
@.__str$2dd = private global [2 x i8] c"v1"
@.__str$2de = private global [3 x i8] c"loc"
@.__str$2df = private global [2 x i8] c"v0"
@.__str$2e0 = private global [2 x i8] c"v1"
@.__str$2e1 = private global [2 x i8] c"v2"
@.__str$2e2 = private global [3 x i8] c"loc"
@.__str$2e3 = private global [2 x i8] c"v0"
@.__str$2e4 = private global [2 x i8] c"v1"
@.__str$2e5 = private global [2 x i8] c"v2"
@.__str$2e6 = private global [2 x i8] c"v3"
@.__str$2e7 = private global [3 x i8] c"loc"
@.__str$2e8 = private global [5 x i8] c"count"
@.__str$2e9 = private global [9 x i8] c"transpose"
@.__str$2ea = private global [5 x i8] c"value"
@.__str$2eb = private global [7 x i8] c"program"
@.__str$2ec = private global [4 x i8] c"name"
@.__str$2ed = private global [7 x i8] c"program"
@.__str$2ee = private global [4 x i8] c"name"
@.__str$2ef = private global [7 x i8] c"Texture"
@.__str$2f0 = private global [13 x i8] c"XInputVersion"
@.__str$2f1 = private global [9 x i8] c"NotLoaded"
@.__str$2f2 = private global [10 x i8] c"Version1_4"
@.__str$2f3 = private global [10 x i8] c"Version1_3"
@.__str$2f4 = private global [12 x i8] c"Version9_1_0"
@.__str$2f5 = private global [5 x i8] c"Error"
@.__str$2f6 = private global [17 x i8] c"0123456789abcdefx"
@.__str$2f7 = private global [17 x i8] c"0123456789ABCDEFX"
