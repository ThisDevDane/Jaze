%..string = type {i8*, i64} ; Basic_string
%..rawptr = type i8* ; Basic_rawptr
%..complex64 = type {float, float} ; Basic_complex64
%..complex128 = type {double, double} ; Basic_complex128
%..quaternion128 = type {float, float, float, float} ; Basic_quaternion128
%..quaternion256 = type {double, double, double, double} ; Basic_quaternion256
%..any = type {%Type_Info*, %..rawptr} ; Basic_any
declare void @llvm.dbg.declare(metadata, metadata, metadata) nounwind readnone 
%Type_Info_Record = type {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}, i64, i64, i1, i1, i1}
%Type_Info = type {[0 x <8 x i8>], [136 x i8], i64}
%Type_Info.Named = type {%..string, %Type_Info*}
%Type_Info.Integer = type {i64, i1}
%Type_Info.Float = type {i64}
%Type_Info.Complex = type {i64}
%Type_Info.Quaternion = type {i64}
%Type_Info.String = type {}
%Type_Info.Boolean = type {}
%Type_Info.Any = type {}
%Type_Info.Pointer = type {%Type_Info*}
%Type_Info.Procedure = type {%Type_Info*, %Type_Info*, i1, i64}
%Type_Info.Array = type {%Type_Info*, i64, i64}
%Type_Info.Dynamic_Array = type {%Type_Info*, i64}
%Type_Info.Slice = type {%Type_Info*, i64}
%Type_Info.Vector = type {%Type_Info*, i64, i64, i64}
%Type_Info.Tuple = type {%Type_Info_Record}
%Type_Info.Struct = type {%Type_Info_Record}
%Type_Info.Raw_Union = type {%Type_Info_Record}
%Type_Info.Union = type {{{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {%..string*, i64, i64}, {%Type_Info**, i64, i64}, i64, i64}
%Type_Info.Enum = type {%Type_Info*, {%..string*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}}
%Type_Info.Map = type {%Type_Info*, %Type_Info*, %Type_Info*, i64}
%Allocator = type {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr}
%Context = type {i64, %Allocator, %..rawptr, i64}
%Raw_Any = type {%Type_Info*, %..rawptr}
%Raw_String = type {i8*, i64}
%Raw_Slice = type {%..rawptr, i64, i64}
%Raw_Dynamic_Array = type {%..rawptr, i64, i64, %Allocator}
%Raw_Dynamic_Map = type {{i64*, i64, i64,%Allocator}, %Raw_Dynamic_Array}
%__Map_Key = type {i64, %..string}
%__Map_Find_Result = type {i64, i64, i64}
%__Map_Entry_Header = type {%__Map_Key, i64}
%__Map_Header = type {%Raw_Dynamic_Map*, i1, i64, i64, i64}
%main-2.Win32Vars_t = type {%jaze_gl-12.OpenGLVars_t, %..rawptr, %..rawptr, {[0 x <8 x i8>], [2 x float]}, %..rawptr}
%fmt-4.Fmt_Info = type {%..any, i64, i64, {i8*, i64, i64}*, i1, i1, i1, i1, i1, i1, i1, i1, i1}
%utf8-5.Accept_Range = type {i8, i8}
%windows-6.Point = type {i32, i32}
%windows-6.WndClassExA = type {i32, i32, i64 (%..rawptr, i32, i64, i64)*, i32, i32, %..rawptr, %..rawptr, %..rawptr, %..rawptr, i8*, i8*, %..rawptr}
%windows-6.Msg = type {%..rawptr, i32, i64, i64, i32, %windows-6.Point}
%windows-6.Rect = type {i32, i32, i32, i32}
%windows-6.PIXELFORMATDESCRIPTOR = type {i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32}
%imgui-8.DrawCmd = type {i32, %imgui-8.Vec4, %..rawptr, void (%imgui-8.DrawList*, %imgui-8.DrawCmd*)*, %..rawptr}
%imgui-8.Vec2 = type {float, float}
%imgui-8.Vec4 = type {float, float, float, float}
%imgui-8.DrawVert = type {%imgui-8.Vec2, %imgui-8.Vec2, i32}
%imgui-8.DrawData = type {i1, %imgui-8.DrawList**, i32, i32, i32}
%imgui-8.FontAtlas = type {}
%imgui-8.DrawList = type {}
%imgui-8.GuiStyle = type {float, %imgui-8.Vec2, %imgui-8.Vec2, float, i32, float, %imgui-8.Vec2, float, %imgui-8.Vec2, %imgui-8.Vec2, %imgui-8.Vec2, float, float, float, float, float, float, %imgui-8.Vec2, %imgui-8.Vec2, i1, i1, float, [43 x %imgui-8.Vec4]}
%imgui-8.GuiIO = type {%imgui-8.Vec2, float, float, i8*, i8*, float, float, float, [19 x i32], float, float, %..rawptr, %imgui-8.FontAtlas*, float, i1, %imgui-8.Vec2, %imgui-8.Vec2, %imgui-8.Vec2, i1, i1, i1, i1, void (%imgui-8.DrawData*)*, i8* ()*, void (i8*)*, %..rawptr (i64)*, void (%..rawptr)*, void (i32, i32)*, %..rawptr, %imgui-8.Vec2, [5 x i1], float, i1, i1, i1, i1, i1, [512 x i1], [17 x i16], i1, i1, i1, float, i32, i32, i32, i32, %imgui-8.Vec2, %imgui-8.Vec2, [5 x i1], [5 x %imgui-8.Vec2], [5 x float], [5 x i1], [5 x i1], [5 x i1], [5 x float], [5 x float], [5 x float], [512 x float], [512 x float]}
%jaze_win32-11.MONITORINFO = type {i32, %windows-6.Rect, %windows-6.Rect, i32}
%jaze_win32-11.WINDOWPLACEMENT = type {i32, i32, i32, %windows-6.Point, %windows-6.Point, %windows-6.Rect}
%jaze_gl-12.Shader = type {%..string, i32, i1}
%jaze_gl-12.Program = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}, %jaze_gl-12.Shader, %jaze_gl-12.Shader, i32}
%jaze_gl-12.OpenGLVars_t = type {{%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}, %..string, %..string, %..string, %..string, %..rawptr, i32, i32, i32, i32, i32, i32, i32}
%jaze_gl-12.DebugFunctionLoadStatus = type {%..string, i64, %Type_Info*, i1}
%jaze_gl-12.DebugInfo_t = type {{%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}, i64, i32, i32}
%jaze_wgl-13.Attrib = type {i32, i32}
%jaze_wgl-13.TryGetExtensionList = type {{{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}}
%jaze_imgui-15.State_t = type {%jaze_gl-12.Program, i32, i32, i32, i32, i32}
%jaze_xinput-16.BatteryInformation = type {i8, i8}
%jaze_xinput-16.Capabilities = type {i8, i8, i16, %jaze_xinput-16.GamepadState, %jaze_xinput-16.VibrationState}
%jaze_xinput-16.State = type {i32, %jaze_xinput-16.GamepadState}
%jaze_xinput-16.GamepadState = type {i16, i8, i8, i16, i16, i16, i16}
%jaze_xinput-16.VibrationState = type {i16, i16}
%jaze_xinput-16.KeyStroke = type {i16, i16, i16, i8, i8}
%jaze_xinput-16.DebugFunctionLoadStatus = type {%..string, i64, %Type_Info*, i1}
%jaze_xinput-16.DebugInfo_t = type {{%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}, i64, i32, i32}
%strconv-21.Decimal_Slice = type {{i8*, i64, i64}, i64, i64, i1}
%strconv-21.Float_Info = type {i64, i64, i64}
%decimal-23.Decimal = type {i64, i64, [384 x i8], i1, i1}

declare ccc void @llvm.assume(i1) 
declare ccc void @llvm.debugtrap() 
declare ccc void @llvm.trap() 
declare ccc i64 @llvm.readcyclecounter() 
declare ccc float @llvm.sqrt.f32(float) 
declare ccc double @llvm.sqrt.f64(double) 
declare ccc i32 @GetLastError() 
declare ccc i32 @GetCursorPos(%windows-6.Point*) 
declare ccc i32 @ScreenToClient(%..rawptr, %windows-6.Point*) 
declare ccc %..rawptr @GetModuleHandleA(i8*) 
declare ccc void @PostQuitMessage(i32) 
declare ccc i32 @SetWindowTextA(%..rawptr, i8*) 
declare ccc i32 @QueryPerformanceFrequency(i64*) 
declare ccc i32 @QueryPerformanceCounter(i64*) 
declare ccc i16 @RegisterClassExA(%windows-6.WndClassExA*) 
declare ccc %..rawptr @CreateWindowExA(i32, i8*, i8*, i32, i32, i32, i32, i32, %..rawptr, %..rawptr, %..rawptr, %..rawptr) 
declare ccc i32 @TranslateMessage(%windows-6.Msg*) 
declare ccc i64 @DispatchMessageA(%windows-6.Msg*) 
declare ccc i32 @PeekMessageA(%windows-6.Msg*, %..rawptr, i32, i32, i32) 
declare ccc i64 @DefWindowProcA(%..rawptr, i32, i64, i64) 
declare ccc i32 @AdjustWindowRect(%windows-6.Rect*, i32, i32) 
declare ccc %..rawptr @GetActiveWindow() 
declare ccc i32 @DestroyWindow(%..rawptr) 
declare ccc i32 @DescribePixelFormat(%..rawptr, i32, i32, %windows-6.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @GetCurrentThreadId() 
declare ccc %..rawptr @GetStdHandle(i32) 
declare ccc i32 @WriteFile(%..rawptr, %..rawptr, i32, i32*, %..rawptr) 
declare ccc i32 @SetHandleInformation(%..rawptr, i32, i32) 
declare ccc %..rawptr @HeapAlloc(%..rawptr, i32, i64) 
declare ccc %..rawptr @HeapReAlloc(%..rawptr, i32, %..rawptr, i64) 
declare ccc i32 @HeapFree(%..rawptr, i32, %..rawptr) 
declare ccc %..rawptr @GetProcessHeap() 
declare ccc %..rawptr @LoadLibraryA(i8*) 
declare ccc void @FreeLibrary(%..rawptr) 
declare ccc void ()* @GetProcAddress(%..rawptr, i8*) 
declare ccc i32 @GetClientRect(%..rawptr, %windows-6.Rect*) 
declare ccc %..rawptr @GetDC(%..rawptr) 
declare ccc i32 @SetPixelFormat(%..rawptr, i32, %windows-6.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @ChoosePixelFormat(%..rawptr, %windows-6.PIXELFORMATDESCRIPTOR*) 
declare ccc i32 @SwapBuffers(%..rawptr) 
declare ccc i32 @ReleaseDC(%..rawptr, %..rawptr) 
declare ccc i16 @GetAsyncKeyState(i32) 
declare ccc %..rawptr @wglCreateContext(%..rawptr) 
declare ccc i32 @wglMakeCurrent(%..rawptr, %..rawptr) 
declare ccc void ()* @wglGetProcAddress(i8*) 
declare ccc i32 @wglDeleteContext(%..rawptr) 
declare ccc %imgui-8.GuiIO* @igGetIO() 
declare ccc %imgui-8.GuiStyle* @igGetStyle() 
declare ccc void @igNewFrame() 
declare ccc void @igRender() 
declare ccc void @igShowTestWindow(i1*) 
declare ccc void @igEnd() 
declare ccc void @igEndChild() 
declare ccc void @igSetNextWindowPosCenter(i32) 
declare ccc void @igPushStyleVar(i32, float) 
declare ccc void @igPopStyleVar(i32) 
declare ccc void @igPushTextWrapPos(float) 
declare ccc void @igPopTextWrapPos() 
declare ccc void @igSeparator() 
declare ccc void @igSameLine(float, float) 
declare ccc void @igIndent(float) 
declare ccc void @igUnindent(float) 
declare ccc void @igColumns(i32, i8*, i1) 
declare ccc void @igNextColumn() 
declare ccc void @igPushIdInt(i32) 
declare ccc void @igPopId() 
declare ccc void @igBeginTooltip() 
declare ccc void @igEndTooltip() 
declare ccc i1 @igBeginMainMenuBar() 
declare ccc void @igEndMainMenuBar() 
declare ccc void @igEndMenu() 
declare ccc i1 @igIsItemHovered() 
declare ccc void @ImGuiIO_AddInputCharacter(i16) 
declare ccc void @ImFontAtlas_GetTexDataAsRGBA32(%imgui-8.FontAtlas*, i8**, i32*, i32*, i32*) 
declare ccc void @ImFontAtlas_SetTexID(%imgui-8.FontAtlas*, %..rawptr) 
declare ccc i32 @ImDrawList_GetVertexBufferSize(%imgui-8.DrawList*) 
declare ccc %imgui-8.DrawVert* @ImDrawList_GetVertexPtr(%imgui-8.DrawList*, i32) 
declare ccc i32 @ImDrawList_GetIndexBufferSize(%imgui-8.DrawList*) 
declare ccc i16* @ImDrawList_GetIndexPtr(%imgui-8.DrawList*, i32) 
declare ccc i32 @ImDrawList_GetCmdSize(%imgui-8.DrawList*) 
declare ccc %imgui-8.DrawCmd* @ImDrawList_GetCmdPtr(%imgui-8.DrawList*, i32) 
declare ccc i32 @GetMonitorInfoA(%..rawptr, %jaze_win32-11.MONITORINFO*) 
declare ccc %..rawptr @MonitorFromWindow(%..rawptr, i32) 
declare ccc void @SetWindowPos(%..rawptr, %..rawptr, i32, i32, i32, i32, i32) 
declare ccc i32 @GetWindowPlacement(%..rawptr, %jaze_win32-11.WINDOWPLACEMENT*) 
declare ccc i32 @SetWindowPlacement(%..rawptr, %jaze_win32-11.WINDOWPLACEMENT*) 
declare ccc i64 @GetWindowLongPtrA(%..rawptr, i32) 
declare ccc i64 @SetWindowLongPtrA(%..rawptr, i32, i64) 
declare ccc void @glViewport(i32, i32, i32, i32) 
declare ccc void @glClearColor(float, float, float, float) 
declare ccc void @glScissor(i32, i32, i32, i32) 
declare ccc i8* @glGetString(i32) 
declare ccc void @glTexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, %..rawptr) 
declare ccc void @glTexParameteri(i32, i32, i32) 
declare ccc void @glBindTexture(i32, i32) 
declare ccc void @glGenTextures(i32, i32*) 
declare ccc void @glBlendFunc(i32, i32) 
declare ccc void @glGetIntegerv(i32, i32*) 
declare ccc void @glEnable(i32) 
declare ccc void @glDisable(i32) 
declare ccc void @glClear(i32) 
declare ccc void @llvm.memset.p0i8.i64(%..rawptr, i8, i64, i32, i1) 
declare ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) 
declare ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) 
declare ccc i1 @igBegin(i8*, i1*, i32) 
declare ccc i1 @igBeginChild(i8*, i64, i1, i32) 
declare ccc void @igText(i8*) 
declare ccc i1 @igButton(i8*, i64) 
declare ccc void @igImage(%..rawptr, i64, i64, i64, %imgui-8.Vec4, %imgui-8.Vec4) 
declare ccc i1 @igCollapsingHeader(i8*, i32) 
declare ccc i1 @igBeginMenu(i8*, i1) 
declare ccc i1 @igMenuItem(i8*, i8*, i1, i1) 

define %Type_Info* @.type_info_base(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%3 = load %Type_Info*, %Type_Info** %0, align 8
	%4 = icmp eq %Type_Info* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	store %Type_Info* zeroinitializer, %Type_Info** %1
		%5 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %5, %Type_Info** %1
	; TypeMatchStmt
	%6 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%7 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	%8 = load i64, i64* %7, align 8
	%9 = bitcast %Type_Info* %6 to %..rawptr
	%10 = icmp eq i64 %8, 1
	br i1 %10, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	br label %typematch.done-5

typematch.body-4:
	%11 = bitcast %..rawptr %9 to %Type_Info.Named*
	%12 = load %Type_Info.Named, %Type_Info.Named* %11, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %2
	store %Type_Info.Named %12, %Type_Info.Named* %2
	; AssignStmt
	; SelectorExpr
	%13 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2, i64 0, i32 1
	%14 = load %Type_Info*, %Type_Info** %13, align 8
	store %Type_Info* %14, %Type_Info** %1
	br label %typematch.done-5

typematch.done-5:
	; ReturnStmt
	%15 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %15
}

define %Type_Info* @.type_info_base_without_enum(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named, align 8
	%3 = alloca %Type_Info.Enum, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = icmp eq %Type_Info* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	store %Type_Info* zeroinitializer, %Type_Info** %1
		%6 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %6, %Type_Info** %1
	; TypeMatchStmt
	%7 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%8 = getelementptr inbounds %Type_Info, %Type_Info* %7, i64 0, i32 2 ; UnionTagPtr
	%9 = load i64, i64* %8, align 8
	%10 = bitcast %Type_Info* %7 to %..rawptr
	%11 = icmp eq i64 %9, 1
	br i1 %11, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	%12 = icmp eq i64 %9, 19
	br i1 %12, label %typematch.body-6, label %typematch.next-5

typematch.body-4:
	%13 = bitcast %..rawptr %10 to %Type_Info.Named*
	%14 = load %Type_Info.Named, %Type_Info.Named* %13, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %2
	store %Type_Info.Named %14, %Type_Info.Named* %2
	; AssignStmt
	; SelectorExpr
	%15 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2, i64 0, i32 1
	%16 = load %Type_Info*, %Type_Info** %15, align 8
	store %Type_Info* %16, %Type_Info** %1
	br label %typematch.done-7

typematch.next-5:
	br label %typematch.done-7

typematch.body-6:
	%17 = bitcast %..rawptr %10 to %Type_Info.Enum*
	%18 = load %Type_Info.Enum, %Type_Info.Enum* %17, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %3
	store %Type_Info.Enum %18, %Type_Info.Enum* %3
	; AssignStmt
	; SelectorExpr
	%19 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%20 = load %Type_Info*, %Type_Info** %19, align 8
	store %Type_Info* %20, %Type_Info** %1
	br label %typematch.done-7

typematch.done-7:
	; ReturnStmt
	%21 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %21
}

define void @.__check_context() {
decls-0:
	%0 = alloca %Context*, align 8
	; c
	store %Context* zeroinitializer, %Context** %0
		%1 = getelementptr inbounds %Context, %Context* @__context, i64 0
	store %Context* %1, %Context** %0
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%2 = load %Context*, %Context** %0, align 8
	%3 = getelementptr inbounds %Context, %Context* %2, i64 0
	%4 = getelementptr inbounds %Context, %Context* %3, i64 0, i32 1
	%5 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %5, align 8
	%7 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%8 = load %Context*, %Context** %0, align 8
	%9 = getelementptr inbounds %Context, %Context* %8, i64 0
	%10 = getelementptr inbounds %Context, %Context* %9, i64 0, i32 1
	%11 = call %Allocator @.default_allocator()
	store %Allocator %11, %Allocator* %10
	br label %if.done-2

if.done-2:
	; IfStmt
	; SelectorExpr
	%12 = load %Context*, %Context** %0, align 8
	%13 = getelementptr inbounds %Context, %Context* %12, i64 0
	%14 = getelementptr inbounds %Context, %Context* %13, i64 0, i32 0
	%15 = load i64, i64* %14, align 8
	%16 = icmp eq i64 %15, 0
	br i1 %16, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%17 = load %Context*, %Context** %0, align 8
	%18 = getelementptr inbounds %Context, %Context* %17, i64 0
	%19 = getelementptr inbounds %Context, %Context* %18, i64 0, i32 0
	; SelectorExpr
	%20 = call i64 @.os_windows-17.current_thread_id()
	store i64 %20, i64* %19
	br label %if.done-4

if.done-4:
	ret void
}

define %..rawptr @.alloc(i64 %size) alwaysinline {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	%2 = call %..rawptr @.alloc_align(i64 %1, i64 16)
	ret %..rawptr %2
}

define %..rawptr @.alloc_align(i64 %size, i64 %alignment) alwaysinline {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i64, align 8
	%2 = alloca %Allocator, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	store i64 zeroinitializer, i64* %1
		store i64 %alignment, i64* %1
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %2
		; SelectorExpr
	%3 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%4 = load %Allocator, %Allocator* %3, align 8
	store %Allocator %4, %Allocator* %2
	; ReturnStmt
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %5, align 8
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 1
	%8 = load %..rawptr, %..rawptr* %7, align 8
	%9 = load i64, i64* %0, align 8
	%10 = load i64, i64* %1, align 8
	%11 = call %..rawptr %6(%..rawptr %8, i8 0, i64 %9, i64 %10, %..rawptr zeroinitializer, i64 0, i64 0)
	ret %..rawptr %11
}

define void @.free_ptr_with_allocator(%Allocator %a, %..rawptr %ptr) alwaysinline {
decls-0:
	%0 = alloca %Allocator, align 8
	%1 = alloca %..rawptr, align 8
	store %Allocator zeroinitializer, %Allocator* %0
		store %Allocator %a, %Allocator* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %ptr, %..rawptr* %1
	; IfStmt
	%2 = load %..rawptr, %..rawptr* %1, align 8
	%3 = icmp eq %..rawptr %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; SelectorExpr
	%4 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%5 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %4, align 8
	%6 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %5, zeroinitializer
	br i1 %6, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load %..rawptr, %..rawptr* %1, align 8
	%12 = call %..rawptr %8(%..rawptr %10, i8 1, i64 0, i64 0, %..rawptr %11, i64 0, i64 0)
	ret void
}

define void @.free_ptr(%..rawptr %ptr) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	call void @.__check_context()
	; SelectorExpr
	%1 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%2 = load %Allocator, %Allocator* %1, align 8
	%3 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr_with_allocator(%Allocator %2, %..rawptr %3)
	ret void
}

define void @.free_all() alwaysinline {
decls-0:
	%0 = alloca %Allocator, align 8
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %0
		; SelectorExpr
	%1 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%2 = load %Allocator, %Allocator* %1, align 8
	store %Allocator %2, %Allocator* %0
	; SelectorExpr
	%3 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%4 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%6 = load %..rawptr, %..rawptr* %5, align 8
	%7 = call %..rawptr %4(%..rawptr %6, i8 2, i64 0, i64 0, %..rawptr zeroinitializer, i64 0, i64 0)
	ret void
}

define %..rawptr @.resize(%..rawptr %ptr, i64 %old_size, i64 %new_size) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	; ReturnStmt
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load i64, i64* %1, align 8
	%5 = load i64, i64* %2, align 8
	%6 = call %..rawptr @.resize_align(%..rawptr %3, i64 %4, i64 %5, i64 16)
	ret %..rawptr %6
}

define %..rawptr @.resize_align(%..rawptr %ptr, i64 %old_size, i64 %new_size, i64 %alignment) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Allocator, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	call void @.__check_context()
	; a
	store %Allocator zeroinitializer, %Allocator* %4
		; SelectorExpr
	%5 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%6 = load %Allocator, %Allocator* %5, align 8
	store %Allocator %6, %Allocator* %4
	; ReturnStmt
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load i64, i64* %2, align 8
	%12 = load i64, i64* %3, align 8
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = load i64, i64* %1, align 8
	%15 = call %..rawptr %8(%..rawptr %10, i8 3, i64 %11, i64 %12, %..rawptr %13, i64 %14, i64 0)
	ret %..rawptr %15
}

define %..rawptr @.default_resize_align(%..rawptr %old_memory, i64 %old_size, i64 %new_size, i64 %alignment) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %old_memory, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %old_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %new_size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	; IfStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = icmp eq %..rawptr %5, zeroinitializer
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%7 = load i64, i64* %2, align 8
	%8 = load i64, i64* %3, align 8
	%9 = call %..rawptr @.alloc_align(i64 %7, i64 %8)
	ret %..rawptr %9

if.done-2:
	; IfStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 0
	br i1 %11, label %if.then-3, label %if.done-4

if.then-3:
	; free
	%12 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr(%..rawptr %12)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-4:
	; IfStmt
	%13 = load i64, i64* %2, align 8
	%14 = load i64, i64* %1, align 8
	%15 = icmp eq i64 %13, %14
	br i1 %15, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	%16 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %16

if.done-6:
	; new_memory
	store %..rawptr zeroinitializer, %..rawptr* %4
		%17 = load i64, i64* %2, align 8
	%18 = load i64, i64* %3, align 8
	%19 = call %..rawptr @.alloc_align(i64 %17, i64 %18)
	store %..rawptr %19, %..rawptr* %4
	; IfStmt
	%20 = load %..rawptr, %..rawptr* %4, align 8
	%21 = icmp eq %..rawptr %20, zeroinitializer
	br i1 %21, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-8:
	%22 = load %..rawptr, %..rawptr* %4, align 8
	%23 = load %..rawptr, %..rawptr* %0, align 8
	; min
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %2, align 8
	%26 = icmp slt i64 %24, %25
	%27 = select i1 %26, i64 %24, i64 %25
	%28 = call %..rawptr @.__mem_copy(%..rawptr %22, %..rawptr %23, i64 %27)
	; free
	%29 = load %..rawptr, %..rawptr* %0, align 8
	call void @.free_ptr(%..rawptr %29)
	; ReturnStmt
	%30 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %30
}

define %..rawptr @.default_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i8, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %..rawptr, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %allocator_data, %..rawptr* %0
	store i8 zeroinitializer, i8* %1
		store i8 %mode, i8* %1
	store i64 zeroinitializer, i64* %2
		store i64 %size, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %alignment, i64* %3
	store %..rawptr zeroinitializer, %..rawptr* %4
		store %..rawptr %old_memory, %..rawptr* %4
	store i64 zeroinitializer, i64* %5
		store i64 %old_size, i64* %5
	store i64 zeroinitializer, i64* %6
		store i64 %flags, i64* %6
	; MatchStmt
	%8 = load i8, i8* %1, align 8
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%10 = icmp eq i8 %8, 1
	br i1 %10, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; ReturnStmt
	; SelectorExpr
	%11 = load i64, i64* %2, align 8
	%12 = call %..rawptr @.os_windows-17.heap_alloc(i64 %11)
	ret %..rawptr %12

match.case.next-3:
	%13 = icmp eq i8 %8, 2
	br i1 %13, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	; SelectorExpr
	%14 = load %..rawptr, %..rawptr* %4, align 8
	call void @.os_windows-17.heap_free(%..rawptr %14)
	; ReturnStmt
	ret %..rawptr zeroinitializer

match.case.next-5:
	%15 = icmp eq i8 %8, 3
	br i1 %15, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	br label %match.done-11

match.case.next-7:
	br label %match.done-11

match.fall.body-8:
	; ptr
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	%16 = load %..rawptr, %..rawptr* %4, align 8
	%17 = load i64, i64* %2, align 8
	%18 = call %..rawptr @.os_windows-17.heap_resize(%..rawptr %16, i64 %17)
	store %..rawptr %18, %..rawptr* %7
	; assert
	%19 = load %..rawptr, %..rawptr* %7, align 8
	%20 = icmp ne %..rawptr %19, zeroinitializer
	%21 = icmp eq i1 %20, false
	br i1 %21, label %builtin.assert.err-9, label %builtin.assert.done-10

builtin.assert.err-9:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$0, i64 0, i32 0), i64 42}, i64 255, i64 10, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-10

builtin.assert.done-10:
	; ReturnStmt
	%22 = load %..rawptr, %..rawptr* %7, align 8
	ret %..rawptr %22

match.done-11:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %Allocator @.default_allocator() {
decls-0:
	%0 = alloca %Allocator, align 8
	; ReturnStmt
	; CompoundLit
	store %Allocator zeroinitializer, %Allocator* %0
	store %Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* zeroinitializer, %..rawptr zeroinitializer}, %Allocator* %0
	%1 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* @.default_allocator_proc, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %1
	%2 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %2
	%3 = load %Allocator, %Allocator* %0, align 8
	ret %Allocator %3
}

define i1 @.__string_eq(%..string %a, %..string %b) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; IfStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 1
	%4 = load %..string, %..string* %1, align 8
	%5 = extractvalue %..string %4, 1
	%6 = icmp ne i64 %3, %5
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; IfStmt
	; IndexExpr
	%7 = load %..string, %..string* %0, align 8
	%8 = extractvalue %..string %7, 0
	%9 = extractvalue %..string %7, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$2, i64 0, i32 0), i64 42}, i64 283, i64 8, i64 0, i64 %9)
	%10 = getelementptr inbounds i8, i8* %8, i64 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	; IndexExpr
	%12 = load %..string, %..string* %1, align 8
	%13 = extractvalue %..string %12, 0
	%14 = extractvalue %..string %12, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$3, i64 0, i32 0), i64 42}, i64 283, i64 17, i64 0, i64 %14)
	%15 = getelementptr inbounds i8, i8* %13, i64 0
	%16 = getelementptr inbounds i8, i8* %15, i64 0
	%17 = icmp eq i8* %11, %16
	br i1 %17, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i1 true

if.done-4:
	; ReturnStmt
	%18 = load %..string, %..string* %0, align 8
	%19 = load %..string, %..string* %1, align 8
	%20 = call i64 @.__string_cmp(%..string %18, %..string %19)
	%21 = icmp eq i64 %20, 0
	ret i1 %21
}

define i64 @.__string_cmp(%..string %a, %..string %b) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	; IndexExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 0
	%4 = extractvalue %..string %2, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$4, i64 0, i32 0), i64 42}, i64 290, i64 26, i64 0, i64 %4)
	%5 = getelementptr inbounds i8, i8* %3, i64 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	; IndexExpr
	%7 = load %..string, %..string* %1, align 8
	%8 = extractvalue %..string %7, 0
	%9 = extractvalue %..string %7, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$5, i64 0, i32 0), i64 42}, i64 290, i64 33, i64 0, i64 %9)
	%10 = getelementptr inbounds i8, i8* %8, i64 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	; min
	%12 = load %..string, %..string* %0, align 8
	%13 = extractvalue %..string %12, 1
	%14 = load %..string, %..string* %1, align 8
	%15 = extractvalue %..string %14, 1
	%16 = icmp slt i64 %13, %15
	%17 = select i1 %16, i64 %13, i64 %15
	%18 = call i64 @.__mem_compare(i8* %6, i8* %11, i64 %17)
	ret i64 %18
}

define i1 @.__string_ne(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i1 @.__string_eq(%..string %2, %..string %3)
	%5 = xor i1 -1, %4
	ret i1 %5
}

define i1 @.__string_lt(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp slt i64 %4, 0
	ret i1 %5
}

define i1 @.__string_gt(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sgt i64 %4, 0
	ret i1 %5
}

define i1 @.__string_le(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sle i64 %4, 0
	ret i1 %5
}

define i1 @.__string_ge(%..string %a, %..string %b) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %a, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @.__string_cmp(%..string %2, %..string %3)
	%5 = icmp sge i64 %4, 0
	ret i1 %5
}

define i1 @.__complex64_eq(%..complex64 %a, %..complex64 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex64, align 8
	%1 = alloca %..complex64, align 8
	store %..complex64 zeroinitializer, %..complex64* %0
		store %..complex64 %a, %..complex64* %0
	store %..complex64 zeroinitializer, %..complex64* %1
		store %..complex64 %b, %..complex64* %1
	; ReturnStmt
	; real
	%2 = load %..complex64, %..complex64* %0, align 8
	%3 = extractvalue %..complex64 %2, 0
	; real
	%4 = load %..complex64, %..complex64* %1, align 8
	%5 = extractvalue %..complex64 %4, 0
	%6 = fcmp oeq float %3, %5
	; real
	%7 = load %..complex64, %..complex64* %0, align 8
	%8 = extractvalue %..complex64 %7, 0
	; real
	%9 = load %..complex64, %..complex64* %1, align 8
	%10 = extractvalue %..complex64 %9, 0
	%11 = fcmp oeq float %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex64, %..complex64* %0, align 8
	%13 = extractvalue %..complex64 %12, 1
	; imag
	%14 = load %..complex64, %..complex64* %1, align 8
	%15 = extractvalue %..complex64 %14, 1
	%16 = fcmp oeq float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__complex64_ne(%..complex64 %a, %..complex64 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex64, align 8
	%1 = alloca %..complex64, align 8
	store %..complex64 zeroinitializer, %..complex64* %0
		store %..complex64 %a, %..complex64* %0
	store %..complex64 zeroinitializer, %..complex64* %1
		store %..complex64 %b, %..complex64* %1
	; ReturnStmt
	; real
	%2 = load %..complex64, %..complex64* %0, align 8
	%3 = extractvalue %..complex64 %2, 0
	; real
	%4 = load %..complex64, %..complex64* %1, align 8
	%5 = extractvalue %..complex64 %4, 0
	%6 = fcmp one float %3, %5
	; real
	%7 = load %..complex64, %..complex64* %0, align 8
	%8 = extractvalue %..complex64 %7, 0
	; real
	%9 = load %..complex64, %..complex64* %1, align 8
	%10 = extractvalue %..complex64 %9, 0
	%11 = fcmp one float %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex64, %..complex64* %0, align 8
	%13 = extractvalue %..complex64 %12, 1
	; imag
	%14 = load %..complex64, %..complex64* %1, align 8
	%15 = extractvalue %..complex64 %14, 1
	%16 = fcmp one float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__complex128_eq(%..complex128 %a, %..complex128 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex128, align 8
	%1 = alloca %..complex128, align 8
	store %..complex128 zeroinitializer, %..complex128* %0
		store %..complex128 %a, %..complex128* %0
	store %..complex128 zeroinitializer, %..complex128* %1
		store %..complex128 %b, %..complex128* %1
	; ReturnStmt
	; real
	%2 = load %..complex128, %..complex128* %0, align 8
	%3 = extractvalue %..complex128 %2, 0
	; real
	%4 = load %..complex128, %..complex128* %1, align 8
	%5 = extractvalue %..complex128 %4, 0
	%6 = fcmp oeq double %3, %5
	; real
	%7 = load %..complex128, %..complex128* %0, align 8
	%8 = extractvalue %..complex128 %7, 0
	; real
	%9 = load %..complex128, %..complex128* %1, align 8
	%10 = extractvalue %..complex128 %9, 0
	%11 = fcmp oeq double %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex128, %..complex128* %0, align 8
	%13 = extractvalue %..complex128 %12, 1
	; imag
	%14 = load %..complex128, %..complex128* %1, align 8
	%15 = extractvalue %..complex128 %14, 1
	%16 = fcmp oeq double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__complex128_ne(%..complex128 %a, %..complex128 %b) alwaysinline {
decls-0:
	%0 = alloca %..complex128, align 8
	%1 = alloca %..complex128, align 8
	store %..complex128 zeroinitializer, %..complex128* %0
		store %..complex128 %a, %..complex128* %0
	store %..complex128 zeroinitializer, %..complex128* %1
		store %..complex128 %b, %..complex128* %1
	; ReturnStmt
	; real
	%2 = load %..complex128, %..complex128* %0, align 8
	%3 = extractvalue %..complex128 %2, 0
	; real
	%4 = load %..complex128, %..complex128* %1, align 8
	%5 = extractvalue %..complex128 %4, 0
	%6 = fcmp one double %3, %5
	; real
	%7 = load %..complex128, %..complex128* %0, align 8
	%8 = extractvalue %..complex128 %7, 0
	; real
	%9 = load %..complex128, %..complex128* %1, align 8
	%10 = extractvalue %..complex128 %9, 0
	%11 = fcmp one double %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..complex128, %..complex128* %0, align 8
	%13 = extractvalue %..complex128 %12, 1
	; imag
	%14 = load %..complex128, %..complex128* %1, align 8
	%15 = extractvalue %..complex128 %14, 1
	%16 = fcmp one double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	ret i1 %17
}

define i1 @.__quaternion128_eq(%..quaternion128 %a, %..quaternion128 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion128, align 8
	%1 = alloca %..quaternion128, align 8
	store %..quaternion128 zeroinitializer, %..quaternion128* %0
		store %..quaternion128 %a, %..quaternion128* %0
	store %..quaternion128 zeroinitializer, %..quaternion128* %1
		store %..quaternion128 %b, %..quaternion128* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion128, %..quaternion128* %0, align 8
	%3 = extractvalue %..quaternion128 %2, 0
	; real
	%4 = load %..quaternion128, %..quaternion128* %1, align 8
	%5 = extractvalue %..quaternion128 %4, 0
	%6 = fcmp oeq float %3, %5
	; real
	%7 = load %..quaternion128, %..quaternion128* %0, align 8
	%8 = extractvalue %..quaternion128 %7, 0
	; real
	%9 = load %..quaternion128, %..quaternion128* %1, align 8
	%10 = extractvalue %..quaternion128 %9, 0
	%11 = fcmp oeq float %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion128, %..quaternion128* %0, align 8
	%13 = extractvalue %..quaternion128 %12, 1
	; imag
	%14 = load %..quaternion128, %..quaternion128* %1, align 8
	%15 = extractvalue %..quaternion128 %14, 1
	%16 = fcmp oeq float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion128, %..quaternion128* %0, align 8
	%19 = extractvalue %..quaternion128 %18, 0
	; real
	%20 = load %..quaternion128, %..quaternion128* %1, align 8
	%21 = extractvalue %..quaternion128 %20, 0
	%22 = fcmp oeq float %19, %21
	br i1 %22, label %cmp.and-3, label %logical.cmp.done-5

cmp.and-3:
	; imag
	%23 = load %..quaternion128, %..quaternion128* %0, align 8
	%24 = extractvalue %..quaternion128 %23, 1
	; imag
	%25 = load %..quaternion128, %..quaternion128* %1, align 8
	%26 = extractvalue %..quaternion128 %25, 1
	%27 = fcmp oeq float %24, %26
	br i1 %27, label %logical.cmp.rhs-4, label %logical.cmp.done-5

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion128, %..quaternion128* %0, align 8
	%29 = extractvalue %..quaternion128 %28, 2
	; jmag
	%30 = load %..quaternion128, %..quaternion128* %1, align 8
	%31 = extractvalue %..quaternion128 %30, 2
	%32 = fcmp oeq float %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ false, %logical.cmp.done-2 ], [ false, %cmp.and-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion128, %..quaternion128* %0, align 8
	%35 = extractvalue %..quaternion128 %34, 0
	; real
	%36 = load %..quaternion128, %..quaternion128* %1, align 8
	%37 = extractvalue %..quaternion128 %36, 0
	%38 = fcmp oeq float %35, %37
	br i1 %38, label %cmp.and-6, label %logical.cmp.done-9

cmp.and-6:
	; imag
	%39 = load %..quaternion128, %..quaternion128* %0, align 8
	%40 = extractvalue %..quaternion128 %39, 1
	; imag
	%41 = load %..quaternion128, %..quaternion128* %1, align 8
	%42 = extractvalue %..quaternion128 %41, 1
	%43 = fcmp oeq float %40, %42
	br i1 %43, label %cmp.and-7, label %logical.cmp.done-9

cmp.and-7:
	; jmag
	%44 = load %..quaternion128, %..quaternion128* %0, align 8
	%45 = extractvalue %..quaternion128 %44, 2
	; jmag
	%46 = load %..quaternion128, %..quaternion128* %1, align 8
	%47 = extractvalue %..quaternion128 %46, 2
	%48 = fcmp oeq float %45, %47
	br i1 %48, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion128, %..quaternion128* %0, align 8
	%50 = extractvalue %..quaternion128 %49, 3
	; kmag
	%51 = load %..quaternion128, %..quaternion128* %1, align 8
	%52 = extractvalue %..quaternion128 %51, 3
	%53 = fcmp oeq float %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ false, %logical.cmp.done-5 ], [ false, %cmp.and-6 ], [ false, %cmp.and-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define i1 @.__quaternion128_ne(%..quaternion128 %a, %..quaternion128 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion128, align 8
	%1 = alloca %..quaternion128, align 8
	store %..quaternion128 zeroinitializer, %..quaternion128* %0
		store %..quaternion128 %a, %..quaternion128* %0
	store %..quaternion128 zeroinitializer, %..quaternion128* %1
		store %..quaternion128 %b, %..quaternion128* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion128, %..quaternion128* %0, align 8
	%3 = extractvalue %..quaternion128 %2, 0
	; real
	%4 = load %..quaternion128, %..quaternion128* %1, align 8
	%5 = extractvalue %..quaternion128 %4, 0
	%6 = fcmp one float %3, %5
	; real
	%7 = load %..quaternion128, %..quaternion128* %0, align 8
	%8 = extractvalue %..quaternion128 %7, 0
	; real
	%9 = load %..quaternion128, %..quaternion128* %1, align 8
	%10 = extractvalue %..quaternion128 %9, 0
	%11 = fcmp one float %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion128, %..quaternion128* %0, align 8
	%13 = extractvalue %..quaternion128 %12, 1
	; imag
	%14 = load %..quaternion128, %..quaternion128* %1, align 8
	%15 = extractvalue %..quaternion128 %14, 1
	%16 = fcmp one float %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion128, %..quaternion128* %0, align 8
	%19 = extractvalue %..quaternion128 %18, 0
	; real
	%20 = load %..quaternion128, %..quaternion128* %1, align 8
	%21 = extractvalue %..quaternion128 %20, 0
	%22 = fcmp one float %19, %21
	br i1 %22, label %logical.cmp.done-5, label %cmp.or-3

cmp.or-3:
	; imag
	%23 = load %..quaternion128, %..quaternion128* %0, align 8
	%24 = extractvalue %..quaternion128 %23, 1
	; imag
	%25 = load %..quaternion128, %..quaternion128* %1, align 8
	%26 = extractvalue %..quaternion128 %25, 1
	%27 = fcmp one float %24, %26
	br i1 %27, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion128, %..quaternion128* %0, align 8
	%29 = extractvalue %..quaternion128 %28, 2
	; jmag
	%30 = load %..quaternion128, %..quaternion128* %1, align 8
	%31 = extractvalue %..quaternion128 %30, 2
	%32 = fcmp one float %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ true, %logical.cmp.done-2 ], [ true, %cmp.or-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion128, %..quaternion128* %0, align 8
	%35 = extractvalue %..quaternion128 %34, 0
	; real
	%36 = load %..quaternion128, %..quaternion128* %1, align 8
	%37 = extractvalue %..quaternion128 %36, 0
	%38 = fcmp one float %35, %37
	br i1 %38, label %logical.cmp.done-9, label %cmp.or-6

cmp.or-6:
	; imag
	%39 = load %..quaternion128, %..quaternion128* %0, align 8
	%40 = extractvalue %..quaternion128 %39, 1
	; imag
	%41 = load %..quaternion128, %..quaternion128* %1, align 8
	%42 = extractvalue %..quaternion128 %41, 1
	%43 = fcmp one float %40, %42
	br i1 %43, label %logical.cmp.done-9, label %cmp.or-7

cmp.or-7:
	; jmag
	%44 = load %..quaternion128, %..quaternion128* %0, align 8
	%45 = extractvalue %..quaternion128 %44, 2
	; jmag
	%46 = load %..quaternion128, %..quaternion128* %1, align 8
	%47 = extractvalue %..quaternion128 %46, 2
	%48 = fcmp one float %45, %47
	br i1 %48, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion128, %..quaternion128* %0, align 8
	%50 = extractvalue %..quaternion128 %49, 3
	; kmag
	%51 = load %..quaternion128, %..quaternion128* %1, align 8
	%52 = extractvalue %..quaternion128 %51, 3
	%53 = fcmp one float %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ true, %logical.cmp.done-5 ], [ true, %cmp.or-6 ], [ true, %cmp.or-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define i1 @.__quaternion256_eq(%..quaternion256 %a, %..quaternion256 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion256, align 8
	%1 = alloca %..quaternion256, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %0
		store %..quaternion256 %a, %..quaternion256* %0
	store %..quaternion256 zeroinitializer, %..quaternion256* %1
		store %..quaternion256 %b, %..quaternion256* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion256, %..quaternion256* %0, align 8
	%3 = extractvalue %..quaternion256 %2, 0
	; real
	%4 = load %..quaternion256, %..quaternion256* %1, align 8
	%5 = extractvalue %..quaternion256 %4, 0
	%6 = fcmp oeq double %3, %5
	; real
	%7 = load %..quaternion256, %..quaternion256* %0, align 8
	%8 = extractvalue %..quaternion256 %7, 0
	; real
	%9 = load %..quaternion256, %..quaternion256* %1, align 8
	%10 = extractvalue %..quaternion256 %9, 0
	%11 = fcmp oeq double %8, %10
	br i1 %11, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion256, %..quaternion256* %0, align 8
	%13 = extractvalue %..quaternion256 %12, 1
	; imag
	%14 = load %..quaternion256, %..quaternion256* %1, align 8
	%15 = extractvalue %..quaternion256 %14, 1
	%16 = fcmp oeq double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ false, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion256, %..quaternion256* %0, align 8
	%19 = extractvalue %..quaternion256 %18, 0
	; real
	%20 = load %..quaternion256, %..quaternion256* %1, align 8
	%21 = extractvalue %..quaternion256 %20, 0
	%22 = fcmp oeq double %19, %21
	br i1 %22, label %cmp.and-3, label %logical.cmp.done-5

cmp.and-3:
	; imag
	%23 = load %..quaternion256, %..quaternion256* %0, align 8
	%24 = extractvalue %..quaternion256 %23, 1
	; imag
	%25 = load %..quaternion256, %..quaternion256* %1, align 8
	%26 = extractvalue %..quaternion256 %25, 1
	%27 = fcmp oeq double %24, %26
	br i1 %27, label %logical.cmp.rhs-4, label %logical.cmp.done-5

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion256, %..quaternion256* %0, align 8
	%29 = extractvalue %..quaternion256 %28, 2
	; jmag
	%30 = load %..quaternion256, %..quaternion256* %1, align 8
	%31 = extractvalue %..quaternion256 %30, 2
	%32 = fcmp oeq double %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ false, %logical.cmp.done-2 ], [ false, %cmp.and-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion256, %..quaternion256* %0, align 8
	%35 = extractvalue %..quaternion256 %34, 0
	; real
	%36 = load %..quaternion256, %..quaternion256* %1, align 8
	%37 = extractvalue %..quaternion256 %36, 0
	%38 = fcmp oeq double %35, %37
	br i1 %38, label %cmp.and-6, label %logical.cmp.done-9

cmp.and-6:
	; imag
	%39 = load %..quaternion256, %..quaternion256* %0, align 8
	%40 = extractvalue %..quaternion256 %39, 1
	; imag
	%41 = load %..quaternion256, %..quaternion256* %1, align 8
	%42 = extractvalue %..quaternion256 %41, 1
	%43 = fcmp oeq double %40, %42
	br i1 %43, label %cmp.and-7, label %logical.cmp.done-9

cmp.and-7:
	; jmag
	%44 = load %..quaternion256, %..quaternion256* %0, align 8
	%45 = extractvalue %..quaternion256 %44, 2
	; jmag
	%46 = load %..quaternion256, %..quaternion256* %1, align 8
	%47 = extractvalue %..quaternion256 %46, 2
	%48 = fcmp oeq double %45, %47
	br i1 %48, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion256, %..quaternion256* %0, align 8
	%50 = extractvalue %..quaternion256 %49, 3
	; kmag
	%51 = load %..quaternion256, %..quaternion256* %1, align 8
	%52 = extractvalue %..quaternion256 %51, 3
	%53 = fcmp oeq double %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ false, %logical.cmp.done-5 ], [ false, %cmp.and-6 ], [ false, %cmp.and-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define i1 @.__quaternion256_ne(%..quaternion256 %a, %..quaternion256 %b) alwaysinline {
decls-0:
	%0 = alloca %..quaternion256, align 8
	%1 = alloca %..quaternion256, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %0
		store %..quaternion256 %a, %..quaternion256* %0
	store %..quaternion256 zeroinitializer, %..quaternion256* %1
		store %..quaternion256 %b, %..quaternion256* %1
	; ReturnStmt
	; real
	%2 = load %..quaternion256, %..quaternion256* %0, align 8
	%3 = extractvalue %..quaternion256 %2, 0
	; real
	%4 = load %..quaternion256, %..quaternion256* %1, align 8
	%5 = extractvalue %..quaternion256 %4, 0
	%6 = fcmp one double %3, %5
	; real
	%7 = load %..quaternion256, %..quaternion256* %0, align 8
	%8 = extractvalue %..quaternion256 %7, 0
	; real
	%9 = load %..quaternion256, %..quaternion256* %1, align 8
	%10 = extractvalue %..quaternion256 %9, 0
	%11 = fcmp one double %8, %10
	br i1 %11, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%12 = load %..quaternion256, %..quaternion256* %0, align 8
	%13 = extractvalue %..quaternion256 %12, 1
	; imag
	%14 = load %..quaternion256, %..quaternion256* %1, align 8
	%15 = extractvalue %..quaternion256 %14, 1
	%16 = fcmp one double %13, %15
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%17 = phi i1 [ true, %decls-0 ], [ %16, %logical.cmp.rhs-1 ]
	; real
	%18 = load %..quaternion256, %..quaternion256* %0, align 8
	%19 = extractvalue %..quaternion256 %18, 0
	; real
	%20 = load %..quaternion256, %..quaternion256* %1, align 8
	%21 = extractvalue %..quaternion256 %20, 0
	%22 = fcmp one double %19, %21
	br i1 %22, label %logical.cmp.done-5, label %cmp.or-3

cmp.or-3:
	; imag
	%23 = load %..quaternion256, %..quaternion256* %0, align 8
	%24 = extractvalue %..quaternion256 %23, 1
	; imag
	%25 = load %..quaternion256, %..quaternion256* %1, align 8
	%26 = extractvalue %..quaternion256 %25, 1
	%27 = fcmp one double %24, %26
	br i1 %27, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; jmag
	%28 = load %..quaternion256, %..quaternion256* %0, align 8
	%29 = extractvalue %..quaternion256 %28, 2
	; jmag
	%30 = load %..quaternion256, %..quaternion256* %1, align 8
	%31 = extractvalue %..quaternion256 %30, 2
	%32 = fcmp one double %29, %31
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%33 = phi i1 [ true, %logical.cmp.done-2 ], [ true, %cmp.or-3 ], [ %32, %logical.cmp.rhs-4 ]
	; real
	%34 = load %..quaternion256, %..quaternion256* %0, align 8
	%35 = extractvalue %..quaternion256 %34, 0
	; real
	%36 = load %..quaternion256, %..quaternion256* %1, align 8
	%37 = extractvalue %..quaternion256 %36, 0
	%38 = fcmp one double %35, %37
	br i1 %38, label %logical.cmp.done-9, label %cmp.or-6

cmp.or-6:
	; imag
	%39 = load %..quaternion256, %..quaternion256* %0, align 8
	%40 = extractvalue %..quaternion256 %39, 1
	; imag
	%41 = load %..quaternion256, %..quaternion256* %1, align 8
	%42 = extractvalue %..quaternion256 %41, 1
	%43 = fcmp one double %40, %42
	br i1 %43, label %logical.cmp.done-9, label %cmp.or-7

cmp.or-7:
	; jmag
	%44 = load %..quaternion256, %..quaternion256* %0, align 8
	%45 = extractvalue %..quaternion256 %44, 2
	; jmag
	%46 = load %..quaternion256, %..quaternion256* %1, align 8
	%47 = extractvalue %..quaternion256 %46, 2
	%48 = fcmp one double %45, %47
	br i1 %48, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; kmag
	%49 = load %..quaternion256, %..quaternion256* %0, align 8
	%50 = extractvalue %..quaternion256 %49, 3
	; kmag
	%51 = load %..quaternion256, %..quaternion256* %1, align 8
	%52 = extractvalue %..quaternion256 %51, 3
	%53 = fcmp one double %50, %52
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%54 = phi i1 [ true, %logical.cmp.done-5 ], [ true, %cmp.or-6 ], [ true, %cmp.or-7 ], [ %53, %logical.cmp.rhs-8 ]
	ret i1 %54
}

define void @.__assert(%..string %file, i64 %line, i64 %column, %..string %msg) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [4 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %msg, %..string* %3
	; SelectorExpr
	; SelectorExpr
	%10 = load i64, i64* @.os_windows-17.stderr, align 8
	%11 = load %..string, %..string* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%15 = bitcast %..string* %0 to %..rawptr
	%16 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%17 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%18 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %16, %Type_Info** %17
	store %..rawptr %15, %..rawptr* %18
	%19 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%20 = bitcast i64* %1 to %..rawptr
	%21 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%22 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%30 = bitcast %..string* %3 to %..rawptr
	%31 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%32 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [4 x %..any] zeroinitializer, [4 x %..any]* %9
	%35 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	store %..any %19, %..any* %35
	%36 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 1
	store %..any %24, %..any* %36
	%37 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 2
	store %..any %29, %..any* %37
	%38 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 3
	store %..any %34, %..any* %38
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	%40 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %39, %..any** %40
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 4, i64* %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 4, i64* %42
	%43 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%44 = call i64 @.fmt-4.fprintf(i64 %10, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$6, i64 0, i32 0), i64 32}, {%..any*, i64, i64} %43)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__panic(%..string %file, i64 %line, i64 %column, %..string %msg) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [4 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store %..string zeroinitializer, %..string* %3
		store %..string %msg, %..string* %3
	; SelectorExpr
	; SelectorExpr
	%10 = load i64, i64* @.os_windows-17.stderr, align 8
	%11 = load %..string, %..string* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%15 = bitcast %..string* %0 to %..rawptr
	%16 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%17 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%18 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %16, %Type_Info** %17
	store %..rawptr %15, %..rawptr* %18
	%19 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%20 = bitcast i64* %1 to %..rawptr
	%21 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%22 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%30 = bitcast %..string* %3 to %..rawptr
	%31 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%32 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %7, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [4 x %..any] zeroinitializer, [4 x %..any]* %9
	%35 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	store %..any %19, %..any* %35
	%36 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 1
	store %..any %24, %..any* %36
	%37 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 2
	store %..any %29, %..any* %37
	%38 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 3
	store %..any %34, %..any* %38
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %9, i64 0, i32 0
	%40 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %39, %..any** %40
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 4, i64* %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 4, i64* %42
	%43 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	%44 = call i64 @.fmt-4.fprintf(i64 %10, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$7, i64 0, i32 0), i64 20}, {%..any*, i64, i64} %43)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__bounds_check_error(%..string %file, i64 %line, i64 %column, i64 %index, i64 %count) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [5 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %index, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %count, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	br i1 %13, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%14 = load i64, i64* %3, align 8
	%15 = load i64, i64* %4, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%17 = load i64, i64* @.os_windows-17.stderr, align 8
	%18 = load %..string, %..string* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %2, align 8
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%23 = bitcast %..string* %0 to %..rawptr
	%24 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%25 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%26 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %24, %Type_Info** %25
	store %..rawptr %23, %..rawptr* %26
	%27 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%28 = bitcast i64* %1 to %..rawptr
	%29 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%30 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%33 = bitcast i64* %2 to %..rawptr
	%34 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%35 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %34, %Type_Info** %35
	store %..rawptr %33, %..rawptr* %36
	%37 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%38 = bitcast i64* %3 to %..rawptr
	%39 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%40 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %39, %Type_Info** %40
	store %..rawptr %38, %..rawptr* %41
	%42 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%43 = bitcast i64* %4 to %..rawptr
	%44 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%45 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %44, %Type_Info** %45
	store %..rawptr %43, %..rawptr* %46
	%47 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [5 x %..any] zeroinitializer, [5 x %..any]* %11
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	store %..any %27, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 2
	store %..any %37, %..any* %50
	%51 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 3
	store %..any %42, %..any* %51
	%52 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 4
	store %..any %47, %..any* %52
	%53 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	%54 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %53, %..any** %54
	%55 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 5, i64* %55
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 5, i64* %56
	%57 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%58 = call i64 @.fmt-4.fprintf(i64 %17, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$8, i64 0, i32 0), i64 48}, {%..any*, i64, i64} %57)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__slice_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high, i64 %max) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [6 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %low, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %high, i64* %4
	store i64 zeroinitializer, i64* %5
		store i64 %max, i64* %5
	; IfStmt
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 0, %14
	br i1 %15, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%16 = load i64, i64* %3, align 8
	%17 = load i64, i64* %4, align 8
	%18 = icmp sle i64 %16, %17
	br i1 %18, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%19 = load i64, i64* %4, align 8
	%20 = load i64, i64* %5, align 8
	%21 = icmp sle i64 %19, %20
	br i1 %21, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	; SelectorExpr
	%22 = load i64, i64* @.os_windows-17.stderr, align 8
	%23 = load %..string, %..string* %0, align 8
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %2, align 8
	%26 = load i64, i64* %3, align 8
	%27 = load i64, i64* %4, align 8
	%28 = load i64, i64* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%29 = bitcast %..string* %0 to %..rawptr
	%30 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%34 = bitcast i64* %1 to %..rawptr
	%35 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%39 = bitcast i64* %2 to %..rawptr
	%40 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%42 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %40, %Type_Info** %41
	store %..rawptr %39, %..rawptr* %42
	%43 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%44 = bitcast i64* %3 to %..rawptr
	%45 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%47 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %45, %Type_Info** %46
	store %..rawptr %44, %..rawptr* %47
	%48 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%49 = bitcast i64* %4 to %..rawptr
	%50 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%51 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%54 = bitcast i64* %5 to %..rawptr
	%55 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%56 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%57 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %55, %Type_Info** %56
	store %..rawptr %54, %..rawptr* %57
	%58 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [6 x %..any] zeroinitializer, [6 x %..any]* %13
	%59 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	store %..any %33, %..any* %59
	%60 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 1
	store %..any %38, %..any* %60
	%61 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 2
	store %..any %43, %..any* %61
	%62 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 3
	store %..any %48, %..any* %62
	%63 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 4
	store %..any %53, %..any* %63
	%64 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 5
	store %..any %58, %..any* %64
	%65 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	%66 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %65, %..any** %66
	%67 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 6, i64* %67
	%68 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 6, i64* %68
	%69 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%70 = call i64 @.fmt-4.fprintf(i64 %22, %..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$9, i64 0, i32 0), i64 46}, {%..any*, i64, i64} %69)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__substring_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..any, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [5 x %..any], align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %file, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %line, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %column, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %low, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %high, i64* %4
	; IfStmt
	%12 = load i64, i64* %3, align 8
	%13 = icmp sle i64 0, %12
	br i1 %13, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%14 = load i64, i64* %3, align 8
	%15 = load i64, i64* %4, align 8
	%16 = icmp sle i64 %14, %15
	br i1 %16, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%17 = load i64, i64* @.os_windows-17.stderr, align 8
	%18 = load %..string, %..string* %0, align 8
	%19 = load i64, i64* %1, align 8
	%20 = load i64, i64* %2, align 8
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%23 = bitcast %..string* %0 to %..rawptr
	%24 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%25 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%26 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %24, %Type_Info** %25
	store %..rawptr %23, %..rawptr* %26
	%27 = load %..any, %..any* %5, align 8
	store %..any zeroinitializer, %..any* %6
	%28 = bitcast i64* %1 to %..rawptr
	%29 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%30 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %29, %Type_Info** %30
	store %..rawptr %28, %..rawptr* %31
	%32 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%33 = bitcast i64* %2 to %..rawptr
	%34 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%35 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%36 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %34, %Type_Info** %35
	store %..rawptr %33, %..rawptr* %36
	%37 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%38 = bitcast i64* %3 to %..rawptr
	%39 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%40 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%41 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %39, %Type_Info** %40
	store %..rawptr %38, %..rawptr* %41
	%42 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%43 = bitcast i64* %4 to %..rawptr
	%44 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%45 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%46 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %44, %Type_Info** %45
	store %..rawptr %43, %..rawptr* %46
	%47 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [5 x %..any] zeroinitializer, [5 x %..any]* %11
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	store %..any %27, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 1
	store %..any %32, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 2
	store %..any %37, %..any* %50
	%51 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 3
	store %..any %42, %..any* %51
	%52 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 4
	store %..any %47, %..any* %52
	%53 = getelementptr inbounds [5 x %..any], [5 x %..any]* %11, i64 0, i32 0
	%54 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %53, %..any** %54
	%55 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 5, i64* %55
	%56 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 5, i64* %56
	%57 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	%58 = call i64 @.fmt-4.fprintf(i64 %17, %..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$a, i64 0, i32 0), i64 46}, {%..any*, i64, i64} %57)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @.__union_cast_check(i1 %ok, %..string %file, i64 %line, i64 %column, %Type_Info* %from, %Type_Info* %to) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Type_Info*, align 8
	%5 = alloca %Type_Info*, align 8
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca {%..any*, i64, i64}, align 8
	%12 = alloca [5 x %..any], align 8
	store i1 zeroinitializer, i1* %0
		store i1 %ok, i1* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %file, %..string* %1
	store i64 zeroinitializer, i64* %2
		store i64 %line, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %column, i64* %3
	store %Type_Info* zeroinitializer, %Type_Info** %4
		store %Type_Info* %from, %Type_Info** %4
	store %Type_Info* zeroinitializer, %Type_Info** %5
		store %Type_Info* %to, %Type_Info** %5
	; IfStmt
	%13 = load i1, i1* %0, align 1
	br i1 %13, label %if.done-2, label %if.then-1

if.then-1:
	; SelectorExpr
	; SelectorExpr
	%14 = load i64, i64* @.os_windows-17.stderr, align 8
	%15 = load %..string, %..string* %1, align 8
	%16 = load i64, i64* %2, align 8
	%17 = load i64, i64* %3, align 8
	%18 = load %Type_Info*, %Type_Info** %4, align 8
	%19 = load %Type_Info*, %Type_Info** %5, align 8
	store %..any zeroinitializer, %..any* %6
	%20 = bitcast %..string* %1 to %..rawptr
	%21 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%22 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%23 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %21, %Type_Info** %22
	store %..rawptr %20, %..rawptr* %23
	%24 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%25 = bitcast i64* %2 to %..rawptr
	%26 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%32 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%33 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %31, %Type_Info** %32
	store %..rawptr %30, %..rawptr* %33
	%34 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%35 = bitcast %Type_Info** %4 to %..rawptr
	%36 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%37 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%38 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %36, %Type_Info** %37
	store %..rawptr %35, %..rawptr* %38
	%39 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%40 = bitcast %Type_Info** %5 to %..rawptr
	%41 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%42 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%43 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %41, %Type_Info** %42
	store %..rawptr %40, %..rawptr* %43
	%44 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %11
	store [5 x %..any] zeroinitializer, [5 x %..any]* %12
	%45 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 0
	store %..any %24, %..any* %45
	%46 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 1
	store %..any %29, %..any* %46
	%47 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 2
	store %..any %34, %..any* %47
	%48 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 3
	store %..any %39, %..any* %48
	%49 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 4
	store %..any %44, %..any* %49
	%50 = getelementptr inbounds [5 x %..any], [5 x %..any]* %12, i64 0, i32 0
	%51 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 0
	store %..any* %50, %..any** %51
	%52 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 1
	store i64 5, i64* %52
	%53 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 2
	store i64 5, i64* %53
	%54 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %11, align 8
	%55 = call i64 @.fmt-4.fprintf(i64 %14, %..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$b, i64 0, i32 0), i64 45}, {%..any*, i64, i64} %54)
	call ccc void @llvm.debugtrap()
	br label %if.done-2

if.done-2:
	ret void
}

define {i32, i64} @.__string_decode_rune(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i32, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	; SelectorExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = call {i32, i64} @.utf8-5.decode_rune-1976290373152(%..string %2)
	%4 = extractvalue {i32, i64} %3, 0
	%5 = extractvalue {i32, i64} %3, 1
	store {i32, i64} zeroinitializer, {i32, i64}* %1
	%6 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 0
	store i32 %4, i32* %6
	%7 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 1
	store i64 %5, i64* %7
	%8 = load {i32, i64}, {i32, i64}* %1, align 8
	ret {i32, i64} %8
}

define %..rawptr @.__mem_set(%..rawptr %data, i32 %value, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i32 zeroinitializer, i32* %1
		store i32 %value, i32* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load i32, i32* %1, align 4
	; cast - cast
	%5 = trunc i32 %4 to i8
	%6 = load i64, i64* %2, align 8
	call ccc void @llvm.memset.p0i8.i64(%..rawptr %3, i8 %5, i64 %6, i32 1, i1 false)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %7
}

define %..rawptr @.__mem_zero(%..rawptr %data, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %data, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %len, i64* %1
	; ReturnStmt
	%2 = load %..rawptr, %..rawptr* %0, align 8
	%3 = load i64, i64* %1, align 8
	%4 = call %..rawptr @.__mem_set(%..rawptr %2, i32 0, i64 %3)
	ret %..rawptr %4
}

define %..rawptr @.__mem_copy(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	call ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr %3, %..rawptr %4, i64 %5, i32 1, i1 false)
	; ReturnStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %6
}

define %..rawptr @.__mem_copy_non_overlapping(%..rawptr %dst, %..rawptr %src, i64 %len) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %dst, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %src, %..rawptr* %1
	store i64 zeroinitializer, i64* %2
		store i64 %len, i64* %2
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = load %..rawptr, %..rawptr* %1, align 8
	%5 = load i64, i64* %2, align 8
	call ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr %3, %..rawptr %4, i64 %5, i32 1, i1 false)
	; ReturnStmt
	%6 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %6
}

define i64 @.__mem_compare(i8* %a, i8* %b, i64 %n) {
decls-0:
	%0 = alloca i8*, align 8
	%1 = alloca i8*, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	store i8* zeroinitializer, i8** %0
		store i8* %a, i8** %0
	store i8* zeroinitializer, i8** %1
		store i8* %b, i8** %1
	store i64 zeroinitializer, i64* %2
		store i64 %n, i64* %2
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %3
		store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-1

for.interval.loop-1:
	%6 = load i64, i64* %2, align 8
	%7 = load i64, i64* %4, align 8
	%8 = icmp slt i64 %7, %6
	br i1 %8, label %for.interval.body-2, label %for.interval.done-8

for.interval.body-2:
	%9 = load i64, i64* %4, align 8
	%10 = load i64, i64* %5, align 8
	%11 = load i64, i64* %4, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %4
	%13 = load i64, i64* %5, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %5
	store i64 %9, i64* %3
	; MatchStmt
	%15 = load i8*, i8** %0, align 8
	%16 = load i64, i64* %3, align 8
	%17 = getelementptr inbounds i8, i8* %15, i64 %16
	%18 = getelementptr inbounds i8, i8* %17, i64 0
	%19 = load i8, i8* %18, align 1
	%20 = load i8*, i8** %1, align 8
	%21 = load i64, i64* %3, align 8
	%22 = getelementptr inbounds i8, i8* %20, i64 %21
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	%24 = load i8, i8* %23, align 1
	%25 = icmp ult i8 %19, %24
	%26 = icmp eq i1 true, %25
	br i1 %26, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%27 = load i8*, i8** %0, align 8
	%28 = load i64, i64* %3, align 8
	%29 = getelementptr inbounds i8, i8* %27, i64 %28
	%30 = getelementptr inbounds i8, i8* %29, i64 0
	%31 = load i8, i8* %30, align 1
	%32 = load i8*, i8** %1, align 8
	%33 = load i64, i64* %3, align 8
	%34 = getelementptr inbounds i8, i8* %32, i64 %33
	%35 = getelementptr inbounds i8, i8* %34, i64 0
	%36 = load i8, i8* %35, align 1
	%37 = icmp ugt i8 %31, %36
	%38 = icmp eq i1 true, %37
	br i1 %38, label %match.fall.body-6, label %match.case.next-5

match.case.body-4:
	; ReturnStmt
	ret i64 -1

match.case.next-5:
	br label %match.done-7

match.fall.body-6:
	; ReturnStmt
	ret i64 1

match.done-7:
	br label %for.interval.loop-1

for.interval.done-8:
	; ReturnStmt
	ret i64 0
}

define float @.__abs_complex64(%..complex64 %x) alwaysinline {
decls-0:
	%0 = alloca %..complex64, align 8
	%1 = alloca float, align 4
	%2 = alloca float, align 4
	store %..complex64 zeroinitializer, %..complex64* %0
		store %..complex64 %x, %..complex64* %0
	; r
	store float zeroinitializer, float* %1
		; i
	store float zeroinitializer, float* %2
		; real
	%3 = load %..complex64, %..complex64* %0, align 8
	%4 = extractvalue %..complex64 %3, 0
	; imag
	%5 = load %..complex64, %..complex64* %0, align 8
	%6 = extractvalue %..complex64 %5, 1
	store float %4, float* %1
	store float %6, float* %2
	; ReturnStmt
	%7 = load float, float* %1, align 4
	%8 = load float, float* %1, align 4
	%9 = fmul float %7, %8
	%10 = load float, float* %2, align 4
	%11 = load float, float* %2, align 4
	%12 = fmul float %10, %11
	%13 = fadd float %9, %12
	%14 = call ccc float @llvm.sqrt.f32(float %13)
	ret float %14
}

define double @.__abs_complex128(%..complex128 %x) alwaysinline {
decls-0:
	%0 = alloca %..complex128, align 8
	%1 = alloca double, align 8
	%2 = alloca double, align 8
	store %..complex128 zeroinitializer, %..complex128* %0
		store %..complex128 %x, %..complex128* %0
	; r
	store double zeroinitializer, double* %1
		; i
	store double zeroinitializer, double* %2
		; real
	%3 = load %..complex128, %..complex128* %0, align 8
	%4 = extractvalue %..complex128 %3, 0
	; imag
	%5 = load %..complex128, %..complex128* %0, align 8
	%6 = extractvalue %..complex128 %5, 1
	store double %4, double* %1
	store double %6, double* %2
	; ReturnStmt
	%7 = load double, double* %1, align 8
	%8 = load double, double* %1, align 8
	%9 = fmul double %7, %8
	%10 = load double, double* %2, align 8
	%11 = load double, double* %2, align 8
	%12 = fmul double %10, %11
	%13 = fadd double %9, %12
	%14 = call ccc double @llvm.sqrt.f64(double %13)
	ret double %14
}

define float @.__abs_quaternion128(%..quaternion128 %x) alwaysinline {
decls-0:
	%0 = alloca %..quaternion128, align 8
	%1 = alloca float, align 4
	%2 = alloca float, align 4
	%3 = alloca float, align 4
	%4 = alloca float, align 4
	store %..quaternion128 zeroinitializer, %..quaternion128* %0
		store %..quaternion128 %x, %..quaternion128* %0
	; r
	store float zeroinitializer, float* %1
		; i
	store float zeroinitializer, float* %2
		; j
	store float zeroinitializer, float* %3
		; k
	store float zeroinitializer, float* %4
		; real
	%5 = load %..quaternion128, %..quaternion128* %0, align 8
	%6 = extractvalue %..quaternion128 %5, 0
	; imag
	%7 = load %..quaternion128, %..quaternion128* %0, align 8
	%8 = extractvalue %..quaternion128 %7, 1
	; jmag
	%9 = load %..quaternion128, %..quaternion128* %0, align 8
	%10 = extractvalue %..quaternion128 %9, 2
	; kmag
	%11 = load %..quaternion128, %..quaternion128* %0, align 8
	%12 = extractvalue %..quaternion128 %11, 3
	store float %6, float* %1
	store float %8, float* %2
	store float %10, float* %3
	store float %12, float* %4
	; ReturnStmt
	%13 = load float, float* %1, align 4
	%14 = load float, float* %1, align 4
	%15 = fmul float %13, %14
	%16 = load float, float* %2, align 4
	%17 = load float, float* %2, align 4
	%18 = fmul float %16, %17
	%19 = fadd float %15, %18
	%20 = load float, float* %3, align 4
	%21 = load float, float* %3, align 4
	%22 = fmul float %20, %21
	%23 = fadd float %19, %22
	%24 = load float, float* %4, align 4
	%25 = load float, float* %4, align 4
	%26 = fmul float %24, %25
	%27 = fadd float %23, %26
	%28 = call ccc float @llvm.sqrt.f32(float %27)
	ret float %28
}

define double @.__abs_quaternion256(%..quaternion256 %x) alwaysinline {
decls-0:
	%0 = alloca %..quaternion256, align 8
	%1 = alloca double, align 8
	%2 = alloca double, align 8
	%3 = alloca double, align 8
	%4 = alloca double, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %0
		store %..quaternion256 %x, %..quaternion256* %0
	; r
	store double zeroinitializer, double* %1
		; i
	store double zeroinitializer, double* %2
		; j
	store double zeroinitializer, double* %3
		; k
	store double zeroinitializer, double* %4
		; real
	%5 = load %..quaternion256, %..quaternion256* %0, align 8
	%6 = extractvalue %..quaternion256 %5, 0
	; imag
	%7 = load %..quaternion256, %..quaternion256* %0, align 8
	%8 = extractvalue %..quaternion256 %7, 1
	; jmag
	%9 = load %..quaternion256, %..quaternion256* %0, align 8
	%10 = extractvalue %..quaternion256 %9, 2
	; kmag
	%11 = load %..quaternion256, %..quaternion256* %0, align 8
	%12 = extractvalue %..quaternion256 %11, 3
	store double %6, double* %1
	store double %8, double* %2
	store double %10, double* %3
	store double %12, double* %4
	; ReturnStmt
	%13 = load double, double* %1, align 8
	%14 = load double, double* %1, align 8
	%15 = fmul double %13, %14
	%16 = load double, double* %2, align 8
	%17 = load double, double* %2, align 8
	%18 = fmul double %16, %17
	%19 = fadd double %15, %18
	%20 = load double, double* %3, align 8
	%21 = load double, double* %3, align 8
	%22 = fmul double %20, %21
	%23 = fadd double %19, %22
	%24 = load double, double* %4, align 8
	%25 = load double, double* %4, align 8
	%26 = fmul double %24, %25
	%27 = fadd double %23, %26
	%28 = call ccc double @llvm.sqrt.f64(double %27)
	ret double %28
}

define void @.__dynamic_array_make(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %len, i64 %cap) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %Raw_Dynamic_Array*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %len, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %cap, i64* %4
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %5
		%6 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%7 = bitcast %..rawptr %6 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %7, %Raw_Dynamic_Array** %5
	call void @.__check_context()
	; AssignStmt
	; SelectorExpr
	%8 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%9 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %8, i64 0
	%10 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %9, i64 0, i32 3
	; SelectorExpr
	%11 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%12 = load %Allocator, %Allocator* %11, align 8
	store %Allocator %12, %Allocator* %10
	; assert
	; SelectorExpr
	; SelectorExpr
	%13 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0
	%15 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %14, i64 0, i32 3
	%16 = getelementptr inbounds %Allocator, %Allocator* %15, i64 0, i32 0
	%17 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %16, align 8
	%18 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %17, zeroinitializer
	%19 = icmp eq i1 %18, false
	br i1 %19, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$c, i64 0, i32 0), i64 42}, i64 455, i64 25, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$d, i64 0, i32 0), i64 32})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; IfStmt
	%20 = load i64, i64* %4, align 8
	%21 = icmp sgt i64 %20, 0
	br i1 %21, label %if.then-3, label %if.done-4

if.then-3:
	%22 = load %..rawptr, %..rawptr* %0, align 8
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %2, align 8
	%25 = load i64, i64* %4, align 8
	%26 = call i1 @.__dynamic_array_reserve(%..rawptr %22, i64 %23, i64 %24, i64 %25)
	; AssignStmt
	; SelectorExpr
	%27 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%28 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %27, i64 0
	%29 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %28, i64 0, i32 1
	%30 = load i64, i64* %3, align 8
	store i64 %30, i64* %29
	br label %if.done-4

if.done-4:
	ret void
}

define i1 @.__dynamic_array_reserve(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %cap) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %Raw_Dynamic_Array*, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca %Allocator, align 8
	%8 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %cap, i64* %3
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %4
		%9 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%10 = bitcast %..rawptr %9 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %10, %Raw_Dynamic_Array** %4
	; IfStmt
	%11 = load i64, i64* %3, align 8
	; SelectorExpr
	%12 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%13 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %12, i64 0
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %11, %15
	br i1 %16, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 true

if.done-2:
	call void @.__check_context()
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%17 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%18 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %18, i64 0, i32 3
	%20 = getelementptr inbounds %Allocator, %Allocator* %19, i64 0, i32 0
	%21 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %20, align 8
	%22 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %21, zeroinitializer
	br i1 %22, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%23 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%24 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %23, i64 0
	%25 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %24, i64 0, i32 3
	; SelectorExpr
	%26 = getelementptr inbounds %Context, %Context* @__context, i64 0, i32 1
	%27 = load %Allocator, %Allocator* %26, align 8
	store %Allocator %27, %Allocator* %25
	br label %if.done-4

if.done-4:
	; assert
	; SelectorExpr
	; SelectorExpr
	%28 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%29 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %28, i64 0
	%30 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %29, i64 0, i32 3
	%31 = getelementptr inbounds %Allocator, %Allocator* %30, i64 0, i32 0
	%32 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %31, align 8
	%33 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)* %32, zeroinitializer
	%34 = icmp eq i1 %33, false
	br i1 %34, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$e, i64 0, i32 0), i64 42}, i64 474, i64 25, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$f, i64 0, i32 0), i64 32})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; old_size
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%35 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%36 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %35, i64 0
	%37 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %36, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = load i64, i64* %1, align 8
	%40 = mul i64 %38, %39
	store i64 %40, i64* %5
	; new_size
	store i64 zeroinitializer, i64* %6
		%41 = load i64, i64* %3, align 8
	%42 = load i64, i64* %1, align 8
	%43 = mul i64 %41, %42
	store i64 %43, i64* %6
	; allocator
	store %Allocator zeroinitializer, %Allocator* %7
		; SelectorExpr
	%44 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%45 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %44, i64 0
	%46 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %45, i64 0, i32 3
	%47 = load %Allocator, %Allocator* %46, align 8
	store %Allocator %47, %Allocator* %7
	; new_data
	store %..rawptr zeroinitializer, %..rawptr* %8
		; SelectorExpr
	%48 = getelementptr inbounds %Allocator, %Allocator* %7, i64 0, i32 0
	%49 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64)** %48, align 8
	; SelectorExpr
	%50 = getelementptr inbounds %Allocator, %Allocator* %7, i64 0, i32 1
	%51 = load %..rawptr, %..rawptr* %50, align 8
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %2, align 8
	; SelectorExpr
	%54 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%55 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %54, i64 0
	%56 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %55, i64 0, i32 0
	%57 = load %..rawptr, %..rawptr* %56, align 8
	%58 = load i64, i64* %5, align 8
	%59 = call %..rawptr %49(%..rawptr %51, i8 3, i64 %52, i64 %53, %..rawptr %57, i64 %58, i64 0)
	store %..rawptr %59, %..rawptr* %8
	; IfStmt
	%60 = load %..rawptr, %..rawptr* %8, align 8
	%61 = icmp eq %..rawptr %60, zeroinitializer
	br i1 %61, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i1 false

if.done-8:
	; AssignStmt
	; SelectorExpr
	%62 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%63 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %62, i64 0
	%64 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %63, i64 0, i32 0
	%65 = load %..rawptr, %..rawptr* %8, align 8
	store %..rawptr %65, %..rawptr* %64
	; AssignStmt
	; SelectorExpr
	%66 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%67 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %66, i64 0
	%68 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %67, i64 0, i32 2
	%69 = load i64, i64* %3, align 8
	store i64 %69, i64* %68
	; ReturnStmt
	ret i1 true
}

define i64 @.__dynamic_array_append(%..rawptr %array_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca i64, align 8
	%5 = alloca %Raw_Dynamic_Array*, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %items, %..rawptr* %3
	store i64 zeroinitializer, i64* %4
		store i64 %item_count, i64* %4
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %5
		%9 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%10 = bitcast %..rawptr %9 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %10, %Raw_Dynamic_Array** %5
	; IfStmt
	%11 = load i64, i64* %4, align 8
	%12 = icmp sle i64 %11, 0
	br i1 %12, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%13 = load %..rawptr, %..rawptr* %3, align 8
	%14 = icmp eq %..rawptr %13, zeroinitializer
	br i1 %14, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%15 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%16 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %15, i64 0
	%17 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %16, i64 0, i32 1
	%18 = load i64, i64* %17, align 8
	ret i64 %18

if.done-3:
	; ok
	store i1 zeroinitializer, i1* %6
		store i1 true, i1* %6
	; IfStmt
	; SelectorExpr
	%19 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%20 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %20, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	; SelectorExpr
	%23 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%24 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %23, i64 0
	%25 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %24, i64 0, i32 1
	%26 = load i64, i64* %25, align 8
	%27 = load i64, i64* %4, align 8
	%28 = add i64 %26, %27
	%29 = icmp sle i64 %22, %28
	br i1 %29, label %if.then-4, label %if.done-5

if.then-4:
	; cap
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%30 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%31 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %30, i64 0
	%32 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %31, i64 0, i32 2
	%33 = load i64, i64* %32, align 8
	%34 = mul i64 2, %33
	; max
	%35 = load i64, i64* %4, align 8
	%36 = icmp sgt i64 8, %35
	%37 = select i1 %36, i64 8, i64 %35
	%38 = add i64 %34, %37
	store i64 %38, i64* %7
	; AssignStmt
	%39 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%40 = load i64, i64* %1, align 8
	%41 = load i64, i64* %2, align 8
	%42 = load i64, i64* %7, align 8
	%43 = bitcast %Raw_Dynamic_Array* %39 to %..rawptr
	%44 = call i1 @.__dynamic_array_reserve(%..rawptr %43, i64 %40, i64 %41, i64 %42)
	store i1 %44, i1* %6
	br label %if.done-5

if.done-5:
	; IfStmt
	%45 = load i1, i1* %6, align 1
	br i1 %45, label %if.done-7, label %if.then-6

if.then-6:
	; ReturnStmt
	; SelectorExpr
	%46 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%47 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %46, i64 0
	%48 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %47, i64 0, i32 1
	%49 = load i64, i64* %48, align 8
	ret i64 %49

if.done-7:
	; data
	store i8* zeroinitializer, i8** %8
		; SelectorExpr
	%50 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%51 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %50, i64 0
	%52 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %51, i64 0, i32 0
	%53 = load %..rawptr, %..rawptr* %52, align 8
	; cast - cast
	%54 = bitcast %..rawptr %53 to i8*
	store i8* %54, i8** %8
	; assert
	%55 = load i8*, i8** %8, align 8
	%56 = icmp ne i8* %55, zeroinitializer
	%57 = icmp eq i1 %56, false
	br i1 %57, label %builtin.assert.err-8, label %builtin.assert.done-9

builtin.assert.err-8:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$10, i64 0, i32 0), i64 42}, i64 510, i64 9, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$11, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-9

builtin.assert.done-9:
	%58 = load i8*, i8** %8, align 8
	%59 = load i64, i64* %1, align 8
	; SelectorExpr
	%60 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%61 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	%64 = mul i64 %59, %63
	%65 = getelementptr inbounds i8, i8* %58, i64 %64
	%66 = load %..rawptr, %..rawptr* %3, align 8
	%67 = load i64, i64* %1, align 8
	%68 = load i64, i64* %4, align 8
	%69 = mul i64 %67, %68
	%70 = bitcast i8* %65 to %..rawptr
	%71 = call %..rawptr @.__mem_copy(%..rawptr %70, %..rawptr %66, i64 %69)
	; AssignStmt
	; SelectorExpr
	%72 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%73 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %72, i64 0
	%74 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %73, i64 0, i32 1
	%75 = load i64, i64* %4, align 8
	%76 = load i64, i64* %74, align 8
	%77 = add i64 %76, %75
	store i64 %77, i64* %74
	; ReturnStmt
	; SelectorExpr
	%78 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%79 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %78, i64 0
	%80 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %79, i64 0, i32 1
	%81 = load i64, i64* %80, align 8
	ret i64 %81
}

define i64 @.__dynamic_array_append_nothing(%..rawptr %array_, i64 %elem_size, i64 %elem_align) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %Raw_Dynamic_Array*, align 8
	%4 = alloca i1, align 1
	%5 = alloca i64, align 8
	%6 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %array_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %3
		%7 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%8 = bitcast %..rawptr %7 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %8, %Raw_Dynamic_Array** %3
	; ok
	store i1 zeroinitializer, i1* %4
		store i1 true, i1* %4
	; IfStmt
	; SelectorExpr
	%9 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%10 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %9, i64 0
	%11 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %10, i64 0, i32 2
	%12 = load i64, i64* %11, align 8
	; SelectorExpr
	%13 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0
	%15 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	%17 = add i64 %16, 1
	%18 = icmp sle i64 %12, %17
	br i1 %18, label %if.then-1, label %if.done-2

if.then-1:
	; cap
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%19 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%20 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %20, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	%23 = mul i64 2, %22
	%24 = add i64 %23, 8
	store i64 %24, i64* %5
	; AssignStmt
	%25 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%26 = load i64, i64* %1, align 8
	%27 = load i64, i64* %2, align 8
	%28 = load i64, i64* %5, align 8
	%29 = bitcast %Raw_Dynamic_Array* %25 to %..rawptr
	%30 = call i1 @.__dynamic_array_reserve(%..rawptr %29, i64 %26, i64 %27, i64 %28)
	store i1 %30, i1* %4
	br label %if.done-2

if.done-2:
	; IfStmt
	%31 = load i1, i1* %4, align 1
	br i1 %31, label %if.done-4, label %if.then-3

if.then-3:
	; ReturnStmt
	; SelectorExpr
	%32 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%33 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %33, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	ret i64 %35

if.done-4:
	; data
	store i8* zeroinitializer, i8** %6
		; SelectorExpr
	%36 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%37 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %36, i64 0
	%38 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %37, i64 0, i32 0
	%39 = load %..rawptr, %..rawptr* %38, align 8
	; cast - cast
	%40 = bitcast %..rawptr %39 to i8*
	store i8* %40, i8** %6
	; assert
	%41 = load i8*, i8** %6, align 8
	%42 = icmp ne i8* %41, zeroinitializer
	%43 = icmp eq i1 %42, false
	br i1 %43, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$12, i64 0, i32 0), i64 42}, i64 529, i64 9, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$13, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	%44 = load i8*, i8** %6, align 8
	%45 = load i64, i64* %1, align 8
	; SelectorExpr
	%46 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%47 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %46, i64 0
	%48 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %47, i64 0, i32 1
	%49 = load i64, i64* %48, align 8
	%50 = mul i64 %45, %49
	%51 = getelementptr inbounds i8, i8* %44, i64 %50
	%52 = load i64, i64* %1, align 8
	%53 = bitcast i8* %51 to %..rawptr
	%54 = call %..rawptr @.__mem_zero(%..rawptr %53, i64 %52)
	; SelectorExpr
	%55 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%56 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %55, i64 0
	%57 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %56, i64 0, i32 1
	%58 = load i64, i64* %57, align 8
	%59 = add i64 %58, 1
	store i64 %59, i64* %57
	; ReturnStmt
	; SelectorExpr
	%60 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %3, align 8
	%61 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	ret i64 %63
}

define i64 @.__slice_append(%..rawptr %slice_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca i64, align 8
	%5 = alloca %Raw_Slice*, align 8
	%6 = alloca i8*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %slice_, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %elem_size, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %elem_align, i64* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %items, %..rawptr* %3
	store i64 zeroinitializer, i64* %4
		store i64 %item_count, i64* %4
	; slice
	store %Raw_Slice* zeroinitializer, %Raw_Slice** %5
		%7 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%8 = bitcast %..rawptr %7 to %Raw_Slice*
	store %Raw_Slice* %8, %Raw_Slice** %5
	; IfStmt
	%9 = load i64, i64* %4, align 8
	%10 = icmp sle i64 %9, 0
	br i1 %10, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%11 = load %..rawptr, %..rawptr* %3, align 8
	%12 = icmp eq %..rawptr %11, zeroinitializer
	br i1 %12, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%13 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%14 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %13, i64 0
	%15 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	ret i64 %16

if.done-3:
	; AssignStmt
	; min
	; SelectorExpr
	%17 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%18 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %17, i64 0
	%19 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	; SelectorExpr
	%21 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%22 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %21, i64 0
	%23 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %22, i64 0, i32 1
	%24 = load i64, i64* %23, align 8
	%25 = sub i64 %20, %24
	%26 = load i64, i64* %4, align 8
	%27 = icmp slt i64 %25, %26
	%28 = select i1 %27, i64 %25, i64 %26
	store i64 %28, i64* %4
	; IfStmt
	%29 = load i64, i64* %4, align 8
	%30 = icmp sgt i64 %29, 0
	br i1 %30, label %if.then-4, label %if.done-7

if.then-4:
	; data
	store i8* zeroinitializer, i8** %6
		; SelectorExpr
	%31 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%32 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %31, i64 0
	%33 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %32, i64 0, i32 0
	%34 = load %..rawptr, %..rawptr* %33, align 8
	; cast - cast
	%35 = bitcast %..rawptr %34 to i8*
	store i8* %35, i8** %6
	; assert
	%36 = load i8*, i8** %6, align 8
	%37 = icmp ne i8* %36, zeroinitializer
	%38 = icmp eq i1 %37, false
	br i1 %38, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$14, i64 0, i32 0), i64 42}, i64 546, i64 10, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$15, i64 0, i32 0), i64 11})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	%39 = load i8*, i8** %6, align 8
	%40 = load i64, i64* %1, align 8
	; SelectorExpr
	%41 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%42 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %41, i64 0
	%43 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	%45 = mul i64 %40, %44
	%46 = getelementptr inbounds i8, i8* %39, i64 %45
	%47 = load %..rawptr, %..rawptr* %3, align 8
	%48 = load i64, i64* %1, align 8
	%49 = load i64, i64* %4, align 8
	%50 = mul i64 %48, %49
	%51 = bitcast i8* %46 to %..rawptr
	%52 = call %..rawptr @.__mem_copy(%..rawptr %51, %..rawptr %47, i64 %50)
	; AssignStmt
	; SelectorExpr
	%53 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%54 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %53, i64 0
	%55 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %54, i64 0, i32 1
	%56 = load i64, i64* %4, align 8
	%57 = load i64, i64* %55, align 8
	%58 = add i64 %57, %56
	store i64 %58, i64* %55
	br label %if.done-7

if.done-7:
	; ReturnStmt
	; SelectorExpr
	%59 = load %Raw_Slice*, %Raw_Slice** %5, align 8
	%60 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %59, i64 0
	%61 = getelementptr inbounds %Raw_Slice, %Raw_Slice* %60, i64 0, i32 1
	%62 = load i64, i64* %61, align 8
	ret i64 %62
}

define i64 @.__default_hash({i8*, i64, i64} %data) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %0
	; ReturnStmt
	%1 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%2 = call i64 @.__default_hash.fnv64a-0({i8*, i64, i64} %1)
	ret i64 %2
}

define i64 @.__default_hash.fnv64a-0({i8*, i64, i64} %data) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %0
	; h
	store i64 zeroinitializer, i64* %1
		store i64 -3750763034362895579, i64* %1
	; RangeStmt
	; b
	store i8 zeroinitializer, i8* %2
		%5 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	store i64 zeroinitializer, i64* %3
	%6 = extractvalue {i8*, i64, i64} %5, 1
	store i64 %6, i64* %3
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%7 = load i64, i64* %4, align 8
	%8 = add i64 %7, 1
	store i64 %8, i64* %4
	%9 = load i64, i64* %3, align 8
	%10 = icmp slt i64 %8, %9
	br i1 %10, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%11 = load i64, i64* %4, align 8
	%12 = extractvalue {i8*, i64, i64} %5, 0
	%13 = getelementptr inbounds i8, i8* %12, i64 %11
	%14 = load i8, i8* %13, align 1
	store i8 %14, i8* %2
	; AssignStmt
	%15 = load i64, i64* %1, align 8
	%16 = load i8, i8* %2, align 1
	; cast - cast
	%17 = zext i8 %16 to i64
	%18 = xor i64 %15, %17
	%19 = mul i64 %18, 1099511628211
	store i64 %19, i64* %1
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%20 = load i64, i64* %1, align 8
	ret i64 %20
}

define i64 @.__default_hash_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%3 = load %..string, %..string* %0, align 8
	; cast - cast
	%4 = extractvalue %..string %3, 0
	store i8* zeroinitializer, i8** %1
	store i8* %4, i8** %1
	%5 = extractvalue %..string %3, 1
	%6 = sub i64 %5, 0
	%7 = sub i64 %5, 0
	%8 = load i8*, i8** %1, align 8
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %6, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = call i64 @.__default_hash({i8*, i64, i64} %13)
	ret i64 %14
}

define i1 @.__dynamic_map_reserve(%__Map_Header %header, i64 %cap) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca i1, align 1
	%3 = alloca i1, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %header, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %cap, i64* %1
	; h
	store i1 zeroinitializer, i1* %2
		; SelectorExpr
	%4 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%5 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %4, align 8
	%6 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %5, i64 0
	%7 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %6, i64 0, i32 0
	%8 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %7, i64 0
	%9 = load i64, i64* %1, align 8
	%10 = bitcast {i64*, i64, i64,%Allocator}* %8 to %..rawptr
	%11 = call i1 @.__dynamic_array_reserve(%..rawptr %10, i64 8, i64 8, i64 %9)
	store i1 %11, i1* %2
	; e
	store i1 zeroinitializer, i1* %3
		; SelectorExpr
	%12 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%13 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %12, align 8
	%14 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %13, i64 0
	%15 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %14, i64 0, i32 1
	%16 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %15, i64 0
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%18 = load i64, i64* %17, align 8
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %1, align 8
	%22 = bitcast %Raw_Dynamic_Array* %16 to %..rawptr
	%23 = call i1 @.__dynamic_array_reserve(%..rawptr %22, i64 %18, i64 %20, i64 %21)
	store i1 %23, i1* %3
	; ReturnStmt
	%24 = load i1, i1* %2, align 1
	%25 = load i1, i1* %2, align 1
	br i1 %25, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%26 = load i1, i1* %3, align 1
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%27 = phi i1 [ false, %decls-0 ], [ %26, %logical.cmp.rhs-1 ]
	ret i1 %27
}

define void @.__dynamic_map_rehash(%__Map_Header %header, i64 %new_count) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca %__Map_Header, align 8
	%3 = alloca %Raw_Dynamic_Map, align 8
	%4 = alloca %Raw_Dynamic_Array*, align 8
	%5 = alloca %Raw_Dynamic_Array*, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca %__Map_Entry_Header*, align 8
	%10 = alloca i8*, align 8
	%11 = alloca %__Map_Find_Result, align 8
	%12 = alloca i64, align 8
	%13 = alloca %__Map_Entry_Header*, align 8
	%14 = alloca %__Map_Entry_Header*, align 8
	%15 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %header, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %new_count, i64* %1
	; new_header
	store %__Map_Header zeroinitializer, %__Map_Header* %2
		%16 = load %__Map_Header, %__Map_Header* %0, align 8
	store %__Map_Header %16, %__Map_Header* %2
	; nm
	store %Raw_Dynamic_Map zeroinitializer, %Raw_Dynamic_Map* %3
		; AssignStmt
	; SelectorExpr
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%18 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0
	store %Raw_Dynamic_Map* %18, %Raw_Dynamic_Map** %17
	; header_hashes
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %4
		; SelectorExpr
	; SelectorExpr
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%20 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %19, align 8
	%21 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %20, i64 0
	%22 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %21, i64 0, i32 0
	%23 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %22, i64 0
	; cast - cast
	%24 = bitcast {i64*, i64, i64,%Allocator}* %23 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %24, %Raw_Dynamic_Array** %4
	; nm_hashes
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %5
		; SelectorExpr
	%25 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%26 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %25, i64 0
	; cast - cast
	%27 = bitcast {i64*, i64, i64,%Allocator}* %26 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %27, %Raw_Dynamic_Array** %5
	; reserve
	; SelectorExpr
	%28 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%29 = load i64, i64* %1, align 8
	%30 = bitcast {i64*, i64, i64,%Allocator}* %28 to %..rawptr
	%31 = call i1 @.__dynamic_array_reserve(%..rawptr %30, i64 8, i64 8, i64 %29)
	; AssignStmt
	; SelectorExpr
	%32 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%33 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %33, i64 0, i32 1
	; SelectorExpr
	%35 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %5, align 8
	%36 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %35, i64 0
	%37 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %36, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	store i64 %38, i64* %34
	; SelectorExpr
	%39 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 1
	%40 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %39, i64 0
	%41 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%42 = load i64, i64* %41, align 8
	%43 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%44 = load i64, i64* %43, align 8
	; SelectorExpr
	; SelectorExpr
	%45 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%46 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %45, align 8
	%47 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %46, i64 0
	%48 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %47, i64 0, i32 1
	%49 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %48, i64 0, i32 1
	%50 = load i64, i64* %49, align 8
	%51 = bitcast %Raw_Dynamic_Array* %40 to %..rawptr
	%52 = call i1 @.__dynamic_array_reserve(%..rawptr %51, i64 %42, i64 %44, i64 %50)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %6
		; SelectorExpr
	%53 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%54 = getelementptr inbounds {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %53, i64 0, i32 1
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-1

for.index.loop-1:
	%55 = load i64, i64* %7, align 8
	%56 = add i64 %55, 1
	store i64 %56, i64* %7
	%57 = load i64, i64* %54, align 8
	%58 = icmp slt i64 %56, %57
	br i1 %58, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%59 = load i64, i64* %7, align 8
	store i64 %59, i64* %6
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%60 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%61 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %60, align 8
	%62 = extractvalue {i64*, i64, i64,%Allocator} %61, 0
	%63 = extractvalue {i64*, i64, i64,%Allocator} %61, 1
	%64 = load i64, i64* %6, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$16, i64 0, i32 0), i64 42}, i64 616, i64 13, i64 %64, i64 %63)
	%65 = getelementptr inbounds i64, i64* %62, i64 %64
	store i64 -1, i64* %65
	br label %for.index.loop-1

for.index.done-3:
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %8
		store i64 0, i64* %8
	br label %for.loop-4

for.loop-4:
	%66 = load i64, i64* %8, align 8
	; SelectorExpr
	; SelectorExpr
	%67 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 1
	%68 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %67, i64 0, i32 1
	%69 = load i64, i64* %68, align 8
	%70 = icmp slt i64 %66, %69
	br i1 %70, label %for.body-5, label %for.done-13

for.body-5:
	; entry_header
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %9
		%71 = load %__Map_Header, %__Map_Header* %2, align 8
	%72 = load i64, i64* %8, align 8
	%73 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %71, i64 %72)
	store %__Map_Entry_Header* %73, %__Map_Entry_Header** %9
	; data
	store i8* zeroinitializer, i8** %10
		%74 = load %__Map_Entry_Header*, %__Map_Entry_Header** %9, align 8
	; cast - cast
	%75 = bitcast %__Map_Entry_Header* %74 to i8*
	store i8* %75, i8** %10
	; IfStmt
	; SelectorExpr
	%76 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%77 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %76, align 8
	%78 = extractvalue {i64*, i64, i64,%Allocator} %77, 1
	%79 = icmp eq i64 %78, 0
	br i1 %79, label %if.then-6, label %if.done-7

if.then-6:
	%80 = load %__Map_Header, %__Map_Header* %2, align 8
	call void @.__dynamic_map_grow(%__Map_Header %80)
	br label %if.done-7

if.done-7:
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %11
		%81 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%82 = load %__Map_Entry_Header*, %__Map_Entry_Header** %9, align 8
	%83 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %82, i64 0
	%84 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %83, i64 0, i32 0
	%85 = load %__Map_Key, %__Map_Key* %84, align 8
	%86 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %81, %__Map_Key %85)
	store %__Map_Find_Result %86, %__Map_Find_Result* %11
	; j
	store i64 zeroinitializer, i64* %12
		%87 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%88 = load %__Map_Entry_Header*, %__Map_Entry_Header** %9, align 8
	%89 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %88, i64 0
	%90 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %89, i64 0, i32 0
	%91 = load %__Map_Key, %__Map_Key* %90, align 8
	%92 = call i64 @.__dynamic_map_add_entry(%__Map_Header %87, %__Map_Key %91)
	store i64 %92, i64* %12
	; IfStmt
	; SelectorExpr
	%93 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %11, i64 0, i32 1
	%94 = load i64, i64* %93, align 8
	%95 = icmp slt i64 %94, 0
	br i1 %95, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%96 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%97 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %96, align 8
	%98 = extractvalue {i64*, i64, i64,%Allocator} %97, 0
	%99 = extractvalue {i64*, i64, i64,%Allocator} %97, 1
	; SelectorExpr
	%100 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %11, i64 0, i32 0
	%101 = load i64, i64* %100, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$17, i64 0, i32 0), i64 42}, i64 630, i64 17, i64 %101, i64 %99)
	%102 = getelementptr inbounds i64, i64* %98, i64 %101
	%103 = load i64, i64* %12, align 8
	store i64 %103, i64* %102
	br label %if.done-10

if.else-9:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %13
		%104 = load %__Map_Header, %__Map_Header* %2, align 8
	; SelectorExpr
	%105 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %11, i64 0, i32 1
	%106 = load i64, i64* %105, align 8
	%107 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %104, i64 %106)
	store %__Map_Entry_Header* %107, %__Map_Entry_Header** %13
	; AssignStmt
	; SelectorExpr
	%108 = load %__Map_Entry_Header*, %__Map_Entry_Header** %13, align 8
	%109 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %108, i64 0
	%110 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %109, i64 0, i32 1
	%111 = load i64, i64* %12, align 8
	store i64 %111, i64* %110
	br label %if.done-10

if.done-10:
	; e
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %14
		%112 = load %__Map_Header, %__Map_Header* %2, align 8
	%113 = load i64, i64* %12, align 8
	%114 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %112, i64 %113)
	store %__Map_Entry_Header* %114, %__Map_Entry_Header** %14
	; AssignStmt
	; SelectorExpr
	%115 = load %__Map_Entry_Header*, %__Map_Entry_Header** %14, align 8
	%116 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %115, i64 0
	%117 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %116, i64 0, i32 1
	; SelectorExpr
	%118 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %11, i64 0, i32 2
	%119 = load i64, i64* %118, align 8
	store i64 %119, i64* %117
	; ndata
	store i8* zeroinitializer, i8** %15
		%120 = load %__Map_Entry_Header*, %__Map_Entry_Header** %14, align 8
	; cast - cast
	%121 = bitcast %__Map_Entry_Header* %120 to i8*
	store i8* %121, i8** %15
	%122 = load i8*, i8** %15, align 8
	%123 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%124 = load i64, i64* %123, align 8
	%125 = getelementptr inbounds i8, i8* %122, i64 %124
	%126 = load i8*, i8** %10, align 8
	%127 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%128 = load i64, i64* %127, align 8
	%129 = getelementptr inbounds i8, i8* %126, i64 %128
	%130 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%131 = load i64, i64* %130, align 8
	%132 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%133 = load i64, i64* %132, align 8
	%134 = sub i64 %131, %133
	%135 = bitcast i8* %125 to %..rawptr
	%136 = bitcast i8* %129 to %..rawptr
	%137 = call %..rawptr @.__mem_copy(%..rawptr %135, %..rawptr %136, i64 %134)
	; IfStmt
	%138 = load %__Map_Header, %__Map_Header* %2, align 8
	%139 = call i1 @.__dynamic_map_full(%__Map_Header %138)
	br i1 %139, label %if.then-11, label %if.done-12

if.then-11:
	%140 = load %__Map_Header, %__Map_Header* %2, align 8
	call void @.__dynamic_map_grow(%__Map_Header %140)
	br label %if.done-12

if.done-12:
	%141 = load i64, i64* %8, align 8
	%142 = add i64 %141, 1
	store i64 %142, i64* %8
	br label %for.loop-4

for.done-13:
	; SelectorExpr
	%143 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%144 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %143, i64 0
	%145 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %144, i64 0, i32 3
	%146 = load %Allocator, %Allocator* %145, align 8
	; SelectorExpr
	%147 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %4, align 8
	%148 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %147, i64 0
	%149 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %148, i64 0, i32 0
	%150 = load %..rawptr, %..rawptr* %149, align 8
	call void @.free_ptr_with_allocator(%Allocator %146, %..rawptr %150)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%151 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%152 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %151, align 8
	%153 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %152, i64 0
	%154 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %153, i64 0, i32 1
	%155 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %154, i64 0, i32 3
	%156 = load %Allocator, %Allocator* %155, align 8
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%157 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%158 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %157, align 8
	%159 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %158, i64 0
	%160 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %159, i64 0, i32 1
	%161 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %160, i64 0, i32 0
	%162 = load %..rawptr, %..rawptr* %161, align 8
	call void @.free_ptr_with_allocator(%Allocator %156, %..rawptr %162)
	; AssignStmt
	; SelectorExpr
	%163 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%164 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %163, align 8
	%165 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %164, i64 0
	%166 = load %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, align 8
	store %Raw_Dynamic_Map %166, %Raw_Dynamic_Map* %165
	ret void
}

define %..rawptr @.__dynamic_map_get(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca i64, align 8
	%3 = alloca %__Map_Find_Result, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; index
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%6 = load %__Map_Header, %__Map_Header* %0, align 8
	%7 = load %__Map_Key, %__Map_Key* %1, align 8
	%8 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %6, %__Map_Key %7)
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %3
	store %__Map_Find_Result %8, %__Map_Find_Result* %3
	%9 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %3, i64 0, i32 2
	%10 = load i64, i64* %9, align 8
	store i64 %10, i64* %2
	; IfStmt
	%11 = load i64, i64* %2, align 8
	%12 = icmp sge i64 %11, 0
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; data
	store i8* zeroinitializer, i8** %4
		%13 = load %__Map_Header, %__Map_Header* %0, align 8
	%14 = load i64, i64* %2, align 8
	%15 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %13, i64 %14)
	; cast - cast
	%16 = bitcast %__Map_Entry_Header* %15 to i8*
	store i8* %16, i8** %4
	; val
	store i8* zeroinitializer, i8** %5
		%17 = load i8*, i8** %4, align 8
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%19 = load i64, i64* %18, align 8
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	store i8* %20, i8** %5
	; ReturnStmt
	%21 = load i8*, i8** %5, align 8
	%22 = bitcast i8* %21 to %..rawptr
	ret %..rawptr %22

if.done-2:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define void @.__dynamic_map_set(%__Map_Header %h, %__Map_Key %key, %..rawptr %value) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %..rawptr, align 8
	%3 = alloca i64, align 8
	%4 = alloca %__Map_Find_Result, align 8
	%5 = alloca %__Map_Entry_Header*, align 8
	%6 = alloca i8*, align 8
	%7 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	store %..rawptr zeroinitializer, %..rawptr* %2
		store %..rawptr %value, %..rawptr* %2
	; index
	store i64 zeroinitializer, i64* %3
		; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%9 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %8, align 8
	%10 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %9, i64 0
	%11 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %10, i64 0, i32 0
	%12 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %11, align 8
	%13 = extractvalue {i64*, i64, i64,%Allocator} %12, 1
	%14 = icmp eq i64 %13, 0
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	%15 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_grow(%__Map_Header %15)
	br label %if.done-2

if.done-2:
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %4
		%16 = load %__Map_Header, %__Map_Header* %0, align 8
	%17 = load %__Map_Key, %__Map_Key* %1, align 8
	%18 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %16, %__Map_Key %17)
	store %__Map_Find_Result %18, %__Map_Find_Result* %4
	; IfStmt
	; SelectorExpr
	%19 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sge i64 %20, 0
	br i1 %21, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%22 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 2
	%23 = load i64, i64* %22, align 8
	store i64 %23, i64* %3
	br label %if.done-8

if.else-4:
	; AssignStmt
	%24 = load %__Map_Header, %__Map_Header* %0, align 8
	%25 = load %__Map_Key, %__Map_Key* %1, align 8
	%26 = call i64 @.__dynamic_map_add_entry(%__Map_Header %24, %__Map_Key %25)
	store i64 %26, i64* %3
	; IfStmt
	; SelectorExpr
	%27 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	%29 = icmp sge i64 %28, 0
	br i1 %29, label %if.then-5, label %if.else-6

if.then-5:
	; entry
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %5
		%30 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%31 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 1
	%32 = load i64, i64* %31, align 8
	%33 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %30, i64 %32)
	store %__Map_Entry_Header* %33, %__Map_Entry_Header** %5
	; AssignStmt
	; SelectorExpr
	%34 = load %__Map_Entry_Header*, %__Map_Entry_Header** %5, align 8
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0
	%36 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %35, i64 0, i32 1
	%37 = load i64, i64* %3, align 8
	store i64 %37, i64* %36
	br label %if.done-7

if.else-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%38 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%39 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %38, align 8
	%40 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %39, i64 0
	%41 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %40, i64 0, i32 0
	%42 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %41, align 8
	%43 = extractvalue {i64*, i64, i64,%Allocator} %42, 0
	%44 = extractvalue {i64*, i64, i64,%Allocator} %42, 1
	; SelectorExpr
	%45 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %4, i64 0, i32 0
	%46 = load i64, i64* %45, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$18, i64 0, i32 0), i64 42}, i64 674, i64 16, i64 %46, i64 %44)
	%47 = getelementptr inbounds i64, i64* %43, i64 %46
	%48 = load i64, i64* %3, align 8
	store i64 %48, i64* %47
	br label %if.done-7

if.done-7:
	br label %if.done-8

if.done-8:
	; data
	store i8* zeroinitializer, i8** %6
		%49 = load %__Map_Header, %__Map_Header* %0, align 8
	%50 = load i64, i64* %3, align 8
	%51 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %49, i64 %50)
	; cast - cast
	%52 = bitcast %__Map_Entry_Header* %51 to i8*
	store i8* %52, i8** %6
	; val
	store i8* zeroinitializer, i8** %7
		%53 = load i8*, i8** %6, align 8
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%55 = load i64, i64* %54, align 8
	%56 = getelementptr inbounds i8, i8* %53, i64 %55
	store i8* %56, i8** %7
	%57 = load i8*, i8** %7, align 8
	%58 = load %..rawptr, %..rawptr* %2, align 8
	%59 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%60 = load i64, i64* %59, align 8
	%61 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 4
	%62 = load i64, i64* %61, align 8
	%63 = sub i64 %60, %62
	%64 = bitcast i8* %57 to %..rawptr
	%65 = call %..rawptr @.__mem_copy(%..rawptr %64, %..rawptr %58, i64 %63)
	; IfStmt
	%66 = load %__Map_Header, %__Map_Header* %0, align 8
	%67 = call i1 @.__dynamic_map_full(%__Map_Header %66)
	br i1 %67, label %if.then-9, label %if.done-10

if.then-9:
	%68 = load %__Map_Header, %__Map_Header* %0, align 8
	call void @.__dynamic_map_grow(%__Map_Header %68)
	br label %if.done-10

if.done-10:
	ret void
}

define void @.__dynamic_map_grow(%__Map_Header %h) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	; new_count
	store i64 zeroinitializer, i64* %1
		; SelectorExpr
	; SelectorExpr
	%2 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%3 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %2, align 8
	%4 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0
	%5 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %4, i64 0, i32 1
	%6 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %5, i64 0, i32 1
	%7 = load i64, i64* %6, align 8
	%8 = mul i64 2, %7
	%9 = add i64 %8, 8
	store i64 %9, i64* %1
	%10 = load %__Map_Header, %__Map_Header* %0, align 8
	%11 = load i64, i64* %1, align 8
	call void @.__dynamic_map_rehash(%__Map_Header %10, i64 %11)
	ret void
}

define i1 @.__dynamic_map_full(%__Map_Header %h) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	; ReturnStmt
	; SelectorExpr
	%1 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%2 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %1, align 8
	%3 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %2, i64 0
	%4 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %3, i64 0, i32 0
	%5 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %4, align 8
	%6 = extractvalue {i64*, i64, i64,%Allocator} %5, 1
	; cast - cast
	%7 = sitofp i64 %6 to double
	%8 = fmul double 0x3fe8000000000000, %7
	; cast - cast
	%9 = fptosi double %8 to i64
	; SelectorExpr
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%11 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %10, align 8
	%12 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %11, i64 0
	%13 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %12, i64 0, i32 1
	%14 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %13, i64 0, i32 1
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %9, %15
	ret i1 %16
}

define i1 @.__dynamic_map_hash_equal(%__Map_Header %h, %__Map_Key %a, %__Map_Key %b) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Key, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %a, %__Map_Key* %1
	store %__Map_Key zeroinitializer, %__Map_Key* %2
		store %__Map_Key %b, %__Map_Key* %2
	; IfStmt
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Key, %__Map_Key* %2, i64 0, i32 0
	%6 = load i64, i64* %5, align 8
	%7 = icmp eq i64 %4, %6
	br i1 %7, label %if.then-1, label %if.done-4

if.then-1:
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 1
	%9 = load i1, i1* %8, align 1
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 1
	%11 = load %..string, %..string* %10, align 8
	; SelectorExpr
	%12 = getelementptr inbounds %__Map_Key, %__Map_Key* %2, i64 0, i32 1
	%13 = load %..string, %..string* %12, align 8
	%14 = call i1 @.__string_eq(%..string %11, %..string %13)
	ret i1 %14

if.done-3:
	; ReturnStmt
	ret i1 true

if.done-4:
	; ReturnStmt
	ret i1 false
}

define %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Find_Result, align 8
	%3 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %2
		store %__Map_Find_Result {i64 -1, i64 -1, i64 -1}, %__Map_Find_Result* %2
	; IfStmt
	; SelectorExpr
	%4 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%5 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %4, align 8
	%6 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %5, i64 0
	%7 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %6, i64 0, i32 0
	%8 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %7, align 8
	%9 = extractvalue {i64*, i64, i64,%Allocator} %8, 1
	%10 = icmp sgt i64 %9, 0
	br i1 %10, label %if.then-1, label %if.done-7

if.then-1:
	; AssignStmt
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 0
	; SelectorExpr
	%12 = getelementptr inbounds %__Map_Key, %__Map_Key* %1, i64 0, i32 0
	%13 = load i64, i64* %12, align 8
	; SelectorExpr
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%15 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %14, align 8
	%16 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %15, i64 0
	%17 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %16, i64 0, i32 0
	%18 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %17, align 8
	%19 = extractvalue {i64*, i64, i64,%Allocator} %18, 1
	; cast - cast
	%20 = bitcast i64 %19 to i64
	%21 = urem i64 %13, %20
	; cast - cast
	%22 = bitcast i64 %21 to i64
	store i64 %22, i64* %11
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	; IndexExpr
	; SelectorExpr
	%24 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%25 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %24, align 8
	%26 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %25, i64 0
	%27 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %26, i64 0, i32 0
	%28 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %27, align 8
	%29 = extractvalue {i64*, i64, i64,%Allocator} %28, 0
	%30 = extractvalue {i64*, i64, i64,%Allocator} %28, 1
	; SelectorExpr
	%31 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 0
	%32 = load i64, i64* %31, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$19, i64 0, i32 0), i64 42}, i64 713, i64 32, i64 %32, i64 %30)
	%33 = getelementptr inbounds i64, i64* %29, i64 %32
	%34 = load i64, i64* %33, align 8
	store i64 %34, i64* %23
	; ForStmt
	br label %for.loop-2

for.loop-2:
	; SelectorExpr
	%35 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = icmp sge i64 %36, 0
	br i1 %37, label %for.body-3, label %for.done-6

for.body-3:
	; entry
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
		%38 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%39 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%40 = load i64, i64* %39, align 8
	%41 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %38, i64 %40)
	store %__Map_Entry_Header* %41, %__Map_Entry_Header** %3
	; IfStmt
	%42 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%43 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%44 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %43, i64 0
	%45 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %44, i64 0, i32 0
	%46 = load %__Map_Key, %__Map_Key* %45, align 8
	%47 = load %__Map_Key, %__Map_Key* %1, align 8
	%48 = call i1 @.__dynamic_map_hash_equal(%__Map_Header %42, %__Map_Key %46, %__Map_Key %47)
	br i1 %48, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	%49 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	ret %__Map_Find_Result %49

if.done-5:
	; AssignStmt
	; SelectorExpr
	%50 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 1
	; SelectorExpr
	%51 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %50
	; AssignStmt
	; SelectorExpr
	%53 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	; SelectorExpr
	%54 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%55 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %54, i64 0
	%56 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %55, i64 0, i32 1
	%57 = load i64, i64* %56, align 8
	store i64 %57, i64* %53
	br label %for.loop-2

for.done-6:
	br label %if.done-7

if.done-7:
	; ReturnStmt
	%58 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	ret %__Map_Find_Result %58
}

define i64 @.__dynamic_map_add_entry(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; prev
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%6 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %5, align 8
	%7 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %6, i64 0
	%8 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %7, i64 0, i32 1
	%9 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	store i64 %10, i64* %2
	; c
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %13, i64 0, i32 1
	%15 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %14, i64 0
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%17 = load i64, i64* %16, align 8
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 3
	%19 = load i64, i64* %18, align 8
	%20 = bitcast %Raw_Dynamic_Array* %15 to %..rawptr
	%21 = call i64 @.__dynamic_array_append_nothing(%..rawptr %20, i64 %17, i64 %19)
	store i64 %21, i64* %3
	; IfStmt
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %2, align 8
	%24 = icmp ne i64 %22, %23
	br i1 %24, label %if.then-1, label %if.done-2

if.then-1:
	; end
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %4
		%25 = load %__Map_Header, %__Map_Header* %0, align 8
	%26 = load i64, i64* %3, align 8
	%27 = sub i64 %26, 1
	%28 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %25, i64 %27)
	store %__Map_Entry_Header* %28, %__Map_Entry_Header** %4
	; AssignStmt
	; SelectorExpr
	%29 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%30 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %29, i64 0
	%31 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %30, i64 0, i32 0
	%32 = load %__Map_Key, %__Map_Key* %1, align 8
	store %__Map_Key %32, %__Map_Key* %31
	; AssignStmt
	; SelectorExpr
	%33 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%34 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %33, i64 0
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0, i32 1
	store i64 -1, i64* %35
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%36 = load i64, i64* %2, align 8
	ret i64 %36
}

define void @.__dynamic_map_delete(%__Map_Header %h, %__Map_Key %key) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Key, align 8
	%2 = alloca %__Map_Find_Result, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Key zeroinitializer, %__Map_Key* %1
		store %__Map_Key %key, %__Map_Key* %1
	; fr
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %2
		%3 = load %__Map_Header, %__Map_Header* %0, align 8
	%4 = load %__Map_Key, %__Map_Key* %1, align 8
	%5 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %3, %__Map_Key %4)
	store %__Map_Find_Result %5, %__Map_Find_Result* %2
	; IfStmt
	; SelectorExpr
	%6 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %2, i64 0, i32 2
	%7 = load i64, i64* %6, align 8
	%8 = icmp sge i64 %7, 0
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	%9 = load %__Map_Header, %__Map_Header* %0, align 8
	%10 = load %__Map_Find_Result, %__Map_Find_Result* %2, align 8
	call void @.__dynamic_map_erase(%__Map_Header %9, %__Map_Find_Result %10)
	br label %if.done-2

if.done-2:
	ret void
}

define %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %h, i64 %index) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store i64 zeroinitializer, i64* %1
		store i64 %index, i64* %1
	; data
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%4 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %3, align 8
	%5 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %4, i64 0
	%6 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %5, i64 0, i32 1
	%7 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %6, i64 0, i32 0
	%8 = load %..rawptr, %..rawptr* %7, align 8
	; cast - cast
	%9 = bitcast %..rawptr %8 to i8*
	%10 = load i64, i64* %1, align 8
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%12 = load i64, i64* %11, align 8
	%13 = mul i64 %10, %12
	%14 = getelementptr inbounds i8, i8* %9, i64 %13
	store i8* %14, i8** %2
	; ReturnStmt
	%15 = load i8*, i8** %2, align 8
	; cast - cast
	%16 = bitcast i8* %15 to %__Map_Entry_Header*
	ret %__Map_Entry_Header* %16
}

define void @.__dynamic_map_erase(%__Map_Header %h, %__Map_Find_Result %fr) {
decls-0:
	%0 = alloca %__Map_Header, align 8
	%1 = alloca %__Map_Find_Result, align 8
	%2 = alloca %__Map_Entry_Header*, align 8
	%3 = alloca %__Map_Entry_Header*, align 8
	%4 = alloca %__Map_Entry_Header*, align 8
	%5 = alloca %__Map_Find_Result, align 8
	%6 = alloca %__Map_Entry_Header*, align 8
	%7 = alloca %__Map_Entry_Header*, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %0
		store %__Map_Header %h, %__Map_Header* %0
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %1
		store %__Map_Find_Result %fr, %__Map_Find_Result* %1
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 1
	%9 = load i64, i64* %8, align 8
	%10 = icmp slt i64 %9, 0
	br i1 %10, label %if.then-1, label %if.else-2

if.then-1:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%12 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %11, align 8
	%13 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %12, i64 0
	%14 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %13, i64 0, i32 0
	%15 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %14, align 8
	%16 = extractvalue {i64*, i64, i64,%Allocator} %15, 0
	%17 = extractvalue {i64*, i64, i64,%Allocator} %15, 1
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 0
	%19 = load i64, i64* %18, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$1a, i64 0, i32 0), i64 42}, i64 752, i64 15, i64 %19, i64 %17)
	%20 = getelementptr inbounds i64, i64* %16, i64 %19
	; SelectorExpr
	%21 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%22 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%23 = load i64, i64* %22, align 8
	%24 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %21, i64 %23)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %2
	store %__Map_Entry_Header* %24, %__Map_Entry_Header** %2
	%25 = load %__Map_Entry_Header*, %__Map_Entry_Header** %2, align 8
	%26 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %25, i64 0
	%27 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %26, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	store i64 %28, i64* %20
	br label %if.done-3

if.else-2:
	; AssignStmt
	; SelectorExpr
	%29 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%30 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 1
	%31 = load i64, i64* %30, align 8
	%32 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %29, i64 %31)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
	store %__Map_Entry_Header* %32, %__Map_Entry_Header** %3
	%33 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%34 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %33, i64 0
	%35 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %34, i64 0, i32 1
	; SelectorExpr
	%36 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%37 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %36, i64 %38)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %4
	store %__Map_Entry_Header* %39, %__Map_Entry_Header** %4
	%40 = load %__Map_Entry_Header*, %__Map_Entry_Header** %4, align 8
	%41 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %40, i64 0
	%42 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %41, i64 0, i32 1
	%43 = load i64, i64* %42, align 8
	store i64 %43, i64* %35
	br label %if.done-3

if.done-3:
	; IfStmt
	; SelectorExpr
	%44 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%45 = load i64, i64* %44, align 8
	; SelectorExpr
	; SelectorExpr
	%46 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%47 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %46, align 8
	%48 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %47, i64 0
	%49 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %48, i64 0, i32 1
	%50 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %49, i64 0, i32 1
	%51 = load i64, i64* %50, align 8
	%52 = sub i64 %51, 1
	%53 = icmp eq i64 %45, %52
	br i1 %53, label %if.then-4, label %if.done-5

if.then-4:
	; SelectorExpr
	; SelectorExpr
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%55 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %54, align 8
	%56 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %55, i64 0
	%57 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %56, i64 0, i32 1
	%58 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %57, i64 0, i32 1
	%59 = load i64, i64* %58, align 8
	%60 = sub i64 %59, 1
	store i64 %60, i64* %58
	br label %if.done-5

if.done-5:
	%61 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%63 = load i64, i64* %62, align 8
	%64 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %61, i64 %63)
	%65 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%66 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%67 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %66, align 8
	%68 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %67, i64 0
	%69 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %68, i64 0, i32 1
	%70 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %69, i64 0, i32 1
	%71 = load i64, i64* %70, align 8
	%72 = sub i64 %71, 1
	%73 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %65, i64 %72)
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 2
	%75 = load i64, i64* %74, align 8
	%76 = bitcast %__Map_Entry_Header* %64 to %..rawptr
	%77 = bitcast %__Map_Entry_Header* %73 to %..rawptr
	%78 = call %..rawptr @.__mem_copy(%..rawptr %76, %..rawptr %77, i64 %75)
	; last
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %5
		%79 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%80 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%81 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%82 = load i64, i64* %81, align 8
	%83 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %80, i64 %82)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %6
	store %__Map_Entry_Header* %83, %__Map_Entry_Header** %6
	%84 = load %__Map_Entry_Header*, %__Map_Entry_Header** %6, align 8
	%85 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %84, i64 0
	%86 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %85, i64 0, i32 0
	%87 = load %__Map_Key, %__Map_Key* %86, align 8
	%88 = call %__Map_Find_Result @.__dynamic_map_find(%__Map_Header %79, %__Map_Key %87)
	store %__Map_Find_Result %88, %__Map_Find_Result* %5
	; IfStmt
	; SelectorExpr
	%89 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 1
	%90 = load i64, i64* %89, align 8
	%91 = icmp sge i64 %90, 0
	br i1 %91, label %if.then-6, label %if.else-7

if.then-6:
	; AssignStmt
	; SelectorExpr
	%92 = load %__Map_Header, %__Map_Header* %0, align 8
	; SelectorExpr
	%93 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 1
	%94 = load i64, i64* %93, align 8
	%95 = call %__Map_Entry_Header* @.__dynamic_map_get_entry(%__Map_Header %92, i64 %94)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %7
	store %__Map_Entry_Header* %95, %__Map_Entry_Header** %7
	%96 = load %__Map_Entry_Header*, %__Map_Entry_Header** %7, align 8
	%97 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %96, i64 0
	%98 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %97, i64 0, i32 1
	; SelectorExpr
	%99 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%100 = load i64, i64* %99, align 8
	store i64 %100, i64* %98
	br label %if.done-8

if.else-7:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %0, i64 0, i32 0
	%102 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %101, align 8
	%103 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %102, i64 0
	%104 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %103, i64 0, i32 0
	%105 = load {i64*, i64, i64,%Allocator}, {i64*, i64, i64,%Allocator}* %104, align 8
	%106 = extractvalue {i64*, i64, i64,%Allocator} %105, 0
	%107 = extractvalue {i64*, i64, i64,%Allocator} %105, 1
	; SelectorExpr
	%108 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %5, i64 0, i32 0
	%109 = load i64, i64* %108, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$1b, i64 0, i32 0), i64 42}, i64 765, i64 17, i64 %109, i64 %107)
	%110 = getelementptr inbounds i64, i64* %106, i64 %109
	; SelectorExpr
	%111 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %1, i64 0, i32 2
	%112 = load i64, i64* %111, align 8
	store i64 %112, i64* %110
	br label %if.done-8

if.done-8:
	ret void
}

define %..rawptr @.main-2.CreateWindow(%..rawptr %instance) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %windows-6.WndClassExA, align 4
	%2 = alloca i32, align 4
	%3 = alloca %windows-6.Rect, align 4
	%4 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %instance, %..rawptr* %0
	; wndClass
	store %windows-6.WndClassExA zeroinitializer, %windows-6.WndClassExA* %1
		; AssignStmt
	; SelectorExpr
	%5 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0, i32 0
	store i32 80, i32* %5
	; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0, i32 1
	store i32 35, i32* %6
	; AssignStmt
	; SelectorExpr
	%7 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0, i32 2
	store i64 (%..rawptr, i32, i64, i64)* @.main-2.WindowProc, i64 (%..rawptr, i32, i64, i64)** %7
	; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0, i32 5
	%9 = load %..rawptr, %..rawptr* %0, align 8
	store %..rawptr %9, %..rawptr* %8
	; AssignStmt
	; SelectorExpr
	%10 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0, i32 10
	; SelectorExpr
	%11 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$1c, i64 0, i32 0), i64 10})
	store i8* %11, i8** %10
	; IfStmt
	%12 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0
	%13 = call ccc i16 @RegisterClassExA(%windows-6.WndClassExA* %12)
	%14 = icmp eq i16 %13, 0
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$1d, i64 0, i32 0), i64 42}, i64 38, i64 15, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$1e, i64 0, i32 0), i64 24})
	br label %if.done-2

if.done-2:
	; windowStyle
	store i32 zeroinitializer, i32* %2
		store i32 282001408, i32* %2
	; clientRect
	store %windows-6.Rect zeroinitializer, %windows-6.Rect* %3
		store %windows-6.Rect {i32 0, i32 0, i32 1280, i32 720}, %windows-6.Rect* %3
	%15 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %3, i64 0
	%16 = load i32, i32* %2, align 4
	%17 = call ccc i32 @AdjustWindowRect(%windows-6.Rect* %15, i32 %16, i32 0)
	; windowHandle
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	%18 = getelementptr inbounds %windows-6.WndClassExA, %windows-6.WndClassExA* %1, i64 0, i32 10
	%19 = load i8*, i8** %18, align 8
	; SelectorExpr
	%20 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$1f, i64 0, i32 0), i64 4})
	%21 = load i32, i32* %2, align 4
	; SelectorExpr
	%22 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %3, i64 0, i32 2
	%23 = load i32, i32* %22, align 4
	; SelectorExpr
	%24 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %3, i64 0, i32 0
	%25 = load i32, i32* %24, align 4
	%26 = sub i32 %23, %25
	; SelectorExpr
	%27 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %3, i64 0, i32 3
	%28 = load i32, i32* %27, align 4
	; SelectorExpr
	%29 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %3, i64 0, i32 1
	%30 = load i32, i32* %29, align 4
	%31 = sub i32 %28, %30
	%32 = load %..rawptr, %..rawptr* %0, align 8
	%33 = call ccc %..rawptr @CreateWindowExA(i32 0, i8* %19, i8* %20, i32 %21, i32 -2147483648, i32 -2147483648, i32 %26, i32 %31, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr %32, %..rawptr zeroinitializer)
	store %..rawptr %33, %..rawptr* %4
	; IfStmt
	%34 = load %..rawptr, %..rawptr* %4, align 8
	%35 = icmp eq %..rawptr %34, zeroinitializer
	br i1 %35, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$20, i64 0, i32 0), i64 42}, i64 59, i64 15, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$21, i64 0, i32 0), i64 23})
	br label %if.done-4

if.done-4:
	; ReturnStmt
	%36 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %36
}

define %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %vars, i1 %modern) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca i1, align 1
	%2 = alloca %windows-6.PIXELFORMATDESCRIPTOR, align 4
	%3 = alloca i32, align 4
	%4 = alloca %..rawptr, align 8
	%5 = alloca %..rawptr, align 8
	%6 = alloca %..rawptr, align 8
	%7 = alloca %..rawptr, align 8
	%8 = alloca %..rawptr, align 8
	%9 = alloca %jaze_wgl-13.TryGetExtensionList, align 8
	%10 = alloca {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, align 8
	%11 = alloca {%jaze_wgl-13.Attrib*, i64, i64}, align 8
	%12 = alloca [9 x %jaze_wgl-13.Attrib], align 4
	%13 = alloca {i32*, i64, i64,%Allocator}, align 8
	%14 = alloca i32, align 4
	%15 = alloca i32, align 4
	%16 = alloca i32, align 4
	%17 = alloca %windows-6.PIXELFORMATDESCRIPTOR, align 4
	%18 = alloca {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, align 8
	%19 = alloca {%jaze_wgl-13.Attrib*, i64, i64}, align 8
	%20 = alloca [4 x %jaze_wgl-13.Attrib], align 4
	%21 = alloca %..rawptr, align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	store i1 zeroinitializer, i1* %1
		store i1 %modern, i1* %1
	; IfStmt
	%22 = load i1, i1* %1, align 1
	br i1 %22, label %if.else-4, label %if.then-1

if.then-1:
	; pfd
	store %windows-6.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-6.PIXELFORMATDESCRIPTOR* %2
		store %windows-6.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-6.PIXELFORMATDESCRIPTOR* %2
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 0
	store i32 44, i32* %23
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 1
	store i32 1, i32* %24
	; AssignStmt
	; SelectorExpr
	%25 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 2
	store i32 37, i32* %25
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 4
	store i8 32, i8* %26
	; AssignStmt
	; SelectorExpr
	%27 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 11
	store i8 8, i8* %27
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0, i32 18
	store i8 24, i8* %28
	; format
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	; SelectorExpr
	%29 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%30 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %29, i64 0
	%31 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %30, i64 0, i32 4
	%32 = load %..rawptr, %..rawptr* %31, align 8
	%33 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0
	%34 = call ccc i32 @ChoosePixelFormat(%..rawptr %32, %windows-6.PIXELFORMATDESCRIPTOR* %33)
	store i32 %34, i32* %3
	; SelectorExpr
	; SelectorExpr
	%35 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%36 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %35, i64 0
	%37 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %36, i64 0, i32 4
	%38 = load %..rawptr, %..rawptr* %37, align 8
	%39 = load i32, i32* %3, align 4
	%40 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0
	%41 = call ccc i32 @DescribePixelFormat(%..rawptr %38, i32 %39, i32 44, %windows-6.PIXELFORMATDESCRIPTOR* %40)
	; SelectorExpr
	; SelectorExpr
	%42 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%43 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %42, i64 0
	%44 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %43, i64 0, i32 4
	%45 = load %..rawptr, %..rawptr* %44, align 8
	%46 = load i32, i32* %3, align 4
	%47 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %2, i64 0
	%48 = call ccc i32 @SetPixelFormat(%..rawptr %45, i32 %46, %windows-6.PIXELFORMATDESCRIPTOR* %47)
	; ctx
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	; SelectorExpr
	%49 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%50 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %49, i64 0
	%51 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %50, i64 0, i32 4
	%52 = load %..rawptr, %..rawptr* %51, align 8
	%53 = call ccc %..rawptr @wglCreateContext(%..rawptr %52)
	store %..rawptr %53, %..rawptr* %4
	; assert
	%54 = load %..rawptr, %..rawptr* %4, align 8
	%55 = icmp ne %..rawptr %54, zeroinitializer
	%56 = icmp eq i1 %55, false
	br i1 %56, label %builtin.assert.err-2, label %builtin.assert.done-3

builtin.assert.err-2:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$22, i64 0, i32 0), i64 42}, i64 80, i64 16, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$23, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-3

builtin.assert.done-3:
	; SelectorExpr
	; SelectorExpr
	%57 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %57, i64 0
	%59 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %58, i64 0, i32 4
	%60 = load %..rawptr, %..rawptr* %59, align 8
	%61 = load %..rawptr, %..rawptr* %4, align 8
	%62 = call ccc i32 @wglMakeCurrent(%..rawptr %60, %..rawptr %61)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%63 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%64 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %63, i64 0
	%65 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %64, i64 0, i32 0
	%66 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %65, i64 0, i32 7
	; SelectorExpr
	%67 = call i32 @.jaze_gl-12.GetInteger(i32 33307)
	store i32 %67, i32* %66
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%68 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%69 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %68, i64 0
	%70 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %69, i64 0, i32 0
	%71 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %70, i64 0, i32 9
	; SelectorExpr
	%72 = call i32 @.jaze_gl-12.GetInteger(i32 33308)
	store i32 %72, i32* %71
	; ReturnStmt
	%73 = load %..rawptr, %..rawptr* %4, align 8
	ret %..rawptr %73

if.else-4:
	; wndHandle
	store %..rawptr zeroinitializer, %..rawptr* %5
		; SelectorExpr
	; SelectorExpr
	%74 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$24, i64 0, i32 0), i64 6})
	; SelectorExpr
	%75 = call i8* @.strings-9.new_c_string(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$25, i64 0, i32 0), i64 13})
	%76 = call ccc %..rawptr @CreateWindowExA(i32 0, i8* %74, i8* %75, i32 0, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr zeroinitializer, %..rawptr zeroinitializer)
	store %..rawptr %76, %..rawptr* %5
	; assert
	%77 = load %..rawptr, %..rawptr* %5, align 8
	%78 = icmp ne %..rawptr %77, zeroinitializer
	%79 = icmp eq i1 %78, false
	br i1 %79, label %builtin.assert.err-5, label %builtin.assert.done-6

builtin.assert.err-5:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$26, i64 0, i32 0), i64 42}, i64 95, i64 20, %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$27, i64 0, i32 0), i64 16})
	br label %builtin.assert.done-6

builtin.assert.done-6:
	; wndDc
	store %..rawptr zeroinitializer, %..rawptr* %6
		; SelectorExpr
	%80 = load %..rawptr, %..rawptr* %5, align 8
	%81 = call ccc %..rawptr @GetDC(%..rawptr %80)
	store %..rawptr %81, %..rawptr* %6
	; assert
	%82 = load %..rawptr, %..rawptr* %6, align 8
	%83 = icmp ne %..rawptr %82, zeroinitializer
	%84 = icmp eq i1 %83, false
	br i1 %84, label %builtin.assert.err-7, label %builtin.assert.done-8

builtin.assert.err-7:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$28, i64 0, i32 0), i64 42}, i64 97, i64 20, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$29, i64 0, i32 0), i64 12})
	br label %builtin.assert.done-8

builtin.assert.done-8:
	; temp
	store %..rawptr zeroinitializer, %..rawptr* %7
		; SelectorExpr
	%85 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%86 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %85, i64 0
	%87 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %86, i64 0, i32 4
	%88 = load %..rawptr, %..rawptr* %87, align 8
	store %..rawptr %88, %..rawptr* %7
	; AssignStmt
	; SelectorExpr
	%89 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%90 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %89, i64 0
	%91 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %90, i64 0, i32 4
	%92 = load %..rawptr, %..rawptr* %6, align 8
	store %..rawptr %92, %..rawptr* %91
	; oldCtx
	store %..rawptr zeroinitializer, %..rawptr* %8
		%93 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%94 = call %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %93, i1 false)
	store %..rawptr %94, %..rawptr* %8
	; AssignStmt
	; SelectorExpr
	%95 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%96 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %95, i64 0
	%97 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %96, i64 0, i32 4
	%98 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %98, %..rawptr* %97
	; assert
	%99 = load %..rawptr, %..rawptr* %8, align 8
	%100 = icmp ne %..rawptr %99, zeroinitializer
	%101 = icmp eq i1 %100, false
	br i1 %101, label %builtin.assert.err-9, label %builtin.assert.done-10

builtin.assert.err-9:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$2a, i64 0, i32 0), i64 42}, i64 103, i64 20, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2b, i64 0, i32 0), i64 13})
	br label %builtin.assert.done-10

builtin.assert.done-10:
	; extensions
	store %jaze_wgl-13.TryGetExtensionList zeroinitializer, %jaze_wgl-13.TryGetExtensionList* %9
		store %jaze_wgl-13.TryGetExtensionList zeroinitializer, %jaze_wgl-13.TryGetExtensionList* %9
	; SelectorExpr
	%102 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%103 = getelementptr inbounds i32 (%..rawptr, i32*, float*, i32, i32*, i32*)*, i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** @.jaze_wgl-13.ChoosePixelFormatARB, i64 0
	%104 = bitcast i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** %103 to %..rawptr
	call void @.jaze_wgl-13.TryGetExtension(%jaze_wgl-13.TryGetExtensionList* %102, %..rawptr %104, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$2c, i64 0, i32 0), i64 23})
	; SelectorExpr
	%105 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%106 = getelementptr inbounds %..rawptr (%..rawptr, %..rawptr, i32*)*, %..rawptr (%..rawptr, %..rawptr, i32*)** @.jaze_wgl-13.CreateContextAttribsARB, i64 0
	%107 = bitcast %..rawptr (%..rawptr, %..rawptr, i32*)** %106 to %..rawptr
	call void @.jaze_wgl-13.TryGetExtension(%jaze_wgl-13.TryGetExtensionList* %105, %..rawptr %107, %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$2d, i64 0, i32 0), i64 26})
	; SelectorExpr
	%108 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%109 = getelementptr inbounds i8* (%..rawptr)*, i8* (%..rawptr)** @.jaze_wgl-13.GetExtensionsStringARB, i64 0
	%110 = bitcast i8* (%..rawptr)** %109 to %..rawptr
	call void @.jaze_wgl-13.TryGetExtension(%jaze_wgl-13.TryGetExtensionList* %108, %..rawptr %110, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$2e, i64 0, i32 0), i64 25})
	; SelectorExpr
	%111 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %9, i64 0
	; SelectorExpr
	%112 = getelementptr inbounds i1 (i32)*, i1 (i32)** @.jaze_wgl-13.SwapIntervalEXT, i64 0
	%113 = bitcast i1 (i32)** %112 to %..rawptr
	call void @.jaze_wgl-13.TryGetExtension(%jaze_wgl-13.TryGetExtensionList* %111, %..rawptr %113, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$2f, i64 0, i32 0), i64 18})
	; SelectorExpr
	%114 = load %..rawptr, %..rawptr* %8, align 8
	%115 = load %..rawptr, %..rawptr* %6, align 8
	%116 = load %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %9, align 8
	call void @.jaze_wgl-13.LoadExtensions(%..rawptr %114, %..rawptr %115, %jaze_wgl-13.TryGetExtensionList %116)
	; SelectorExpr
	%117 = call ccc i32 @wglMakeCurrent(%..rawptr zeroinitializer, %..rawptr zeroinitializer)
	; SelectorExpr
	%118 = load %..rawptr, %..rawptr* %8, align 8
	%119 = call ccc i32 @wglDeleteContext(%..rawptr %118)
	; SelectorExpr
	%120 = load %..rawptr, %..rawptr* %5, align 8
	%121 = load %..rawptr, %..rawptr* %6, align 8
	%122 = call ccc i32 @ReleaseDC(%..rawptr %120, %..rawptr %121)
	; SelectorExpr
	%123 = load %..rawptr, %..rawptr* %5, align 8
	%124 = call ccc i32 @DestroyWindow(%..rawptr %123)
	; attribs
	store {%jaze_wgl-13.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %10
		; append
	%125 = bitcast {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %10 to %..rawptr
	%126 = load {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %10, align 8
	; SelectorExpr
	%127 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.DRAW_TO_WINDOW_ARB(i1 true)
	; SelectorExpr
	%128 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.ACCELERATION_ARB(i32 8231)
	; SelectorExpr
	%129 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.SUPPORT_OPENGL_ARB(i1 true)
	; SelectorExpr
	%130 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.DOUBLE_BUFFER_ARB(i1 true)
	; SelectorExpr
	%131 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.PIXEL_TYPE_ARB(i32 8235)
	; SelectorExpr
	%132 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.COLOR_BITS_ARB(i32 32)
	; SelectorExpr
	%133 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.ALPHA_BITS_ARB(i32 8)
	; SelectorExpr
	%134 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.DEPTH_BITS_ARB(i32 24)
	; SelectorExpr
	%135 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.FRAMEBUFFER_SRGB_CAPABLE_ARB(i1 true)
	; variadic call argument generation
	store {%jaze_wgl-13.Attrib*, i64, i64} zeroinitializer, {%jaze_wgl-13.Attrib*, i64, i64}* %11
	store [9 x %jaze_wgl-13.Attrib] zeroinitializer, [9 x %jaze_wgl-13.Attrib]* %12
	%136 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 0
	store %jaze_wgl-13.Attrib %127, %jaze_wgl-13.Attrib* %136
	%137 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 1
	store %jaze_wgl-13.Attrib %128, %jaze_wgl-13.Attrib* %137
	%138 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 2
	store %jaze_wgl-13.Attrib %129, %jaze_wgl-13.Attrib* %138
	%139 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 3
	store %jaze_wgl-13.Attrib %130, %jaze_wgl-13.Attrib* %139
	%140 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 4
	store %jaze_wgl-13.Attrib %131, %jaze_wgl-13.Attrib* %140
	%141 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 5
	store %jaze_wgl-13.Attrib %132, %jaze_wgl-13.Attrib* %141
	%142 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 6
	store %jaze_wgl-13.Attrib %133, %jaze_wgl-13.Attrib* %142
	%143 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 7
	store %jaze_wgl-13.Attrib %134, %jaze_wgl-13.Attrib* %143
	%144 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 8
	store %jaze_wgl-13.Attrib %135, %jaze_wgl-13.Attrib* %144
	%145 = getelementptr inbounds [9 x %jaze_wgl-13.Attrib], [9 x %jaze_wgl-13.Attrib]* %12, i64 0, i32 0
	%146 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %11, i64 0, i32 0
	store %jaze_wgl-13.Attrib* %145, %jaze_wgl-13.Attrib** %146
	%147 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %11, i64 0, i32 1
	store i64 9, i64* %147
	%148 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %11, i64 0, i32 2
	store i64 9, i64* %148
	%149 = load {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %11, align 8
	%150 = extractvalue {%jaze_wgl-13.Attrib*, i64, i64} %149, 0
	%151 = extractvalue {%jaze_wgl-13.Attrib*, i64, i64} %149, 1
	%152 = bitcast %jaze_wgl-13.Attrib* %150 to %..rawptr
	%153 = call i64 @.__dynamic_array_append(%..rawptr %125, i64 8, i64 4, %..rawptr %152, i64 %151)
	; attribArray
	store {i32*, i64, i64,%Allocator} zeroinitializer, {i32*, i64, i64,%Allocator}* %13
		; SelectorExpr
	%154 = load {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %10, align 8
	%155 = call {i32*, i64, i64,%Allocator} @.jaze_wgl-13.PrepareAttribArray({%jaze_wgl-13.Attrib*, i64, i64,%Allocator} %154)
	store {i32*, i64, i64,%Allocator} %155, {i32*, i64, i64,%Allocator}* %13
	; format
	store i32 zeroinitializer, i32* %14
		; formats
	store i32 zeroinitializer, i32* %15
		; success
	store i32 zeroinitializer, i32* %16
		; SelectorExpr
	%156 = load i32 (%..rawptr, i32*, float*, i32, i32*, i32*)*, i32 (%..rawptr, i32*, float*, i32, i32*, i32*)** @.jaze_wgl-13.ChoosePixelFormatARB, align 8
	; SelectorExpr
	%157 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%158 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %157, i64 0
	%159 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %158, i64 0, i32 4
	%160 = load %..rawptr, %..rawptr* %159, align 8
	; IndexExpr
	%161 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %13, align 8
	%162 = extractvalue {i32*, i64, i64,%Allocator} %161, 0
	%163 = extractvalue {i32*, i64, i64,%Allocator} %161, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$30, i64 0, i32 0), i64 42}, i64 131, i64 74, i64 0, i64 %163)
	%164 = getelementptr inbounds i32, i32* %162, i64 0
	%165 = getelementptr inbounds i32, i32* %164, i64 0
	%166 = getelementptr inbounds i32, i32* %14, i64 0
	%167 = getelementptr inbounds i32, i32* %15, i64 0
	%168 = call ccc i32 %156(%..rawptr %160, i32* %165, float* zeroinitializer, i32 1, i32* %166, i32* %167)
	store i32 %168, i32* %16
	; IfStmt
	%169 = load i32, i32* %16, align 4
	%170 = icmp eq i32 %169, 1
	br i1 %170, label %cmp.and-11, label %if.done-13

cmp.and-11:
	%171 = load i32, i32* %15, align 4
	%172 = icmp eq i32 %171, 0
	br i1 %172, label %if.then-12, label %if.done-13

if.then-12:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$31, i64 0, i32 0), i64 42}, i64 134, i64 19, %..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$32, i64 0, i32 0), i64 35})
	br label %if.done-13

if.done-13:
	; pfd
	store %windows-6.PIXELFORMATDESCRIPTOR zeroinitializer, %windows-6.PIXELFORMATDESCRIPTOR* %17
		; AssignStmt
	; SelectorExpr
	%173 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %17, i64 0, i32 1
	store i32 1, i32* %173
	; AssignStmt
	; SelectorExpr
	%174 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %17, i64 0, i32 0
	store i32 44, i32* %174
	; SelectorExpr
	; SelectorExpr
	%175 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%176 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %175, i64 0
	%177 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %176, i64 0, i32 4
	%178 = load %..rawptr, %..rawptr* %177, align 8
	%179 = load i32, i32* %14, align 4
	%180 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %17, i64 0
	%181 = call ccc i32 @DescribePixelFormat(%..rawptr %178, i32 %179, i32 44, %windows-6.PIXELFORMATDESCRIPTOR* %180)
	; SelectorExpr
	; SelectorExpr
	%182 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%183 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %182, i64 0
	%184 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %183, i64 0, i32 4
	%185 = load %..rawptr, %..rawptr* %184, align 8
	%186 = load i32, i32* %14, align 4
	%187 = getelementptr inbounds %windows-6.PIXELFORMATDESCRIPTOR, %windows-6.PIXELFORMATDESCRIPTOR* %17, i64 0
	%188 = call ccc i32 @SetPixelFormat(%..rawptr %185, i32 %186, %windows-6.PIXELFORMATDESCRIPTOR* %187)
	; createAttr
	store {%jaze_wgl-13.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %18
		; append
	%189 = bitcast {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %18 to %..rawptr
	%190 = load {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %18, align 8
	; SelectorExpr
	%191 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_MAJOR_VERSION_ARB(i32 3)
	; SelectorExpr
	%192 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_MINOR_VERSION_ARB(i32 3)
	; SelectorExpr
	%193 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_FLAGS_ARB(i32 1)
	; SelectorExpr
	%194 = call %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_PROFILE_MASK_ARB(i32 1)
	; variadic call argument generation
	store {%jaze_wgl-13.Attrib*, i64, i64} zeroinitializer, {%jaze_wgl-13.Attrib*, i64, i64}* %19
	store [4 x %jaze_wgl-13.Attrib] zeroinitializer, [4 x %jaze_wgl-13.Attrib]* %20
	%195 = getelementptr inbounds [4 x %jaze_wgl-13.Attrib], [4 x %jaze_wgl-13.Attrib]* %20, i64 0, i32 0
	store %jaze_wgl-13.Attrib %191, %jaze_wgl-13.Attrib* %195
	%196 = getelementptr inbounds [4 x %jaze_wgl-13.Attrib], [4 x %jaze_wgl-13.Attrib]* %20, i64 0, i32 1
	store %jaze_wgl-13.Attrib %192, %jaze_wgl-13.Attrib* %196
	%197 = getelementptr inbounds [4 x %jaze_wgl-13.Attrib], [4 x %jaze_wgl-13.Attrib]* %20, i64 0, i32 2
	store %jaze_wgl-13.Attrib %193, %jaze_wgl-13.Attrib* %197
	%198 = getelementptr inbounds [4 x %jaze_wgl-13.Attrib], [4 x %jaze_wgl-13.Attrib]* %20, i64 0, i32 3
	store %jaze_wgl-13.Attrib %194, %jaze_wgl-13.Attrib* %198
	%199 = getelementptr inbounds [4 x %jaze_wgl-13.Attrib], [4 x %jaze_wgl-13.Attrib]* %20, i64 0, i32 0
	%200 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %19, i64 0, i32 0
	store %jaze_wgl-13.Attrib* %199, %jaze_wgl-13.Attrib** %200
	%201 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %19, i64 0, i32 1
	store i64 4, i64* %201
	%202 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %19, i64 0, i32 2
	store i64 4, i64* %202
	%203 = load {%jaze_wgl-13.Attrib*, i64, i64}, {%jaze_wgl-13.Attrib*, i64, i64}* %19, align 8
	%204 = extractvalue {%jaze_wgl-13.Attrib*, i64, i64} %203, 0
	%205 = extractvalue {%jaze_wgl-13.Attrib*, i64, i64} %203, 1
	%206 = bitcast %jaze_wgl-13.Attrib* %204 to %..rawptr
	%207 = call i64 @.__dynamic_array_append(%..rawptr %189, i64 8, i64 4, %..rawptr %206, i64 %205)
	; AssignStmt
	; SelectorExpr
	%208 = load {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %18, align 8
	%209 = call {i32*, i64, i64,%Allocator} @.jaze_wgl-13.PrepareAttribArray({%jaze_wgl-13.Attrib*, i64, i64,%Allocator} %208)
	store {i32*, i64, i64,%Allocator} %209, {i32*, i64, i64,%Allocator}* %13
	; ctx
	store %..rawptr zeroinitializer, %..rawptr* %21
		; SelectorExpr
	%210 = load %..rawptr (%..rawptr, %..rawptr, i32*)*, %..rawptr (%..rawptr, %..rawptr, i32*)** @.jaze_wgl-13.CreateContextAttribsARB, align 8
	; SelectorExpr
	%211 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%212 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %211, i64 0
	%213 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %212, i64 0, i32 4
	%214 = load %..rawptr, %..rawptr* %213, align 8
	; IndexExpr
	%215 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %13, align 8
	%216 = extractvalue {i32*, i64, i64,%Allocator} %215, 0
	%217 = extractvalue {i32*, i64, i64,%Allocator} %215, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$33, i64 0, i32 0), i64 42}, i64 151, i64 78, i64 0, i64 %217)
	%218 = getelementptr inbounds i32, i32* %216, i64 0
	%219 = getelementptr inbounds i32, i32* %218, i64 0
	%220 = call ccc %..rawptr %210(%..rawptr %214, %..rawptr zeroinitializer, i32* %219)
	store %..rawptr %220, %..rawptr* %21
	; assert
	%221 = load %..rawptr, %..rawptr* %21, align 8
	%222 = icmp ne %..rawptr %221, zeroinitializer
	%223 = icmp eq i1 %222, false
	br i1 %223, label %builtin.assert.err-14, label %builtin.assert.done-15

builtin.assert.err-14:
	call void @.__assert(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$34, i64 0, i32 0), i64 42}, i64 152, i64 16, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$35, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-15

builtin.assert.done-15:
	; SelectorExpr
	; SelectorExpr
	%224 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%225 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %224, i64 0
	%226 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %225, i64 0, i32 4
	%227 = load %..rawptr, %..rawptr* %226, align 8
	%228 = load %..rawptr, %..rawptr* %21, align 8
	%229 = call ccc i32 @wglMakeCurrent(%..rawptr %227, %..rawptr %228)
	; ReturnStmt
	%230 = load %..rawptr, %..rawptr* %21, align 8
	ret %..rawptr %230

if.done-16:
	unreachable
}

define ccc i64 @.main-2.WindowProc(%..rawptr %hwnd, i32 %msg, i64 %wparam, i64 %lparam) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i16, align 2
	%6 = alloca %imgui-8.GuiIO*, align 8
	%7 = alloca %..any, align 8
	%8 = alloca i32, align 4
	%9 = alloca %..any, align 8
	%10 = alloca i32, align 4
	%11 = alloca {%..any*, i64, i64}, align 8
	%12 = alloca [2 x %..any], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %hwnd, %..rawptr* %0
	store i32 zeroinitializer, i32* %1
		store i32 %msg, i32* %1
	store i64 zeroinitializer, i64* %2
		store i64 %wparam, i64* %2
	store i64 zeroinitializer, i64* %3
		store i64 %lparam, i64* %3
	; result
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	; MatchStmt
	%13 = load i32, i32* %1, align 4
	%14 = icmp eq i32 %13, 2
	br i1 %14, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%15 = icmp eq i32 %13, 522
	br i1 %15, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	call ccc void @PostQuitMessage(i32 0)
	br label %match.done-17

match.case.next-3:
	%16 = icmp eq i32 %13, 5
	br i1 %16, label %match.fall.body-10, label %match.case.next-9

match.fall.body-4:
	; delta
	store i16 zeroinitializer, i16* %5
		; SelectorExpr
	%17 = load i64, i64* %2, align 8
	%18 = call i16 @.jaze_win32-11.HIWORD-1976290660928(i64 %17)
	; cast - cast
	%19 = bitcast i16 %18 to i16
	store i16 %19, i16* %5
	; IfStmt
	%20 = load i16, i16* %5, align 2
	%21 = icmp sgt i16 %20, 1
	br i1 %21, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 1
	%23 = load i32, i32* %22, align 4
	%24 = add i32 %23, 1
	store i32 %24, i32* %22
	br label %if.done-6

if.done-6:
	; IfStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 1
	br i1 %26, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 1
	%28 = load i32, i32* %27, align 4
	%29 = sub i32 %28, 1
	store i32 %29, i32* %27
	br label %if.done-8

if.done-8:
	; AssignStmt
	store i64 1, i64* %4
	br label %match.done-17

match.case.next-9:
	%30 = icmp eq i32 %13, 258
	br i1 %30, label %match.fall.body-16, label %match.case.next-15

match.fall.body-10:
	; SelectorExpr
	; SelectorExpr
	%31 = load i64, i64* %3, align 8
	%32 = call i16 @.jaze_win32-11.LOWORD-1976290662032(i64 %31)
	; cast - cast
	%33 = zext i16 %32 to i32
	; SelectorExpr
	%34 = load i64, i64* %3, align 8
	%35 = call i16 @.jaze_win32-11.HIWORD-1976290661296(i64 %34)
	; cast - cast
	%36 = zext i16 %35 to i32
	call ccc void @glViewport(i32 0, i32 0, i32 %33, i32 %36)
	; IfStmt
	%37 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%38 = icmp ne %main-2.Win32Vars_t* %37, zeroinitializer
	br i1 %38, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%39 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%40 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %39, i64 0
	%41 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %40, i64 0, i32 3
	%42 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %41, i64 0, i32 1, i32 0
	; SelectorExpr
	%43 = load i64, i64* %3, align 8
	%44 = call i16 @.jaze_win32-11.LOWORD-1976290662032(i64 %43)
	; cast - cast
	%45 = uitofp i16 %44 to float
	store float %45, float* %42
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%46 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%47 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %46, i64 0
	%48 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %47, i64 0, i32 3
	%49 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %48, i64 0, i32 1, i32 1
	; SelectorExpr
	%50 = load i64, i64* %3, align 8
	%51 = call i16 @.jaze_win32-11.HIWORD-1976290661296(i64 %50)
	; cast - cast
	%52 = uitofp i16 %51 to float
	store float %52, float* %49
	br label %if.done-12

if.done-12:
	; io
	store %imgui-8.GuiIO* zeroinitializer, %imgui-8.GuiIO** %6
		; SelectorExpr
	%53 = call ccc %imgui-8.GuiIO* @igGetIO()
	store %imgui-8.GuiIO* %53, %imgui-8.GuiIO** %6
	; IfStmt
	; SelectorExpr
	%54 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %6, align 8
	%55 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %54, i64 0
	%56 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %55, i64 0, i32 22
	%57 = load void (%imgui-8.DrawData*)*, void (%imgui-8.DrawData*)** %56, align 8
	%58 = icmp ne void (%imgui-8.DrawData*)* %57, zeroinitializer
	br i1 %58, label %if.then-13, label %if.done-14

if.then-13:
	; SelectorExpr
	call void @.jaze_imgui-15.BeginNewFrame(double 0x0000000000000000)
	; SelectorExpr
	call ccc void @igSetNextWindowPosCenter(i32 0)
	; SelectorExpr
	call ccc void @igPushStyleVar(i32 0, float 0x3fe9999980000000)
	; SelectorExpr
	%59 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$36, i64 0, i32 0), i64 6}, i1* zeroinitializer, i32 65)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%60 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%61 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %60, i64 0
	%62 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %61, i64 0, i32 3
	%63 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %62, i64 0, i32 1, i32 0
	%64 = load float, float* %63, align 4
	; cast - cast
	%65 = fptosi float %64 to i32
	; SelectorExpr
	; SelectorExpr
	%66 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%67 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %66, i64 0
	%68 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %67, i64 0, i32 3
	%69 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %68, i64 0, i32 1, i32 1
	%70 = load float, float* %69, align 4
	; cast - cast
	%71 = fptosi float %70 to i32
	store %..any zeroinitializer, %..any* %7
	store i32 zeroinitializer, i32* %8
	store i32 %65, i32* %8
	%72 = bitcast i32* %8 to %..rawptr
	%73 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%74 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%75 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %73, %Type_Info** %74
	store %..rawptr %72, %..rawptr* %75
	%76 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %9
	store i32 zeroinitializer, i32* %10
	store i32 %71, i32* %10
	%77 = bitcast i32* %10 to %..rawptr
	%78 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%79 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%80 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %78, %Type_Info** %79
	store %..rawptr %77, %..rawptr* %80
	%81 = load %..any, %..any* %9, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %11
	store [2 x %..any] zeroinitializer, [2 x %..any]* %12
	%82 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 0
	store %..any %76, %..any* %82
	%83 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 1
	store %..any %81, %..any* %83
	%84 = getelementptr inbounds [2 x %..any], [2 x %..any]* %12, i64 0, i32 0
	%85 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 0
	store %..any* %84, %..any** %85
	%86 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 1
	store i64 2, i64* %86
	%87 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %11, i64 0, i32 2
	store i64 2, i64* %87
	%88 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %11, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$37, i64 0, i32 0), i64 6}, {%..any*, i64, i64} %88)
	; SelectorExpr
	call ccc void @igEnd()
	; SelectorExpr
	call ccc void @igPopStyleVar(i32 1)
	%89 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	call void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %89)
	; SelectorExpr
	call void @.jaze_gl-12.Clear(i32 16640)
	; SelectorExpr
	call ccc void @igRender()
	; SelectorExpr
	; SelectorExpr
	%90 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr, align 8
	%91 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %90, i64 0
	%92 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %91, i64 0, i32 4
	%93 = load %..rawptr, %..rawptr* %92, align 8
	%94 = call ccc i32 @SwapBuffers(%..rawptr %93)
	br label %if.done-14

if.done-14:
	; AssignStmt
	store i64 1, i64* %4
	br label %match.done-17

match.case.next-15:
	; AssignStmt
	%95 = load %..rawptr, %..rawptr* %0, align 8
	%96 = load i32, i32* %1, align 4
	%97 = load i64, i64* %2, align 8
	%98 = load i64, i64* %3, align 8
	%99 = call ccc i64 @DefWindowProcA(%..rawptr %95, i32 %96, i64 %97, i64 %98)
	store i64 %99, i64* %4
	br label %match.done-17

match.fall.body-16:
	; SelectorExpr
	%100 = load i64, i64* %2, align 8
	; cast - cast
	%101 = trunc i64 %100 to i16
	call ccc void @ImGuiIO_AddInputCharacter(i16 %101)
	; AssignStmt
	store i64 1, i64* %4
	; break
	br label %match.done-17

match.done-17:
	; ReturnStmt
	%102 = load i64, i64* %4, align 8
	ret i64 %102
}

define ccc void @.main-2.OpenGLDebugCallback(i32 %source, i32 %type, i32 %id, i32 %severity, i32 %length, i8* %message, %..rawptr %userParam) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 8
	%4 = alloca i32, align 4
	%5 = alloca i8*, align 8
	%6 = alloca %..rawptr, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..string, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [4 x %..any], align 8
	store i32 zeroinitializer, i32* %0
		store i32 %source, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %type, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %id, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %severity, i32* %3
	store i32 zeroinitializer, i32* %4
		store i32 %length, i32* %4
	store i8* zeroinitializer, i8** %5
		store i8* %message, i8** %5
	store %..rawptr zeroinitializer, %..rawptr* %6
		store %..rawptr %userParam, %..rawptr* %6
	; SelectorExpr
	%14 = load i32, i32* %0, align 8
	%15 = load i32, i32* %1, align 8
	%16 = load i32, i32* %3, align 8
	; SelectorExpr
	%17 = load i8*, i8** %5, align 8
	%18 = call %..string @.strings-9.to_odin_string(i8* %17)
	store %..any zeroinitializer, %..any* %7
	%19 = bitcast i32* %0 to %..rawptr
	%20 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	%21 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%22 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %20, %Type_Info** %21
	store %..rawptr %19, %..rawptr* %22
	%23 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%24 = bitcast i32* %1 to %..rawptr
	%25 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	%26 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%27 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %25, %Type_Info** %26
	store %..rawptr %24, %..rawptr* %27
	%28 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%29 = bitcast i32* %3 to %..rawptr
	%30 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	%31 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%32 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %30, %Type_Info** %31
	store %..rawptr %29, %..rawptr* %32
	%33 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	store %..string zeroinitializer, %..string* %11
	store %..string %18, %..string* %11
	%34 = bitcast %..string* %11 to %..rawptr
	%35 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%36 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %10, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [4 x %..any] zeroinitializer, [4 x %..any]* %13
	%39 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 0
	store %..any %23, %..any* %39
	%40 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 1
	store %..any %28, %..any* %40
	%41 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 2
	store %..any %33, %..any* %41
	%42 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 3
	store %..any %38, %..any* %42
	%43 = getelementptr inbounds [4 x %..any], [4 x %..any]* %13, i64 0, i32 0
	%44 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %43, %..any** %44
	%45 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 4, i64* %45
	%46 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 4, i64* %46
	%47 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%48 = call i64 @.fmt-4.printf(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$38, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %47)
	ret void
}

define void @.main-2.ToggleFullscreen(%..rawptr %wnd) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i32, align 4
	%2 = alloca %jaze_win32-11.MONITORINFO, align 4
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %wnd, %..rawptr* %0
	; Style
	store i32 zeroinitializer, i32* %1
		; SelectorExpr
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = call ccc i64 @GetWindowLongPtrA(%..rawptr %3, i32 -16)
	; cast - cast
	%5 = trunc i64 %4 to i32
	store i32 %5, i32* %1
	; IfStmt
	%6 = load i32, i32* %1, align 4
	%7 = and i32 %6, 13565952
	%8 = icmp eq i32 %7, 13565952
	br i1 %8, label %if.then-1, label %if.else-2

if.then-1:
	; monitorInfo
	store %jaze_win32-11.MONITORINFO zeroinitializer, %jaze_win32-11.MONITORINFO* %2
		; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 0
	store i32 40, i32* %9
	; SelectorExpr
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = getelementptr inbounds %jaze_win32-11.WINDOWPLACEMENT, %jaze_win32-11.WINDOWPLACEMENT* @main-2.GlobalWindowPosition, i64 0
	%12 = call ccc i32 @GetWindowPlacement(%..rawptr %10, %jaze_win32-11.WINDOWPLACEMENT* %11)
	; SelectorExpr
	; SelectorExpr
	%13 = load %..rawptr, %..rawptr* %0, align 8
	%14 = call ccc %..rawptr @MonitorFromWindow(%..rawptr %13, i32 1)
	%15 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0
	%16 = call ccc i32 @GetMonitorInfoA(%..rawptr %14, %jaze_win32-11.MONITORINFO* %15)
	; SelectorExpr
	%17 = load %..rawptr, %..rawptr* %0, align 8
	%18 = load i32, i32* %1, align 4
	; cast - cast
	%19 = zext i32 %18 to i64
	%20 = and i64 %19, -13565953
	%21 = call ccc i64 @SetWindowLongPtrA(%..rawptr %17, i32 -16, i64 %20)
	; SelectorExpr
	%22 = load %..rawptr, %..rawptr* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%23 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 1
	%24 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %23, i64 0, i32 0
	%25 = load i32, i32* %24, align 4
	; SelectorExpr
	; SelectorExpr
	%26 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 1
	%27 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %26, i64 0, i32 1
	%28 = load i32, i32* %27, align 4
	; SelectorExpr
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 1
	%30 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %29, i64 0, i32 2
	%31 = load i32, i32* %30, align 4
	; SelectorExpr
	; SelectorExpr
	%32 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 1
	%33 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %32, i64 0, i32 0
	%34 = load i32, i32* %33, align 4
	%35 = sub i32 %31, %34
	; SelectorExpr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 1
	%37 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %36, i64 0, i32 3
	%38 = load i32, i32* %37, align 4
	; SelectorExpr
	; SelectorExpr
	%39 = getelementptr inbounds %jaze_win32-11.MONITORINFO, %jaze_win32-11.MONITORINFO* %2, i64 0, i32 1
	%40 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %39, i64 0, i32 1
	%41 = load i32, i32* %40, align 4
	%42 = sub i32 %38, %41
	call ccc void @SetWindowPos(%..rawptr %22, %..rawptr null, i32 %25, i32 %28, i32 %35, i32 %42, i32 544)
	br label %if.done-3

if.else-2:
	; SelectorExpr
	%43 = load %..rawptr, %..rawptr* %0, align 8
	%44 = load i32, i32* %1, align 4
	%45 = or i32 %44, 13565952
	; cast - cast
	%46 = zext i32 %45 to i64
	%47 = call ccc i64 @SetWindowLongPtrA(%..rawptr %43, i32 -16, i64 %46)
	; SelectorExpr
	%48 = load %..rawptr, %..rawptr* %0, align 8
	%49 = getelementptr inbounds %jaze_win32-11.WINDOWPLACEMENT, %jaze_win32-11.WINDOWPLACEMENT* @main-2.GlobalWindowPosition, i64 0
	%50 = call ccc i32 @SetWindowPlacement(%..rawptr %48, %jaze_win32-11.WINDOWPLACEMENT* %49)
	; SelectorExpr
	%51 = load %..rawptr, %..rawptr* %0, align 8
	call ccc void @SetWindowPos(%..rawptr %51, %..rawptr zeroinitializer, i32 0, i32 0, i32 0, i32 0, i32 551)
	br label %if.done-3

if.done-3:
	ret void
}

define void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %vars) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca {i1, i1}, align 1
	%2 = alloca %__Map_Header, align 8
	%3 = alloca %__Map_Key, align 8
	%4 = alloca %__Map_Header, align 8
	%5 = alloca %__Map_Key, align 8
	%6 = alloca i1, align 1
	%7 = alloca {i1, i1}, align 1
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i1, i1}, align 1
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca %__Map_Header, align 8
	%17 = alloca %__Map_Key, align 8
	%18 = alloca i1, align 1
	%19 = alloca {i1, i1}, align 1
	%20 = alloca %__Map_Header, align 8
	%21 = alloca %__Map_Key, align 8
	%22 = alloca %__Map_Header, align 8
	%23 = alloca %__Map_Key, align 8
	%24 = alloca i1, align 1
	%25 = alloca {i1, i1}, align 1
	%26 = alloca %__Map_Header, align 8
	%27 = alloca %__Map_Key, align 8
	%28 = alloca %__Map_Header, align 8
	%29 = alloca %__Map_Key, align 8
	%30 = alloca i1, align 1
	%31 = alloca {i1, i1}, align 1
	%32 = alloca %__Map_Header, align 8
	%33 = alloca %__Map_Key, align 8
	%34 = alloca i1, align 1
	%35 = alloca {i1, i1}, align 1
	%36 = alloca %__Map_Header, align 8
	%37 = alloca %__Map_Key, align 8
	%38 = alloca %__Map_Header, align 8
	%39 = alloca %__Map_Key, align 8
	%40 = alloca {i1, i1}, align 1
	%41 = alloca %__Map_Header, align 8
	%42 = alloca %__Map_Key, align 8
	%43 = alloca i1, align 1
	%44 = alloca {i1, i1}, align 1
	%45 = alloca %__Map_Header, align 8
	%46 = alloca %__Map_Key, align 8
	%47 = alloca %__Map_Header, align 8
	%48 = alloca %__Map_Key, align 8
	%49 = alloca {i1, i1}, align 1
	%50 = alloca %__Map_Header, align 8
	%51 = alloca %__Map_Key, align 8
	%52 = alloca i1, align 1
	%53 = alloca {i1, i1}, align 1
	%54 = alloca %__Map_Header, align 8
	%55 = alloca %__Map_Key, align 8
	%56 = alloca %__Map_Header, align 8
	%57 = alloca %__Map_Key, align 8
	%58 = alloca {i1, i1}, align 1
	%59 = alloca %__Map_Header, align 8
	%60 = alloca %__Map_Key, align 8
	%61 = alloca i1, align 1
	%62 = alloca {i1, i1}, align 1
	%63 = alloca %__Map_Header, align 8
	%64 = alloca %__Map_Key, align 8
	%65 = alloca %__Map_Header, align 8
	%66 = alloca %__Map_Key, align 8
	%67 = alloca {i1, i1}, align 1
	%68 = alloca %__Map_Header, align 8
	%69 = alloca %__Map_Key, align 8
	%70 = alloca i1, align 1
	%71 = alloca {i1, i1}, align 1
	%72 = alloca %__Map_Header, align 8
	%73 = alloca %__Map_Key, align 8
	%74 = alloca %__Map_Header, align 8
	%75 = alloca %__Map_Key, align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	; SelectorExpr
	%76 = call ccc i1 @igBeginMainMenuBar()
	; IfStmt
	; SelectorExpr
	%77 = call i1 @.imgui-8.BeginMenu(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$39, i64 0, i32 0), i64 4}, i1 true)
	br i1 %77, label %if.then-1, label %if.done-28

if.then-1:
	; IfStmt
	; SelectorExpr
	%78 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$3a, i64 0, i32 0), i64 11}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %78, label %if.then-2, label %if.done-5

if.then-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %1
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	%79 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%80 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %80, %Raw_Dynamic_Map** %79
	%81 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 1
	store i1 true, i1* %81
	%82 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 2
	store i64 40, i64* %82
	%83 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 3
	store i64 8, i64* %83
	%84 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 4
	store i64 32, i64* %84
	%85 = load %__Map_Header, %__Map_Header* %2, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %3
	%86 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 0
	store i64 2297942010048193939, i64* %86
	%87 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3b, i64 0, i32 0), i64 14}, %..string* %87
	%88 = load %__Map_Key, %__Map_Key* %3, align 8
	%89 = call %..rawptr @.__dynamic_map_get(%__Map_Header %85, %__Map_Key %88)
	%90 = icmp ne %..rawptr %89, null
	%91 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 1
	store i1 %90, i1* %91
	br i1 %90, label %map.get.then-3, label %map.get.done-4

map.get.then-3:
	%92 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 0
	%93 = bitcast %..rawptr %89 to i1*
	%94 = load i1, i1* %93, align 1
	store i1 %94, i1* %92
	br label %map.get.done-4

map.get.done-4:
	%95 = getelementptr inbounds {i1, i1}, {i1, i1}* %1, i64 0, i32 0
	%96 = load i1, i1* %95, align 1
	%97 = xor i1 -1, %96
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	%98 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 0
	%99 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %99, %Raw_Dynamic_Map** %98
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 1
	store i1 true, i1* %100
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 2
	store i64 40, i64* %101
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 3
	store i64 8, i64* %102
	%103 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 4
	store i64 32, i64* %103
	%104 = load %__Map_Header, %__Map_Header* %4, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %5
	%105 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 0
	store i64 2297942010048193939, i64* %105
	%106 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$3c, i64 0, i32 0), i64 14}, %..string* %106
	%107 = load %__Map_Key, %__Map_Key* %5, align 8
	store i1 zeroinitializer, i1* %6
	store i1 %97, i1* %6
	%108 = bitcast i1* %6 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %104, %__Map_Key %107, %..rawptr %108)
	br label %if.done-5

if.done-5:
	; IfStmt
	; SelectorExpr
	%109 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$3d, i64 0, i32 0), i64 13}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %109, label %if.then-6, label %if.done-9

if.then-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %7
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%110 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%111 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %111, %Raw_Dynamic_Map** %110
	%112 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %112
	%113 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %113
	%114 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %114
	%115 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %115
	%116 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%117 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 2202226828205582596, i64* %117
	%118 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$3e, i64 0, i32 0), i64 16}, %..string* %118
	%119 = load %__Map_Key, %__Map_Key* %9, align 8
	%120 = call %..rawptr @.__dynamic_map_get(%__Map_Header %116, %__Map_Key %119)
	%121 = icmp ne %..rawptr %120, null
	%122 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 1
	store i1 %121, i1* %122
	br i1 %121, label %map.get.then-7, label %map.get.done-8

map.get.then-7:
	%123 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 0
	%124 = bitcast %..rawptr %120 to i1*
	%125 = load i1, i1* %124, align 1
	store i1 %125, i1* %123
	br label %map.get.done-8

map.get.done-8:
	%126 = getelementptr inbounds {i1, i1}, {i1, i1}* %7, i64 0, i32 0
	%127 = load i1, i1* %126, align 1
	%128 = xor i1 -1, %127
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%129 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%130 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %130, %Raw_Dynamic_Map** %129
	%131 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %131
	%132 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %132
	%133 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %133
	%134 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %134
	%135 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%136 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 2202226828205582596, i64* %136
	%137 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$3f, i64 0, i32 0), i64 16}, %..string* %137
	%138 = load %__Map_Key, %__Map_Key* %11, align 8
	store i1 zeroinitializer, i1* %12
	store i1 %128, i1* %12
	%139 = bitcast i1* %12 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %135, %__Map_Key %138, %..rawptr %139)
	br label %if.done-9

if.done-9:
	; IfStmt
	; SelectorExpr
	%140 = call i1 @.imgui-8.BeginMenu(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$40, i64 0, i32 0), i64 6}, i1 true)
	br i1 %140, label %if.then-10, label %if.done-19

if.then-10:
	; IfStmt
	; SelectorExpr
	%141 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$41, i64 0, i32 0), i64 4}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %141, label %if.then-11, label %if.done-14

if.then-11:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %13
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%142 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%143 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %143, %Raw_Dynamic_Map** %142
	%144 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %144
	%145 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %145
	%146 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %146
	%147 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %147
	%148 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%149 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 8221518982030458364, i64* %149
	%150 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$42, i64 0, i32 0), i64 14}, %..string* %150
	%151 = load %__Map_Key, %__Map_Key* %15, align 8
	%152 = call %..rawptr @.__dynamic_map_get(%__Map_Header %148, %__Map_Key %151)
	%153 = icmp ne %..rawptr %152, null
	%154 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 1
	store i1 %153, i1* %154
	br i1 %153, label %map.get.then-12, label %map.get.done-13

map.get.then-12:
	%155 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%156 = bitcast %..rawptr %152 to i1*
	%157 = load i1, i1* %156, align 1
	store i1 %157, i1* %155
	br label %map.get.done-13

map.get.done-13:
	%158 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%159 = load i1, i1* %158, align 1
	%160 = xor i1 -1, %159
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	%161 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 0
	%162 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %162, %Raw_Dynamic_Map** %161
	%163 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 1
	store i1 true, i1* %163
	%164 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 2
	store i64 40, i64* %164
	%165 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 3
	store i64 8, i64* %165
	%166 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 4
	store i64 32, i64* %166
	%167 = load %__Map_Header, %__Map_Header* %16, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %17
	%168 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 0
	store i64 8221518982030458364, i64* %168
	%169 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$43, i64 0, i32 0), i64 14}, %..string* %169
	%170 = load %__Map_Key, %__Map_Key* %17, align 8
	store i1 zeroinitializer, i1* %18
	store i1 %160, i1* %18
	%171 = bitcast i1* %18 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %167, %__Map_Key %170, %..rawptr %171)
	br label %if.done-14

if.done-14:
	; IfStmt
	; SelectorExpr
	%172 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$44, i64 0, i32 0), i64 5}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %172, label %if.then-15, label %if.done-18

if.then-15:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %19
	store %__Map_Header zeroinitializer, %__Map_Header* %20
	%173 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 0
	%174 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %174, %Raw_Dynamic_Map** %173
	%175 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 1
	store i1 true, i1* %175
	%176 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 2
	store i64 40, i64* %176
	%177 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 3
	store i64 8, i64* %177
	%178 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 4
	store i64 32, i64* %178
	%179 = load %__Map_Header, %__Map_Header* %20, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %21
	%180 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 0
	store i64 354564790537078517, i64* %180
	%181 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$45, i64 0, i32 0), i64 15}, %..string* %181
	%182 = load %__Map_Key, %__Map_Key* %21, align 8
	%183 = call %..rawptr @.__dynamic_map_get(%__Map_Header %179, %__Map_Key %182)
	%184 = icmp ne %..rawptr %183, null
	%185 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 1
	store i1 %184, i1* %185
	br i1 %184, label %map.get.then-16, label %map.get.done-17

map.get.then-16:
	%186 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 0
	%187 = bitcast %..rawptr %183 to i1*
	%188 = load i1, i1* %187, align 1
	store i1 %188, i1* %186
	br label %map.get.done-17

map.get.done-17:
	%189 = getelementptr inbounds {i1, i1}, {i1, i1}* %19, i64 0, i32 0
	%190 = load i1, i1* %189, align 1
	%191 = xor i1 -1, %190
	store %__Map_Header zeroinitializer, %__Map_Header* %22
	%192 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 0
	%193 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %193, %Raw_Dynamic_Map** %192
	%194 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 1
	store i1 true, i1* %194
	%195 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 2
	store i64 40, i64* %195
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 3
	store i64 8, i64* %196
	%197 = getelementptr inbounds %__Map_Header, %__Map_Header* %22, i64 0, i32 4
	store i64 32, i64* %197
	%198 = load %__Map_Header, %__Map_Header* %22, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %23
	%199 = getelementptr inbounds %__Map_Key, %__Map_Key* %23, i64 0, i32 0
	store i64 354564790537078517, i64* %199
	%200 = getelementptr inbounds %__Map_Key, %__Map_Key* %23, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$46, i64 0, i32 0), i64 15}, %..string* %200
	%201 = load %__Map_Key, %__Map_Key* %23, align 8
	store i1 zeroinitializer, i1* %24
	store i1 %191, i1* %24
	%202 = bitcast i1* %24 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %198, %__Map_Key %201, %..rawptr %202)
	br label %if.done-18

if.done-18:
	; SelectorExpr
	call ccc void @igEndMenu()
	br label %if.done-19

if.done-19:
	; IfStmt
	; SelectorExpr
	%203 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$47, i64 0, i32 0), i64 16}, %..string zeroinitializer, i1 false, i1 true)
	br i1 %203, label %if.then-20, label %if.done-23

if.then-20:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %25
	store %__Map_Header zeroinitializer, %__Map_Header* %26
	%204 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 0
	%205 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %205, %Raw_Dynamic_Map** %204
	%206 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 1
	store i1 true, i1* %206
	%207 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 2
	store i64 40, i64* %207
	%208 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 3
	store i64 8, i64* %208
	%209 = getelementptr inbounds %__Map_Header, %__Map_Header* %26, i64 0, i32 4
	store i64 32, i64* %209
	%210 = load %__Map_Header, %__Map_Header* %26, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %27
	%211 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 0
	store i64 -6145881643456605148, i64* %211
	%212 = getelementptr inbounds %__Map_Key, %__Map_Key* %27, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$48, i64 0, i32 0), i64 14}, %..string* %212
	%213 = load %__Map_Key, %__Map_Key* %27, align 8
	%214 = call %..rawptr @.__dynamic_map_get(%__Map_Header %210, %__Map_Key %213)
	%215 = icmp ne %..rawptr %214, null
	%216 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 1
	store i1 %215, i1* %216
	br i1 %215, label %map.get.then-21, label %map.get.done-22

map.get.then-21:
	%217 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 0
	%218 = bitcast %..rawptr %214 to i1*
	%219 = load i1, i1* %218, align 1
	store i1 %219, i1* %217
	br label %map.get.done-22

map.get.done-22:
	%220 = getelementptr inbounds {i1, i1}, {i1, i1}* %25, i64 0, i32 0
	%221 = load i1, i1* %220, align 1
	%222 = xor i1 -1, %221
	store %__Map_Header zeroinitializer, %__Map_Header* %28
	%223 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 0
	%224 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %224, %Raw_Dynamic_Map** %223
	%225 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 1
	store i1 true, i1* %225
	%226 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 2
	store i64 40, i64* %226
	%227 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 3
	store i64 8, i64* %227
	%228 = getelementptr inbounds %__Map_Header, %__Map_Header* %28, i64 0, i32 4
	store i64 32, i64* %228
	%229 = load %__Map_Header, %__Map_Header* %28, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %29
	%230 = getelementptr inbounds %__Map_Key, %__Map_Key* %29, i64 0, i32 0
	store i64 -6145881643456605148, i64* %230
	%231 = getelementptr inbounds %__Map_Key, %__Map_Key* %29, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$49, i64 0, i32 0), i64 14}, %..string* %231
	%232 = load %__Map_Key, %__Map_Key* %29, align 8
	store i1 zeroinitializer, i1* %30
	store i1 %222, i1* %30
	%233 = bitcast i1* %30 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %229, %__Map_Key %232, %..rawptr %233)
	br label %if.done-23

if.done-23:
	; SelectorExpr
	call ccc void @igSeparator()
	; IfStmt
	; SelectorExpr
	%234 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$4a, i64 0, i32 0), i64 17}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$4b, i64 0, i32 0), i64 9}, i1 false, i1 true)
	br i1 %234, label %if.then-24, label %if.done-25

if.then-24:
	; SelectorExpr
	%235 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%236 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %235, i64 0
	%237 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %236, i64 0, i32 2
	%238 = load %..rawptr, %..rawptr* %237, align 8
	call void @.main-2.ToggleFullscreen(%..rawptr %238)
	br label %if.done-25

if.done-25:
	; IfStmt
	; SelectorExpr
	%239 = call i1 @.imgui-8.MenuItem(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$4c, i64 0, i32 0), i64 4}, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$4d, i64 0, i32 0), i64 6}, i1 false, i1 true)
	br i1 %239, label %if.then-26, label %if.done-27

if.then-26:
	; AssignStmt
	store i1 false, i1* @main-2.ProgramRunning
	br label %if.done-27

if.done-27:
	; SelectorExpr
	call ccc void @igEndMenu()
	br label %if.done-28

if.done-28:
	; SelectorExpr
	call ccc void @igEndMainMenuBar()
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %31
	store %__Map_Header zeroinitializer, %__Map_Header* %32
	%240 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 0
	%241 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %241, %Raw_Dynamic_Map** %240
	%242 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 1
	store i1 true, i1* %242
	%243 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 2
	store i64 40, i64* %243
	%244 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 3
	store i64 8, i64* %244
	%245 = getelementptr inbounds %__Map_Header, %__Map_Header* %32, i64 0, i32 4
	store i64 32, i64* %245
	%246 = load %__Map_Header, %__Map_Header* %32, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %33
	%247 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 0
	store i64 2297942010048193939, i64* %247
	%248 = getelementptr inbounds %__Map_Key, %__Map_Key* %33, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$4e, i64 0, i32 0), i64 14}, %..string* %248
	%249 = load %__Map_Key, %__Map_Key* %33, align 8
	%250 = call %..rawptr @.__dynamic_map_get(%__Map_Header %246, %__Map_Key %249)
	%251 = icmp ne %..rawptr %250, null
	%252 = getelementptr inbounds {i1, i1}, {i1, i1}* %31, i64 0, i32 1
	store i1 %251, i1* %252
	br i1 %251, label %map.get.then-29, label %map.get.done-30

map.get.then-29:
	%253 = getelementptr inbounds {i1, i1}, {i1, i1}* %31, i64 0, i32 0
	%254 = bitcast %..rawptr %250 to i1*
	%255 = load i1, i1* %254, align 1
	store i1 %255, i1* %253
	br label %map.get.done-30

map.get.done-30:
	%256 = getelementptr inbounds {i1, i1}, {i1, i1}* %31, i64 0, i32 0
	%257 = load i1, i1* %256, align 1
	%258 = icmp eq i1 %257, true
	br i1 %258, label %if.then-31, label %if.done-34

if.then-31:
	; b
	store i1 zeroinitializer, i1* %34
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %35
	store %__Map_Header zeroinitializer, %__Map_Header* %36
	%259 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 0
	%260 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %260, %Raw_Dynamic_Map** %259
	%261 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 1
	store i1 true, i1* %261
	%262 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 2
	store i64 40, i64* %262
	%263 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 3
	store i64 8, i64* %263
	%264 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 4
	store i64 32, i64* %264
	%265 = load %__Map_Header, %__Map_Header* %36, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %37
	%266 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 0
	store i64 2297942010048193939, i64* %266
	%267 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$4f, i64 0, i32 0), i64 14}, %..string* %267
	%268 = load %__Map_Key, %__Map_Key* %37, align 8
	%269 = call %..rawptr @.__dynamic_map_get(%__Map_Header %265, %__Map_Key %268)
	%270 = icmp ne %..rawptr %269, null
	%271 = getelementptr inbounds {i1, i1}, {i1, i1}* %35, i64 0, i32 1
	store i1 %270, i1* %271
	br i1 %270, label %map.get.then-32, label %map.get.done-33

map.get.then-32:
	%272 = getelementptr inbounds {i1, i1}, {i1, i1}* %35, i64 0, i32 0
	%273 = bitcast %..rawptr %269 to i1*
	%274 = load i1, i1* %273, align 1
	store i1 %274, i1* %272
	br label %map.get.done-33

map.get.done-33:
	%275 = getelementptr inbounds {i1, i1}, {i1, i1}* %35, i64 0, i32 0
	%276 = load i1, i1* %275, align 1
	store i1 %276, i1* %34
	; SelectorExpr
	; SelectorExpr
	%277 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%278 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %277, i64 0
	%279 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %278, i64 0, i32 0
	%280 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %279, i64 0
	%281 = getelementptr inbounds i1, i1* %34, i64 0
	call void @.jaze_debug_windows-14.OpenGLInfo(%jaze_gl-12.OpenGLVars_t* %280, i1* %281)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%282 = load i1, i1* %34, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %38
	%283 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 0
	%284 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %284, %Raw_Dynamic_Map** %283
	%285 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 1
	store i1 true, i1* %285
	%286 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 2
	store i64 40, i64* %286
	%287 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 3
	store i64 8, i64* %287
	%288 = getelementptr inbounds %__Map_Header, %__Map_Header* %38, i64 0, i32 4
	store i64 32, i64* %288
	%289 = load %__Map_Header, %__Map_Header* %38, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %39
	%290 = getelementptr inbounds %__Map_Key, %__Map_Key* %39, i64 0, i32 0
	store i64 2297942010048193939, i64* %290
	%291 = getelementptr inbounds %__Map_Key, %__Map_Key* %39, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$50, i64 0, i32 0), i64 14}, %..string* %291
	%292 = load %__Map_Key, %__Map_Key* %39, align 8
	%293 = bitcast i1* %34 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %289, %__Map_Key %292, %..rawptr %293)
	br label %if.done-34

if.done-34:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %40
	store %__Map_Header zeroinitializer, %__Map_Header* %41
	%294 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 0
	%295 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %295, %Raw_Dynamic_Map** %294
	%296 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 1
	store i1 true, i1* %296
	%297 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 2
	store i64 40, i64* %297
	%298 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 3
	store i64 8, i64* %298
	%299 = getelementptr inbounds %__Map_Header, %__Map_Header* %41, i64 0, i32 4
	store i64 32, i64* %299
	%300 = load %__Map_Header, %__Map_Header* %41, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %42
	%301 = getelementptr inbounds %__Map_Key, %__Map_Key* %42, i64 0, i32 0
	store i64 2202226828205582596, i64* %301
	%302 = getelementptr inbounds %__Map_Key, %__Map_Key* %42, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$51, i64 0, i32 0), i64 16}, %..string* %302
	%303 = load %__Map_Key, %__Map_Key* %42, align 8
	%304 = call %..rawptr @.__dynamic_map_get(%__Map_Header %300, %__Map_Key %303)
	%305 = icmp ne %..rawptr %304, null
	%306 = getelementptr inbounds {i1, i1}, {i1, i1}* %40, i64 0, i32 1
	store i1 %305, i1* %306
	br i1 %305, label %map.get.then-35, label %map.get.done-36

map.get.then-35:
	%307 = getelementptr inbounds {i1, i1}, {i1, i1}* %40, i64 0, i32 0
	%308 = bitcast %..rawptr %304 to i1*
	%309 = load i1, i1* %308, align 1
	store i1 %309, i1* %307
	br label %map.get.done-36

map.get.done-36:
	%310 = getelementptr inbounds {i1, i1}, {i1, i1}* %40, i64 0, i32 0
	%311 = load i1, i1* %310, align 1
	%312 = icmp eq i1 %311, true
	br i1 %312, label %if.then-37, label %if.done-40

if.then-37:
	; b
	store i1 zeroinitializer, i1* %43
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %44
	store %__Map_Header zeroinitializer, %__Map_Header* %45
	%313 = getelementptr inbounds %__Map_Header, %__Map_Header* %45, i64 0, i32 0
	%314 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %314, %Raw_Dynamic_Map** %313
	%315 = getelementptr inbounds %__Map_Header, %__Map_Header* %45, i64 0, i32 1
	store i1 true, i1* %315
	%316 = getelementptr inbounds %__Map_Header, %__Map_Header* %45, i64 0, i32 2
	store i64 40, i64* %316
	%317 = getelementptr inbounds %__Map_Header, %__Map_Header* %45, i64 0, i32 3
	store i64 8, i64* %317
	%318 = getelementptr inbounds %__Map_Header, %__Map_Header* %45, i64 0, i32 4
	store i64 32, i64* %318
	%319 = load %__Map_Header, %__Map_Header* %45, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %46
	%320 = getelementptr inbounds %__Map_Key, %__Map_Key* %46, i64 0, i32 0
	store i64 2202226828205582596, i64* %320
	%321 = getelementptr inbounds %__Map_Key, %__Map_Key* %46, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$52, i64 0, i32 0), i64 16}, %..string* %321
	%322 = load %__Map_Key, %__Map_Key* %46, align 8
	%323 = call %..rawptr @.__dynamic_map_get(%__Map_Header %319, %__Map_Key %322)
	%324 = icmp ne %..rawptr %323, null
	%325 = getelementptr inbounds {i1, i1}, {i1, i1}* %44, i64 0, i32 1
	store i1 %324, i1* %325
	br i1 %324, label %map.get.then-38, label %map.get.done-39

map.get.then-38:
	%326 = getelementptr inbounds {i1, i1}, {i1, i1}* %44, i64 0, i32 0
	%327 = bitcast %..rawptr %323 to i1*
	%328 = load i1, i1* %327, align 1
	store i1 %328, i1* %326
	br label %map.get.done-39

map.get.done-39:
	%329 = getelementptr inbounds {i1, i1}, {i1, i1}* %44, i64 0, i32 0
	%330 = load i1, i1* %329, align 1
	store i1 %330, i1* %43
	; SelectorExpr
	%331 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%332 = getelementptr inbounds i1, i1* %43, i64 0
	call void @.jaze_debug_windows-14.Win32VarsInfo(%main-2.Win32Vars_t* %331, i1* %332)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%333 = load i1, i1* %43, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %47
	%334 = getelementptr inbounds %__Map_Header, %__Map_Header* %47, i64 0, i32 0
	%335 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %335, %Raw_Dynamic_Map** %334
	%336 = getelementptr inbounds %__Map_Header, %__Map_Header* %47, i64 0, i32 1
	store i1 true, i1* %336
	%337 = getelementptr inbounds %__Map_Header, %__Map_Header* %47, i64 0, i32 2
	store i64 40, i64* %337
	%338 = getelementptr inbounds %__Map_Header, %__Map_Header* %47, i64 0, i32 3
	store i64 8, i64* %338
	%339 = getelementptr inbounds %__Map_Header, %__Map_Header* %47, i64 0, i32 4
	store i64 32, i64* %339
	%340 = load %__Map_Header, %__Map_Header* %47, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %48
	%341 = getelementptr inbounds %__Map_Key, %__Map_Key* %48, i64 0, i32 0
	store i64 2202226828205582596, i64* %341
	%342 = getelementptr inbounds %__Map_Key, %__Map_Key* %48, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$53, i64 0, i32 0), i64 16}, %..string* %342
	%343 = load %__Map_Key, %__Map_Key* %48, align 8
	%344 = bitcast i1* %43 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %340, %__Map_Key %343, %..rawptr %344)
	br label %if.done-40

if.done-40:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %49
	store %__Map_Header zeroinitializer, %__Map_Header* %50
	%345 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 0
	%346 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %346, %Raw_Dynamic_Map** %345
	%347 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 1
	store i1 true, i1* %347
	%348 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 2
	store i64 40, i64* %348
	%349 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 3
	store i64 8, i64* %349
	%350 = getelementptr inbounds %__Map_Header, %__Map_Header* %50, i64 0, i32 4
	store i64 32, i64* %350
	%351 = load %__Map_Header, %__Map_Header* %50, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %51
	%352 = getelementptr inbounds %__Map_Key, %__Map_Key* %51, i64 0, i32 0
	store i64 8221518982030458364, i64* %352
	%353 = getelementptr inbounds %__Map_Key, %__Map_Key* %51, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$54, i64 0, i32 0), i64 14}, %..string* %353
	%354 = load %__Map_Key, %__Map_Key* %51, align 8
	%355 = call %..rawptr @.__dynamic_map_get(%__Map_Header %351, %__Map_Key %354)
	%356 = icmp ne %..rawptr %355, null
	%357 = getelementptr inbounds {i1, i1}, {i1, i1}* %49, i64 0, i32 1
	store i1 %356, i1* %357
	br i1 %356, label %map.get.then-41, label %map.get.done-42

map.get.then-41:
	%358 = getelementptr inbounds {i1, i1}, {i1, i1}* %49, i64 0, i32 0
	%359 = bitcast %..rawptr %355 to i1*
	%360 = load i1, i1* %359, align 1
	store i1 %360, i1* %358
	br label %map.get.done-42

map.get.done-42:
	%361 = getelementptr inbounds {i1, i1}, {i1, i1}* %49, i64 0, i32 0
	%362 = load i1, i1* %361, align 1
	br i1 %362, label %if.then-43, label %if.done-46

if.then-43:
	; b
	store i1 zeroinitializer, i1* %52
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %53
	store %__Map_Header zeroinitializer, %__Map_Header* %54
	%363 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 0
	%364 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %364, %Raw_Dynamic_Map** %363
	%365 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 1
	store i1 true, i1* %365
	%366 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 2
	store i64 40, i64* %366
	%367 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 3
	store i64 8, i64* %367
	%368 = getelementptr inbounds %__Map_Header, %__Map_Header* %54, i64 0, i32 4
	store i64 32, i64* %368
	%369 = load %__Map_Header, %__Map_Header* %54, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %55
	%370 = getelementptr inbounds %__Map_Key, %__Map_Key* %55, i64 0, i32 0
	store i64 8221518982030458364, i64* %370
	%371 = getelementptr inbounds %__Map_Key, %__Map_Key* %55, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$55, i64 0, i32 0), i64 14}, %..string* %371
	%372 = load %__Map_Key, %__Map_Key* %55, align 8
	%373 = call %..rawptr @.__dynamic_map_get(%__Map_Header %369, %__Map_Key %372)
	%374 = icmp ne %..rawptr %373, null
	%375 = getelementptr inbounds {i1, i1}, {i1, i1}* %53, i64 0, i32 1
	store i1 %374, i1* %375
	br i1 %374, label %map.get.then-44, label %map.get.done-45

map.get.then-44:
	%376 = getelementptr inbounds {i1, i1}, {i1, i1}* %53, i64 0, i32 0
	%377 = bitcast %..rawptr %373 to i1*
	%378 = load i1, i1* %377, align 1
	store i1 %378, i1* %376
	br label %map.get.done-45

map.get.done-45:
	%379 = getelementptr inbounds {i1, i1}, {i1, i1}* %53, i64 0, i32 0
	%380 = load i1, i1* %379, align 1
	store i1 %380, i1* %52
	; SelectorExpr
	%381 = getelementptr inbounds i1, i1* %52, i64 0
	call void @.jaze_debug_windows-14.ShowXinputInfoWindow(i1* %381)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%382 = load i1, i1* %52, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %56
	%383 = getelementptr inbounds %__Map_Header, %__Map_Header* %56, i64 0, i32 0
	%384 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %384, %Raw_Dynamic_Map** %383
	%385 = getelementptr inbounds %__Map_Header, %__Map_Header* %56, i64 0, i32 1
	store i1 true, i1* %385
	%386 = getelementptr inbounds %__Map_Header, %__Map_Header* %56, i64 0, i32 2
	store i64 40, i64* %386
	%387 = getelementptr inbounds %__Map_Header, %__Map_Header* %56, i64 0, i32 3
	store i64 8, i64* %387
	%388 = getelementptr inbounds %__Map_Header, %__Map_Header* %56, i64 0, i32 4
	store i64 32, i64* %388
	%389 = load %__Map_Header, %__Map_Header* %56, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %57
	%390 = getelementptr inbounds %__Map_Key, %__Map_Key* %57, i64 0, i32 0
	store i64 8221518982030458364, i64* %390
	%391 = getelementptr inbounds %__Map_Key, %__Map_Key* %57, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$56, i64 0, i32 0), i64 14}, %..string* %391
	%392 = load %__Map_Key, %__Map_Key* %57, align 8
	%393 = bitcast i1* %52 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %389, %__Map_Key %392, %..rawptr %393)
	br label %if.done-46

if.done-46:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %58
	store %__Map_Header zeroinitializer, %__Map_Header* %59
	%394 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 0
	%395 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %395, %Raw_Dynamic_Map** %394
	%396 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 1
	store i1 true, i1* %396
	%397 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 2
	store i64 40, i64* %397
	%398 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 3
	store i64 8, i64* %398
	%399 = getelementptr inbounds %__Map_Header, %__Map_Header* %59, i64 0, i32 4
	store i64 32, i64* %399
	%400 = load %__Map_Header, %__Map_Header* %59, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %60
	%401 = getelementptr inbounds %__Map_Key, %__Map_Key* %60, i64 0, i32 0
	store i64 354564790537078517, i64* %401
	%402 = getelementptr inbounds %__Map_Key, %__Map_Key* %60, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$57, i64 0, i32 0), i64 15}, %..string* %402
	%403 = load %__Map_Key, %__Map_Key* %60, align 8
	%404 = call %..rawptr @.__dynamic_map_get(%__Map_Header %400, %__Map_Key %403)
	%405 = icmp ne %..rawptr %404, null
	%406 = getelementptr inbounds {i1, i1}, {i1, i1}* %58, i64 0, i32 1
	store i1 %405, i1* %406
	br i1 %405, label %map.get.then-47, label %map.get.done-48

map.get.then-47:
	%407 = getelementptr inbounds {i1, i1}, {i1, i1}* %58, i64 0, i32 0
	%408 = bitcast %..rawptr %404 to i1*
	%409 = load i1, i1* %408, align 1
	store i1 %409, i1* %407
	br label %map.get.done-48

map.get.done-48:
	%410 = getelementptr inbounds {i1, i1}, {i1, i1}* %58, i64 0, i32 0
	%411 = load i1, i1* %410, align 1
	br i1 %411, label %if.then-49, label %if.done-52

if.then-49:
	; b
	store i1 zeroinitializer, i1* %61
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %62
	store %__Map_Header zeroinitializer, %__Map_Header* %63
	%412 = getelementptr inbounds %__Map_Header, %__Map_Header* %63, i64 0, i32 0
	%413 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %413, %Raw_Dynamic_Map** %412
	%414 = getelementptr inbounds %__Map_Header, %__Map_Header* %63, i64 0, i32 1
	store i1 true, i1* %414
	%415 = getelementptr inbounds %__Map_Header, %__Map_Header* %63, i64 0, i32 2
	store i64 40, i64* %415
	%416 = getelementptr inbounds %__Map_Header, %__Map_Header* %63, i64 0, i32 3
	store i64 8, i64* %416
	%417 = getelementptr inbounds %__Map_Header, %__Map_Header* %63, i64 0, i32 4
	store i64 32, i64* %417
	%418 = load %__Map_Header, %__Map_Header* %63, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %64
	%419 = getelementptr inbounds %__Map_Key, %__Map_Key* %64, i64 0, i32 0
	store i64 354564790537078517, i64* %419
	%420 = getelementptr inbounds %__Map_Key, %__Map_Key* %64, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$58, i64 0, i32 0), i64 15}, %..string* %420
	%421 = load %__Map_Key, %__Map_Key* %64, align 8
	%422 = call %..rawptr @.__dynamic_map_get(%__Map_Header %418, %__Map_Key %421)
	%423 = icmp ne %..rawptr %422, null
	%424 = getelementptr inbounds {i1, i1}, {i1, i1}* %62, i64 0, i32 1
	store i1 %423, i1* %424
	br i1 %423, label %map.get.then-50, label %map.get.done-51

map.get.then-50:
	%425 = getelementptr inbounds {i1, i1}, {i1, i1}* %62, i64 0, i32 0
	%426 = bitcast %..rawptr %422 to i1*
	%427 = load i1, i1* %426, align 1
	store i1 %427, i1* %425
	br label %map.get.done-51

map.get.done-51:
	%428 = getelementptr inbounds {i1, i1}, {i1, i1}* %62, i64 0, i32 0
	%429 = load i1, i1* %428, align 1
	store i1 %429, i1* %61
	; SelectorExpr
	%430 = getelementptr inbounds i1, i1* %61, i64 0
	call void @.jaze_debug_windows-14.ShowXinputStateWindow(i1* %430)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%431 = load i1, i1* %61, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %65
	%432 = getelementptr inbounds %__Map_Header, %__Map_Header* %65, i64 0, i32 0
	%433 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %433, %Raw_Dynamic_Map** %432
	%434 = getelementptr inbounds %__Map_Header, %__Map_Header* %65, i64 0, i32 1
	store i1 true, i1* %434
	%435 = getelementptr inbounds %__Map_Header, %__Map_Header* %65, i64 0, i32 2
	store i64 40, i64* %435
	%436 = getelementptr inbounds %__Map_Header, %__Map_Header* %65, i64 0, i32 3
	store i64 8, i64* %436
	%437 = getelementptr inbounds %__Map_Header, %__Map_Header* %65, i64 0, i32 4
	store i64 32, i64* %437
	%438 = load %__Map_Header, %__Map_Header* %65, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %66
	%439 = getelementptr inbounds %__Map_Key, %__Map_Key* %66, i64 0, i32 0
	store i64 354564790537078517, i64* %439
	%440 = getelementptr inbounds %__Map_Key, %__Map_Key* %66, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$59, i64 0, i32 0), i64 15}, %..string* %440
	%441 = load %__Map_Key, %__Map_Key* %66, align 8
	%442 = bitcast i1* %61 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %438, %__Map_Key %441, %..rawptr %442)
	br label %if.done-52

if.done-52:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %67
	store %__Map_Header zeroinitializer, %__Map_Header* %68
	%443 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 0
	%444 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %444, %Raw_Dynamic_Map** %443
	%445 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 1
	store i1 true, i1* %445
	%446 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 2
	store i64 40, i64* %446
	%447 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 3
	store i64 8, i64* %447
	%448 = getelementptr inbounds %__Map_Header, %__Map_Header* %68, i64 0, i32 4
	store i64 32, i64* %448
	%449 = load %__Map_Header, %__Map_Header* %68, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %69
	%450 = getelementptr inbounds %__Map_Key, %__Map_Key* %69, i64 0, i32 0
	store i64 -6145881643456605148, i64* %450
	%451 = getelementptr inbounds %__Map_Key, %__Map_Key* %69, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$5a, i64 0, i32 0), i64 14}, %..string* %451
	%452 = load %__Map_Key, %__Map_Key* %69, align 8
	%453 = call %..rawptr @.__dynamic_map_get(%__Map_Header %449, %__Map_Key %452)
	%454 = icmp ne %..rawptr %453, null
	%455 = getelementptr inbounds {i1, i1}, {i1, i1}* %67, i64 0, i32 1
	store i1 %454, i1* %455
	br i1 %454, label %map.get.then-53, label %map.get.done-54

map.get.then-53:
	%456 = getelementptr inbounds {i1, i1}, {i1, i1}* %67, i64 0, i32 0
	%457 = bitcast %..rawptr %453 to i1*
	%458 = load i1, i1* %457, align 1
	store i1 %458, i1* %456
	br label %map.get.done-54

map.get.done-54:
	%459 = getelementptr inbounds {i1, i1}, {i1, i1}* %67, i64 0, i32 0
	%460 = load i1, i1* %459, align 1
	br i1 %460, label %if.then-55, label %if.done-58

if.then-55:
	; b
	store i1 zeroinitializer, i1* %70
		; IndexExpr
	; SelectorExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %71
	store %__Map_Header zeroinitializer, %__Map_Header* %72
	%461 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 0
	%462 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %462, %Raw_Dynamic_Map** %461
	%463 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 1
	store i1 true, i1* %463
	%464 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 2
	store i64 40, i64* %464
	%465 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 3
	store i64 8, i64* %465
	%466 = getelementptr inbounds %__Map_Header, %__Map_Header* %72, i64 0, i32 4
	store i64 32, i64* %466
	%467 = load %__Map_Header, %__Map_Header* %72, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %73
	%468 = getelementptr inbounds %__Map_Key, %__Map_Key* %73, i64 0, i32 0
	store i64 -6145881643456605148, i64* %468
	%469 = getelementptr inbounds %__Map_Key, %__Map_Key* %73, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$5b, i64 0, i32 0), i64 14}, %..string* %469
	%470 = load %__Map_Key, %__Map_Key* %73, align 8
	%471 = call %..rawptr @.__dynamic_map_get(%__Map_Header %467, %__Map_Key %470)
	%472 = icmp ne %..rawptr %471, null
	%473 = getelementptr inbounds {i1, i1}, {i1, i1}* %71, i64 0, i32 1
	store i1 %472, i1* %473
	br i1 %472, label %map.get.then-56, label %map.get.done-57

map.get.then-56:
	%474 = getelementptr inbounds {i1, i1}, {i1, i1}* %71, i64 0, i32 0
	%475 = bitcast %..rawptr %471 to i1*
	%476 = load i1, i1* %475, align 1
	store i1 %476, i1* %474
	br label %map.get.done-57

map.get.done-57:
	%477 = getelementptr inbounds {i1, i1}, {i1, i1}* %71, i64 0, i32 0
	%478 = load i1, i1* %477, align 1
	store i1 %478, i1* %70
	; SelectorExpr
	%479 = getelementptr inbounds i1, i1* %70, i64 0
	call ccc void @igShowTestWindow(i1* %479)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%480 = load i1, i1* %70, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %74
	%481 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 0
	%482 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %482, %Raw_Dynamic_Map** %481
	%483 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 1
	store i1 true, i1* %483
	%484 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 2
	store i64 40, i64* %484
	%485 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 3
	store i64 8, i64* %485
	%486 = getelementptr inbounds %__Map_Header, %__Map_Header* %74, i64 0, i32 4
	store i64 32, i64* %486
	%487 = load %__Map_Header, %__Map_Header* %74, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %75
	%488 = getelementptr inbounds %__Map_Key, %__Map_Key* %75, i64 0, i32 0
	store i64 -6145881643456605148, i64* %488
	%489 = getelementptr inbounds %__Map_Key, %__Map_Key* %75, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$5c, i64 0, i32 0), i64 14}, %..string* %489
	%490 = load %__Map_Key, %__Map_Key* %75, align 8
	%491 = bitcast i1* %70 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %487, %__Map_Key %490, %..rawptr %491)
	br label %if.done-58

if.done-58:
	ret void
}

define void @main() {
decls-0:
	%0 = alloca %main-2.Win32Vars_t, align 8
	%1 = alloca [1024 x i8], align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %..any, align 8
	%5 = alloca %..any, align 8
	%6 = alloca {%..any*, i64, i64}, align 8
	%7 = alloca [2 x %..any], align 8
	%8 = alloca {i8*, i64, i64}, align 8
	%9 = alloca float, align 4
	%10 = alloca i64, align 8
	%11 = alloca i64, align 8
	%12 = alloca %__Map_Header, align 8
	%13 = alloca %__Map_Key, align 8
	%14 = alloca i1, align 1
	%15 = alloca %__Map_Header, align 8
	%16 = alloca %__Map_Key, align 8
	%17 = alloca i1, align 1
	%18 = alloca %__Map_Header, align 8
	%19 = alloca %__Map_Key, align 8
	%20 = alloca i1, align 1
	%21 = alloca %windows-6.Msg, align 8
	%22 = alloca %imgui-8.GuiStyle*, align 8
	%23 = alloca %imgui-8.GuiStyle*, align 8
	%24 = alloca i64, align 8
	%25 = alloca double, align 8
	%26 = alloca {float*, i64, i64}, align 8
	call void @.__$startup_runtime()
	; AssignStmt
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_win32-11.WINDOWPLACEMENT, %jaze_win32-11.WINDOWPLACEMENT* @main-2.GlobalWindowPosition, i64 0, i32 0
	store i32 44, i32* %27
	; win32vars
	store %main-2.Win32Vars_t zeroinitializer, %main-2.Win32Vars_t* %0
		store %main-2.Win32Vars_t zeroinitializer, %main-2.Win32Vars_t* %0
	; AssignStmt
	%28 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	store %main-2.Win32Vars_t* %28, %main-2.Win32Vars_t** @main-2.GlobalWin32VarsPtr
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 1
	; SelectorExpr
	%30 = call ccc %..rawptr @GetModuleHandleA(i8* zeroinitializer)
	store %..rawptr %30, %..rawptr* %29
	; AssignStmt
	; SelectorExpr
	%31 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	; SelectorExpr
	%32 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 1
	%33 = load %..rawptr, %..rawptr* %32, align 8
	%34 = call %..rawptr @.main-2.CreateWindow(%..rawptr %33)
	store %..rawptr %34, %..rawptr* %31
	; AssignStmt
	; SelectorExpr
	%35 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	; SelectorExpr
	; SelectorExpr
	%36 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%37 = load %..rawptr, %..rawptr* %36, align 8
	%38 = call ccc %..rawptr @GetDC(%..rawptr %37)
	store %..rawptr %38, %..rawptr* %35
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%39 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%40 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %39, i64 0, i32 6
	%41 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	%42 = call %..rawptr @.main-2.CreateOpenGLContext(%main-2.Win32Vars_t* %41, i1 true)
	store %..rawptr %42, %..rawptr* %40
	; SelectorExpr
	call void @.jaze_gl-12.Init()
	; SelectorExpr
	call void @.jaze_gl-12.DebugMessageCallback(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* @.main-2.OpenGLDebugCallback, %..rawptr zeroinitializer)
	; SelectorExpr
	call void @.jaze_gl-12.Enable(i32 33346)
	; SelectorExpr
	call void @.jaze_gl-12.DebugMessageControl(i32 4352, i32 4352, i32 33387, i32 0, i32* zeroinitializer, i1 false)
	; SelectorExpr
	; SelectorExpr
	%43 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%44 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %43, i64 0
	call void @.jaze_gl-12.GetInfo(%jaze_gl-12.OpenGLVars_t* %44)
	; SelectorExpr
	; SelectorExpr
	%45 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%46 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %45, i64 0
	; SelectorExpr
	%47 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	%48 = load %..rawptr, %..rawptr* %47, align 8
	call void @.jaze_wgl-13.GetInfo(%jaze_gl-12.OpenGLVars_t* %46, %..rawptr %48)
	; buf
	store [1024 x i8] zeroinitializer, [1024 x i8]* %1
		; SelectorExpr
	; SliceExpr
	%49 = load [1024 x i8], [1024 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$5d, i64 0, i32 0), i64 42}, i64 334, i64 19, i64 0, i64 1024, i64 1024)
	%50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	%51 = getelementptr inbounds i8, i8* %50, i64 0
	%52 = sub i64 1024, 0
	%53 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%54 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %51, i8** %54
	%55 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %52, i64* %55
	%56 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %53, i64* %56
	%57 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	; SelectorExpr
	; SelectorExpr
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 0
	%59 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %58, i64 0, i32 2
	%60 = load %..string, %..string* %59, align 8
	store %..string zeroinitializer, %..string* %3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$5e, i64 0, i32 0), i64 5}, %..string* %3
	%61 = load %..string, %..string* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%62 = bitcast %..string* %3 to %..rawptr
	%63 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%64 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%65 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %63, %Type_Info** %64
	store %..rawptr %62, %..rawptr* %65
	%66 = load %..any, %..any* %4, align 8
	store %..any zeroinitializer, %..any* %5
	%67 = bitcast %..string* %59 to %..rawptr
	%68 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%69 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%70 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %68, %Type_Info** %69
	store %..rawptr %67, %..rawptr* %70
	%71 = load %..any, %..any* %5, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %6
	store [2 x %..any] zeroinitializer, [2 x %..any]* %7
	%72 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	store %..any %66, %..any* %72
	%73 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 1
	store %..any %71, %..any* %73
	%74 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 0
	store %..any* %74, %..any** %75
	%76 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 1
	store i64 2, i64* %76
	%77 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %6, i64 0, i32 2
	store i64 2, i64* %77
	%78 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %6, align 8
	%79 = call %..string @.fmt-4.sprint({i8*, i64, i64} %57, {%..any*, i64, i64} %78)
	; SelectorExpr
	; SelectorExpr
	%80 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%81 = load %..rawptr, %..rawptr* %80, align 8
	; IndexExpr
	; SliceExpr
	%82 = load [1024 x i8], [1024 x i8]* %1, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$5f, i64 0, i32 0), i64 42}, i64 335, i64 54, i64 0, i64 1024, i64 1024)
	%83 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i32 0
	%84 = getelementptr inbounds i8, i8* %83, i64 0
	%85 = sub i64 1024, 0
	%86 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %8
	%87 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	store i8* %84, i8** %87
	%88 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 1
	store i64 %85, i64* %88
	%89 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 2
	store i64 %86, i64* %89
	%90 = load {i8*, i64, i64}, {i8*, i64, i64}* %8, align 8
	%91 = extractvalue {i8*, i64, i64} %90, 0
	%92 = extractvalue {i8*, i64, i64} %90, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.__str$60, i64 0, i32 0), i64 42}, i64 335, i64 59, i64 0, i64 %92)
	%93 = getelementptr inbounds i8, i8* %91, i64 0
	%94 = getelementptr inbounds i8, i8* %93, i64 0
	%95 = call ccc i32 @SetWindowTextA(%..rawptr %81, i8* %94)
	; col
	store float zeroinitializer, float* %9
		store float 0x3fcc1c1c00000000, float* %9
	; SelectorExpr
	%96 = load float, float* %9, align 4
	%97 = load float, float* %9, align 4
	%98 = load float, float* %9, align 4
	call ccc void @glClearColor(float %96, float %97, float %98, float 0x3ff0000000000000)
	; SelectorExpr
	; SelectorExpr
	%99 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%100 = load %..rawptr, %..rawptr* %99, align 8
	call void @.jaze_imgui-15.Init(%..rawptr %100)
	; AssignStmt
	store i1 true, i1* @main-2.ProgramRunning
	; freq
	store i64 zeroinitializer, i64* %10
		; SelectorExpr
	%101 = getelementptr inbounds i64, i64* %10, i64 0
	%102 = call ccc i32 @QueryPerformanceFrequency(i64* %101)
	; oldTime
	store i64 zeroinitializer, i64* %11
		; SelectorExpr
	%103 = getelementptr inbounds i64, i64* %11, i64 0
	%104 = call ccc i32 @QueryPerformanceCounter(i64* %103)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %12
	%105 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 0
	%106 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %106, %Raw_Dynamic_Map** %105
	%107 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 1
	store i1 true, i1* %107
	%108 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 2
	store i64 40, i64* %108
	%109 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 3
	store i64 8, i64* %109
	%110 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 4
	store i64 32, i64* %110
	%111 = load %__Map_Header, %__Map_Header* %12, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %13
	%112 = getelementptr inbounds %__Map_Key, %__Map_Key* %13, i64 0, i32 0
	store i64 2297942010048193939, i64* %112
	%113 = getelementptr inbounds %__Map_Key, %__Map_Key* %13, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$61, i64 0, i32 0), i64 14}, %..string* %113
	%114 = load %__Map_Key, %__Map_Key* %13, align 8
	store i1 zeroinitializer, i1* %14
	store i1 false, i1* %14
	%115 = bitcast i1* %14 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %111, %__Map_Key %114, %..rawptr %115)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %15
	%116 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 0
	%117 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %117, %Raw_Dynamic_Map** %116
	%118 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 1
	store i1 true, i1* %118
	%119 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 2
	store i64 40, i64* %119
	%120 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 3
	store i64 8, i64* %120
	%121 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 4
	store i64 32, i64* %121
	%122 = load %__Map_Header, %__Map_Header* %15, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %16
	%123 = getelementptr inbounds %__Map_Key, %__Map_Key* %16, i64 0, i32 0
	store i64 2202226828205582596, i64* %123
	%124 = getelementptr inbounds %__Map_Key, %__Map_Key* %16, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$62, i64 0, i32 0), i64 16}, %..string* %124
	%125 = load %__Map_Key, %__Map_Key* %16, align 8
	store i1 zeroinitializer, i1* %17
	store i1 false, i1* %17
	%126 = bitcast i1* %17 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %122, %__Map_Key %125, %..rawptr %126)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %18
	%127 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 0
	%128 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %128, %Raw_Dynamic_Map** %127
	%129 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 1
	store i1 true, i1* %129
	%130 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 2
	store i64 40, i64* %130
	%131 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 3
	store i64 8, i64* %131
	%132 = getelementptr inbounds %__Map_Header, %__Map_Header* %18, i64 0, i32 4
	store i64 32, i64* %132
	%133 = load %__Map_Header, %__Map_Header* %18, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %19
	%134 = getelementptr inbounds %__Map_Key, %__Map_Key* %19, i64 0, i32 0
	store i64 -6145881643456605148, i64* %134
	%135 = getelementptr inbounds %__Map_Key, %__Map_Key* %19, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$63, i64 0, i32 0), i64 14}, %..string* %135
	%136 = load %__Map_Key, %__Map_Key* %19, align 8
	store i1 zeroinitializer, i1* %20
	store i1 false, i1* %20
	%137 = bitcast i1* %20 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %133, %__Map_Key %136, %..rawptr %137)
	; SelectorExpr
	%138 = load i1 (i32)*, i1 (i32)** @.jaze_wgl-13.SwapIntervalEXT, align 8
	%139 = call ccc i1 %138(i32 -1)
	; SelectorExpr
	%140 = call i1 @.jaze_xinput-16.Init()
	; SelectorExpr
	call void @.jaze_xinput-16.Enable(i1 true)
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%141 = load i1, i1* @main-2.ProgramRunning, align 1
	br i1 %141, label %for.body-2, label %for.done-29

for.body-2:
	; msg
	store %windows-6.Msg zeroinitializer, %windows-6.Msg* %21
		; ForStmt
	br label %for.loop-3

for.loop-3:
	; SelectorExpr
	%142 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0
	%143 = call ccc i32 @PeekMessageA(%windows-6.Msg* %142, %..rawptr zeroinitializer, i32 0, i32 0, i32 1)
	%144 = icmp eq i32 %143, 1
	br i1 %144, label %for.body-4, label %for.done-24

for.body-4:
	; MatchStmt
	; SelectorExpr
	%145 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0, i32 1
	%146 = load i32, i32* %145, align 4
	%147 = icmp eq i32 %146, 18
	br i1 %147, label %match.case.body-6, label %match.case.next-5

match.case.next-5:
	%148 = icmp eq i32 %146, 260
	br i1 %148, label %match.fall.body-8, label %match.case.next-7

match.case.body-6:
	; AssignStmt
	store i1 false, i1* @main-2.ProgramRunning
	br label %match.done-23

match.case.next-7:
	%149 = icmp eq i32 %146, 256
	br i1 %149, label %match.fall.body-14, label %match.case.next-13

match.fall.body-8:
	; IfStmt
	; SelectorExpr
	%150 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0, i32 2
	%151 = load i64, i64* %150, align 8
	; cast - cast
	%152 = trunc i64 %151 to i32
	%153 = icmp eq i32 %152, 13
	br i1 %153, label %if.then-9, label %if.done-10

if.then-9:
	; SelectorExpr
	%154 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 2
	%155 = load %..rawptr, %..rawptr* %154, align 8
	call void @.main-2.ToggleFullscreen(%..rawptr %155)
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%156 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0, i32 2
	%157 = load i64, i64* %156, align 8
	%158 = icmp eq i64 %157, 192
	br i1 %158, label %if.then-11, label %if.done-12

if.then-11:
	; AssignStmt
	%159 = load i1, i1* @main-2.ShowDebugMenu, align 1
	%160 = xor i1 -1, %159
	store i1 %160, i1* @main-2.ShowDebugMenu
	br label %if.done-12

if.done-12:
	; continue
	br label %for.loop-3

match.case.next-13:
	%161 = icmp eq i32 %146, 257
	br i1 %161, label %match.fall.body-20, label %match.case.next-19

match.fall.body-14:
	; IfStmt
	; SelectorExpr
	%162 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0, i32 2
	%163 = load i64, i64* %162, align 8
	; cast - cast
	%164 = trunc i64 %163 to i32
	%165 = icmp eq i32 %164, 27
	br i1 %165, label %if.then-15, label %if.done-16

if.then-15:
	; SelectorExpr
	call ccc void @PostQuitMessage(i32 0)
	br label %if.done-16

if.done-16:
	; IfStmt
	; SelectorExpr
	%166 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0, i32 2
	%167 = load i64, i64* %166, align 8
	; cast - cast
	%168 = trunc i64 %167 to i32
	%169 = icmp eq i32 %168, 9
	br i1 %169, label %if.then-17, label %if.done-18

if.then-17:
	; style
	store %imgui-8.GuiStyle* zeroinitializer, %imgui-8.GuiStyle** %22
		; SelectorExpr
	%170 = call ccc %imgui-8.GuiStyle* @igGetStyle()
	store %imgui-8.GuiStyle* %170, %imgui-8.GuiStyle** %22
	; AssignStmt
	; SelectorExpr
	%171 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %22, align 8
	%172 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %171, i64 0
	%173 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %172, i64 0, i32 0
	store float 0x3fb9999980000000, float* %173
	br label %if.done-18

if.done-18:
	br label %match.done-23

match.case.next-19:
	br label %match.done-23

match.fall.body-20:
	; IfStmt
	; SelectorExpr
	%174 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0, i32 2
	%175 = load i64, i64* %174, align 8
	; cast - cast
	%176 = trunc i64 %175 to i32
	%177 = icmp eq i32 %176, 9
	br i1 %177, label %if.then-21, label %if.done-22

if.then-21:
	; style
	store %imgui-8.GuiStyle* zeroinitializer, %imgui-8.GuiStyle** %23
		; SelectorExpr
	%178 = call ccc %imgui-8.GuiStyle* @igGetStyle()
	store %imgui-8.GuiStyle* %178, %imgui-8.GuiStyle** %23
	; AssignStmt
	; SelectorExpr
	%179 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %23, align 8
	%180 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %179, i64 0
	%181 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %180, i64 0, i32 0
	store float 0x3ff0000000000000, float* %181
	br label %if.done-22

if.done-22:
	br label %match.done-23

match.done-23:
	; SelectorExpr
	%182 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0
	%183 = call ccc i32 @TranslateMessage(%windows-6.Msg* %182)
	; SelectorExpr
	%184 = getelementptr inbounds %windows-6.Msg, %windows-6.Msg* %21, i64 0
	%185 = call ccc i64 @DispatchMessageA(%windows-6.Msg* %184)
	br label %for.loop-3

for.done-24:
	; newTime
	store i64 zeroinitializer, i64* %24
		; SelectorExpr
	%186 = getelementptr inbounds i64, i64* %24, i64 0
	%187 = call ccc i32 @QueryPerformanceCounter(i64* %186)
	; deltaTime
	store double zeroinitializer, double* %25
		%188 = load i64, i64* %24, align 8
	%189 = load i64, i64* %11, align 8
	%190 = sub i64 %188, %189
	; cast - cast
	%191 = sitofp i64 %190 to double
	store double %191, double* %25
	; AssignStmt
	%192 = load i64, i64* %24, align 8
	store i64 %192, i64* %11
	; AssignStmt
	%193 = load i64, i64* %10, align 8
	; cast - cast
	%194 = sitofp i64 %193 to double
	%195 = load double, double* %25, align 8
	%196 = fdiv double %195, %194
	store double %196, double* %25
	; vertices
	store {float*, i64, i64} zeroinitializer, {float*, i64, i64}* %26
		store {float*, i64, i64} {float* getelementptr inbounds ([6 x float], [6 x float]* @.__csba$0, i64 0, i32 0), i64 6}, {float*, i64, i64}* %26
	; IfStmt
	%197 = load i1, i1* @main-2.ShowDebugMenu, align 1
	br i1 %197, label %if.then-25, label %if.done-26

if.then-25:
	; SelectorExpr
	%198 = load double, double* %25, align 8
	call void @.jaze_imgui-15.BeginNewFrame(double %198)
	%199 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0
	call void @.main-2.RenderDebugUI(%main-2.Win32Vars_t* %199)
	br label %if.done-26

if.done-26:
	; SelectorExpr
	call void @.jaze_gl-12.Clear(i32 16640)
	; IfStmt
	%200 = load i1, i1* @main-2.ShowDebugMenu, align 1
	br i1 %200, label %if.then-27, label %if.done-28

if.then-27:
	; SelectorExpr
	call ccc void @igRender()
	br label %if.done-28

if.done-28:
	; SelectorExpr
	; SelectorExpr
	%201 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %0, i64 0, i32 4
	%202 = load %..rawptr, %..rawptr* %201, align 8
	%203 = call ccc i32 @SwapBuffers(%..rawptr %202)
	br label %for.loop-1

for.done-29:
	ret void
}

define void @.fmt-4.write_string({i8*, i64, i64}* %buf, %..string %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	; append
	%4 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%5 = bitcast {i8*, i64, i64}* %4 to %..rawptr
	%6 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%7 = load %..string, %..string* %1, align 8
	; cast - cast
	%8 = extractvalue %..string %7, 0
	store i8* zeroinitializer, i8** %2
	store i8* %8, i8** %2
	%9 = extractvalue %..string %7, 1
	%10 = sub i64 %9, 0
	%11 = sub i64 %9, 0
	%12 = load i8*, i8** %2, align 8
	%13 = getelementptr inbounds i8, i8* %12, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %13, i8** %14
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %11, i64* %16
	%17 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%18 = extractvalue {i8*, i64, i64} %17, 0
	%19 = extractvalue {i8*, i64, i64} %17, 1
	%20 = bitcast i8* %18 to %..rawptr
	%21 = call i64 @.__slice_append(%..rawptr %5, i64 1, i64 1, %..rawptr %20, i64 %19)
	ret void
}

define void @.fmt-4.write_byte({i8*, i64, i64}* %buf, i8 %b) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i8, align 1
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca [1 x i8], align 1
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store i8 zeroinitializer, i8* %1
		store i8 %b, i8* %1
	; append
	%4 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%5 = bitcast {i8*, i64, i64}* %4 to %..rawptr
	%6 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%7 = load i8, i8* %1, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	store [1 x i8] zeroinitializer, [1 x i8]* %3
	%8 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	store i8 %7, i8* %8
	%9 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = extractvalue {i8*, i64, i64} %13, 0
	%15 = extractvalue {i8*, i64, i64} %13, 1
	%16 = bitcast i8* %14 to %..rawptr
	%17 = call i64 @.__slice_append(%..rawptr %5, i64 1, i64 1, %..rawptr %16, i64 %15)
	ret void
}

define void @.fmt-4.write_rune({i8*, i64, i64}* %buf, i32 %r) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca i32, align 4
	%2 = alloca [4 x i8], align 1
	%3 = alloca i64, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store i32 zeroinitializer, i32* %1
		store i32 %r, i32* %1
	; IfStmt
	%5 = load i32, i32* %1, align 4
	%6 = icmp slt i32 %5, 128
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	%7 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%8 = load i32, i32* %1, align 4
	; cast - cast
	%9 = trunc i32 %8 to i8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %7, i8 %9)
	; ReturnStmt
	ret void

if.done-2:
	; b
	store [4 x i8] zeroinitializer, [4 x i8]* %2
		; n
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%10 = load i32, i32* %1, align 4
	%11 = call {[4 x i8], i64} @.utf8-5.encode_rune(i32 %10)
	%12 = extractvalue {[4 x i8], i64} %11, 0
	%13 = extractvalue {[4 x i8], i64} %11, 1
	store [4 x i8] %12, [4 x i8]* %2
	store i64 %13, i64* %3
	; append
	%14 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%15 = bitcast {i8*, i64, i64}* %14 to %..rawptr
	%16 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SliceExpr
	%17 = load i64, i64* %3, align 8
	%18 = load [4 x i8], [4 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$64, i64 0, i32 0), i64 37}, i64 23, i64 17, i64 0, i64 %17, i64 4)
	%19 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i32 0
	%20 = getelementptr inbounds i8, i8* %19, i64 0
	%21 = sub i64 %17, 0
	%22 = sub i64 4, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %20, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %21, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %22, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %26, 0
	%28 = extractvalue {i8*, i64, i64} %26, 1
	%29 = bitcast i8* %27 to %..rawptr
	%30 = call i64 @.__slice_append(%..rawptr %15, i64 1, i64 1, %..rawptr %29, i64 %28)
	ret void
}

define i64 @.fmt-4.fprint(i64 %fd, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [4096 x i8], align 1
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
		; SliceExpr
	%6 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$65, i64 0, i32 0), i64 37}, i64 49, i64 13, i64 0, i64 0, i64 4096)
	%7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call i64 @.fmt-4.bprint({i8*, i64, i64}* %15, {%..any*, i64, i64} %16)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	; SliceExpr
	%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 1
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$66, i64 0, i32 0), i64 37}, i64 51, i64 18, i64 0, i64 %20, i64 %22)
	%23 = extractvalue {i8*, i64, i64} %21, 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = sub i64 %20, 0
	%26 = sub i64 %22, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %24, i8** %27
	%28 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %25, i64* %28
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %26, i64* %29
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%31 = call {i64, i64} @.os_windows-17.write(i64 %18, {i8*, i64, i64} %30)
	; ReturnStmt
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%33 = extractvalue {i8*, i64, i64} %32, 1
	ret i64 %33
}

define i64 @.fmt-4.fprintln(i64 %fd, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [4096 x i8], align 1
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
		; SliceExpr
	%6 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$67, i64 0, i32 0), i64 37}, i64 57, i64 13, i64 0, i64 0, i64 4096)
	%7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call i64 @.fmt-4.bprintln({i8*, i64, i64}* %15, {%..any*, i64, i64} %16)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	; SliceExpr
	%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 1
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$68, i64 0, i32 0), i64 37}, i64 59, i64 18, i64 0, i64 %20, i64 %22)
	%23 = extractvalue {i8*, i64, i64} %21, 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = sub i64 %20, 0
	%26 = sub i64 %22, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%27 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %24, i8** %27
	%28 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %25, i64* %28
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %26, i64* %29
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%31 = call {i64, i64} @.os_windows-17.write(i64 %18, {i8*, i64, i64} %30)
	; ReturnStmt
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	%33 = extractvalue {i8*, i64, i64} %32, 1
	ret i64 %33
}

define i64 @.fmt-4.fprintf(i64 %fd, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [4096 x i8], align 1
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; data
	store [4096 x i8] zeroinitializer, [4096 x i8]* %3
		; buf
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
		; SliceExpr
	%7 = load [4096 x i8], [4096 x i8]* %3, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$69, i64 0, i32 0), i64 37}, i64 64, i64 13, i64 0, i64 0, i64 4096)
	%8 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i32 0
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	%10 = sub i64 0, 0
	%11 = sub i64 4096, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 0
	store i8* %9, i8** %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 1
	store i64 %10, i64* %13
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %5, i64 0, i32 2
	store i64 %11, i64* %14
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	store {i8*, i64, i64} %15, {i8*, i64, i64}* %4
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0
	%17 = load %..string, %..string* %1, align 8
	%18 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%19 = call i64 @.fmt-4.bprintf({i8*, i64, i64}* %16, %..string %17, {%..any*, i64, i64} %18)
	; SelectorExpr
	%20 = load i64, i64* %0, align 8
	; SliceExpr
	%21 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%22 = extractvalue {i8*, i64, i64} %21, 1
	%23 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%24 = extractvalue {i8*, i64, i64} %23, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$6a, i64 0, i32 0), i64 37}, i64 66, i64 18, i64 0, i64 %22, i64 %24)
	%25 = extractvalue {i8*, i64, i64} %23, 0
	%26 = getelementptr inbounds i8, i8* %25, i64 0
	%27 = sub i64 %22, 0
	%28 = sub i64 %24, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%29 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %26, i8** %29
	%30 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %27, i64* %30
	%31 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %28, i64* %31
	%32 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%33 = call {i64, i64} @.os_windows-17.write(i64 %20, {i8*, i64, i64} %32)
	; ReturnStmt
	%34 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%35 = extractvalue {i8*, i64, i64} %34, 1
	ret i64 %35
}

define i64 @.fmt-4.print({%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load i64, i64* @.os_windows-17.stdout, align 8
	%2 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%3 = call i64 @.fmt-4.fprint(i64 %1, {%..any*, i64, i64} %2)
	ret i64 %3
}

define i64 @.fmt-4.println({%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	; ReturnStmt
	; SelectorExpr
	%1 = load i64, i64* @.os_windows-17.stdout, align 8
	%2 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%3 = call i64 @.fmt-4.fprintln(i64 %1, {%..any*, i64, i64} %2)
	ret i64 %3
}

define i64 @.fmt-4.printf(%..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %fmt, %..string* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; ReturnStmt
	; SelectorExpr
	%2 = load i64, i64* @.os_windows-17.stdout, align 8
	%3 = load %..string, %..string* %0, align 8
	%4 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%5 = call i64 @.fmt-4.fprintf(i64 %2, %..string %3, {%..any*, i64, i64} %4)
	ret i64 %5
}

define void @.fmt-4.write_type({i8*, i64, i64}* %buf, %Type_Info* %ti) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %Type_Info*, align 8
	%2 = alloca %Type_Info.Named, align 8
	%3 = alloca %Type_Info.Integer, align 8
	%4 = alloca %fmt-4.Fmt_Info, align 8
	%5 = alloca %fmt-4.Fmt_Info, align 8
	%6 = alloca %Type_Info.Float, align 8
	%7 = alloca %Type_Info.Complex, align 8
	%8 = alloca %Type_Info.Quaternion, align 8
	%9 = alloca %Type_Info.String, align 1
	%10 = alloca %Type_Info.Boolean, align 1
	%11 = alloca %Type_Info.Pointer, align 8
	%12 = alloca %Type_Info.Procedure, align 8
	%13 = alloca %Type_Info.Tuple*, align 8
	%14 = alloca {%Type_Info.Tuple*, i1}, align 8
	%15 = alloca %Type_Info*, align 8
	%16 = alloca i64, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	%19 = alloca %Type_Info.Tuple, align 8
	%20 = alloca i64, align 8
	%21 = alloca %..string, align 8
	%22 = alloca i64, align 8
	%23 = alloca i64, align 8
	%24 = alloca i64, align 8
	%25 = alloca %Type_Info*, align 8
	%26 = alloca %Type_Info.Array, align 8
	%27 = alloca %fmt-4.Fmt_Info, align 8
	%28 = alloca %fmt-4.Fmt_Info, align 8
	%29 = alloca %Type_Info.Dynamic_Array, align 8
	%30 = alloca %Type_Info.Slice, align 8
	%31 = alloca %Type_Info.Vector, align 8
	%32 = alloca %fmt-4.Fmt_Info, align 8
	%33 = alloca %fmt-4.Fmt_Info, align 8
	%34 = alloca %Type_Info.Map, align 8
	%35 = alloca %Type_Info.Struct, align 8
	%36 = alloca %fmt-4.Fmt_Info, align 8
	%37 = alloca %fmt-4.Fmt_Info, align 8
	%38 = alloca %..string, align 8
	%39 = alloca i64, align 8
	%40 = alloca i64, align 8
	%41 = alloca i64, align 8
	%42 = alloca %Type_Info.Union, align 8
	%43 = alloca {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, align 8
	%44 = alloca i64, align 8
	%45 = alloca %..string, align 8
	%46 = alloca i64, align 8
	%47 = alloca i64, align 8
	%48 = alloca i64, align 8
	%49 = alloca %..string, align 8
	%50 = alloca i64, align 8
	%51 = alloca i64, align 8
	%52 = alloca i64, align 8
	%53 = alloca %Type_Info*, align 8
	%54 = alloca %Type_Info.Struct*, align 8
	%55 = alloca {%Type_Info.Struct*, i1}, align 8
	%56 = alloca i64, align 8
	%57 = alloca i64, align 8
	%58 = alloca i64, align 8
	%59 = alloca i64, align 8
	%60 = alloca i64, align 8
	%61 = alloca %Type_Info.Raw_Union, align 8
	%62 = alloca %..string, align 8
	%63 = alloca i64, align 8
	%64 = alloca i64, align 8
	%65 = alloca i64, align 8
	%66 = alloca %Type_Info.Enum, align 8
	%67 = alloca %..string, align 8
	%68 = alloca i64, align 8
	%69 = alloca i64, align 8
	%70 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store %Type_Info* zeroinitializer, %Type_Info** %1
		store %Type_Info* %ti, %Type_Info** %1
	; IfStmt
	%71 = load %Type_Info*, %Type_Info** %1, align 8
	%72 = icmp eq %Type_Info* %71, zeroinitializer
	br i1 %72, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; TypeMatchStmt
	%73 = load %Type_Info*, %Type_Info** %1, align 8
	; get union's tag
	%74 = getelementptr inbounds %Type_Info, %Type_Info* %73, i64 0, i32 2 ; UnionTagPtr
	%75 = load i64, i64* %74, align 8
	%76 = bitcast %Type_Info* %73 to %..rawptr
	%77 = icmp eq i64 %75, 1
	br i1 %77, label %typematch.body-4, label %typematch.next-3

typematch.next-3:
	%78 = icmp eq i64 %75, 2
	br i1 %78, label %typematch.body-6, label %typematch.next-5

typematch.body-4:
	%79 = bitcast %..rawptr %76 to %Type_Info.Named*
	%80 = load %Type_Info.Named, %Type_Info.Named* %79, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %2
	store %Type_Info.Named %80, %Type_Info.Named* %2
	%81 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%82 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2, i64 0, i32 0
	%83 = load %..string, %..string* %82, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %81, %..string %83)
	br label %typematch.done-129

typematch.next-5:
	%84 = icmp eq i64 %75, 3
	br i1 %84, label %typematch.body-16, label %typematch.next-15

typematch.body-6:
	%85 = bitcast %..rawptr %76 to %Type_Info.Integer*
	%86 = load %Type_Info.Integer, %Type_Info.Integer* %85, align 8
	store %Type_Info.Integer zeroinitializer, %Type_Info.Integer* %3
	store %Type_Info.Integer %86, %Type_Info.Integer* %3
	; MatchStmt
	%87 = load %Type_Info*, %Type_Info** %1, align 8
	%88 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%89 = icmp eq %Type_Info* %87, %88
	%90 = icmp eq i1 true, %89
	br i1 %90, label %match.case.body-8, label %match.case.next-7

match.case.next-7:
	%91 = load %Type_Info*, %Type_Info** %1, align 8
	%92 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%93 = icmp eq %Type_Info* %91, %92
	%94 = icmp eq i1 true, %93
	br i1 %94, label %match.fall.body-10, label %match.case.next-9

match.case.body-8:
	%95 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %95, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$6b, i64 0, i32 0), i64 3})
	br label %match.done-14

match.case.next-9:
	%96 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; TernaryExpr
	; SelectorExpr
	%97 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %3, i64 0, i32 1
	%98 = load i1, i1* %97, align 1
	br i1 %98, label %if.then-11, label %if.else-12

match.fall.body-10:
	%99 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %99, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$6c, i64 0, i32 0), i64 4})
	br label %match.done-14

if.then-11:
	br label %if.done-13

if.else-12:
	br label %if.done-13

if.done-13:
	%100 = phi %..string [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$6d, i64 0, i32 0), i64 1}, %if.then-11 ], [ {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$6e, i64 0, i32 0), i64 1}, %if.else-12 ]
	call void @.fmt-4.write_string({i8*, i64, i64}* %96, %..string %100)
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %4
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %5
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %5
	%101 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%102 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, i64 0, i32 3
	store {i8*, i64, i64}* %101, {i8*, i64, i64}** %102
	%103 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, align 8
	store %fmt-4.Fmt_Info %103, %fmt-4.Fmt_Info* %4
	%104 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %4, i64 0
	; SelectorExpr
	%105 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %3, i64 0, i32 0
	%106 = load i64, i64* %105, align 8
	%107 = mul i64 8, %106
	; cast - cast
	%108 = bitcast i64 %107 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %104, i64 %108, i1 false, i64 64, i32 100)
	br label %match.done-14

match.done-14:
	br label %typematch.done-129

typematch.next-15:
	%109 = icmp eq i64 %75, 4
	br i1 %109, label %typematch.body-23, label %typematch.next-22

typematch.body-16:
	%110 = bitcast %..rawptr %76 to %Type_Info.Float*
	%111 = load %Type_Info.Float, %Type_Info.Float* %110, align 8
	store %Type_Info.Float zeroinitializer, %Type_Info.Float* %6
	store %Type_Info.Float %111, %Type_Info.Float* %6
	; MatchStmt
	; SelectorExpr
	%112 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %6, i64 0, i32 0
	%113 = load i64, i64* %112, align 8
	%114 = icmp eq i64 %113, 4
	br i1 %114, label %match.case.body-18, label %match.case.next-17

match.case.next-17:
	%115 = icmp eq i64 %113, 8
	br i1 %115, label %match.fall.body-20, label %match.case.next-19

match.case.body-18:
	%116 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %116, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$6f, i64 0, i32 0), i64 3})
	br label %match.done-21

match.case.next-19:
	br label %match.done-21

match.fall.body-20:
	%117 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %117, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$70, i64 0, i32 0), i64 3})
	br label %match.done-21

match.done-21:
	br label %typematch.done-129

typematch.next-22:
	%118 = icmp eq i64 %75, 5
	br i1 %118, label %typematch.body-30, label %typematch.next-29

typematch.body-23:
	%119 = bitcast %..rawptr %76 to %Type_Info.Complex*
	%120 = load %Type_Info.Complex, %Type_Info.Complex* %119, align 8
	store %Type_Info.Complex zeroinitializer, %Type_Info.Complex* %7
	store %Type_Info.Complex %120, %Type_Info.Complex* %7
	; MatchStmt
	; SelectorExpr
	%121 = getelementptr inbounds %Type_Info.Complex, %Type_Info.Complex* %7, i64 0, i32 0
	%122 = load i64, i64* %121, align 8
	%123 = icmp eq i64 %122, 8
	br i1 %123, label %match.case.body-25, label %match.case.next-24

match.case.next-24:
	%124 = icmp eq i64 %122, 16
	br i1 %124, label %match.fall.body-27, label %match.case.next-26

match.case.body-25:
	%125 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %125, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$71, i64 0, i32 0), i64 9})
	br label %match.done-28

match.case.next-26:
	br label %match.done-28

match.fall.body-27:
	%126 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %126, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$72, i64 0, i32 0), i64 10})
	br label %match.done-28

match.done-28:
	br label %typematch.done-129

typematch.next-29:
	%127 = icmp eq i64 %75, 6
	br i1 %127, label %typematch.body-37, label %typematch.next-36

typematch.body-30:
	%128 = bitcast %..rawptr %76 to %Type_Info.Quaternion*
	%129 = load %Type_Info.Quaternion, %Type_Info.Quaternion* %128, align 8
	store %Type_Info.Quaternion zeroinitializer, %Type_Info.Quaternion* %8
	store %Type_Info.Quaternion %129, %Type_Info.Quaternion* %8
	; MatchStmt
	; SelectorExpr
	%130 = getelementptr inbounds %Type_Info.Quaternion, %Type_Info.Quaternion* %8, i64 0, i32 0
	%131 = load i64, i64* %130, align 8
	%132 = icmp eq i64 %131, 16
	br i1 %132, label %match.case.body-32, label %match.case.next-31

match.case.next-31:
	%133 = icmp eq i64 %131, 32
	br i1 %133, label %match.fall.body-34, label %match.case.next-33

match.case.body-32:
	%134 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %134, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$73, i64 0, i32 0), i64 13})
	br label %match.done-35

match.case.next-33:
	br label %match.done-35

match.fall.body-34:
	%135 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %135, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$74, i64 0, i32 0), i64 10})
	br label %match.done-35

match.done-35:
	br label %typematch.done-129

typematch.next-36:
	%136 = icmp eq i64 %75, 7
	br i1 %136, label %typematch.body-39, label %typematch.next-38

typematch.body-37:
	%137 = bitcast %..rawptr %76 to %Type_Info.String*
	%138 = load %Type_Info.String, %Type_Info.String* %137, align 1
	store %Type_Info.String zeroinitializer, %Type_Info.String* %9
	store %Type_Info.String %138, %Type_Info.String* %9
	%139 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %139, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$75, i64 0, i32 0), i64 6})
	br label %typematch.done-129

typematch.next-38:
	%140 = icmp eq i64 %75, 9
	br i1 %140, label %typematch.body-41, label %typematch.next-40

typematch.body-39:
	%141 = bitcast %..rawptr %76 to %Type_Info.Boolean*
	%142 = load %Type_Info.Boolean, %Type_Info.Boolean* %141, align 1
	store %Type_Info.Boolean zeroinitializer, %Type_Info.Boolean* %10
	store %Type_Info.Boolean %142, %Type_Info.Boolean* %10
	%143 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %143, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$76, i64 0, i32 0), i64 4})
	br label %typematch.done-129

typematch.next-40:
	%144 = icmp eq i64 %75, 10
	br i1 %144, label %typematch.body-46, label %typematch.next-45

typematch.body-41:
	%145 = bitcast %..rawptr %76 to %Type_Info.Pointer*
	%146 = load %Type_Info.Pointer, %Type_Info.Pointer* %145, align 8
	store %Type_Info.Pointer zeroinitializer, %Type_Info.Pointer* %11
	store %Type_Info.Pointer %146, %Type_Info.Pointer* %11
	; IfStmt
	; SelectorExpr
	%147 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %11, i64 0, i32 0
	%148 = load %Type_Info*, %Type_Info** %147, align 8
	%149 = icmp eq %Type_Info* %148, zeroinitializer
	br i1 %149, label %if.then-42, label %if.else-43

if.then-42:
	%150 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %150, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$77, i64 0, i32 0), i64 6})
	br label %if.done-44

if.else-43:
	%151 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %151, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$78, i64 0, i32 0), i64 1})
	%152 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%153 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %11, i64 0, i32 0
	%154 = load %Type_Info*, %Type_Info** %153, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %152, %Type_Info* %154)
	br label %if.done-44

if.done-44:
	br label %typematch.done-129

typematch.next-45:
	%155 = icmp eq i64 %75, 15
	br i1 %155, label %typematch.body-60, label %typematch.next-59

typematch.body-46:
	%156 = bitcast %..rawptr %76 to %Type_Info.Procedure*
	%157 = load %Type_Info.Procedure, %Type_Info.Procedure* %156, align 8
	store %Type_Info.Procedure zeroinitializer, %Type_Info.Procedure* %12
	store %Type_Info.Procedure %157, %Type_Info.Procedure* %12
	%158 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %158, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$79, i64 0, i32 0), i64 4})
	; IfStmt
	; SelectorExpr
	%159 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %12, i64 0, i32 0
	%160 = load %Type_Info*, %Type_Info** %159, align 8
	%161 = icmp eq %Type_Info* %160, zeroinitializer
	br i1 %161, label %if.then-47, label %if.else-48

if.then-47:
	%162 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %162, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$7a, i64 0, i32 0), i64 2})
	br label %if.done-56

if.else-48:
	; t
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %13
		; SelectorExpr
	%163 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %12, i64 0, i32 0
	%164 = load %Type_Info*, %Type_Info** %163, align 8
	; cast - union_cast
	store {%Type_Info.Tuple*, i1} zeroinitializer, {%Type_Info.Tuple*, i1}* %14
	%165 = getelementptr inbounds %Type_Info, %Type_Info* %164, i64 0, i32 2 ; UnionTagPtr
	%166 = load i64, i64* %165, align 8
	%167 = icmp eq i64 %166, 15
	br i1 %167, label %union_cast.ok-49, label %union_cast.end-50

union_cast.ok-49:
	%168 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 0
	%169 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 1
	%170 = bitcast %Type_Info* %164 to %Type_Info.Tuple*
	store %Type_Info.Tuple* %170, %Type_Info.Tuple** %168
	store i1 true, i1* %169
	br label %union_cast.end-50

union_cast.end-50:
	%171 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 1
	%172 = load i1, i1* %171, align 1
	%173 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%174 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	call void @.__union_cast_check(i1 %172, %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$7b, i64 0, i32 0), i64 37}, i64 137, i64 9, %Type_Info* %173, %Type_Info* %174)
	%175 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %14, i64 0, i32 0
	%176 = load %Type_Info.Tuple*, %Type_Info.Tuple** %175, align 8
	store %Type_Info.Tuple* %176, %Type_Info.Tuple** %13
	%177 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %177, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$7c, i64 0, i32 0), i64 1})
	; RangeStmt
	; type
	store %Type_Info* zeroinitializer, %Type_Info** %15
		; i
	store i64 zeroinitializer, i64* %16
		; SelectorExpr
	%178 = load %Type_Info.Tuple*, %Type_Info.Tuple** %13, align 8
	%179 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %178, i64 0
	%180 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %179, i64 0, i32 0
	%181 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %180, i64 0, i32 0
	%182 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %181, align 8
	store i64 zeroinitializer, i64* %17
	%183 = extractvalue {%Type_Info**, i64, i64} %182, 1
	store i64 %183, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-51

for.index.loop-51:
	%184 = load i64, i64* %18, align 8
	%185 = add i64 %184, 1
	store i64 %185, i64* %18
	%186 = load i64, i64* %17, align 8
	%187 = icmp slt i64 %185, %186
	br i1 %187, label %for.index.body-52, label %for.index.done-55

for.index.body-52:
	%188 = load i64, i64* %18, align 8
	%189 = extractvalue {%Type_Info**, i64, i64} %182, 0
	%190 = getelementptr inbounds %Type_Info*, %Type_Info** %189, i64 %188
	%191 = load %Type_Info*, %Type_Info** %190, align 8
	store %Type_Info* %191, %Type_Info** %15
	store i64 %188, i64* %16
	; IfStmt
	%192 = load i64, i64* %16, align 8
	%193 = icmp sgt i64 %192, 0
	br i1 %193, label %if.then-53, label %if.done-54

if.then-53:
	%194 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %194, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$7d, i64 0, i32 0), i64 2})
	br label %if.done-54

if.done-54:
	%195 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%196 = load %Type_Info*, %Type_Info** %15, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %195, %Type_Info* %196)
	br label %for.index.loop-51

for.index.done-55:
	%197 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %197, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$7e, i64 0, i32 0), i64 1})
	br label %if.done-56

if.done-56:
	; IfStmt
	; SelectorExpr
	%198 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %12, i64 0, i32 1
	%199 = load %Type_Info*, %Type_Info** %198, align 8
	%200 = icmp ne %Type_Info* %199, zeroinitializer
	br i1 %200, label %if.then-57, label %if.done-58

if.then-57:
	%201 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %201, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$7f, i64 0, i32 0), i64 4})
	%202 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%203 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %12, i64 0, i32 1
	%204 = load %Type_Info*, %Type_Info** %203, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %202, %Type_Info* %204)
	br label %if.done-58

if.done-58:
	br label %typematch.done-129

typematch.next-59:
	%205 = icmp eq i64 %75, 11
	br i1 %205, label %typematch.body-73, label %typematch.next-72

typematch.body-60:
	%206 = bitcast %..rawptr %76 to %Type_Info.Tuple*
	%207 = load %Type_Info.Tuple, %Type_Info.Tuple* %206, align 8
	store %Type_Info.Tuple zeroinitializer, %Type_Info.Tuple* %19
	store %Type_Info.Tuple %207, %Type_Info.Tuple* %19
	; count
	store i64 zeroinitializer, i64* %20
		; SelectorExpr
	%208 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %19, i64 0, i32 0
	%209 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %208, i64 0, i32 1
	%210 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %209, align 8
	%211 = extractvalue {%..string*, i64, i64} %210, 1
	store i64 %211, i64* %20
	; IfStmt
	%212 = load i64, i64* %20, align 8
	%213 = icmp ne i64 %212, 1
	br i1 %213, label %if.then-61, label %if.done-62

if.then-61:
	%214 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %214, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$80, i64 0, i32 0), i64 1})
	br label %if.done-62

if.done-62:
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %21
		; i
	store i64 zeroinitializer, i64* %22
		; SelectorExpr
	%215 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %19, i64 0, i32 0
	%216 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %215, i64 0, i32 1
	%217 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %216, align 8
	store i64 zeroinitializer, i64* %23
	%218 = extractvalue {%..string*, i64, i64} %217, 1
	store i64 %218, i64* %23
	store i64 zeroinitializer, i64* %24
	store i64 -1, i64* %24
	br label %for.index.loop-63

for.index.loop-63:
	%219 = load i64, i64* %24, align 8
	%220 = add i64 %219, 1
	store i64 %220, i64* %24
	%221 = load i64, i64* %23, align 8
	%222 = icmp slt i64 %220, %221
	br i1 %222, label %for.index.body-64, label %for.index.done-69

for.index.body-64:
	%223 = load i64, i64* %24, align 8
	%224 = extractvalue {%..string*, i64, i64} %217, 0
	%225 = getelementptr inbounds %..string, %..string* %224, i64 %223
	%226 = load %..string, %..string* %225, align 8
	store %..string %226, %..string* %21
	store i64 %223, i64* %22
	; IfStmt
	%227 = load i64, i64* %22, align 8
	%228 = icmp sgt i64 %227, 0
	br i1 %228, label %if.then-65, label %if.done-66

if.then-65:
	%229 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %229, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$81, i64 0, i32 0), i64 2})
	br label %if.done-66

if.done-66:
	; type
	store %Type_Info* zeroinitializer, %Type_Info** %25
		; IndexExpr
	; SelectorExpr
	%230 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %19, i64 0, i32 0
	%231 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %230, i64 0, i32 0
	%232 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %231, align 8
	%233 = extractvalue {%Type_Info**, i64, i64} %232, 0
	%234 = extractvalue {%Type_Info**, i64, i64} %232, 1
	%235 = load i64, i64* %22, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$82, i64 0, i32 0), i64 37}, i64 155, i64 23, i64 %235, i64 %234)
	%236 = getelementptr inbounds %Type_Info*, %Type_Info** %233, i64 %235
	%237 = load %Type_Info*, %Type_Info** %236, align 8
	store %Type_Info* %237, %Type_Info** %25
	; IfStmt
	%238 = load %..string, %..string* %21, align 8
	%239 = extractvalue %..string %238, 1
	%240 = icmp sgt i64 %239, 0
	br i1 %240, label %if.then-67, label %if.done-68

if.then-67:
	%241 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%242 = load %..string, %..string* %21, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %241, %..string %242)
	%243 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %243, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$83, i64 0, i32 0), i64 2})
	br label %if.done-68

if.done-68:
	%244 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%245 = load %Type_Info*, %Type_Info** %25, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %244, %Type_Info* %245)
	br label %for.index.loop-63

for.index.done-69:
	; IfStmt
	%246 = load i64, i64* %20, align 8
	%247 = icmp ne i64 %246, 1
	br i1 %247, label %if.then-70, label %if.done-71

if.then-70:
	%248 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %248, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$84, i64 0, i32 0), i64 1})
	br label %if.done-71

if.done-71:
	br label %typematch.done-129

typematch.next-72:
	%249 = icmp eq i64 %75, 12
	br i1 %249, label %typematch.body-75, label %typematch.next-74

typematch.body-73:
	%250 = bitcast %..rawptr %76 to %Type_Info.Array*
	%251 = load %Type_Info.Array, %Type_Info.Array* %250, align 8
	store %Type_Info.Array zeroinitializer, %Type_Info.Array* %26
	store %Type_Info.Array %251, %Type_Info.Array* %26
	%252 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %252, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$85, i64 0, i32 0), i64 1})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %27
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %28
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %28
	%253 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%254 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 3
	store {i8*, i64, i64}* %253, {i8*, i64, i64}** %254
	%255 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, align 8
	store %fmt-4.Fmt_Info %255, %fmt-4.Fmt_Info* %27
	%256 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	; SelectorExpr
	%257 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %26, i64 0, i32 2
	%258 = load i64, i64* %257, align 8
	; cast - cast
	%259 = bitcast i64 %258 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %256, i64 %259, i1 false, i64 64, i32 100)
	%260 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %260, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$86, i64 0, i32 0), i64 1})
	%261 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%262 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %26, i64 0, i32 0
	%263 = load %Type_Info*, %Type_Info** %262, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %261, %Type_Info* %263)
	br label %typematch.done-129

typematch.next-74:
	%264 = icmp eq i64 %75, 13
	br i1 %264, label %typematch.body-77, label %typematch.next-76

typematch.body-75:
	%265 = bitcast %..rawptr %76 to %Type_Info.Dynamic_Array*
	%266 = load %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %265, align 8
	store %Type_Info.Dynamic_Array zeroinitializer, %Type_Info.Dynamic_Array* %29
	store %Type_Info.Dynamic_Array %266, %Type_Info.Dynamic_Array* %29
	%267 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %267, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$87, i64 0, i32 0), i64 4})
	%268 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%269 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %29, i64 0, i32 0
	%270 = load %Type_Info*, %Type_Info** %269, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %268, %Type_Info* %270)
	br label %typematch.done-129

typematch.next-76:
	%271 = icmp eq i64 %75, 14
	br i1 %271, label %typematch.body-79, label %typematch.next-78

typematch.body-77:
	%272 = bitcast %..rawptr %76 to %Type_Info.Slice*
	%273 = load %Type_Info.Slice, %Type_Info.Slice* %272, align 8
	store %Type_Info.Slice zeroinitializer, %Type_Info.Slice* %30
	store %Type_Info.Slice %273, %Type_Info.Slice* %30
	%274 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %274, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$88, i64 0, i32 0), i64 1})
	%275 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %275, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$89, i64 0, i32 0), i64 1})
	%276 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%277 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %30, i64 0, i32 0
	%278 = load %Type_Info*, %Type_Info** %277, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %276, %Type_Info* %278)
	br label %typematch.done-129

typematch.next-78:
	%279 = icmp eq i64 %75, 20
	br i1 %279, label %typematch.body-81, label %typematch.next-80

typematch.body-79:
	%280 = bitcast %..rawptr %76 to %Type_Info.Vector*
	%281 = load %Type_Info.Vector, %Type_Info.Vector* %280, align 8
	store %Type_Info.Vector zeroinitializer, %Type_Info.Vector* %31
	store %Type_Info.Vector %281, %Type_Info.Vector* %31
	%282 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %282, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$8a, i64 0, i32 0), i64 8})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %32
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %33
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %33
	%283 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%284 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0, i32 3
	store {i8*, i64, i64}* %283, {i8*, i64, i64}** %284
	%285 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, align 8
	store %fmt-4.Fmt_Info %285, %fmt-4.Fmt_Info* %32
	%286 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %32, i64 0
	; SelectorExpr
	%287 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %31, i64 0, i32 2
	%288 = load i64, i64* %287, align 8
	; cast - cast
	%289 = bitcast i64 %288 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %286, i64 %289, i1 false, i64 64, i32 100)
	%290 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %290, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$8b, i64 0, i32 0), i64 1})
	%291 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%292 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %31, i64 0, i32 0
	%293 = load %Type_Info*, %Type_Info** %292, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %291, %Type_Info* %293)
	br label %typematch.done-129

typematch.next-80:
	%294 = icmp eq i64 %75, 16
	br i1 %294, label %typematch.body-83, label %typematch.next-82

typematch.body-81:
	%295 = bitcast %..rawptr %76 to %Type_Info.Map*
	%296 = load %Type_Info.Map, %Type_Info.Map* %295, align 8
	store %Type_Info.Map zeroinitializer, %Type_Info.Map* %34
	store %Type_Info.Map %296, %Type_Info.Map* %34
	%297 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %297, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$8c, i64 0, i32 0), i64 4})
	%298 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%299 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %34, i64 0, i32 0
	%300 = load %Type_Info*, %Type_Info** %299, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %298, %Type_Info* %300)
	%301 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %301, i8 93)
	%302 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%303 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %34, i64 0, i32 1
	%304 = load %Type_Info*, %Type_Info** %303, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %302, %Type_Info* %304)
	br label %typematch.done-129

typematch.next-82:
	%305 = icmp eq i64 %75, 18
	br i1 %305, label %typematch.body-96, label %typematch.next-95

typematch.body-83:
	%306 = bitcast %..rawptr %76 to %Type_Info.Struct*
	%307 = load %Type_Info.Struct, %Type_Info.Struct* %306, align 8
	store %Type_Info.Struct zeroinitializer, %Type_Info.Struct* %35
	store %Type_Info.Struct %307, %Type_Info.Struct* %35
	%308 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %308, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$8d, i64 0, i32 0), i64 7})
	; IfStmt
	; SelectorExpr
	%309 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %35, i64 0, i32 0
	%310 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %309, i64 0, i32 5
	%311 = load i1, i1* %310, align 1
	br i1 %311, label %if.then-84, label %if.done-85

if.then-84:
	%312 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %312, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$8e, i64 0, i32 0), i64 8})
	br label %if.done-85

if.done-85:
	; IfStmt
	; SelectorExpr
	%313 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %35, i64 0, i32 0
	%314 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %313, i64 0, i32 6
	%315 = load i1, i1* %314, align 1
	br i1 %315, label %if.then-86, label %if.done-87

if.then-86:
	%316 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %316, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$8f, i64 0, i32 0), i64 9})
	br label %if.done-87

if.done-87:
	; IfStmt
	; SelectorExpr
	%317 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %35, i64 0, i32 0
	%318 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %317, i64 0, i32 7
	%319 = load i1, i1* %318, align 1
	br i1 %319, label %if.then-88, label %if.done-89

if.then-88:
	%320 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %320, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$90, i64 0, i32 0), i64 7})
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %36
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %37
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %37
	%321 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%322 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0, i32 3
	store {i8*, i64, i64}* %321, {i8*, i64, i64}** %322
	%323 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, align 8
	store %fmt-4.Fmt_Info %323, %fmt-4.Fmt_Info* %36
	%324 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %36, i64 0
	; SelectorExpr
	%325 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %35, i64 0, i32 0
	%326 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %325, i64 0, i32 4
	%327 = load i64, i64* %326, align 8
	; cast - cast
	%328 = bitcast i64 %327 to i64
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %324, i64 %328, i1 false, i64 64, i32 100)
	%329 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %329, i8 32)
	br label %if.done-89

if.done-89:
	%330 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %330, i8 123)
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %38
		; i
	store i64 zeroinitializer, i64* %39
		; SelectorExpr
	%331 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %35, i64 0, i32 0
	%332 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %331, i64 0, i32 1
	%333 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %332, align 8
	store i64 zeroinitializer, i64* %40
	%334 = extractvalue {%..string*, i64, i64} %333, 1
	store i64 %334, i64* %40
	store i64 zeroinitializer, i64* %41
	store i64 -1, i64* %41
	br label %for.index.loop-90

for.index.loop-90:
	%335 = load i64, i64* %41, align 8
	%336 = add i64 %335, 1
	store i64 %336, i64* %41
	%337 = load i64, i64* %40, align 8
	%338 = icmp slt i64 %336, %337
	br i1 %338, label %for.index.body-91, label %for.index.done-94

for.index.body-91:
	%339 = load i64, i64* %41, align 8
	%340 = extractvalue {%..string*, i64, i64} %333, 0
	%341 = getelementptr inbounds %..string, %..string* %340, i64 %339
	%342 = load %..string, %..string* %341, align 8
	store %..string %342, %..string* %38
	store i64 %339, i64* %39
	; IfStmt
	%343 = load i64, i64* %39, align 8
	%344 = icmp sgt i64 %343, 0
	br i1 %344, label %if.then-92, label %if.done-93

if.then-92:
	%345 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %345, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$91, i64 0, i32 0), i64 2})
	br label %if.done-93

if.done-93:
	%346 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%347 = load %..string, %..string* %38, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %346, %..string %347)
	%348 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %348, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$92, i64 0, i32 0), i64 2})
	%349 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%350 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %35, i64 0, i32 0
	%351 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %350, i64 0, i32 0
	%352 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %351, align 8
	%353 = extractvalue {%Type_Info**, i64, i64} %352, 0
	%354 = extractvalue {%Type_Info**, i64, i64} %352, 1
	%355 = load i64, i64* %39, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$93, i64 0, i32 0), i64 37}, i64 208, i64 31, i64 %355, i64 %354)
	%356 = getelementptr inbounds %Type_Info*, %Type_Info** %353, i64 %355
	%357 = load %Type_Info*, %Type_Info** %356, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %349, %Type_Info* %357)
	br label %for.index.loop-90

for.index.done-94:
	%358 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %358, i8 125)
	br label %typematch.done-129

typematch.next-95:
	%359 = icmp eq i64 %75, 17
	br i1 %359, label %typematch.body-116, label %typematch.next-115

typematch.body-96:
	%360 = bitcast %..rawptr %76 to %Type_Info.Union*
	%361 = load %Type_Info.Union, %Type_Info.Union* %360, align 8
	store %Type_Info.Union zeroinitializer, %Type_Info.Union* %42
	store %Type_Info.Union %361, %Type_Info.Union* %42
	%362 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %362, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$94, i64 0, i32 0), i64 7})
	; cf
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} zeroinitializer, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43
		; SelectorExpr
	%363 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %42, i64 0, i32 0
	%364 = load {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %363, align 8
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} %364, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43
	; total_count
	store i64 zeroinitializer, i64* %44
		store i64 0, i64* %44
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %45
		; i
	store i64 zeroinitializer, i64* %46
		; SelectorExpr
	%365 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 1
	%366 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %365, align 8
	store i64 zeroinitializer, i64* %47
	%367 = extractvalue {%..string*, i64, i64} %366, 1
	store i64 %367, i64* %47
	store i64 zeroinitializer, i64* %48
	store i64 -1, i64* %48
	br label %for.index.loop-97

for.index.loop-97:
	%368 = load i64, i64* %48, align 8
	%369 = add i64 %368, 1
	store i64 %369, i64* %48
	%370 = load i64, i64* %47, align 8
	%371 = icmp slt i64 %369, %370
	br i1 %371, label %for.index.body-98, label %for.index.done-101

for.index.body-98:
	%372 = load i64, i64* %48, align 8
	%373 = extractvalue {%..string*, i64, i64} %366, 0
	%374 = getelementptr inbounds %..string, %..string* %373, i64 %372
	%375 = load %..string, %..string* %374, align 8
	store %..string %375, %..string* %45
	store i64 %372, i64* %46
	; IfStmt
	%376 = load i64, i64* %46, align 8
	%377 = icmp sgt i64 %376, 0
	br i1 %377, label %if.then-99, label %if.done-100

if.then-99:
	%378 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %378, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$95, i64 0, i32 0), i64 2})
	br label %if.done-100

if.done-100:
	%379 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%380 = load %..string, %..string* %45, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %379, %..string %380)
	%381 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %381, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$96, i64 0, i32 0), i64 2})
	%382 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%383 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 0
	%384 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %383, align 8
	%385 = extractvalue {%Type_Info**, i64, i64} %384, 0
	%386 = extractvalue {%Type_Info**, i64, i64} %384, 1
	%387 = load i64, i64* %46, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$97, i64 0, i32 0), i64 37}, i64 222, i64 29, i64 %387, i64 %386)
	%388 = getelementptr inbounds %Type_Info*, %Type_Info** %385, i64 %387
	%389 = load %Type_Info*, %Type_Info** %388, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %382, %Type_Info* %389)
	%390 = load i64, i64* %44, align 8
	%391 = add i64 %390, 1
	store i64 %391, i64* %44
	br label %for.index.loop-97

for.index.done-101:
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %49
		; i
	store i64 zeroinitializer, i64* %50
		; SelectorExpr
	%392 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %42, i64 0, i32 1
	%393 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %392, align 8
	store i64 zeroinitializer, i64* %51
	%394 = extractvalue {%..string*, i64, i64} %393, 1
	store i64 %394, i64* %51
	store i64 zeroinitializer, i64* %52
	store i64 -1, i64* %52
	br label %for.index.loop-102

for.index.loop-102:
	%395 = load i64, i64* %52, align 8
	%396 = add i64 %395, 1
	store i64 %396, i64* %52
	%397 = load i64, i64* %51, align 8
	%398 = icmp slt i64 %396, %397
	br i1 %398, label %for.index.body-103, label %for.index.done-114

for.index.body-103:
	%399 = load i64, i64* %52, align 8
	%400 = extractvalue {%..string*, i64, i64} %393, 0
	%401 = getelementptr inbounds %..string, %..string* %400, i64 %399
	%402 = load %..string, %..string* %401, align 8
	store %..string %402, %..string* %49
	store i64 %399, i64* %50
	; IfStmt
	%403 = load i64, i64* %44, align 8
	%404 = icmp sgt i64 %403, 0
	br i1 %404, label %if.then-105, label %cmp.or-104

cmp.or-104:
	%405 = load i64, i64* %50, align 8
	%406 = icmp sgt i64 %405, 0
	br i1 %406, label %if.then-105, label %if.done-106

if.then-105:
	%407 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %407, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$98, i64 0, i32 0), i64 2})
	br label %if.done-106

if.done-106:
	%408 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%409 = load %..string, %..string* %49, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %408, %..string %409)
	%410 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %410, i8 123)
	; DeferStmt
	; variant_type
	store %Type_Info* zeroinitializer, %Type_Info** %53
		; IndexExpr
	; SelectorExpr
	%411 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %42, i64 0, i32 2
	%412 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %411, align 8
	%413 = extractvalue {%Type_Info**, i64, i64} %412, 0
	%414 = extractvalue {%Type_Info**, i64, i64} %412, 1
	%415 = load i64, i64* %50, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$99, i64 0, i32 0), i64 37}, i64 233, i64 54, i64 %415, i64 %414)
	%416 = getelementptr inbounds %Type_Info*, %Type_Info** %413, i64 %415
	%417 = load %Type_Info*, %Type_Info** %416, align 8
	%418 = call %Type_Info* @.type_info_base(%Type_Info* %417)
	store %Type_Info* %418, %Type_Info** %53
	; variant
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %54
		%419 = load %Type_Info*, %Type_Info** %53, align 8
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %55
	%420 = getelementptr inbounds %Type_Info, %Type_Info* %419, i64 0, i32 2 ; UnionTagPtr
	%421 = load i64, i64* %420, align 8
	%422 = icmp eq i64 %421, 16
	br i1 %422, label %union_cast.ok-107, label %union_cast.end-108

union_cast.ok-107:
	%423 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 0
	%424 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 1
	%425 = bitcast %Type_Info* %419 to %Type_Info.Struct*
	store %Type_Info.Struct* %425, %Type_Info.Struct** %423
	store i1 true, i1* %424
	br label %union_cast.end-108

union_cast.end-108:
	%426 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 1
	%427 = load i1, i1* %426, align 1
	%428 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%429 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	call void @.__union_cast_check(i1 %427, %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$9a, i64 0, i32 0), i64 37}, i64 234, i64 15, %Type_Info* %428, %Type_Info* %429)
	%430 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %55, i64 0, i32 0
	%431 = load %Type_Info.Struct*, %Type_Info.Struct** %430, align 8
	store %Type_Info.Struct* %431, %Type_Info.Struct** %54
	; vc
	store i64 zeroinitializer, i64* %56
		; SelectorExpr
	%432 = load %Type_Info.Struct*, %Type_Info.Struct** %54, align 8
	%433 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %432, i64 0
	%434 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %433, i64 0, i32 0
	%435 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %434, i64 0, i32 1
	%436 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %435, align 8
	%437 = extractvalue {%..string*, i64, i64} %436, 1
	; SelectorExpr
	%438 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 1
	%439 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %438, align 8
	%440 = extractvalue {%..string*, i64, i64} %439, 1
	%441 = sub i64 %437, %440
	store i64 %441, i64* %56
	; RangeStmt
	; j
	store i64 zeroinitializer, i64* %57
		store i64 zeroinitializer, i64* %58
	store i64 0, i64* %58
	store i64 zeroinitializer, i64* %59
	store i64 0, i64* %59
	br label %for.interval.loop-109

for.interval.loop-109:
	%442 = load i64, i64* %56, align 8
	%443 = load i64, i64* %58, align 8
	%444 = icmp slt i64 %443, %442
	br i1 %444, label %for.interval.body-110, label %for.interval.done-113

for.interval.body-110:
	%445 = load i64, i64* %58, align 8
	%446 = load i64, i64* %59, align 8
	%447 = load i64, i64* %58, align 8
	%448 = add i64 %447, 1
	store i64 %448, i64* %58
	%449 = load i64, i64* %59, align 8
	%450 = add i64 %449, 1
	store i64 %450, i64* %59
	store i64 %445, i64* %57
	; IfStmt
	%451 = load i64, i64* %57, align 8
	%452 = icmp sgt i64 %451, 0
	br i1 %452, label %if.then-111, label %if.done-112

if.then-111:
	%453 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %453, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$9b, i64 0, i32 0), i64 2})
	br label %if.done-112

if.done-112:
	; index
	store i64 zeroinitializer, i64* %60
		%454 = load i64, i64* %57, align 8
	; SelectorExpr
	%455 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %43, i64 0, i32 1
	%456 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %455, align 8
	%457 = extractvalue {%..string*, i64, i64} %456, 1
	%458 = add i64 %454, %457
	store i64 %458, i64* %60
	%459 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%460 = load %Type_Info.Struct*, %Type_Info.Struct** %54, align 8
	%461 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %460, i64 0
	%462 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %461, i64 0, i32 0
	%463 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %462, i64 0, i32 1
	%464 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %463, align 8
	%465 = extractvalue {%..string*, i64, i64} %464, 0
	%466 = extractvalue {%..string*, i64, i64} %464, 1
	%467 = load i64, i64* %60, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$9c, i64 0, i32 0), i64 37}, i64 242, i64 37, i64 %467, i64 %466)
	%468 = getelementptr inbounds %..string, %..string* %465, i64 %467
	%469 = load %..string, %..string* %468, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %459, %..string %469)
	%470 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %470, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$9d, i64 0, i32 0), i64 2})
	%471 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%472 = load %Type_Info.Struct*, %Type_Info.Struct** %54, align 8
	%473 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %472, i64 0
	%474 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %473, i64 0, i32 0
	%475 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %474, i64 0, i32 0
	%476 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %475, align 8
	%477 = extractvalue {%Type_Info**, i64, i64} %476, 0
	%478 = extractvalue {%Type_Info**, i64, i64} %476, 1
	%479 = load i64, i64* %60, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$9e, i64 0, i32 0), i64 37}, i64 244, i64 35, i64 %479, i64 %478)
	%480 = getelementptr inbounds %Type_Info*, %Type_Info** %477, i64 %479
	%481 = load %Type_Info*, %Type_Info** %480, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %471, %Type_Info* %481)
	br label %for.interval.loop-109

for.interval.done-113:
	; defer
	%482 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %482, i8 125)
	br label %for.index.loop-102

for.index.done-114:
	%483 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %483, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$9f, i64 0, i32 0), i64 1})
	br label %typematch.done-129

typematch.next-115:
	%484 = icmp eq i64 %75, 19
	br i1 %484, label %typematch.body-123, label %typematch.next-122

typematch.body-116:
	%485 = bitcast %..rawptr %76 to %Type_Info.Raw_Union*
	%486 = load %Type_Info.Raw_Union, %Type_Info.Raw_Union* %485, align 8
	store %Type_Info.Raw_Union zeroinitializer, %Type_Info.Raw_Union* %61
	store %Type_Info.Raw_Union %486, %Type_Info.Raw_Union* %61
	%487 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %487, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$a0, i64 0, i32 0), i64 11})
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %62
		; i
	store i64 zeroinitializer, i64* %63
		; SelectorExpr
	%488 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %61, i64 0, i32 0
	%489 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %488, i64 0, i32 1
	%490 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %489, align 8
	store i64 zeroinitializer, i64* %64
	%491 = extractvalue {%..string*, i64, i64} %490, 1
	store i64 %491, i64* %64
	store i64 zeroinitializer, i64* %65
	store i64 -1, i64* %65
	br label %for.index.loop-117

for.index.loop-117:
	%492 = load i64, i64* %65, align 8
	%493 = add i64 %492, 1
	store i64 %493, i64* %65
	%494 = load i64, i64* %64, align 8
	%495 = icmp slt i64 %493, %494
	br i1 %495, label %for.index.body-118, label %for.index.done-121

for.index.body-118:
	%496 = load i64, i64* %65, align 8
	%497 = extractvalue {%..string*, i64, i64} %490, 0
	%498 = getelementptr inbounds %..string, %..string* %497, i64 %496
	%499 = load %..string, %..string* %498, align 8
	store %..string %499, %..string* %62
	store i64 %496, i64* %63
	; IfStmt
	%500 = load i64, i64* %63, align 8
	%501 = icmp sgt i64 %500, 0
	br i1 %501, label %if.then-119, label %if.done-120

if.then-119:
	%502 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %502, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a1, i64 0, i32 0), i64 2})
	br label %if.done-120

if.done-120:
	%503 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%504 = load %..string, %..string* %62, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %503, %..string %504)
	%505 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %505, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a2, i64 0, i32 0), i64 2})
	%506 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%507 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %61, i64 0, i32 0
	%508 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %507, i64 0, i32 0
	%509 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %508, align 8
	%510 = extractvalue {%Type_Info**, i64, i64} %509, 0
	%511 = extractvalue {%Type_Info**, i64, i64} %509, 1
	%512 = load i64, i64* %63, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$a3, i64 0, i32 0), i64 37}, i64 257, i64 31, i64 %512, i64 %511)
	%513 = getelementptr inbounds %Type_Info*, %Type_Info** %510, i64 %512
	%514 = load %Type_Info*, %Type_Info** %513, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %506, %Type_Info* %514)
	br label %for.index.loop-117

for.index.done-121:
	%515 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %515, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$a4, i64 0, i32 0), i64 1})
	br label %typematch.done-129

typematch.next-122:
	br label %typematch.done-129

typematch.body-123:
	%516 = bitcast %..rawptr %76 to %Type_Info.Enum*
	%517 = load %Type_Info.Enum, %Type_Info.Enum* %516, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %66
	store %Type_Info.Enum %517, %Type_Info.Enum* %66
	%518 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %518, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$a5, i64 0, i32 0), i64 5})
	%519 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SelectorExpr
	%520 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %66, i64 0, i32 0
	%521 = load %Type_Info*, %Type_Info** %520, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %519, %Type_Info* %521)
	%522 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %522, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a6, i64 0, i32 0), i64 2})
	; RangeStmt
	; name
	store %..string zeroinitializer, %..string* %67
		; i
	store i64 zeroinitializer, i64* %68
		; SelectorExpr
	%523 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %66, i64 0, i32 1
	%524 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %523, align 8
	store i64 zeroinitializer, i64* %69
	%525 = extractvalue {%..string*, i64, i64} %524, 1
	store i64 %525, i64* %69
	store i64 zeroinitializer, i64* %70
	store i64 -1, i64* %70
	br label %for.index.loop-124

for.index.loop-124:
	%526 = load i64, i64* %70, align 8
	%527 = add i64 %526, 1
	store i64 %527, i64* %70
	%528 = load i64, i64* %69, align 8
	%529 = icmp slt i64 %527, %528
	br i1 %529, label %for.index.body-125, label %for.index.done-128

for.index.body-125:
	%530 = load i64, i64* %70, align 8
	%531 = extractvalue {%..string*, i64, i64} %524, 0
	%532 = getelementptr inbounds %..string, %..string* %531, i64 %530
	%533 = load %..string, %..string* %532, align 8
	store %..string %533, %..string* %67
	store i64 %530, i64* %68
	; IfStmt
	%534 = load i64, i64* %68, align 8
	%535 = icmp sgt i64 %534, 0
	br i1 %535, label %if.then-126, label %if.done-127

if.then-126:
	%536 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %536, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$a7, i64 0, i32 0), i64 2})
	br label %if.done-127

if.done-127:
	%537 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%538 = load %..string, %..string* %67, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %537, %..string %538)
	br label %for.index.loop-124

for.index.done-128:
	%539 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %539, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$a8, i64 0, i32 0), i64 1})
	br label %typematch.done-129

typematch.done-129:
	ret void
}

define i64 @.fmt-4.bprint({i8*, i64, i64}* %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca %fmt-4.Fmt_Info, align 8
	%3 = alloca i1, align 1
	%4 = alloca %..any, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %2
		; AssignStmt
	; SelectorExpr
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0, i32 3
	%10 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	store {i8*, i64, i64}* %10, {i8*, i64, i64}** %9
	; prev_string
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %4
		; i
	store i64 zeroinitializer, i64* %5
		%11 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %6
	%12 = extractvalue {%..any*, i64, i64} %11, 1
	store i64 %12, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-1

for.index.loop-1:
	%13 = load i64, i64* %7, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %7
	%15 = load i64, i64* %6, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %for.index.body-2, label %for.index.done-9

for.index.body-2:
	%17 = load i64, i64* %7, align 8
	%18 = extractvalue {%..any*, i64, i64} %11, 0
	%19 = getelementptr inbounds %..any, %..any* %18, i64 %17
	%20 = load %..any, %..any* %19, align 8
	store %..any %20, %..any* %4
	store i64 %17, i64* %5
	; is_string
	store i1 zeroinitializer, i1* %8
		%21 = load %..any, %..any* %4, align 8
	%22 = extractvalue %..any %21, 0
	%23 = extractvalue %..any %21, 1
	%24 = bitcast %..rawptr null to %Type_Info*
	%25 = icmp ne %Type_Info* %22, %24
	%26 = icmp ne %..rawptr %23, null
	%27 = and i1 %25, %26
	%28 = load %..any, %..any* %4, align 8
	%29 = extractvalue %..any %28, 0
	%30 = extractvalue %..any %28, 1
	%31 = bitcast %..rawptr null to %Type_Info*
	%32 = icmp ne %Type_Info* %29, %31
	%33 = icmp ne %..rawptr %30, null
	%34 = and i1 %32, %33
	br i1 %34, label %logical.cmp.rhs-3, label %logical.cmp.done-4

logical.cmp.rhs-3:
	; SelectorExpr
	; SelectorExpr
	%35 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%36 = load %Type_Info*, %Type_Info** %35, align 8
	%37 = call i1 @.types-20.is_string(%Type_Info* %36)
	br label %logical.cmp.done-4

logical.cmp.done-4:
	%38 = phi i1 [ false, %for.index.body-2 ], [ %37, %logical.cmp.rhs-3 ]
	store i1 %38, i1* %8
	; IfStmt
	%39 = load i64, i64* %5, align 8
	%40 = icmp sgt i64 %39, 0
	br i1 %40, label %cmp.and-5, label %if.done-8

cmp.and-5:
	%41 = load i1, i1* %8, align 1
	br i1 %41, label %if.done-8, label %cmp.and-6

cmp.and-6:
	%42 = load i1, i1* %3, align 1
	br i1 %42, label %if.done-8, label %if.then-7

if.then-7:
	%43 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %43, i8 32)
	br label %if.done-8

if.done-8:
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	; IndexExpr
	%45 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%46 = extractvalue {%..any*, i64, i64} %45, 0
	%47 = extractvalue {%..any*, i64, i64} %45, 1
	%48 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$a9, i64 0, i32 0), i64 37}, i64 286, i64 23, i64 %48, i64 %47)
	%49 = getelementptr inbounds %..any, %..any* %46, i64 %48
	%50 = load %..any, %..any* %49, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %44, %..any %50, i32 118)
	; AssignStmt
	%51 = load i1, i1* %8, align 1
	store i1 %51, i1* %3
	br label %for.index.loop-1

for.index.done-9:
	; ReturnStmt
	%52 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%53 = load {i8*, i64, i64}, {i8*, i64, i64}* %52, align 8
	%54 = extractvalue {i8*, i64, i64} %53, 1
	ret i64 %54
}

define i64 @.fmt-4.bprintln({i8*, i64, i64}* %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca %fmt-4.Fmt_Info, align 8
	%3 = alloca %..any, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %buf, {i8*, i64, i64}** %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %2
		; AssignStmt
	; SelectorExpr
	%7 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0, i32 3
	%8 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	store {i8*, i64, i64}* %8, {i8*, i64, i64}** %7
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %3
		; i
	store i64 zeroinitializer, i64* %4
		%9 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %5
	%10 = extractvalue {%..any*, i64, i64} %9, 1
	store i64 %10, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-1

for.index.loop-1:
	%11 = load i64, i64* %6, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %6
	%13 = load i64, i64* %5, align 8
	%14 = icmp slt i64 %12, %13
	br i1 %14, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%15 = load i64, i64* %6, align 8
	%16 = extractvalue {%..any*, i64, i64} %9, 0
	%17 = getelementptr inbounds %..any, %..any* %16, i64 %15
	%18 = load %..any, %..any* %17, align 8
	store %..any %18, %..any* %3
	store i64 %15, i64* %4
	; IfStmt
	%19 = load i64, i64* %4, align 8
	%20 = icmp sgt i64 %19, 0
	br i1 %20, label %if.then-3, label %if.done-4

if.then-3:
	%21 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %21, i8 32)
	br label %if.done-4

if.done-4:
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	; IndexExpr
	%23 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%24 = extractvalue {%..any*, i64, i64} %23, 0
	%25 = extractvalue {%..any*, i64, i64} %23, 1
	%26 = load i64, i64* %4, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$aa, i64 0, i32 0), i64 37}, i64 300, i64 23, i64 %26, i64 %25)
	%27 = getelementptr inbounds %..any, %..any* %24, i64 %26
	%28 = load %..any, %..any* %27, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %22, %..any %28, i32 118)
	br label %for.index.loop-1

for.index.done-5:
	%29 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %29, i8 10)
	; ReturnStmt
	%30 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%31 = load {i8*, i64, i64}, {i8*, i64, i64}* %30, align 8
	%32 = extractvalue {i8*, i64, i64} %31, 1
	ret i64 %32
}

define %..string @.fmt-4.sprint({i8*, i64, i64} %buf, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca i64, align 8
	%3 = alloca {i8*, i64, i64}, align 8
	%4 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; count
	store i64 zeroinitializer, i64* %2
		%5 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0
	%6 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%7 = call i64 @.fmt-4.bprint({i8*, i64, i64}* %5, {%..any*, i64, i64} %6)
	store i64 %7, i64* %2
	; ReturnStmt
	; SliceExpr
	%8 = load i64, i64* %2, align 8
	%9 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%10 = extractvalue {i8*, i64, i64} %9, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ab, i64 0, i32 0), i64 37}, i64 308, i64 24, i64 0, i64 %8, i64 %10)
	%11 = extractvalue {i8*, i64, i64} %9, 0
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	%13 = sub i64 %8, 0
	%14 = sub i64 %10, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %3
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 0
	store i8* %12, i8** %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 1
	store i64 %13, i64* %16
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %3, i64 0, i32 2
	store i64 %14, i64* %17
	%18 = load {i8*, i64, i64}, {i8*, i64, i64}* %3, align 8
	; cast - cast
	%19 = extractvalue {i8*, i64, i64} %18, 0
	%20 = extractvalue {i8*, i64, i64} %18, 1
	store %..string zeroinitializer, %..string* %4
	%21 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 0
	%22 = getelementptr inbounds %..string, %..string* %4, i64 0, i32 1
	store i8* %19, i8** %21
	store i64 %20, i64* %22
	%23 = load %..string, %..string* %4, align 8
	ret %..string %23
}

define %..string @.fmt-4.sprintf({i8*, i64, i64} %buf, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca i64, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; count
	store i64 zeroinitializer, i64* %3
		%6 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %0, i64 0
	%7 = load %..string, %..string* %1, align 8
	%8 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%9 = call i64 @.fmt-4.bprintf({i8*, i64, i64}* %6, %..string %7, {%..any*, i64, i64} %8)
	store i64 %9, i64* %3
	; ReturnStmt
	; SliceExpr
	%10 = load i64, i64* %3, align 8
	%11 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%12 = extractvalue {i8*, i64, i64} %11, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ac, i64 0, i32 0), i64 37}, i64 316, i64 24, i64 0, i64 %10, i64 %12)
	%13 = extractvalue {i8*, i64, i64} %11, 0
	%14 = getelementptr inbounds i8, i8* %13, i64 0
	%15 = sub i64 %10, 0
	%16 = sub i64 %12, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%17 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %14, i8** %17
	%18 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %15, i64* %18
	%19 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %16, i64* %19
	%20 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	; cast - cast
	%21 = extractvalue {i8*, i64, i64} %20, 0
	%22 = extractvalue {i8*, i64, i64} %20, 1
	store %..string zeroinitializer, %..string* %5
	%23 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%24 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i8* %21, i8** %23
	store i64 %22, i64* %24
	%25 = load %..string, %..string* %5, align 8
	ret %..string %25
}

define {i64, i64, i1} @.fmt-4.parse_int(%..string %s, i64 %offset) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i32, align 4
	%9 = alloca {i64, i64, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	store i64 zeroinitializer, i64* %1
		store i64 %offset, i64* %1
	; result
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; ok
	store i1 zeroinitializer, i1* %3
		store i1 true, i1* %3
	; i
	store i64 zeroinitializer, i64* %4
		store i64 0, i64* %4
	; RangeStmt
	; o
	store i64 zeroinitializer, i64* %5
		%10 = load i64, i64* %1, align 8
	store i64 zeroinitializer, i64* %6
	store i64 %10, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 0, i64* %7
	br label %for.interval.loop-1

for.interval.loop-1:
	%11 = load %..string, %..string* %0, align 8
	%12 = extractvalue %..string %11, 1
	%13 = load i64, i64* %6, align 8
	%14 = icmp slt i64 %13, %12
	br i1 %14, label %for.interval.body-2, label %for.interval.done-5

for.interval.body-2:
	%15 = load i64, i64* %6, align 8
	%16 = load i64, i64* %7, align 8
	%17 = load i64, i64* %6, align 8
	%18 = add i64 %17, 1
	store i64 %18, i64* %6
	%19 = load i64, i64* %7, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %7
	store i64 %15, i64* %5
	; c
	store i32 zeroinitializer, i32* %8
		; IndexExpr
	%21 = load %..string, %..string* %0, align 8
	%22 = extractvalue %..string %21, 0
	%23 = extractvalue %..string %21, 1
	%24 = load i64, i64* %1, align 8
	%25 = load i64, i64* %4, align 8
	%26 = add i64 %24, %25
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ad, i64 0, i32 0), i64 37}, i64 332, i64 20, i64 %26, i64 %23)
	%27 = getelementptr inbounds i8, i8* %22, i64 %26
	%28 = load i8, i8* %27, align 1
	; cast - cast
	%29 = zext i8 %28 to i32
	store i32 %29, i32* %8
	; IfStmt
	%30 = load i32, i32* %8, align 4
	%31 = call i1 @.fmt-4.parse_int.is_digit-0(i32 %30)
	br i1 %31, label %if.done-4, label %if.then-3

if.then-3:
	; break
	br label %for.interval.done-5

if.done-4:
	%32 = load i64, i64* %4, align 8
	%33 = add i64 %32, 1
	store i64 %33, i64* %4
	; AssignStmt
	%34 = load i64, i64* %2, align 8
	%35 = mul i64 %34, 10
	store i64 %35, i64* %2
	; AssignStmt
	%36 = load i32, i32* %8, align 4
	%37 = sub i32 %36, 48
	; cast - cast
	%38 = sext i32 %37 to i64
	%39 = load i64, i64* %2, align 8
	%40 = add i64 %39, %38
	store i64 %40, i64* %2
	br label %for.interval.loop-1

for.interval.done-5:
	; ReturnStmt
	%41 = load i64, i64* %2, align 8
	%42 = load i64, i64* %1, align 8
	%43 = load i64, i64* %4, align 8
	%44 = add i64 %42, %43
	%45 = load i64, i64* %4, align 8
	%46 = icmp ne i64 %45, 0
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %9
	%47 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 0
	store i64 %41, i64* %47
	%48 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 1
	store i64 %44, i64* %48
	%49 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 2
	store i1 %46, i1* %49
	%50 = load {i64, i64, i1}, {i64, i64, i1}* %9, align 8
	ret {i64, i64, i1} %50
}

define i1 @.fmt-4.parse_int.is_digit-0(i32 %r) alwaysinline {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %r, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 4
	%2 = icmp sle i32 48, %1
	%3 = load i32, i32* %0, align 4
	%4 = icmp sle i32 48, %3
	br i1 %4, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%5 = load i32, i32* %0, align 4
	%6 = icmp sle i32 %5, 57
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%7 = phi i1 [ false, %decls-0 ], [ %6, %logical.cmp.rhs-1 ]
	ret i1 %7
}

define {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %fi, i64 %arg_index, %..string %format, i64 %offset, i64 %arg_count) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca {i64, i64, i1}, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	%9 = alloca %..string, align 8
	%10 = alloca {i64, i64, i1}, align 8
	%11 = alloca {i64, i64, i1}, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %arg_index, i64* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %format, %..string* %2
	store i64 zeroinitializer, i64* %3
		store i64 %offset, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %arg_count, i64* %4
	; IfStmt
	%12 = load %..string, %..string* %2, align 8
	%13 = extractvalue %..string %12, 1
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 %13, %14
	br i1 %15, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; IndexExpr
	%16 = load %..string, %..string* %2, align 8
	%17 = extractvalue %..string %16, 0
	%18 = extractvalue %..string %16, 1
	%19 = load i64, i64* %3, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ae, i64 0, i32 0), i64 37}, i64 370, i64 37, i64 %19, i64 %18)
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	%21 = load i8, i8* %20, align 1
	%22 = icmp ne i8 %21, 91
	br i1 %22, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %3, align 8
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %5
	%25 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 0
	store i64 %23, i64* %25
	%26 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 1
	store i64 %24, i64* %26
	%27 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %5, i64 0, i32 2
	store i1 false, i1* %27
	%28 = load {i64, i64, i1}, {i64, i64, i1}* %5, align 8
	ret {i64, i64, i1} %28

if.done-3:
	; AssignStmt
	; SelectorExpr
	%29 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0
	%31 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0, i32 11
	store i1 true, i1* %31
	; index
	store i64 zeroinitializer, i64* %6
		; width
	store i64 zeroinitializer, i64* %7
		; ok
	store i1 zeroinitializer, i1* %8
		; SliceExpr
	%32 = load i64, i64* %3, align 8
	%33 = load %..string, %..string* %2, align 8
	%34 = extractvalue %..string %33, 1
	%35 = extractvalue %..string %33, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$af, i64 0, i32 0), i64 37}, i64 374, i64 45, i64 %32, i64 %34)
	%36 = extractvalue %..string %33, 0
	%37 = getelementptr inbounds i8, i8* %36, i64 %32
	%38 = sub i64 %34, %32
	store %..string zeroinitializer, %..string* %9
	%39 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %37, i8** %39
	%40 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %38, i64* %40
	%41 = load %..string, %..string* %9, align 8
	%42 = call {i64, i64, i1} @.fmt-4._arg_number.parse_arg_number-0(%..string %41)
	%43 = extractvalue {i64, i64, i1} %42, 0
	%44 = extractvalue {i64, i64, i1} %42, 1
	%45 = extractvalue {i64, i64, i1} %42, 2
	store i64 %43, i64* %6
	store i64 %44, i64* %7
	store i1 %45, i1* %8
	; IfStmt
	%46 = load i1, i1* %8, align 1
	br i1 %46, label %cmp.and-4, label %if.done-7

cmp.and-4:
	%47 = load i64, i64* %6, align 8
	%48 = icmp sle i64 0, %47
	br i1 %48, label %cmp.and-5, label %if.done-7

cmp.and-5:
	%49 = load i64, i64* %6, align 8
	%50 = load i64, i64* %4, align 8
	%51 = icmp slt i64 %49, %50
	br i1 %51, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	%52 = load i64, i64* %6, align 8
	%53 = load i64, i64* %3, align 8
	%54 = load i64, i64* %7, align 8
	%55 = add i64 %53, %54
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %10
	%56 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 0
	store i64 %52, i64* %56
	%57 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 1
	store i64 %55, i64* %57
	%58 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 2
	store i1 true, i1* %58
	%59 = load {i64, i64, i1}, {i64, i64, i1}* %10, align 8
	ret {i64, i64, i1} %59

if.done-7:
	; AssignStmt
	; SelectorExpr
	%60 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0, i32 12
	store i1 false, i1* %62
	; ReturnStmt
	%63 = load i64, i64* %1, align 8
	%64 = load i64, i64* %3, align 8
	%65 = load i64, i64* %7, align 8
	%66 = add i64 %64, %65
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %11
	%67 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 0
	store i64 %63, i64* %67
	%68 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 1
	store i64 %66, i64* %68
	%69 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %11, i64 0, i32 2
	store i1 false, i1* %69
	%70 = load {i64, i64, i1}, {i64, i64, i1}* %11, align 8
	ret {i64, i64, i1} %70
}

define {i64, i64, i1} @.fmt-4._arg_number.parse_arg_number-0(%..string %format) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i64, i64, i1}, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i1, align 1
	%8 = alloca {i64, i64, i1}, align 8
	%9 = alloca {i64, i64, i1}, align 8
	%10 = alloca {i64, i64, i1}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %format, %..string* %0
	; IfStmt
	%11 = load %..string, %..string* %0, align 8
	%12 = extractvalue %..string %11, 1
	%13 = icmp slt i64 %12, 3
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %1
	%14 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 0
	store i64 0, i64* %14
	%15 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 1
	store i64 1, i64* %15
	%16 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %1, i64 0, i32 2
	store i1 false, i1* %16
	%17 = load {i64, i64, i1}, {i64, i64, i1}* %1, align 8
	ret {i64, i64, i1} %17

if.done-2:
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %2
		store i64 zeroinitializer, i64* %3
	store i64 1, i64* %3
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	br label %for.interval.loop-3

for.interval.loop-3:
	%18 = load %..string, %..string* %0, align 8
	%19 = extractvalue %..string %18, 1
	%20 = load i64, i64* %3, align 8
	%21 = icmp slt i64 %20, %19
	br i1 %21, label %for.interval.body-4, label %for.interval.done-10

for.interval.body-4:
	%22 = load i64, i64* %3, align 8
	%23 = load i64, i64* %4, align 8
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	%26 = load i64, i64* %4, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %4
	store i64 %22, i64* %2
	; IfStmt
	; IndexExpr
	%28 = load %..string, %..string* %0, align 8
	%29 = extractvalue %..string %28, 0
	%30 = extractvalue %..string %28, 1
	%31 = load i64, i64* %2, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$b0, i64 0, i32 0), i64 37}, i64 357, i64 14, i64 %31, i64 %30)
	%32 = getelementptr inbounds i8, i8* %29, i64 %31
	%33 = load i8, i8* %32, align 1
	%34 = icmp eq i8 %33, 93
	br i1 %34, label %if.then-5, label %if.done-9

if.then-5:
	; width
	store i64 zeroinitializer, i64* %5
		; new_index
	store i64 zeroinitializer, i64* %6
		; ok
	store i1 zeroinitializer, i1* %7
		%35 = load %..string, %..string* %0, align 8
	%36 = call {i64, i64, i1} @.fmt-4.parse_int(%..string %35, i64 1)
	%37 = extractvalue {i64, i64, i1} %36, 0
	%38 = extractvalue {i64, i64, i1} %36, 1
	%39 = extractvalue {i64, i64, i1} %36, 2
	store i64 %37, i64* %5
	store i64 %38, i64* %6
	store i1 %39, i1* %7
	; IfStmt
	%40 = load i1, i1* %7, align 1
	br i1 %40, label %cmp.or-6, label %if.then-7

cmp.or-6:
	%41 = load i64, i64* %6, align 8
	%42 = load i64, i64* %2, align 8
	%43 = icmp ne i64 %41, %42
	br i1 %43, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	%44 = load i64, i64* %2, align 8
	%45 = add i64 %44, 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %8
	%46 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 0
	store i64 0, i64* %46
	%47 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 1
	store i64 %45, i64* %47
	%48 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %8, i64 0, i32 2
	store i1 false, i1* %48
	%49 = load {i64, i64, i1}, {i64, i64, i1}* %8, align 8
	ret {i64, i64, i1} %49

if.done-8:
	; ReturnStmt
	%50 = load i64, i64* %5, align 8
	%51 = sub i64 %50, 1
	%52 = load i64, i64* %2, align 8
	%53 = add i64 %52, 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %9
	%54 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 0
	store i64 %51, i64* %54
	%55 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 1
	store i64 %53, i64* %55
	%56 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %9, i64 0, i32 2
	store i1 true, i1* %56
	%57 = load {i64, i64, i1}, {i64, i64, i1}* %9, align 8
	ret {i64, i64, i1} %57

if.done-9:
	br label %for.interval.loop-3

for.interval.done-10:
	; ReturnStmt
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %10
	%58 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 0
	store i64 0, i64* %58
	%59 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 1
	store i64 1, i64* %59
	%60 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %10, i64 0, i32 2
	store i1 false, i1* %60
	%61 = load {i64, i64, i1}, {i64, i64, i1}* %10, align 8
	ret {i64, i64, i1} %61
}

define {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %args, i64 %arg_index) {
decls-0:
	%0 = alloca {%..any*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i1, align 1
	%5 = alloca %..any, align 8
	%6 = alloca i64, align 8
	%7 = alloca i8, align 1
	%8 = alloca i16, align 2
	%9 = alloca i32, align 4
	%10 = alloca i64, align 8
	%11 = alloca i8, align 1
	%12 = alloca i16, align 2
	%13 = alloca i32, align 4
	%14 = alloca i64, align 8
	%15 = alloca %..any, align 8
	%16 = alloca {i64, i64, i1}, align 8
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %0
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %0
	store i64 zeroinitializer, i64* %1
		store i64 %arg_index, i64* %1
	; num
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; new_arg_index
	store i64 zeroinitializer, i64* %3
		%17 = load i64, i64* %1, align 8
	store i64 %17, i64* %3
	; ok
	store i1 zeroinitializer, i1* %4
		store i1 true, i1* %4
	; IfStmt
	%18 = load i64, i64* %1, align 8
	%19 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%20 = extractvalue {%..any*, i64, i64} %19, 1
	%21 = icmp slt i64 %18, %20
	br i1 %21, label %if.then-1, label %if.done-21

if.then-1:
	; arg
	store %..any zeroinitializer, %..any* %5
		; IndexExpr
	%22 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %0, align 8
	%23 = extractvalue {%..any*, i64, i64} %22, 0
	%24 = extractvalue {%..any*, i64, i64} %22, 1
	%25 = load i64, i64* %1, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$b1, i64 0, i32 0), i64 37}, i64 387, i64 15, i64 %25, i64 %24)
	%26 = getelementptr inbounds %..any, %..any* %23, i64 %25
	%27 = load %..any, %..any* %26, align 8
	store %..any %27, %..any* %5
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	; SelectorExpr
	%29 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%30 = load %Type_Info*, %Type_Info** %29, align 8
	%31 = call %Type_Info* @.type_info_base(%Type_Info* %30)
	store %Type_Info* %31, %Type_Info** %28
	; TypeMatchStmt
	%32 = load %..any, %..any* %5, align 8
	%33 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%34 = load %Type_Info*, %Type_Info** %33, align 8
	%35 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%36 = icmp eq %Type_Info* %34, %35
	br i1 %36, label %typematch.body-3, label %typematch.next-2

typematch.next-2:
	%37 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%38 = load %Type_Info*, %Type_Info** %37, align 8
	%39 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%40 = icmp eq %Type_Info* %38, %39
	br i1 %40, label %typematch.body-5, label %typematch.next-4

typematch.body-3:
	%41 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%42 = load %..rawptr, %..rawptr* %41, align 8
	%43 = bitcast %..rawptr %42 to i64*
	%44 = load i64, i64* %43, align 8
	store i64 zeroinitializer, i64* %6
	store i64 %44, i64* %6
	; AssignStmt
	%45 = load i64, i64* %6, align 8
	store i64 %45, i64* %2
	br label %typematch.done-20

typematch.next-4:
	%46 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%47 = load %Type_Info*, %Type_Info** %46, align 8
	%48 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%49 = icmp eq %Type_Info* %47, %48
	br i1 %49, label %typematch.body-7, label %typematch.next-6

typematch.body-5:
	%50 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%51 = load %..rawptr, %..rawptr* %50, align 8
	%52 = bitcast %..rawptr %51 to i8*
	%53 = load i8, i8* %52, align 1
	store i8 zeroinitializer, i8* %7
	store i8 %53, i8* %7
	; AssignStmt
	%54 = load i8, i8* %7, align 1
	; cast - cast
	%55 = sext i8 %54 to i64
	store i64 %55, i64* %2
	br label %typematch.done-20

typematch.next-6:
	%56 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%57 = load %Type_Info*, %Type_Info** %56, align 8
	%58 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%59 = icmp eq %Type_Info* %57, %58
	br i1 %59, label %typematch.body-9, label %typematch.next-8

typematch.body-7:
	%60 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%61 = load %..rawptr, %..rawptr* %60, align 8
	%62 = bitcast %..rawptr %61 to i16*
	%63 = load i16, i16* %62, align 2
	store i16 zeroinitializer, i16* %8
	store i16 %63, i16* %8
	; AssignStmt
	%64 = load i16, i16* %8, align 2
	; cast - cast
	%65 = sext i16 %64 to i64
	store i64 %65, i64* %2
	br label %typematch.done-20

typematch.next-8:
	%66 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%67 = load %Type_Info*, %Type_Info** %66, align 8
	%68 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	%69 = icmp eq %Type_Info* %67, %68
	br i1 %69, label %typematch.body-11, label %typematch.next-10

typematch.body-9:
	%70 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%71 = load %..rawptr, %..rawptr* %70, align 8
	%72 = bitcast %..rawptr %71 to i32*
	%73 = load i32, i32* %72, align 4
	store i32 zeroinitializer, i32* %9
	store i32 %73, i32* %9
	; AssignStmt
	%74 = load i32, i32* %9, align 4
	; cast - cast
	%75 = sext i32 %74 to i64
	store i64 %75, i64* %2
	br label %typematch.done-20

typematch.next-10:
	%76 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%77 = load %Type_Info*, %Type_Info** %76, align 8
	%78 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%79 = icmp eq %Type_Info* %77, %78
	br i1 %79, label %typematch.body-13, label %typematch.next-12

typematch.body-11:
	%80 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%81 = load %..rawptr, %..rawptr* %80, align 8
	%82 = bitcast %..rawptr %81 to i64*
	%83 = load i64, i64* %82, align 8
	store i64 zeroinitializer, i64* %10
	store i64 %83, i64* %10
	; AssignStmt
	%84 = load i64, i64* %10, align 8
	; cast - cast
	%85 = bitcast i64 %84 to i64
	store i64 %85, i64* %2
	br label %typematch.done-20

typematch.next-12:
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%87 = load %Type_Info*, %Type_Info** %86, align 8
	%88 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%89 = icmp eq %Type_Info* %87, %88
	br i1 %89, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%90 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%91 = load %..rawptr, %..rawptr* %90, align 8
	%92 = bitcast %..rawptr %91 to i8*
	%93 = load i8, i8* %92, align 1
	store i8 zeroinitializer, i8* %11
	store i8 %93, i8* %11
	; AssignStmt
	%94 = load i8, i8* %11, align 1
	; cast - cast
	%95 = zext i8 %94 to i64
	store i64 %95, i64* %2
	br label %typematch.done-20

typematch.next-14:
	%96 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%97 = load %Type_Info*, %Type_Info** %96, align 8
	%98 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%99 = icmp eq %Type_Info* %97, %98
	br i1 %99, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%100 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%101 = load %..rawptr, %..rawptr* %100, align 8
	%102 = bitcast %..rawptr %101 to i16*
	%103 = load i16, i16* %102, align 2
	store i16 zeroinitializer, i16* %12
	store i16 %103, i16* %12
	; AssignStmt
	%104 = load i16, i16* %12, align 2
	; cast - cast
	%105 = zext i16 %104 to i64
	store i64 %105, i64* %2
	br label %typematch.done-20

typematch.next-16:
	%106 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%107 = load %Type_Info*, %Type_Info** %106, align 8
	%108 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%109 = icmp eq %Type_Info* %107, %108
	br i1 %109, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%110 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%111 = load %..rawptr, %..rawptr* %110, align 8
	%112 = bitcast %..rawptr %111 to i32*
	%113 = load i32, i32* %112, align 4
	store i32 zeroinitializer, i32* %13
	store i32 %113, i32* %13
	; AssignStmt
	%114 = load i32, i32* %13, align 4
	; cast - cast
	%115 = zext i32 %114 to i64
	store i64 %115, i64* %2
	br label %typematch.done-20

typematch.next-18:
	store %..any zeroinitializer, %..any* %15
	store %..any %32, %..any* %15
	; AssignStmt
	store i1 false, i1* %4
	br label %typematch.done-20

typematch.body-19:
	%116 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%117 = load %..rawptr, %..rawptr* %116, align 8
	%118 = bitcast %..rawptr %117 to i64*
	%119 = load i64, i64* %118, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %119, i64* %14
	; AssignStmt
	%120 = load i64, i64* %14, align 8
	; cast - cast
	%121 = bitcast i64 %120 to i64
	store i64 %121, i64* %2
	br label %typematch.done-20

typematch.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%122 = load i64, i64* %2, align 8
	%123 = load i64, i64* %3, align 8
	%124 = load i1, i1* %4, align 1
	store {i64, i64, i1} zeroinitializer, {i64, i64, i1}* %16
	%125 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 0
	store i64 %122, i64* %125
	%126 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 1
	store i64 %123, i64* %126
	%127 = getelementptr inbounds {i64, i64, i1}, {i64, i64, i1}* %16, i64 0, i32 2
	store i1 %124, i1* %127
	%128 = load {i64, i64, i1}, {i64, i64, i1}* %16, align 8
	ret {i64, i64, i1} %128
}

define void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %fi, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i32 zeroinitializer, i32* %1
		store i32 %verb, i32* %1
	; assert
	%2 = load i32, i32* %1, align 4
	%3 = icmp ne i32 %2, 118
	%4 = icmp eq i1 %3, false
	br i1 %4, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$b2, i64 0, i32 0), i64 37}, i64 409, i64 9, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$b3, i64 0, i32 0), i64 9})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	%5 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%6 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %5, i64 0
	%7 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %6, i64 0, i32 3
	%8 = load {i8*, i64, i64}*, {i8*, i64, i64}** %7, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %8, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$b4, i64 0, i32 0), i64 2})
	%9 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %10, i64 0, i32 3
	%12 = load {i8*, i64, i64}*, {i8*, i64, i64}** %11, align 8
	%13 = load i32, i32* %1, align 4
	call void @.fmt-4.write_rune({i8*, i64, i64}* %12, i32 %13)
	%14 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%15 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %14, i64 0
	%16 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %15, i64 0, i32 3
	%17 = load {i8*, i64, i64}*, {i8*, i64, i64}** %16, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %17, i8 40)
	; IfStmt
	; SelectorExpr
	%18 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0, i32 0
	%21 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%22 = load %Type_Info*, %Type_Info** %21, align 8
	%23 = icmp ne %Type_Info* %22, zeroinitializer
	br i1 %23, label %if.then-3, label %if.else-4

if.then-3:
	%24 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0, i32 3
	%27 = load {i8*, i64, i64}*, {i8*, i64, i64}** %26, align 8
	; SelectorExpr
	%28 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0, i32 0
	%31 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 0
	%32 = load %Type_Info*, %Type_Info** %31, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %27, %Type_Info* %32)
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 3
	%36 = load {i8*, i64, i64}*, {i8*, i64, i64}** %35, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %36, i8 61)
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0, i32 0
	%41 = load %..any, %..any* %40, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %37, %..any %41, i32 118)
	br label %if.done-5

if.else-4:
	%42 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %43, i64 0, i32 3
	%45 = load {i8*, i64, i64}*, {i8*, i64, i64}** %44, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %45, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$b5, i64 0, i32 0), i64 5})
	br label %if.done-5

if.done-5:
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0, i32 3
	%49 = load {i8*, i64, i64}*, {i8*, i64, i64}** %48, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %49, i8 41)
	ret void
}

define void @.fmt-4.fmt_bool(%fmt-4.Fmt_Info* %fi, i1 %b, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i1, align 1
	%2 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i1 zeroinitializer, i1* %1
		store i1 %b, i1* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 116
	br i1 %4, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%5 = icmp eq i32 %3, 118
	br i1 %5, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%6 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%7 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %6, i32 %7)
	br label %match.done-7

match.case.body-3:
	%8 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0, i32 3
	%11 = load {i8*, i64, i64}*, {i8*, i64, i64}** %10, align 8
	; TernaryExpr
	%12 = load i1, i1* %1, align 1
	br i1 %12, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%13 = phi %..string [ {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$b6, i64 0, i32 0), i64 4}, %if.then-4 ], [ {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$b7, i64 0, i32 0), i64 5}, %if.else-5 ]
	call void @.fmt-4.write_string({i8*, i64, i64}* %11, %..string %13)
	br label %match.done-7

match.done-7:
	ret void
}

define void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %fi, i64 %width) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca [1 x i8], align 1
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %width, i64* %1
	; IfStmt
	%8 = load i64, i64* %1, align 8
	%9 = icmp sle i64 %8, 0
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; pad_byte
	store i8 zeroinitializer, i8* %2
		store i8 32, i8* %2
	; IfStmt
	; SelectorExpr
	%10 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%11 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %10, i64 0
	%12 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %11, i64 0, i32 7
	%13 = load i1, i1* %12, align 1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	store i8 48, i8* %2
	br label %if.done-4

if.done-4:
	; count
	store i64 zeroinitializer, i64* %3
		; min
	%14 = load i64, i64* %1, align 8
	; SelectorExpr
	%15 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%16 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %15, i64 0
	%17 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %16, i64 0, i32 3
	%18 = load {i8*, i64, i64}*, {i8*, i64, i64}** %17, align 8
	%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %18, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 2
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 3
	%24 = load {i8*, i64, i64}*, {i8*, i64, i64}** %23, align 8
	%25 = load {i8*, i64, i64}, {i8*, i64, i64}* %24, align 8
	%26 = extractvalue {i8*, i64, i64} %25, 1
	%27 = sub i64 %20, %26
	%28 = icmp slt i64 %14, %27
	%29 = select i1 %28, i64 %14, i64 %27
	store i64 %29, i64* %3
	; RangeStmt
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-5

for.interval.loop-5:
	%30 = load i64, i64* %3, align 8
	%31 = load i64, i64* %4, align 8
	%32 = icmp slt i64 %31, %30
	br i1 %32, label %for.interval.body-6, label %for.interval.done-7

for.interval.body-6:
	%33 = load i64, i64* %4, align 8
	%34 = load i64, i64* %5, align 8
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %5, align 8
	%38 = add i64 %37, 1
	store i64 %38, i64* %5
	; append
	; SelectorExpr
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %40, i64 0, i32 3
	%42 = load {i8*, i64, i64}*, {i8*, i64, i64}** %41, align 8
	%43 = bitcast {i8*, i64, i64}* %42 to %..rawptr
	; SelectorExpr
	%44 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%45 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %44, i64 0
	%46 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %45, i64 0, i32 3
	%47 = load {i8*, i64, i64}*, {i8*, i64, i64}** %46, align 8
	%48 = load i8, i8* %2, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%49 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %48, i8* %49
	%50 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%51 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %50, i8** %51
	%52 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %52
	%53 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %53
	%54 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%55 = extractvalue {i8*, i64, i64} %54, 0
	%56 = extractvalue {i8*, i64, i64} %54, 1
	%57 = bitcast i8* %55 to %..rawptr
	%58 = call i64 @.__slice_append(%..rawptr %43, i64 1, i64 1, %..rawptr %57, i64 %56)
	br label %for.interval.loop-5

for.interval.done-7:
	ret void
}

define {i64, i1} @.fmt-4.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i1, align 1
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i8, align 1
	%5 = alloca i16, align 2
	%6 = alloca i32, align 4
	%7 = alloca i64, align 8
	%8 = alloca {i64, i1}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %u, i64* %0
	store i1 zeroinitializer, i1* %1
		store i1 %is_signed, i1* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	; neg
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; IfStmt
	%9 = load i1, i1* %1, align 1
	br i1 %9, label %if.then-1, label %if.done-19

if.then-1:
	; MatchStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 8
	br i1 %11, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%12 = icmp eq i64 %10, 16
	br i1 %12, label %match.fall.body-7, label %match.case.next-6

match.case.body-3:
	; i
	store i8 zeroinitializer, i8* %4
		%13 = load i64, i64* %0, align 8
	; cast - cast
	%14 = trunc i64 %13 to i8
	store i8 %14, i8* %4
	; AssignStmt
	%15 = load i8, i8* %4, align 1
	%16 = icmp slt i8 %15, 0
	store i1 %16, i1* %3
	; IfStmt
	%17 = load i1, i1* %3, align 1
	br i1 %17, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%18 = load i8, i8* %4, align 1
	%19 = sub i8 0, %18
	store i8 %19, i8* %4
	br label %if.done-5

if.done-5:
	; AssignStmt
	%20 = load i8, i8* %4, align 1
	; cast - cast
	%21 = sext i8 %20 to i64
	store i64 %21, i64* %0
	br label %match.done-18

match.case.next-6:
	%22 = icmp eq i64 %10, 32
	br i1 %22, label %match.fall.body-11, label %match.case.next-10

match.fall.body-7:
	; i
	store i16 zeroinitializer, i16* %5
		%23 = load i64, i64* %0, align 8
	; cast - cast
	%24 = trunc i64 %23 to i16
	store i16 %24, i16* %5
	; AssignStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 0
	store i1 %26, i1* %3
	; IfStmt
	%27 = load i1, i1* %3, align 1
	br i1 %27, label %if.then-8, label %if.done-9

if.then-8:
	; AssignStmt
	%28 = load i16, i16* %5, align 2
	%29 = sub i16 0, %28
	store i16 %29, i16* %5
	br label %if.done-9

if.done-9:
	; AssignStmt
	%30 = load i16, i16* %5, align 2
	; cast - cast
	%31 = sext i16 %30 to i64
	store i64 %31, i64* %0
	br label %match.done-18

match.case.next-10:
	%32 = icmp eq i64 %10, 64
	br i1 %32, label %match.fall.body-15, label %match.case.next-14

match.fall.body-11:
	; i
	store i32 zeroinitializer, i32* %6
		%33 = load i64, i64* %0, align 8
	; cast - cast
	%34 = trunc i64 %33 to i32
	store i32 %34, i32* %6
	; AssignStmt
	%35 = load i32, i32* %6, align 4
	%36 = icmp slt i32 %35, 0
	store i1 %36, i1* %3
	; IfStmt
	%37 = load i1, i1* %3, align 1
	br i1 %37, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%38 = load i32, i32* %6, align 4
	%39 = sub i32 0, %38
	store i32 %39, i32* %6
	br label %if.done-13

if.done-13:
	; AssignStmt
	%40 = load i32, i32* %6, align 4
	; cast - cast
	%41 = sext i32 %40 to i64
	store i64 %41, i64* %0
	br label %match.done-18

match.case.next-14:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$b8, i64 0, i32 0), i64 37}, i64 474, i64 10, %..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$b9, i64 0, i32 0), i64 41})
	br label %match.done-18

match.fall.body-15:
	; i
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %0, align 8
	; cast - cast
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load i64, i64* %7, align 8
	%45 = icmp slt i64 %44, 0
	store i1 %45, i1* %3
	; IfStmt
	%46 = load i1, i1* %3, align 1
	br i1 %46, label %if.then-16, label %if.done-17

if.then-16:
	; AssignStmt
	%47 = load i64, i64* %7, align 8
	%48 = sub i64 0, %47
	store i64 %48, i64* %7
	br label %if.done-17

if.done-17:
	; AssignStmt
	%49 = load i64, i64* %7, align 8
	; cast - cast
	%50 = bitcast i64 %49 to i64
	store i64 %50, i64* %0
	br label %match.done-18

match.done-18:
	br label %if.done-19

if.done-19:
	; ReturnStmt
	%51 = load i64, i64* %0, align 8
	%52 = load i1, i1* %3, align 1
	store {i64, i1} zeroinitializer, {i64, i1}* %8
	%53 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 0
	store i64 %51, i64* %53
	%54 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 1
	store i1 %52, i1* %54
	%55 = load {i64, i1}, {i64, i1}* %8, align 8
	ret {i64, i1} %55
}

define void @.fmt-4._write_int(%fmt-4.Fmt_Info* %fi, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca [256 x i8], align 1
	%11 = alloca i64, align 8
	%12 = alloca %..string, align 8
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca i1, align 1
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %base, i64* %2
	store i1 zeroinitializer, i1* %3
		store i1 %is_signed, i1* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	store %..string zeroinitializer, %..string* %5
		store %..string %digits, %..string* %5
	; neg
	store i1 zeroinitializer, i1* %6
		%15 = load i64, i64* %1, align 8
	%16 = load i1, i1* %3, align 1
	%17 = load i64, i64* %4, align 8
	%18 = call {i64, i1} @.fmt-4.is_integer_negative(i64 %15, i1 %16, i64 %17)
	%19 = extractvalue {i64, i1} %18, 0
	%20 = extractvalue {i64, i1} %18, 1
	store i1 %20, i1* %6
	; IfStmt
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 9
	%24 = load i1, i1* %23, align 1
	br i1 %24, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%25 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %26, i64 0, i32 10
	%28 = load i1, i1* %27, align 1
	br i1 %28, label %if.then-2, label %if.done-5

if.then-2:
	; width
	store i64 zeroinitializer, i64* %7
		; SelectorExpr
	%29 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0
	%31 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %30, i64 0, i32 1
	%32 = load i64, i64* %31, align 8
	; SelectorExpr
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 2
	%36 = load i64, i64* %35, align 8
	%37 = add i64 %32, %36
	%38 = add i64 %37, 3
	store i64 %38, i64* %7
	; IfStmt
	%39 = load i64, i64* %7, align 8
	%40 = icmp sgt i64 %39, 256
	br i1 %40, label %if.then-3, label %if.done-4

if.then-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ba, i64 0, i32 0), i64 37}, i64 488, i64 10, %..string {i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.__str$bb, i64 0, i32 0), i64 55})
	br label %if.done-4

if.done-4:
	br label %if.done-5

if.done-5:
	; prec
	store i64 zeroinitializer, i64* %8
		store i64 0, i64* %8
	; IfStmt
	; SelectorExpr
	%41 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%42 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %41, i64 0
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0, i32 10
	%44 = load i1, i1* %43, align 1
	br i1 %44, label %if.then-6, label %if.else-10

if.then-6:
	; AssignStmt
	; SelectorExpr
	%45 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%46 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %45, i64 0
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0, i32 2
	%48 = load i64, i64* %47, align 8
	store i64 %48, i64* %8
	; IfStmt
	%49 = load i64, i64* %8, align 8
	%50 = icmp eq i64 %49, 0
	br i1 %50, label %cmp.and-7, label %if.done-9

cmp.and-7:
	%51 = load i64, i64* %1, align 8
	%52 = icmp eq i64 %51, 0
	br i1 %52, label %if.then-8, label %if.done-9

if.then-8:
	; prev_zero
	store i1 zeroinitializer, i1* %9
		; SelectorExpr
	%53 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%54 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %53, i64 0
	%55 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %54, i64 0, i32 7
	%56 = load i1, i1* %55, align 1
	store i1 %56, i1* %9
	; AssignStmt
	; SelectorExpr
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%58 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %57, i64 0
	%59 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %58, i64 0, i32 7
	store i1 false, i1* %59
	%60 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%61 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0
	%63 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %62, i64 0, i32 1
	%64 = load i64, i64* %63, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %60, i64 %64)
	; AssignStmt
	; SelectorExpr
	%65 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%66 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %65, i64 0
	%67 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %66, i64 0, i32 7
	%68 = load i1, i1* %9, align 1
	store i1 %68, i1* %67
	; ReturnStmt
	ret void

if.done-9:
	br label %if.done-18

if.else-10:
	; IfStmt
	; SelectorExpr
	%69 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%70 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %69, i64 0
	%71 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %70, i64 0, i32 7
	%72 = load i1, i1* %71, align 1
	br i1 %72, label %cmp.and-11, label %if.done-17

cmp.and-11:
	; SelectorExpr
	%73 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%74 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %73, i64 0
	%75 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %74, i64 0, i32 9
	%76 = load i1, i1* %75, align 1
	br i1 %76, label %if.then-12, label %if.done-17

if.then-12:
	; AssignStmt
	; SelectorExpr
	%77 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%78 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %77, i64 0
	%79 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %78, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	store i64 %80, i64* %8
	; IfStmt
	%81 = load i1, i1* %6, align 1
	br i1 %81, label %if.then-15, label %cmp.or-13

cmp.or-13:
	; SelectorExpr
	%82 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%83 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %82, i64 0
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %83, i64 0, i32 5
	%85 = load i1, i1* %84, align 1
	br i1 %85, label %if.then-15, label %cmp.or-14

cmp.or-14:
	; SelectorExpr
	%86 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0, i32 6
	%89 = load i1, i1* %88, align 1
	br i1 %89, label %if.then-15, label %if.done-16

if.then-15:
	%90 = load i64, i64* %8, align 8
	%91 = sub i64 %90, 1
	store i64 %91, i64* %8
	br label %if.done-16

if.done-16:
	br label %if.done-17

if.done-17:
	br label %if.done-18

if.done-18:
	; MatchStmt
	%92 = load i64, i64* %2, align 8
	%93 = icmp eq i64 %92, 2
	br i1 %93, label %match.case.body-24, label %match.case.next-19

match.case.next-19:
	%94 = icmp eq i64 %92, 8
	br i1 %94, label %match.case.body-24, label %match.case.next-20

match.case.next-20:
	%95 = icmp eq i64 %92, 10
	br i1 %95, label %match.case.body-24, label %match.case.next-21

match.case.next-21:
	%96 = icmp eq i64 %92, 12
	br i1 %96, label %match.case.body-24, label %match.case.next-22

match.case.next-22:
	%97 = icmp eq i64 %92, 16
	br i1 %97, label %match.case.body-24, label %match.case.next-23

match.case.next-23:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$bc, i64 0, i32 0), i64 37}, i64 514, i64 9, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.__str$bd, i64 0, i32 0), i64 32})
	br label %match.done-25

match.case.body-24:
	; break
	br label %match.done-25

match.done-25:
	; buf
	store [256 x i8] zeroinitializer, [256 x i8]* %10
		; flags
	store i64 zeroinitializer, i64* %11
		; IfStmt
	; SelectorExpr
	%98 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%99 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %98, i64 0
	%100 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %99, i64 0, i32 8
	%101 = load i1, i1* %100, align 1
	br i1 %101, label %if.then-26, label %if.done-27

if.then-26:
	; AssignStmt
	%102 = load i64, i64* %11, align 8
	%103 = or i64 %102, 1
	store i64 %103, i64* %11
	br label %if.done-27

if.done-27:
	; IfStmt
	; SelectorExpr
	%104 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%105 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %104, i64 0
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %105, i64 0, i32 5
	%107 = load i1, i1* %106, align 1
	br i1 %107, label %if.then-28, label %if.done-29

if.then-28:
	; AssignStmt
	%108 = load i64, i64* %11, align 8
	%109 = or i64 %108, 2
	store i64 %109, i64* %11
	br label %if.done-29

if.done-29:
	; IfStmt
	; SelectorExpr
	%110 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%111 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %110, i64 0
	%112 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %111, i64 0, i32 6
	%113 = load i1, i1* %112, align 1
	br i1 %113, label %if.then-30, label %if.done-31

if.then-30:
	; AssignStmt
	%114 = load i64, i64* %11, align 8
	%115 = or i64 %114, 4
	store i64 %115, i64* %11
	br label %if.done-31

if.done-31:
	; s
	store %..string zeroinitializer, %..string* %12
		; SelectorExpr
	; SliceExpr
	%116 = load [256 x i8], [256 x i8]* %10, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$be, i64 0, i32 0), i64 37}, i64 522, i64 30, i64 0, i64 0, i64 256)
	%117 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i32 0
	%118 = getelementptr inbounds i8, i8* %117, i64 0
	%119 = sub i64 0, 0
	%120 = sub i64 256, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%121 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %118, i8** %121
	%122 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %119, i64* %122
	%123 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %120, i64* %123
	%124 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%125 = load i64, i64* %1, align 8
	%126 = load i64, i64* %2, align 8
	%127 = load i1, i1* %3, align 1
	%128 = load i64, i64* %4, align 8
	%129 = load %..string, %..string* %5, align 8
	%130 = load i64, i64* %11, align 8
	%131 = call %..string @.strconv-21.append_bits({i8*, i64, i64} %124, i64 %125, i64 %126, i1 %127, i64 %128, %..string %129, i64 %130)
	store %..string %131, %..string* %12
	; prev_zero
	store i1 zeroinitializer, i1* %14
		; SelectorExpr
	%132 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0
	%134 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %133, i64 0, i32 7
	%135 = load i1, i1* %134, align 1
	store i1 %135, i1* %14
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%136 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %136, i64 0
	%138 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %137, i64 0, i32 7
	store i1 false, i1* %138
	%139 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%140 = load %..string, %..string* %12, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %139, %..string %140)
	; defer
	; AssignStmt
	; SelectorExpr
	%141 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%142 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %141, i64 0
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0, i32 7
	%144 = load i1, i1* %14, align 1
	store i1 %144, i1* %143
	ret void
}

define void @.fmt-4.fmt_rune(%fmt-4.Fmt_Info* %fi, i32 %r) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i32 zeroinitializer, i32* %1
		store i32 %r, i32* %1
	; SelectorExpr
	%2 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%3 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %2, i64 0
	%4 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 3
	%5 = load {i8*, i64, i64}*, {i8*, i64, i64}** %4, align 8
	%6 = load i32, i32* %1, align 4
	call void @.fmt-4.write_rune({i8*, i64, i64}* %5, i32 %6)
	ret void
}

define void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %fi, i64 %u, i1 %is_signed, i64 %bit_size, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i1, align 1
	%3 = alloca i64, align 8
	%4 = alloca i32, align 4
	%5 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i1 zeroinitializer, i1* %2
		store i1 %is_signed, i1* %2
	store i64 zeroinitializer, i64* %3
		store i64 %bit_size, i64* %3
	store i32 zeroinitializer, i32* %4
		store i32 %verb, i32* %4
	; MatchStmt
	%6 = load i32, i32* %4, align 4
	%7 = icmp eq i32 %6, 118
	br i1 %7, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%8 = icmp eq i32 %6, 98
	br i1 %8, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	%9 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%10 = load i64, i64* %1, align 8
	%11 = load i1, i1* %2, align 1
	%12 = load i64, i64* %3, align 8
	%13 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %9, i64 %10, i64 10, i1 %11, i64 %12, %..string %13)
	br label %match.done-22

match.case.next-3:
	%14 = icmp eq i32 %6, 111
	br i1 %14, label %match.fall.body-6, label %match.case.next-5

match.fall.body-4:
	%15 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%16 = load i64, i64* %1, align 8
	%17 = load i1, i1* %2, align 1
	%18 = load i64, i64* %3, align 8
	%19 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %15, i64 %16, i64 2, i1 %17, i64 %18, %..string %19)
	br label %match.done-22

match.case.next-5:
	%20 = icmp eq i32 %6, 100
	br i1 %20, label %match.fall.body-8, label %match.case.next-7

match.fall.body-6:
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = load i64, i64* %1, align 8
	%23 = load i1, i1* %2, align 1
	%24 = load i64, i64* %3, align 8
	%25 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %21, i64 %22, i64 8, i1 %23, i64 %24, %..string %25)
	br label %match.done-22

match.case.next-7:
	%26 = icmp eq i32 %6, 120
	br i1 %26, label %match.fall.body-10, label %match.case.next-9

match.fall.body-8:
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = load i64, i64* %1, align 8
	%29 = load i1, i1* %2, align 1
	%30 = load i64, i64* %3, align 8
	%31 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %27, i64 %28, i64 10, i1 %29, i64 %30, %..string %31)
	br label %match.done-22

match.case.next-9:
	%32 = icmp eq i32 %6, 88
	br i1 %32, label %match.fall.body-12, label %match.case.next-11

match.fall.body-10:
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = load i64, i64* %1, align 8
	%35 = load i1, i1* %2, align 1
	%36 = load i64, i64* %3, align 8
	%37 = load %..string, %..string* @.fmt-4.__DIGITS_LOWER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %33, i64 %34, i64 16, i1 %35, i64 %36, %..string %37)
	br label %match.done-22

match.case.next-11:
	%38 = icmp eq i32 %6, 99
	br i1 %38, label %match.fall.body-15, label %match.case.next-13

match.fall.body-12:
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = load i64, i64* %1, align 8
	%41 = load i1, i1* %2, align 1
	%42 = load i64, i64* %3, align 8
	%43 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %39, i64 %40, i64 16, i1 %41, i64 %42, %..string %43)
	br label %match.done-22

match.case.next-13:
	%44 = icmp eq i32 %6, 114
	br i1 %44, label %match.fall.body-15, label %match.case.next-14

match.case.next-14:
	%45 = icmp eq i32 %6, 85
	br i1 %45, label %match.fall.body-17, label %match.case.next-16

match.fall.body-15:
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = load i64, i64* %1, align 8
	; cast - cast
	%48 = trunc i64 %47 to i32
	call void @.fmt-4.fmt_rune(%fmt-4.Fmt_Info* %46, i32 %48)
	br label %match.done-22

match.case.next-16:
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = load i32, i32* %4, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %49, i32 %50)
	br label %match.done-22

match.fall.body-17:
	; r
	store i32 zeroinitializer, i32* %5
		%51 = load i64, i64* %1, align 8
	; cast - cast
	%52 = trunc i64 %51 to i32
	store i32 %52, i32* %5
	; IfStmt
	%53 = load i32, i32* %5, align 4
	%54 = icmp slt i32 %53, 0
	br i1 %54, label %if.then-19, label %cmp.or-18

cmp.or-18:
	%55 = load i32, i32* %5, align 4
	%56 = icmp sgt i32 %55, 1114111
	br i1 %56, label %if.then-19, label %if.else-20

if.then-19:
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%58 = load i32, i32* %4, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %57, i32 %58)
	br label %if.done-21

if.else-20:
	; SelectorExpr
	%59 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%60 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %59, i64 0
	%61 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %60, i64 0, i32 3
	%62 = load {i8*, i64, i64}*, {i8*, i64, i64}** %61, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %62, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$bf, i64 0, i32 0), i64 2})
	%63 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%64 = load i64, i64* %1, align 8
	%65 = load i64, i64* %3, align 8
	%66 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %63, i64 %64, i64 16, i1 false, i64 %65, %..string %66)
	br label %if.done-21

if.done-21:
	br label %match.done-22

match.done-22:
	ret void
}

define void @.fmt-4._pad(%fmt-4.Fmt_Info* %fi, %..string %s) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	; IfStmt
	; SelectorExpr
	%3 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%4 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%5 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %4, i64 0, i32 9
	%6 = load i1, i1* %5, align 1
	br i1 %6, label %cmp.or-1, label %if.then-2

cmp.or-1:
	; SelectorExpr
	%7 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%8 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %7, i64 0
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp eq i64 %10, 0
	br i1 %11, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %13, i64 0, i32 3
	%15 = load {i8*, i64, i64}*, {i8*, i64, i64}** %14, align 8
	%16 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %15, %..string %16)
	; ReturnStmt
	ret void

if.done-3:
	; width
	store i64 zeroinitializer, i64* %2
		; SelectorExpr
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %17, i64 0
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	; SelectorExpr
	%21 = load %..string, %..string* %1, align 8
	%22 = call i64 @.utf8-5.rune_count-1976290375728(%..string %21)
	%23 = sub i64 %20, %22
	store i64 %23, i64* %2
	; IfStmt
	; SelectorExpr
	%24 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %25, i64 0, i32 4
	%27 = load i1, i1* %26, align 1
	br i1 %27, label %if.then-4, label %if.else-5

if.then-4:
	; SelectorExpr
	%28 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %29, i64 0, i32 3
	%31 = load {i8*, i64, i64}*, {i8*, i64, i64}** %30, align 8
	%32 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %31, %..string %32)
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = load i64, i64* %2, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %33, i64 %34)
	br label %if.done-6

if.else-5:
	%35 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%36 = load i64, i64* %2, align 8
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %35, i64 %36)
	; SelectorExpr
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0, i32 3
	%40 = load {i8*, i64, i64}*, {i8*, i64, i64}** %39, align 8
	%41 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %40, %..string %41)
	br label %if.done-6

if.done-6:
	ret void
}

define void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %fi, double %v, i64 %bit_size, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca double, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca i64, align 8
	%5 = alloca [128 x i8], align 1
	%6 = alloca %..string, align 8
	%7 = alloca {i8*, i64, i64}, align 8
	%8 = alloca {i8*, i64, i64}, align 8
	%9 = alloca %..string, align 8
	%10 = alloca %..string, align 8
	%11 = alloca %..string, align 8
	%12 = alloca %..string, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store double zeroinitializer, double* %1
		store double %v, double* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%13 = load i32, i32* %3, align 4
	%14 = icmp eq i32 %13, 102
	br i1 %14, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%15 = icmp eq i32 %13, 70
	br i1 %15, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%16 = icmp eq i32 %13, 118
	br i1 %16, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%17 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%18 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %17, i32 %18)
	; ReturnStmt
	ret void

match.case.body-4:
	; prec
	store i64 zeroinitializer, i64* %4
		store i64 3, i64* %4
	; IfStmt
	; SelectorExpr
	%19 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0
	%21 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %20, i64 0, i32 10
	%22 = load i1, i1* %21, align 1
	br i1 %22, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%23 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%24 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %23, i64 0
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %24, i64 0, i32 2
	%26 = load i64, i64* %25, align 8
	store i64 %26, i64* %4
	br label %if.done-6

if.done-6:
	; buf
	store [128 x i8] zeroinitializer, [128 x i8]* %5
		; str
	store %..string zeroinitializer, %..string* %6
		; SelectorExpr
	; SliceExpr
	%27 = load [128 x i8], [128 x i8]* %5, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c0, i64 0, i32 0), i64 37}, i64 587, i64 34, i64 1, i64 1, i64 128)
	%28 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i32 0
	%29 = getelementptr inbounds i8, i8* %28, i64 1
	%30 = sub i64 1, 1
	%31 = sub i64 128, 1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %7
	%32 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 0
	store i8* %29, i8** %32
	%33 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 1
	store i64 %30, i64* %33
	%34 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %7, i64 0, i32 2
	store i64 %31, i64* %34
	%35 = load {i8*, i64, i64}, {i8*, i64, i64}* %7, align 8
	%36 = load double, double* %1, align 8
	%37 = load i64, i64* %4, align 8
	%38 = load i64, i64* %2, align 8
	%39 = call %..string @.strconv-21.append_float({i8*, i64, i64} %35, double %36, i8 102, i64 %37, i64 %38)
	store %..string %39, %..string* %6
	; AssignStmt
	; SliceExpr
	%40 = load %..string, %..string* %6, align 8
	%41 = extractvalue %..string %40, 1
	%42 = add i64 %41, 1
	%43 = load [128 x i8], [128 x i8]* %5, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c1, i64 0, i32 0), i64 37}, i64 588, i64 24, i64 0, i64 %42, i64 128)
	%44 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i32 0
	%45 = getelementptr inbounds i8, i8* %44, i64 0
	%46 = sub i64 %42, 0
	%47 = sub i64 128, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %8
	%48 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 0
	store i8* %45, i8** %48
	%49 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 1
	store i64 %46, i64* %49
	%50 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %8, i64 0, i32 2
	store i64 %47, i64* %50
	%51 = load {i8*, i64, i64}, {i8*, i64, i64}* %8, align 8
	; cast - cast
	%52 = extractvalue {i8*, i64, i64} %51, 0
	%53 = extractvalue {i8*, i64, i64} %51, 1
	store %..string zeroinitializer, %..string* %9
	%54 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	%55 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i8* %52, i8** %54
	store i64 %53, i64* %55
	%56 = load %..string, %..string* %9, align 8
	store %..string %56, %..string* %6
	; IfStmt
	; IndexExpr
	%57 = load %..string, %..string* %6, align 8
	%58 = extractvalue %..string %57, 0
	%59 = extractvalue %..string %57, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c2, i64 0, i32 0), i64 37}, i64 589, i64 10, i64 1, i64 %59)
	%60 = getelementptr inbounds i8, i8* %58, i64 1
	%61 = load i8, i8* %60, align 1
	%62 = icmp eq i8 %61, 43
	br i1 %62, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; IndexExpr
	%63 = load %..string, %..string* %6, align 8
	%64 = extractvalue %..string %63, 0
	%65 = extractvalue %..string %63, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c3, i64 0, i32 0), i64 37}, i64 589, i64 27, i64 1, i64 %65)
	%66 = getelementptr inbounds i8, i8* %64, i64 1
	%67 = load i8, i8* %66, align 1
	%68 = icmp eq i8 %67, 45
	br i1 %68, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; SliceExpr
	%69 = load %..string, %..string* %6, align 8
	%70 = extractvalue %..string %69, 1
	%71 = extractvalue %..string %69, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c4, i64 0, i32 0), i64 37}, i64 590, i64 13, i64 1, i64 %70)
	%72 = extractvalue %..string %69, 0
	%73 = getelementptr inbounds i8, i8* %72, i64 1
	%74 = sub i64 %70, 1
	store %..string zeroinitializer, %..string* %10
	%75 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %73, i8** %75
	%76 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %74, i64* %76
	%77 = load %..string, %..string* %10, align 8
	store %..string %77, %..string* %6
	br label %if.done-10

if.else-9:
	; AssignStmt
	; IndexExpr
	%78 = load %..string, %..string* %6, align 8
	%79 = extractvalue %..string %78, 0
	%80 = extractvalue %..string %78, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c5, i64 0, i32 0), i64 37}, i64 592, i64 8, i64 0, i64 %80)
	%81 = getelementptr inbounds i8, i8* %79, i64 0
	store i8 43, i8* %81
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%82 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%83 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %82, i64 0
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %83, i64 0, i32 6
	%85 = load i1, i1* %84, align 1
	br i1 %85, label %cmp.and-11, label %if.done-14

cmp.and-11:
	; SelectorExpr
	%86 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%87 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %86, i64 0
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0, i32 5
	%89 = load i1, i1* %88, align 1
	br i1 %89, label %if.done-14, label %cmp.and-12

cmp.and-12:
	; IndexExpr
	%90 = load %..string, %..string* %6, align 8
	%91 = extractvalue %..string %90, 0
	%92 = extractvalue %..string %90, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c6, i64 0, i32 0), i64 37}, i64 595, i64 34, i64 0, i64 %92)
	%93 = getelementptr inbounds i8, i8* %91, i64 0
	%94 = load i8, i8* %93, align 1
	%95 = icmp eq i8 %94, 43
	br i1 %95, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; IndexExpr
	%96 = load %..string, %..string* %6, align 8
	%97 = extractvalue %..string %96, 0
	%98 = extractvalue %..string %96, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c7, i64 0, i32 0), i64 37}, i64 596, i64 8, i64 0, i64 %98)
	%99 = getelementptr inbounds i8, i8* %97, i64 0
	store i8 32, i8* %99
	br label %if.done-14

if.done-14:
	; IfStmt
	; IndexExpr
	%100 = load %..string, %..string* %6, align 8
	%101 = extractvalue %..string %100, 0
	%102 = extractvalue %..string %100, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c8, i64 0, i32 0), i64 37}, i64 599, i64 10, i64 1, i64 %102)
	%103 = getelementptr inbounds i8, i8* %101, i64 1
	%104 = load i8, i8* %103, align 1
	%105 = icmp eq i8 %104, 78
	br i1 %105, label %cmp.and-15, label %if.done-17

cmp.and-15:
	; IndexExpr
	%106 = load %..string, %..string* %6, align 8
	%107 = extractvalue %..string %106, 0
	%108 = extractvalue %..string %106, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$c9, i64 0, i32 0), i64 37}, i64 599, i64 27, i64 1, i64 %108)
	%109 = getelementptr inbounds i8, i8* %107, i64 1
	%110 = load i8, i8* %109, align 1
	%111 = icmp eq i8 %110, 73
	br i1 %111, label %if.then-16, label %if.done-17

if.then-16:
	; SelectorExpr
	%112 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%113 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %112, i64 0
	%114 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %113, i64 0, i32 3
	%115 = load {i8*, i64, i64}*, {i8*, i64, i64}** %114, align 8
	%116 = load %..string, %..string* %6, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %115, %..string %116)
	; ReturnStmt
	ret void

if.done-17:
	; IfStmt
	; SelectorExpr
	%117 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%118 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %117, i64 0
	%119 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %118, i64 0, i32 5
	%120 = load i1, i1* %119, align 1
	br i1 %120, label %if.then-19, label %cmp.or-18

cmp.or-18:
	; IndexExpr
	%121 = load %..string, %..string* %6, align 8
	%122 = extractvalue %..string %121, 0
	%123 = extractvalue %..string %121, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ca, i64 0, i32 0), i64 37}, i64 604, i64 21, i64 0, i64 %123)
	%124 = getelementptr inbounds i8, i8* %122, i64 0
	%125 = load i8, i8* %124, align 1
	%126 = icmp ne i8 %125, 43
	br i1 %126, label %if.then-19, label %if.else-25

if.then-19:
	; IfStmt
	; SelectorExpr
	%127 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%128 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %127, i64 0
	%129 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %128, i64 0, i32 7
	%130 = load i1, i1* %129, align 1
	br i1 %130, label %cmp.and-20, label %if.else-23

cmp.and-20:
	; SelectorExpr
	%131 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%132 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %131, i64 0
	%133 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %132, i64 0, i32 9
	%134 = load i1, i1* %133, align 1
	br i1 %134, label %cmp.and-21, label %if.else-23

cmp.and-21:
	; SelectorExpr
	%135 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%136 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %135, i64 0
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %136, i64 0, i32 1
	%138 = load i64, i64* %137, align 8
	%139 = load %..string, %..string* %6, align 8
	%140 = extractvalue %..string %139, 1
	%141 = icmp sgt i64 %138, %140
	br i1 %141, label %if.then-22, label %if.else-23

if.then-22:
	; SelectorExpr
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0
	%144 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %143, i64 0, i32 3
	%145 = load {i8*, i64, i64}*, {i8*, i64, i64}** %144, align 8
	; IndexExpr
	%146 = load %..string, %..string* %6, align 8
	%147 = extractvalue %..string %146, 0
	%148 = extractvalue %..string %146, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$cb, i64 0, i32 0), i64 37}, i64 606, i64 28, i64 0, i64 %148)
	%149 = getelementptr inbounds i8, i8* %147, i64 0
	%150 = load i8, i8* %149, align 1
	call void @.fmt-4.write_byte({i8*, i64, i64}* %145, i8 %150)
	%151 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%152 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%153 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %152, i64 0
	%154 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %153, i64 0, i32 1
	%155 = load i64, i64* %154, align 8
	%156 = load %..string, %..string* %6, align 8
	%157 = extractvalue %..string %156, 1
	%158 = sub i64 %155, %157
	call void @.fmt-4.fmt_write_padding(%fmt-4.Fmt_Info* %151, i64 %158)
	; SelectorExpr
	%159 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%160 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %159, i64 0
	%161 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %160, i64 0, i32 3
	%162 = load {i8*, i64, i64}*, {i8*, i64, i64}** %161, align 8
	; SliceExpr
	%163 = load %..string, %..string* %6, align 8
	%164 = extractvalue %..string %163, 1
	%165 = extractvalue %..string %163, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$cc, i64 0, i32 0), i64 37}, i64 608, i64 29, i64 1, i64 %164)
	%166 = extractvalue %..string %163, 0
	%167 = getelementptr inbounds i8, i8* %166, i64 1
	%168 = sub i64 %164, 1
	store %..string zeroinitializer, %..string* %11
	%169 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 0
	store i8* %167, i8** %169
	%170 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 1
	store i64 %168, i64* %170
	%171 = load %..string, %..string* %11, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %162, %..string %171)
	br label %if.done-24

if.else-23:
	%172 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%173 = load %..string, %..string* %6, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %172, %..string %173)
	br label %if.done-24

if.done-24:
	br label %if.done-26

if.else-25:
	%174 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SliceExpr
	%175 = load %..string, %..string* %6, align 8
	%176 = extractvalue %..string %175, 1
	%177 = extractvalue %..string %175, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$cd, i64 0, i32 0), i64 37}, i64 613, i64 16, i64 1, i64 %176)
	%178 = extractvalue %..string %175, 0
	%179 = getelementptr inbounds i8, i8* %178, i64 1
	%180 = sub i64 %176, 1
	store %..string zeroinitializer, %..string* %12
	%181 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 0
	store i8* %179, i8** %181
	%182 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 1
	store i64 %180, i64* %182
	%183 = load %..string, %..string* %12, align 8
	call void @.fmt-4._pad(%fmt-4.Fmt_Info* %174, %..string %183)
	br label %if.done-26

if.done-26:
	br label %match.done-27

match.done-27:
	ret void
}

define void @.fmt-4.fmt_string(%fmt-4.Fmt_Info* %fi, %..string %s, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i32, align 4
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %s, %..string* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 115
	br i1 %4, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%5 = icmp eq i32 %3, 118
	br i1 %5, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%6 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%7 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %6, i32 %7)
	br label %match.done-4

match.case.body-3:
	; SelectorExpr
	%8 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %9, i64 0, i32 3
	%11 = load {i8*, i64, i64}*, {i8*, i64, i64}** %10, align 8
	%12 = load %..string, %..string* %1, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %11, %..string %12)
	br label %match.done-4

match.done-4:
	ret void
}

define void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %fi, %..rawptr %p, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca i32, align 4
	%3 = alloca i64, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; MatchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 112
	br i1 %5, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%7 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %7, i32 %8)
	; ReturnStmt
	ret void

match.case.body-3:
	br label %match.done-4

match.done-4:
	; u
	store i64 zeroinitializer, i64* %3
		%9 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%10 = ptrtoint %..rawptr %9 to i64
	; cast - cast
	%11 = bitcast i64 %10 to i64
	store i64 %11, i64* %3
	; IfStmt
	; SelectorExpr
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %13, i64 0, i32 8
	%15 = load i1, i1* %14, align 1
	br i1 %15, label %cmp.or-5, label %if.then-6

cmp.or-5:
	%16 = load i32, i32* %2, align 4
	%17 = icmp eq i32 %16, 118
	br i1 %17, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%18 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %19, i64 0, i32 3
	%21 = load {i8*, i64, i64}*, {i8*, i64, i64}** %20, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %21, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$ce, i64 0, i32 0), i64 2})
	br label %if.done-7

if.done-7:
	%22 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%23 = load i64, i64* %3, align 8
	%24 = load %..string, %..string* @.fmt-4.__DIGITS_UPPER, align 8
	call void @.fmt-4._write_int(%fmt-4.Fmt_Info* %22, i64 %23, i64 16, i1 false, i64 64, %..string %24)
	ret void
}

define void @.fmt-4.fmt_enum(%fmt-4.Fmt_Info* %fi, %..any %v, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info.Enum, align 8
	%4 = alloca %..any, align 8
	%5 = alloca i64, align 8
	%6 = alloca double, align 8
	%7 = alloca i1, align 1
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca i8, align 1
	%11 = alloca i16, align 2
	%12 = alloca i32, align 4
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i16, align 2
	%17 = alloca i32, align 4
	%18 = alloca i64, align 8
	%19 = alloca i64, align 8
	%20 = alloca float, align 4
	%21 = alloca i64, align 8
	%22 = alloca double, align 8
	%23 = alloca i64, align 8
	%24 = alloca {[0 x <8 x i8>], [8 x i8]}, align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	%28 = alloca {[0 x <8 x i8>], [8 x i8]}, align 8
	%29 = alloca i64, align 8
	%30 = alloca i64, align 8
	%31 = alloca i64, align 8
	%32 = alloca %Type_Info*, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %v, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%33 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%34 = load %Type_Info*, %Type_Info** %33, align 8
	%35 = icmp eq %Type_Info* %34, zeroinitializer
	br i1 %35, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%36 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%37 = load %..rawptr, %..rawptr* %36, align 8
	%38 = icmp eq %..rawptr %37, zeroinitializer
	br i1 %38, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%39 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %40, i64 0, i32 3
	%42 = load {i8*, i64, i64}*, {i8*, i64, i64}** %41, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %42, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$cf, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; TypeMatchStmt
	; SelectorExpr
	%43 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%44 = load %Type_Info*, %Type_Info** %43, align 8
	; get union's tag
	%45 = getelementptr inbounds %Type_Info, %Type_Info* %44, i64 0, i32 2 ; UnionTagPtr
	%46 = load i64, i64* %45, align 8
	%47 = bitcast %Type_Info* %44 to %..rawptr
	%48 = icmp eq i64 %46, 19
	br i1 %48, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	store %Type_Info* zeroinitializer, %Type_Info** %32
	store %Type_Info* %44, %Type_Info** %32
	%49 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%50 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %49, i32 %50)
	; ReturnStmt
	ret void

typematch.body-5:
	%51 = bitcast %..rawptr %47 to %Type_Info.Enum*
	%52 = load %Type_Info.Enum, %Type_Info.Enum* %51, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %3
	store %Type_Info.Enum %52, %Type_Info.Enum* %3
	; MatchStmt
	%53 = load i32, i32* %2, align 4
	%54 = icmp eq i32 %53, 100
	br i1 %54, label %match.case.body-8, label %match.case.next-6

match.case.next-6:
	%55 = icmp eq i32 %53, 102
	br i1 %55, label %match.case.body-8, label %match.case.next-7

match.case.next-7:
	%56 = icmp eq i32 %53, 115
	br i1 %56, label %match.fall.body-11, label %match.case.next-9

match.case.body-8:
	%57 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %4
	store %..any zeroinitializer, %..any* %4
	; SelectorExpr
	%58 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%59 = load %Type_Info*, %Type_Info** %58, align 8
	%60 = call %Type_Info* @.type_info_base(%Type_Info* %59)
	%61 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %Type_Info* %60, %Type_Info** %61
	; SelectorExpr
	%62 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %..rawptr %63, %..rawptr* %64
	%65 = load %..any, %..any* %4, align 8
	%66 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %57, %..any %65, i32 %66)
	br label %match.done-55

match.case.next-9:
	%67 = icmp eq i32 %53, 118
	br i1 %67, label %match.fall.body-11, label %match.case.next-10

match.case.next-10:
	%68 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%69 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %68, i32 %69)
	; ReturnStmt
	ret void

match.fall.body-11:
	; i
	store i64 zeroinitializer, i64* %5
		; f
	store double zeroinitializer, double* %6
		; ok
	store i1 zeroinitializer, i1* %7
		store i1 false, i1* %7
	; a
	store %..any zeroinitializer, %..any* %8
		; CompoundLit
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; SelectorExpr
	%70 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%71 = load %Type_Info*, %Type_Info** %70, align 8
	%72 = call %Type_Info* @.type_info_base(%Type_Info* %71)
	%73 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %Type_Info* %72, %Type_Info** %73
	; SelectorExpr
	%74 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%75 = load %..rawptr, %..rawptr* %74, align 8
	%76 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..rawptr %75, %..rawptr* %76
	%77 = load %..any, %..any* %9, align 8
	store %..any %77, %..any* %8
	; TypeMatchStmt
	%78 = load %..any, %..any* %8, align 8
	%79 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%80 = load %Type_Info*, %Type_Info** %79, align 8
	%81 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%82 = icmp eq %Type_Info* %80, %81
	br i1 %82, label %typematch.body-13, label %typematch.next-12

typematch.next-12:
	%83 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%84 = load %Type_Info*, %Type_Info** %83, align 8
	%85 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%86 = icmp eq %Type_Info* %84, %85
	br i1 %86, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%87 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%88 = load %..rawptr, %..rawptr* %87, align 8
	%89 = bitcast %..rawptr %88 to i8*
	%90 = load i8, i8* %89, align 1
	store i8 zeroinitializer, i8* %10
	store i8 %90, i8* %10
	; AssignStmt
	%91 = load i8, i8* %10, align 1
	; cast - cast
	%92 = sext i8 %91 to i64
	store i64 %92, i64* %5
	br label %typematch.done-36

typematch.next-14:
	%93 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%94 = load %Type_Info*, %Type_Info** %93, align 8
	%95 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%96 = icmp eq %Type_Info* %94, %95
	br i1 %96, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%97 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%98 = load %..rawptr, %..rawptr* %97, align 8
	%99 = bitcast %..rawptr %98 to i16*
	%100 = load i16, i16* %99, align 2
	store i16 zeroinitializer, i16* %11
	store i16 %100, i16* %11
	; AssignStmt
	%101 = load i16, i16* %11, align 2
	; cast - cast
	%102 = sext i16 %101 to i64
	store i64 %102, i64* %5
	br label %typematch.done-36

typematch.next-16:
	%103 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%104 = load %Type_Info*, %Type_Info** %103, align 8
	%105 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	%106 = icmp eq %Type_Info* %104, %105
	br i1 %106, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%107 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%108 = load %..rawptr, %..rawptr* %107, align 8
	%109 = bitcast %..rawptr %108 to i32*
	%110 = load i32, i32* %109, align 4
	store i32 zeroinitializer, i32* %12
	store i32 %110, i32* %12
	; AssignStmt
	%111 = load i32, i32* %12, align 4
	; cast - cast
	%112 = sext i32 %111 to i64
	store i64 %112, i64* %5
	br label %typematch.done-36

typematch.next-18:
	%113 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%114 = load %Type_Info*, %Type_Info** %113, align 8
	%115 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%116 = icmp eq %Type_Info* %114, %115
	br i1 %116, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%117 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%118 = load %..rawptr, %..rawptr* %117, align 8
	%119 = bitcast %..rawptr %118 to i64*
	%120 = load i64, i64* %119, align 8
	store i64 zeroinitializer, i64* %13
	store i64 %120, i64* %13
	; AssignStmt
	%121 = load i64, i64* %13, align 8
	; cast - cast
	store i64 %121, i64* %5
	br label %typematch.done-36

typematch.next-20:
	%122 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%123 = load %Type_Info*, %Type_Info** %122, align 8
	%124 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%125 = icmp eq %Type_Info* %123, %124
	br i1 %125, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%126 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%127 = load %..rawptr, %..rawptr* %126, align 8
	%128 = bitcast %..rawptr %127 to i64*
	%129 = load i64, i64* %128, align 8
	store i64 zeroinitializer, i64* %14
	store i64 %129, i64* %14
	; AssignStmt
	%130 = load i64, i64* %14, align 8
	; cast - cast
	%131 = bitcast i64 %130 to i64
	store i64 %131, i64* %5
	br label %typematch.done-36

typematch.next-22:
	%132 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%133 = load %Type_Info*, %Type_Info** %132, align 8
	%134 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%135 = icmp eq %Type_Info* %133, %134
	br i1 %135, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%136 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%137 = load %..rawptr, %..rawptr* %136, align 8
	%138 = bitcast %..rawptr %137 to i8*
	%139 = load i8, i8* %138, align 1
	store i8 zeroinitializer, i8* %15
	store i8 %139, i8* %15
	; AssignStmt
	%140 = load i8, i8* %15, align 1
	; cast - cast
	%141 = zext i8 %140 to i64
	store i64 %141, i64* %5
	br label %typematch.done-36

typematch.next-24:
	%142 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%143 = load %Type_Info*, %Type_Info** %142, align 8
	%144 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%145 = icmp eq %Type_Info* %143, %144
	br i1 %145, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%146 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%147 = load %..rawptr, %..rawptr* %146, align 8
	%148 = bitcast %..rawptr %147 to i16*
	%149 = load i16, i16* %148, align 2
	store i16 zeroinitializer, i16* %16
	store i16 %149, i16* %16
	; AssignStmt
	%150 = load i16, i16* %16, align 2
	; cast - cast
	%151 = zext i16 %150 to i64
	store i64 %151, i64* %5
	br label %typematch.done-36

typematch.next-26:
	%152 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%153 = load %Type_Info*, %Type_Info** %152, align 8
	%154 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%155 = icmp eq %Type_Info* %153, %154
	br i1 %155, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%156 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%157 = load %..rawptr, %..rawptr* %156, align 8
	%158 = bitcast %..rawptr %157 to i32*
	%159 = load i32, i32* %158, align 4
	store i32 zeroinitializer, i32* %17
	store i32 %159, i32* %17
	; AssignStmt
	%160 = load i32, i32* %17, align 4
	; cast - cast
	%161 = zext i32 %160 to i64
	store i64 %161, i64* %5
	br label %typematch.done-36

typematch.next-28:
	%162 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%163 = load %Type_Info*, %Type_Info** %162, align 8
	%164 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%165 = icmp eq %Type_Info* %163, %164
	br i1 %165, label %typematch.body-31, label %typematch.next-30

typematch.body-29:
	%166 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%167 = load %..rawptr, %..rawptr* %166, align 8
	%168 = bitcast %..rawptr %167 to i64*
	%169 = load i64, i64* %168, align 8
	store i64 zeroinitializer, i64* %18
	store i64 %169, i64* %18
	; AssignStmt
	%170 = load i64, i64* %18, align 8
	; cast - cast
	%171 = bitcast i64 %170 to i64
	store i64 %171, i64* %5
	br label %typematch.done-36

typematch.next-30:
	%172 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%173 = load %Type_Info*, %Type_Info** %172, align 8
	%174 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%175 = icmp eq %Type_Info* %173, %174
	br i1 %175, label %typematch.body-33, label %typematch.next-32

typematch.body-31:
	%176 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%177 = load %..rawptr, %..rawptr* %176, align 8
	%178 = bitcast %..rawptr %177 to i64*
	%179 = load i64, i64* %178, align 8
	store i64 zeroinitializer, i64* %19
	store i64 %179, i64* %19
	; AssignStmt
	%180 = load i64, i64* %19, align 8
	; cast - cast
	%181 = bitcast i64 %180 to i64
	store i64 %181, i64* %5
	br label %typematch.done-36

typematch.next-32:
	%182 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%183 = load %Type_Info*, %Type_Info** %182, align 8
	%184 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%185 = icmp eq %Type_Info* %183, %184
	br i1 %185, label %typematch.body-35, label %typematch.next-34

typematch.body-33:
	%186 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%187 = load %..rawptr, %..rawptr* %186, align 8
	%188 = bitcast %..rawptr %187 to float*
	%189 = load float, float* %188, align 4
	store float zeroinitializer, float* %20
	store float %189, float* %20
	; AssignStmt
	%190 = load float, float* %20, align 4
	; cast - cast
	%191 = fpext float %190 to double
	store double %191, double* %6
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %21
	%192 = load double, double* %6, align 8
	%193 = bitcast double %192 to i64
	store i64 %193, i64* %21
	%194 = load i64, i64* %21, align 8
	store i64 %194, i64* %5
	br label %typematch.done-36

typematch.next-34:
	br label %typematch.done-36

typematch.body-35:
	%195 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	%196 = load %..rawptr, %..rawptr* %195, align 8
	%197 = bitcast %..rawptr %196 to double*
	%198 = load double, double* %197, align 8
	store double zeroinitializer, double* %22
	store double %198, double* %22
	; AssignStmt
	%199 = load double, double* %22, align 8
	; cast - cast
	store double %199, double* %6
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %23
	%200 = load double, double* %6, align 8
	%201 = bitcast double %200 to i64
	store i64 %201, i64* %23
	%202 = load i64, i64* %23, align 8
	store i64 %202, i64* %5
	br label %typematch.done-36

typematch.done-36:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%203 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 0
	%204 = load %Type_Info*, %Type_Info** %203, align 8
	%205 = call i1 @.types-20.is_string(%Type_Info* %204)
	br i1 %205, label %if.then-37, label %if.else-43

if.then-37:
	; RangeStmt
	; val
	store {[0 x <8 x i8>], [8 x i8]} zeroinitializer, {[0 x <8 x i8>], [8 x i8]}* %24
		; idx
	store i64 zeroinitializer, i64* %25
		; SelectorExpr
	%206 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 2
	%207 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %206, align 8
	store i64 zeroinitializer, i64* %26
	%208 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %207, 1
	store i64 %208, i64* %26
	store i64 zeroinitializer, i64* %27
	store i64 -1, i64* %27
	br label %for.index.loop-38

for.index.loop-38:
	%209 = load i64, i64* %27, align 8
	%210 = add i64 %209, 1
	store i64 %210, i64* %27
	%211 = load i64, i64* %26, align 8
	%212 = icmp slt i64 %210, %211
	br i1 %212, label %for.index.body-39, label %for.index.done-42

for.index.body-39:
	%213 = load i64, i64* %27, align 8
	%214 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %207, 0
	%215 = getelementptr inbounds {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %214, i64 %213
	%216 = load {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %215, align 8
	store {[0 x <8 x i8>], [8 x i8]} %216, {[0 x <8 x i8>], [8 x i8]}* %24
	store i64 %213, i64* %25
	; IfStmt
	; SelectorExpr
	%217 = bitcast {[0 x <8 x i8>], [8 x i8]}* %24 to i64*
	%218 = load i64, i64* %217, align 8
	%219 = load i64, i64* %5, align 8
	%220 = icmp eq i64 %218, %219
	br i1 %220, label %if.then-40, label %if.done-41

if.then-40:
	; SelectorExpr
	%221 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%222 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %221, i64 0
	%223 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %222, i64 0, i32 3
	%224 = load {i8*, i64, i64}*, {i8*, i64, i64}** %223, align 8
	; IndexExpr
	; SelectorExpr
	%225 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 1
	%226 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %225, align 8
	%227 = extractvalue {%..string*, i64, i64} %226, 0
	%228 = extractvalue {%..string*, i64, i64} %226, 1
	%229 = load i64, i64* %25, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$d0, i64 0, i32 0), i64 37}, i64 683, i64 36, i64 %229, i64 %228)
	%230 = getelementptr inbounds %..string, %..string* %227, i64 %229
	%231 = load %..string, %..string* %230, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %224, %..string %231)
	; AssignStmt
	store i1 true, i1* %7
	; break
	br label %for.index.done-42

if.done-41:
	br label %for.index.loop-38

for.index.done-42:
	br label %if.done-52

if.else-43:
	; IfStmt
	; SelectorExpr
	%232 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 2
	%233 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %232, align 8
	%234 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %233, 1
	%235 = icmp eq i64 %234, 0
	br i1 %235, label %if.then-44, label %if.else-45

if.then-44:
	; SelectorExpr
	%236 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%237 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %236, i64 0
	%238 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %237, i64 0, i32 3
	%239 = load {i8*, i64, i64}*, {i8*, i64, i64}** %238, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %239, %..string zeroinitializer)
	; AssignStmt
	store i1 true, i1* %7
	br label %if.done-51

if.else-45:
	; RangeStmt
	; val
	store {[0 x <8 x i8>], [8 x i8]} zeroinitializer, {[0 x <8 x i8>], [8 x i8]}* %28
		; idx
	store i64 zeroinitializer, i64* %29
		; SelectorExpr
	%240 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 2
	%241 = load {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %240, align 8
	store i64 zeroinitializer, i64* %30
	%242 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %241, 1
	store i64 %242, i64* %30
	store i64 zeroinitializer, i64* %31
	store i64 -1, i64* %31
	br label %for.index.loop-46

for.index.loop-46:
	%243 = load i64, i64* %31, align 8
	%244 = add i64 %243, 1
	store i64 %244, i64* %31
	%245 = load i64, i64* %30, align 8
	%246 = icmp slt i64 %244, %245
	br i1 %246, label %for.index.body-47, label %for.index.done-50

for.index.body-47:
	%247 = load i64, i64* %31, align 8
	%248 = extractvalue {{[0 x <8 x i8>], [8 x i8]}*, i64, i64} %241, 0
	%249 = getelementptr inbounds {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %248, i64 %247
	%250 = load {[0 x <8 x i8>], [8 x i8]}, {[0 x <8 x i8>], [8 x i8]}* %249, align 8
	store {[0 x <8 x i8>], [8 x i8]} %250, {[0 x <8 x i8>], [8 x i8]}* %28
	store i64 %247, i64* %29
	; IfStmt
	; SelectorExpr
	%251 = bitcast {[0 x <8 x i8>], [8 x i8]}* %28 to i64*
	%252 = load i64, i64* %251, align 8
	%253 = load i64, i64* %5, align 8
	%254 = icmp eq i64 %252, %253
	br i1 %254, label %if.then-48, label %if.done-49

if.then-48:
	; SelectorExpr
	%255 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%256 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %255, i64 0
	%257 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %256, i64 0, i32 3
	%258 = load {i8*, i64, i64}*, {i8*, i64, i64}** %257, align 8
	; IndexExpr
	; SelectorExpr
	%259 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3, i64 0, i32 1
	%260 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %259, align 8
	%261 = extractvalue {%..string*, i64, i64} %260, 0
	%262 = extractvalue {%..string*, i64, i64} %260, 1
	%263 = load i64, i64* %29, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$d1, i64 0, i32 0), i64 37}, i64 694, i64 36, i64 %263, i64 %262)
	%264 = getelementptr inbounds %..string, %..string* %261, i64 %263
	%265 = load %..string, %..string* %264, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %258, %..string %265)
	; AssignStmt
	store i1 true, i1* %7
	; break
	br label %for.index.done-50

if.done-49:
	br label %for.index.loop-46

for.index.done-50:
	br label %if.done-51

if.done-51:
	br label %if.done-52

if.done-52:
	; IfStmt
	%266 = load i1, i1* %7, align 1
	br i1 %266, label %if.done-54, label %if.then-53

if.then-53:
	; SelectorExpr
	%267 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%268 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %267, i64 0
	%269 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %268, i64 0, i32 3
	%270 = load {i8*, i64, i64}*, {i8*, i64, i64}** %269, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %270, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$d2, i64 0, i32 0), i64 18})
	br label %if.done-54

if.done-54:
	br label %match.done-55

match.done-55:
	br label %typematch.done-56

typematch.done-56:
	ret void
}

define void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %fi, %..any %v, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info.Named, align 8
	%4 = alloca %Type_Info.Struct, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i8*, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %Type_Info*, align 8
	%11 = alloca %..any, align 8
	%12 = alloca %Type_Info.Boolean, align 1
	%13 = alloca %Type_Info.Integer, align 8
	%14 = alloca %Type_Info.Float, align 8
	%15 = alloca %Type_Info.Complex, align 8
	%16 = alloca %Type_Info.Quaternion, align 8
	%17 = alloca %Type_Info.String, align 1
	%18 = alloca %Type_Info.Pointer, align 8
	%19 = alloca %Type_Info.Array, align 8
	%20 = alloca i64, align 8
	%21 = alloca i64, align 8
	%22 = alloca i64, align 8
	%23 = alloca i8*, align 8
	%24 = alloca %..any, align 8
	%25 = alloca %Type_Info.Dynamic_Array, align 8
	%26 = alloca %Raw_Dynamic_Array*, align 8
	%27 = alloca i64, align 8
	%28 = alloca i64, align 8
	%29 = alloca i64, align 8
	%30 = alloca i8*, align 8
	%31 = alloca %..any, align 8
	%32 = alloca %Type_Info.Map, align 8
	%33 = alloca %Raw_Dynamic_Array*, align 8
	%34 = alloca %Raw_Dynamic_Map*, align 8
	%35 = alloca %Type_Info.Struct*, align 8
	%36 = alloca {%Type_Info.Struct*, i1}, align 8
	%37 = alloca %Type_Info.Dynamic_Array*, align 8
	%38 = alloca {%Type_Info.Dynamic_Array*, i1}, align 8
	%39 = alloca %Type_Info.Struct*, align 8
	%40 = alloca {%Type_Info.Struct*, i1}, align 8
	%41 = alloca i64, align 8
	%42 = alloca i64, align 8
	%43 = alloca i64, align 8
	%44 = alloca i64, align 8
	%45 = alloca i8*, align 8
	%46 = alloca %__Map_Entry_Header*, align 8
	%47 = alloca %fmt-4.Fmt_Info, align 8
	%48 = alloca %fmt-4.Fmt_Info, align 8
	%49 = alloca %..any, align 8
	%50 = alloca i8*, align 8
	%51 = alloca %..any, align 8
	%52 = alloca %Type_Info.Slice, align 8
	%53 = alloca {i8*, i64, i64}*, align 8
	%54 = alloca i64, align 8
	%55 = alloca i64, align 8
	%56 = alloca i64, align 8
	%57 = alloca i8*, align 8
	%58 = alloca %..any, align 8
	%59 = alloca %Type_Info.Vector, align 8
	%60 = alloca i64, align 8
	%61 = alloca i64, align 8
	%62 = alloca i64, align 8
	%63 = alloca i8*, align 8
	%64 = alloca %..any, align 8
	%65 = alloca %Type_Info.Struct, align 8
	%66 = alloca i64, align 8
	%67 = alloca i64, align 8
	%68 = alloca i64, align 8
	%69 = alloca i8*, align 8
	%70 = alloca %..any, align 8
	%71 = alloca %Type_Info.Union, align 8
	%72 = alloca {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, align 8
	%73 = alloca i64, align 8
	%74 = alloca i64, align 8
	%75 = alloca i64, align 8
	%76 = alloca i8*, align 8
	%77 = alloca %..any, align 8
	%78 = alloca %Type_Info.Raw_Union, align 8
	%79 = alloca %Type_Info.Enum, align 8
	%80 = alloca %Type_Info.Procedure, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %v, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%81 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%82 = load %..rawptr, %..rawptr* %81, align 8
	%83 = icmp eq %..rawptr %82, zeroinitializer
	br i1 %83, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%84 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%85 = load %Type_Info*, %Type_Info** %84, align 8
	%86 = icmp eq %Type_Info* %85, zeroinitializer
	br i1 %86, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%87 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%88 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %87, i64 0
	%89 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %88, i64 0, i32 3
	%90 = load {i8*, i64, i64}*, {i8*, i64, i64}** %89, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %90, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$d3, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-3:
	; TypeMatchStmt
	; SelectorExpr
	%91 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%92 = load %Type_Info*, %Type_Info** %91, align 8
	; get union's tag
	%93 = getelementptr inbounds %Type_Info, %Type_Info* %92, i64 0, i32 2 ; UnionTagPtr
	%94 = load i64, i64* %93, align 8
	%95 = bitcast %Type_Info* %92 to %..rawptr
	%96 = icmp eq i64 %94, 1
	br i1 %96, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	%97 = icmp eq i64 %94, 7
	br i1 %97, label %typematch.body-17, label %typematch.next-16

typematch.body-5:
	%98 = bitcast %..rawptr %95 to %Type_Info.Named*
	%99 = load %Type_Info.Named, %Type_Info.Named* %98, align 8
	store %Type_Info.Named zeroinitializer, %Type_Info.Named* %3
	store %Type_Info.Named %99, %Type_Info.Named* %3
	; TypeMatchStmt
	; SelectorExpr
	%100 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3, i64 0, i32 1
	%101 = load %Type_Info*, %Type_Info** %100, align 8
	; get union's tag
	%102 = getelementptr inbounds %Type_Info, %Type_Info* %101, i64 0, i32 2 ; UnionTagPtr
	%103 = load i64, i64* %102, align 8
	%104 = bitcast %Type_Info* %101 to %..rawptr
	%105 = icmp eq i64 %103, 16
	br i1 %105, label %typematch.body-7, label %typematch.next-6

typematch.next-6:
	store %Type_Info* zeroinitializer, %Type_Info** %10
	store %Type_Info* %101, %Type_Info** %10
	%106 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %11
	store %..any zeroinitializer, %..any* %11
	; SelectorExpr
	%107 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3, i64 0, i32 1
	%108 = load %Type_Info*, %Type_Info** %107, align 8
	%109 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	store %Type_Info* %108, %Type_Info** %109
	; SelectorExpr
	%110 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%111 = load %..rawptr, %..rawptr* %110, align 8
	%112 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %..rawptr %111, %..rawptr* %112
	%113 = load %..any, %..any* %11, align 8
	%114 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %106, %..any %113, i32 %114)
	br label %typematch.done-15

typematch.body-7:
	%115 = bitcast %..rawptr %104 to %Type_Info.Struct*
	%116 = load %Type_Info.Struct, %Type_Info.Struct* %115, align 8
	store %Type_Info.Struct zeroinitializer, %Type_Info.Struct* %4
	store %Type_Info.Struct %116, %Type_Info.Struct* %4
	; IfStmt
	%117 = load i32, i32* %2, align 4
	%118 = icmp ne i32 %117, 118
	br i1 %118, label %if.then-8, label %if.done-9

if.then-8:
	%119 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%120 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %119, i32 %120)
	; ReturnStmt
	ret void

if.done-9:
	; SelectorExpr
	%121 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%122 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %121, i64 0
	%123 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %122, i64 0, i32 3
	%124 = load {i8*, i64, i64}*, {i8*, i64, i64}** %123, align 8
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3, i64 0, i32 0
	%126 = load %..string, %..string* %125, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %124, %..string %126)
	; SelectorExpr
	%127 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%128 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %127, i64 0
	%129 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %128, i64 0, i32 3
	%130 = load {i8*, i64, i64}*, {i8*, i64, i64}** %129, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %130, i8 123)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %5
		; SelectorExpr
	%131 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%132 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %131, i64 0, i32 1
	%133 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %132, align 8
	store i64 zeroinitializer, i64* %6
	%134 = extractvalue {%..string*, i64, i64} %133, 1
	store i64 %134, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 -1, i64* %7
	br label %for.index.loop-10

for.index.loop-10:
	%135 = load i64, i64* %7, align 8
	%136 = add i64 %135, 1
	store i64 %136, i64* %7
	%137 = load i64, i64* %6, align 8
	%138 = icmp slt i64 %136, %137
	br i1 %138, label %for.index.body-11, label %for.index.done-14

for.index.body-11:
	%139 = load i64, i64* %7, align 8
	store i64 %139, i64* %5
	; IfStmt
	%140 = load i64, i64* %5, align 8
	%141 = icmp sgt i64 %140, 0
	br i1 %141, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %142, i64 0
	%144 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %143, i64 0, i32 3
	%145 = load {i8*, i64, i64}*, {i8*, i64, i64}** %144, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %145, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$d4, i64 0, i32 0), i64 2})
	br label %if.done-13

if.done-13:
	; SelectorExpr
	%146 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%147 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %146, i64 0
	%148 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %147, i64 0, i32 3
	%149 = load {i8*, i64, i64}*, {i8*, i64, i64}** %148, align 8
	; IndexExpr
	; SelectorExpr
	%150 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%151 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %150, i64 0, i32 1
	%152 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %151, align 8
	%153 = extractvalue {%..string*, i64, i64} %152, 0
	%154 = extractvalue {%..string*, i64, i64} %152, 1
	%155 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$d5, i64 0, i32 0), i64 37}, i64 733, i64 34, i64 %155, i64 %154)
	%156 = getelementptr inbounds %..string, %..string* %153, i64 %155
	%157 = load %..string, %..string* %156, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %149, %..string %157)
	; SelectorExpr
	%158 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%159 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %158, i64 0
	%160 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %159, i64 0, i32 3
	%161 = load {i8*, i64, i64}*, {i8*, i64, i64}** %160, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %161, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$d6, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %8
		; SelectorExpr
	%162 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%163 = load %..rawptr, %..rawptr* %162, align 8
	; cast - cast
	%164 = bitcast %..rawptr %163 to i8*
	; IndexExpr
	; SelectorExpr
	%165 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%166 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %165, i64 0, i32 2
	%167 = load {i64*, i64, i64}, {i64*, i64, i64}* %166, align 8
	%168 = extractvalue {i64*, i64, i64} %167, 0
	%169 = extractvalue {i64*, i64, i64} %167, 1
	%170 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$d7, i64 0, i32 0), i64 37}, i64 735, i64 43, i64 %170, i64 %169)
	%171 = getelementptr inbounds i64, i64* %168, i64 %170
	%172 = load i64, i64* %171, align 8
	%173 = getelementptr inbounds i8, i8* %164, i64 %172
	store i8* %173, i8** %8
	%174 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %9
	store %..any zeroinitializer, %..any* %9
	; IndexExpr
	; SelectorExpr
	%175 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %4, i64 0, i32 0
	%176 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %175, i64 0, i32 0
	%177 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %176, align 8
	%178 = extractvalue {%Type_Info**, i64, i64} %177, 0
	%179 = extractvalue {%Type_Info**, i64, i64} %177, 1
	%180 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$d8, i64 0, i32 0), i64 37}, i64 736, i64 29, i64 %180, i64 %179)
	%181 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 %180
	%182 = load %Type_Info*, %Type_Info** %181, align 8
	%183 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	store %Type_Info* %182, %Type_Info** %183
	%184 = load i8*, i8** %8, align 8
	; cast - cast
	%185 = bitcast i8* %184 to %..rawptr
	%186 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %..rawptr %185, %..rawptr* %186
	%187 = load %..any, %..any* %9, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %174, %..any %187, i32 118)
	br label %for.index.loop-10

for.index.done-14:
	; SelectorExpr
	%188 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%189 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %188, i64 0
	%190 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %189, i64 0, i32 3
	%191 = load {i8*, i64, i64}*, {i8*, i64, i64}** %190, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %191, i8 125)
	br label %typematch.done-15

typematch.done-15:
	br label %typematch.done-105

typematch.next-16:
	%192 = icmp eq i64 %94, 2
	br i1 %192, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%193 = bitcast %..rawptr %95 to %Type_Info.Boolean*
	%194 = load %Type_Info.Boolean, %Type_Info.Boolean* %193, align 1
	store %Type_Info.Boolean zeroinitializer, %Type_Info.Boolean* %12
	store %Type_Info.Boolean %194, %Type_Info.Boolean* %12
	%195 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%196 = load %..any, %..any* %1, align 8
	%197 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %195, %..any %196, i32 %197)
	br label %typematch.done-105

typematch.next-18:
	%198 = icmp eq i64 %94, 3
	br i1 %198, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%199 = bitcast %..rawptr %95 to %Type_Info.Integer*
	%200 = load %Type_Info.Integer, %Type_Info.Integer* %199, align 8
	store %Type_Info.Integer zeroinitializer, %Type_Info.Integer* %13
	store %Type_Info.Integer %200, %Type_Info.Integer* %13
	%201 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%202 = load %..any, %..any* %1, align 8
	%203 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %201, %..any %202, i32 %203)
	br label %typematch.done-105

typematch.next-20:
	%204 = icmp eq i64 %94, 4
	br i1 %204, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%205 = bitcast %..rawptr %95 to %Type_Info.Float*
	%206 = load %Type_Info.Float, %Type_Info.Float* %205, align 8
	store %Type_Info.Float zeroinitializer, %Type_Info.Float* %14
	store %Type_Info.Float %206, %Type_Info.Float* %14
	%207 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%208 = load %..any, %..any* %1, align 8
	%209 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %207, %..any %208, i32 %209)
	br label %typematch.done-105

typematch.next-22:
	%210 = icmp eq i64 %94, 5
	br i1 %210, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%211 = bitcast %..rawptr %95 to %Type_Info.Complex*
	%212 = load %Type_Info.Complex, %Type_Info.Complex* %211, align 8
	store %Type_Info.Complex zeroinitializer, %Type_Info.Complex* %15
	store %Type_Info.Complex %212, %Type_Info.Complex* %15
	%213 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%214 = load %..any, %..any* %1, align 8
	%215 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %213, %..any %214, i32 %215)
	br label %typematch.done-105

typematch.next-24:
	%216 = icmp eq i64 %94, 6
	br i1 %216, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%217 = bitcast %..rawptr %95 to %Type_Info.Quaternion*
	%218 = load %Type_Info.Quaternion, %Type_Info.Quaternion* %217, align 8
	store %Type_Info.Quaternion zeroinitializer, %Type_Info.Quaternion* %16
	store %Type_Info.Quaternion %218, %Type_Info.Quaternion* %16
	%219 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%220 = load %..any, %..any* %1, align 8
	%221 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %219, %..any %220, i32 %221)
	br label %typematch.done-105

typematch.next-26:
	%222 = icmp eq i64 %94, 9
	br i1 %222, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%223 = bitcast %..rawptr %95 to %Type_Info.String*
	%224 = load %Type_Info.String, %Type_Info.String* %223, align 1
	store %Type_Info.String zeroinitializer, %Type_Info.String* %17
	store %Type_Info.String %224, %Type_Info.String* %17
	%225 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%226 = load %..any, %..any* %1, align 8
	%227 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %225, %..any %226, i32 %227)
	br label %typematch.done-105

typematch.next-28:
	%228 = icmp eq i64 %94, 11
	br i1 %228, label %typematch.body-34, label %typematch.next-33

typematch.body-29:
	%229 = bitcast %..rawptr %95 to %Type_Info.Pointer*
	%230 = load %Type_Info.Pointer, %Type_Info.Pointer* %229, align 8
	store %Type_Info.Pointer zeroinitializer, %Type_Info.Pointer* %18
	store %Type_Info.Pointer %230, %Type_Info.Pointer* %18
	; IfStmt
	; SelectorExpr
	%231 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%232 = load %Type_Info*, %Type_Info** %231, align 8
	%233 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%234 = icmp eq %Type_Info* %232, %233
	br i1 %234, label %if.then-30, label %if.else-31

if.then-30:
	; SelectorExpr
	%235 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%236 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %235, i64 0
	%237 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %236, i64 0, i32 3
	%238 = load {i8*, i64, i64}*, {i8*, i64, i64}** %237, align 8
	; SelectorExpr
	%239 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%240 = load %..rawptr, %..rawptr* %239, align 8
	; cast - cast
	%241 = bitcast %..rawptr %240 to %Type_Info**
	%242 = getelementptr inbounds %Type_Info*, %Type_Info** %241, i64 0
	%243 = load %Type_Info*, %Type_Info** %242, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %238, %Type_Info* %243)
	br label %if.done-32

if.else-31:
	%244 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%245 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%246 = load %..rawptr, %..rawptr* %245, align 8
	; cast - cast
	%247 = bitcast %..rawptr %246 to %..rawptr*
	%248 = getelementptr inbounds %..rawptr, %..rawptr* %247, i64 0
	%249 = load %..rawptr, %..rawptr* %248, align 8
	%250 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %244, %..rawptr %249, i32 %250)
	br label %if.done-32

if.done-32:
	br label %typematch.done-105

typematch.next-33:
	%251 = icmp eq i64 %94, 12
	br i1 %251, label %typematch.body-43, label %typematch.next-42

typematch.body-34:
	%252 = bitcast %..rawptr %95 to %Type_Info.Array*
	%253 = load %Type_Info.Array, %Type_Info.Array* %252, align 8
	store %Type_Info.Array zeroinitializer, %Type_Info.Array* %19
	store %Type_Info.Array %253, %Type_Info.Array* %19
	; IfStmt
	%254 = load i32, i32* %2, align 4
	%255 = icmp ne i32 %254, 118
	br i1 %255, label %if.then-35, label %if.done-36

if.then-35:
	%256 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%257 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %256, i32 %257)
	; ReturnStmt
	ret void

if.done-36:
	; SelectorExpr
	%258 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%259 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %258, i64 0
	%260 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %259, i64 0, i32 3
	%261 = load {i8*, i64, i64}*, {i8*, i64, i64}** %260, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %261, i8 91)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %20
		store i64 zeroinitializer, i64* %21
	store i64 0, i64* %21
	store i64 zeroinitializer, i64* %22
	store i64 0, i64* %22
	br label %for.interval.loop-37

for.interval.loop-37:
	; SelectorExpr
	%262 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %19, i64 0, i32 2
	%263 = load i64, i64* %262, align 8
	%264 = load i64, i64* %21, align 8
	%265 = icmp slt i64 %264, %263
	br i1 %265, label %for.interval.body-38, label %for.interval.done-41

for.interval.body-38:
	%266 = load i64, i64* %21, align 8
	%267 = load i64, i64* %22, align 8
	%268 = load i64, i64* %21, align 8
	%269 = add i64 %268, 1
	store i64 %269, i64* %21
	%270 = load i64, i64* %22, align 8
	%271 = add i64 %270, 1
	store i64 %271, i64* %22
	store i64 %266, i64* %20
	; IfStmt
	%272 = load i64, i64* %20, align 8
	%273 = icmp sgt i64 %272, 0
	br i1 %273, label %if.then-39, label %if.done-40

if.then-39:
	; SelectorExpr
	%274 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%275 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %274, i64 0
	%276 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %275, i64 0, i32 3
	%277 = load {i8*, i64, i64}*, {i8*, i64, i64}** %276, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %277, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$d9, i64 0, i32 0), i64 2})
	br label %if.done-40

if.done-40:
	; data
	store i8* zeroinitializer, i8** %23
		; SelectorExpr
	%278 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%279 = load %..rawptr, %..rawptr* %278, align 8
	; cast - cast
	%280 = bitcast %..rawptr %279 to i8*
	%281 = load i64, i64* %20, align 8
	; SelectorExpr
	%282 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %19, i64 0, i32 1
	%283 = load i64, i64* %282, align 8
	%284 = mul i64 %281, %283
	%285 = getelementptr inbounds i8, i8* %280, i64 %284
	store i8* %285, i8** %23
	%286 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %24
	store %..any zeroinitializer, %..any* %24
	; SelectorExpr
	%287 = getelementptr inbounds %Type_Info.Array, %Type_Info.Array* %19, i64 0, i32 0
	%288 = load %Type_Info*, %Type_Info** %287, align 8
	%289 = getelementptr inbounds %..any, %..any* %24, i64 0, i32 0
	store %Type_Info* %288, %Type_Info** %289
	%290 = load i8*, i8** %23, align 8
	; cast - cast
	%291 = bitcast i8* %290 to %..rawptr
	%292 = getelementptr inbounds %..any, %..any* %24, i64 0, i32 1
	store %..rawptr %291, %..rawptr* %292
	%293 = load %..any, %..any* %24, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %286, %..any %293, i32 118)
	br label %for.interval.loop-37

for.interval.done-41:
	; defer
	; SelectorExpr
	%294 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%295 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %294, i64 0
	%296 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %295, i64 0, i32 3
	%297 = load {i8*, i64, i64}*, {i8*, i64, i64}** %296, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %297, i8 93)
	br label %typematch.done-105

typematch.next-42:
	%298 = icmp eq i64 %94, 20
	br i1 %298, label %typematch.body-52, label %typematch.next-51

typematch.body-43:
	%299 = bitcast %..rawptr %95 to %Type_Info.Dynamic_Array*
	%300 = load %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %299, align 8
	store %Type_Info.Dynamic_Array zeroinitializer, %Type_Info.Dynamic_Array* %25
	store %Type_Info.Dynamic_Array %300, %Type_Info.Dynamic_Array* %25
	; IfStmt
	%301 = load i32, i32* %2, align 4
	%302 = icmp ne i32 %301, 118
	br i1 %302, label %if.then-44, label %if.done-45

if.then-44:
	%303 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%304 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %303, i32 %304)
	; ReturnStmt
	ret void

if.done-45:
	; SelectorExpr
	%305 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%306 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %305, i64 0
	%307 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %306, i64 0, i32 3
	%308 = load {i8*, i64, i64}*, {i8*, i64, i64}** %307, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %308, i8 91)
	; DeferStmt
	; array
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %26
		; SelectorExpr
	%309 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%310 = load %..rawptr, %..rawptr* %309, align 8
	; cast - cast
	%311 = bitcast %..rawptr %310 to %Raw_Dynamic_Array*
	store %Raw_Dynamic_Array* %311, %Raw_Dynamic_Array** %26
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %27
		store i64 zeroinitializer, i64* %28
	store i64 0, i64* %28
	store i64 zeroinitializer, i64* %29
	store i64 0, i64* %29
	br label %for.interval.loop-46

for.interval.loop-46:
	; SelectorExpr
	%312 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %26, align 8
	%313 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %312, i64 0
	%314 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %313, i64 0, i32 1
	%315 = load i64, i64* %314, align 8
	%316 = load i64, i64* %28, align 8
	%317 = icmp slt i64 %316, %315
	br i1 %317, label %for.interval.body-47, label %for.interval.done-50

for.interval.body-47:
	%318 = load i64, i64* %28, align 8
	%319 = load i64, i64* %29, align 8
	%320 = load i64, i64* %28, align 8
	%321 = add i64 %320, 1
	store i64 %321, i64* %28
	%322 = load i64, i64* %29, align 8
	%323 = add i64 %322, 1
	store i64 %323, i64* %29
	store i64 %318, i64* %27
	; IfStmt
	%324 = load i64, i64* %27, align 8
	%325 = icmp sgt i64 %324, 0
	br i1 %325, label %if.then-48, label %if.done-49

if.then-48:
	; SelectorExpr
	%326 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%327 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %326, i64 0
	%328 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %327, i64 0, i32 3
	%329 = load {i8*, i64, i64}*, {i8*, i64, i64}** %328, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %329, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$da, i64 0, i32 0), i64 2})
	br label %if.done-49

if.done-49:
	; data
	store i8* zeroinitializer, i8** %30
		; SelectorExpr
	%330 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %26, align 8
	%331 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %330, i64 0
	%332 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %331, i64 0, i32 0
	%333 = load %..rawptr, %..rawptr* %332, align 8
	; cast - cast
	%334 = bitcast %..rawptr %333 to i8*
	%335 = load i64, i64* %27, align 8
	; SelectorExpr
	%336 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %25, i64 0, i32 1
	%337 = load i64, i64* %336, align 8
	%338 = mul i64 %335, %337
	%339 = getelementptr inbounds i8, i8* %334, i64 %338
	store i8* %339, i8** %30
	%340 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %31
	store %..any zeroinitializer, %..any* %31
	; SelectorExpr
	%341 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %25, i64 0, i32 0
	%342 = load %Type_Info*, %Type_Info** %341, align 8
	%343 = getelementptr inbounds %..any, %..any* %31, i64 0, i32 0
	store %Type_Info* %342, %Type_Info** %343
	%344 = load i8*, i8** %30, align 8
	; cast - cast
	%345 = bitcast i8* %344 to %..rawptr
	%346 = getelementptr inbounds %..any, %..any* %31, i64 0, i32 1
	store %..rawptr %345, %..rawptr* %346
	%347 = load %..any, %..any* %31, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %340, %..any %347, i32 118)
	br label %for.interval.loop-46

for.interval.done-50:
	; defer
	; SelectorExpr
	%348 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%349 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %348, i64 0
	%350 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %349, i64 0, i32 3
	%351 = load {i8*, i64, i64}*, {i8*, i64, i64}** %350, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %351, i8 93)
	br label %typematch.done-105

typematch.next-51:
	%352 = icmp eq i64 %94, 13
	br i1 %352, label %typematch.body-70, label %typematch.next-69

typematch.body-52:
	%353 = bitcast %..rawptr %95 to %Type_Info.Map*
	%354 = load %Type_Info.Map, %Type_Info.Map* %353, align 8
	store %Type_Info.Map zeroinitializer, %Type_Info.Map* %32
	store %Type_Info.Map %354, %Type_Info.Map* %32
	; IfStmt
	%355 = load i32, i32* %2, align 4
	%356 = icmp ne i32 %355, 118
	br i1 %356, label %if.then-53, label %if.done-54

if.then-53:
	%357 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%358 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %357, i32 %358)
	; ReturnStmt
	ret void

if.done-54:
	; SelectorExpr
	%359 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%360 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %359, i64 0
	%361 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %360, i64 0, i32 3
	%362 = load {i8*, i64, i64}*, {i8*, i64, i64}** %361, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %362, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$db, i64 0, i32 0), i64 4})
	; DeferStmt
	; entries
	store %Raw_Dynamic_Array* zeroinitializer, %Raw_Dynamic_Array** %33
		; SelectorExpr
	; Cast - cast
	store %Raw_Dynamic_Map* zeroinitializer, %Raw_Dynamic_Map** %34
	; SelectorExpr
	%363 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%364 = load %..rawptr, %..rawptr* %363, align 8
	%365 = bitcast %..rawptr %364 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %365, %Raw_Dynamic_Map** %34
	%366 = load %Raw_Dynamic_Map*, %Raw_Dynamic_Map** %34, align 8
	%367 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %366, i64 0
	%368 = getelementptr inbounds %Raw_Dynamic_Map, %Raw_Dynamic_Map* %367, i64 0, i32 1
	%369 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %368, i64 0
	store %Raw_Dynamic_Array* %369, %Raw_Dynamic_Array** %33
	; gs
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %35
		; SelectorExpr
	%370 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %32, i64 0, i32 2
	%371 = load %Type_Info*, %Type_Info** %370, align 8
	%372 = call %Type_Info* @.type_info_base(%Type_Info* %371)
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %36
	%373 = getelementptr inbounds %Type_Info, %Type_Info* %372, i64 0, i32 2 ; UnionTagPtr
	%374 = load i64, i64* %373, align 8
	%375 = icmp eq i64 %374, 16
	br i1 %375, label %union_cast.ok-55, label %union_cast.end-56

union_cast.ok-55:
	%376 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 0
	%377 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 1
	%378 = bitcast %Type_Info* %372 to %Type_Info.Struct*
	store %Type_Info.Struct* %378, %Type_Info.Struct** %376
	store i1 true, i1* %377
	br label %union_cast.end-56

union_cast.end-56:
	%379 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 1
	%380 = load i1, i1* %379, align 1
	%381 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%382 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	call void @.__union_cast_check(i1 %380, %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$dc, i64 0, i32 0), i64 37}, i64 800, i64 9, %Type_Info* %381, %Type_Info* %382)
	%383 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %36, i64 0, i32 0
	%384 = load %Type_Info.Struct*, %Type_Info.Struct** %383, align 8
	store %Type_Info.Struct* %384, %Type_Info.Struct** %35
	; ed
	store %Type_Info.Dynamic_Array* zeroinitializer, %Type_Info.Dynamic_Array** %37
		; IndexExpr
	; SelectorExpr
	%385 = load %Type_Info.Struct*, %Type_Info.Struct** %35, align 8
	%386 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %385, i64 0
	%387 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %386, i64 0, i32 0
	%388 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %387, i64 0, i32 0
	%389 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %388, align 8
	%390 = extractvalue {%Type_Info**, i64, i64} %389, 0
	%391 = extractvalue {%Type_Info**, i64, i64} %389, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$dd, i64 0, i32 0), i64 37}, i64 801, i64 59, i64 1, i64 %391)
	%392 = getelementptr inbounds %Type_Info*, %Type_Info** %390, i64 1
	%393 = load %Type_Info*, %Type_Info** %392, align 8
	%394 = call %Type_Info* @.type_info_base(%Type_Info* %393)
	; cast - union_cast
	store {%Type_Info.Dynamic_Array*, i1} zeroinitializer, {%Type_Info.Dynamic_Array*, i1}* %38
	%395 = getelementptr inbounds %Type_Info, %Type_Info* %394, i64 0, i32 2 ; UnionTagPtr
	%396 = load i64, i64* %395, align 8
	%397 = icmp eq i64 %396, 12
	br i1 %397, label %union_cast.ok-57, label %union_cast.end-58

union_cast.ok-57:
	%398 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 0
	%399 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 1
	%400 = bitcast %Type_Info* %394 to %Type_Info.Dynamic_Array*
	store %Type_Info.Dynamic_Array* %400, %Type_Info.Dynamic_Array** %398
	store i1 true, i1* %399
	br label %union_cast.end-58

union_cast.end-58:
	%401 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 1
	%402 = load i1, i1* %401, align 1
	%403 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%404 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	call void @.__union_cast_check(i1 %402, %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$de, i64 0, i32 0), i64 37}, i64 801, i64 9, %Type_Info* %403, %Type_Info* %404)
	%405 = getelementptr inbounds {%Type_Info.Dynamic_Array*, i1}, {%Type_Info.Dynamic_Array*, i1}* %38, i64 0, i32 0
	%406 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %405, align 8
	store %Type_Info.Dynamic_Array* %406, %Type_Info.Dynamic_Array** %37
	; entry_type
	store %Type_Info.Struct* zeroinitializer, %Type_Info.Struct** %39
		; SelectorExpr
	%407 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %37, align 8
	%408 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %407, i64 0
	%409 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %408, i64 0, i32 0
	%410 = load %Type_Info*, %Type_Info** %409, align 8
	; cast - union_cast
	store {%Type_Info.Struct*, i1} zeroinitializer, {%Type_Info.Struct*, i1}* %40
	%411 = getelementptr inbounds %Type_Info, %Type_Info* %410, i64 0, i32 2 ; UnionTagPtr
	%412 = load i64, i64* %411, align 8
	%413 = icmp eq i64 %412, 16
	br i1 %413, label %union_cast.ok-59, label %union_cast.end-60

union_cast.ok-59:
	%414 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 0
	%415 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 1
	%416 = bitcast %Type_Info* %410 to %Type_Info.Struct*
	store %Type_Info.Struct* %416, %Type_Info.Struct** %414
	store i1 true, i1* %415
	br label %union_cast.end-60

union_cast.end-60:
	%417 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 1
	%418 = load i1, i1* %417, align 1
	%419 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%420 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	call void @.__union_cast_check(i1 %418, %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$df, i64 0, i32 0), i64 37}, i64 803, i64 17, %Type_Info* %419, %Type_Info* %420)
	%421 = getelementptr inbounds {%Type_Info.Struct*, i1}, {%Type_Info.Struct*, i1}* %40, i64 0, i32 0
	%422 = load %Type_Info.Struct*, %Type_Info.Struct** %421, align 8
	store %Type_Info.Struct* %422, %Type_Info.Struct** %39
	; entry_size
	store i64 zeroinitializer, i64* %41
		; SelectorExpr
	%423 = load %Type_Info.Dynamic_Array*, %Type_Info.Dynamic_Array** %37, align 8
	%424 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %423, i64 0
	%425 = getelementptr inbounds %Type_Info.Dynamic_Array, %Type_Info.Dynamic_Array* %424, i64 0, i32 1
	%426 = load i64, i64* %425, align 8
	store i64 %426, i64* %41
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %42
		store i64 zeroinitializer, i64* %43
	store i64 0, i64* %43
	store i64 zeroinitializer, i64* %44
	store i64 0, i64* %44
	br label %for.interval.loop-61

for.interval.loop-61:
	; SelectorExpr
	%427 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %33, align 8
	%428 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %427, i64 0
	%429 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %428, i64 0, i32 1
	%430 = load i64, i64* %429, align 8
	%431 = load i64, i64* %43, align 8
	%432 = icmp slt i64 %431, %430
	br i1 %432, label %for.interval.body-62, label %for.interval.done-68

for.interval.body-62:
	%433 = load i64, i64* %43, align 8
	%434 = load i64, i64* %44, align 8
	%435 = load i64, i64* %43, align 8
	%436 = add i64 %435, 1
	store i64 %436, i64* %43
	%437 = load i64, i64* %44, align 8
	%438 = add i64 %437, 1
	store i64 %438, i64* %44
	store i64 %433, i64* %42
	; IfStmt
	%439 = load i64, i64* %42, align 8
	%440 = icmp sgt i64 %439, 0
	br i1 %440, label %if.then-63, label %if.done-64

if.then-63:
	; SelectorExpr
	%441 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%442 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %441, i64 0
	%443 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %442, i64 0, i32 3
	%444 = load {i8*, i64, i64}*, {i8*, i64, i64}** %443, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %444, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$e0, i64 0, i32 0), i64 2})
	br label %if.done-64

if.done-64:
	; data
	store i8* zeroinitializer, i8** %45
		; SelectorExpr
	%445 = load %Raw_Dynamic_Array*, %Raw_Dynamic_Array** %33, align 8
	%446 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %445, i64 0
	%447 = getelementptr inbounds %Raw_Dynamic_Array, %Raw_Dynamic_Array* %446, i64 0, i32 0
	%448 = load %..rawptr, %..rawptr* %447, align 8
	; cast - cast
	%449 = bitcast %..rawptr %448 to i8*
	%450 = load i64, i64* %42, align 8
	%451 = load i64, i64* %41, align 8
	%452 = mul i64 %450, %451
	%453 = getelementptr inbounds i8, i8* %449, i64 %452
	store i8* %453, i8** %45
	; header
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %46
		%454 = load i8*, i8** %45, align 8
	; cast - cast
	%455 = bitcast i8* %454 to %__Map_Entry_Header*
	store %__Map_Entry_Header* %455, %__Map_Entry_Header** %46
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%456 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %32, i64 0, i32 0
	%457 = load %Type_Info*, %Type_Info** %456, align 8
	%458 = call i1 @.types-20.is_string(%Type_Info* %457)
	br i1 %458, label %if.then-65, label %if.else-66

if.then-65:
	; SelectorExpr
	%459 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%460 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %459, i64 0
	%461 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %460, i64 0, i32 3
	%462 = load {i8*, i64, i64}*, {i8*, i64, i64}** %461, align 8
	; SelectorExpr
	; SelectorExpr
	%463 = load %__Map_Entry_Header*, %__Map_Entry_Header** %46, align 8
	%464 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %463, i64 0
	%465 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %464, i64 0, i32 0
	%466 = getelementptr inbounds %__Map_Key, %__Map_Key* %465, i64 0, i32 1
	%467 = load %..string, %..string* %466, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %462, %..string %467)
	br label %if.done-67

if.else-66:
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %47
		; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %48
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer}, %fmt-4.Fmt_Info* %48
	; SelectorExpr
	%468 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%469 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %468, i64 0
	%470 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %469, i64 0, i32 3
	%471 = load {i8*, i64, i64}*, {i8*, i64, i64}** %470, align 8
	%472 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %48, i64 0, i32 3
	store {i8*, i64, i64}* %471, {i8*, i64, i64}** %472
	%473 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %48, align 8
	store %fmt-4.Fmt_Info %473, %fmt-4.Fmt_Info* %47
	%474 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0
	; CompoundLit
	store %..any zeroinitializer, %..any* %49
	store %..any zeroinitializer, %..any* %49
	; SelectorExpr
	%475 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %32, i64 0, i32 0
	%476 = load %Type_Info*, %Type_Info** %475, align 8
	%477 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 0
	store %Type_Info* %476, %Type_Info** %477
	; SelectorExpr
	; SelectorExpr
	%478 = load %__Map_Entry_Header*, %__Map_Entry_Header** %46, align 8
	%479 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %478, i64 0
	%480 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %479, i64 0, i32 0
	%481 = getelementptr inbounds %__Map_Key, %__Map_Key* %480, i64 0, i32 0
	%482 = getelementptr inbounds i64, i64* %481, i64 0
	; cast - cast
	%483 = bitcast i64* %482 to %..rawptr
	%484 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 1
	store %..rawptr %483, %..rawptr* %484
	%485 = load %..any, %..any* %49, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %474, %..any %485, i32 118)
	br label %if.done-67

if.done-67:
	; SelectorExpr
	%486 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%487 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %486, i64 0
	%488 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %487, i64 0, i32 3
	%489 = load {i8*, i64, i64}*, {i8*, i64, i64}** %488, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %489, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$e1, i64 0, i32 0), i64 1})
	; value
	store i8* zeroinitializer, i8** %50
		%490 = load i8*, i8** %45, align 8
	; IndexExpr
	; SelectorExpr
	%491 = load %Type_Info.Struct*, %Type_Info.Struct** %39, align 8
	%492 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %491, i64 0
	%493 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %492, i64 0, i32 0
	%494 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %493, i64 0, i32 2
	%495 = load {i64*, i64, i64}, {i64*, i64, i64}* %494, align 8
	%496 = extractvalue {i64*, i64, i64} %495, 0
	%497 = extractvalue {i64*, i64, i64} %495, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$e2, i64 0, i32 0), i64 37}, i64 821, i64 39, i64 2, i64 %497)
	%498 = getelementptr inbounds i64, i64* %496, i64 2
	%499 = load i64, i64* %498, align 8
	%500 = getelementptr inbounds i8, i8* %490, i64 %499
	store i8* %500, i8** %50
	%501 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %51
	store %..any zeroinitializer, %..any* %51
	; SelectorExpr
	%502 = getelementptr inbounds %Type_Info.Map, %Type_Info.Map* %32, i64 0, i32 1
	%503 = load %Type_Info*, %Type_Info** %502, align 8
	%504 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 0
	store %Type_Info* %503, %Type_Info** %504
	%505 = load i8*, i8** %50, align 8
	; cast - cast
	%506 = bitcast i8* %505 to %..rawptr
	%507 = getelementptr inbounds %..any, %..any* %51, i64 0, i32 1
	store %..rawptr %506, %..rawptr* %507
	%508 = load %..any, %..any* %51, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %501, %..any %508, i32 118)
	br label %for.interval.loop-61

for.interval.done-68:
	; defer
	; SelectorExpr
	%509 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%510 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %509, i64 0
	%511 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %510, i64 0, i32 3
	%512 = load {i8*, i64, i64}*, {i8*, i64, i64}** %511, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %512, i8 93)
	br label %typematch.done-105

typematch.next-69:
	%513 = icmp eq i64 %94, 14
	br i1 %513, label %typematch.body-79, label %typematch.next-78

typematch.body-70:
	%514 = bitcast %..rawptr %95 to %Type_Info.Slice*
	%515 = load %Type_Info.Slice, %Type_Info.Slice* %514, align 8
	store %Type_Info.Slice zeroinitializer, %Type_Info.Slice* %52
	store %Type_Info.Slice %515, %Type_Info.Slice* %52
	; IfStmt
	%516 = load i32, i32* %2, align 4
	%517 = icmp ne i32 %516, 118
	br i1 %517, label %if.then-71, label %if.done-72

if.then-71:
	%518 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%519 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %518, i32 %519)
	; ReturnStmt
	ret void

if.done-72:
	; SelectorExpr
	%520 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%521 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %520, i64 0
	%522 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %521, i64 0, i32 3
	%523 = load {i8*, i64, i64}*, {i8*, i64, i64}** %522, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %523, i8 91)
	; DeferStmt
	; slice
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %53
		; SelectorExpr
	%524 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%525 = load %..rawptr, %..rawptr* %524, align 8
	; cast - cast
	%526 = bitcast %..rawptr %525 to {i8*, i64, i64}*
	store {i8*, i64, i64}* %526, {i8*, i64, i64}** %53
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %54
		store i64 zeroinitializer, i64* %55
	store i64 0, i64* %55
	store i64 zeroinitializer, i64* %56
	store i64 0, i64* %56
	br label %for.interval.loop-73

for.interval.loop-73:
	%527 = load {i8*, i64, i64}*, {i8*, i64, i64}** %53, align 8
	%528 = load {i8*, i64, i64}, {i8*, i64, i64}* %527, align 8
	%529 = extractvalue {i8*, i64, i64} %528, 1
	%530 = load i64, i64* %55, align 8
	%531 = icmp slt i64 %530, %529
	br i1 %531, label %for.interval.body-74, label %for.interval.done-77

for.interval.body-74:
	%532 = load i64, i64* %55, align 8
	%533 = load i64, i64* %56, align 8
	%534 = load i64, i64* %55, align 8
	%535 = add i64 %534, 1
	store i64 %535, i64* %55
	%536 = load i64, i64* %56, align 8
	%537 = add i64 %536, 1
	store i64 %537, i64* %56
	store i64 %532, i64* %54
	; IfStmt
	%538 = load i64, i64* %54, align 8
	%539 = icmp sgt i64 %538, 0
	br i1 %539, label %if.then-75, label %if.done-76

if.then-75:
	; SelectorExpr
	%540 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%541 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %540, i64 0
	%542 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %541, i64 0, i32 3
	%543 = load {i8*, i64, i64}*, {i8*, i64, i64}** %542, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %543, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$e3, i64 0, i32 0), i64 2})
	br label %if.done-76

if.done-76:
	; data
	store i8* zeroinitializer, i8** %57
		; IndexExpr
	%544 = load {i8*, i64, i64}*, {i8*, i64, i64}** %53, align 8
	%545 = load {i8*, i64, i64}, {i8*, i64, i64}* %544, align 8
	%546 = extractvalue {i8*, i64, i64} %545, 0
	%547 = extractvalue {i8*, i64, i64} %545, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$e4, i64 0, i32 0), i64 37}, i64 838, i64 19, i64 0, i64 %547)
	%548 = getelementptr inbounds i8, i8* %546, i64 0
	%549 = getelementptr inbounds i8, i8* %548, i64 0
	%550 = load i64, i64* %54, align 8
	; SelectorExpr
	%551 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %52, i64 0, i32 1
	%552 = load i64, i64* %551, align 8
	%553 = mul i64 %550, %552
	%554 = getelementptr inbounds i8, i8* %549, i64 %553
	store i8* %554, i8** %57
	%555 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %58
	store %..any zeroinitializer, %..any* %58
	; SelectorExpr
	%556 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %52, i64 0, i32 0
	%557 = load %Type_Info*, %Type_Info** %556, align 8
	%558 = getelementptr inbounds %..any, %..any* %58, i64 0, i32 0
	store %Type_Info* %557, %Type_Info** %558
	%559 = load i8*, i8** %57, align 8
	; cast - cast
	%560 = bitcast i8* %559 to %..rawptr
	%561 = getelementptr inbounds %..any, %..any* %58, i64 0, i32 1
	store %..rawptr %560, %..rawptr* %561
	%562 = load %..any, %..any* %58, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %555, %..any %562, i32 118)
	br label %for.interval.loop-73

for.interval.done-77:
	; defer
	; SelectorExpr
	%563 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%564 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %563, i64 0
	%565 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %564, i64 0, i32 3
	%566 = load {i8*, i64, i64}*, {i8*, i64, i64}** %565, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %566, i8 93)
	br label %typematch.done-105

typematch.next-78:
	%567 = icmp eq i64 %94, 16
	br i1 %567, label %typematch.body-86, label %typematch.next-85

typematch.body-79:
	%568 = bitcast %..rawptr %95 to %Type_Info.Vector*
	%569 = load %Type_Info.Vector, %Type_Info.Vector* %568, align 8
	store %Type_Info.Vector zeroinitializer, %Type_Info.Vector* %59
	store %Type_Info.Vector %569, %Type_Info.Vector* %59
	; SelectorExpr
	%570 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%571 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %570, i64 0
	%572 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %571, i64 0, i32 3
	%573 = load {i8*, i64, i64}*, {i8*, i64, i64}** %572, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %573, i8 60)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %60
		store i64 zeroinitializer, i64* %61
	store i64 0, i64* %61
	store i64 zeroinitializer, i64* %62
	store i64 0, i64* %62
	br label %for.interval.loop-80

for.interval.loop-80:
	; SelectorExpr
	%574 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %59, i64 0, i32 2
	%575 = load i64, i64* %574, align 8
	%576 = load i64, i64* %61, align 8
	%577 = icmp slt i64 %576, %575
	br i1 %577, label %for.interval.body-81, label %for.interval.done-84

for.interval.body-81:
	%578 = load i64, i64* %61, align 8
	%579 = load i64, i64* %62, align 8
	%580 = load i64, i64* %61, align 8
	%581 = add i64 %580, 1
	store i64 %581, i64* %61
	%582 = load i64, i64* %62, align 8
	%583 = add i64 %582, 1
	store i64 %583, i64* %62
	store i64 %578, i64* %60
	; IfStmt
	%584 = load i64, i64* %60, align 8
	%585 = icmp sgt i64 %584, 0
	br i1 %585, label %if.then-82, label %if.done-83

if.then-82:
	; SelectorExpr
	%586 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%587 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %586, i64 0
	%588 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %587, i64 0, i32 3
	%589 = load {i8*, i64, i64}*, {i8*, i64, i64}** %588, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %589, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$e5, i64 0, i32 0), i64 2})
	br label %if.done-83

if.done-83:
	; data
	store i8* zeroinitializer, i8** %63
		; SelectorExpr
	%590 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%591 = load %..rawptr, %..rawptr* %590, align 8
	; cast - cast
	%592 = bitcast %..rawptr %591 to i8*
	%593 = load i64, i64* %60, align 8
	; SelectorExpr
	%594 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %59, i64 0, i32 1
	%595 = load i64, i64* %594, align 8
	%596 = mul i64 %593, %595
	%597 = getelementptr inbounds i8, i8* %592, i64 %596
	store i8* %597, i8** %63
	%598 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %64
	store %..any zeroinitializer, %..any* %64
	; SelectorExpr
	%599 = getelementptr inbounds %Type_Info.Vector, %Type_Info.Vector* %59, i64 0, i32 0
	%600 = load %Type_Info*, %Type_Info** %599, align 8
	%601 = getelementptr inbounds %..any, %..any* %64, i64 0, i32 0
	store %Type_Info* %600, %Type_Info** %601
	%602 = load i8*, i8** %63, align 8
	; cast - cast
	%603 = bitcast i8* %602 to %..rawptr
	%604 = getelementptr inbounds %..any, %..any* %64, i64 0, i32 1
	store %..rawptr %603, %..rawptr* %604
	%605 = load %..any, %..any* %64, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %598, %..any %605, i32 118)
	br label %for.interval.loop-80

for.interval.done-84:
	; defer
	; SelectorExpr
	%606 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%607 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %606, i64 0
	%608 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %607, i64 0, i32 3
	%609 = load {i8*, i64, i64}*, {i8*, i64, i64}** %608, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %609, i8 62)
	br label %typematch.done-105

typematch.next-85:
	%610 = icmp eq i64 %94, 18
	br i1 %610, label %typematch.body-93, label %typematch.next-92

typematch.body-86:
	%611 = bitcast %..rawptr %95 to %Type_Info.Struct*
	%612 = load %Type_Info.Struct, %Type_Info.Struct* %611, align 8
	store %Type_Info.Struct zeroinitializer, %Type_Info.Struct* %65
	store %Type_Info.Struct %612, %Type_Info.Struct* %65
	; SelectorExpr
	%613 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%614 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %613, i64 0
	%615 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %614, i64 0, i32 3
	%616 = load {i8*, i64, i64}*, {i8*, i64, i64}** %615, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %616, i8 123)
	; DeferStmt
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %66
		; SelectorExpr
	%617 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %65, i64 0, i32 0
	%618 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %617, i64 0, i32 1
	%619 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %618, align 8
	store i64 zeroinitializer, i64* %67
	%620 = extractvalue {%..string*, i64, i64} %619, 1
	store i64 %620, i64* %67
	store i64 zeroinitializer, i64* %68
	store i64 -1, i64* %68
	br label %for.index.loop-87

for.index.loop-87:
	%621 = load i64, i64* %68, align 8
	%622 = add i64 %621, 1
	store i64 %622, i64* %68
	%623 = load i64, i64* %67, align 8
	%624 = icmp slt i64 %622, %623
	br i1 %624, label %for.index.body-88, label %for.index.done-91

for.index.body-88:
	%625 = load i64, i64* %68, align 8
	store i64 %625, i64* %66
	; IfStmt
	%626 = load i64, i64* %66, align 8
	%627 = icmp sgt i64 %626, 0
	br i1 %627, label %if.then-89, label %if.done-90

if.then-89:
	; SelectorExpr
	%628 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%629 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %628, i64 0
	%630 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %629, i64 0, i32 3
	%631 = load {i8*, i64, i64}*, {i8*, i64, i64}** %630, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %631, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$e6, i64 0, i32 0), i64 2})
	br label %if.done-90

if.done-90:
	; SelectorExpr
	%632 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%633 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %632, i64 0
	%634 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %633, i64 0, i32 3
	%635 = load {i8*, i64, i64}*, {i8*, i64, i64}** %634, align 8
	; IndexExpr
	; SelectorExpr
	%636 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %65, i64 0, i32 0
	%637 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %636, i64 0, i32 1
	%638 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %637, align 8
	%639 = extractvalue {%..string*, i64, i64} %638, 0
	%640 = extractvalue {%..string*, i64, i64} %638, 1
	%641 = load i64, i64* %66, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$e7, i64 0, i32 0), i64 37}, i64 863, i64 36, i64 %641, i64 %640)
	%642 = getelementptr inbounds %..string, %..string* %639, i64 %641
	%643 = load %..string, %..string* %642, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %635, %..string %643)
	; SelectorExpr
	%644 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%645 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %644, i64 0
	%646 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %645, i64 0, i32 3
	%647 = load {i8*, i64, i64}*, {i8*, i64, i64}** %646, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %647, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$e8, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %69
		; SelectorExpr
	%648 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%649 = load %..rawptr, %..rawptr* %648, align 8
	; cast - cast
	%650 = bitcast %..rawptr %649 to i8*
	; IndexExpr
	; SelectorExpr
	%651 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %65, i64 0, i32 0
	%652 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %651, i64 0, i32 2
	%653 = load {i64*, i64, i64}, {i64*, i64, i64}* %652, align 8
	%654 = extractvalue {i64*, i64, i64} %653, 0
	%655 = extractvalue {i64*, i64, i64} %653, 1
	%656 = load i64, i64* %66, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$e9, i64 0, i32 0), i64 37}, i64 865, i64 45, i64 %656, i64 %655)
	%657 = getelementptr inbounds i64, i64* %654, i64 %656
	%658 = load i64, i64* %657, align 8
	%659 = getelementptr inbounds i8, i8* %650, i64 %658
	store i8* %659, i8** %69
	%660 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %70
	store %..any zeroinitializer, %..any* %70
	; IndexExpr
	; SelectorExpr
	%661 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %65, i64 0, i32 0
	%662 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %661, i64 0, i32 0
	%663 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %662, align 8
	%664 = extractvalue {%Type_Info**, i64, i64} %663, 0
	%665 = extractvalue {%Type_Info**, i64, i64} %663, 1
	%666 = load i64, i64* %66, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ea, i64 0, i32 0), i64 37}, i64 866, i64 33, i64 %666, i64 %665)
	%667 = getelementptr inbounds %Type_Info*, %Type_Info** %664, i64 %666
	%668 = load %Type_Info*, %Type_Info** %667, align 8
	%669 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 0
	store %Type_Info* %668, %Type_Info** %669
	%670 = load i8*, i8** %69, align 8
	; cast - cast
	%671 = bitcast i8* %670 to %..rawptr
	%672 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 1
	store %..rawptr %671, %..rawptr* %672
	%673 = load %..any, %..any* %70, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %660, %..any %673, i32 118)
	br label %for.index.loop-87

for.index.done-91:
	; defer
	; SelectorExpr
	%674 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%675 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %674, i64 0
	%676 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %675, i64 0, i32 3
	%677 = load {i8*, i64, i64}*, {i8*, i64, i64}** %676, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %677, i8 125)
	br label %typematch.done-105

typematch.next-92:
	%678 = icmp eq i64 %94, 17
	br i1 %678, label %typematch.body-100, label %typematch.next-99

typematch.body-93:
	%679 = bitcast %..rawptr %95 to %Type_Info.Union*
	%680 = load %Type_Info.Union, %Type_Info.Union* %679, align 8
	store %Type_Info.Union zeroinitializer, %Type_Info.Union* %71
	store %Type_Info.Union %680, %Type_Info.Union* %71
	; SelectorExpr
	%681 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%682 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %681, i64 0
	%683 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %682, i64 0, i32 3
	%684 = load {i8*, i64, i64}*, {i8*, i64, i64}** %683, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %684, i8 123)
	; DeferStmt
	; cf
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} zeroinitializer, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72
		; SelectorExpr
	%685 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %71, i64 0, i32 0
	%686 = load {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %685, align 8
	store {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}} %686, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %73
		; SelectorExpr
	%687 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 1
	%688 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %687, align 8
	store i64 zeroinitializer, i64* %74
	%689 = extractvalue {%..string*, i64, i64} %688, 1
	store i64 %689, i64* %74
	store i64 zeroinitializer, i64* %75
	store i64 -1, i64* %75
	br label %for.index.loop-94

for.index.loop-94:
	%690 = load i64, i64* %75, align 8
	%691 = add i64 %690, 1
	store i64 %691, i64* %75
	%692 = load i64, i64* %74, align 8
	%693 = icmp slt i64 %691, %692
	br i1 %693, label %for.index.body-95, label %for.index.done-98

for.index.body-95:
	%694 = load i64, i64* %75, align 8
	store i64 %694, i64* %73
	; IfStmt
	%695 = load i64, i64* %73, align 8
	%696 = icmp sgt i64 %695, 0
	br i1 %696, label %if.then-96, label %if.done-97

if.then-96:
	; SelectorExpr
	%697 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%698 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %697, i64 0
	%699 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %698, i64 0, i32 3
	%700 = load {i8*, i64, i64}*, {i8*, i64, i64}** %699, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %700, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$eb, i64 0, i32 0), i64 2})
	br label %if.done-97

if.done-97:
	; SelectorExpr
	%701 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%702 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %701, i64 0
	%703 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %702, i64 0, i32 3
	%704 = load {i8*, i64, i64}*, {i8*, i64, i64}** %703, align 8
	; IndexExpr
	; SelectorExpr
	%705 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 1
	%706 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %705, align 8
	%707 = extractvalue {%..string*, i64, i64} %706, 0
	%708 = extractvalue {%..string*, i64, i64} %706, 1
	%709 = load i64, i64* %73, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ec, i64 0, i32 0), i64 37}, i64 879, i64 34, i64 %709, i64 %708)
	%710 = getelementptr inbounds %..string, %..string* %707, i64 %709
	%711 = load %..string, %..string* %710, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %704, %..string %711)
	; SelectorExpr
	%712 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%713 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %712, i64 0
	%714 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %713, i64 0, i32 3
	%715 = load {i8*, i64, i64}*, {i8*, i64, i64}** %714, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %715, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$ed, i64 0, i32 0), i64 3})
	; data
	store i8* zeroinitializer, i8** %76
		; SelectorExpr
	%716 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%717 = load %..rawptr, %..rawptr* %716, align 8
	; cast - cast
	%718 = bitcast %..rawptr %717 to i8*
	; IndexExpr
	; SelectorExpr
	%719 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 2
	%720 = load {i64*, i64, i64}, {i64*, i64, i64}* %719, align 8
	%721 = extractvalue {i64*, i64, i64} %720, 0
	%722 = extractvalue {i64*, i64, i64} %720, 1
	%723 = load i64, i64* %73, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ee, i64 0, i32 0), i64 37}, i64 881, i64 43, i64 %723, i64 %722)
	%724 = getelementptr inbounds i64, i64* %721, i64 %723
	%725 = load i64, i64* %724, align 8
	%726 = getelementptr inbounds i8, i8* %718, i64 %725
	store i8* %726, i8** %76
	%727 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; CompoundLit
	store %..any zeroinitializer, %..any* %77
	store %..any zeroinitializer, %..any* %77
	; IndexExpr
	; SelectorExpr
	%728 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %72, i64 0, i32 0
	%729 = load {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %728, align 8
	%730 = extractvalue {%Type_Info**, i64, i64} %729, 0
	%731 = extractvalue {%Type_Info**, i64, i64} %729, 1
	%732 = load i64, i64* %73, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ef, i64 0, i32 0), i64 37}, i64 882, i64 31, i64 %732, i64 %731)
	%733 = getelementptr inbounds %Type_Info*, %Type_Info** %730, i64 %732
	%734 = load %Type_Info*, %Type_Info** %733, align 8
	%735 = getelementptr inbounds %..any, %..any* %77, i64 0, i32 0
	store %Type_Info* %734, %Type_Info** %735
	%736 = load i8*, i8** %76, align 8
	; cast - cast
	%737 = bitcast i8* %736 to %..rawptr
	%738 = getelementptr inbounds %..any, %..any* %77, i64 0, i32 1
	store %..rawptr %737, %..rawptr* %738
	%739 = load %..any, %..any* %77, align 8
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %727, %..any %739, i32 118)
	br label %for.index.loop-94

for.index.done-98:
	; defer
	; SelectorExpr
	%740 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%741 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %740, i64 0
	%742 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %741, i64 0, i32 3
	%743 = load {i8*, i64, i64}*, {i8*, i64, i64}** %742, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %743, i8 125)
	br label %typematch.done-105

typematch.next-99:
	%744 = icmp eq i64 %94, 19
	br i1 %744, label %typematch.body-102, label %typematch.next-101

typematch.body-100:
	%745 = bitcast %..rawptr %95 to %Type_Info.Raw_Union*
	%746 = load %Type_Info.Raw_Union, %Type_Info.Raw_Union* %745, align 8
	store %Type_Info.Raw_Union zeroinitializer, %Type_Info.Raw_Union* %78
	store %Type_Info.Raw_Union %746, %Type_Info.Raw_Union* %78
	; SelectorExpr
	%747 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%748 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %747, i64 0
	%749 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %748, i64 0, i32 3
	%750 = load {i8*, i64, i64}*, {i8*, i64, i64}** %749, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %750, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$f0, i64 0, i32 0), i64 11})
	br label %typematch.done-105

typematch.next-101:
	%751 = icmp eq i64 %94, 10
	br i1 %751, label %typematch.body-104, label %typematch.next-103

typematch.body-102:
	%752 = bitcast %..rawptr %95 to %Type_Info.Enum*
	%753 = load %Type_Info.Enum, %Type_Info.Enum* %752, align 8
	store %Type_Info.Enum zeroinitializer, %Type_Info.Enum* %79
	store %Type_Info.Enum %753, %Type_Info.Enum* %79
	%754 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%755 = load %..any, %..any* %1, align 8
	%756 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_enum(%fmt-4.Fmt_Info* %754, %..any %755, i32 %756)
	br label %typematch.done-105

typematch.next-103:
	br label %typematch.done-105

typematch.body-104:
	%757 = bitcast %..rawptr %95 to %Type_Info.Procedure*
	%758 = load %Type_Info.Procedure, %Type_Info.Procedure* %757, align 8
	store %Type_Info.Procedure zeroinitializer, %Type_Info.Procedure* %80
	store %Type_Info.Procedure %758, %Type_Info.Procedure* %80
	; SelectorExpr
	%759 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%760 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %759, i64 0
	%761 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %760, i64 0, i32 3
	%762 = load {i8*, i64, i64}*, {i8*, i64, i64}** %761, align 8
	; SelectorExpr
	%763 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%764 = load %Type_Info*, %Type_Info** %763, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %762, %Type_Info* %764)
	; SelectorExpr
	%765 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%766 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %765, i64 0
	%767 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %766, i64 0, i32 3
	%768 = load {i8*, i64, i64}*, {i8*, i64, i64}** %767, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %768, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$f1, i64 0, i32 0), i64 3})
	%769 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	; SelectorExpr
	%770 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%771 = load %..rawptr, %..rawptr* %770, align 8
	; cast - cast
	%772 = bitcast %..rawptr %771 to %..rawptr*
	%773 = getelementptr inbounds %..rawptr, %..rawptr* %772, i64 0
	%774 = load %..rawptr, %..rawptr* %773, align 8
	call void @.fmt-4.fmt_pointer(%fmt-4.Fmt_Info* %769, %..rawptr %774, i32 112)
	br label %typematch.done-105

typematch.done-105:
	ret void
}

define void @.fmt-4.fmt_complex(%fmt-4.Fmt_Info* %fi, %..complex128 %c, i64 %bits, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..complex128, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca double, align 8
	%5 = alloca double, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..complex128 zeroinitializer, %..complex128* %1
		store %..complex128 %c, %..complex128* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bits, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%6 = load i32, i32* %3, align 4
	%7 = icmp eq i32 %6, 102
	br i1 %7, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%8 = icmp eq i32 %6, 70
	br i1 %8, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%9 = icmp eq i32 %6, 118
	br i1 %9, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%10 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%11 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %10, i32 %11)
	; ReturnStmt
	ret void

match.case.body-4:
	; r
	store double zeroinitializer, double* %4
		; real
	%12 = load %..complex128, %..complex128* %1, align 8
	%13 = extractvalue %..complex128 %12, 0
	store double %13, double* %4
	; i
	store double zeroinitializer, double* %5
		; imag
	%14 = load %..complex128, %..complex128* %1, align 8
	%15 = extractvalue %..complex128 %14, 1
	store double %15, double* %5
	%16 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%17 = load double, double* %4, align 8
	%18 = load i64, i64* %2, align 8
	%19 = sdiv i64 %18, 2
	%20 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %16, double %17, i64 %19, i32 %20)
	; IfStmt
	; SelectorExpr
	%21 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %22, i64 0, i32 5
	%24 = load i1, i1* %23, align 1
	br i1 %24, label %if.done-7, label %cmp.and-5

cmp.and-5:
	%25 = load double, double* %5, align 8
	%26 = fcmp oge double %25, 0x0000000000000000
	br i1 %26, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 3
	%30 = load {i8*, i64, i64}*, {i8*, i64, i64}** %29, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %30, i32 43)
	br label %if.done-7

if.done-7:
	%31 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%32 = load double, double* %5, align 8
	%33 = load i64, i64* %2, align 8
	%34 = sdiv i64 %33, 2
	%35 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %31, double %32, i64 %34, i32 %35)
	; SelectorExpr
	%36 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%37 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %36, i64 0
	%38 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %37, i64 0, i32 3
	%39 = load {i8*, i64, i64}*, {i8*, i64, i64}** %38, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %39, i32 105)
	br label %match.done-8

match.done-8:
	ret void
}

define void @.fmt-4.fmt_quaternion(%fmt-4.Fmt_Info* %fi, %..quaternion256 %c, i64 %bits, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..quaternion256, align 8
	%2 = alloca i64, align 8
	%3 = alloca i32, align 4
	%4 = alloca double, align 8
	%5 = alloca double, align 8
	%6 = alloca double, align 8
	%7 = alloca double, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..quaternion256 zeroinitializer, %..quaternion256* %1
		store %..quaternion256 %c, %..quaternion256* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bits, i64* %2
	store i32 zeroinitializer, i32* %3
		store i32 %verb, i32* %3
	; MatchStmt
	%8 = load i32, i32* %3, align 4
	%9 = icmp eq i32 %8, 102
	br i1 %9, label %match.case.body-4, label %match.case.next-1

match.case.next-1:
	%10 = icmp eq i32 %8, 70
	br i1 %10, label %match.case.body-4, label %match.case.next-2

match.case.next-2:
	%11 = icmp eq i32 %8, 118
	br i1 %11, label %match.case.body-4, label %match.case.next-3

match.case.next-3:
	%12 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%13 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_bad_verb(%fmt-4.Fmt_Info* %12, i32 %13)
	; ReturnStmt
	ret void

match.case.body-4:
	; r
	store double zeroinitializer, double* %4
		; real
	%14 = load %..quaternion256, %..quaternion256* %1, align 8
	%15 = extractvalue %..quaternion256 %14, 0
	store double %15, double* %4
	; i
	store double zeroinitializer, double* %5
		; imag
	%16 = load %..quaternion256, %..quaternion256* %1, align 8
	%17 = extractvalue %..quaternion256 %16, 1
	store double %17, double* %5
	; j
	store double zeroinitializer, double* %6
		; jmag
	%18 = load %..quaternion256, %..quaternion256* %1, align 8
	%19 = extractvalue %..quaternion256 %18, 2
	store double %19, double* %6
	; k
	store double zeroinitializer, double* %7
		; kmag
	%20 = load %..quaternion256, %..quaternion256* %1, align 8
	%21 = extractvalue %..quaternion256 %20, 3
	store double %21, double* %7
	%22 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%23 = load double, double* %4, align 8
	%24 = load i64, i64* %2, align 8
	%25 = sdiv i64 %24, 4
	%26 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %22, double %23, i64 %25, i32 %26)
	; IfStmt
	; SelectorExpr
	%27 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %28, i64 0, i32 5
	%30 = load i1, i1* %29, align 1
	br i1 %30, label %if.done-7, label %cmp.and-5

cmp.and-5:
	%31 = load double, double* %5, align 8
	%32 = fcmp oge double %31, 0x0000000000000000
	br i1 %32, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%33 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0, i32 3
	%36 = load {i8*, i64, i64}*, {i8*, i64, i64}** %35, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %36, i32 43)
	br label %if.done-7

if.done-7:
	%37 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%38 = load double, double* %5, align 8
	%39 = load i64, i64* %2, align 8
	%40 = sdiv i64 %39, 4
	%41 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %37, double %38, i64 %40, i32 %41)
	; SelectorExpr
	%42 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %43, i64 0, i32 3
	%45 = load {i8*, i64, i64}*, {i8*, i64, i64}** %44, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %45, i32 105)
	; IfStmt
	; SelectorExpr
	%46 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %47, i64 0, i32 5
	%49 = load i1, i1* %48, align 1
	br i1 %49, label %if.done-10, label %cmp.and-8

cmp.and-8:
	%50 = load double, double* %6, align 8
	%51 = fcmp oge double %50, 0x0000000000000000
	br i1 %51, label %if.then-9, label %if.done-10

if.then-9:
	; SelectorExpr
	%52 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%53 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %52, i64 0
	%54 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %53, i64 0, i32 3
	%55 = load {i8*, i64, i64}*, {i8*, i64, i64}** %54, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %55, i32 43)
	br label %if.done-10

if.done-10:
	%56 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%57 = load double, double* %6, align 8
	%58 = load i64, i64* %2, align 8
	%59 = sdiv i64 %58, 4
	%60 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %56, double %57, i64 %59, i32 %60)
	; SelectorExpr
	%61 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%62 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %61, i64 0
	%63 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %62, i64 0, i32 3
	%64 = load {i8*, i64, i64}*, {i8*, i64, i64}** %63, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %64, i32 106)
	; IfStmt
	; SelectorExpr
	%65 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%66 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %65, i64 0
	%67 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %66, i64 0, i32 5
	%68 = load i1, i1* %67, align 1
	br i1 %68, label %if.done-13, label %cmp.and-11

cmp.and-11:
	%69 = load double, double* %7, align 8
	%70 = fcmp oge double %69, 0x0000000000000000
	br i1 %70, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%71 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%72 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %71, i64 0
	%73 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %72, i64 0, i32 3
	%74 = load {i8*, i64, i64}*, {i8*, i64, i64}** %73, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %74, i32 43)
	br label %if.done-13

if.done-13:
	%75 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%76 = load double, double* %7, align 8
	%77 = load i64, i64* %2, align 8
	%78 = sdiv i64 %77, 4
	%79 = load i32, i32* %3, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %75, double %76, i64 %78, i32 %79)
	; SelectorExpr
	%80 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%81 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %80, i64 0
	%82 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %81, i64 0, i32 3
	%83 = load {i8*, i64, i64}*, {i8*, i64, i64}** %82, align 8
	call void @.fmt-4.write_rune({i8*, i64, i64}* %83, i32 107)
	br label %match.done-14

match.done-14:
	ret void
}

define void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %fi, %..any %arg, i32 %verb) {
decls-0:
	%0 = alloca %fmt-4.Fmt_Info*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca i32, align 4
	%3 = alloca %Type_Info*, align 8
	%4 = alloca %Type_Info*, align 8
	%5 = alloca %..any, align 8
	%6 = alloca i1, align 1
	%7 = alloca float, align 4
	%8 = alloca double, align 8
	%9 = alloca %..complex64, align 8
	%10 = alloca %..complex128, align 8
	%11 = alloca %..complex128, align 8
	%12 = alloca %..quaternion128, align 8
	%13 = alloca %..quaternion256, align 8
	%14 = alloca %..quaternion256, align 8
	%15 = alloca i64, align 8
	%16 = alloca i8, align 1
	%17 = alloca i16, align 2
	%18 = alloca i32, align 4
	%19 = alloca i64, align 8
	%20 = alloca i64, align 8
	%21 = alloca i8, align 1
	%22 = alloca i16, align 2
	%23 = alloca i32, align 4
	%24 = alloca i64, align 8
	%25 = alloca %..string, align 8
	%26 = alloca %..any, align 8
	store %fmt-4.Fmt_Info* zeroinitializer, %fmt-4.Fmt_Info** %0
		store %fmt-4.Fmt_Info* %fi, %fmt-4.Fmt_Info** %0
	store %..any zeroinitializer, %..any* %1
		store %..any %arg, %..any* %1
	store i32 zeroinitializer, i32* %2
		store i32 %verb, i32* %2
	; IfStmt
	%27 = load %..any, %..any* %1, align 8
	%28 = extractvalue %..any %27, 0
	%29 = extractvalue %..any %27, 1
	%30 = bitcast %..rawptr null to %Type_Info*
	%31 = icmp eq %Type_Info* %28, %30
	%32 = icmp eq %..rawptr %29, null
	%33 = or i1 %31, %32
	br i1 %33, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%34 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%35 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %34, i64 0
	%36 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %35, i64 0, i32 3
	%37 = load {i8*, i64, i64}*, {i8*, i64, i64}** %36, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %37, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$f2, i64 0, i32 0), i64 5})
	; ReturnStmt
	ret void

if.done-2:
	; AssignStmt
	; SelectorExpr
	%38 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %39, i64 0, i32 0
	%41 = load %..any, %..any* %1, align 8
	store %..any %41, %..any* %40
	; IfStmt
	%42 = load i32, i32* %2, align 4
	%43 = icmp eq i32 %42, 84
	br i1 %43, label %if.then-3, label %if.done-7

if.then-3:
	; ti
	store %Type_Info* zeroinitializer, %Type_Info** %3
		; SelectorExpr
	%44 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%45 = load %Type_Info*, %Type_Info** %44, align 8
	store %Type_Info* %45, %Type_Info** %3
	; TypeMatchStmt
	%46 = load %..any, %..any* %1, align 8
	%47 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%48 = load %Type_Info*, %Type_Info** %47, align 8
	%49 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%50 = icmp eq %Type_Info* %48, %49
	br i1 %50, label %typematch.body-5, label %typematch.next-4

typematch.next-4:
	br label %typematch.done-6

typematch.body-5:
	%51 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%52 = load %..rawptr, %..rawptr* %51, align 8
	%53 = bitcast %..rawptr %52 to %Type_Info**
	%54 = load %Type_Info*, %Type_Info** %53, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %4
	store %Type_Info* %54, %Type_Info** %4
	; AssignStmt
	%55 = load %Type_Info*, %Type_Info** %4, align 8
	store %Type_Info* %55, %Type_Info** %3
	br label %typematch.done-6

typematch.done-6:
	; SelectorExpr
	%56 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%57 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %56, i64 0
	%58 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %57, i64 0, i32 3
	%59 = load {i8*, i64, i64}*, {i8*, i64, i64}** %58, align 8
	%60 = load %Type_Info*, %Type_Info** %3, align 8
	call void @.fmt-4.write_type({i8*, i64, i64}* %59, %Type_Info* %60)
	; ReturnStmt
	ret void

if.done-7:
	; base_arg
	store %..any zeroinitializer, %..any* %5
		%61 = load %..any, %..any* %1, align 8
	store %..any %61, %..any* %5
	; AssignStmt
	; SelectorExpr
	%62 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	; SelectorExpr
	%63 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%64 = load %Type_Info*, %Type_Info** %63, align 8
	%65 = call %Type_Info* @.type_info_base(%Type_Info* %64)
	store %Type_Info* %65, %Type_Info** %62
	; TypeMatchStmt
	%66 = load %..any, %..any* %5, align 8
	%67 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%68 = load %Type_Info*, %Type_Info** %67, align 8
	%69 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%70 = icmp eq %Type_Info* %68, %69
	br i1 %70, label %typematch.body-9, label %typematch.next-8

typematch.next-8:
	%71 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%72 = load %Type_Info*, %Type_Info** %71, align 8
	%73 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%74 = icmp eq %Type_Info* %72, %73
	br i1 %74, label %typematch.body-11, label %typematch.next-10

typematch.body-9:
	%75 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%76 = load %..rawptr, %..rawptr* %75, align 8
	%77 = bitcast %..rawptr %76 to i1*
	%78 = load i1, i1* %77, align 1
	store i1 zeroinitializer, i1* %6
	store i1 %78, i1* %6
	%79 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%80 = load i1, i1* %6, align 1
	%81 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_bool(%fmt-4.Fmt_Info* %79, i1 %80, i32 %81)
	br label %typematch.done-44

typematch.next-10:
	%82 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%83 = load %Type_Info*, %Type_Info** %82, align 8
	%84 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	%85 = icmp eq %Type_Info* %83, %84
	br i1 %85, label %typematch.body-13, label %typematch.next-12

typematch.body-11:
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%87 = load %..rawptr, %..rawptr* %86, align 8
	%88 = bitcast %..rawptr %87 to float*
	%89 = load float, float* %88, align 4
	store float zeroinitializer, float* %7
	store float %89, float* %7
	%90 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%91 = load float, float* %7, align 4
	; cast - cast
	%92 = fpext float %91 to double
	%93 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %90, double %92, i64 32, i32 %93)
	br label %typematch.done-44

typematch.next-12:
	%94 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%95 = load %Type_Info*, %Type_Info** %94, align 8
	%96 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	%97 = icmp eq %Type_Info* %95, %96
	br i1 %97, label %typematch.body-15, label %typematch.next-14

typematch.body-13:
	%98 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%99 = load %..rawptr, %..rawptr* %98, align 8
	%100 = bitcast %..rawptr %99 to double*
	%101 = load double, double* %100, align 8
	store double zeroinitializer, double* %8
	store double %101, double* %8
	%102 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%103 = load double, double* %8, align 8
	%104 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_float(%fmt-4.Fmt_Info* %102, double %103, i64 64, i32 %104)
	br label %typematch.done-44

typematch.next-14:
	%105 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%106 = load %Type_Info*, %Type_Info** %105, align 8
	%107 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	%108 = icmp eq %Type_Info* %106, %107
	br i1 %108, label %typematch.body-17, label %typematch.next-16

typematch.body-15:
	%109 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%110 = load %..rawptr, %..rawptr* %109, align 8
	%111 = bitcast %..rawptr %110 to %..complex64*
	%112 = load %..complex64, %..complex64* %111, align 8
	store %..complex64 zeroinitializer, %..complex64* %9
	store %..complex64 %112, %..complex64* %9
	%113 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%114 = load %..complex64, %..complex64* %9, align 8
	; cast - cast
	store %..complex128 zeroinitializer, %..complex128* %10
	%115 = extractvalue %..complex64 %114, 0
	%116 = fpext float %115 to double
	%117 = extractvalue %..complex64 %114, 1
	%118 = fpext float %117 to double
	%119 = getelementptr inbounds %..complex128, %..complex128* %10, i64 0, i32 0
	store double %116, double* %119
	%120 = getelementptr inbounds %..complex128, %..complex128* %10, i64 0, i32 1
	store double %118, double* %120
	%121 = load %..complex128, %..complex128* %10, align 8
	%122 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_complex(%fmt-4.Fmt_Info* %113, %..complex128 %121, i64 64, i32 %122)
	br label %typematch.done-44

typematch.next-16:
	%123 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%124 = load %Type_Info*, %Type_Info** %123, align 8
	%125 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	%126 = icmp eq %Type_Info* %124, %125
	br i1 %126, label %typematch.body-19, label %typematch.next-18

typematch.body-17:
	%127 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%128 = load %..rawptr, %..rawptr* %127, align 8
	%129 = bitcast %..rawptr %128 to %..complex128*
	%130 = load %..complex128, %..complex128* %129, align 8
	store %..complex128 zeroinitializer, %..complex128* %11
	store %..complex128 %130, %..complex128* %11
	%131 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%132 = load %..complex128, %..complex128* %11, align 8
	%133 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_complex(%fmt-4.Fmt_Info* %131, %..complex128 %132, i64 128, i32 %133)
	br label %typematch.done-44

typematch.next-18:
	%134 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%135 = load %Type_Info*, %Type_Info** %134, align 8
	%136 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	%137 = icmp eq %Type_Info* %135, %136
	br i1 %137, label %typematch.body-21, label %typematch.next-20

typematch.body-19:
	%138 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%139 = load %..rawptr, %..rawptr* %138, align 8
	%140 = bitcast %..rawptr %139 to %..quaternion128*
	%141 = load %..quaternion128, %..quaternion128* %140, align 8
	store %..quaternion128 zeroinitializer, %..quaternion128* %12
	store %..quaternion128 %141, %..quaternion128* %12
	%142 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%143 = load %..quaternion128, %..quaternion128* %12, align 8
	; cast - cast
	store %..quaternion256 zeroinitializer, %..quaternion256* %13
	%144 = extractvalue %..quaternion128 %143, 0
	%145 = fpext float %144 to double
	%146 = extractvalue %..quaternion128 %143, 1
	%147 = fpext float %146 to double
	%148 = extractvalue %..quaternion128 %143, 2
	%149 = fpext float %148 to double
	%150 = extractvalue %..quaternion128 %143, 3
	%151 = fpext float %150 to double
	%152 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 0
	store double %145, double* %152
	%153 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 1
	store double %147, double* %153
	%154 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 2
	store double %149, double* %154
	%155 = getelementptr inbounds %..quaternion256, %..quaternion256* %13, i64 0, i32 3
	store double %151, double* %155
	%156 = load %..quaternion256, %..quaternion256* %13, align 8
	%157 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_quaternion(%fmt-4.Fmt_Info* %142, %..quaternion256 %156, i64 128, i32 %157)
	br label %typematch.done-44

typematch.next-20:
	%158 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%159 = load %Type_Info*, %Type_Info** %158, align 8
	%160 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%161 = icmp eq %Type_Info* %159, %160
	br i1 %161, label %typematch.body-23, label %typematch.next-22

typematch.body-21:
	%162 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%163 = load %..rawptr, %..rawptr* %162, align 8
	%164 = bitcast %..rawptr %163 to %..quaternion256*
	%165 = load %..quaternion256, %..quaternion256* %164, align 8
	store %..quaternion256 zeroinitializer, %..quaternion256* %14
	store %..quaternion256 %165, %..quaternion256* %14
	%166 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%167 = load %..quaternion256, %..quaternion256* %14, align 8
	%168 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_quaternion(%fmt-4.Fmt_Info* %166, %..quaternion256 %167, i64 256, i32 %168)
	br label %typematch.done-44

typematch.next-22:
	%169 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%170 = load %Type_Info*, %Type_Info** %169, align 8
	%171 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	%172 = icmp eq %Type_Info* %170, %171
	br i1 %172, label %typematch.body-25, label %typematch.next-24

typematch.body-23:
	%173 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%174 = load %..rawptr, %..rawptr* %173, align 8
	%175 = bitcast %..rawptr %174 to i64*
	%176 = load i64, i64* %175, align 8
	store i64 zeroinitializer, i64* %15
	store i64 %176, i64* %15
	%177 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%178 = load i64, i64* %15, align 8
	; cast - cast
	%179 = bitcast i64 %178 to i64
	%180 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %177, i64 %179, i1 true, i64 64, i32 %180)
	br label %typematch.done-44

typematch.next-24:
	%181 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%182 = load %Type_Info*, %Type_Info** %181, align 8
	%183 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%184 = icmp eq %Type_Info* %182, %183
	br i1 %184, label %typematch.body-27, label %typematch.next-26

typematch.body-25:
	%185 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%186 = load %..rawptr, %..rawptr* %185, align 8
	%187 = bitcast %..rawptr %186 to i8*
	%188 = load i8, i8* %187, align 1
	store i8 zeroinitializer, i8* %16
	store i8 %188, i8* %16
	%189 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%190 = load i8, i8* %16, align 1
	; cast - cast
	%191 = sext i8 %190 to i64
	%192 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %189, i64 %191, i1 true, i64 8, i32 %192)
	br label %typematch.done-44

typematch.next-26:
	%193 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%194 = load %Type_Info*, %Type_Info** %193, align 8
	%195 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%196 = icmp eq %Type_Info* %194, %195
	br i1 %196, label %typematch.body-29, label %typematch.next-28

typematch.body-27:
	%197 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%198 = load %..rawptr, %..rawptr* %197, align 8
	%199 = bitcast %..rawptr %198 to i16*
	%200 = load i16, i16* %199, align 2
	store i16 zeroinitializer, i16* %17
	store i16 %200, i16* %17
	%201 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%202 = load i16, i16* %17, align 2
	; cast - cast
	%203 = sext i16 %202 to i64
	%204 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %201, i64 %203, i1 true, i64 16, i32 %204)
	br label %typematch.done-44

typematch.next-28:
	%205 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%206 = load %Type_Info*, %Type_Info** %205, align 8
	%207 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	%208 = icmp eq %Type_Info* %206, %207
	br i1 %208, label %typematch.body-31, label %typematch.next-30

typematch.body-29:
	%209 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%210 = load %..rawptr, %..rawptr* %209, align 8
	%211 = bitcast %..rawptr %210 to i32*
	%212 = load i32, i32* %211, align 4
	store i32 zeroinitializer, i32* %18
	store i32 %212, i32* %18
	%213 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%214 = load i32, i32* %18, align 4
	; cast - cast
	%215 = sext i32 %214 to i64
	%216 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %213, i64 %215, i1 true, i64 32, i32 %216)
	br label %typematch.done-44

typematch.next-30:
	%217 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%218 = load %Type_Info*, %Type_Info** %217, align 8
	%219 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	%220 = icmp eq %Type_Info* %218, %219
	br i1 %220, label %typematch.body-33, label %typematch.next-32

typematch.body-31:
	%221 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%222 = load %..rawptr, %..rawptr* %221, align 8
	%223 = bitcast %..rawptr %222 to i64*
	%224 = load i64, i64* %223, align 8
	store i64 zeroinitializer, i64* %19
	store i64 %224, i64* %19
	%225 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%226 = load i64, i64* %19, align 8
	; cast - cast
	%227 = bitcast i64 %226 to i64
	%228 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %225, i64 %227, i1 true, i64 64, i32 %228)
	br label %typematch.done-44

typematch.next-32:
	%229 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%230 = load %Type_Info*, %Type_Info** %229, align 8
	%231 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%232 = icmp eq %Type_Info* %230, %231
	br i1 %232, label %typematch.body-35, label %typematch.next-34

typematch.body-33:
	%233 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%234 = load %..rawptr, %..rawptr* %233, align 8
	%235 = bitcast %..rawptr %234 to i64*
	%236 = load i64, i64* %235, align 8
	store i64 zeroinitializer, i64* %20
	store i64 %236, i64* %20
	%237 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%238 = load i64, i64* %20, align 8
	; cast - cast
	%239 = bitcast i64 %238 to i64
	%240 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %237, i64 %239, i1 false, i64 64, i32 %240)
	br label %typematch.done-44

typematch.next-34:
	%241 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%242 = load %Type_Info*, %Type_Info** %241, align 8
	%243 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	%244 = icmp eq %Type_Info* %242, %243
	br i1 %244, label %typematch.body-37, label %typematch.next-36

typematch.body-35:
	%245 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%246 = load %..rawptr, %..rawptr* %245, align 8
	%247 = bitcast %..rawptr %246 to i8*
	%248 = load i8, i8* %247, align 1
	store i8 zeroinitializer, i8* %21
	store i8 %248, i8* %21
	%249 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%250 = load i8, i8* %21, align 1
	; cast - cast
	%251 = zext i8 %250 to i64
	%252 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %249, i64 %251, i1 false, i64 8, i32 %252)
	br label %typematch.done-44

typematch.next-36:
	%253 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%254 = load %Type_Info*, %Type_Info** %253, align 8
	%255 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%256 = icmp eq %Type_Info* %254, %255
	br i1 %256, label %typematch.body-39, label %typematch.next-38

typematch.body-37:
	%257 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%258 = load %..rawptr, %..rawptr* %257, align 8
	%259 = bitcast %..rawptr %258 to i16*
	%260 = load i16, i16* %259, align 2
	store i16 zeroinitializer, i16* %22
	store i16 %260, i16* %22
	%261 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%262 = load i16, i16* %22, align 2
	; cast - cast
	%263 = zext i16 %262 to i64
	%264 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %261, i64 %263, i1 false, i64 16, i32 %264)
	br label %typematch.done-44

typematch.next-38:
	%265 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%266 = load %Type_Info*, %Type_Info** %265, align 8
	%267 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%268 = icmp eq %Type_Info* %266, %267
	br i1 %268, label %typematch.body-41, label %typematch.next-40

typematch.body-39:
	%269 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%270 = load %..rawptr, %..rawptr* %269, align 8
	%271 = bitcast %..rawptr %270 to i32*
	%272 = load i32, i32* %271, align 4
	store i32 zeroinitializer, i32* %23
	store i32 %272, i32* %23
	%273 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%274 = load i32, i32* %23, align 4
	; cast - cast
	%275 = zext i32 %274 to i64
	%276 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %273, i64 %275, i1 false, i64 32, i32 %276)
	br label %typematch.done-44

typematch.next-40:
	%277 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%278 = load %Type_Info*, %Type_Info** %277, align 8
	%279 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%280 = icmp eq %Type_Info* %278, %279
	br i1 %280, label %typematch.body-43, label %typematch.next-42

typematch.body-41:
	%281 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%282 = load %..rawptr, %..rawptr* %281, align 8
	%283 = bitcast %..rawptr %282 to i64*
	%284 = load i64, i64* %283, align 8
	store i64 zeroinitializer, i64* %24
	store i64 %284, i64* %24
	%285 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%286 = load i64, i64* %24, align 8
	; cast - cast
	%287 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_int(%fmt-4.Fmt_Info* %285, i64 %286, i1 false, i64 64, i32 %287)
	br label %typematch.done-44

typematch.next-42:
	store %..any zeroinitializer, %..any* %26
	store %..any %66, %..any* %26
	%288 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%289 = load %..any, %..any* %1, align 8
	%290 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_value(%fmt-4.Fmt_Info* %288, %..any %289, i32 %290)
	br label %typematch.done-44

typematch.body-43:
	%291 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%292 = load %..rawptr, %..rawptr* %291, align 8
	%293 = bitcast %..rawptr %292 to %..string*
	%294 = load %..string, %..string* %293, align 8
	store %..string zeroinitializer, %..string* %25
	store %..string %294, %..string* %25
	%295 = load %fmt-4.Fmt_Info*, %fmt-4.Fmt_Info** %0, align 8
	%296 = load %..string, %..string* %25, align 8
	%297 = load i32, i32* %2, align 4
	call void @.fmt-4.fmt_string(%fmt-4.Fmt_Info* %295, %..string %296, i32 %297)
	br label %typematch.done-44

typematch.done-44:
	ret void
}

define i64 @.fmt-4.bprintf({i8*, i64, i64}* %b, %..string %fmt, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca {i8*, i64, i64}*, align 8
	%1 = alloca %..string, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca %fmt-4.Fmt_Info, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i1, align 1
	%7 = alloca i64, align 8
	%8 = alloca %fmt-4.Fmt_Info, align 8
	%9 = alloca i64, align 8
	%10 = alloca %..string, align 8
	%11 = alloca i32, align 4
	%12 = alloca i64, align 8
	%13 = alloca %..string, align 8
	%14 = alloca %..any, align 8
	%15 = alloca i64, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	store {i8*, i64, i64}* zeroinitializer, {i8*, i64, i64}** %0
		store {i8*, i64, i64}* %b, {i8*, i64, i64}** %0
	store %..string zeroinitializer, %..string* %1
		store %..string %fmt, %..string* %1
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %2
	; fi
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %3
		store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %3
	; end
	store i64 zeroinitializer, i64* %4
		%19 = load %..string, %..string* %1, align 8
	%20 = extractvalue %..string %19, 1
	store i64 %20, i64* %4
	; arg_index
	store i64 zeroinitializer, i64* %5
		store i64 0, i64* %5
	; was_prev_index
	store i1 zeroinitializer, i1* %6
		store i1 false, i1* %6
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %7
		store i64 0, i64* %7
	br label %for.loop-1

for.loop-1:
	%21 = load i64, i64* %7, align 8
	%22 = load i64, i64* %4, align 8
	%23 = icmp slt i64 %21, %22
	br i1 %23, label %for.body-2, label %for.done-64

for.body-2:
	; AssignStmt
	; CompoundLit
	store %fmt-4.Fmt_Info zeroinitializer, %fmt-4.Fmt_Info* %8
	store %fmt-4.Fmt_Info {%..any zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, {i8*, i64, i64}* zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 zeroinitializer, i1 true}, %fmt-4.Fmt_Info* %8
	%24 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%25 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, i64 0, i32 3
	store {i8*, i64, i64}* %24, {i8*, i64, i64}** %25
	%26 = load %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %8, align 8
	store %fmt-4.Fmt_Info %26, %fmt-4.Fmt_Info* %3
	; prev_i
	store i64 zeroinitializer, i64* %9
		%27 = load i64, i64* %7, align 8
	store i64 %27, i64* %9
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%28 = load i64, i64* %7, align 8
	%29 = load i64, i64* %4, align 8
	%30 = icmp slt i64 %28, %29
	br i1 %30, label %cmp.and-4, label %for.done-6

cmp.and-4:
	; IndexExpr
	%31 = load %..string, %..string* %1, align 8
	%32 = extractvalue %..string %31, 0
	%33 = extractvalue %..string %31, 1
	%34 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$f3, i64 0, i32 0), i64 37}, i64 997, i64 22, i64 %34, i64 %33)
	%35 = getelementptr inbounds i8, i8* %32, i64 %34
	%36 = load i8, i8* %35, align 1
	%37 = icmp ne i8 %36, 37
	br i1 %37, label %for.body-5, label %for.done-6

for.body-5:
	%38 = load i64, i64* %7, align 8
	%39 = add i64 %38, 1
	store i64 %39, i64* %7
	br label %for.loop-3

for.done-6:
	; IfStmt
	%40 = load i64, i64* %7, align 8
	%41 = load i64, i64* %9, align 8
	%42 = icmp sgt i64 %40, %41
	br i1 %42, label %if.then-7, label %if.done-8

if.then-7:
	%43 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	; SliceExpr
	%44 = load i64, i64* %9, align 8
	%45 = load i64, i64* %7, align 8
	%46 = load %..string, %..string* %1, align 8
	%47 = extractvalue %..string %46, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$f4, i64 0, i32 0), i64 37}, i64 1001, i64 23, i64 %44, i64 %45)
	%48 = extractvalue %..string %46, 0
	%49 = getelementptr inbounds i8, i8* %48, i64 %44
	%50 = sub i64 %45, %44
	store %..string zeroinitializer, %..string* %10
	%51 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %49, i8** %51
	%52 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %50, i64* %52
	%53 = load %..string, %..string* %10, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %43, %..string %53)
	br label %if.done-8

if.done-8:
	; IfStmt
	%54 = load i64, i64* %7, align 8
	%55 = load i64, i64* %4, align 8
	%56 = icmp sge i64 %54, %55
	br i1 %56, label %if.then-9, label %if.done-10

if.then-9:
	; break
	br label %for.done-64

if.done-10:
	%57 = load i64, i64* %7, align 8
	%58 = add i64 %57, 1
	store i64 %58, i64* %7
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%59 = load i64, i64* %7, align 8
	%60 = load i64, i64* %4, align 8
	%61 = icmp slt i64 %59, %60
	br i1 %61, label %for.body-12, label %for.done-24

for.body-12:
	; MatchStmt
	; IndexExpr
	%62 = load %..string, %..string* %1, align 8
	%63 = extractvalue %..string %62, 0
	%64 = extractvalue %..string %62, 1
	%65 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$f5, i64 0, i32 0), i64 37}, i64 1012, i64 14, i64 %65, i64 %64)
	%66 = getelementptr inbounds i8, i8* %63, i64 %65
	%67 = load i8, i8* %66, align 1
	%68 = icmp eq i8 %67, 43
	br i1 %68, label %match.case.body-14, label %match.case.next-13

match.case.next-13:
	%69 = icmp eq i8 %67, 45
	br i1 %69, label %match.fall.body-16, label %match.case.next-15

match.case.body-14:
	; AssignStmt
	; SelectorExpr
	%70 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 5
	store i1 true, i1* %70
	br label %match.done-23

match.case.next-15:
	%71 = icmp eq i8 %67, 32
	br i1 %71, label %match.fall.body-18, label %match.case.next-17

match.fall.body-16:
	; AssignStmt
	; SelectorExpr
	%72 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	store i1 true, i1* %72
	; AssignStmt
	; SelectorExpr
	%73 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	store i1 false, i1* %73
	br label %match.done-23

match.case.next-17:
	%74 = icmp eq i8 %67, 35
	br i1 %74, label %match.fall.body-20, label %match.case.next-19

match.fall.body-18:
	; AssignStmt
	; SelectorExpr
	%75 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 6
	store i1 true, i1* %75
	br label %match.done-23

match.case.next-19:
	%76 = icmp eq i8 %67, 48
	br i1 %76, label %match.fall.body-22, label %match.case.next-21

match.fall.body-20:
	; AssignStmt
	; SelectorExpr
	%77 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 8
	store i1 true, i1* %77
	br label %match.done-23

match.case.next-21:
	; break
	br label %for.done-24

match.fall.body-22:
	; AssignStmt
	; SelectorExpr
	%78 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	; SelectorExpr
	%79 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	%80 = load i1, i1* %79, align 1
	%81 = xor i1 -1, %80
	store i1 %81, i1* %78
	br label %match.done-23

match.done-23:
	%82 = load i64, i64* %7, align 8
	%83 = add i64 %82, 1
	store i64 %83, i64* %7
	br label %for.loop-11

for.done-24:
	; AssignStmt
	%84 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%85 = load i64, i64* %5, align 8
	%86 = load %..string, %..string* %1, align 8
	%87 = load i64, i64* %7, align 8
	%88 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%89 = extractvalue {%..any*, i64, i64} %88, 1
	%90 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %84, i64 %85, %..string %86, i64 %87, i64 %89)
	%91 = extractvalue {i64, i64, i1} %90, 0
	%92 = extractvalue {i64, i64, i1} %90, 1
	%93 = extractvalue {i64, i64, i1} %90, 2
	store i64 %91, i64* %5
	store i64 %92, i64* %7
	store i1 %93, i1* %6
	; IfStmt
	%94 = load i64, i64* %7, align 8
	%95 = load i64, i64* %4, align 8
	%96 = icmp slt i64 %94, %95
	br i1 %96, label %cmp.and-25, label %if.else-31

cmp.and-25:
	; IndexExpr
	%97 = load %..string, %..string* %1, align 8
	%98 = extractvalue %..string %97, 0
	%99 = extractvalue %..string %97, 1
	%100 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$f6, i64 0, i32 0), i64 37}, i64 1032, i64 21, i64 %100, i64 %99)
	%101 = getelementptr inbounds i8, i8* %98, i64 %100
	%102 = load i8, i8* %101, align 1
	%103 = icmp eq i8 %102, 42
	br i1 %103, label %if.then-26, label %if.else-31

if.then-26:
	%104 = load i64, i64* %7, align 8
	%105 = add i64 %104, 1
	store i64 %105, i64* %7
	; AssignStmt
	; SelectorExpr
	%106 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%107 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%108 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%109 = load i64, i64* %5, align 8
	%110 = call {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %108, i64 %109)
	%111 = extractvalue {i64, i64, i1} %110, 0
	%112 = extractvalue {i64, i64, i1} %110, 1
	%113 = extractvalue {i64, i64, i1} %110, 2
	store i64 %111, i64* %106
	store i64 %112, i64* %5
	store i1 %113, i1* %107
	; IfStmt
	; SelectorExpr
	%114 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%115 = load i1, i1* %114, align 1
	br i1 %115, label %if.done-28, label %if.then-27

if.then-27:
	%116 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %116, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$f7, i64 0, i32 0), i64 13})
	br label %if.done-28

if.done-28:
	; IfStmt
	; SelectorExpr
	%117 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	%118 = load i64, i64* %117, align 8
	%119 = icmp slt i64 %118, 0
	br i1 %119, label %if.then-29, label %if.done-30

if.then-29:
	; AssignStmt
	; SelectorExpr
	%120 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%121 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	%122 = load i64, i64* %121, align 8
	%123 = sub i64 0, %122
	store i64 %123, i64* %120
	; AssignStmt
	; SelectorExpr
	%124 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 4
	store i1 true, i1* %124
	; AssignStmt
	; SelectorExpr
	%125 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 7
	store i1 false, i1* %125
	br label %if.done-30

if.done-30:
	; AssignStmt
	store i1 false, i1* %6
	br label %if.done-35

if.else-31:
	; AssignStmt
	; SelectorExpr
	%126 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 1
	; SelectorExpr
	%127 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%128 = load %..string, %..string* %1, align 8
	%129 = load i64, i64* %7, align 8
	%130 = call {i64, i64, i1} @.fmt-4.parse_int(%..string %128, i64 %129)
	%131 = extractvalue {i64, i64, i1} %130, 0
	%132 = extractvalue {i64, i64, i1} %130, 1
	%133 = extractvalue {i64, i64, i1} %130, 2
	store i64 %131, i64* %126
	store i64 %132, i64* %7
	store i1 %133, i1* %127
	; IfStmt
	%134 = load i1, i1* %6, align 1
	br i1 %134, label %cmp.and-32, label %if.done-34

cmp.and-32:
	; SelectorExpr
	%135 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 9
	%136 = load i1, i1* %135, align 1
	br i1 %136, label %if.then-33, label %if.done-34

if.then-33:
	; AssignStmt
	; SelectorExpr
	%137 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	store i1 false, i1* %137
	br label %if.done-34

if.done-34:
	br label %if.done-35

if.done-35:
	; IfStmt
	%138 = load i64, i64* %7, align 8
	%139 = load i64, i64* %4, align 8
	%140 = icmp slt i64 %138, %139
	br i1 %140, label %cmp.and-36, label %if.done-50

cmp.and-36:
	; IndexExpr
	%141 = load %..string, %..string* %1, align 8
	%142 = extractvalue %..string %141, 0
	%143 = extractvalue %..string %141, 1
	%144 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$f8, i64 0, i32 0), i64 37}, i64 1053, i64 21, i64 %144, i64 %143)
	%145 = getelementptr inbounds i8, i8* %142, i64 %144
	%146 = load i8, i8* %145, align 1
	%147 = icmp eq i8 %146, 46
	br i1 %147, label %if.then-37, label %if.done-50

if.then-37:
	%148 = load i64, i64* %7, align 8
	%149 = add i64 %148, 1
	store i64 %149, i64* %7
	; IfStmt
	%150 = load i1, i1* %6, align 1
	br i1 %150, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	; SelectorExpr
	%151 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	store i1 false, i1* %151
	br label %if.done-39

if.done-39:
	; IfStmt
	%152 = load i64, i64* %7, align 8
	%153 = load i64, i64* %4, align 8
	%154 = icmp slt i64 %152, %153
	br i1 %154, label %cmp.and-40, label %if.else-46

cmp.and-40:
	; IndexExpr
	%155 = load %..string, %..string* %1, align 8
	%156 = extractvalue %..string %155, 0
	%157 = extractvalue %..string %155, 1
	%158 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$f9, i64 0, i32 0), i64 37}, i64 1058, i64 22, i64 %158, i64 %157)
	%159 = getelementptr inbounds i8, i8* %156, i64 %158
	%160 = load i8, i8* %159, align 1
	%161 = icmp eq i8 %160, 42
	br i1 %161, label %if.then-41, label %if.else-46

if.then-41:
	; AssignStmt
	%162 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%163 = load i64, i64* %5, align 8
	%164 = load %..string, %..string* %1, align 8
	%165 = load i64, i64* %7, align 8
	%166 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%167 = extractvalue {%..any*, i64, i64} %166, 1
	%168 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %162, i64 %163, %..string %164, i64 %165, i64 %167)
	%169 = extractvalue {i64, i64, i1} %168, 0
	%170 = extractvalue {i64, i64, i1} %168, 1
	%171 = extractvalue {i64, i64, i1} %168, 2
	store i64 %169, i64* %5
	store i64 %170, i64* %7
	store i1 %171, i1* %6
	%172 = load i64, i64* %7, align 8
	%173 = add i64 %172, 1
	store i64 %173, i64* %7
	; AssignStmt
	; SelectorExpr
	%174 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	; SelectorExpr
	%175 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%176 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%177 = load i64, i64* %5, align 8
	%178 = call {i64, i64, i1} @.fmt-4.int_from_arg({%..any*, i64, i64} %176, i64 %177)
	%179 = extractvalue {i64, i64, i1} %178, 0
	%180 = extractvalue {i64, i64, i1} %178, 1
	%181 = extractvalue {i64, i64, i1} %178, 2
	store i64 %179, i64* %174
	store i64 %180, i64* %5
	store i1 %181, i1* %175
	; IfStmt
	; SelectorExpr
	%182 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	%183 = load i64, i64* %182, align 8
	%184 = icmp slt i64 %183, 0
	br i1 %184, label %if.then-42, label %if.done-43

if.then-42:
	; AssignStmt
	; SelectorExpr
	%185 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	store i64 0, i64* %185
	; AssignStmt
	; SelectorExpr
	%186 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	store i1 false, i1* %186
	br label %if.done-43

if.done-43:
	; IfStmt
	; SelectorExpr
	%187 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%188 = load i1, i1* %187, align 1
	br i1 %188, label %if.done-45, label %if.then-44

if.then-44:
	; SelectorExpr
	%189 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 3
	%190 = load {i8*, i64, i64}*, {i8*, i64, i64}** %189, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %190, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$fa, i64 0, i32 0), i64 17})
	br label %if.done-45

if.done-45:
	; AssignStmt
	store i1 false, i1* %6
	br label %if.done-49

if.else-46:
	; AssignStmt
	; SelectorExpr
	%191 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	; SelectorExpr
	%192 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%193 = load %..string, %..string* %1, align 8
	%194 = load i64, i64* %7, align 8
	%195 = call {i64, i64, i1} @.fmt-4.parse_int(%..string %193, i64 %194)
	%196 = extractvalue {i64, i64, i1} %195, 0
	%197 = extractvalue {i64, i64, i1} %195, 1
	%198 = extractvalue {i64, i64, i1} %195, 2
	store i64 %196, i64* %191
	store i64 %197, i64* %7
	store i1 %198, i1* %192
	; IfStmt
	; SelectorExpr
	%199 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	%200 = load i1, i1* %199, align 1
	br i1 %200, label %if.done-48, label %if.then-47

if.then-47:
	; AssignStmt
	; SelectorExpr
	%201 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 10
	store i1 true, i1* %201
	; AssignStmt
	; SelectorExpr
	%202 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 2
	store i64 0, i64* %202
	br label %if.done-48

if.done-48:
	br label %if.done-49

if.done-49:
	br label %if.done-50

if.done-50:
	; IfStmt
	%203 = load i1, i1* %6, align 1
	br i1 %203, label %if.done-52, label %if.then-51

if.then-51:
	; AssignStmt
	%204 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	%205 = load i64, i64* %5, align 8
	%206 = load %..string, %..string* %1, align 8
	%207 = load i64, i64* %7, align 8
	%208 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%209 = extractvalue {%..any*, i64, i64} %208, 1
	%210 = call {i64, i64, i1} @.fmt-4._arg_number(%fmt-4.Fmt_Info* %204, i64 %205, %..string %206, i64 %207, i64 %209)
	%211 = extractvalue {i64, i64, i1} %210, 0
	%212 = extractvalue {i64, i64, i1} %210, 1
	%213 = extractvalue {i64, i64, i1} %210, 2
	store i64 %211, i64* %5
	store i64 %212, i64* %7
	store i1 %213, i1* %6
	br label %if.done-52

if.done-52:
	; IfStmt
	%214 = load i64, i64* %7, align 8
	%215 = load i64, i64* %4, align 8
	%216 = icmp sge i64 %214, %215
	br i1 %216, label %if.then-53, label %if.done-54

if.then-53:
	%217 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %217, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$fb, i64 0, i32 0), i64 11})
	; break
	br label %for.done-64

if.done-54:
	; verb
	store i32 zeroinitializer, i32* %11
		; w
	store i64 zeroinitializer, i64* %12
		; SelectorExpr
	; SliceExpr
	%218 = load i64, i64* %7, align 8
	%219 = load %..string, %..string* %1, align 8
	%220 = extractvalue %..string %219, 1
	%221 = extractvalue %..string %219, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$fc, i64 0, i32 0), i64 37}, i64 1088, i64 34, i64 %218, i64 %220)
	%222 = extractvalue %..string %219, 0
	%223 = getelementptr inbounds i8, i8* %222, i64 %218
	%224 = sub i64 %220, %218
	store %..string zeroinitializer, %..string* %13
	%225 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 0
	store i8* %223, i8** %225
	%226 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 1
	store i64 %224, i64* %226
	%227 = load %..string, %..string* %13, align 8
	%228 = call {i32, i64} @.utf8-5.decode_rune-1976290373152(%..string %227)
	%229 = extractvalue {i32, i64} %228, 0
	%230 = extractvalue {i32, i64} %228, 1
	store i32 %229, i32* %11
	store i64 %230, i64* %12
	; AssignStmt
	%231 = load i64, i64* %12, align 8
	%232 = load i64, i64* %7, align 8
	%233 = add i64 %232, %231
	store i64 %233, i64* %7
	; IfStmt
	%234 = load i32, i32* %11, align 4
	%235 = icmp eq i32 %234, 37
	br i1 %235, label %if.then-55, label %if.else-56

if.then-55:
	%236 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_byte({i8*, i64, i64}* %236, i8 37)
	br label %if.done-63

if.else-56:
	; IfStmt
	; SelectorExpr
	%237 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 12
	%238 = load i1, i1* %237, align 1
	br i1 %238, label %if.else-58, label %if.then-57

if.then-57:
	%239 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %239, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$fd, i64 0, i32 0), i64 23})
	br label %if.done-62

if.else-58:
	; IfStmt
	%240 = load i64, i64* %5, align 8
	%241 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%242 = extractvalue {%..any*, i64, i64} %241, 1
	%243 = icmp sge i64 %240, %242
	br i1 %243, label %if.then-59, label %if.else-60

if.then-59:
	%244 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %244, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$fe, i64 0, i32 0), i64 20})
	br label %if.done-61

if.else-60:
	%245 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	; IndexExpr
	%246 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%247 = extractvalue {%..any*, i64, i64} %246, 0
	%248 = extractvalue {%..any*, i64, i64} %246, 1
	%249 = load i64, i64* %5, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$ff, i64 0, i32 0), i64 37}, i64 1098, i64 22, i64 %249, i64 %248)
	%250 = getelementptr inbounds %..any, %..any* %247, i64 %249
	%251 = load %..any, %..any* %250, align 8
	%252 = load i32, i32* %11, align 4
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %245, %..any %251, i32 %252)
	%253 = load i64, i64* %5, align 8
	%254 = add i64 %253, 1
	store i64 %254, i64* %5
	br label %if.done-61

if.done-61:
	br label %if.done-62

if.done-62:
	br label %if.done-63

if.done-63:
	br label %for.loop-1

for.done-64:
	; IfStmt
	; SelectorExpr
	%255 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0, i32 11
	%256 = load i1, i1* %255, align 1
	br i1 %256, label %if.done-75, label %cmp.and-65

cmp.and-65:
	%257 = load i64, i64* %5, align 8
	%258 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%259 = extractvalue {%..any*, i64, i64} %258, 1
	%260 = icmp slt i64 %257, %259
	br i1 %260, label %if.then-66, label %if.done-75

if.then-66:
	%261 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %261, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$100, i64 0, i32 0), i64 9})
	; RangeStmt
	; arg
	store %..any zeroinitializer, %..any* %14
		; index
	store i64 zeroinitializer, i64* %15
		; SliceExpr
	%262 = load i64, i64* %5, align 8
	%263 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%264 = extractvalue {%..any*, i64, i64} %263, 1
	%265 = extractvalue {%..any*, i64, i64} %263, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$101, i64 0, i32 0), i64 37}, i64 1105, i64 25, i64 %262, i64 %264, i64 %265)
	%266 = extractvalue {%..any*, i64, i64} %263, 0
	%267 = getelementptr inbounds %..any, %..any* %266, i64 %262
	%268 = sub i64 %264, %262
	%269 = sub i64 %265, %262
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	%270 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %267, %..any** %270
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 %268, i64* %271
	%272 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 %269, i64* %272
	%273 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	store i64 zeroinitializer, i64* %17
	%274 = extractvalue {%..any*, i64, i64} %273, 1
	store i64 %274, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 -1, i64* %18
	br label %for.index.loop-67

for.index.loop-67:
	%275 = load i64, i64* %18, align 8
	%276 = add i64 %275, 1
	store i64 %276, i64* %18
	%277 = load i64, i64* %17, align 8
	%278 = icmp slt i64 %276, %277
	br i1 %278, label %for.index.body-68, label %for.index.done-74

for.index.body-68:
	%279 = load i64, i64* %18, align 8
	%280 = extractvalue {%..any*, i64, i64} %273, 0
	%281 = getelementptr inbounds %..any, %..any* %280, i64 %279
	%282 = load %..any, %..any* %281, align 8
	store %..any %282, %..any* %14
	store i64 %279, i64* %15
	; IfStmt
	%283 = load i64, i64* %15, align 8
	%284 = icmp sgt i64 %283, 0
	br i1 %284, label %if.then-69, label %if.done-70

if.then-69:
	%285 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %285, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$102, i64 0, i32 0), i64 2})
	br label %if.done-70

if.done-70:
	; IfStmt
	%286 = load %..any, %..any* %14, align 8
	%287 = extractvalue %..any %286, 0
	%288 = extractvalue %..any %286, 1
	%289 = bitcast %..rawptr null to %Type_Info*
	%290 = icmp eq %Type_Info* %287, %289
	%291 = icmp eq %..rawptr %288, null
	%292 = or i1 %290, %291
	br i1 %292, label %if.then-71, label %if.else-72

if.then-71:
	%293 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %293, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$103, i64 0, i32 0), i64 5})
	br label %if.done-73

if.else-72:
	%294 = getelementptr inbounds %fmt-4.Fmt_Info, %fmt-4.Fmt_Info* %3, i64 0
	; IndexExpr
	%295 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	%296 = extractvalue {%..any*, i64, i64} %295, 0
	%297 = extractvalue {%..any*, i64, i64} %295, 1
	%298 = load i64, i64* %15, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.__str$104, i64 0, i32 0), i64 37}, i64 1112, i64 23, i64 %298, i64 %297)
	%299 = getelementptr inbounds %..any, %..any* %296, i64 %298
	%300 = load %..any, %..any* %299, align 8
	call void @.fmt-4.fmt_arg(%fmt-4.Fmt_Info* %294, %..any %300, i32 118)
	br label %if.done-73

if.done-73:
	br label %for.index.loop-67

for.index.done-74:
	%301 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	call void @.fmt-4.write_string({i8*, i64, i64}* %301, %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$105, i64 0, i32 0), i64 1})
	br label %if.done-75

if.done-75:
	; ReturnStmt
	%302 = load {i8*, i64, i64}*, {i8*, i64, i64}** %0, align 8
	%303 = load {i8*, i64, i64}, {i8*, i64, i64}* %302, align 8
	%304 = extractvalue {i8*, i64, i64} %303, 1
	ret i64 %304
}

define {[4 x i8], i64} @.utf8-5.encode_rune(i32 %r) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca [4 x i8], align 1
	%2 = alloca i32, align 4
	%3 = alloca {[4 x i8], i64}, align 8
	%4 = alloca {[4 x i8], i64}, align 8
	%5 = alloca {[4 x i8], i64}, align 8
	%6 = alloca {[4 x i8], i64}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %r, i32* %0
	; buf
	store [4 x i8] zeroinitializer, [4 x i8]* %1
		; i
	store i32 zeroinitializer, i32* %2
		%7 = load i32, i32* %0, align 4
	; cast - cast
	%8 = bitcast i32 %7 to i32
	store i32 %8, i32* %2
	; IfStmt
	%9 = load i32, i32* %2, align 4
	%10 = icmp ule i32 %9, 127
	br i1 %10, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	%11 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$106, i64 0, i32 0), i64 38}, i64 66, i64 7, i64 0, i64 4)
	%12 = load i32, i32* %0, align 4
	; cast - cast
	%13 = trunc i32 %12 to i8
	store i8 %13, i8* %11
	; ReturnStmt
	%14 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %3
	%15 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 0
	store [4 x i8] %14, [4 x i8]* %15
	%16 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 1
	store i64 1, i64* %16
	%17 = load {[4 x i8], i64}, {[4 x i8], i64}* %3, align 8
	ret {[4 x i8], i64} %17

if.done-2:
	; IfStmt
	%18 = load i32, i32* %2, align 4
	%19 = icmp ule i32 %18, 2047
	br i1 %19, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$107, i64 0, i32 0), i64 38}, i64 70, i64 7, i64 0, i64 4)
	%21 = load i32, i32* %0, align 4
	%22 = lshr i32 %21, 6
	; cast - cast
	%23 = trunc i32 %22 to i8
	%24 = or i8 192, %23
	store i8 %24, i8* %20
	; AssignStmt
	; IndexExpr
	%25 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$108, i64 0, i32 0), i64 38}, i64 71, i64 7, i64 1, i64 4)
	%26 = load i32, i32* %0, align 4
	; cast - cast
	%27 = trunc i32 %26 to i8
	%28 = and i8 %27, 63
	%29 = or i8 128, %28
	store i8 %29, i8* %25
	; ReturnStmt
	%30 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %4
	%31 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 0
	store [4 x i8] %30, [4 x i8]* %31
	%32 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 1
	store i64 2, i64* %32
	%33 = load {[4 x i8], i64}, {[4 x i8], i64}* %4, align 8
	ret {[4 x i8], i64} %33

if.done-4:
	; IfStmt
	%34 = load i32, i32* %2, align 4
	%35 = icmp ugt i32 %34, 1114111
	br i1 %35, label %if.then-7, label %cmp.or-5

cmp.or-5:
	%36 = load i32, i32* %2, align 4
	%37 = icmp ule i32 55296, %36
	br i1 %37, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%38 = load i32, i32* %2, align 4
	%39 = icmp ule i32 %38, 57343
	br i1 %39, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	store i32 65533, i32* %0
	br label %if.done-8

if.done-8:
	; IfStmt
	%40 = load i32, i32* %2, align 4
	%41 = icmp ule i32 %40, 65535
	br i1 %41, label %if.then-9, label %if.done-10

if.then-9:
	; AssignStmt
	; IndexExpr
	%42 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$109, i64 0, i32 0), i64 38}, i64 82, i64 7, i64 0, i64 4)
	%43 = load i32, i32* %0, align 4
	%44 = lshr i32 %43, 12
	; cast - cast
	%45 = trunc i32 %44 to i8
	%46 = or i8 224, %45
	store i8 %46, i8* %42
	; AssignStmt
	; IndexExpr
	%47 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$10a, i64 0, i32 0), i64 38}, i64 83, i64 7, i64 1, i64 4)
	%48 = load i32, i32* %0, align 4
	%49 = lshr i32 %48, 6
	; cast - cast
	%50 = trunc i32 %49 to i8
	%51 = and i8 %50, 63
	%52 = or i8 128, %51
	store i8 %52, i8* %47
	; AssignStmt
	; IndexExpr
	%53 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$10b, i64 0, i32 0), i64 38}, i64 84, i64 7, i64 2, i64 4)
	%54 = load i32, i32* %0, align 4
	; cast - cast
	%55 = trunc i32 %54 to i8
	%56 = and i8 %55, 63
	%57 = or i8 128, %56
	store i8 %57, i8* %53
	; ReturnStmt
	%58 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %5
	%59 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 0
	store [4 x i8] %58, [4 x i8]* %59
	%60 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 1
	store i64 3, i64* %60
	%61 = load {[4 x i8], i64}, {[4 x i8], i64}* %5, align 8
	ret {[4 x i8], i64} %61

if.done-10:
	; AssignStmt
	; IndexExpr
	%62 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$10c, i64 0, i32 0), i64 38}, i64 88, i64 6, i64 0, i64 4)
	%63 = load i32, i32* %0, align 4
	%64 = lshr i32 %63, 18
	; cast - cast
	%65 = trunc i32 %64 to i8
	%66 = or i8 240, %65
	store i8 %66, i8* %62
	; AssignStmt
	; IndexExpr
	%67 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$10d, i64 0, i32 0), i64 38}, i64 89, i64 6, i64 1, i64 4)
	%68 = load i32, i32* %0, align 4
	%69 = lshr i32 %68, 12
	; cast - cast
	%70 = trunc i32 %69 to i8
	%71 = and i8 %70, 63
	%72 = or i8 128, %71
	store i8 %72, i8* %67
	; AssignStmt
	; IndexExpr
	%73 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$10e, i64 0, i32 0), i64 38}, i64 90, i64 6, i64 2, i64 4)
	%74 = load i32, i32* %0, align 4
	%75 = lshr i32 %74, 6
	; cast - cast
	%76 = trunc i32 %75 to i8
	%77 = and i8 %76, 63
	%78 = or i8 128, %77
	store i8 %78, i8* %73
	; AssignStmt
	; IndexExpr
	%79 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$10f, i64 0, i32 0), i64 38}, i64 91, i64 6, i64 3, i64 4)
	%80 = load i32, i32* %0, align 4
	; cast - cast
	%81 = trunc i32 %80 to i8
	%82 = and i8 %81, 63
	%83 = or i8 128, %82
	store i8 %83, i8* %79
	; ReturnStmt
	%84 = load [4 x i8], [4 x i8]* %1, align 1
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %6
	%85 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 0
	store [4 x i8] %84, [4 x i8]* %85
	%86 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 1
	store i64 4, i64* %86
	%87 = load {[4 x i8], i64}, {[4 x i8], i64}* %6, align 8
	ret {[4 x i8], i64} %87
}

define {i32, i64} @.utf8-5.decode_rune-1976290373152(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca {i32, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%4 = load %..string, %..string* %0, align 8
	; cast - cast
	%5 = extractvalue %..string %4, 0
	store i8* zeroinitializer, i8** %1
	store i8* %5, i8** %1
	%6 = extractvalue %..string %4, 1
	%7 = sub i64 %6, 0
	%8 = sub i64 %6, 0
	%9 = load i8*, i8** %1, align 8
	%10 = getelementptr inbounds i8, i8* %9, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %8, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%15 = call {i32, i64} @.utf8-5.decode_rune-1976290373520({i8*, i64, i64} %14)
	%16 = extractvalue {i32, i64} %15, 0
	%17 = extractvalue {i32, i64} %15, 1
	store {i32, i64} zeroinitializer, {i32, i64}* %3
	%18 = getelementptr inbounds {i32, i64}, {i32, i64}* %3, i64 0, i32 0
	store i32 %16, i32* %18
	%19 = getelementptr inbounds {i32, i64}, {i32, i64}* %3, i64 0, i32 1
	store i64 %17, i64* %19
	%20 = load {i32, i64}, {i32, i64}* %3, align 8
	ret {i32, i64} %20
}

define {i32, i64} @.utf8-5.decode_rune-1976290373520({i8*, i64, i64} %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca {i32, i64}, align 8
	%3 = alloca i8, align 1
	%4 = alloca i8, align 1
	%5 = alloca i32, align 4
	%6 = alloca {i32, i64}, align 8
	%7 = alloca i8, align 1
	%8 = alloca %utf8-5.Accept_Range, align 1
	%9 = alloca {i32, i64}, align 8
	%10 = alloca i8, align 1
	%11 = alloca {i32, i64}, align 8
	%12 = alloca {i32, i64}, align 8
	%13 = alloca i8, align 1
	%14 = alloca {i32, i64}, align 8
	%15 = alloca {i32, i64}, align 8
	%16 = alloca i8, align 1
	%17 = alloca {i32, i64}, align 8
	%18 = alloca {i32, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %s, {i8*, i64, i64}* %0
	; n
	store i64 zeroinitializer, i64* %1
		%19 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%20 = extractvalue {i8*, i64, i64} %19, 1
	store i64 %20, i64* %1
	; IfStmt
	%21 = load i64, i64* %1, align 8
	%22 = icmp slt i64 %21, 1
	br i1 %22, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %2
	%23 = getelementptr inbounds {i32, i64}, {i32, i64}* %2, i64 0, i32 0
	store i32 65533, i32* %23
	%24 = getelementptr inbounds {i32, i64}, {i32, i64}* %2, i64 0, i32 1
	store i64 0, i64* %24
	%25 = load {i32, i64}, {i32, i64}* %2, align 8
	ret {i32, i64} %25

if.done-2:
	; s0
	store i8 zeroinitializer, i8* %3
		; IndexExpr
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%27 = extractvalue {i8*, i64, i64} %26, 0
	%28 = extractvalue {i8*, i64, i64} %26, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$110, i64 0, i32 0), i64 38}, i64 101, i64 10, i64 0, i64 %28)
	%29 = getelementptr inbounds i8, i8* %27, i64 0
	%30 = load i8, i8* %29, align 1
	store i8 %30, i8* %3
	; x
	store i8 zeroinitializer, i8* %4
		; IndexExpr
	%31 = load i8, i8* %3, align 1
	%32 = zext i8 %31 to i64
	%33 = trunc i64 %32 to i32
	%34 = getelementptr inbounds [256 x i8], [256 x i8]* @.utf8-5.accept_sizes, i64 0, i32 %33
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$111, i64 0, i32 0), i64 38}, i64 102, i64 20, i64 %32, i64 256)
	%35 = load i8, i8* %34, align 1
	store i8 %35, i8* %4
	; IfStmt
	%36 = load i8, i8* %4, align 1
	%37 = icmp uge i8 %36, 240
	br i1 %37, label %if.then-3, label %if.done-4

if.then-3:
	; mask
	store i32 zeroinitializer, i32* %5
		%38 = load i8, i8* %4, align 1
	; cast - cast
	%39 = zext i8 %38 to i32
	%40 = shl i32 %39, 31
	%41 = lshr i32 %40, 31
	store i32 %41, i32* %5
	; ReturnStmt
	; IndexExpr
	%42 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%43 = extractvalue {i8*, i64, i64} %42, 0
	%44 = extractvalue {i8*, i64, i64} %42, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$112, i64 0, i32 0), i64 38}, i64 105, i64 23, i64 0, i64 %44)
	%45 = getelementptr inbounds i8, i8* %43, i64 0
	%46 = load i8, i8* %45, align 1
	; cast - cast
	%47 = zext i8 %46 to i32
	%48 = load i32, i32* %5, align 4
	%49 = xor i32 %48, -1
	%50 = and i32 %47, %49
	%51 = load i32, i32* %5, align 4
	%52 = and i32 65533, %51
	%53 = or i32 %50, %52
	store {i32, i64} zeroinitializer, {i32, i64}* %6
	%54 = getelementptr inbounds {i32, i64}, {i32, i64}* %6, i64 0, i32 0
	store i32 %53, i32* %54
	%55 = getelementptr inbounds {i32, i64}, {i32, i64}* %6, i64 0, i32 1
	store i64 1, i64* %55
	%56 = load {i32, i64}, {i32, i64}* %6, align 8
	ret {i32, i64} %56

if.done-4:
	; sz
	store i8 zeroinitializer, i8* %7
		%57 = load i8, i8* %4, align 1
	%58 = and i8 %57, 7
	store i8 %58, i8* %7
	; accept
	store %utf8-5.Accept_Range zeroinitializer, %utf8-5.Accept_Range* %8
		; IndexExpr
	%59 = load i8, i8* %4, align 1
	%60 = lshr i8 %59, 4
	%61 = zext i8 %60 to i64
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [5 x %utf8-5.Accept_Range], [5 x %utf8-5.Accept_Range]* @.utf8-5.accept_ranges, i64 0, i32 %62
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$113, i64 0, i32 0), i64 38}, i64 108, i64 26, i64 %61, i64 5)
	%64 = load %utf8-5.Accept_Range, %utf8-5.Accept_Range* %63, align 1
	store %utf8-5.Accept_Range %64, %utf8-5.Accept_Range* %8
	; IfStmt
	%65 = load i64, i64* %1, align 8
	%66 = load i8, i8* %7, align 1
	; cast - cast
	%67 = zext i8 %66 to i64
	%68 = icmp slt i64 %65, %67
	br i1 %68, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %9
	%69 = getelementptr inbounds {i32, i64}, {i32, i64}* %9, i64 0, i32 0
	store i32 65533, i32* %69
	%70 = getelementptr inbounds {i32, i64}, {i32, i64}* %9, i64 0, i32 1
	store i64 1, i64* %70
	%71 = load {i32, i64}, {i32, i64}* %9, align 8
	ret {i32, i64} %71

if.done-6:
	; b1
	store i8 zeroinitializer, i8* %10
		; IndexExpr
	%72 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%73 = extractvalue {i8*, i64, i64} %72, 0
	%74 = extractvalue {i8*, i64, i64} %72, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$114, i64 0, i32 0), i64 38}, i64 112, i64 10, i64 1, i64 %74)
	%75 = getelementptr inbounds i8, i8* %73, i64 1
	%76 = load i8, i8* %75, align 1
	store i8 %76, i8* %10
	; IfStmt
	%77 = load i8, i8* %10, align 1
	; SelectorExpr
	%78 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %8, i64 0, i32 0
	%79 = load i8, i8* %78, align 1
	%80 = icmp ult i8 %77, %79
	br i1 %80, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; SelectorExpr
	%81 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %8, i64 0, i32 1
	%82 = load i8, i8* %81, align 1
	%83 = load i8, i8* %10, align 1
	%84 = icmp ult i8 %82, %83
	br i1 %84, label %if.then-8, label %if.done-9

if.then-8:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %11
	%85 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 0
	store i32 65533, i32* %85
	%86 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 1
	store i64 1, i64* %86
	%87 = load {i32, i64}, {i32, i64}* %11, align 8
	ret {i32, i64} %87

if.done-9:
	; IfStmt
	%88 = load i8, i8* %7, align 1
	%89 = icmp eq i8 %88, 2
	br i1 %89, label %if.then-10, label %if.done-11

if.then-10:
	; ReturnStmt
	%90 = load i8, i8* %3, align 1
	%91 = and i8 %90, 31
	; cast - cast
	%92 = zext i8 %91 to i32
	%93 = shl i32 %92, 6
	%94 = load i8, i8* %10, align 1
	%95 = and i8 %94, 63
	; cast - cast
	%96 = zext i8 %95 to i32
	%97 = or i32 %93, %96
	store {i32, i64} zeroinitializer, {i32, i64}* %12
	%98 = getelementptr inbounds {i32, i64}, {i32, i64}* %12, i64 0, i32 0
	store i32 %97, i32* %98
	%99 = getelementptr inbounds {i32, i64}, {i32, i64}* %12, i64 0, i32 1
	store i64 2, i64* %99
	%100 = load {i32, i64}, {i32, i64}* %12, align 8
	ret {i32, i64} %100

if.done-11:
	; b2
	store i8 zeroinitializer, i8* %13
		; IndexExpr
	%101 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%102 = extractvalue {i8*, i64, i64} %101, 0
	%103 = extractvalue {i8*, i64, i64} %101, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$115, i64 0, i32 0), i64 38}, i64 119, i64 10, i64 2, i64 %103)
	%104 = getelementptr inbounds i8, i8* %102, i64 2
	%105 = load i8, i8* %104, align 1
	store i8 %105, i8* %13
	; IfStmt
	%106 = load i8, i8* %13, align 1
	%107 = icmp ult i8 %106, 128
	br i1 %107, label %if.then-13, label %cmp.or-12

cmp.or-12:
	%108 = load i8, i8* %13, align 1
	%109 = icmp ult i8 191, %108
	br i1 %109, label %if.then-13, label %if.done-14

if.then-13:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %14
	%110 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 0
	store i32 65533, i32* %110
	%111 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 1
	store i64 1, i64* %111
	%112 = load {i32, i64}, {i32, i64}* %14, align 8
	ret {i32, i64} %112

if.done-14:
	; IfStmt
	%113 = load i8, i8* %7, align 1
	%114 = icmp eq i8 %113, 3
	br i1 %114, label %if.then-15, label %if.done-16

if.then-15:
	; ReturnStmt
	%115 = load i8, i8* %3, align 1
	%116 = and i8 %115, 15
	; cast - cast
	%117 = zext i8 %116 to i32
	%118 = shl i32 %117, 12
	%119 = load i8, i8* %10, align 1
	%120 = and i8 %119, 63
	; cast - cast
	%121 = zext i8 %120 to i32
	%122 = shl i32 %121, 6
	%123 = or i32 %118, %122
	%124 = load i8, i8* %13, align 1
	%125 = and i8 %124, 63
	; cast - cast
	%126 = zext i8 %125 to i32
	%127 = or i32 %123, %126
	store {i32, i64} zeroinitializer, {i32, i64}* %15
	%128 = getelementptr inbounds {i32, i64}, {i32, i64}* %15, i64 0, i32 0
	store i32 %127, i32* %128
	%129 = getelementptr inbounds {i32, i64}, {i32, i64}* %15, i64 0, i32 1
	store i64 3, i64* %129
	%130 = load {i32, i64}, {i32, i64}* %15, align 8
	ret {i32, i64} %130

if.done-16:
	; b3
	store i8 zeroinitializer, i8* %16
		; IndexExpr
	%131 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%132 = extractvalue {i8*, i64, i64} %131, 0
	%133 = extractvalue {i8*, i64, i64} %131, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$116, i64 0, i32 0), i64 38}, i64 126, i64 10, i64 3, i64 %133)
	%134 = getelementptr inbounds i8, i8* %132, i64 3
	%135 = load i8, i8* %134, align 1
	store i8 %135, i8* %16
	; IfStmt
	%136 = load i8, i8* %16, align 1
	%137 = icmp ult i8 %136, 128
	br i1 %137, label %if.then-18, label %cmp.or-17

cmp.or-17:
	%138 = load i8, i8* %16, align 1
	%139 = icmp ult i8 191, %138
	br i1 %139, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	store {i32, i64} zeroinitializer, {i32, i64}* %17
	%140 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 0
	store i32 65533, i32* %140
	%141 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 1
	store i64 1, i64* %141
	%142 = load {i32, i64}, {i32, i64}* %17, align 8
	ret {i32, i64} %142

if.done-19:
	; ReturnStmt
	%143 = load i8, i8* %3, align 1
	%144 = and i8 %143, 7
	; cast - cast
	%145 = zext i8 %144 to i32
	%146 = shl i32 %145, 18
	%147 = load i8, i8* %10, align 1
	%148 = and i8 %147, 63
	; cast - cast
	%149 = zext i8 %148 to i32
	%150 = shl i32 %149, 12
	%151 = or i32 %146, %150
	%152 = load i8, i8* %13, align 1
	%153 = and i8 %152, 63
	; cast - cast
	%154 = zext i8 %153 to i32
	%155 = shl i32 %154, 6
	%156 = or i32 %151, %155
	%157 = load i8, i8* %16, align 1
	%158 = and i8 %157, 63
	; cast - cast
	%159 = zext i8 %158 to i32
	%160 = or i32 %156, %159
	store {i32, i64} zeroinitializer, {i32, i64}* %18
	%161 = getelementptr inbounds {i32, i64}, {i32, i64}* %18, i64 0, i32 0
	store i32 %160, i32* %161
	%162 = getelementptr inbounds {i32, i64}, {i32, i64}* %18, i64 0, i32 1
	store i64 4, i64* %162
	%163 = load {i32, i64}, {i32, i64}* %18, align 8
	ret {i32, i64} %163
}

define i64 @.utf8-5.rune_count-1976290375728(%..string %s) alwaysinline {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i8*, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; ReturnStmt
	%3 = load %..string, %..string* %0, align 8
	; cast - cast
	%4 = extractvalue %..string %3, 0
	store i8* zeroinitializer, i8** %1
	store i8* %4, i8** %1
	%5 = extractvalue %..string %3, 1
	%6 = sub i64 %5, 0
	%7 = sub i64 %5, 0
	%8 = load i8*, i8** %1, align 8
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%10 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %9, i8** %10
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %6, i64* %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %12
	%13 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	%14 = call i64 @.utf8-5.rune_count-1976290376096({i8*, i64, i64} %13)
	ret i64 %14
}

define i64 @.utf8-5.rune_count-1976290376096({i8*, i64, i64} %s) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i8, align 1
	%5 = alloca i8, align 1
	%6 = alloca i64, align 8
	%7 = alloca %utf8-5.Accept_Range, align 1
	%8 = alloca i8, align 1
	%9 = alloca i8, align 1
	%10 = alloca i8, align 1
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %s, {i8*, i64, i64}* %0
	; count
	store i64 zeroinitializer, i64* %1
		store i64 0, i64* %1
	; n
	store i64 zeroinitializer, i64* %2
		%11 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%12 = extractvalue {i8*, i64, i64} %11, 1
	store i64 %12, i64* %2
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	br label %for.loop-1

for.loop-1:
	%13 = load i64, i64* %3, align 8
	%14 = load i64, i64* %2, align 8
	%15 = icmp slt i64 %13, %14
	br i1 %15, label %for.body-2, label %for.done-26

for.body-2:
	; DeferStmt
	; si
	store i8 zeroinitializer, i8* %4
		; IndexExpr
	%16 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%17 = extractvalue {i8*, i64, i64} %16, 0
	%18 = extractvalue {i8*, i64, i64} %16, 1
	%19 = load i64, i64* %3, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$117, i64 0, i32 0), i64 38}, i64 227, i64 11, i64 %19, i64 %18)
	%20 = getelementptr inbounds i8, i8* %17, i64 %19
	%21 = load i8, i8* %20, align 1
	store i8 %21, i8* %4
	; IfStmt
	%22 = load i8, i8* %4, align 1
	%23 = icmp ult i8 %22, 128
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	%24 = load i64, i64* %3, align 8
	%25 = add i64 %24, 1
	store i64 %25, i64* %3
	; defer
	%26 = load i64, i64* %1, align 8
	%27 = add i64 %26, 1
	store i64 %27, i64* %1
	; continue
	br label %for.loop-1

if.done-4:
	; x
	store i8 zeroinitializer, i8* %5
		; IndexExpr
	%28 = load i8, i8* %4, align 1
	%29 = zext i8 %28 to i64
	%30 = trunc i64 %29 to i32
	%31 = getelementptr inbounds [256 x i8], [256 x i8]* @.utf8-5.accept_sizes, i64 0, i32 %30
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$118, i64 0, i32 0), i64 38}, i64 232, i64 21, i64 %29, i64 256)
	%32 = load i8, i8* %31, align 1
	store i8 %32, i8* %5
	; IfStmt
	%33 = load i8, i8* %5, align 1
	%34 = icmp eq i8 %33, 241
	br i1 %34, label %if.then-5, label %if.done-6

if.then-5:
	%35 = load i64, i64* %3, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %3
	; defer
	%37 = load i64, i64* %1, align 8
	%38 = add i64 %37, 1
	store i64 %38, i64* %1
	; continue
	br label %for.loop-1

if.done-6:
	; size
	store i64 zeroinitializer, i64* %6
		%39 = load i8, i8* %5, align 1
	%40 = and i8 %39, 7
	; cast - cast
	%41 = zext i8 %40 to i64
	store i64 %41, i64* %6
	; IfStmt
	%42 = load i64, i64* %3, align 8
	%43 = load i64, i64* %6, align 8
	%44 = add i64 %42, %43
	%45 = load i64, i64* %2, align 8
	%46 = icmp sgt i64 %44, %45
	br i1 %46, label %if.then-7, label %if.done-8

if.then-7:
	%47 = load i64, i64* %3, align 8
	%48 = add i64 %47, 1
	store i64 %48, i64* %3
	; defer
	%49 = load i64, i64* %1, align 8
	%50 = add i64 %49, 1
	store i64 %50, i64* %1
	; continue
	br label %for.loop-1

if.done-8:
	; ar
	store %utf8-5.Accept_Range zeroinitializer, %utf8-5.Accept_Range* %7
		; IndexExpr
	%51 = load i8, i8* %5, align 1
	%52 = lshr i8 %51, 4
	%53 = zext i8 %52 to i64
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [5 x %utf8-5.Accept_Range], [5 x %utf8-5.Accept_Range]* @.utf8-5.accept_ranges, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$119, i64 0, i32 0), i64 38}, i64 242, i64 23, i64 %53, i64 5)
	%56 = load %utf8-5.Accept_Range, %utf8-5.Accept_Range* %55, align 1
	store %utf8-5.Accept_Range %56, %utf8-5.Accept_Range* %7
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %8
		; IndexExpr
	%57 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%58 = extractvalue {i8*, i64, i64} %57, 0
	%59 = extractvalue {i8*, i64, i64} %57, 1
	%60 = load i64, i64* %3, align 8
	%61 = add i64 %60, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$11a, i64 0, i32 0), i64 38}, i64 243, i64 13, i64 %61, i64 %59)
	%62 = getelementptr inbounds i8, i8* %58, i64 %61
	%63 = load i8, i8* %62, align 1
	store i8 %63, i8* %8
	%64 = load i8, i8* %8, align 1
	; SelectorExpr
	%65 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %7, i64 0, i32 0
	%66 = load i8, i8* %65, align 1
	%67 = icmp ult i8 %64, %66
	br i1 %67, label %if.then-10, label %cmp.or-9

cmp.or-9:
	; SelectorExpr
	%68 = getelementptr inbounds %utf8-5.Accept_Range, %utf8-5.Accept_Range* %7, i64 0, i32 1
	%69 = load i8, i8* %68, align 1
	%70 = load i8, i8* %8, align 1
	%71 = icmp ult i8 %69, %70
	br i1 %71, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-25

if.else-11:
	; IfStmt
	%72 = load i64, i64* %6, align 8
	%73 = icmp eq i64 %72, 2
	br i1 %73, label %if.then-12, label %if.else-13

if.then-12:
	br label %if.done-24

if.else-13:
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %9
		; IndexExpr
	%74 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%75 = extractvalue {i8*, i64, i64} %74, 0
	%76 = extractvalue {i8*, i64, i64} %74, 1
	%77 = load i64, i64* %3, align 8
	%78 = add i64 %77, 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$11b, i64 0, i32 0), i64 38}, i64 247, i64 20, i64 %78, i64 %76)
	%79 = getelementptr inbounds i8, i8* %75, i64 %78
	%80 = load i8, i8* %79, align 1
	store i8 %80, i8* %9
	%81 = load i8, i8* %9, align 1
	%82 = icmp ult i8 %81, 128
	br i1 %82, label %if.then-15, label %cmp.or-14

cmp.or-14:
	%83 = load i8, i8* %9, align 1
	%84 = icmp ult i8 191, %83
	br i1 %84, label %if.then-15, label %if.else-16

if.then-15:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-23

if.else-16:
	; IfStmt
	%85 = load i64, i64* %6, align 8
	%86 = icmp eq i64 %85, 3
	br i1 %86, label %if.then-17, label %if.else-18

if.then-17:
	br label %if.done-22

if.else-18:
	; IfStmt
	; b
	store i8 zeroinitializer, i8* %10
		; IndexExpr
	%87 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%88 = extractvalue {i8*, i64, i64} %87, 0
	%89 = extractvalue {i8*, i64, i64} %87, 1
	%90 = load i64, i64* %3, align 8
	%91 = add i64 %90, 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.__str$11c, i64 0, i32 0), i64 38}, i64 251, i64 20, i64 %91, i64 %89)
	%92 = getelementptr inbounds i8, i8* %88, i64 %91
	%93 = load i8, i8* %92, align 1
	store i8 %93, i8* %10
	%94 = load i8, i8* %10, align 1
	%95 = icmp ult i8 %94, 128
	br i1 %95, label %if.then-20, label %cmp.or-19

cmp.or-19:
	%96 = load i8, i8* %10, align 1
	%97 = icmp ult i8 191, %96
	br i1 %97, label %if.then-20, label %if.done-21

if.then-20:
	; AssignStmt
	store i64 1, i64* %6
	br label %if.done-21

if.done-21:
	br label %if.done-22

if.done-22:
	br label %if.done-23

if.done-23:
	br label %if.done-24

if.done-24:
	br label %if.done-25

if.done-25:
	; AssignStmt
	%98 = load i64, i64* %6, align 8
	%99 = load i64, i64* %3, align 8
	%100 = add i64 %99, %98
	store i64 %100, i64* %3
	; defer
	%101 = load i64, i64* %1, align 8
	%102 = add i64 %101, 1
	store i64 %102, i64* %1
	br label %for.loop-1

for.done-26:
	; ReturnStmt
	%103 = load i64, i64* %1, align 8
	ret i64 %103
}

define i1 @.windows-6.is_key_down(i32 %key) alwaysinline {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %key, i32* %0
	; ReturnStmt
	%1 = load i32, i32* %0, align 8
	; cast - cast
	%2 = call ccc i16 @GetAsyncKeyState(i32 %1)
	%3 = icmp slt i16 %2, 0
	ret i1 %3
}

define i1 @.imgui-8.Begin(%..string %name, i1* %open, i32 %flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i1*, align 8
	%2 = alloca i32, align 8
	%3 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	store i1* zeroinitializer, i1** %1
		store i1* %open, i1** %1
	store i32 zeroinitializer, i32* %2
		store i32 %flags, i32* %2
	; str
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%4 = load %..string, %..string* %0, align 8
	%5 = call i8* @.strings-9.new_c_string(%..string %4)
	store i8* %5, i8** %3
	; DeferStmt
	; ReturnStmt
	%6 = load i8*, i8** %3, align 8
	%7 = load i1*, i1** %1, align 8
	%8 = load i32, i32* %2, align 8
	%9 = call ccc i1 @igBegin(i8* %6, i1* %7, i32 %8)
	; defer
	; free
	%10 = load i8*, i8** %3, align 8
	%11 = bitcast i8* %10 to %..rawptr
	call void @.free_ptr(%..rawptr %11)
	ret i1 %9
}

define i1 @.imgui-8.BeginChild(%..string %str_id, %imgui-8.Vec2 %size, i1 %border, i32 %extra_flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %imgui-8.Vec2, align 4
	%2 = alloca i1, align 1
	%3 = alloca i32, align 8
	%4 = alloca i8*, align 8
	%5 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %str_id, %..string* %0
	store %imgui-8.Vec2 zeroinitializer, %imgui-8.Vec2* %1
		store %imgui-8.Vec2 %size, %imgui-8.Vec2* %1
	store i1 zeroinitializer, i1* %2
		store i1 %border, i1* %2
	store i32 zeroinitializer, i32* %3
		store i32 %extra_flags, i32* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %4
	; DeferStmt
	; ReturnStmt
	%8 = load i8*, i8** %4, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %5
	%9 = load %imgui-8.Vec2, %imgui-8.Vec2* %1, align 4
	%10 = bitcast %imgui-8.Vec2* %1 to i64*
	%11 = load i64, i64* %10, align 8
	store i64 %11, i64* %5
	%12 = load i64, i64* %5, align 8
	%13 = load i1, i1* %2, align 1
	%14 = load i32, i32* %3, align 8
	%15 = call ccc i1 @igBeginChild(i8* %8, i64 %12, i1 %13, i32 %14)
	; defer
	; free
	%16 = load i8*, i8** %4, align 8
	%17 = bitcast i8* %16 to %..rawptr
	call void @.free_ptr(%..rawptr %17)
	ret i1 %15
}

define void @.imgui-8.Text(%..string %fmt_, {%..any*, i64, i64} %args) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..any*, i64, i64}, align 8
	%2 = alloca [1024 x i8], align 1
	%3 = alloca %..string, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	%5 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %fmt_, %..string* %0
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %1
		store {%..any*, i64, i64} %args, {%..any*, i64, i64}* %1
	; buf
	store [1024 x i8] zeroinitializer, [1024 x i8]* %2
		; s
	store %..string zeroinitializer, %..string* %3
		; SelectorExpr
	; SliceExpr
	%6 = load [1024 x i8], [1024 x i8]* %2, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.__str$11d, i64 0, i32 0), i64 55}, i64 517, i64 25, i64 0, i64 0, i64 1024)
	%7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i32 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 0, 0
	%10 = sub i64 1024, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %9, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %10, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%15 = load %..string, %..string* %0, align 8
	%16 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %1, align 8
	%17 = call %..string @.fmt-4.sprintf({i8*, i64, i64} %14, %..string %15, {%..any*, i64, i64} %16)
	store %..string %17, %..string* %3
	; assert
	%18 = load %..string, %..string* %3, align 8
	%19 = extractvalue %..string %18, 1
	%20 = icmp slt i64 %19, 1024
	%21 = icmp eq i1 %20, false
	br i1 %21, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.__str$11e, i64 0, i32 0), i64 55}, i64 518, i64 12, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$11f, i64 0, i32 0), i64 17})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; c_str
	store i8* zeroinitializer, i8** %5
		; IndexExpr
	%22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.__str$120, i64 0, i32 0), i64 55}, i64 519, i64 19, i64 0, i64 1024)
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	store i8* %23, i8** %5
	%24 = load i8*, i8** %5, align 8
	call ccc void @igText(i8* %24)
	ret void
}

define i1 @.imgui-8.Button(%..string %label, %imgui-8.Vec2 %size) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %imgui-8.Vec2, align 4
	%2 = alloca i8*, align 8
	%3 = alloca i64, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store %imgui-8.Vec2 zeroinitializer, %imgui-8.Vec2* %1
		store %imgui-8.Vec2 %size, %imgui-8.Vec2* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%4 = load %..string, %..string* %0, align 8
	%5 = call i8* @.strings-9.new_c_string(%..string %4)
	store i8* %5, i8** %2
	; DeferStmt
	; ReturnStmt
	%6 = load i8*, i8** %2, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %3
	%7 = load %imgui-8.Vec2, %imgui-8.Vec2* %1, align 4
	%8 = bitcast %imgui-8.Vec2* %1 to i64*
	%9 = load i64, i64* %8, align 8
	store i64 %9, i64* %3
	%10 = load i64, i64* %3, align 8
	%11 = call ccc i1 @igButton(i8* %6, i64 %10)
	; defer
	; free
	%12 = load i8*, i8** %2, align 8
	%13 = bitcast i8* %12 to %..rawptr
	call void @.free_ptr(%..rawptr %13)
	ret i1 %11
}

define void @.imgui-8.Image(%..rawptr %user_texture_id, %imgui-8.Vec2 %size, %imgui-8.Vec2 %uv0, %imgui-8.Vec2 %uv1, %imgui-8.Vec4 %tint_col, %imgui-8.Vec4 %border_col) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %imgui-8.Vec2, align 4
	%2 = alloca %imgui-8.Vec2, align 4
	%3 = alloca %imgui-8.Vec2, align 4
	%4 = alloca %imgui-8.Vec4, align 4
	%5 = alloca %imgui-8.Vec4, align 4
	%6 = alloca %..any, align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..any, align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [6 x %..any], align 8
	%14 = alloca i64, align 8
	%15 = alloca i64, align 8
	%16 = alloca i64, align 8
	%17 = alloca %..any, align 8
	%18 = alloca %..any, align 8
	%19 = alloca %..any, align 8
	%20 = alloca %..any, align 8
	%21 = alloca %..any, align 8
	%22 = alloca %..any, align 8
	%23 = alloca {%..any*, i64, i64}, align 8
	%24 = alloca [6 x %..any], align 8
	%25 = alloca i64, align 8
	%26 = alloca i64, align 8
	%27 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %user_texture_id, %..rawptr* %0
	store %imgui-8.Vec2 zeroinitializer, %imgui-8.Vec2* %1
		store %imgui-8.Vec2 %size, %imgui-8.Vec2* %1
	store %imgui-8.Vec2 zeroinitializer, %imgui-8.Vec2* %2
		store %imgui-8.Vec2 %uv0, %imgui-8.Vec2* %2
	store %imgui-8.Vec2 zeroinitializer, %imgui-8.Vec2* %3
		store %imgui-8.Vec2 %uv1, %imgui-8.Vec2* %3
	store %imgui-8.Vec4 zeroinitializer, %imgui-8.Vec4* %4
		store %imgui-8.Vec4 %tint_col, %imgui-8.Vec4* %4
	store %imgui-8.Vec4 zeroinitializer, %imgui-8.Vec4* %5
		store %imgui-8.Vec4 %border_col, %imgui-8.Vec4* %5
	; SelectorExpr
	%28 = load %..rawptr, %..rawptr* %0, align 8
	%29 = load %imgui-8.Vec2, %imgui-8.Vec2* %1, align 4
	%30 = load %imgui-8.Vec2, %imgui-8.Vec2* %2, align 4
	%31 = load %imgui-8.Vec2, %imgui-8.Vec2* %3, align 4
	%32 = load %imgui-8.Vec4, %imgui-8.Vec4* %4, align 4
	%33 = load %imgui-8.Vec4, %imgui-8.Vec4* %5, align 4
	store %..any zeroinitializer, %..any* %6
	%34 = bitcast %..rawptr* %0 to %..rawptr
	%35 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%36 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %7
	%39 = bitcast %imgui-8.Vec2* %1 to %..rawptr
	%40 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%41 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%42 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %40, %Type_Info** %41
	store %..rawptr %39, %..rawptr* %42
	%43 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%44 = bitcast %imgui-8.Vec2* %2 to %..rawptr
	%45 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%46 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%47 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %45, %Type_Info** %46
	store %..rawptr %44, %..rawptr* %47
	%48 = load %..any, %..any* %8, align 8
	store %..any zeroinitializer, %..any* %9
	%49 = bitcast %imgui-8.Vec2* %3 to %..rawptr
	%50 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	%51 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 0
	%52 = getelementptr inbounds %..any, %..any* %9, i64 0, i32 1
	store %Type_Info* %50, %Type_Info** %51
	store %..rawptr %49, %..rawptr* %52
	%53 = load %..any, %..any* %9, align 8
	store %..any zeroinitializer, %..any* %10
	%54 = bitcast %imgui-8.Vec4* %4 to %..rawptr
	%55 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%56 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%57 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %55, %Type_Info** %56
	store %..rawptr %54, %..rawptr* %57
	%58 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%59 = bitcast %imgui-8.Vec4* %5 to %..rawptr
	%60 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%61 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%62 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %60, %Type_Info** %61
	store %..rawptr %59, %..rawptr* %62
	%63 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [6 x %..any] zeroinitializer, [6 x %..any]* %13
	%64 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	store %..any %38, %..any* %64
	%65 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 1
	store %..any %43, %..any* %65
	%66 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 2
	store %..any %48, %..any* %66
	%67 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 3
	store %..any %53, %..any* %67
	%68 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 4
	store %..any %58, %..any* %68
	%69 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 5
	store %..any %63, %..any* %69
	%70 = getelementptr inbounds [6 x %..any], [6 x %..any]* %13, i64 0, i32 0
	%71 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %70, %..any** %71
	%72 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 6, i64* %72
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 6, i64* %73
	%74 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	%75 = call i64 @.fmt-4.println({%..any*, i64, i64} %74)
	; SelectorExpr
	%76 = load %..rawptr, %..rawptr* %0, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %14
	%77 = load %imgui-8.Vec2, %imgui-8.Vec2* %1, align 4
	%78 = bitcast %imgui-8.Vec2* %1 to i64*
	%79 = load i64, i64* %78, align 8
	store i64 %79, i64* %14
	%80 = load i64, i64* %14, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %15
	%81 = load %imgui-8.Vec2, %imgui-8.Vec2* %2, align 4
	%82 = bitcast %imgui-8.Vec2* %2 to i64*
	%83 = load i64, i64* %82, align 8
	store i64 %83, i64* %15
	%84 = load i64, i64* %15, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %16
	%85 = load %imgui-8.Vec2, %imgui-8.Vec2* %3, align 4
	%86 = bitcast %imgui-8.Vec2* %3 to i64*
	%87 = load i64, i64* %86, align 8
	store i64 %87, i64* %16
	%88 = load i64, i64* %16, align 8
	%89 = load %imgui-8.Vec4, %imgui-8.Vec4* %4, align 4
	%90 = load %imgui-8.Vec4, %imgui-8.Vec4* %5, align 4
	store %..any zeroinitializer, %..any* %17
	%91 = bitcast %..rawptr* %0 to %..rawptr
	%92 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	%93 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%94 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %92, %Type_Info** %93
	store %..rawptr %91, %..rawptr* %94
	%95 = load %..any, %..any* %17, align 8
	store %..any zeroinitializer, %..any* %18
	%96 = bitcast i64* %14 to %..rawptr
	%97 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%98 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	%99 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %97, %Type_Info** %98
	store %..rawptr %96, %..rawptr* %99
	%100 = load %..any, %..any* %18, align 8
	store %..any zeroinitializer, %..any* %19
	%101 = bitcast i64* %15 to %..rawptr
	%102 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%103 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 0
	%104 = getelementptr inbounds %..any, %..any* %19, i64 0, i32 1
	store %Type_Info* %102, %Type_Info** %103
	store %..rawptr %101, %..rawptr* %104
	%105 = load %..any, %..any* %19, align 8
	store %..any zeroinitializer, %..any* %20
	%106 = bitcast i64* %16 to %..rawptr
	%107 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	%108 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%109 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %107, %Type_Info** %108
	store %..rawptr %106, %..rawptr* %109
	%110 = load %..any, %..any* %20, align 8
	store %..any zeroinitializer, %..any* %21
	%111 = bitcast %imgui-8.Vec4* %4 to %..rawptr
	%112 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%113 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 0
	%114 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 1
	store %Type_Info* %112, %Type_Info** %113
	store %..rawptr %111, %..rawptr* %114
	%115 = load %..any, %..any* %21, align 8
	store %..any zeroinitializer, %..any* %22
	%116 = bitcast %imgui-8.Vec4* %5 to %..rawptr
	%117 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	%118 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 0
	%119 = getelementptr inbounds %..any, %..any* %22, i64 0, i32 1
	store %Type_Info* %117, %Type_Info** %118
	store %..rawptr %116, %..rawptr* %119
	%120 = load %..any, %..any* %22, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %23
	store [6 x %..any] zeroinitializer, [6 x %..any]* %24
	%121 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 0
	store %..any %95, %..any* %121
	%122 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 1
	store %..any %100, %..any* %122
	%123 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 2
	store %..any %105, %..any* %123
	%124 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 3
	store %..any %110, %..any* %124
	%125 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 4
	store %..any %115, %..any* %125
	%126 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 5
	store %..any %120, %..any* %126
	%127 = getelementptr inbounds [6 x %..any], [6 x %..any]* %24, i64 0, i32 0
	%128 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 0
	store %..any* %127, %..any** %128
	%129 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 1
	store i64 6, i64* %129
	%130 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 2
	store i64 6, i64* %130
	%131 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %23, align 8
	%132 = call i64 @.fmt-4.println({%..any*, i64, i64} %131)
	%133 = load %..rawptr, %..rawptr* %0, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %25
	%134 = load %imgui-8.Vec2, %imgui-8.Vec2* %1, align 4
	%135 = bitcast %imgui-8.Vec2* %1 to i64*
	%136 = load i64, i64* %135, align 8
	store i64 %136, i64* %25
	%137 = load i64, i64* %25, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %26
	%138 = load %imgui-8.Vec2, %imgui-8.Vec2* %2, align 4
	%139 = bitcast %imgui-8.Vec2* %2 to i64*
	%140 = load i64, i64* %139, align 8
	store i64 %140, i64* %26
	%141 = load i64, i64* %26, align 8
	; Cast - transmute
	store i64 zeroinitializer, i64* %27
	%142 = load %imgui-8.Vec2, %imgui-8.Vec2* %3, align 4
	%143 = bitcast %imgui-8.Vec2* %3 to i64*
	%144 = load i64, i64* %143, align 8
	store i64 %144, i64* %27
	%145 = load i64, i64* %27, align 8
	%146 = load %imgui-8.Vec4, %imgui-8.Vec4* %4, align 4
	%147 = load %imgui-8.Vec4, %imgui-8.Vec4* %5, align 4
	call ccc void @igImage(%..rawptr %133, i64 %137, i64 %141, i64 %145, %imgui-8.Vec4 %146, %imgui-8.Vec4 %147)
	ret void
}

define i1 @.imgui-8.CollapsingHeader(%..string %label, i32 %flags) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i32, align 8
	%2 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i32 zeroinitializer, i32* %1
		store i32 %flags, i32* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @.strings-9.new_c_string(%..string %3)
	store i8* %4, i8** %2
	; DeferStmt
	; ReturnStmt
	%5 = load i8*, i8** %2, align 8
	%6 = load i32, i32* %1, align 8
	%7 = call ccc i1 @igCollapsingHeader(i8* %5, i32 %6)
	; defer
	; free
	%8 = load i8*, i8** %2, align 8
	%9 = bitcast i8* %8 to %..rawptr
	call void @.free_ptr(%..rawptr %9)
	ret i1 %7
}

define i1 @.imgui-8.BeginMenu(%..string %label, i1 %enabled) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca i1, align 1
	%2 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store i1 zeroinitializer, i1* %1
		store i1 %enabled, i1* %1
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @.strings-9.new_c_string(%..string %3)
	store i8* %4, i8** %2
	; DeferStmt
	; ReturnStmt
	%5 = load i8*, i8** %2, align 8
	%6 = load i1, i1* %1, align 1
	%7 = call ccc i1 @igBeginMenu(i8* %5, i1 %6)
	; defer
	; free
	%8 = load i8*, i8** %2, align 8
	%9 = bitcast i8* %8 to %..rawptr
	call void @.free_ptr(%..rawptr %9)
	ret i1 %7
}

define i1 @.imgui-8.MenuItem(%..string %label, %..string %shortcut, i1 %selected, i1 %enabled) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i1, align 1
	%3 = alloca i1, align 1
	%4 = alloca i8*, align 8
	%5 = alloca i8*, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %label, %..string* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %shortcut, %..string* %1
	store i1 zeroinitializer, i1* %2
		store i1 %selected, i1* %2
	store i1 zeroinitializer, i1* %3
		store i1 %enabled, i1* %3
	; str
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %4
	; DeferStmt
	; shrt
	store i8* zeroinitializer, i8** %5
		; SelectorExpr
	%8 = load %..string, %..string* %1, align 8
	%9 = call i8* @.strings-9.new_c_string(%..string %8)
	store i8* %9, i8** %5
	; DeferStmt
	; ReturnStmt
	%10 = load i8*, i8** %4, align 8
	%11 = load i8*, i8** %5, align 8
	%12 = load i1, i1* %2, align 1
	%13 = load i1, i1* %3, align 1
	%14 = call ccc i1 @igMenuItem(i8* %10, i8* %11, i1 %12, i1 %13)
	; defer
	; free
	%15 = load i8*, i8** %5, align 8
	%16 = bitcast i8* %15 to %..rawptr
	call void @.free_ptr(%..rawptr %16)
	; defer
	; free
	%17 = load i8*, i8** %4, align 8
	%18 = bitcast i8* %17 to %..rawptr
	call void @.free_ptr(%..rawptr %18)
	ret i1 %14
}

define i8* @.strings-9.new_c_string(%..string %s) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca i8*, align 8
	%4 = alloca {i8*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %s, %..string* %0
	; c
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		; make
	%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 1
	%7 = add i64 %6, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$121, i64 0, i32 0), i64 41}, i64 2, i64 20, i64 0, i64 %7, i64 %7)
	%8 = mul i64 1, %7
	%9 = call %..rawptr @.alloc_align(i64 %8, i64 1)
	%10 = bitcast %..rawptr %9 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%11 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %10, i8** %11
	%12 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %7, i64* %12
	%13 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %7, i64* %13
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	store {i8*, i64, i64} %14, {i8*, i64, i64}* %1
	; copy
	%15 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%16 = load %..string, %..string* %0, align 8
	; cast - cast
	%17 = extractvalue %..string %16, 0
	store i8* zeroinitializer, i8** %3
	store i8* %17, i8** %3
	%18 = extractvalue %..string %16, 1
	%19 = sub i64 %18, 0
	%20 = sub i64 %18, 0
	%21 = load i8*, i8** %3, align 8
	%22 = getelementptr inbounds i8, i8* %21, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %4
	%23 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 0
	store i8* %22, i8** %23
	%24 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 1
	store i64 %19, i64* %24
	%25 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %4, i64 0, i32 2
	store i64 %20, i64* %25
	%26 = load {i8*, i64, i64}, {i8*, i64, i64}* %4, align 8
	%27 = extractvalue {i8*, i64, i64} %15, 0
	%28 = bitcast i8* %27 to %..rawptr
	%29 = extractvalue {i8*, i64, i64} %26, 0
	%30 = bitcast i8* %29 to %..rawptr
	%31 = extractvalue {i8*, i64, i64} %15, 1
	%32 = extractvalue {i8*, i64, i64} %26, 1
	%33 = icmp slt i64 %31, %32
	%34 = select i1 %33, i64 %31, i64 %32
	%35 = mul i64 %34, 1
	%36 = call %..rawptr @.__mem_copy(%..rawptr %28, %..rawptr %30, i64 %35)
	; AssignStmt
	; IndexExpr
	%37 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%38 = extractvalue {i8*, i64, i64} %37, 0
	%39 = extractvalue {i8*, i64, i64} %37, 1
	%40 = load %..string, %..string* %0, align 8
	%41 = extractvalue %..string %40, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$122, i64 0, i32 0), i64 41}, i64 4, i64 4, i64 %41, i64 %39)
	%42 = getelementptr inbounds i8, i8* %38, i64 %41
	store i8 0, i8* %42
	; ReturnStmt
	; IndexExpr
	%43 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%44 = extractvalue {i8*, i64, i64} %43, 0
	%45 = extractvalue {i8*, i64, i64} %43, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$123, i64 0, i32 0), i64 41}, i64 5, i64 12, i64 0, i64 %45)
	%46 = getelementptr inbounds i8, i8* %44, i64 0
	%47 = getelementptr inbounds i8, i8* %46, i64 0
	ret i8* %47
}

define %..string @.strings-9.to_odin_string(i8* %c) {
decls-0:
	%0 = alloca i8*, align 8
	%1 = alloca i64, align 8
	%2 = alloca {i8*, i64, i64}, align 8
	%3 = alloca %..string, align 8
	store i8* zeroinitializer, i8** %0
		store i8* %c, i8** %0
	; len
	store i64 zeroinitializer, i64* %1
		store i64 0, i64* %1
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%4 = load i8*, i8** %0, align 8
	%5 = load i64, i64* %1, align 8
	%6 = getelementptr inbounds i8, i8* %4, i64 %5
	%7 = getelementptr inbounds i8, i8* %6, i64 0
	%8 = load i8, i8* %7, align 1
	%9 = icmp ne i8 %8, 0
	br i1 %9, label %for.body-2, label %for.done-3

for.body-2:
	%10 = load i64, i64* %1, align 8
	%11 = add i64 %10, 1
	store i64 %11, i64* %1
	br label %for.loop-1

for.done-3:
	; ReturnStmt
	; slice_ptr
	%12 = load i8*, i8** %0, align 8
	%13 = load i64, i64* %1, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %2
	%14 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 0
	store i8* %12, i8** %14
	%15 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 1
	store i64 %13, i64* %15
	%16 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %2, i64 0, i32 2
	store i64 %13, i64* %16
	%17 = load {i8*, i64, i64}, {i8*, i64, i64}* %2, align 8
	; cast - cast
	%18 = extractvalue {i8*, i64, i64} %17, 0
	%19 = extractvalue {i8*, i64, i64} %17, 1
	store %..string zeroinitializer, %..string* %3
	%20 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 0
	%21 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 1
	store i8* %18, i8** %20
	store i64 %19, i64* %21
	%22 = load %..string, %..string* %3, align 8
	ret %..string %22
}

define i16 @.jaze_win32-11.HIWORD-1976290660928(i64 %wParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %wParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i32
	%3 = lshr i32 %2, 16
	%4 = and i32 %3, 65535
	; cast - cast
	%5 = trunc i32 %4 to i16
	ret i16 %5
}

define i16 @.jaze_win32-11.HIWORD-1976290661296(i64 %lParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %lParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i32
	%3 = lshr i32 %2, 16
	%4 = and i32 %3, 65535
	; cast - cast
	%5 = trunc i32 %4 to i16
	ret i16 %5
}

define i16 @.jaze_win32-11.LOWORD-1976290662032(i64 %lParam) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %lParam, i64* %0
	; ReturnStmt
	%1 = load i64, i64* %0, align 8
	; cast - cast
	%2 = trunc i64 %1 to i16
	ret i16 %2
}

define {%jaze_gl-12.Shader, i1} @.jaze_gl-12.UtilCreateAndCompileShader(i32 %type, %..string %source) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %jaze_gl-12.Shader, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {i8*, i64, i64}, align 8
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca %..string, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [1 x %..any], align 8
	%11 = alloca %..any, align 8
	%12 = alloca %..string, align 8
	%13 = alloca {%..any*, i64, i64}, align 8
	%14 = alloca [1 x %..any], align 8
	%15 = alloca %..string, align 8
	%16 = alloca %..any, align 8
	%17 = alloca {%..any*, i64, i64}, align 8
	%18 = alloca [1 x %..any], align 8
	%19 = alloca {%jaze_gl-12.Shader, i1}, align 8
	%20 = alloca {%jaze_gl-12.Shader, i1}, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %type, i32* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %source, %..string* %1
	; shader
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %2
		; AssignStmt
	%21 = load i32, i32* %0, align 8
	%22 = call %jaze_gl-12.Shader @.jaze_gl-12.CreateShader(i32 %21)
	store %jaze_gl-12.Shader %22, %jaze_gl-12.Shader* %2
	%23 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	%24 = load %..string, %..string* %1, align 8
	call void @.jaze_gl-12.ShaderSource-1976290696176(%jaze_gl-12.Shader %23, %..string %24)
	%25 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	call void @.jaze_gl-12.CompileShader(%jaze_gl-12.Shader %25)
	; success
	store i32 zeroinitializer, i32* %3
		%26 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	%27 = call i32 @.jaze_gl-12.GetShaderValue(%jaze_gl-12.Shader %26, i32 35713)
	store i32 %27, i32* %3
	; IfStmt
	%28 = load i32, i32* %3, align 4
	%29 = icmp eq i32 %28, 0
	br i1 %29, label %if.then-1, label %if.done-2

if.then-1:
	; logSize
	store i32 zeroinitializer, i32* %4
		%30 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	%31 = call i32 @.jaze_gl-12.GetShaderValue(%jaze_gl-12.Shader %30, i32 35716)
	store i32 %31, i32* %4
	; logBytes
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %5
		; make
	%32 = load i32, i32* %4, align 4
	%33 = sext i32 %32 to i64
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$124, i64 0, i32 0), i64 45}, i64 135, i64 34, i64 0, i64 %33, i64 %33)
	%34 = mul i64 1, %33
	%35 = call %..rawptr @.alloc_align(i64 %34, i64 1)
	%36 = bitcast %..rawptr %35 to i8*
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	%37 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %36, i8** %37
	%38 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 %33, i64* %38
	%39 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 %33, i64* %39
	%40 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	store {i8*, i64, i64} %40, {i8*, i64, i64}* %5
	%41 = load void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)** @.jaze_gl-12._GetShaderInfoLog, align 8
	; SelectorExpr
	%42 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, i64 0, i32 1
	%43 = load i32, i32* %42, align 4
	%44 = load i32, i32* %4, align 4
	%45 = getelementptr inbounds i32, i32* %4, i64 0
	; IndexExpr
	%46 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%47 = extractvalue {i8*, i64, i64} %46, 0
	%48 = extractvalue {i8*, i64, i64} %46, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$125, i64 0, i32 0), i64 45}, i64 136, i64 67, i64 0, i64 %48)
	%49 = getelementptr inbounds i8, i8* %47, i64 0
	%50 = getelementptr inbounds i8, i8* %49, i64 0
	call ccc void %41(i32 %43, i32 %44, i32* %45, i8* %50)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %7
	store %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$126, i64 0, i32 0), i64 26}, %..string* %7
	%51 = load %..string, %..string* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%52 = bitcast %..string* %7 to %..rawptr
	%53 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%54 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%55 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %53, %Type_Info** %54
	store %..rawptr %52, %..rawptr* %55
	%56 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [1 x %..any] zeroinitializer, [1 x %..any]* %10
	%57 = getelementptr inbounds [1 x %..any], [1 x %..any]* %10, i64 0, i32 0
	store %..any %56, %..any* %57
	%58 = getelementptr inbounds [1 x %..any], [1 x %..any]* %10, i64 0, i32 0
	%59 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %58, %..any** %59
	%60 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 1, i64* %60
	%61 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 1, i64* %61
	%62 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	%63 = call i64 @.fmt-4.println({%..any*, i64, i64} %62)
	; SelectorExpr
	; SelectorExpr
	; IndexExpr
	%64 = load {i8*, i64, i64}, {i8*, i64, i64}* %5, align 8
	%65 = extractvalue {i8*, i64, i64} %64, 0
	%66 = extractvalue {i8*, i64, i64} %64, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$127, i64 0, i32 0), i64 45}, i64 139, i64 52, i64 0, i64 %66)
	%67 = getelementptr inbounds i8, i8* %65, i64 0
	%68 = getelementptr inbounds i8, i8* %67, i64 0
	%69 = call %..string @.strings-9.to_odin_string(i8* %68)
	store %..any zeroinitializer, %..any* %11
	store %..string zeroinitializer, %..string* %12
	store %..string %69, %..string* %12
	%70 = bitcast %..string* %12 to %..rawptr
	%71 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%72 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%73 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %71, %Type_Info** %72
	store %..rawptr %70, %..rawptr* %73
	%74 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %13
	store [1 x %..any] zeroinitializer, [1 x %..any]* %14
	%75 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	store %..any %74, %..any* %75
	%76 = getelementptr inbounds [1 x %..any], [1 x %..any]* %14, i64 0, i32 0
	%77 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 0
	store %..any* %76, %..any** %77
	%78 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 1
	store i64 1, i64* %78
	%79 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %13, i64 0, i32 2
	store i64 1, i64* %79
	%80 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %13, align 8
	%81 = call i64 @.fmt-4.print({%..any*, i64, i64} %80)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %15
	store %..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.__str$128, i64 0, i32 0), i64 26}, %..string* %15
	%82 = load %..string, %..string* %15, align 8
	store %..any zeroinitializer, %..any* %16
	%83 = bitcast %..string* %15 to %..rawptr
	%84 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%85 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 0
	%86 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 1
	store %Type_Info* %84, %Type_Info** %85
	store %..rawptr %83, %..rawptr* %86
	%87 = load %..any, %..any* %16, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %17
	store [1 x %..any] zeroinitializer, [1 x %..any]* %18
	%88 = getelementptr inbounds [1 x %..any], [1 x %..any]* %18, i64 0, i32 0
	store %..any %87, %..any* %88
	%89 = getelementptr inbounds [1 x %..any], [1 x %..any]* %18, i64 0, i32 0
	%90 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %17, i64 0, i32 0
	store %..any* %89, %..any** %90
	%91 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %17, i64 0, i32 1
	store i64 1, i64* %91
	%92 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %17, i64 0, i32 2
	store i64 1, i64* %92
	%93 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %17, align 8
	%94 = call i64 @.fmt-4.println({%..any*, i64, i64} %93)
	; AssignStmt
	; SelectorExpr
	%95 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, i64 0, i32 2
	store i1 false, i1* %95
	; ReturnStmt
	%96 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	store {%jaze_gl-12.Shader, i1} zeroinitializer, {%jaze_gl-12.Shader, i1}* %19
	%97 = getelementptr inbounds {%jaze_gl-12.Shader, i1}, {%jaze_gl-12.Shader, i1}* %19, i64 0, i32 0
	store %jaze_gl-12.Shader %96, %jaze_gl-12.Shader* %97
	%98 = getelementptr inbounds {%jaze_gl-12.Shader, i1}, {%jaze_gl-12.Shader, i1}* %19, i64 0, i32 1
	store i1 false, i1* %98
	%99 = load {%jaze_gl-12.Shader, i1}, {%jaze_gl-12.Shader, i1}* %19, align 8
	ret {%jaze_gl-12.Shader, i1} %99

if.done-2:
	; AssignStmt
	; SelectorExpr
	%100 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, i64 0, i32 2
	store i1 true, i1* %100
	; ReturnStmt
	%101 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	store {%jaze_gl-12.Shader, i1} zeroinitializer, {%jaze_gl-12.Shader, i1}* %20
	%102 = getelementptr inbounds {%jaze_gl-12.Shader, i1}, {%jaze_gl-12.Shader, i1}* %20, i64 0, i32 0
	store %jaze_gl-12.Shader %101, %jaze_gl-12.Shader* %102
	%103 = getelementptr inbounds {%jaze_gl-12.Shader, i1}, {%jaze_gl-12.Shader, i1}* %20, i64 0, i32 1
	store i1 true, i1* %103
	%104 = load {%jaze_gl-12.Shader, i1}, {%jaze_gl-12.Shader, i1}* %20, align 8
	ret {%jaze_gl-12.Shader, i1} %104
}

define void @.jaze_gl-12.DebugMessageControl(i32 %source, i32 %type, i32 %severity, i32 %count, i32* %ids, i1 %enabled) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32*, align 8
	%5 = alloca i1, align 1
	store i32 zeroinitializer, i32* %0
		store i32 %source, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %type, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %severity, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %count, i32* %3
	store i32* zeroinitializer, i32** %4
		store i32* %ids, i32** %4
	store i1 zeroinitializer, i1* %5
		store i1 %enabled, i1* %5
	; IfStmt
	%6 = load void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @.jaze_gl-12._DebugMessageControl, align 8
	%7 = icmp ne void (i32, i32, i32, i32, i32*, i1)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.else-2

if.then-1:
	%8 = load void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @.jaze_gl-12._DebugMessageControl, align 8
	%9 = load i32, i32* %0, align 8
	; cast - cast
	%10 = load i32, i32* %1, align 8
	; cast - cast
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i32, i32* %3, align 4
	%13 = load i32*, i32** %4, align 8
	%14 = load i1, i1* %5, align 1
	call ccc void %8(i32 %9, i32 %10, i32 %11, i32 %12, i32* %13, i1 %14)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.DebugMessageCallback(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %callback, %..rawptr %userParam) {
decls-0:
	%0 = alloca void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, align 8
	%1 = alloca %..rawptr, align 8
	store void (i32, i32, i32, i32, i32, i8*, %..rawptr)* zeroinitializer, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0
		store void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %callback, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %userParam, %..rawptr* %1
	; IfStmt
	%2 = load void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @.jaze_gl-12._DebugMessageCallback, align 8
	%3 = icmp ne void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @.jaze_gl-12._DebugMessageCallback, align 8
	%5 = load void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, void (i32, i32, i32, i32, i32, i8*, %..rawptr)** %0, align 8
	%6 = load %..rawptr, %..rawptr* %1, align 8
	call ccc void %4(void (i32, i32, i32, i32, i32, i8*, %..rawptr)* %5, %..rawptr %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.Clear(i32 %mask) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mask, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glClear(i32 %1)
	ret void
}

define void @.jaze_gl-12.BufferData(i32 %target, i32 %size, %..rawptr %data, i32 %usage) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca %..rawptr, align 8
	%3 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %size, i32* %1
	store %..rawptr zeroinitializer, %..rawptr* %2
		store %..rawptr %data, %..rawptr* %2
	store i32 zeroinitializer, i32* %3
		store i32 %usage, i32* %3
	; IfStmt
	%4 = load void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @.jaze_gl-12._BufferData, align 8
	%5 = icmp ne void (i32, i32, %..rawptr, i32)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	%6 = load void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @.jaze_gl-12._BufferData, align 8
	%7 = load i32, i32* %0, align 8
	; cast - cast
	%8 = load i32, i32* %1, align 4
	%9 = load %..rawptr, %..rawptr* %2, align 8
	%10 = load i32, i32* %3, align 8
	; cast - cast
	call ccc void %6(i32 %7, i32 %8, %..rawptr %9, i32 %10)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-12.GenBuffer() {
decls-0:
	%0 = alloca i32, align 4
	; IfStmt
	%1 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-12._GenBuffers, align 8
	%2 = icmp ne void (i32, i32*)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %0
		%3 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-12._GenBuffers, align 8
	%4 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%5 = bitcast i32* %4 to i32*
	call ccc void %3(i32 1, i32* %5)
	; ReturnStmt
	%6 = load i32, i32* %0, align 4
	ret i32 %6

if.else-2:
	; ReturnStmt
	ret i32 0

if.done-3:
	unreachable
}

define void @.jaze_gl-12.BindBuffer-1976290681824(i32 %target, i32 %buffer) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %buffer, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._BindBuffer, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._BindBuffer, align 8
	%5 = load i32, i32* %0, align 8
	; cast - cast
	%6 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.BindBuffer-1976290682192(i32 %vbo) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %vbo, i32* %0
	%1 = load i32, i32* %0, align 4
	; cast - cast
	call void @.jaze_gl-12.BindBuffer-1976290681824(i32 34962, i32 %1)
	ret void
}

define void @.jaze_gl-12.BindBuffer-1976290682560(i32 %ebo) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %ebo, i32* %0
	%1 = load i32, i32* %0, align 4
	; cast - cast
	call void @.jaze_gl-12.BindBuffer-1976290681824(i32 34963, i32 %1)
	ret void
}

define i32 @.jaze_gl-12.GenVertexArray() {
decls-0:
	%0 = alloca i32, align 4
	; IfStmt
	%1 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-12._GenVertexArrays, align 8
	%2 = icmp ne void (i32, i32*)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %0
		%3 = load void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-12._GenVertexArrays, align 8
	%4 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%5 = bitcast i32* %4 to i32*
	call ccc void %3(i32 1, i32* %5)
	; ReturnStmt
	%6 = load i32, i32* %0, align 4
	ret i32 %6

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret i32 0
}

define void @.jaze_gl-12.EnableVertexAttribArray(i32 %index) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %index, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._EnableVertexAttribArray, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._EnableVertexAttribArray, align 8
	%4 = load i32, i32* %0, align 4
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.VertexAttribPointer(i32 %index, i32 %size, i32 %type, i1 %normalized, i32 %stride, %..rawptr %pointer) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca i1, align 1
	%4 = alloca i32, align 4
	%5 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %index, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %size, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %type, i32* %2
	store i1 zeroinitializer, i1* %3
		store i1 %normalized, i1* %3
	store i32 zeroinitializer, i32* %4
		store i32 %stride, i32* %4
	store %..rawptr zeroinitializer, %..rawptr* %5
		store %..rawptr %pointer, %..rawptr* %5
	; IfStmt
	%6 = load void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @.jaze_gl-12._VertexAttribPointer, align 8
	%7 = icmp ne void (i32, i32, i32, i1, i32, %..rawptr)* %6, zeroinitializer
	br i1 %7, label %if.then-1, label %if.else-2

if.then-1:
	%8 = load void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @.jaze_gl-12._VertexAttribPointer, align 8
	%9 = load i32, i32* %0, align 4
	%10 = load i32, i32* %1, align 4
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i1, i1* %3, align 1
	%13 = load i32, i32* %4, align 4
	%14 = load %..rawptr, %..rawptr* %5, align 8
	call ccc void %8(i32 %9, i32 %10, i32 %11, i1 %12, i32 %13, %..rawptr %14)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.BindVertexArray(i32 %buffer) {
decls-0:
	%0 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %buffer, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._BindVertexArray, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._BindVertexArray, align 8
	%4 = load i32, i32* %0, align 4
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.Uniform-1976290684768(i32 %loc, i32 %v0) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %loc, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %v0, i32* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._Uniform1i, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._Uniform1i, align 8
	%5 = load i32, i32* %0, align 4
	%6 = load i32, i32* %1, align 4
	call ccc void %4(i32 %5, i32 %6)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-12.GetUniformLocation(%jaze_gl-12.Program %program, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-12.Program, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca i32, align 4
	store %jaze_gl-12.Program zeroinitializer, %jaze_gl-12.Program* %0
		store %jaze_gl-12.Program %program, %jaze_gl-12.Program* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; IfStmt
	%4 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-12._GetUniformLocation, align 8
	%5 = icmp ne i32 (i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %2
	; DeferStmt
	; res
	store i32 zeroinitializer, i32* %3
		%8 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-12._GetUniformLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %0, i64 0, i32 4
	%10 = load i32, i32* %9, align 4
	; cast - cast
	%11 = load i8*, i8** %2, align 8
	%12 = call ccc i32 %8(i32 %10, i8* %11)
	store i32 %12, i32* %3
	; ReturnStmt
	%13 = load i32, i32* %3, align 4
	; defer
	; free
	%14 = load i8*, i8** %2, align 8
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	ret i32 %13

if.else-2:
	; ReturnStmt
	unreachable
}

define i32 @.jaze_gl-12.GetAttribLocation(%jaze_gl-12.Program %program, %..string %name) {
decls-0:
	%0 = alloca %jaze_gl-12.Program, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca i32, align 4
	store %jaze_gl-12.Program zeroinitializer, %jaze_gl-12.Program* %0
		store %jaze_gl-12.Program %program, %jaze_gl-12.Program* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; IfStmt
	%4 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-12._GetAttribLocation, align 8
	%5 = icmp ne i32 (i32, i8*)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	; str
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%6 = load %..string, %..string* %1, align 8
	%7 = call i8* @.strings-9.new_c_string(%..string %6)
	store i8* %7, i8** %2
	; DeferStmt
	; res
	store i32 zeroinitializer, i32* %3
		%8 = load i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-12._GetAttribLocation, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %0, i64 0, i32 4
	%10 = load i32, i32* %9, align 4
	; cast - cast
	%11 = load i8*, i8** %2, align 8
	%12 = call ccc i32 %8(i32 %10, i8* %11)
	store i32 %12, i32* %3
	; ReturnStmt
	%13 = load i32, i32* %3, align 4
	; defer
	; free
	%14 = load i8*, i8** %2, align 8
	%15 = bitcast i8* %14 to %..rawptr
	call void @.free_ptr(%..rawptr %15)
	ret i32 %13

if.else-2:
	; ReturnStmt
	unreachable
}

define void @.jaze_gl-12.DrawElements(i32 %mode, i32 %count, i32 %type, %..rawptr %indices) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mode, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %count, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %type, i32* %2
	store %..rawptr zeroinitializer, %..rawptr* %3
		store %..rawptr %indices, %..rawptr* %3
	; IfStmt
	%4 = load void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @.jaze_gl-12._DrawElements, align 8
	%5 = icmp ne void (i32, i32, i32, %..rawptr)* %4, zeroinitializer
	br i1 %5, label %if.then-1, label %if.else-2

if.then-1:
	%6 = load void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @.jaze_gl-12._DrawElements, align 8
	%7 = load i32, i32* %0, align 8
	; cast - cast
	%8 = load i32, i32* %1, align 4
	%9 = load i32, i32* %2, align 8
	; cast - cast
	%10 = load %..rawptr, %..rawptr* %3, align 8
	call ccc void %6(i32 %7, i32 %8, i32 %9, %..rawptr %10)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.UseProgram(%jaze_gl-12.Program %program) {
decls-0:
	%0 = alloca %jaze_gl-12.Program, align 8
	store %jaze_gl-12.Program zeroinitializer, %jaze_gl-12.Program* %0
		store %jaze_gl-12.Program %program, %jaze_gl-12.Program* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._UseProgram, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._UseProgram, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %0, i64 0, i32 4
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.LinkProgram(%jaze_gl-12.Program %program) {
decls-0:
	%0 = alloca %jaze_gl-12.Program, align 8
	store %jaze_gl-12.Program zeroinitializer, %jaze_gl-12.Program* %0
		store %jaze_gl-12.Program %program, %jaze_gl-12.Program* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._LinkProgram, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._LinkProgram, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %0, i64 0, i32 4
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.TexImage2D(i32 %target, i32 %lod, i32 %internalFormat, i32 %width, i32 %height, i32 %format, i32 %type_, %..rawptr %data) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 8
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca i32, align 8
	%6 = alloca i32, align 8
	%7 = alloca %..rawptr, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %lod, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %internalFormat, i32* %2
	store i32 zeroinitializer, i32* %3
		store i32 %width, i32* %3
	store i32 zeroinitializer, i32* %4
		store i32 %height, i32* %4
	store i32 zeroinitializer, i32* %5
		store i32 %format, i32* %5
	store i32 zeroinitializer, i32* %6
		store i32 %type_, i32* %6
	store %..rawptr zeroinitializer, %..rawptr* %7
		store %..rawptr %data, %..rawptr* %7
	%8 = load i32, i32* %0, align 8
	; cast - cast
	%9 = bitcast i32 %8 to i32
	%10 = load i32, i32* %1, align 4
	%11 = load i32, i32* %2, align 8
	; cast - cast
	%12 = load i32, i32* %3, align 4
	%13 = load i32, i32* %4, align 4
	%14 = load i32, i32* %5, align 8
	; cast - cast
	%15 = load i32, i32* %6, align 8
	; cast - cast
	%16 = load %..rawptr, %..rawptr* %7, align 8
	call ccc void @glTexImage2D(i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 0, i32 %14, i32 %15, %..rawptr %16)
	ret void
}

define void @.jaze_gl-12.TexParameteri(i32 %target, i32 %pname, i32 %param) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %pname, i32* %1
	store i32 zeroinitializer, i32* %2
		store i32 %param, i32* %2
	%3 = load i32, i32* %0, align 8
	; cast - cast
	%4 = bitcast i32 %3 to i32
	%5 = load i32, i32* %1, align 8
	; cast - cast
	%6 = load i32, i32* %2, align 8
	; cast - cast
	call ccc void @glTexParameteri(i32 %4, i32 %5, i32 %6)
	ret void
}

define void @.jaze_gl-12.BindTexture(i32 %target, i32 %texture) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %target, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %texture, i32* %1
	%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = bitcast i32 %2 to i32
	%4 = load i32, i32* %1, align 4
	; cast - cast
	call ccc void @glBindTexture(i32 %3, i32 %4)
	ret void
}

define void @.jaze_gl-12.ActiveTexture(i32 %texture) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %texture, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._ActiveTexture, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._ActiveTexture, align 8
	%4 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define i32 @.jaze_gl-12.GenTexture() {
decls-0:
	%0 = alloca i32, align 4
	; res
	store i32 zeroinitializer, i32* %0
		%1 = getelementptr inbounds i32, i32* %0, i64 0
	; cast - cast
	%2 = bitcast i32* %1 to i32*
	call ccc void @glGenTextures(i32 1, i32* %2)
	; ReturnStmt
	%3 = load i32, i32* %0, align 4
	ret i32 %3
}

define void @.jaze_gl-12.BlendEquation(i32 %mode) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %mode, i32* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._BlendEquation, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._BlendEquation, align 8
	%4 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void %3(i32 %4)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.BlendFunc(i32 %sfactor, i32 %dfactor) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %sfactor, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %dfactor, i32* %1
	%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = load i32, i32* %1, align 8
	; cast - cast
	call ccc void @glBlendFunc(i32 %2, i32 %3)
	ret void
}

define i32 @.jaze_gl-12.GetShaderValue(%jaze_gl-12.Shader %shader, i32 %name) {
decls-0:
	%0 = alloca %jaze_gl-12.Shader, align 8
	%1 = alloca i32, align 8
	%2 = alloca i32, align 4
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %0
		store %jaze_gl-12.Shader %shader, %jaze_gl-12.Shader* %0
	store i32 zeroinitializer, i32* %1
		store i32 %name, i32* %1
	; IfStmt
	%3 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** @.jaze_gl-12._GetShaderiv, align 8
	%4 = icmp ne void (i32, i32, i32*)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i32 zeroinitializer, i32* %2
		%5 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** @.jaze_gl-12._GetShaderiv, align 8
	; SelectorExpr
	%6 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %0, i64 0, i32 1
	%7 = load i32, i32* %6, align 4
	%8 = load i32, i32* %1, align 8
	; cast - cast
	%9 = getelementptr inbounds i32, i32* %2, i64 0
	call ccc void %5(i32 %7, i32 %8, i32* %9)
	; ReturnStmt
	%10 = load i32, i32* %2, align 4
	ret i32 %10

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret i32 0
}

define %..string @.jaze_gl-12.GetString-1976290693600(i32 %name, i32 %index) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca i8*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	store i32 zeroinitializer, i32* %1
		store i32 %index, i32* %1
	; IfStmt
	%3 = load i8* (i32, i32)*, i8* (i32, i32)** @.jaze_gl-12._GetStringi, align 8
	%4 = icmp ne i8* (i32, i32)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store i8* zeroinitializer, i8** %2
		%5 = load i8* (i32, i32)*, i8* (i32, i32)** @.jaze_gl-12._GetStringi, align 8
	%6 = load i32, i32* %0, align 8
	; cast - cast
	%7 = load i32, i32* %1, align 4
	%8 = call ccc i8* %5(i32 %6, i32 %7)
	store i8* %8, i8** %2
	; ReturnStmt
	; SelectorExpr
	%9 = load i8*, i8** %2, align 8
	%10 = call %..string @.strings-9.to_odin_string(i8* %9)
	ret %..string %10

if.else-2:
	; ReturnStmt
	ret %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$129, i64 0, i32 0), i64 3}

if.done-3:
	unreachable
}

define %..string @.jaze_gl-12.GetString-1976290693968(i32 %name) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i8*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	; res
	store i8* zeroinitializer, i8** %1
		%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = call ccc i8* @glGetString(i32 %2)
	store i8* %3, i8** %1
	; ReturnStmt
	; SelectorExpr
	%4 = load i8*, i8** %1, align 8
	%5 = call %..string @.strings-9.to_odin_string(i8* %4)
	ret %..string %5
}

define i32 @.jaze_gl-12.GetInteger(i32 %name) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %name, i32* %0
	; res
	store i32 zeroinitializer, i32* %1
		%2 = load i32, i32* %0, align 8
	; cast - cast
	%3 = getelementptr inbounds i32, i32* %1, i64 0
	call ccc void @glGetIntegerv(i32 %2, i32* %3)
	; ReturnStmt
	%4 = load i32, i32* %1, align 4
	ret i32 %4
}

define void @.jaze_gl-12.Enable(i32 %cap) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %cap, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glEnable(i32 %1)
	ret void
}

define void @.jaze_gl-12.Disable(i32 %cap) {
decls-0:
	%0 = alloca i32, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %cap, i32* %0
	%1 = load i32, i32* %0, align 8
	; cast - cast
	call ccc void @glDisable(i32 %1)
	ret void
}

define void @.jaze_gl-12.AttachShader(%jaze_gl-12.Program %program, %jaze_gl-12.Shader %shader) {
decls-0:
	%0 = alloca %jaze_gl-12.Program, align 8
	%1 = alloca %jaze_gl-12.Shader, align 8
	store %jaze_gl-12.Program zeroinitializer, %jaze_gl-12.Program* %0
		store %jaze_gl-12.Program %program, %jaze_gl-12.Program* %0
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %1
		store %jaze_gl-12.Shader %shader, %jaze_gl-12.Shader* %1
	; IfStmt
	%2 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._AttachShader, align 8
	%3 = icmp ne void (i32, i32)* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	%4 = load void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._AttachShader, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %0, i64 0, i32 4
	%6 = load i32, i32* %5, align 4
	; SelectorExpr
	%7 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %1, i64 0, i32 1
	%8 = load i32, i32* %7, align 4
	call ccc void %4(i32 %6, i32 %8)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define %jaze_gl-12.Program @.jaze_gl-12.CreateProgram() {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_gl-12.Program, align 8
	; IfStmt
	%2 = load i32 ()*, i32 ()** @.jaze_gl-12._CreateProgram, align 8
	%3 = icmp ne i32 ()* %2, zeroinitializer
	br i1 %3, label %if.then-1, label %if.else-2

if.then-1:
	; id
	store i32 zeroinitializer, i32* %0
		%4 = load i32 ()*, i32 ()** @.jaze_gl-12._CreateProgram, align 8
	%5 = call ccc i32 %4()
	store i32 %5, i32* %0
	; res
	store %jaze_gl-12.Program zeroinitializer, %jaze_gl-12.Program* %1
		; AssignStmt
	; SelectorExpr
	%6 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %1, i64 0, i32 4
	%7 = load i32, i32* %0, align 4
	store i32 %7, i32* %6
	; ReturnStmt
	%8 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %1, align 8
	ret %jaze_gl-12.Program %8

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	ret %jaze_gl-12.Program zeroinitializer
}

define void @.jaze_gl-12.ShaderSource-1976290696176(%jaze_gl-12.Shader %obj, %..string %str) {
decls-0:
	%0 = alloca %jaze_gl-12.Shader, align 8
	%1 = alloca %..string, align 8
	%2 = alloca [1 x %..string], align 8
	%3 = alloca {%..string*, i64, i64}, align 8
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %0
		store %jaze_gl-12.Shader %obj, %jaze_gl-12.Shader* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %str, %..string* %1
	; array
	store [1 x %..string] zeroinitializer, [1 x %..string]* %2
		; AssignStmt
	; IndexExpr
	%4 = getelementptr inbounds [1 x %..string], [1 x %..string]* %2, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$12a, i64 0, i32 0), i64 45}, i64 505, i64 11, i64 0, i64 1)
	%5 = load %..string, %..string* %1, align 8
	store %..string %5, %..string* %4
	%6 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %0, align 8
	; SliceExpr
	%7 = load [1 x %..string], [1 x %..string]* %2, align 8
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$12b, i64 0, i32 0), i64 45}, i64 506, i64 28, i64 0, i64 1, i64 1)
	%8 = getelementptr inbounds [1 x %..string], [1 x %..string]* %2, i64 0, i32 0
	%9 = getelementptr inbounds %..string, %..string* %8, i64 0
	%10 = sub i64 1, 0
	%11 = sub i64 1, 0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %3
	%12 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 0
	store %..string* %9, %..string** %12
	%13 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 1
	store i64 %10, i64* %13
	%14 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3, i64 0, i32 2
	store i64 %11, i64* %14
	%15 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %3, align 8
	call void @.jaze_gl-12.ShaderSource-1976290696544(%jaze_gl-12.Shader %6, {%..string*, i64, i64} %15)
	ret void
}

define void @.jaze_gl-12.ShaderSource-1976290696544(%jaze_gl-12.Shader %obj, {%..string*, i64, i64} %strs) {
decls-0:
	%0 = alloca %jaze_gl-12.Shader, align 8
	%1 = alloca {%..string*, i64, i64}, align 8
	%2 = alloca {i8**, i64, i64}, align 8
	%3 = alloca {i8**, i64, i64}, align 8
	%4 = alloca {i32*, i64, i64}, align 8
	%5 = alloca {i32*, i64, i64}, align 8
	%6 = alloca %..string, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	%10 = alloca i8*, align 8
	%11 = alloca {i8*, i64, i64}, align 8
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %0
		store %jaze_gl-12.Shader %obj, %jaze_gl-12.Shader* %0
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %1
		store {%..string*, i64, i64} %strs, {%..string*, i64, i64}* %1
	; IfStmt
	%12 = load void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @.jaze_gl-12._ShaderSource, align 8
	%13 = icmp ne void (i32, i32, i8**, i32*)* %12, zeroinitializer
	br i1 %13, label %if.then-1, label %if.else-5

if.then-1:
	; newStrs
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %2
		; make
	%14 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%15 = extractvalue {%..string*, i64, i64} %14, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$12c, i64 0, i32 0), i64 45}, i64 511, i64 34, i64 0, i64 %15, i64 %15)
	%16 = mul i64 8, %15
	%17 = call %..rawptr @.alloc_align(i64 %16, i64 8)
	%18 = bitcast %..rawptr %17 to i8**
	store {i8**, i64, i64} zeroinitializer, {i8**, i64, i64}* %3
	%19 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 0
	store i8** %18, i8*** %19
	%20 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 1
	store i64 %15, i64* %20
	%21 = getelementptr inbounds {i8**, i64, i64}, {i8**, i64, i64}* %3, i64 0, i32 2
	store i64 %15, i64* %21
	%22 = load {i8**, i64, i64}, {i8**, i64, i64}* %3, align 8
	store {i8**, i64, i64} %22, {i8**, i64, i64}* %2
	; DeferStmt
	; lengths
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %4
		; make
	%23 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%24 = extractvalue {%..string*, i64, i64} %23, 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$12d, i64 0, i32 0), i64 45}, i64 512, i64 32, i64 0, i64 %24, i64 %24)
	%25 = mul i64 4, %24
	%26 = call %..rawptr @.alloc_align(i64 %25, i64 4)
	%27 = bitcast %..rawptr %26 to i32*
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %5
	%28 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 0
	store i32* %27, i32** %28
	%29 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 1
	store i64 %24, i64* %29
	%30 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %5, i64 0, i32 2
	store i64 %24, i64* %30
	%31 = load {i32*, i64, i64}, {i32*, i64, i64}* %5, align 8
	store {i32*, i64, i64} %31, {i32*, i64, i64}* %4
	; DeferStmt
	; RangeStmt
	; s
	store %..string zeroinitializer, %..string* %6
		; i
	store i64 zeroinitializer, i64* %7
		%32 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	store i64 zeroinitializer, i64* %8
	%33 = extractvalue {%..string*, i64, i64} %32, 1
	store i64 %33, i64* %8
	store i64 zeroinitializer, i64* %9
	store i64 -1, i64* %9
	br label %for.index.loop-2

for.index.loop-2:
	%34 = load i64, i64* %9, align 8
	%35 = add i64 %34, 1
	store i64 %35, i64* %9
	%36 = load i64, i64* %8, align 8
	%37 = icmp slt i64 %35, %36
	br i1 %37, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%38 = load i64, i64* %9, align 8
	%39 = extractvalue {%..string*, i64, i64} %32, 0
	%40 = getelementptr inbounds %..string, %..string* %39, i64 %38
	%41 = load %..string, %..string* %40, align 8
	store %..string %41, %..string* %6
	store i64 %38, i64* %7
	; AssignStmt
	; IndexExpr
	%42 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%43 = extractvalue {i8**, i64, i64} %42, 0
	%44 = extractvalue {i8**, i64, i64} %42, 1
	%45 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$12e, i64 0, i32 0), i64 45}, i64 514, i64 21, i64 %45, i64 %44)
	%46 = getelementptr inbounds i8*, i8** %43, i64 %45
	; IndexExpr
	%47 = load %..string, %..string* %6, align 8
	; cast - cast
	%48 = extractvalue %..string %47, 0
	store i8* zeroinitializer, i8** %10
	store i8* %48, i8** %10
	%49 = extractvalue %..string %47, 1
	%50 = sub i64 %49, 0
	%51 = sub i64 %49, 0
	%52 = load i8*, i8** %10, align 8
	%53 = getelementptr inbounds i8, i8* %52, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %11
	%54 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 0
	store i8* %53, i8** %54
	%55 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 1
	store i64 %50, i64* %55
	%56 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %11, i64 0, i32 2
	store i64 %51, i64* %56
	%57 = load {i8*, i64, i64}, {i8*, i64, i64}* %11, align 8
	%58 = extractvalue {i8*, i64, i64} %57, 0
	%59 = extractvalue {i8*, i64, i64} %57, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$12f, i64 0, i32 0), i64 45}, i64 514, i64 43, i64 0, i64 %59)
	%60 = getelementptr inbounds i8, i8* %58, i64 0
	%61 = getelementptr inbounds i8, i8* %60, i64 0
	store i8* %61, i8** %46
	; AssignStmt
	; IndexExpr
	%62 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%63 = extractvalue {i32*, i64, i64} %62, 0
	%64 = extractvalue {i32*, i64, i64} %62, 1
	%65 = load i64, i64* %7, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$130, i64 0, i32 0), i64 45}, i64 515, i64 21, i64 %65, i64 %64)
	%66 = getelementptr inbounds i32, i32* %63, i64 %65
	%67 = load %..string, %..string* %6, align 8
	%68 = extractvalue %..string %67, 1
	; cast - cast
	%69 = trunc i64 %68 to i32
	store i32 %69, i32* %66
	br label %for.index.loop-2

for.index.done-4:
	%70 = load void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @.jaze_gl-12._ShaderSource, align 8
	; SelectorExpr
	%71 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %0, i64 0, i32 1
	%72 = load i32, i32* %71, align 4
	%73 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%74 = extractvalue {%..string*, i64, i64} %73, 1
	; cast - cast
	%75 = trunc i64 %74 to i32
	; IndexExpr
	%76 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%77 = extractvalue {i8**, i64, i64} %76, 0
	%78 = extractvalue {i8**, i64, i64} %76, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$131, i64 0, i32 0), i64 45}, i64 517, i64 60, i64 0, i64 %78)
	%79 = getelementptr inbounds i8*, i8** %77, i64 0
	%80 = getelementptr inbounds i8*, i8** %79, i64 0
	; IndexExpr
	%81 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%82 = extractvalue {i32*, i64, i64} %81, 0
	%83 = extractvalue {i32*, i64, i64} %81, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$132, i64 0, i32 0), i64 45}, i64 517, i64 73, i64 0, i64 %83)
	%84 = getelementptr inbounds i32, i32* %82, i64 0
	%85 = getelementptr inbounds i32, i32* %84, i64 0
	call ccc void %70(i32 %72, i32 %75, i8** %80, i32* %85)
	; AssignStmt
	; SelectorExpr
	%86 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %0, i64 0, i32 0
	; IndexExpr
	%87 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %1, align 8
	%88 = extractvalue {%..string*, i64, i64} %87, 0
	%89 = extractvalue {%..string*, i64, i64} %87, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$133, i64 0, i32 0), i64 45}, i64 518, i64 27, i64 0, i64 %89)
	%90 = getelementptr inbounds %..string, %..string* %88, i64 0
	%91 = load %..string, %..string* %90, align 8
	store %..string %91, %..string* %86
	; defer
	; free
	%92 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%93 = extractvalue {i32*, i64, i64} %92, 0
	%94 = bitcast i32* %93 to %..rawptr
	call void @.free_ptr(%..rawptr %94)
	; defer
	; free
	%95 = load {i8**, i64, i64}, {i8**, i64, i64}* %2, align 8
	%96 = extractvalue {i8**, i64, i64} %95, 0
	%97 = bitcast i8** %96 to %..rawptr
	call void @.free_ptr(%..rawptr %97)
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	ret void
}

define %jaze_gl-12.Shader @.jaze_gl-12.CreateShader(i32 %type) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i32, align 4
	%2 = alloca %jaze_gl-12.Shader, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %type, i32* %0
	; IfStmt
	%3 = load i32 (i32)*, i32 (i32)** @.jaze_gl-12._CreateShader, align 8
	%4 = icmp ne i32 (i32)* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.else-2

if.then-1:
	; id
	store i32 zeroinitializer, i32* %1
		%5 = load i32 (i32)*, i32 (i32)** @.jaze_gl-12._CreateShader, align 8
	%6 = load i32, i32* %0, align 8
	; cast - cast
	%7 = call ccc i32 %5(i32 %6)
	store i32 %7, i32* %1
	; res
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %2
		; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, i64 0, i32 1
	%9 = load i32, i32* %1, align 4
	store i32 %9, i32* %8
	; ReturnStmt
	%10 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %2, align 8
	ret %jaze_gl-12.Shader %10

if.else-2:
	; ReturnStmt
	ret %jaze_gl-12.Shader zeroinitializer

if.done-3:
	unreachable
}

define void @.jaze_gl-12.CompileShader(%jaze_gl-12.Shader %obj) {
decls-0:
	%0 = alloca %jaze_gl-12.Shader, align 8
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %0
		store %jaze_gl-12.Shader %obj, %jaze_gl-12.Shader* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_gl-12._CompileShader, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_gl-12._CompileShader, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %jaze_gl-12.Shader, %jaze_gl-12.Shader* %0, i64 0, i32 1
	%5 = load i32, i32* %4, align 4
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define void @.jaze_gl-12.GetInfo(%jaze_gl-12.OpenGLVars_t* %vars) {
decls-0:
	%0 = alloca %jaze_gl-12.OpenGLVars_t*, align 8
	%1 = alloca i32, align 4
	%2 = alloca i32, align 4
	%3 = alloca i64, align 8
	%4 = alloca %..string, align 8
	%5 = alloca {%..string*, i64, i64}, align 8
	%6 = alloca [1 x %..string], align 8
	store %jaze_gl-12.OpenGLVars_t* zeroinitializer, %jaze_gl-12.OpenGLVars_t** %0
		store %jaze_gl-12.OpenGLVars_t* %vars, %jaze_gl-12.OpenGLVars_t** %0
	; AssignStmt
	; SelectorExpr
	%7 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%8 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %7, i64 0
	%9 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %8, i64 0, i32 8
	%10 = call i32 @.jaze_gl-12.GetInteger(i32 33307)
	store i32 %10, i32* %9
	; AssignStmt
	; SelectorExpr
	%11 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%12 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %11, i64 0
	%13 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %12, i64 0, i32 10
	%14 = call i32 @.jaze_gl-12.GetInteger(i32 33308)
	store i32 %14, i32* %13
	; AssignStmt
	; SelectorExpr
	%15 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%16 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %15, i64 0
	%17 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %16, i64 0, i32 11
	%18 = call i32 @.jaze_gl-12.GetInteger(i32 33310)
	store i32 %18, i32* %17
	; AssignStmt
	; SelectorExpr
	%19 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%20 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %19, i64 0
	%21 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %20, i64 0, i32 2
	%22 = call %..string @.jaze_gl-12.GetString-1976290693968(i32 7938)
	store %..string %22, %..string* %21
	; AssignStmt
	; SelectorExpr
	%23 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%24 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %23, i64 0
	%25 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %24, i64 0, i32 3
	%26 = call %..string @.jaze_gl-12.GetString-1976290693968(i32 35724)
	store %..string %26, %..string* %25
	; AssignStmt
	; SelectorExpr
	%27 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%28 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %27, i64 0
	%29 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %28, i64 0, i32 4
	%30 = call %..string @.jaze_gl-12.GetString-1976290693968(i32 7936)
	store %..string %30, %..string* %29
	; AssignStmt
	; SelectorExpr
	%31 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%32 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %31, i64 0
	%33 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %32, i64 0, i32 5
	%34 = call %..string @.jaze_gl-12.GetString-1976290693968(i32 7937)
	store %..string %34, %..string* %33
	; AssignStmt
	; SelectorExpr
	%35 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%36 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %35, i64 0
	%37 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %36, i64 0, i32 12
	%38 = call i32 @.jaze_gl-12.GetInteger(i32 33309)
	store i32 %38, i32* %37
	; reserve
	; SelectorExpr
	%39 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%40 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %39, i64 0
	%41 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %40, i64 0, i32 0
	; SelectorExpr
	%42 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%43 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %42, i64 0
	%44 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %43, i64 0, i32 12
	%45 = load i32, i32* %44, align 4
	%46 = sext i32 %45 to i64
	%47 = bitcast {%..string*, i64, i64,%Allocator}* %41 to %..rawptr
	%48 = call i1 @.__dynamic_array_reserve(%..rawptr %47, i64 16, i64 8, i64 %46)
	; RangeStmt
	; i
	store i32 zeroinitializer, i32* %1
		store i32 zeroinitializer, i32* %2
	store i32 0, i32* %2
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	br label %for.interval.loop-1

for.interval.loop-1:
	; SelectorExpr
	%49 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%50 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %49, i64 0
	%51 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %50, i64 0, i32 12
	%52 = load i32, i32* %51, align 4
	%53 = load i32, i32* %2, align 4
	%54 = icmp slt i32 %53, %52
	br i1 %54, label %for.interval.body-2, label %for.interval.done-3

for.interval.body-2:
	%55 = load i32, i32* %2, align 4
	%56 = load i64, i64* %3, align 8
	%57 = load i32, i32* %2, align 4
	%58 = add i32 %57, 1
	store i32 %58, i32* %2
	%59 = load i64, i64* %3, align 8
	%60 = add i64 %59, 1
	store i64 %60, i64* %3
	store i32 %55, i32* %1
	; ext
	store %..string zeroinitializer, %..string* %4
		%61 = load i32, i32* %1, align 4
	; cast - cast
	%62 = bitcast i32 %61 to i32
	%63 = call %..string @.jaze_gl-12.GetString-1976290693600(i32 7939, i32 %62)
	store %..string %63, %..string* %4
	; append
	; SelectorExpr
	%64 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%65 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %64, i64 0
	%66 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %65, i64 0, i32 0
	%67 = bitcast {%..string*, i64, i64,%Allocator}* %66 to %..rawptr
	; SelectorExpr
	%68 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%69 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %68, i64 0
	%70 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %69, i64 0, i32 0
	%71 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %70, align 8
	%72 = load %..string, %..string* %4, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %5
	store [1 x %..string] zeroinitializer, [1 x %..string]* %6
	%73 = getelementptr inbounds [1 x %..string], [1 x %..string]* %6, i64 0, i32 0
	store %..string %72, %..string* %73
	%74 = getelementptr inbounds [1 x %..string], [1 x %..string]* %6, i64 0, i32 0
	%75 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 0
	store %..string* %74, %..string** %75
	%76 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 1
	store i64 1, i64* %76
	%77 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %5, i64 0, i32 2
	store i64 1, i64* %77
	%78 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %5, align 8
	%79 = extractvalue {%..string*, i64, i64} %78, 0
	%80 = extractvalue {%..string*, i64, i64} %78, 1
	%81 = bitcast %..string* %79 to %..rawptr
	%82 = call i64 @.__dynamic_array_append(%..rawptr %67, i64 16, i64 8, %..rawptr %81, i64 %80)
	br label %for.interval.loop-1

for.interval.done-3:
	ret void
}

define void @.jaze_gl-12.Init() {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..rawptr, align 8
	; libString
	store %..string zeroinitializer, %..string* %0
		store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$134, i64 0, i32 0), i64 13}, %..string* %0
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %1
		; SelectorExpr
	; IndexExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 0
	%4 = extractvalue %..string %2, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.__str$135, i64 0, i32 0), i64 45}, i64 568, i64 42, i64 0, i64 %4)
	%5 = getelementptr inbounds i8, i8* %3, i64 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	%7 = call ccc %..rawptr @LoadLibraryA(i8* %6)
	store %..rawptr %7, %..rawptr* %1
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%8 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 2
	%9 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%10 = ptrtoint %..rawptr %9 to i64
	store i64 %10, i64* %8
	%11 = load %..rawptr, %..rawptr* %1, align 8
	%12 = getelementptr inbounds void (i32, i32, i32, %..rawptr)*, void (i32, i32, i32, %..rawptr)** @.jaze_gl-12._DrawElements, i64 0
	%13 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	%14 = bitcast void (i32, i32, i32, %..rawptr)** %12 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %11, %..rawptr %14, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$136, i64 0, i32 0), i64 14}, %Type_Info* %13)
	%15 = load %..rawptr, %..rawptr* %1, align 8
	%16 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._BindVertexArray, i64 0
	%17 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	%18 = bitcast void (i32)** %16 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %15, %..rawptr %18, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$137, i64 0, i32 0), i64 17}, %Type_Info* %17)
	%19 = load %..rawptr, %..rawptr* %1, align 8
	%20 = getelementptr inbounds void (i32, i32, i32, i1, i32, %..rawptr)*, void (i32, i32, i32, i1, i32, %..rawptr)** @.jaze_gl-12._VertexAttribPointer, i64 0
	%21 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	%22 = bitcast void (i32, i32, i32, i1, i32, %..rawptr)** %20 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %19, %..rawptr %22, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$138, i64 0, i32 0), i64 21}, %Type_Info* %21)
	%23 = load %..rawptr, %..rawptr* %1, align 8
	%24 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._EnableVertexAttribArray, i64 0
	%25 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	%26 = bitcast void (i32)** %24 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %23, %..rawptr %26, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$139, i64 0, i32 0), i64 25}, %Type_Info* %25)
	%27 = load %..rawptr, %..rawptr* %1, align 8
	%28 = getelementptr inbounds void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-12._GenVertexArrays, i64 0
	%29 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	%30 = bitcast void (i32, i32*)** %28 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %27, %..rawptr %30, %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$13a, i64 0, i32 0), i64 17}, %Type_Info* %29)
	%31 = load %..rawptr, %..rawptr* %1, align 8
	%32 = getelementptr inbounds void (i32, i32, %..rawptr, i32)*, void (i32, i32, %..rawptr, i32)** @.jaze_gl-12._BufferData, i64 0
	%33 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	%34 = bitcast void (i32, i32, %..rawptr, i32)** %32 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %31, %..rawptr %34, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$13b, i64 0, i32 0), i64 12}, %Type_Info* %33)
	%35 = load %..rawptr, %..rawptr* %1, align 8
	%36 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._BindBuffer, i64 0
	%37 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 97
	%38 = bitcast void (i32, i32)** %36 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %35, %..rawptr %38, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$13c, i64 0, i32 0), i64 12}, %Type_Info* %37)
	%39 = load %..rawptr, %..rawptr* %1, align 8
	%40 = getelementptr inbounds void (i32, i32*)*, void (i32, i32*)** @.jaze_gl-12._GenBuffers, i64 0
	%41 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	%42 = bitcast void (i32, i32*)** %40 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %39, %..rawptr %42, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$13d, i64 0, i32 0), i64 12}, %Type_Info* %41)
	%43 = load %..rawptr, %..rawptr* %1, align 8
	%44 = getelementptr inbounds void (i32, i32, i32, i32, i32*, i1)*, void (i32, i32, i32, i32, i32*, i1)** @.jaze_gl-12._DebugMessageControl, i64 0
	%45 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 99
	%46 = bitcast void (i32, i32, i32, i32, i32*, i1)** %44 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %43, %..rawptr %46, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$13e, i64 0, i32 0), i64 24}, %Type_Info* %45)
	%47 = load %..rawptr, %..rawptr* %1, align 8
	%48 = getelementptr inbounds void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)*, void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** @.jaze_gl-12._DebugMessageCallback, i64 0
	%49 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 101
	%50 = bitcast void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)** %48 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %47, %..rawptr %50, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$13f, i64 0, i32 0), i64 25}, %Type_Info* %49)
	%51 = load %..rawptr, %..rawptr* %1, align 8
	%52 = getelementptr inbounds void (i32, i32, i32*)*, void (i32, i32, i32*)** @.jaze_gl-12._GetShaderiv, i64 0
	%53 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 106
	%54 = bitcast void (i32, i32, i32*)** %52 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %51, %..rawptr %54, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$140, i64 0, i32 0), i64 13}, %Type_Info* %53)
	%55 = load %..rawptr, %..rawptr* %1, align 8
	%56 = getelementptr inbounds void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)** @.jaze_gl-12._GetShaderInfoLog, i64 0
	%57 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	%58 = bitcast void (i32, i32, i32*, i8*)** %56 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %55, %..rawptr %58, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$141, i64 0, i32 0), i64 18}, %Type_Info* %57)
	%59 = load %..rawptr, %..rawptr* %1, align 8
	%60 = getelementptr inbounds i8* (i32, i32)*, i8* (i32, i32)** @.jaze_gl-12._GetStringi, i64 0
	%61 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 111
	%62 = bitcast i8* (i32, i32)** %60 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %59, %..rawptr %62, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$142, i64 0, i32 0), i64 12}, %Type_Info* %61)
	%63 = load %..rawptr, %..rawptr* %1, align 8
	%64 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._BlendEquation, i64 0
	%65 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	%66 = bitcast void (i32)** %64 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %63, %..rawptr %66, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$143, i64 0, i32 0), i64 15}, %Type_Info* %65)
	%67 = load %..rawptr, %..rawptr* %1, align 8
	%68 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._BlendEquationSeparate, i64 0
	%69 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	%70 = bitcast void (i32, i32)** %68 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %67, %..rawptr %70, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$144, i64 0, i32 0), i64 23}, %Type_Info* %69)
	%71 = load %..rawptr, %..rawptr* %1, align 8
	%72 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._CompileShader, i64 0
	%73 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	%74 = bitcast void (i32)** %72 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %71, %..rawptr %74, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$145, i64 0, i32 0), i64 15}, %Type_Info* %73)
	%75 = load %..rawptr, %..rawptr* %1, align 8
	%76 = getelementptr inbounds i32 (i32)*, i32 (i32)** @.jaze_gl-12._CreateShader, i64 0
	%77 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 117
	%78 = bitcast i32 (i32)** %76 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %75, %..rawptr %78, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$146, i64 0, i32 0), i64 14}, %Type_Info* %77)
	%79 = load %..rawptr, %..rawptr* %1, align 8
	%80 = getelementptr inbounds void (i32, i32, i8**, i32*)*, void (i32, i32, i8**, i32*)** @.jaze_gl-12._ShaderSource, i64 0
	%81 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 118
	%82 = bitcast void (i32, i32, i8**, i32*)** %80 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %79, %..rawptr %82, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$147, i64 0, i32 0), i64 14}, %Type_Info* %81)
	%83 = load %..rawptr, %..rawptr* %1, align 8
	%84 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._AttachShader, i64 0
	%85 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 121
	%86 = bitcast void (i32, i32)** %84 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %83, %..rawptr %86, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$148, i64 0, i32 0), i64 14}, %Type_Info* %85)
	%87 = load %..rawptr, %..rawptr* %1, align 8
	%88 = getelementptr inbounds i32 ()*, i32 ()** @.jaze_gl-12._CreateProgram, i64 0
	%89 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 123
	%90 = bitcast i32 ()** %88 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %87, %..rawptr %90, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$149, i64 0, i32 0), i64 15}, %Type_Info* %89)
	%91 = load %..rawptr, %..rawptr* %1, align 8
	%92 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._LinkProgram, i64 0
	%93 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	%94 = bitcast void (i32)** %92 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %91, %..rawptr %94, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$14a, i64 0, i32 0), i64 13}, %Type_Info* %93)
	%95 = load %..rawptr, %..rawptr* %1, align 8
	%96 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._UseProgram, i64 0
	%97 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	%98 = bitcast void (i32)** %96 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %95, %..rawptr %98, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$14b, i64 0, i32 0), i64 12}, %Type_Info* %97)
	%99 = load %..rawptr, %..rawptr* %1, align 8
	%100 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_gl-12._ActiveTexture, i64 0
	%101 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	%102 = bitcast void (i32)** %100 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %99, %..rawptr %102, %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$14c, i64 0, i32 0), i64 15}, %Type_Info* %101)
	%103 = load %..rawptr, %..rawptr* %1, align 8
	%104 = getelementptr inbounds void (i32, i32)*, void (i32, i32)** @.jaze_gl-12._Uniform1i, i64 0
	%105 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	%106 = bitcast void (i32, i32)** %104 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %103, %..rawptr %106, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$14d, i64 0, i32 0), i64 11}, %Type_Info* %105)
	%107 = load %..rawptr, %..rawptr* %1, align 8
	%108 = getelementptr inbounds void (i32, i32, i32)*, void (i32, i32, i32)** @.jaze_gl-12._Uniform2i, i64 0
	%109 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	%110 = bitcast void (i32, i32, i32)** %108 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %107, %..rawptr %110, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$14e, i64 0, i32 0), i64 11}, %Type_Info* %109)
	%111 = load %..rawptr, %..rawptr* %1, align 8
	%112 = getelementptr inbounds void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** @.jaze_gl-12._Uniform3i, i64 0
	%113 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 126
	%114 = bitcast void (i32, i32, i32, i32)** %112 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %111, %..rawptr %114, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$14f, i64 0, i32 0), i64 11}, %Type_Info* %113)
	%115 = load %..rawptr, %..rawptr* %1, align 8
	%116 = getelementptr inbounds void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** @.jaze_gl-12._Uniform4i, i64 0
	%117 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 128
	%118 = bitcast void (i32, i32, i32, i32, i32)** %116 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %115, %..rawptr %118, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$150, i64 0, i32 0), i64 11}, %Type_Info* %117)
	%119 = load %..rawptr, %..rawptr* %1, align 8
	%120 = getelementptr inbounds void (i32, float)*, void (i32, float)** @.jaze_gl-12._Uniform1f, i64 0
	%121 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	%122 = bitcast void (i32, float)** %120 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %119, %..rawptr %122, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$151, i64 0, i32 0), i64 11}, %Type_Info* %121)
	%123 = load %..rawptr, %..rawptr* %1, align 8
	%124 = getelementptr inbounds void (i32, float, float)*, void (i32, float, float)** @.jaze_gl-12._Uniform2f, i64 0
	%125 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	%126 = bitcast void (i32, float, float)** %124 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %123, %..rawptr %126, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$152, i64 0, i32 0), i64 11}, %Type_Info* %125)
	%127 = load %..rawptr, %..rawptr* %1, align 8
	%128 = getelementptr inbounds void (i32, float, float, float)*, void (i32, float, float, float)** @.jaze_gl-12._Uniform3f, i64 0
	%129 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 134
	%130 = bitcast void (i32, float, float, float)** %128 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %127, %..rawptr %130, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$153, i64 0, i32 0), i64 11}, %Type_Info* %129)
	%131 = load %..rawptr, %..rawptr* %1, align 8
	%132 = getelementptr inbounds void (i32, float, float, float, float)*, void (i32, float, float, float, float)** @.jaze_gl-12._Uniform4f, i64 0
	%133 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	%134 = bitcast void (i32, float, float, float, float)** %132 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %131, %..rawptr %134, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$154, i64 0, i32 0), i64 11}, %Type_Info* %133)
	%135 = load %..rawptr, %..rawptr* %1, align 8
	%136 = getelementptr inbounds void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)** @.jaze_gl-12._UniformMatrix4fv, i64 0
	%137 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 138
	%138 = bitcast void (i32, i32, i32, float*)** %136 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %135, %..rawptr %138, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$155, i64 0, i32 0), i64 18}, %Type_Info* %137)
	%139 = load %..rawptr, %..rawptr* %1, align 8
	%140 = getelementptr inbounds i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-12._GetUniformLocation, i64 0
	%141 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	%142 = bitcast i32 (i32, i8*)** %140 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %139, %..rawptr %142, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$156, i64 0, i32 0), i64 20}, %Type_Info* %141)
	%143 = load %..rawptr, %..rawptr* %1, align 8
	%144 = getelementptr inbounds i32 (i32, i8*)*, i32 (i32, i8*)** @.jaze_gl-12._GetAttribLocation, i64 0
	%145 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	%146 = bitcast i32 (i32, i8*)** %144 to %..rawptr
	call void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %143, %..rawptr %146, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.__str$157, i64 0, i32 0), i64 19}, %Type_Info* %145)
	; defer
	; SelectorExpr
	%147 = load %..rawptr, %..rawptr* %1, align 8
	call ccc void @FreeLibrary(%..rawptr %147)
	ret void
}

define void @.jaze_gl-12.Init.set_proc_address-0(%..rawptr %h, %..rawptr %p, %..string %name, %Type_Info* %info) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %Type_Info*, align 8
	%4 = alloca i8*, align 8
	%5 = alloca void ()*, align 8
	%6 = alloca %jaze_gl-12.DebugFunctionLoadStatus, align 8
	%7 = alloca {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}, align 8
	%8 = alloca [1 x %jaze_gl-12.DebugFunctionLoadStatus], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %h, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	store %Type_Info* zeroinitializer, %Type_Info** %3
		store %Type_Info* %info, %Type_Info** %3
	; txt
	store i8* zeroinitializer, i8** %4
		; SelectorExpr
	%9 = load %..string, %..string* %2, align 8
	%10 = call i8* @.strings-9.new_c_string(%..string %9)
	store i8* %10, i8** %4
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %5
		; SelectorExpr
	%11 = load i8*, i8** %4, align 8
	%12 = call ccc void ()* @wglGetProcAddress(i8* %11)
	store void ()* %12, void ()** %5
	; IfStmt
	%13 = load void ()*, void ()** %5, align 8
	%14 = icmp eq void ()* %13, zeroinitializer
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%15 = load %..rawptr, %..rawptr* %0, align 8
	%16 = load i8*, i8** %4, align 8
	%17 = call ccc void ()* @GetProcAddress(%..rawptr %15, i8* %16)
	store void ()* %17, void ()** %5
	br label %if.done-2

if.done-2:
	; AssignStmt
	%18 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%19 = bitcast %..rawptr %18 to void ()**
	%20 = getelementptr inbounds void ()*, void ()** %19, i64 0
	%21 = load void ()*, void ()** %5, align 8
	store void ()* %21, void ()** %20
	; status
	store %jaze_gl-12.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-12.DebugFunctionLoadStatus* %6
		store %jaze_gl-12.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-12.DebugFunctionLoadStatus* %6
	; AssignStmt
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, i64 0, i32 0
	%23 = load %..string, %..string* %2, align 8
	store %..string %23, %..string* %22
	; AssignStmt
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, i64 0, i32 1
	%25 = load void ()*, void ()** %5, align 8
	; cast - cast
	%26 = bitcast void ()* %25 to %..rawptr
	; cast - cast
	%27 = ptrtoint %..rawptr %26 to i64
	store i64 %27, i64* %24
	; AssignStmt
	; SelectorExpr
	%28 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, i64 0, i32 3
	store i1 false, i1* %28
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, i64 0, i32 2
	%30 = load %Type_Info*, %Type_Info** %3, align 8
	store %Type_Info* %30, %Type_Info** %29
	; AssignStmt
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 3
	%32 = load i32, i32* %31, align 4
	%33 = add i32 %32, 1
	store i32 %33, i32* %31
	; IfStmt
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, i64 0, i32 1
	%35 = load i64, i64* %34, align 8
	%36 = icmp ne i64 %35, 0
	br i1 %36, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%37 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, i64 0, i32 3
	store i1 true, i1* %37
	; AssignStmt
	; SelectorExpr
	%38 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 4
	%39 = load i32, i32* %38, align 4
	%40 = add i32 %39, 1
	store i32 %40, i32* %38
	br label %if.done-4

if.done-4:
	; append
	; SelectorExpr
	%41 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 0
	%42 = bitcast {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %41 to %..rawptr
	; SelectorExpr
	%43 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 0
	%44 = load {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %43, align 8
	%45 = load %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %6, align 8
	; variadic call argument generation
	store {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64} zeroinitializer, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}* %7
	store [1 x %jaze_gl-12.DebugFunctionLoadStatus] zeroinitializer, [1 x %jaze_gl-12.DebugFunctionLoadStatus]* %8
	%46 = getelementptr inbounds [1 x %jaze_gl-12.DebugFunctionLoadStatus], [1 x %jaze_gl-12.DebugFunctionLoadStatus]* %8, i64 0, i32 0
	store %jaze_gl-12.DebugFunctionLoadStatus %45, %jaze_gl-12.DebugFunctionLoadStatus* %46
	%47 = getelementptr inbounds [1 x %jaze_gl-12.DebugFunctionLoadStatus], [1 x %jaze_gl-12.DebugFunctionLoadStatus]* %8, i64 0, i32 0
	%48 = getelementptr inbounds {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 0
	store %jaze_gl-12.DebugFunctionLoadStatus* %47, %jaze_gl-12.DebugFunctionLoadStatus** %48
	%49 = getelementptr inbounds {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 1
	store i64 1, i64* %49
	%50 = getelementptr inbounds {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}* %7, i64 0, i32 2
	store i64 1, i64* %50
	%51 = load {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64}* %7, align 8
	%52 = extractvalue {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64} %51, 0
	%53 = extractvalue {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64} %51, 1
	%54 = bitcast %jaze_gl-12.DebugFunctionLoadStatus* %52 to %..rawptr
	%55 = call i64 @.__dynamic_array_append(%..rawptr %42, i64 40, i64 8, %..rawptr %54, i64 %53)
	; defer
	; free
	%56 = load i8*, i8** %4, align 8
	%57 = bitcast i8* %56 to %..rawptr
	call void @.free_ptr(%..rawptr %57)
	ret void
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.DRAW_TO_WINDOW_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8193, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %6
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.DOUBLE_BUFFER_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8209, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %6
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.SUPPORT_OPENGL_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8208, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %6
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.ACCELERATION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8195, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.PIXEL_TYPE_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8211, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.COLOR_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8212, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.ALPHA_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8219, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.DEPTH_BITS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8226, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.FRAMEBUFFER_SRGB_CAPABLE_ARB(i1 %value) {
decls-0:
	%0 = alloca i1, align 1
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i1 zeroinitializer, i1* %0
		store i1 %value, i1* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8361, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	store i32 %5, i32* %3
	; ReturnStmt
	%6 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %6
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_MAJOR_VERSION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8337, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_MINOR_VERSION_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8338, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 4
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_FLAGS_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 8340, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define %jaze_wgl-13.Attrib @.jaze_wgl-13.CONTEXT_PROFILE_MASK_ARB(i32 %value) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_wgl-13.Attrib, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %value, i32* %0
	; res
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %1
		; AssignStmt
	; SelectorExpr
	%2 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 0
	store i32 37158, i32* %2
	; AssignStmt
	; SelectorExpr
	%3 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, i64 0, i32 1
	%4 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %4, i32* %3
	; ReturnStmt
	%5 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %1, align 4
	ret %jaze_wgl-13.Attrib %5
}

define {i32*, i64, i64,%Allocator} @.jaze_wgl-13.PrepareAttribArray({%jaze_wgl-13.Attrib*, i64, i64,%Allocator} %attribList) {
decls-0:
	%0 = alloca {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, align 8
	%1 = alloca {i32*, i64, i64,%Allocator}, align 8
	%2 = alloca %jaze_wgl-13.Attrib, align 4
	%3 = alloca i64, align 8
	%4 = alloca {i32*, i64, i64}, align 8
	%5 = alloca [1 x i32], align 4
	%6 = alloca {i32*, i64, i64}, align 8
	%7 = alloca [1 x i32], align 4
	%8 = alloca {i32*, i64, i64}, align 8
	%9 = alloca [1 x i32], align 4
	store {%jaze_wgl-13.Attrib*, i64, i64,%Allocator} zeroinitializer, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %0
		store {%jaze_wgl-13.Attrib*, i64, i64,%Allocator} %attribList, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %0
	; array
	store {i32*, i64, i64,%Allocator} zeroinitializer, {i32*, i64, i64,%Allocator}* %1
		; RangeStmt
	; attr
	store %jaze_wgl-13.Attrib zeroinitializer, %jaze_wgl-13.Attrib* %2
		%10 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %0, i64 0, i32 1
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%11 = load i64, i64* %3, align 8
	%12 = add i64 %11, 1
	store i64 %12, i64* %3
	%13 = load i64, i64* %10, align 8
	%14 = icmp slt i64 %12, %13
	br i1 %14, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%15 = load i64, i64* %3, align 8
	%16 = getelementptr inbounds {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}, {%jaze_wgl-13.Attrib*, i64, i64,%Allocator}* %0, i64 0, i32 0
	%17 = load %jaze_wgl-13.Attrib*, %jaze_wgl-13.Attrib** %16, align 8
	%18 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %17, i64 %15
	%19 = load %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %18, align 4
	store %jaze_wgl-13.Attrib %19, %jaze_wgl-13.Attrib* %2
	; append
	%20 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%21 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; SelectorExpr
	%22 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %2, i64 0, i32 0
	%23 = load i32, i32* %22, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %4
	store [1 x i32] zeroinitializer, [1 x i32]* %5
	%24 = getelementptr inbounds [1 x i32], [1 x i32]* %5, i64 0, i32 0
	store i32 %23, i32* %24
	%25 = getelementptr inbounds [1 x i32], [1 x i32]* %5, i64 0, i32 0
	%26 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 0
	store i32* %25, i32** %26
	%27 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %27
	%28 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %28
	%29 = load {i32*, i64, i64}, {i32*, i64, i64}* %4, align 8
	%30 = extractvalue {i32*, i64, i64} %29, 0
	%31 = extractvalue {i32*, i64, i64} %29, 1
	%32 = bitcast i32* %30 to %..rawptr
	%33 = call i64 @.__dynamic_array_append(%..rawptr %20, i64 4, i64 4, %..rawptr %32, i64 %31)
	; append
	%34 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%35 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_wgl-13.Attrib, %jaze_wgl-13.Attrib* %2, i64 0, i32 1
	%37 = load i32, i32* %36, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %6
	store [1 x i32] zeroinitializer, [1 x i32]* %7
	%38 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	store i32 %37, i32* %38
	%39 = getelementptr inbounds [1 x i32], [1 x i32]* %7, i64 0, i32 0
	%40 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 0
	store i32* %39, i32** %40
	%41 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %41
	%42 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %42
	%43 = load {i32*, i64, i64}, {i32*, i64, i64}* %6, align 8
	%44 = extractvalue {i32*, i64, i64} %43, 0
	%45 = extractvalue {i32*, i64, i64} %43, 1
	%46 = bitcast i32* %44 to %..rawptr
	%47 = call i64 @.__dynamic_array_append(%..rawptr %34, i64 4, i64 4, %..rawptr %46, i64 %45)
	br label %for.index.loop-1

for.index.done-3:
	; append
	%48 = bitcast {i32*, i64, i64,%Allocator}* %1 to %..rawptr
	%49 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %8
	store [1 x i32] zeroinitializer, [1 x i32]* %9
	%50 = getelementptr inbounds [1 x i32], [1 x i32]* %9, i64 0, i32 0
	store i32 0, i32* %50
	%51 = getelementptr inbounds [1 x i32], [1 x i32]* %9, i64 0, i32 0
	%52 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 0
	store i32* %51, i32** %52
	%53 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %53
	%54 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %54
	%55 = load {i32*, i64, i64}, {i32*, i64, i64}* %8, align 8
	%56 = extractvalue {i32*, i64, i64} %55, 0
	%57 = extractvalue {i32*, i64, i64} %55, 1
	%58 = bitcast i32* %56 to %..rawptr
	%59 = call i64 @.__dynamic_array_append(%..rawptr %48, i64 4, i64 4, %..rawptr %58, i64 %57)
	; ReturnStmt
	%60 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %1, align 8
	ret {i32*, i64, i64,%Allocator} %60
}

define void @.jaze_wgl-13.TryGetExtension(%jaze_wgl-13.TryGetExtensionList* %list, %..rawptr %p, %..string %name) {
decls-0:
	%0 = alloca %jaze_wgl-13.TryGetExtensionList*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %__Map_Header, align 8
	%4 = alloca %__Map_Key, align 8
	store %jaze_wgl-13.TryGetExtensionList* zeroinitializer, %jaze_wgl-13.TryGetExtensionList** %0
		store %jaze_wgl-13.TryGetExtensionList* %list, %jaze_wgl-13.TryGetExtensionList** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%5 = load %jaze_wgl-13.TryGetExtensionList*, %jaze_wgl-13.TryGetExtensionList** %0, align 8
	%6 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %5, i64 0
	%7 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %6, i64 0, i32 0
	%8 = load %..string, %..string* %2, align 8
	%9 = load %..rawptr, %..rawptr* %1, align 8
	store %__Map_Header zeroinitializer, %__Map_Header* %3
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 0
	%11 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %7 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %11, %Raw_Dynamic_Map** %10
	%12 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 1
	store i1 true, i1* %12
	%13 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 2
	store i64 40, i64* %13
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 3
	store i64 8, i64* %14
	%15 = getelementptr inbounds %__Map_Header, %__Map_Header* %3, i64 0, i32 4
	store i64 32, i64* %15
	%16 = load %__Map_Header, %__Map_Header* %3, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %4
	%17 = call i64 @.__default_hash_string(%..string %8)
	%18 = getelementptr inbounds %__Map_Key, %__Map_Key* %4, i64 0, i32 0
	store i64 %17, i64* %18
	%19 = getelementptr inbounds %__Map_Key, %__Map_Key* %4, i64 0, i32 1
	store %..string %8, %..string* %19
	%20 = load %__Map_Key, %__Map_Key* %4, align 8
	%21 = bitcast %..rawptr* %1 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %16, %__Map_Key %20, %..rawptr %21)
	ret void
}

define void @.jaze_wgl-13.LoadExtensions(%..rawptr %GLContext, %..rawptr %WindowDC, %jaze_wgl-13.TryGetExtensionList %list) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %jaze_wgl-13.TryGetExtensionList, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca %..string, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %GLContext, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %WindowDC, %..rawptr* %1
	store %jaze_wgl-13.TryGetExtensionList zeroinitializer, %jaze_wgl-13.TryGetExtensionList* %2
		store %jaze_wgl-13.TryGetExtensionList %list, %jaze_wgl-13.TryGetExtensionList* %2
	; IfStmt
	; SelectorExpr
	%7 = load %..rawptr, %..rawptr* %1, align 8
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = call ccc i32 @wglMakeCurrent(%..rawptr %7, %..rawptr %8)
	%10 = icmp eq i32 %9, 1
	br i1 %10, label %if.then-1, label %if.done-5

if.then-1:
	; DeferStmt
	; RangeStmt
	; val
	store %..rawptr zeroinitializer, %..rawptr* %3
		; key
	store %..string zeroinitializer, %..string* %4
		; SelectorExpr
	%11 = getelementptr inbounds %jaze_wgl-13.TryGetExtensionList, %jaze_wgl-13.TryGetExtensionList* %2, i64 0, i32 0
	%12 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %11, i64 0, i32 1
	%13 = getelementptr inbounds {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}* %12, i64 0, i32 1
	store %..string zeroinitializer, %..string* %5
	store i64 zeroinitializer, i64* %6
	store i64 -1, i64* %6
	br label %for.index.loop-2

for.index.loop-2:
	%14 = load i64, i64* %6, align 8
	%15 = add i64 %14, 1
	store i64 %15, i64* %6
	%16 = load i64, i64* %13, align 8
	%17 = icmp slt i64 %15, %16
	br i1 %17, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%18 = load i64, i64* %6, align 8
	%19 = getelementptr inbounds {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}, {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}}* %11, i64 0, i32 1
	%20 = getelementptr inbounds {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}, {{%__Map_Key, i64, %..rawptr}*, i64, i64,%Allocator}* %19, i64 0, i32 0
	%21 = load {%__Map_Key, i64, %..rawptr}*, {%__Map_Key, i64, %..rawptr}** %20, align 8
	%22 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %21, i64 %18
	%23 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %22, i64 0, i32 2
	%24 = load %..rawptr, %..rawptr* %23, align 8
	%25 = getelementptr inbounds {%__Map_Key, i64, %..rawptr}, {%__Map_Key, i64, %..rawptr}* %22, i64 0, i32 0
	%26 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	%27 = load %..string, %..string* %26, align 8
	store %..string %27, %..string* %5
	%28 = load %..string, %..string* %5, align 8
	store %..rawptr %24, %..rawptr* %3
	store %..string %28, %..string* %4
	%29 = load %..rawptr, %..rawptr* %3, align 8
	%30 = load %..string, %..string* %4, align 8
	call void @.jaze_wgl-13.LoadExtensions.set_proc_address-0(%..rawptr %29, %..string %30)
	br label %for.index.loop-2

for.index.done-4:
	; defer
	; SelectorExpr
	%31 = call ccc i32 @wglMakeCurrent(%..rawptr zeroinitializer, %..rawptr zeroinitializer)
	br label %if.done-5

if.done-5:
	ret void
}

define void @.jaze_wgl-13.LoadExtensions.set_proc_address-0(%..rawptr %p, %..string %name) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..string, align 8
	%2 = alloca i8*, align 8
	%3 = alloca void ()*, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %p, %..rawptr* %0
	store %..string zeroinitializer, %..string* %1
		store %..string %name, %..string* %1
	; txt
	store i8* zeroinitializer, i8** %2
		; SelectorExpr
	%4 = load %..string, %..string* %1, align 8
	%5 = call i8* @.strings-9.new_c_string(%..string %4)
	store i8* %5, i8** %2
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %3
		; SelectorExpr
	%6 = load i8*, i8** %2, align 8
	%7 = call ccc void ()* @wglGetProcAddress(i8* %6)
	store void ()* %7, void ()** %3
	; assert
	%8 = load void ()*, void ()** %3, align 8
	%9 = icmp ne void ()* %8, zeroinitializer
	%10 = icmp eq i1 %9, false
	br i1 %10, label %builtin.assert.err-1, label %builtin.assert.done-2

builtin.assert.err-1:
	call void @.__assert(%..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$158, i64 0, i32 0), i64 46}, i64 155, i64 20, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$159, i64 0, i32 0), i64 10})
	br label %builtin.assert.done-2

builtin.assert.done-2:
	; AssignStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	; cast - cast
	%12 = bitcast %..rawptr %11 to void ()**
	%13 = getelementptr inbounds void ()*, void ()** %12, i64 0
	%14 = load void ()*, void ()** %3, align 8
	store void ()* %14, void ()** %13
	; defer
	; free
	%15 = load i8*, i8** %2, align 8
	%16 = bitcast i8* %15 to %..rawptr
	call void @.free_ptr(%..rawptr %16)
	ret void
}

define void @.jaze_wgl-13.GetInfo(%jaze_gl-12.OpenGLVars_t* %vars, %..rawptr %dc) {
decls-0:
	%0 = alloca %jaze_gl-12.OpenGLVars_t*, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i64, align 8
	%4 = alloca i32, align 4
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca %..string, align 8
	%9 = alloca %..string, align 8
	%10 = alloca {%..string*, i64, i64}, align 8
	%11 = alloca [1 x %..string], align 8
	store %jaze_gl-12.OpenGLVars_t* zeroinitializer, %jaze_gl-12.OpenGLVars_t** %0
		store %jaze_gl-12.OpenGLVars_t* %vars, %jaze_gl-12.OpenGLVars_t** %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %dc, %..rawptr* %1
	; wglExts
	store %..string zeroinitializer, %..string* %2
		; SelectorExpr
	%12 = load i8* (%..rawptr)*, i8* (%..rawptr)** @.jaze_wgl-13.GetExtensionsStringARB, align 8
	%13 = load %..rawptr, %..rawptr* %1, align 8
	%14 = call ccc i8* %12(%..rawptr %13)
	%15 = call %..string @.strings-9.to_odin_string(i8* %14)
	store %..string %15, %..string* %2
	; s
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; RangeStmt
	; r
	store i32 zeroinitializer, i32* %4
		; i
	store i64 zeroinitializer, i64* %5
		%16 = load %..string, %..string* %2, align 8
	%17 = extractvalue %..string %16, 1
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	store i64 zeroinitializer, i64* %7
	store i64 0, i64* %6
	br label %for.string.loop-1

for.string.loop-1:
	%18 = load i64, i64* %7, align 8
	%19 = icmp slt i64 %18, %17
	br i1 %19, label %for.string.body-2, label %for.string.done-5

for.string.body-2:
	%20 = extractvalue %..string %16, 0
	%21 = getelementptr inbounds i8, i8* %20, i64 %18
	%22 = sub i64 %17, %18
	store %..string zeroinitializer, %..string* %8
	%23 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 0
	%24 = getelementptr inbounds %..string, %..string* %8, i64 0, i32 1
	store i8* %21, i8** %23
	store i64 %22, i64* %24
	%25 = load %..string, %..string* %8, align 8
	%26 = call {i32, i64} @.__string_decode_rune(%..string %25)
	%27 = extractvalue {i32, i64} %26, 1
	%28 = add i64 %18, %27
	store i64 %28, i64* %7
	%29 = load i64, i64* %6, align 8
	%30 = extractvalue {i32, i64} %26, 0
	%31 = load i64, i64* %6, align 8
	%32 = add i64 %31, 1
	store i64 %32, i64* %6
	store i32 %30, i32* %4
	store i64 %29, i64* %5
	; IfStmt
	%33 = load i32, i32* %4, align 4
	%34 = icmp eq i32 %33, 32
	br i1 %34, label %if.then-3, label %if.done-4

if.then-3:
	; append
	; SelectorExpr
	%35 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%36 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %35, i64 0
	%37 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %36, i64 0, i32 1
	%38 = bitcast {%..string*, i64, i64,%Allocator}* %37 to %..rawptr
	; SelectorExpr
	%39 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%40 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %39, i64 0
	%41 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %40, i64 0, i32 1
	%42 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %41, align 8
	; SliceExpr
	%43 = load i64, i64* %3, align 8
	%44 = load i64, i64* %5, align 8
	%45 = load %..string, %..string* %2, align 8
	%46 = extractvalue %..string %45, 1
	call void @.__substring_expr_error(%..string {i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.__str$15a, i64 0, i32 0), i64 46}, i64 170, i64 47, i64 %43, i64 %44)
	%47 = extractvalue %..string %45, 0
	%48 = getelementptr inbounds i8, i8* %47, i64 %43
	%49 = sub i64 %44, %43
	store %..string zeroinitializer, %..string* %9
	%50 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %48, i8** %50
	%51 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %49, i64* %51
	%52 = load %..string, %..string* %9, align 8
	; variadic call argument generation
	store {%..string*, i64, i64} zeroinitializer, {%..string*, i64, i64}* %10
	store [1 x %..string] zeroinitializer, [1 x %..string]* %11
	%53 = getelementptr inbounds [1 x %..string], [1 x %..string]* %11, i64 0, i32 0
	store %..string %52, %..string* %53
	%54 = getelementptr inbounds [1 x %..string], [1 x %..string]* %11, i64 0, i32 0
	%55 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %10, i64 0, i32 0
	store %..string* %54, %..string** %55
	%56 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %10, i64 0, i32 1
	store i64 1, i64* %56
	%57 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %10, i64 0, i32 2
	store i64 1, i64* %57
	%58 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %10, align 8
	%59 = extractvalue {%..string*, i64, i64} %58, 0
	%60 = extractvalue {%..string*, i64, i64} %58, 1
	%61 = bitcast %..string* %59 to %..rawptr
	%62 = call i64 @.__dynamic_array_append(%..rawptr %38, i64 16, i64 8, %..rawptr %61, i64 %60)
	; AssignStmt
	; SelectorExpr
	%63 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%64 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %63, i64 0
	%65 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %64, i64 0, i32 13
	%66 = load i32, i32* %65, align 4
	%67 = add i32 %66, 1
	store i32 %67, i32* %65
	; AssignStmt
	%68 = load i64, i64* %5, align 8
	%69 = add i64 %68, 1
	store i64 %69, i64* %3
	br label %if.done-4

if.done-4:
	br label %for.string.loop-1

for.string.done-5:
	ret void
}

define void @.jaze_debug_windows-14.OpenGLExtensions(%..string %name, {%..string*, i64, i64,%Allocator} %extensions, i1* %show) {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca {%..string*, i64, i64,%Allocator}, align 8
	%2 = alloca i1*, align 8
	%3 = alloca %..string, align 8
	%4 = alloca i64, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	store %..string zeroinitializer, %..string* %0
		store %..string %name, %..string* %0
	store {%..string*, i64, i64,%Allocator} zeroinitializer, {%..string*, i64, i64,%Allocator}* %1
		store {%..string*, i64, i64,%Allocator} %extensions, {%..string*, i64, i64,%Allocator}* %1
	store i1* zeroinitializer, i1** %2
		store i1* %show, i1** %2
	; SelectorExpr
	%6 = load %..string, %..string* %0, align 8
	%7 = load i1*, i1** %2, align 8
	%8 = call i1 @.imgui-8.Begin(%..string %6, i1* %7, i32 160)
	; RangeStmt
	; ext
	store %..string zeroinitializer, %..string* %3
		%9 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %1, i64 0, i32 1
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-1

for.index.loop-1:
	%10 = load i64, i64* %4, align 8
	%11 = add i64 %10, 1
	store i64 %11, i64* %4
	%12 = load i64, i64* %9, align 8
	%13 = icmp slt i64 %11, %12
	br i1 %13, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%14 = load i64, i64* %4, align 8
	%15 = getelementptr inbounds {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %1, i64 0, i32 0
	%16 = load %..string*, %..string** %15, align 8
	%17 = getelementptr inbounds %..string, %..string* %16, i64 %14
	%18 = load %..string, %..string* %17, align 8
	store %..string %18, %..string* %3
	; SelectorExpr
	%19 = load %..string, %..string* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	%20 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-8.Text(%..string %19, {%..any*, i64, i64} %20)
	br label %for.index.loop-1

for.index.done-3:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-14.OpenGLTextureOverview(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca i32, align 4
	%2 = alloca i64, align 8
	%3 = alloca %..any, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %__Map_Header, align 8
	%7 = alloca %__Map_Key, align 8
	%8 = alloca i1, align 1
	%9 = alloca {i1, i1}, align 1
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i1, i1}, align 1
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca %__Map_Header, align 8
	%17 = alloca %__Map_Key, align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%18 = load i1*, i1** %0, align 8
	%19 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$15b, i64 0, i32 0), i64 15}, i1* %18, i32 160)
	; RangeStmt
	; id
	store i32 zeroinitializer, i32* %1
		; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 1
	%21 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %20, i64 0, i32 1
	store i64 zeroinitializer, i64* %2
	store i64 -1, i64* %2
	br label %for.index.loop-1

for.index.loop-1:
	%22 = load i64, i64* %2, align 8
	%23 = add i64 %22, 1
	store i64 %23, i64* %2
	%24 = load i64, i64* %21, align 8
	%25 = icmp slt i64 %23, %24
	br i1 %25, label %for.index.body-2, label %for.index.done-5

for.index.body-2:
	%26 = load i64, i64* %2, align 8
	%27 = getelementptr inbounds {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %20, i64 0, i32 0
	%28 = load i32*, i32** %27, align 8
	%29 = getelementptr inbounds i32, i32* %28, i64 %26
	%30 = load i32, i32* %29, align 4
	store i32 %30, i32* %1
	; SelectorExpr
	%31 = load i32, i32* %1, align 4
	; cast - cast
	%32 = bitcast i32 %31 to i32
	call ccc void @igPushIdInt(i32 %32)
	; SelectorExpr
	%33 = load i32, i32* %1, align 4
	store %..any zeroinitializer, %..any* %3
	%34 = bitcast i32* %1 to %..rawptr
	%35 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 143
	%36 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%37 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %35, %Type_Info** %36
	store %..rawptr %34, %..rawptr* %37
	%38 = load %..any, %..any* %3, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%39 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %38, %..any* %39
	%40 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%41 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %40, %..any** %41
	%42 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %42
	%43 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %43
	%44 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$15c, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %44)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%45 = call i1 @.imgui-8.Button(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$15d, i64 0, i32 0), i64 4}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %45, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	%46 = load i32, i32* %1, align 4
	store i32 %46, i32* @.jaze_debug_windows-14.CurrentViewTexture
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %6
	%47 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 0
	%48 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %48, %Raw_Dynamic_Map** %47
	%49 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 1
	store i1 true, i1* %49
	%50 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 2
	store i64 40, i64* %50
	%51 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 3
	store i64 8, i64* %51
	%52 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 4
	store i64 32, i64* %52
	%53 = load %__Map_Header, %__Map_Header* %6, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %7
	%54 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 0
	store i64 -2244582010140912990, i64* %54
	%55 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$15e, i64 0, i32 0), i64 13}, %..string* %55
	%56 = load %__Map_Key, %__Map_Key* %7, align 8
	store i1 zeroinitializer, i1* %8
	store i1 true, i1* %8
	%57 = bitcast i1* %8 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %53, %__Map_Key %56, %..rawptr %57)
	br label %if.done-4

if.done-4:
	; SelectorExpr
	call ccc void @igPopId()
	br label %for.index.loop-1

for.index.done-5:
	; SelectorExpr
	call ccc void @igEnd()
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %9
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%58 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%59 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %59, %Raw_Dynamic_Map** %58
	%60 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %60
	%61 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %61
	%62 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %62
	%63 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %63
	%64 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%65 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 -2244582010140912990, i64* %65
	%66 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$15f, i64 0, i32 0), i64 13}, %..string* %66
	%67 = load %__Map_Key, %__Map_Key* %11, align 8
	%68 = call %..rawptr @.__dynamic_map_get(%__Map_Header %64, %__Map_Key %67)
	%69 = icmp ne %..rawptr %68, null
	%70 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 1
	store i1 %69, i1* %70
	br i1 %69, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%71 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 0
	%72 = bitcast %..rawptr %68 to i1*
	%73 = load i1, i1* %72, align 1
	store i1 %73, i1* %71
	br label %map.get.done-7

map.get.done-7:
	%74 = getelementptr inbounds {i1, i1}, {i1, i1}* %9, i64 0, i32 0
	%75 = load i1, i1* %74, align 1
	%76 = icmp eq i1 %75, true
	br i1 %76, label %if.then-8, label %if.done-11

if.then-8:
	; b
	store i1 zeroinitializer, i1* %12
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %13
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%77 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%78 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %78, %Raw_Dynamic_Map** %77
	%79 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %79
	%80 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %80
	%81 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %81
	%82 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %82
	%83 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%84 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 -2244582010140912990, i64* %84
	%85 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$160, i64 0, i32 0), i64 13}, %..string* %85
	%86 = load %__Map_Key, %__Map_Key* %15, align 8
	%87 = call %..rawptr @.__dynamic_map_get(%__Map_Header %83, %__Map_Key %86)
	%88 = icmp ne %..rawptr %87, null
	%89 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 1
	store i1 %88, i1* %89
	br i1 %88, label %map.get.then-9, label %map.get.done-10

map.get.then-9:
	%90 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%91 = bitcast %..rawptr %87 to i1*
	%92 = load i1, i1* %91, align 1
	store i1 %92, i1* %90
	br label %map.get.done-10

map.get.done-10:
	%93 = getelementptr inbounds {i1, i1}, {i1, i1}* %13, i64 0, i32 0
	%94 = load i1, i1* %93, align 1
	store i1 %94, i1* %12
	%95 = load i32, i32* @.jaze_debug_windows-14.CurrentViewTexture, align 4
	%96 = getelementptr inbounds i1, i1* %12, i64 0
	call void @.jaze_debug_windows-14.OpenGLTextureView(i32 %95, i1* %96)
	; AssignStmt
	; IndexExpr
	%97 = load i1, i1* %12, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	%98 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 0
	%99 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %99, %Raw_Dynamic_Map** %98
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 1
	store i1 true, i1* %100
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 2
	store i64 40, i64* %101
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 3
	store i64 8, i64* %102
	%103 = getelementptr inbounds %__Map_Header, %__Map_Header* %16, i64 0, i32 4
	store i64 32, i64* %103
	%104 = load %__Map_Header, %__Map_Header* %16, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %17
	%105 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 0
	store i64 -2244582010140912990, i64* %105
	%106 = getelementptr inbounds %__Map_Key, %__Map_Key* %17, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$161, i64 0, i32 0), i64 13}, %..string* %106
	%107 = load %__Map_Key, %__Map_Key* %17, align 8
	%108 = bitcast i1* %12 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %104, %__Map_Key %107, %..rawptr %108)
	br label %if.done-11

if.done-11:
	ret void
}

define void @.jaze_debug_windows-14.OpenGLTextureView(i32 %textureId, i1* %show) {
decls-0:
	%0 = alloca i32, align 4
	%1 = alloca i1*, align 8
	store i32 zeroinitializer, i32* %0
		store i32 %textureId, i32* %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%2 = load i1*, i1** %1, align 8
	%3 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$162, i64 0, i32 0), i64 12}, i1* %2, i32 160)
	; SelectorExpr
	call void @.imgui-8.Image(%..rawptr inttoptr (i64 1 to %..rawptr), %imgui-8.Vec2 {float 0x4059000000000000, float 0x4059000000000000}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, %imgui-8.Vec2 {float 0x3ff0000000000000, float 0x3ff0000000000000}, %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000}, %imgui-8.Vec4 {float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000})
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-14.OpenGLInfo(%jaze_gl-12.OpenGLVars_t* %vars, i1* %show) {
decls-0:
	%0 = alloca %jaze_gl-12.OpenGLVars_t*, align 8
	%1 = alloca i1*, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca %..any, align 8
	%4 = alloca %..any, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	%6 = alloca [2 x %..any], align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [2 x %..any], align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [1 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca {%..any*, i64, i64}, align 8
	%16 = alloca [1 x %..any], align 8
	%17 = alloca %..any, align 8
	%18 = alloca {%..any*, i64, i64}, align 8
	%19 = alloca [1 x %..any], align 8
	%20 = alloca %..any, align 8
	%21 = alloca {%..any*, i64, i64}, align 8
	%22 = alloca [1 x %..any], align 8
	%23 = alloca %..any, align 8
	%24 = alloca {%..any*, i64, i64}, align 8
	%25 = alloca [1 x %..any], align 8
	%26 = alloca %..any, align 8
	%27 = alloca {%..any*, i64, i64}, align 8
	%28 = alloca [1 x %..any], align 8
	%29 = alloca %__Map_Header, align 8
	%30 = alloca %__Map_Key, align 8
	%31 = alloca i1, align 1
	%32 = alloca %..any, align 8
	%33 = alloca {%..any*, i64, i64}, align 8
	%34 = alloca [1 x %..any], align 8
	%35 = alloca %__Map_Header, align 8
	%36 = alloca %__Map_Key, align 8
	%37 = alloca i1, align 1
	%38 = alloca %..any, align 8
	%39 = alloca %..any, align 8
	%40 = alloca {%..any*, i64, i64}, align 8
	%41 = alloca [2 x %..any], align 8
	%42 = alloca %..string, align 8
	%43 = alloca %jaze_gl-12.DebugFunctionLoadStatus, align 8
	%44 = alloca i64, align 8
	%45 = alloca {%..any*, i64, i64}, align 8
	%46 = alloca %..any, align 8
	%47 = alloca %..any, align 8
	%48 = alloca {%..any*, i64, i64}, align 8
	%49 = alloca [2 x %..any], align 8
	%50 = alloca %Type_Info.Procedure*, align 8
	%51 = alloca i1, align 1
	%52 = alloca {%Type_Info.Procedure*, i1}, align 8
	%53 = alloca %Type_Info.Tuple*, align 8
	%54 = alloca i1, align 1
	%55 = alloca {%Type_Info.Tuple*, i1}, align 8
	%56 = alloca %..any, align 8
	%57 = alloca {%..any*, i64, i64}, align 8
	%58 = alloca [1 x %..any], align 8
	%59 = alloca %..any, align 8
	%60 = alloca {%..any*, i64, i64}, align 8
	%61 = alloca [1 x %..any], align 8
	%62 = alloca %..any, align 8
	%63 = alloca i64, align 8
	%64 = alloca {%..any*, i64, i64}, align 8
	%65 = alloca [1 x %..any], align 8
	%66 = alloca %..string, align 8
	%67 = alloca i64, align 8
	%68 = alloca i64, align 8
	%69 = alloca {%..any*, i64, i64}, align 8
	%70 = alloca %..any, align 8
	%71 = alloca {%..any*, i64, i64}, align 8
	%72 = alloca [1 x %..any], align 8
	%73 = alloca %..any, align 8
	%74 = alloca i64, align 8
	%75 = alloca {%..any*, i64, i64}, align 8
	%76 = alloca [1 x %..any], align 8
	%77 = alloca %__Map_Header, align 8
	%78 = alloca %__Map_Key, align 8
	%79 = alloca i1, align 1
	%80 = alloca {i1, i1}, align 1
	%81 = alloca %__Map_Header, align 8
	%82 = alloca %__Map_Key, align 8
	%83 = alloca i1, align 1
	%84 = alloca {i1, i1}, align 1
	%85 = alloca %__Map_Header, align 8
	%86 = alloca %__Map_Key, align 8
	%87 = alloca %__Map_Header, align 8
	%88 = alloca %__Map_Key, align 8
	%89 = alloca {i1, i1}, align 1
	%90 = alloca %__Map_Header, align 8
	%91 = alloca %__Map_Key, align 8
	%92 = alloca i1, align 1
	%93 = alloca {i1, i1}, align 1
	%94 = alloca %__Map_Header, align 8
	%95 = alloca %__Map_Key, align 8
	%96 = alloca %__Map_Header, align 8
	%97 = alloca %__Map_Key, align 8
	%98 = alloca {i1, i1}, align 1
	%99 = alloca %__Map_Header, align 8
	%100 = alloca %__Map_Key, align 8
	%101 = alloca i1, align 1
	%102 = alloca {i1, i1}, align 1
	%103 = alloca %__Map_Header, align 8
	%104 = alloca %__Map_Key, align 8
	%105 = alloca %__Map_Header, align 8
	%106 = alloca %__Map_Key, align 8
	store %jaze_gl-12.OpenGLVars_t* zeroinitializer, %jaze_gl-12.OpenGLVars_t** %0
		store %jaze_gl-12.OpenGLVars_t* %vars, %jaze_gl-12.OpenGLVars_t** %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%107 = load i1*, i1** %1, align 8
	%108 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$163, i64 0, i32 0), i64 11}, i1* %107, i32 160)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	%109 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$164, i64 0, i32 0), i64 9}, {%..any*, i64, i64} %109)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	%110 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%111 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %110, i64 0
	%112 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %111, i64 0, i32 7
	%113 = load i32, i32* %112, align 4
	; SelectorExpr
	%114 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%115 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %114, i64 0
	%116 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %115, i64 0, i32 9
	%117 = load i32, i32* %116, align 4
	store %..any zeroinitializer, %..any* %3
	%118 = bitcast i32* %112 to %..rawptr
	%119 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%120 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	%121 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %119, %Type_Info** %120
	store %..rawptr %118, %..rawptr* %121
	%122 = load %..any, %..any* %3, align 8
	store %..any zeroinitializer, %..any* %4
	%123 = bitcast i32* %116 to %..rawptr
	%124 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%125 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%126 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %124, %Type_Info** %125
	store %..rawptr %123, %..rawptr* %126
	%127 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	store [2 x %..any] zeroinitializer, [2 x %..any]* %6
	%128 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	store %..any %122, %..any* %128
	%129 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 1
	store %..any %127, %..any* %129
	%130 = getelementptr inbounds [2 x %..any], [2 x %..any]* %6, i64 0, i32 0
	%131 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 0
	store %..any* %130, %..any** %131
	%132 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 1
	store i64 2, i64* %132
	%133 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 2
	store i64 2, i64* %133
	%134 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$165, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %134)
	; SelectorExpr
	; SelectorExpr
	%135 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%136 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %135, i64 0
	%137 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %136, i64 0, i32 8
	%138 = load i32, i32* %137, align 4
	; SelectorExpr
	%139 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%140 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %139, i64 0
	%141 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %140, i64 0, i32 8
	%142 = load i32, i32* %141, align 4
	store %..any zeroinitializer, %..any* %7
	%143 = bitcast i32* %137 to %..rawptr
	%144 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%145 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%146 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %144, %Type_Info** %145
	store %..rawptr %143, %..rawptr* %146
	%147 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%148 = bitcast i32* %141 to %..rawptr
	%149 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%150 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%151 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %149, %Type_Info** %150
	store %..rawptr %148, %..rawptr* %151
	%152 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [2 x %..any] zeroinitializer, [2 x %..any]* %10
	%153 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	store %..any %147, %..any* %153
	%154 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 1
	store %..any %152, %..any* %154
	%155 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	%156 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %155, %..any** %156
	%157 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 2, i64* %157
	%158 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 2, i64* %158
	%159 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$166, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %159)
	; SelectorExpr
	; SelectorExpr
	%160 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%161 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %160, i64 0
	%162 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %161, i64 0, i32 3
	%163 = load %..string, %..string* %162, align 8
	store %..any zeroinitializer, %..any* %11
	%164 = bitcast %..string* %162 to %..rawptr
	%165 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%166 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%167 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %165, %Type_Info** %166
	store %..rawptr %164, %..rawptr* %167
	%168 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [1 x %..any] zeroinitializer, [1 x %..any]* %13
	%169 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	store %..any %168, %..any* %169
	%170 = getelementptr inbounds [1 x %..any], [1 x %..any]* %13, i64 0, i32 0
	%171 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %170, %..any** %171
	%172 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 1, i64* %172
	%173 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 1, i64* %173
	%174 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$167, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %174)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%175 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 2
	%176 = load i64, i64* %175, align 8
	store %..any zeroinitializer, %..any* %14
	%177 = bitcast i64* %175 to %..rawptr
	%178 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%179 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%180 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %178, %Type_Info** %179
	store %..rawptr %177, %..rawptr* %180
	%181 = load %..any, %..any* %14, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %15
	store [1 x %..any] zeroinitializer, [1 x %..any]* %16
	%182 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	store %..any %181, %..any* %182
	%183 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	%184 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 0
	store %..any* %183, %..any** %184
	%185 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 1
	store i64 1, i64* %185
	%186 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 2
	store i64 1, i64* %186
	%187 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %15, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$168, i64 0, i32 0), i64 16}, {%..any*, i64, i64} %187)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; SelectorExpr
	%188 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%189 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %188, i64 0
	%190 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %189, i64 0, i32 4
	%191 = load %..string, %..string* %190, align 8
	store %..any zeroinitializer, %..any* %17
	%192 = bitcast %..string* %190 to %..rawptr
	%193 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%194 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%195 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %193, %Type_Info** %194
	store %..rawptr %192, %..rawptr* %195
	%196 = load %..any, %..any* %17, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %18
	store [1 x %..any] zeroinitializer, [1 x %..any]* %19
	%197 = getelementptr inbounds [1 x %..any], [1 x %..any]* %19, i64 0, i32 0
	store %..any %196, %..any* %197
	%198 = getelementptr inbounds [1 x %..any], [1 x %..any]* %19, i64 0, i32 0
	%199 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 0
	store %..any* %198, %..any** %199
	%200 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 1
	store i64 1, i64* %200
	%201 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %18, i64 0, i32 2
	store i64 1, i64* %201
	%202 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %18, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$169, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %202)
	; SelectorExpr
	; SelectorExpr
	%203 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%204 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %203, i64 0
	%205 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %204, i64 0, i32 5
	%206 = load %..string, %..string* %205, align 8
	store %..any zeroinitializer, %..any* %20
	%207 = bitcast %..string* %205 to %..rawptr
	%208 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%209 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 0
	%210 = getelementptr inbounds %..any, %..any* %20, i64 0, i32 1
	store %Type_Info* %208, %Type_Info** %209
	store %..rawptr %207, %..rawptr* %210
	%211 = load %..any, %..any* %20, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %21
	store [1 x %..any] zeroinitializer, [1 x %..any]* %22
	%212 = getelementptr inbounds [1 x %..any], [1 x %..any]* %22, i64 0, i32 0
	store %..any %211, %..any* %212
	%213 = getelementptr inbounds [1 x %..any], [1 x %..any]* %22, i64 0, i32 0
	%214 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 0
	store %..any* %213, %..any** %214
	%215 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 1
	store i64 1, i64* %215
	%216 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %21, i64 0, i32 2
	store i64 1, i64* %216
	%217 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %21, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$16a, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %217)
	; SelectorExpr
	; SelectorExpr
	%218 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%219 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %218, i64 0
	%220 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %219, i64 0, i32 11
	%221 = load i32, i32* %220, align 4
	store %..any zeroinitializer, %..any* %23
	%222 = bitcast i32* %220 to %..rawptr
	%223 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%224 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 0
	%225 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 1
	store %Type_Info* %223, %Type_Info** %224
	store %..rawptr %222, %..rawptr* %225
	%226 = load %..any, %..any* %23, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %24
	store [1 x %..any] zeroinitializer, [1 x %..any]* %25
	%227 = getelementptr inbounds [1 x %..any], [1 x %..any]* %25, i64 0, i32 0
	store %..any %226, %..any* %227
	%228 = getelementptr inbounds [1 x %..any], [1 x %..any]* %25, i64 0, i32 0
	%229 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 0
	store %..any* %228, %..any** %229
	%230 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 1
	store i64 1, i64* %230
	%231 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %24, i64 0, i32 2
	store i64 1, i64* %231
	%232 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %24, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$16b, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %232)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; SelectorExpr
	%233 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%234 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %233, i64 0
	%235 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %234, i64 0, i32 12
	%236 = load i32, i32* %235, align 4
	store %..any zeroinitializer, %..any* %26
	%237 = bitcast i32* %235 to %..rawptr
	%238 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%239 = getelementptr inbounds %..any, %..any* %26, i64 0, i32 0
	%240 = getelementptr inbounds %..any, %..any* %26, i64 0, i32 1
	store %Type_Info* %238, %Type_Info** %239
	store %..rawptr %237, %..rawptr* %240
	%241 = load %..any, %..any* %26, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %27
	store [1 x %..any] zeroinitializer, [1 x %..any]* %28
	%242 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	store %..any %241, %..any* %242
	%243 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	%244 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 0
	store %..any* %243, %..any** %244
	%245 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 1
	store i64 1, i64* %245
	%246 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 2
	store i64 1, i64* %246
	%247 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %27, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$16c, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %247)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%248 = call i1 @.imgui-8.Button(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$16d, i64 0, i32 0), i64 9}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %248, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %29
	%249 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 0
	%250 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %250, %Raw_Dynamic_Map** %249
	%251 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 1
	store i1 true, i1* %251
	%252 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 2
	store i64 40, i64* %252
	%253 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 3
	store i64 8, i64* %253
	%254 = getelementptr inbounds %__Map_Header, %__Map_Header* %29, i64 0, i32 4
	store i64 32, i64* %254
	%255 = load %__Map_Header, %__Map_Header* %29, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %30
	%256 = getelementptr inbounds %__Map_Key, %__Map_Key* %30, i64 0, i32 0
	store i64 9087275691730913177, i64* %256
	%257 = getelementptr inbounds %__Map_Key, %__Map_Key* %30, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$16e, i64 0, i32 0), i64 20}, %..string* %257
	%258 = load %__Map_Key, %__Map_Key* %30, align 8
	store i1 zeroinitializer, i1* %31
	store i1 true, i1* %31
	%259 = bitcast i1* %31 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %255, %__Map_Key %258, %..rawptr %259)
	br label %if.done-2

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%260 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%261 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %260, i64 0
	%262 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %261, i64 0, i32 13
	%263 = load i32, i32* %262, align 4
	store %..any zeroinitializer, %..any* %32
	%264 = bitcast i32* %262 to %..rawptr
	%265 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%266 = getelementptr inbounds %..any, %..any* %32, i64 0, i32 0
	%267 = getelementptr inbounds %..any, %..any* %32, i64 0, i32 1
	store %Type_Info* %265, %Type_Info** %266
	store %..rawptr %264, %..rawptr* %267
	%268 = load %..any, %..any* %32, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %33
	store [1 x %..any] zeroinitializer, [1 x %..any]* %34
	%269 = getelementptr inbounds [1 x %..any], [1 x %..any]* %34, i64 0, i32 0
	store %..any %268, %..any* %269
	%270 = getelementptr inbounds [1 x %..any], [1 x %..any]* %34, i64 0, i32 0
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %33, i64 0, i32 0
	store %..any* %270, %..any** %271
	%272 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %33, i64 0, i32 1
	store i64 1, i64* %272
	%273 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %33, i64 0, i32 2
	store i64 1, i64* %273
	%274 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %33, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.__str$16f, i64 0, i32 0), i64 30}, {%..any*, i64, i64} %274)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%275 = call i1 @.imgui-8.Button(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$170, i64 0, i32 0), i64 9}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %275, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %35
	%276 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 0
	%277 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %277, %Raw_Dynamic_Map** %276
	%278 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 1
	store i1 true, i1* %278
	%279 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 2
	store i64 40, i64* %279
	%280 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 3
	store i64 8, i64* %280
	%281 = getelementptr inbounds %__Map_Header, %__Map_Header* %35, i64 0, i32 4
	store i64 32, i64* %281
	%282 = load %__Map_Header, %__Map_Header* %35, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %36
	%283 = getelementptr inbounds %__Map_Key, %__Map_Key* %36, i64 0, i32 0
	store i64 1665422548027325, i64* %283
	%284 = getelementptr inbounds %__Map_Key, %__Map_Key* %36, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$171, i64 0, i32 0), i64 23}, %..string* %284
	%285 = load %__Map_Key, %__Map_Key* %36, align 8
	store i1 zeroinitializer, i1* %37
	store i1 true, i1* %37
	%286 = bitcast i1* %37 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %282, %__Map_Key %285, %..rawptr %286)
	br label %if.done-4

if.done-4:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%287 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 4
	%288 = load i32, i32* %287, align 4
	; SelectorExpr
	; SelectorExpr
	%289 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 3
	%290 = load i32, i32* %289, align 4
	store %..any zeroinitializer, %..any* %38
	%291 = bitcast i32* %287 to %..rawptr
	%292 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%293 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 0
	%294 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	store %Type_Info* %292, %Type_Info** %293
	store %..rawptr %291, %..rawptr* %294
	%295 = load %..any, %..any* %38, align 8
	store %..any zeroinitializer, %..any* %39
	%296 = bitcast i32* %289 to %..rawptr
	%297 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%298 = getelementptr inbounds %..any, %..any* %39, i64 0, i32 0
	%299 = getelementptr inbounds %..any, %..any* %39, i64 0, i32 1
	store %Type_Info* %297, %Type_Info** %298
	store %..rawptr %296, %..rawptr* %299
	%300 = load %..any, %..any* %39, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %40
	store [2 x %..any] zeroinitializer, [2 x %..any]* %41
	%301 = getelementptr inbounds [2 x %..any], [2 x %..any]* %41, i64 0, i32 0
	store %..any %295, %..any* %301
	%302 = getelementptr inbounds [2 x %..any], [2 x %..any]* %41, i64 0, i32 1
	store %..any %300, %..any* %302
	%303 = getelementptr inbounds [2 x %..any], [2 x %..any]* %41, i64 0, i32 0
	%304 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 0
	store %..any* %303, %..any** %304
	%305 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 1
	store i64 2, i64* %305
	%306 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 2
	store i64 2, i64* %306
	%307 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %40, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.__str$172, i64 0, i32 0), i64 33}, {%..any*, i64, i64} %307)
	; SelectorExpr
	call ccc void @igSeparator()
	; IfStmt
	; SelectorExpr
	%308 = call i1 @.imgui-8.CollapsingHeader(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$173, i64 0, i32 0), i64 16}, i32 0)
	br i1 %308, label %if.then-5, label %if.done-21

if.then-5:
	; SelectorExpr
	%309 = call i1 @.imgui-8.BeginChild(%..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$174, i64 0, i32 0), i64 20}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, i1 true, i32 0)
	; SelectorExpr
	call ccc void @igColumns(i32 2, i8* zeroinitializer, i1 false)
	; suc
	store %..string zeroinitializer, %..string* %42
		; RangeStmt
	; status
	store %jaze_gl-12.DebugFunctionLoadStatus zeroinitializer, %jaze_gl-12.DebugFunctionLoadStatus* %43
		; SelectorExpr
	; SelectorExpr
	%310 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 0
	%311 = getelementptr inbounds {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %310, i64 0, i32 1
	store i64 zeroinitializer, i64* %44
	store i64 -1, i64* %44
	br label %for.index.loop-6

for.index.loop-6:
	%312 = load i64, i64* %44, align 8
	%313 = add i64 %312, 1
	store i64 %313, i64* %44
	%314 = load i64, i64* %311, align 8
	%315 = icmp slt i64 %313, %314
	br i1 %315, label %for.index.body-7, label %for.index.done-20

for.index.body-7:
	%316 = load i64, i64* %44, align 8
	%317 = getelementptr inbounds {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_gl-12.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %310, i64 0, i32 0
	%318 = load %jaze_gl-12.DebugFunctionLoadStatus*, %jaze_gl-12.DebugFunctionLoadStatus** %317, align 8
	%319 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %318, i64 %316
	%320 = load %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %319, align 8
	store %jaze_gl-12.DebugFunctionLoadStatus %320, %jaze_gl-12.DebugFunctionLoadStatus* %43
	; SelectorExpr
	; SelectorExpr
	%321 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %43, i64 0, i32 0
	%322 = load %..string, %..string* %321, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %45
	%323 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %45, align 8
	call void @.imgui-8.Text(%..string %322, {%..any*, i64, i64} %323)
	; IfStmt
	; SelectorExpr
	%324 = call ccc i1 @igIsItemHovered()
	br i1 %324, label %if.then-8, label %if.done-16

if.then-8:
	; SelectorExpr
	call ccc void @igBeginTooltip()
	; SelectorExpr
	call ccc void @igPushTextWrapPos(float 0x407c200000000000)
	; SelectorExpr
	; SelectorExpr
	%325 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %43, i64 0, i32 0
	%326 = load %..string, %..string* %325, align 8
	; SelectorExpr
	%327 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %43, i64 0, i32 1
	%328 = load i64, i64* %327, align 8
	store %..any zeroinitializer, %..any* %46
	%329 = bitcast %..string* %325 to %..rawptr
	%330 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%331 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 0
	%332 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 1
	store %Type_Info* %330, %Type_Info** %331
	store %..rawptr %329, %..rawptr* %332
	%333 = load %..any, %..any* %46, align 8
	store %..any zeroinitializer, %..any* %47
	%334 = bitcast i64* %327 to %..rawptr
	%335 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%336 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 0
	%337 = getelementptr inbounds %..any, %..any* %47, i64 0, i32 1
	store %Type_Info* %335, %Type_Info** %336
	store %..rawptr %334, %..rawptr* %337
	%338 = load %..any, %..any* %47, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %48
	store [2 x %..any] zeroinitializer, [2 x %..any]* %49
	%339 = getelementptr inbounds [2 x %..any], [2 x %..any]* %49, i64 0, i32 0
	store %..any %333, %..any* %339
	%340 = getelementptr inbounds [2 x %..any], [2 x %..any]* %49, i64 0, i32 1
	store %..any %338, %..any* %340
	%341 = getelementptr inbounds [2 x %..any], [2 x %..any]* %49, i64 0, i32 0
	%342 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 0
	store %..any* %341, %..any** %342
	%343 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 1
	store i64 2, i64* %343
	%344 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 2
	store i64 2, i64* %344
	%345 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %48, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$175, i64 0, i32 0), i64 9}, {%..any*, i64, i64} %345)
	; test1
	store %Type_Info.Procedure* zeroinitializer, %Type_Info.Procedure** %50
		; ok1
	store i1 zeroinitializer, i1* %51
		; SelectorExpr
	%346 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %43, i64 0, i32 2
	%347 = load %Type_Info*, %Type_Info** %346, align 8
	; cast - union_cast
	store {%Type_Info.Procedure*, i1} zeroinitializer, {%Type_Info.Procedure*, i1}* %52
	%348 = getelementptr inbounds %Type_Info, %Type_Info* %347, i64 0, i32 2 ; UnionTagPtr
	%349 = load i64, i64* %348, align 8
	%350 = icmp eq i64 %349, 10
	br i1 %350, label %union_cast.ok-9, label %union_cast.end-10

union_cast.ok-9:
	%351 = getelementptr inbounds {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %52, i64 0, i32 0
	%352 = getelementptr inbounds {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %52, i64 0, i32 1
	%353 = bitcast %Type_Info* %347 to %Type_Info.Procedure*
	store %Type_Info.Procedure* %353, %Type_Info.Procedure** %351
	store i1 true, i1* %352
	br label %union_cast.end-10

union_cast.end-10:
	%354 = load {%Type_Info.Procedure*, i1}, {%Type_Info.Procedure*, i1}* %52, align 8
	%355 = extractvalue {%Type_Info.Procedure*, i1} %354, 0
	%356 = extractvalue {%Type_Info.Procedure*, i1} %354, 1
	store %Type_Info.Procedure* %355, %Type_Info.Procedure** %50
	store i1 %356, i1* %51
	; test2
	store %Type_Info.Tuple* zeroinitializer, %Type_Info.Tuple** %53
		; ok2
	store i1 zeroinitializer, i1* %54
		; SelectorExpr
	%357 = load %Type_Info.Procedure*, %Type_Info.Procedure** %50, align 8
	%358 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %357, i64 0
	%359 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %358, i64 0, i32 0
	%360 = load %Type_Info*, %Type_Info** %359, align 8
	; cast - union_cast
	store {%Type_Info.Tuple*, i1} zeroinitializer, {%Type_Info.Tuple*, i1}* %55
	%361 = getelementptr inbounds %Type_Info, %Type_Info* %360, i64 0, i32 2 ; UnionTagPtr
	%362 = load i64, i64* %361, align 8
	%363 = icmp eq i64 %362, 15
	br i1 %363, label %union_cast.ok-11, label %union_cast.end-12

union_cast.ok-11:
	%364 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %55, i64 0, i32 0
	%365 = getelementptr inbounds {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %55, i64 0, i32 1
	%366 = bitcast %Type_Info* %360 to %Type_Info.Tuple*
	store %Type_Info.Tuple* %366, %Type_Info.Tuple** %364
	store i1 true, i1* %365
	br label %union_cast.end-12

union_cast.end-12:
	%367 = load {%Type_Info.Tuple*, i1}, {%Type_Info.Tuple*, i1}* %55, align 8
	%368 = extractvalue {%Type_Info.Tuple*, i1} %367, 0
	%369 = extractvalue {%Type_Info.Tuple*, i1} %367, 1
	store %Type_Info.Tuple* %368, %Type_Info.Tuple** %53
	store i1 %369, i1* %54
	; SelectorExpr
	%370 = load i1, i1* %51, align 1
	store %..any zeroinitializer, %..any* %56
	%371 = bitcast i1* %51 to %..rawptr
	%372 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%373 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 0
	%374 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 1
	store %Type_Info* %372, %Type_Info** %373
	store %..rawptr %371, %..rawptr* %374
	%375 = load %..any, %..any* %56, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %57
	store [1 x %..any] zeroinitializer, [1 x %..any]* %58
	%376 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	store %..any %375, %..any* %376
	%377 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	%378 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 0
	store %..any* %377, %..any** %378
	%379 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 1
	store i64 1, i64* %379
	%380 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 2
	store i64 1, i64* %380
	%381 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %57, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$176, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %381)
	; SelectorExpr
	%382 = load i1, i1* %54, align 1
	store %..any zeroinitializer, %..any* %59
	%383 = bitcast i1* %54 to %..rawptr
	%384 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%385 = getelementptr inbounds %..any, %..any* %59, i64 0, i32 0
	%386 = getelementptr inbounds %..any, %..any* %59, i64 0, i32 1
	store %Type_Info* %384, %Type_Info** %385
	store %..rawptr %383, %..rawptr* %386
	%387 = load %..any, %..any* %59, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %60
	store [1 x %..any] zeroinitializer, [1 x %..any]* %61
	%388 = getelementptr inbounds [1 x %..any], [1 x %..any]* %61, i64 0, i32 0
	store %..any %387, %..any* %388
	%389 = getelementptr inbounds [1 x %..any], [1 x %..any]* %61, i64 0, i32 0
	%390 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 0
	store %..any* %389, %..any** %390
	%391 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 1
	store i64 1, i64* %391
	%392 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %60, i64 0, i32 2
	store i64 1, i64* %392
	%393 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %60, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$177, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %393)
	; SelectorExpr
	; SelectorExpr
	%394 = load %Type_Info.Tuple*, %Type_Info.Tuple** %53, align 8
	%395 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %394, i64 0
	%396 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %395, i64 0, i32 0
	%397 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %396, i64 0, i32 1
	%398 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %397, align 8
	%399 = extractvalue {%..string*, i64, i64} %398, 1
	store %..any zeroinitializer, %..any* %62
	store i64 zeroinitializer, i64* %63
	store i64 %399, i64* %63
	%400 = bitcast i64* %63 to %..rawptr
	%401 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%402 = getelementptr inbounds %..any, %..any* %62, i64 0, i32 0
	%403 = getelementptr inbounds %..any, %..any* %62, i64 0, i32 1
	store %Type_Info* %401, %Type_Info** %402
	store %..rawptr %400, %..rawptr* %403
	%404 = load %..any, %..any* %62, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %64
	store [1 x %..any] zeroinitializer, [1 x %..any]* %65
	%405 = getelementptr inbounds [1 x %..any], [1 x %..any]* %65, i64 0, i32 0
	store %..any %404, %..any* %405
	%406 = getelementptr inbounds [1 x %..any], [1 x %..any]* %65, i64 0, i32 0
	%407 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %64, i64 0, i32 0
	store %..any* %406, %..any** %407
	%408 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %64, i64 0, i32 1
	store i64 1, i64* %408
	%409 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %64, i64 0, i32 2
	store i64 1, i64* %409
	%410 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %64, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$178, i64 0, i32 0), i64 2}, {%..any*, i64, i64} %410)
	; RangeStmt
	; info
	store %..string zeroinitializer, %..string* %66
		; SelectorExpr
	%411 = load %Type_Info.Tuple*, %Type_Info.Tuple** %53, align 8
	%412 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %411, i64 0
	%413 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %412, i64 0, i32 0
	%414 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %413, i64 0, i32 1
	%415 = load {%..string*, i64, i64}, {%..string*, i64, i64}* %414, align 8
	store i64 zeroinitializer, i64* %67
	%416 = extractvalue {%..string*, i64, i64} %415, 1
	store i64 %416, i64* %67
	store i64 zeroinitializer, i64* %68
	store i64 -1, i64* %68
	br label %for.index.loop-13

for.index.loop-13:
	%417 = load i64, i64* %68, align 8
	%418 = add i64 %417, 1
	store i64 %418, i64* %68
	%419 = load i64, i64* %67, align 8
	%420 = icmp slt i64 %418, %419
	br i1 %420, label %for.index.body-14, label %for.index.done-15

for.index.body-14:
	%421 = load i64, i64* %68, align 8
	%422 = extractvalue {%..string*, i64, i64} %415, 0
	%423 = getelementptr inbounds %..string, %..string* %422, i64 %421
	%424 = load %..string, %..string* %423, align 8
	store %..string %424, %..string* %66
	; SelectorExpr
	%425 = load %..string, %..string* %66, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %69
	%426 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %69, align 8
	call void @.imgui-8.Text(%..string %425, {%..any*, i64, i64} %426)
	br label %for.index.loop-13

for.index.done-15:
	; SelectorExpr
	call ccc void @igPopTextWrapPos()
	; SelectorExpr
	call ccc void @igEndTooltip()
	br label %if.done-16

if.done-16:
	; SelectorExpr
	call ccc void @igNextColumn()
	; IfStmt
	; SelectorExpr
	%427 = getelementptr inbounds %jaze_gl-12.DebugFunctionLoadStatus, %jaze_gl-12.DebugFunctionLoadStatus* %43, i64 0, i32 3
	%428 = load i1, i1* %427, align 1
	br i1 %428, label %if.then-17, label %if.else-18

if.then-17:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$179, i64 0, i32 0), i64 4}, %..string* %42
	br label %if.done-19

if.else-18:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$17a, i64 0, i32 0), i64 5}, %..string* %42
	br label %if.done-19

if.done-19:
	; SelectorExpr
	%429 = load %..string, %..string* %42, align 8
	store %..any zeroinitializer, %..any* %70
	%430 = bitcast %..string* %42 to %..rawptr
	%431 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%432 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 0
	%433 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 1
	store %Type_Info* %431, %Type_Info** %432
	store %..rawptr %430, %..rawptr* %433
	%434 = load %..any, %..any* %70, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %71
	store [1 x %..any] zeroinitializer, [1 x %..any]* %72
	%435 = getelementptr inbounds [1 x %..any], [1 x %..any]* %72, i64 0, i32 0
	store %..any %434, %..any* %435
	%436 = getelementptr inbounds [1 x %..any], [1 x %..any]* %72, i64 0, i32 0
	%437 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %71, i64 0, i32 0
	store %..any* %436, %..any** %437
	%438 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %71, i64 0, i32 1
	store i64 1, i64* %438
	%439 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %71, i64 0, i32 2
	store i64 1, i64* %439
	%440 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %71, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$17b, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %440)
	; SelectorExpr
	call ccc void @igNextColumn()
	br label %for.index.loop-6

for.index.done-20:
	; SelectorExpr
	call ccc void @igColumns(i32 1, i8* zeroinitializer, i1 false)
	; SelectorExpr
	call ccc void @igEndChild()
	br label %if.done-21

if.done-21:
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%441 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 1
	%442 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %441, align 8
	%443 = extractvalue {i32*, i64, i64,%Allocator} %442, 1
	store %..any zeroinitializer, %..any* %73
	store i64 zeroinitializer, i64* %74
	store i64 %443, i64* %74
	%444 = bitcast i64* %74 to %..rawptr
	%445 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%446 = getelementptr inbounds %..any, %..any* %73, i64 0, i32 0
	%447 = getelementptr inbounds %..any, %..any* %73, i64 0, i32 1
	store %Type_Info* %445, %Type_Info** %446
	store %..rawptr %444, %..rawptr* %447
	%448 = load %..any, %..any* %73, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %75
	store [1 x %..any] zeroinitializer, [1 x %..any]* %76
	%449 = getelementptr inbounds [1 x %..any], [1 x %..any]* %76, i64 0, i32 0
	store %..any %448, %..any* %449
	%450 = getelementptr inbounds [1 x %..any], [1 x %..any]* %76, i64 0, i32 0
	%451 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %75, i64 0, i32 0
	store %..any* %450, %..any** %451
	%452 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %75, i64 0, i32 1
	store i64 1, i64* %452
	%453 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %75, i64 0, i32 2
	store i64 1, i64* %453
	%454 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %75, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.__str$17c, i64 0, i32 0), i64 29}, {%..any*, i64, i64} %454)
	; SelectorExpr
	call ccc void @igSameLine(float 0x0000000000000000, float 0xbff0000000000000)
	; IfStmt
	; SelectorExpr
	%455 = call i1 @.imgui-8.Button(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$17d, i64 0, i32 0), i64 13}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000})
	br i1 %455, label %if.then-22, label %if.done-23

if.then-22:
	; AssignStmt
	; IndexExpr
	store %__Map_Header zeroinitializer, %__Map_Header* %77
	%456 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 0
	%457 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %457, %Raw_Dynamic_Map** %456
	%458 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 1
	store i1 true, i1* %458
	%459 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 2
	store i64 40, i64* %459
	%460 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 3
	store i64 8, i64* %460
	%461 = getelementptr inbounds %__Map_Header, %__Map_Header* %77, i64 0, i32 4
	store i64 32, i64* %461
	%462 = load %__Map_Header, %__Map_Header* %77, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %78
	%463 = getelementptr inbounds %__Map_Key, %__Map_Key* %78, i64 0, i32 0
	store i64 -1305467488239390059, i64* %463
	%464 = getelementptr inbounds %__Map_Key, %__Map_Key* %78, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$17e, i64 0, i32 0), i64 21}, %..string* %464
	%465 = load %__Map_Key, %__Map_Key* %78, align 8
	store i1 zeroinitializer, i1* %79
	store i1 true, i1* %79
	%466 = bitcast i1* %79 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %462, %__Map_Key %465, %..rawptr %466)
	br label %if.done-23

if.done-23:
	; SelectorExpr
	call ccc void @igEnd()
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %80
	store %__Map_Header zeroinitializer, %__Map_Header* %81
	%467 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 0
	%468 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %468, %Raw_Dynamic_Map** %467
	%469 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 1
	store i1 true, i1* %469
	%470 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 2
	store i64 40, i64* %470
	%471 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 3
	store i64 8, i64* %471
	%472 = getelementptr inbounds %__Map_Header, %__Map_Header* %81, i64 0, i32 4
	store i64 32, i64* %472
	%473 = load %__Map_Header, %__Map_Header* %81, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %82
	%474 = getelementptr inbounds %__Map_Key, %__Map_Key* %82, i64 0, i32 0
	store i64 9087275691730913177, i64* %474
	%475 = getelementptr inbounds %__Map_Key, %__Map_Key* %82, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$17f, i64 0, i32 0), i64 20}, %..string* %475
	%476 = load %__Map_Key, %__Map_Key* %82, align 8
	%477 = call %..rawptr @.__dynamic_map_get(%__Map_Header %473, %__Map_Key %476)
	%478 = icmp ne %..rawptr %477, null
	%479 = getelementptr inbounds {i1, i1}, {i1, i1}* %80, i64 0, i32 1
	store i1 %478, i1* %479
	br i1 %478, label %map.get.then-24, label %map.get.done-25

map.get.then-24:
	%480 = getelementptr inbounds {i1, i1}, {i1, i1}* %80, i64 0, i32 0
	%481 = bitcast %..rawptr %477 to i1*
	%482 = load i1, i1* %481, align 1
	store i1 %482, i1* %480
	br label %map.get.done-25

map.get.done-25:
	%483 = getelementptr inbounds {i1, i1}, {i1, i1}* %80, i64 0, i32 0
	%484 = load i1, i1* %483, align 1
	%485 = icmp eq i1 %484, true
	br i1 %485, label %if.then-26, label %if.done-29

if.then-26:
	; b
	store i1 zeroinitializer, i1* %83
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %84
	store %__Map_Header zeroinitializer, %__Map_Header* %85
	%486 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 0
	%487 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %487, %Raw_Dynamic_Map** %486
	%488 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 1
	store i1 true, i1* %488
	%489 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 2
	store i64 40, i64* %489
	%490 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 3
	store i64 8, i64* %490
	%491 = getelementptr inbounds %__Map_Header, %__Map_Header* %85, i64 0, i32 4
	store i64 32, i64* %491
	%492 = load %__Map_Header, %__Map_Header* %85, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %86
	%493 = getelementptr inbounds %__Map_Key, %__Map_Key* %86, i64 0, i32 0
	store i64 9087275691730913177, i64* %493
	%494 = getelementptr inbounds %__Map_Key, %__Map_Key* %86, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$180, i64 0, i32 0), i64 20}, %..string* %494
	%495 = load %__Map_Key, %__Map_Key* %86, align 8
	%496 = call %..rawptr @.__dynamic_map_get(%__Map_Header %492, %__Map_Key %495)
	%497 = icmp ne %..rawptr %496, null
	%498 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 1
	store i1 %497, i1* %498
	br i1 %497, label %map.get.then-27, label %map.get.done-28

map.get.then-27:
	%499 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 0
	%500 = bitcast %..rawptr %496 to i1*
	%501 = load i1, i1* %500, align 1
	store i1 %501, i1* %499
	br label %map.get.done-28

map.get.done-28:
	%502 = getelementptr inbounds {i1, i1}, {i1, i1}* %84, i64 0, i32 0
	%503 = load i1, i1* %502, align 1
	store i1 %503, i1* %83
	; SelectorExpr
	%504 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%505 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %504, i64 0
	%506 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %505, i64 0, i32 0
	%507 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %506, align 8
	%508 = getelementptr inbounds i1, i1* %83, i64 0
	call void @.jaze_debug_windows-14.OpenGLExtensions(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$181, i64 0, i32 0), i64 15}, {%..string*, i64, i64,%Allocator} %507, i1* %508)
	; AssignStmt
	; IndexExpr
	%509 = load i1, i1* %83, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %87
	%510 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 0
	%511 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %511, %Raw_Dynamic_Map** %510
	%512 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 1
	store i1 true, i1* %512
	%513 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 2
	store i64 40, i64* %513
	%514 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 3
	store i64 8, i64* %514
	%515 = getelementptr inbounds %__Map_Header, %__Map_Header* %87, i64 0, i32 4
	store i64 32, i64* %515
	%516 = load %__Map_Header, %__Map_Header* %87, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %88
	%517 = getelementptr inbounds %__Map_Key, %__Map_Key* %88, i64 0, i32 0
	store i64 9087275691730913177, i64* %517
	%518 = getelementptr inbounds %__Map_Key, %__Map_Key* %88, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$182, i64 0, i32 0), i64 20}, %..string* %518
	%519 = load %__Map_Key, %__Map_Key* %88, align 8
	%520 = bitcast i1* %83 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %516, %__Map_Key %519, %..rawptr %520)
	br label %if.done-29

if.done-29:
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %89
	store %__Map_Header zeroinitializer, %__Map_Header* %90
	%521 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 0
	%522 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %522, %Raw_Dynamic_Map** %521
	%523 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 1
	store i1 true, i1* %523
	%524 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 2
	store i64 40, i64* %524
	%525 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 3
	store i64 8, i64* %525
	%526 = getelementptr inbounds %__Map_Header, %__Map_Header* %90, i64 0, i32 4
	store i64 32, i64* %526
	%527 = load %__Map_Header, %__Map_Header* %90, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %91
	%528 = getelementptr inbounds %__Map_Key, %__Map_Key* %91, i64 0, i32 0
	store i64 1665422548027325, i64* %528
	%529 = getelementptr inbounds %__Map_Key, %__Map_Key* %91, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$183, i64 0, i32 0), i64 23}, %..string* %529
	%530 = load %__Map_Key, %__Map_Key* %91, align 8
	%531 = call %..rawptr @.__dynamic_map_get(%__Map_Header %527, %__Map_Key %530)
	%532 = icmp ne %..rawptr %531, null
	%533 = getelementptr inbounds {i1, i1}, {i1, i1}* %89, i64 0, i32 1
	store i1 %532, i1* %533
	br i1 %532, label %map.get.then-30, label %map.get.done-31

map.get.then-30:
	%534 = getelementptr inbounds {i1, i1}, {i1, i1}* %89, i64 0, i32 0
	%535 = bitcast %..rawptr %531 to i1*
	%536 = load i1, i1* %535, align 1
	store i1 %536, i1* %534
	br label %map.get.done-31

map.get.done-31:
	%537 = getelementptr inbounds {i1, i1}, {i1, i1}* %89, i64 0, i32 0
	%538 = load i1, i1* %537, align 1
	%539 = icmp eq i1 %538, true
	br i1 %539, label %if.then-32, label %if.done-35

if.then-32:
	; b
	store i1 zeroinitializer, i1* %92
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %93
	store %__Map_Header zeroinitializer, %__Map_Header* %94
	%540 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 0
	%541 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %541, %Raw_Dynamic_Map** %540
	%542 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 1
	store i1 true, i1* %542
	%543 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 2
	store i64 40, i64* %543
	%544 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 3
	store i64 8, i64* %544
	%545 = getelementptr inbounds %__Map_Header, %__Map_Header* %94, i64 0, i32 4
	store i64 32, i64* %545
	%546 = load %__Map_Header, %__Map_Header* %94, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %95
	%547 = getelementptr inbounds %__Map_Key, %__Map_Key* %95, i64 0, i32 0
	store i64 1665422548027325, i64* %547
	%548 = getelementptr inbounds %__Map_Key, %__Map_Key* %95, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$184, i64 0, i32 0), i64 23}, %..string* %548
	%549 = load %__Map_Key, %__Map_Key* %95, align 8
	%550 = call %..rawptr @.__dynamic_map_get(%__Map_Header %546, %__Map_Key %549)
	%551 = icmp ne %..rawptr %550, null
	%552 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 1
	store i1 %551, i1* %552
	br i1 %551, label %map.get.then-33, label %map.get.done-34

map.get.then-33:
	%553 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 0
	%554 = bitcast %..rawptr %550 to i1*
	%555 = load i1, i1* %554, align 1
	store i1 %555, i1* %553
	br label %map.get.done-34

map.get.done-34:
	%556 = getelementptr inbounds {i1, i1}, {i1, i1}* %93, i64 0, i32 0
	%557 = load i1, i1* %556, align 1
	store i1 %557, i1* %92
	; SelectorExpr
	%558 = load %jaze_gl-12.OpenGLVars_t*, %jaze_gl-12.OpenGLVars_t** %0, align 8
	%559 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %558, i64 0
	%560 = getelementptr inbounds %jaze_gl-12.OpenGLVars_t, %jaze_gl-12.OpenGLVars_t* %559, i64 0, i32 1
	%561 = load {%..string*, i64, i64,%Allocator}, {%..string*, i64, i64,%Allocator}* %560, align 8
	%562 = getelementptr inbounds i1, i1* %92, i64 0
	call void @.jaze_debug_windows-14.OpenGLExtensions(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$185, i64 0, i32 0), i64 14}, {%..string*, i64, i64,%Allocator} %561, i1* %562)
	; AssignStmt
	; IndexExpr
	%563 = load i1, i1* %92, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %96
	%564 = getelementptr inbounds %__Map_Header, %__Map_Header* %96, i64 0, i32 0
	%565 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %565, %Raw_Dynamic_Map** %564
	%566 = getelementptr inbounds %__Map_Header, %__Map_Header* %96, i64 0, i32 1
	store i1 true, i1* %566
	%567 = getelementptr inbounds %__Map_Header, %__Map_Header* %96, i64 0, i32 2
	store i64 40, i64* %567
	%568 = getelementptr inbounds %__Map_Header, %__Map_Header* %96, i64 0, i32 3
	store i64 8, i64* %568
	%569 = getelementptr inbounds %__Map_Header, %__Map_Header* %96, i64 0, i32 4
	store i64 32, i64* %569
	%570 = load %__Map_Header, %__Map_Header* %96, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %97
	%571 = getelementptr inbounds %__Map_Key, %__Map_Key* %97, i64 0, i32 0
	store i64 1665422548027325, i64* %571
	%572 = getelementptr inbounds %__Map_Key, %__Map_Key* %97, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.__str$186, i64 0, i32 0), i64 23}, %..string* %572
	%573 = load %__Map_Key, %__Map_Key* %97, align 8
	%574 = bitcast i1* %92 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %570, %__Map_Key %573, %..rawptr %574)
	br label %if.done-35

if.done-35:
	; IfStmt
	; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %98
	store %__Map_Header zeroinitializer, %__Map_Header* %99
	%575 = getelementptr inbounds %__Map_Header, %__Map_Header* %99, i64 0, i32 0
	%576 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %576, %Raw_Dynamic_Map** %575
	%577 = getelementptr inbounds %__Map_Header, %__Map_Header* %99, i64 0, i32 1
	store i1 true, i1* %577
	%578 = getelementptr inbounds %__Map_Header, %__Map_Header* %99, i64 0, i32 2
	store i64 40, i64* %578
	%579 = getelementptr inbounds %__Map_Header, %__Map_Header* %99, i64 0, i32 3
	store i64 8, i64* %579
	%580 = getelementptr inbounds %__Map_Header, %__Map_Header* %99, i64 0, i32 4
	store i64 32, i64* %580
	%581 = load %__Map_Header, %__Map_Header* %99, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %100
	%582 = getelementptr inbounds %__Map_Key, %__Map_Key* %100, i64 0, i32 0
	store i64 -1305467488239390059, i64* %582
	%583 = getelementptr inbounds %__Map_Key, %__Map_Key* %100, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$187, i64 0, i32 0), i64 21}, %..string* %583
	%584 = load %__Map_Key, %__Map_Key* %100, align 8
	%585 = call %..rawptr @.__dynamic_map_get(%__Map_Header %581, %__Map_Key %584)
	%586 = icmp ne %..rawptr %585, null
	%587 = getelementptr inbounds {i1, i1}, {i1, i1}* %98, i64 0, i32 1
	store i1 %586, i1* %587
	br i1 %586, label %map.get.then-36, label %map.get.done-37

map.get.then-36:
	%588 = getelementptr inbounds {i1, i1}, {i1, i1}* %98, i64 0, i32 0
	%589 = bitcast %..rawptr %585 to i1*
	%590 = load i1, i1* %589, align 1
	store i1 %590, i1* %588
	br label %map.get.done-37

map.get.done-37:
	%591 = getelementptr inbounds {i1, i1}, {i1, i1}* %98, i64 0, i32 0
	%592 = load i1, i1* %591, align 1
	%593 = icmp eq i1 %592, true
	br i1 %593, label %if.then-38, label %if.done-41

if.then-38:
	; b
	store i1 zeroinitializer, i1* %101
		; IndexExpr
	store {i1, i1} zeroinitializer, {i1, i1}* %102
	store %__Map_Header zeroinitializer, %__Map_Header* %103
	%594 = getelementptr inbounds %__Map_Header, %__Map_Header* %103, i64 0, i32 0
	%595 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %595, %Raw_Dynamic_Map** %594
	%596 = getelementptr inbounds %__Map_Header, %__Map_Header* %103, i64 0, i32 1
	store i1 true, i1* %596
	%597 = getelementptr inbounds %__Map_Header, %__Map_Header* %103, i64 0, i32 2
	store i64 40, i64* %597
	%598 = getelementptr inbounds %__Map_Header, %__Map_Header* %103, i64 0, i32 3
	store i64 8, i64* %598
	%599 = getelementptr inbounds %__Map_Header, %__Map_Header* %103, i64 0, i32 4
	store i64 32, i64* %599
	%600 = load %__Map_Header, %__Map_Header* %103, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %104
	%601 = getelementptr inbounds %__Map_Key, %__Map_Key* %104, i64 0, i32 0
	store i64 -1305467488239390059, i64* %601
	%602 = getelementptr inbounds %__Map_Key, %__Map_Key* %104, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$188, i64 0, i32 0), i64 21}, %..string* %602
	%603 = load %__Map_Key, %__Map_Key* %104, align 8
	%604 = call %..rawptr @.__dynamic_map_get(%__Map_Header %600, %__Map_Key %603)
	%605 = icmp ne %..rawptr %604, null
	%606 = getelementptr inbounds {i1, i1}, {i1, i1}* %102, i64 0, i32 1
	store i1 %605, i1* %606
	br i1 %605, label %map.get.then-39, label %map.get.done-40

map.get.then-39:
	%607 = getelementptr inbounds {i1, i1}, {i1, i1}* %102, i64 0, i32 0
	%608 = bitcast %..rawptr %604 to i1*
	%609 = load i1, i1* %608, align 1
	store i1 %609, i1* %607
	br label %map.get.done-40

map.get.done-40:
	%610 = getelementptr inbounds {i1, i1}, {i1, i1}* %102, i64 0, i32 0
	%611 = load i1, i1* %610, align 1
	store i1 %611, i1* %101
	%612 = getelementptr inbounds i1, i1* %101, i64 0
	call void @.jaze_debug_windows-14.OpenGLTextureOverview(i1* %612)
	; AssignStmt
	; IndexExpr
	%613 = load i1, i1* %101, align 1
	store %__Map_Header zeroinitializer, %__Map_Header* %105
	%614 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 0
	%615 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}}* @.jaze_debug_windows-14.GlobalDebugWndBools to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %615, %Raw_Dynamic_Map** %614
	%616 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 1
	store i1 true, i1* %616
	%617 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 2
	store i64 40, i64* %617
	%618 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 3
	store i64 8, i64* %618
	%619 = getelementptr inbounds %__Map_Header, %__Map_Header* %105, i64 0, i32 4
	store i64 32, i64* %619
	%620 = load %__Map_Header, %__Map_Header* %105, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %106
	%621 = getelementptr inbounds %__Map_Key, %__Map_Key* %106, i64 0, i32 0
	store i64 -1305467488239390059, i64* %621
	%622 = getelementptr inbounds %__Map_Key, %__Map_Key* %106, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$189, i64 0, i32 0), i64 21}, %..string* %622
	%623 = load %__Map_Key, %__Map_Key* %106, align 8
	%624 = bitcast i1* %101 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %620, %__Map_Key %623, %..rawptr %624)
	br label %if.done-41

if.done-41:
	ret void
}

define void @.jaze_debug_windows-14.Win32VarsInfo(%main-2.Win32Vars_t* %vars, i1* %show) {
decls-0:
	%0 = alloca %main-2.Win32Vars_t*, align 8
	%1 = alloca i1*, align 8
	%2 = alloca %..any, align 8
	%3 = alloca i64, align 8
	%4 = alloca {%..any*, i64, i64}, align 8
	%5 = alloca [1 x %..any], align 8
	%6 = alloca %..any, align 8
	%7 = alloca i64, align 8
	%8 = alloca {%..any*, i64, i64}, align 8
	%9 = alloca [1 x %..any], align 8
	%10 = alloca %..any, align 8
	%11 = alloca %..any, align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca [2 x %..any], align 8
	%14 = alloca %..any, align 8
	%15 = alloca i64, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [1 x %..any], align 8
	store %main-2.Win32Vars_t* zeroinitializer, %main-2.Win32Vars_t** %0
		store %main-2.Win32Vars_t* %vars, %main-2.Win32Vars_t** %0
	store i1* zeroinitializer, i1** %1
		store i1* %show, i1** %1
	; SelectorExpr
	%18 = load i1*, i1** %1, align 8
	%19 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$18a, i64 0, i32 0), i64 14}, i1* %18, i32 160)
	; SelectorExpr
	; SelectorExpr
	%20 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%21 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %20, i64 0
	%22 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %21, i64 0, i32 1
	%23 = load %..rawptr, %..rawptr* %22, align 8
	; cast - cast
	%24 = ptrtoint %..rawptr %23 to i64
	store %..any zeroinitializer, %..any* %2
	store i64 zeroinitializer, i64* %3
	store i64 %24, i64* %3
	%25 = bitcast i64* %3 to %..rawptr
	%26 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%27 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%28 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	store %Type_Info* %26, %Type_Info** %27
	store %..rawptr %25, %..rawptr* %28
	%29 = load %..any, %..any* %2, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %4
	store [1 x %..any] zeroinitializer, [1 x %..any]* %5
	%30 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	store %..any %29, %..any* %30
	%31 = getelementptr inbounds [1 x %..any], [1 x %..any]* %5, i64 0, i32 0
	%32 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 0
	store %..any* %31, %..any** %32
	%33 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 1
	store i64 1, i64* %33
	%34 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %4, i64 0, i32 2
	store i64 1, i64* %34
	%35 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %4, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18b, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %35)
	; SelectorExpr
	; SelectorExpr
	%36 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%37 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %36, i64 0
	%38 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %37, i64 0, i32 2
	%39 = load %..rawptr, %..rawptr* %38, align 8
	; cast - cast
	%40 = ptrtoint %..rawptr %39 to i64
	store %..any zeroinitializer, %..any* %6
	store i64 zeroinitializer, i64* %7
	store i64 %40, i64* %7
	%41 = bitcast i64* %7 to %..rawptr
	%42 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%43 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%44 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %42, %Type_Info** %43
	store %..rawptr %41, %..rawptr* %44
	%45 = load %..any, %..any* %6, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %8
	store [1 x %..any] zeroinitializer, [1 x %..any]* %9
	%46 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	store %..any %45, %..any* %46
	%47 = getelementptr inbounds [1 x %..any], [1 x %..any]* %9, i64 0, i32 0
	%48 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 0
	store %..any* %47, %..any** %48
	%49 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 1
	store i64 1, i64* %49
	%50 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %8, i64 0, i32 2
	store i64 1, i64* %50
	%51 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %8, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18c, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %51)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%52 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%53 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %52, i64 0
	%54 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %53, i64 0, i32 3
	%55 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %54, i64 0, i32 1, i32 0
	%56 = load float, float* %55, align 4
	; SelectorExpr
	; SelectorExpr
	%57 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%58 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %57, i64 0
	%59 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %58, i64 0, i32 3
	%60 = getelementptr inbounds {[0 x <8 x i8>], [2 x float]}, {[0 x <8 x i8>], [2 x float]}* %59, i64 0, i32 1, i32 1
	%61 = load float, float* %60, align 4
	store %..any zeroinitializer, %..any* %10
	%62 = bitcast float* %55 to %..rawptr
	%63 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%64 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 0
	%65 = getelementptr inbounds %..any, %..any* %10, i64 0, i32 1
	store %Type_Info* %63, %Type_Info** %64
	store %..rawptr %62, %..rawptr* %65
	%66 = load %..any, %..any* %10, align 8
	store %..any zeroinitializer, %..any* %11
	%67 = bitcast float* %60 to %..rawptr
	%68 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%69 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 0
	%70 = getelementptr inbounds %..any, %..any* %11, i64 0, i32 1
	store %Type_Info* %68, %Type_Info** %69
	store %..rawptr %67, %..rawptr* %70
	%71 = load %..any, %..any* %11, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	store [2 x %..any] zeroinitializer, [2 x %..any]* %13
	%72 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	store %..any %66, %..any* %72
	%73 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 1
	store %..any %71, %..any* %73
	%74 = getelementptr inbounds [2 x %..any], [2 x %..any]* %13, i64 0, i32 0
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 0
	store %..any* %74, %..any** %75
	%76 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 1
	store i64 2, i64* %76
	%77 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %12, i64 0, i32 2
	store i64 2, i64* %77
	%78 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.__str$18d, i64 0, i32 0), i64 35}, {%..any*, i64, i64} %78)
	; SelectorExpr
	; SelectorExpr
	%79 = load %main-2.Win32Vars_t*, %main-2.Win32Vars_t** %0, align 8
	%80 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %79, i64 0
	%81 = getelementptr inbounds %main-2.Win32Vars_t, %main-2.Win32Vars_t* %80, i64 0, i32 4
	%82 = load %..rawptr, %..rawptr* %81, align 8
	; cast - cast
	%83 = ptrtoint %..rawptr %82 to i64
	store %..any zeroinitializer, %..any* %14
	store i64 zeroinitializer, i64* %15
	store i64 %83, i64* %15
	%84 = bitcast i64* %15 to %..rawptr
	%85 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%86 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%87 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %85, %Type_Info** %86
	store %..rawptr %84, %..rawptr* %87
	%88 = load %..any, %..any* %14, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [1 x %..any] zeroinitializer, [1 x %..any]* %17
	%89 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	store %..any %88, %..any* %89
	%90 = getelementptr inbounds [1 x %..any], [1 x %..any]* %17, i64 0, i32 0
	%91 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %90, %..any** %91
	%92 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 1, i64* %92
	%93 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 1, i64* %93
	%94 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$18e, i64 0, i32 0), i64 27}, {%..any*, i64, i64} %94)
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-14.ShowXinputInfoWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca %..any, align 8
	%2 = alloca {%..any*, i64, i64}, align 8
	%3 = alloca [1 x %..any], align 8
	%4 = alloca %..any, align 8
	%5 = alloca {%..any*, i64, i64}, align 8
	%6 = alloca [1 x %..any], align 8
	%7 = alloca %..any, align 8
	%8 = alloca %..any, align 8
	%9 = alloca {%..any*, i64, i64}, align 8
	%10 = alloca [2 x %..any], align 8
	%11 = alloca %jaze_xinput-16.DebugFunctionLoadStatus, align 8
	%12 = alloca i64, align 8
	%13 = alloca {%..any*, i64, i64}, align 8
	%14 = alloca %..any, align 8
	%15 = alloca %..any, align 8
	%16 = alloca {%..any*, i64, i64}, align 8
	%17 = alloca [2 x %..any], align 8
	%18 = alloca i64, align 8
	%19 = alloca i64, align 8
	%20 = alloca i64, align 8
	%21 = alloca %jaze_xinput-16.Capabilities, align 1
	%22 = alloca i32, align 4
	%23 = alloca %..any, align 8
	%24 = alloca i64, align 8
	%25 = alloca %..any, align 8
	%26 = alloca %..string, align 8
	%27 = alloca {%..any*, i64, i64}, align 8
	%28 = alloca [2 x %..any], align 8
	%29 = alloca {%..any*, i64, i64}, align 8
	%30 = alloca %..any, align 8
	%31 = alloca {%..any*, i64, i64}, align 8
	%32 = alloca [1 x %..any], align 8
	%33 = alloca {%..any*, i64, i64}, align 8
	%34 = alloca %..any, align 8
	%35 = alloca i1, align 1
	%36 = alloca {%..any*, i64, i64}, align 8
	%37 = alloca [1 x %..any], align 8
	%38 = alloca %..any, align 8
	%39 = alloca i1, align 1
	%40 = alloca {%..any*, i64, i64}, align 8
	%41 = alloca [1 x %..any], align 8
	%42 = alloca %..any, align 8
	%43 = alloca i1, align 1
	%44 = alloca {%..any*, i64, i64}, align 8
	%45 = alloca [1 x %..any], align 8
	%46 = alloca %..any, align 8
	%47 = alloca i1, align 1
	%48 = alloca {%..any*, i64, i64}, align 8
	%49 = alloca [1 x %..any], align 8
	%50 = alloca %..any, align 8
	%51 = alloca i1, align 1
	%52 = alloca {%..any*, i64, i64}, align 8
	%53 = alloca [1 x %..any], align 8
	%54 = alloca {%..any*, i64, i64}, align 8
	%55 = alloca %..string, align 8
	%56 = alloca %..any, align 8
	%57 = alloca {%..any*, i64, i64}, align 8
	%58 = alloca [1 x %..any], align 8
	%59 = alloca %..string, align 8
	%60 = alloca %..any, align 8
	%61 = alloca {%..any*, i64, i64}, align 8
	%62 = alloca [1 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%63 = load i1*, i1** %0, align 8
	%64 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$18f, i64 0, i32 0), i64 11}, i1* %63, i32 160)
	; SelectorExpr
	; SelectorExpr
	%65 = load i64, i64* @.jaze_xinput-16.Version, align 8
	store %..any zeroinitializer, %..any* %1
	%66 = bitcast i64* @.jaze_xinput-16.Version to %..rawptr
	%67 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 145
	%68 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%69 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	store %Type_Info* %67, %Type_Info** %68
	store %..rawptr %66, %..rawptr* %69
	%70 = load %..any, %..any* %1, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %2
	store [1 x %..any] zeroinitializer, [1 x %..any]* %3
	%71 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	store %..any %70, %..any* %71
	%72 = getelementptr inbounds [1 x %..any], [1 x %..any]* %3, i64 0, i32 0
	%73 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 0
	store %..any* %72, %..any** %73
	%74 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 1
	store i64 1, i64* %74
	%75 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %2, i64 0, i32 2
	store i64 1, i64* %75
	%76 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %2, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$190, i64 0, i32 0), i64 11}, {%..any*, i64, i64} %76)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%77 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 1
	%78 = load i64, i64* %77, align 8
	; cast - cast
	store %..any zeroinitializer, %..any* %4
	%79 = bitcast i64* %77 to %..rawptr
	%80 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%81 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%82 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %80, %Type_Info** %81
	store %..rawptr %79, %..rawptr* %82
	%83 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %5
	store [1 x %..any] zeroinitializer, [1 x %..any]* %6
	%84 = getelementptr inbounds [1 x %..any], [1 x %..any]* %6, i64 0, i32 0
	store %..any %83, %..any* %84
	%85 = getelementptr inbounds [1 x %..any], [1 x %..any]* %6, i64 0, i32 0
	%86 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 0
	store %..any* %85, %..any** %86
	%87 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 1
	store i64 1, i64* %87
	%88 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %5, i64 0, i32 2
	store i64 1, i64* %88
	%89 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %5, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$191, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %89)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%90 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 3
	%91 = load i32, i32* %90, align 4
	; SelectorExpr
	; SelectorExpr
	%92 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 2
	%93 = load i32, i32* %92, align 4
	store %..any zeroinitializer, %..any* %7
	%94 = bitcast i32* %90 to %..rawptr
	%95 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%96 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 0
	%97 = getelementptr inbounds %..any, %..any* %7, i64 0, i32 1
	store %Type_Info* %95, %Type_Info** %96
	store %..rawptr %94, %..rawptr* %97
	%98 = load %..any, %..any* %7, align 8
	store %..any zeroinitializer, %..any* %8
	%99 = bitcast i32* %92 to %..rawptr
	%100 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%101 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%102 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %100, %Type_Info** %101
	store %..rawptr %99, %..rawptr* %102
	%103 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %9
	store [2 x %..any] zeroinitializer, [2 x %..any]* %10
	%104 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	store %..any %98, %..any* %104
	%105 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 1
	store %..any %103, %..any* %105
	%106 = getelementptr inbounds [2 x %..any], [2 x %..any]* %10, i64 0, i32 0
	%107 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 0
	store %..any* %106, %..any** %107
	%108 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 1
	store i64 2, i64* %108
	%109 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %9, i64 0, i32 2
	store i64 2, i64* %109
	%110 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %9, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.__str$192, i64 0, i32 0), i64 33}, {%..any*, i64, i64} %110)
	; IfStmt
	; SelectorExpr
	%111 = call i1 @.imgui-8.CollapsingHeader(%..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$193, i64 0, i32 0), i64 16}, i32 0)
	br i1 %111, label %if.then-1, label %if.done-5

if.then-1:
	; SelectorExpr
	%112 = call i1 @.imgui-8.BeginChild(%..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$194, i64 0, i32 0), i64 9}, %imgui-8.Vec2 {float 0x0000000000000000, float 0x0000000000000000}, i1 true, i32 0)
	; SelectorExpr
	call ccc void @igColumns(i32 2, i8* zeroinitializer, i1 false)
	; RangeStmt
	; status
	store %jaze_xinput-16.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-16.DebugFunctionLoadStatus* %11
		; SelectorExpr
	; SelectorExpr
	%113 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 0
	%114 = getelementptr inbounds {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %113, i64 0, i32 1
	store i64 zeroinitializer, i64* %12
	store i64 -1, i64* %12
	br label %for.index.loop-2

for.index.loop-2:
	%115 = load i64, i64* %12, align 8
	%116 = add i64 %115, 1
	store i64 %116, i64* %12
	%117 = load i64, i64* %114, align 8
	%118 = icmp slt i64 %116, %117
	br i1 %118, label %for.index.body-3, label %for.index.done-4

for.index.body-3:
	%119 = load i64, i64* %12, align 8
	%120 = getelementptr inbounds {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %113, i64 0, i32 0
	%121 = load %jaze_xinput-16.DebugFunctionLoadStatus*, %jaze_xinput-16.DebugFunctionLoadStatus** %120, align 8
	%122 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %121, i64 %119
	%123 = load %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %122, align 8
	store %jaze_xinput-16.DebugFunctionLoadStatus %123, %jaze_xinput-16.DebugFunctionLoadStatus* %11
	; SelectorExpr
	; SelectorExpr
	%124 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %11, i64 0, i32 0
	%125 = load %..string, %..string* %124, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %13
	%126 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %13, align 8
	call void @.imgui-8.Text(%..string %125, {%..any*, i64, i64} %126)
	; SelectorExpr
	call ccc void @igNextColumn()
	; SelectorExpr
	; SelectorExpr
	%127 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %11, i64 0, i32 3
	%128 = load i1, i1* %127, align 1
	; SelectorExpr
	%129 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %11, i64 0, i32 1
	%130 = load i64, i64* %129, align 8
	store %..any zeroinitializer, %..any* %14
	%131 = bitcast i1* %127 to %..rawptr
	%132 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%133 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	%134 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %132, %Type_Info** %133
	store %..rawptr %131, %..rawptr* %134
	%135 = load %..any, %..any* %14, align 8
	store %..any zeroinitializer, %..any* %15
	%136 = bitcast i64* %129 to %..rawptr
	%137 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%138 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%139 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	store %Type_Info* %137, %Type_Info** %138
	store %..rawptr %136, %..rawptr* %139
	%140 = load %..any, %..any* %15, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %16
	store [2 x %..any] zeroinitializer, [2 x %..any]* %17
	%141 = getelementptr inbounds [2 x %..any], [2 x %..any]* %17, i64 0, i32 0
	store %..any %135, %..any* %141
	%142 = getelementptr inbounds [2 x %..any], [2 x %..any]* %17, i64 0, i32 1
	store %..any %140, %..any* %142
	%143 = getelementptr inbounds [2 x %..any], [2 x %..any]* %17, i64 0, i32 0
	%144 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 0
	store %..any* %143, %..any** %144
	%145 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 1
	store i64 2, i64* %145
	%146 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %16, i64 0, i32 2
	store i64 2, i64* %146
	%147 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %16, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$195, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %147)
	; SelectorExpr
	call ccc void @igNextColumn()
	br label %for.index.loop-2

for.index.done-4:
	; SelectorExpr
	call ccc void @igColumns(i32 1, i8* zeroinitializer, i1 false)
	; SelectorExpr
	call ccc void @igEndChild()
	br label %if.done-5

if.done-5:
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %18
		store i64 zeroinitializer, i64* %19
	store i64 0, i64* %19
	store i64 zeroinitializer, i64* %20
	store i64 0, i64* %20
	br label %for.interval.loop-6

for.interval.loop-6:
	%148 = load i64, i64* %19, align 8
	%149 = icmp slt i64 %148, 4
	br i1 %149, label %for.interval.body-7, label %for.interval.done-13

for.interval.body-7:
	%150 = load i64, i64* %19, align 8
	%151 = load i64, i64* %20, align 8
	%152 = load i64, i64* %19, align 8
	%153 = add i64 %152, 1
	store i64 %153, i64* %19
	%154 = load i64, i64* %20, align 8
	%155 = add i64 %154, 1
	store i64 %155, i64* %20
	store i64 %150, i64* %18
	; cap
	store %jaze_xinput-16.Capabilities zeroinitializer, %jaze_xinput-16.Capabilities* %21
		; err
	store i32 zeroinitializer, i32* %22
		; SelectorExpr
	%156 = load i64, i64* %18, align 8
	; cast - cast
	%157 = trunc i64 %156 to i32
	%158 = call {%jaze_xinput-16.Capabilities, i32} @.jaze_xinput-16.GetCapabilities-1976290722800(i32 %157)
	%159 = extractvalue {%jaze_xinput-16.Capabilities, i32} %158, 0
	%160 = extractvalue {%jaze_xinput-16.Capabilities, i32} %158, 1
	store %jaze_xinput-16.Capabilities %159, %jaze_xinput-16.Capabilities* %21
	store i32 %160, i32* %22
	; SelectorExpr
	%161 = load i64, i64* %18, align 8
	%162 = add i64 %161, 1
	; TernaryExpr
	%163 = load i32, i32* %22, align 4
	%164 = icmp eq i32 %163, 0
	br i1 %164, label %if.then-8, label %if.else-9

if.then-8:
	br label %if.done-10

if.else-9:
	br label %if.done-10

if.done-10:
	%165 = phi %..string [ {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$196, i64 0, i32 0), i64 9}, %if.then-8 ], [ {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$197, i64 0, i32 0), i64 13}, %if.else-9 ]
	store %..any zeroinitializer, %..any* %23
	store i64 zeroinitializer, i64* %24
	store i64 %162, i64* %24
	%166 = bitcast i64* %24 to %..rawptr
	%167 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%168 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 0
	%169 = getelementptr inbounds %..any, %..any* %23, i64 0, i32 1
	store %Type_Info* %167, %Type_Info** %168
	store %..rawptr %166, %..rawptr* %169
	%170 = load %..any, %..any* %23, align 8
	store %..any zeroinitializer, %..any* %25
	store %..string zeroinitializer, %..string* %26
	store %..string %165, %..string* %26
	%171 = bitcast %..string* %26 to %..rawptr
	%172 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%173 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 0
	%174 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 1
	store %Type_Info* %172, %Type_Info** %173
	store %..rawptr %171, %..rawptr* %174
	%175 = load %..any, %..any* %25, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %27
	store [2 x %..any] zeroinitializer, [2 x %..any]* %28
	%176 = getelementptr inbounds [2 x %..any], [2 x %..any]* %28, i64 0, i32 0
	store %..any %170, %..any* %176
	%177 = getelementptr inbounds [2 x %..any], [2 x %..any]* %28, i64 0, i32 1
	store %..any %175, %..any* %177
	%178 = getelementptr inbounds [2 x %..any], [2 x %..any]* %28, i64 0, i32 0
	%179 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 0
	store %..any* %178, %..any** %179
	%180 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 1
	store i64 2, i64* %180
	%181 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 2
	store i64 2, i64* %181
	%182 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %27, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$198, i64 0, i32 0), i64 15}, {%..any*, i64, i64} %182)
	; IfStmt
	%183 = load i32, i32* %22, align 4
	%184 = icmp eq i32 %183, 0
	br i1 %184, label %if.then-11, label %if.done-12

if.then-11:
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %29
	%185 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %29, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$199, i64 0, i32 0), i64 12}, {%..any*, i64, i64} %185)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	; SelectorExpr
	%186 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %21, i64 0, i32 1
	%187 = load i8, i8* %186, align 8
	store %..any zeroinitializer, %..any* %30
	%188 = bitcast i8* %186 to %..rawptr
	%189 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 147
	%190 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 0
	%191 = getelementptr inbounds %..any, %..any* %30, i64 0, i32 1
	store %Type_Info* %189, %Type_Info** %190
	store %..rawptr %188, %..rawptr* %191
	%192 = load %..any, %..any* %30, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %31
	store [1 x %..any] zeroinitializer, [1 x %..any]* %32
	%193 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	store %..any %192, %..any* %193
	%194 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	%195 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 0
	store %..any* %194, %..any** %195
	%196 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 1
	store i64 1, i64* %196
	%197 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 2
	store i64 1, i64* %197
	%198 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %31, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$19a, i64 0, i32 0), i64 10}, {%..any*, i64, i64} %198)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %33
	%199 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %33, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$19b, i64 0, i32 0), i64 6}, {%..any*, i64, i64} %199)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	%200 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %21, i64 0, i32 2
	%201 = load i16, i16* %200, align 8
	%202 = and i16 %201, 4
	%203 = icmp eq i16 %202, 4
	store %..any zeroinitializer, %..any* %34
	store i1 zeroinitializer, i1* %35
	store i1 %203, i1* %35
	%204 = bitcast i1* %35 to %..rawptr
	%205 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%206 = getelementptr inbounds %..any, %..any* %34, i64 0, i32 0
	%207 = getelementptr inbounds %..any, %..any* %34, i64 0, i32 1
	store %Type_Info* %205, %Type_Info** %206
	store %..rawptr %204, %..rawptr* %207
	%208 = load %..any, %..any* %34, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %36
	store [1 x %..any] zeroinitializer, [1 x %..any]* %37
	%209 = getelementptr inbounds [1 x %..any], [1 x %..any]* %37, i64 0, i32 0
	store %..any %208, %..any* %209
	%210 = getelementptr inbounds [1 x %..any], [1 x %..any]* %37, i64 0, i32 0
	%211 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 0
	store %..any* %210, %..any** %211
	%212 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 1
	store i64 1, i64* %212
	%213 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %36, i64 0, i32 2
	store i64 1, i64* %213
	%214 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %36, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$19c, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %214)
	; SelectorExpr
	; SelectorExpr
	%215 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %21, i64 0, i32 2
	%216 = load i16, i16* %215, align 8
	%217 = and i16 %216, 1
	%218 = icmp eq i16 %217, 1
	store %..any zeroinitializer, %..any* %38
	store i1 zeroinitializer, i1* %39
	store i1 %218, i1* %39
	%219 = bitcast i1* %39 to %..rawptr
	%220 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%221 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 0
	%222 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	store %Type_Info* %220, %Type_Info** %221
	store %..rawptr %219, %..rawptr* %222
	%223 = load %..any, %..any* %38, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %40
	store [1 x %..any] zeroinitializer, [1 x %..any]* %41
	%224 = getelementptr inbounds [1 x %..any], [1 x %..any]* %41, i64 0, i32 0
	store %..any %223, %..any* %224
	%225 = getelementptr inbounds [1 x %..any], [1 x %..any]* %41, i64 0, i32 0
	%226 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 0
	store %..any* %225, %..any** %226
	%227 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 1
	store i64 1, i64* %227
	%228 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %40, i64 0, i32 2
	store i64 1, i64* %228
	%229 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %40, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$19d, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %229)
	; SelectorExpr
	; SelectorExpr
	%230 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %21, i64 0, i32 2
	%231 = load i16, i16* %230, align 8
	%232 = and i16 %231, 2
	%233 = icmp eq i16 %232, 2
	store %..any zeroinitializer, %..any* %42
	store i1 zeroinitializer, i1* %43
	store i1 %233, i1* %43
	%234 = bitcast i1* %43 to %..rawptr
	%235 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%236 = getelementptr inbounds %..any, %..any* %42, i64 0, i32 0
	%237 = getelementptr inbounds %..any, %..any* %42, i64 0, i32 1
	store %Type_Info* %235, %Type_Info** %236
	store %..rawptr %234, %..rawptr* %237
	%238 = load %..any, %..any* %42, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %44
	store [1 x %..any] zeroinitializer, [1 x %..any]* %45
	%239 = getelementptr inbounds [1 x %..any], [1 x %..any]* %45, i64 0, i32 0
	store %..any %238, %..any* %239
	%240 = getelementptr inbounds [1 x %..any], [1 x %..any]* %45, i64 0, i32 0
	%241 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %44, i64 0, i32 0
	store %..any* %240, %..any** %241
	%242 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %44, i64 0, i32 1
	store i64 1, i64* %242
	%243 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %44, i64 0, i32 2
	store i64 1, i64* %243
	%244 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %44, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$19e, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %244)
	; SelectorExpr
	; SelectorExpr
	%245 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %21, i64 0, i32 2
	%246 = load i16, i16* %245, align 8
	%247 = and i16 %246, 8
	%248 = icmp eq i16 %247, 8
	store %..any zeroinitializer, %..any* %46
	store i1 zeroinitializer, i1* %47
	store i1 %248, i1* %47
	%249 = bitcast i1* %47 to %..rawptr
	%250 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%251 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 0
	%252 = getelementptr inbounds %..any, %..any* %46, i64 0, i32 1
	store %Type_Info* %250, %Type_Info** %251
	store %..rawptr %249, %..rawptr* %252
	%253 = load %..any, %..any* %46, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %48
	store [1 x %..any] zeroinitializer, [1 x %..any]* %49
	%254 = getelementptr inbounds [1 x %..any], [1 x %..any]* %49, i64 0, i32 0
	store %..any %253, %..any* %254
	%255 = getelementptr inbounds [1 x %..any], [1 x %..any]* %49, i64 0, i32 0
	%256 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 0
	store %..any* %255, %..any** %256
	%257 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 1
	store i64 1, i64* %257
	%258 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %48, i64 0, i32 2
	store i64 1, i64* %258
	%259 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %48, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$19f, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %259)
	; SelectorExpr
	; SelectorExpr
	%260 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %21, i64 0, i32 2
	%261 = load i16, i16* %260, align 8
	%262 = and i16 %261, 16
	%263 = icmp eq i16 %262, 16
	store %..any zeroinitializer, %..any* %50
	store i1 zeroinitializer, i1* %51
	store i1 %263, i1* %51
	%264 = bitcast i1* %51 to %..rawptr
	%265 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%266 = getelementptr inbounds %..any, %..any* %50, i64 0, i32 0
	%267 = getelementptr inbounds %..any, %..any* %50, i64 0, i32 1
	store %Type_Info* %265, %Type_Info** %266
	store %..rawptr %264, %..rawptr* %267
	%268 = load %..any, %..any* %50, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %52
	store [1 x %..any] zeroinitializer, [1 x %..any]* %53
	%269 = getelementptr inbounds [1 x %..any], [1 x %..any]* %53, i64 0, i32 0
	store %..any %268, %..any* %269
	%270 = getelementptr inbounds [1 x %..any], [1 x %..any]* %53, i64 0, i32 0
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 0
	store %..any* %270, %..any** %271
	%272 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 1
	store i64 1, i64* %272
	%273 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %52, i64 0, i32 2
	store i64 1, i64* %273
	%274 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %52, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1a0, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %274)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %54
	%275 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %54, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$1a1, i64 0, i32 0), i64 20}, {%..any*, i64, i64} %275)
	; SelectorExpr
	call ccc void @igIndent(float 0x4034000000000000)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %55
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$1a2, i64 0, i32 0), i64 3}, %..string* %55
	%276 = load %..string, %..string* %55, align 8
	store %..any zeroinitializer, %..any* %56
	%277 = bitcast %..string* %55 to %..rawptr
	%278 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%279 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 0
	%280 = getelementptr inbounds %..any, %..any* %56, i64 0, i32 1
	store %Type_Info* %278, %Type_Info** %279
	store %..rawptr %277, %..rawptr* %280
	%281 = load %..any, %..any* %56, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %57
	store [1 x %..any] zeroinitializer, [1 x %..any]* %58
	%282 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	store %..any %281, %..any* %282
	%283 = getelementptr inbounds [1 x %..any], [1 x %..any]* %58, i64 0, i32 0
	%284 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 0
	store %..any* %283, %..any** %284
	%285 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 1
	store i64 1, i64* %285
	%286 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %57, i64 0, i32 2
	store i64 1, i64* %286
	%287 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %57, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1a3, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %287)
	; SelectorExpr
	store %..string zeroinitializer, %..string* %59
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$1a4, i64 0, i32 0), i64 3}, %..string* %59
	%288 = load %..string, %..string* %59, align 8
	store %..any zeroinitializer, %..any* %60
	%289 = bitcast %..string* %59 to %..rawptr
	%290 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%291 = getelementptr inbounds %..any, %..any* %60, i64 0, i32 0
	%292 = getelementptr inbounds %..any, %..any* %60, i64 0, i32 1
	store %Type_Info* %290, %Type_Info** %291
	store %..rawptr %289, %..rawptr* %292
	%293 = load %..any, %..any* %60, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %61
	store [1 x %..any] zeroinitializer, [1 x %..any]* %62
	%294 = getelementptr inbounds [1 x %..any], [1 x %..any]* %62, i64 0, i32 0
	store %..any %293, %..any* %294
	%295 = getelementptr inbounds [1 x %..any], [1 x %..any]* %62, i64 0, i32 0
	%296 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %61, i64 0, i32 0
	store %..any* %295, %..any** %296
	%297 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %61, i64 0, i32 1
	store i64 1, i64* %297
	%298 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %61, i64 0, i32 2
	store i64 1, i64* %298
	%299 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %61, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1a5, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %299)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4034000000000000)
	br label %if.done-12

if.done-12:
	; SelectorExpr
	call ccc void @igSeparator()
	br label %for.interval.loop-6

for.interval.done-13:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_debug_windows-14.ShowXinputStateWindow(i1* %show) {
decls-0:
	%0 = alloca i1*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca %jaze_xinput-16.State, align 4
	%5 = alloca i32, align 4
	%6 = alloca %..any, align 8
	%7 = alloca i64, align 8
	%8 = alloca %..any, align 8
	%9 = alloca %..string, align 8
	%10 = alloca {%..any*, i64, i64}, align 8
	%11 = alloca [2 x %..any], align 8
	%12 = alloca {%..any*, i64, i64}, align 8
	%13 = alloca %..any, align 8
	%14 = alloca i1, align 1
	%15 = alloca {%..any*, i64, i64}, align 8
	%16 = alloca [1 x %..any], align 8
	%17 = alloca %..any, align 8
	%18 = alloca i1, align 1
	%19 = alloca {%..any*, i64, i64}, align 8
	%20 = alloca [1 x %..any], align 8
	%21 = alloca %..any, align 8
	%22 = alloca i1, align 1
	%23 = alloca {%..any*, i64, i64}, align 8
	%24 = alloca [1 x %..any], align 8
	%25 = alloca %..any, align 8
	%26 = alloca i1, align 1
	%27 = alloca {%..any*, i64, i64}, align 8
	%28 = alloca [1 x %..any], align 8
	%29 = alloca %..any, align 8
	%30 = alloca i1, align 1
	%31 = alloca {%..any*, i64, i64}, align 8
	%32 = alloca [1 x %..any], align 8
	%33 = alloca %..any, align 8
	%34 = alloca i1, align 1
	%35 = alloca {%..any*, i64, i64}, align 8
	%36 = alloca [1 x %..any], align 8
	%37 = alloca %..any, align 8
	%38 = alloca i1, align 1
	%39 = alloca {%..any*, i64, i64}, align 8
	%40 = alloca [1 x %..any], align 8
	%41 = alloca %..any, align 8
	%42 = alloca i1, align 1
	%43 = alloca {%..any*, i64, i64}, align 8
	%44 = alloca [1 x %..any], align 8
	%45 = alloca %..any, align 8
	%46 = alloca i1, align 1
	%47 = alloca {%..any*, i64, i64}, align 8
	%48 = alloca [1 x %..any], align 8
	%49 = alloca %..any, align 8
	%50 = alloca i1, align 1
	%51 = alloca {%..any*, i64, i64}, align 8
	%52 = alloca [1 x %..any], align 8
	%53 = alloca %..any, align 8
	%54 = alloca i1, align 1
	%55 = alloca {%..any*, i64, i64}, align 8
	%56 = alloca [1 x %..any], align 8
	%57 = alloca %..any, align 8
	%58 = alloca i1, align 1
	%59 = alloca {%..any*, i64, i64}, align 8
	%60 = alloca [1 x %..any], align 8
	%61 = alloca %..any, align 8
	%62 = alloca i1, align 1
	%63 = alloca {%..any*, i64, i64}, align 8
	%64 = alloca [1 x %..any], align 8
	%65 = alloca %..any, align 8
	%66 = alloca i1, align 1
	%67 = alloca {%..any*, i64, i64}, align 8
	%68 = alloca [1 x %..any], align 8
	%69 = alloca {%..any*, i64, i64}, align 8
	%70 = alloca %..any, align 8
	%71 = alloca %..any, align 8
	%72 = alloca float, align 4
	%73 = alloca {%..any*, i64, i64}, align 8
	%74 = alloca [2 x %..any], align 8
	%75 = alloca %..any, align 8
	%76 = alloca %..any, align 8
	%77 = alloca float, align 4
	%78 = alloca {%..any*, i64, i64}, align 8
	%79 = alloca [2 x %..any], align 8
	%80 = alloca {%..any*, i64, i64}, align 8
	%81 = alloca %..any, align 8
	%82 = alloca %..any, align 8
	%83 = alloca {%..any*, i64, i64}, align 8
	%84 = alloca [2 x %..any], align 8
	%85 = alloca %..any, align 8
	%86 = alloca %..any, align 8
	%87 = alloca {%..any*, i64, i64}, align 8
	%88 = alloca [2 x %..any], align 8
	store i1* zeroinitializer, i1** %0
		store i1* %show, i1** %0
	; SelectorExpr
	%89 = load i1*, i1** %0, align 8
	%90 = call i1 @.imgui-8.Begin(%..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$1a6, i64 0, i32 0), i64 12}, i1* %89, i32 160)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %1
		store i64 zeroinitializer, i64* %2
	store i64 0, i64* %2
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	br label %for.interval.loop-1

for.interval.loop-1:
	%91 = load i64, i64* %2, align 8
	%92 = icmp slt i64 %91, 4
	br i1 %92, label %for.interval.body-2, label %for.interval.done-8

for.interval.body-2:
	%93 = load i64, i64* %2, align 8
	%94 = load i64, i64* %3, align 8
	%95 = load i64, i64* %2, align 8
	%96 = add i64 %95, 1
	store i64 %96, i64* %2
	%97 = load i64, i64* %3, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %3
	store i64 %93, i64* %1
	; state
	store %jaze_xinput-16.State zeroinitializer, %jaze_xinput-16.State* %4
		; err
	store i32 zeroinitializer, i32* %5
		; SelectorExpr
	%99 = load i64, i64* %1, align 8
	; cast - cast
	%100 = trunc i64 %99 to i32
	%101 = call {%jaze_xinput-16.State, i32} @.jaze_xinput-16.GetState(i32 %100)
	%102 = extractvalue {%jaze_xinput-16.State, i32} %101, 0
	%103 = extractvalue {%jaze_xinput-16.State, i32} %101, 1
	store %jaze_xinput-16.State %102, %jaze_xinput-16.State* %4
	store i32 %103, i32* %5
	; SelectorExpr
	%104 = load i64, i64* %1, align 8
	%105 = add i64 %104, 1
	; TernaryExpr
	%106 = load i32, i32* %5, align 4
	%107 = icmp eq i32 %106, 0
	br i1 %107, label %if.then-3, label %if.else-4

if.then-3:
	br label %if.done-5

if.else-4:
	br label %if.done-5

if.done-5:
	%108 = phi %..string [ {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$1a7, i64 0, i32 0), i64 9}, %if.then-3 ], [ {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1a8, i64 0, i32 0), i64 13}, %if.else-4 ]
	store %..any zeroinitializer, %..any* %6
	store i64 zeroinitializer, i64* %7
	store i64 %105, i64* %7
	%109 = bitcast i64* %7 to %..rawptr
	%110 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%111 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 0
	%112 = getelementptr inbounds %..any, %..any* %6, i64 0, i32 1
	store %Type_Info* %110, %Type_Info** %111
	store %..rawptr %109, %..rawptr* %112
	%113 = load %..any, %..any* %6, align 8
	store %..any zeroinitializer, %..any* %8
	store %..string zeroinitializer, %..string* %9
	store %..string %108, %..string* %9
	%114 = bitcast %..string* %9 to %..rawptr
	%115 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%116 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 0
	%117 = getelementptr inbounds %..any, %..any* %8, i64 0, i32 1
	store %Type_Info* %115, %Type_Info** %116
	store %..rawptr %114, %..rawptr* %117
	%118 = load %..any, %..any* %8, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %10
	store [2 x %..any] zeroinitializer, [2 x %..any]* %11
	%119 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 0
	store %..any %113, %..any* %119
	%120 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 1
	store %..any %118, %..any* %120
	%121 = getelementptr inbounds [2 x %..any], [2 x %..any]* %11, i64 0, i32 0
	%122 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 0
	store %..any* %121, %..any** %122
	%123 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 1
	store i64 2, i64* %123
	%124 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %10, i64 0, i32 2
	store i64 2, i64* %124
	%125 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %10, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1a9, i64 0, i32 0), i64 15}, {%..any*, i64, i64} %125)
	; IfStmt
	%126 = load i32, i32* %5, align 4
	%127 = icmp eq i32 %126, 0
	br i1 %127, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %12
	%128 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %12, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$1aa, i64 0, i32 0), i64 14}, {%..any*, i64, i64} %128)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%129 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%130 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %129, i64 0, i32 0
	%131 = load i16, i16* %130, align 2
	%132 = and i16 %131, 1
	%133 = icmp eq i16 %132, 1
	store %..any zeroinitializer, %..any* %13
	store i1 zeroinitializer, i1* %14
	store i1 %133, i1* %14
	%134 = bitcast i1* %14 to %..rawptr
	%135 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%136 = getelementptr inbounds %..any, %..any* %13, i64 0, i32 0
	%137 = getelementptr inbounds %..any, %..any* %13, i64 0, i32 1
	store %Type_Info* %135, %Type_Info** %136
	store %..rawptr %134, %..rawptr* %137
	%138 = load %..any, %..any* %13, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %15
	store [1 x %..any] zeroinitializer, [1 x %..any]* %16
	%139 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	store %..any %138, %..any* %139
	%140 = getelementptr inbounds [1 x %..any], [1 x %..any]* %16, i64 0, i32 0
	%141 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 0
	store %..any* %140, %..any** %141
	%142 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 1
	store i64 1, i64* %142
	%143 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %15, i64 0, i32 2
	store i64 1, i64* %143
	%144 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %15, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ab, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %144)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%145 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%146 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %145, i64 0, i32 0
	%147 = load i16, i16* %146, align 2
	%148 = and i16 %147, 2
	%149 = icmp eq i16 %148, 2
	store %..any zeroinitializer, %..any* %17
	store i1 zeroinitializer, i1* %18
	store i1 %149, i1* %18
	%150 = bitcast i1* %18 to %..rawptr
	%151 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%152 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 0
	%153 = getelementptr inbounds %..any, %..any* %17, i64 0, i32 1
	store %Type_Info* %151, %Type_Info** %152
	store %..rawptr %150, %..rawptr* %153
	%154 = load %..any, %..any* %17, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %19
	store [1 x %..any] zeroinitializer, [1 x %..any]* %20
	%155 = getelementptr inbounds [1 x %..any], [1 x %..any]* %20, i64 0, i32 0
	store %..any %154, %..any* %155
	%156 = getelementptr inbounds [1 x %..any], [1 x %..any]* %20, i64 0, i32 0
	%157 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 0
	store %..any* %156, %..any** %157
	%158 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 1
	store i64 1, i64* %158
	%159 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %19, i64 0, i32 2
	store i64 1, i64* %159
	%160 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %19, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ac, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %160)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%161 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%162 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %161, i64 0, i32 0
	%163 = load i16, i16* %162, align 2
	%164 = and i16 %163, 4
	%165 = icmp eq i16 %164, 4
	store %..any zeroinitializer, %..any* %21
	store i1 zeroinitializer, i1* %22
	store i1 %165, i1* %22
	%166 = bitcast i1* %22 to %..rawptr
	%167 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%168 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 0
	%169 = getelementptr inbounds %..any, %..any* %21, i64 0, i32 1
	store %Type_Info* %167, %Type_Info** %168
	store %..rawptr %166, %..rawptr* %169
	%170 = load %..any, %..any* %21, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %23
	store [1 x %..any] zeroinitializer, [1 x %..any]* %24
	%171 = getelementptr inbounds [1 x %..any], [1 x %..any]* %24, i64 0, i32 0
	store %..any %170, %..any* %171
	%172 = getelementptr inbounds [1 x %..any], [1 x %..any]* %24, i64 0, i32 0
	%173 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 0
	store %..any* %172, %..any** %173
	%174 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 1
	store i64 1, i64* %174
	%175 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %23, i64 0, i32 2
	store i64 1, i64* %175
	%176 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %23, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ad, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %176)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%177 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%178 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %177, i64 0, i32 0
	%179 = load i16, i16* %178, align 2
	%180 = and i16 %179, 8
	%181 = icmp eq i16 %180, 8
	store %..any zeroinitializer, %..any* %25
	store i1 zeroinitializer, i1* %26
	store i1 %181, i1* %26
	%182 = bitcast i1* %26 to %..rawptr
	%183 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%184 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 0
	%185 = getelementptr inbounds %..any, %..any* %25, i64 0, i32 1
	store %Type_Info* %183, %Type_Info** %184
	store %..rawptr %182, %..rawptr* %185
	%186 = load %..any, %..any* %25, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %27
	store [1 x %..any] zeroinitializer, [1 x %..any]* %28
	%187 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	store %..any %186, %..any* %187
	%188 = getelementptr inbounds [1 x %..any], [1 x %..any]* %28, i64 0, i32 0
	%189 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 0
	store %..any* %188, %..any** %189
	%190 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 1
	store i64 1, i64* %190
	%191 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %27, i64 0, i32 2
	store i64 1, i64* %191
	%192 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %27, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1ae, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %192)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%193 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%194 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %193, i64 0, i32 0
	%195 = load i16, i16* %194, align 2
	%196 = and i16 %195, 16
	%197 = icmp eq i16 %196, 16
	store %..any zeroinitializer, %..any* %29
	store i1 zeroinitializer, i1* %30
	store i1 %197, i1* %30
	%198 = bitcast i1* %30 to %..rawptr
	%199 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%200 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 0
	%201 = getelementptr inbounds %..any, %..any* %29, i64 0, i32 1
	store %Type_Info* %199, %Type_Info** %200
	store %..rawptr %198, %..rawptr* %201
	%202 = load %..any, %..any* %29, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %31
	store [1 x %..any] zeroinitializer, [1 x %..any]* %32
	%203 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	store %..any %202, %..any* %203
	%204 = getelementptr inbounds [1 x %..any], [1 x %..any]* %32, i64 0, i32 0
	%205 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 0
	store %..any* %204, %..any** %205
	%206 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 1
	store i64 1, i64* %206
	%207 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %31, i64 0, i32 2
	store i64 1, i64* %207
	%208 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %31, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1af, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %208)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%209 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%210 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %209, i64 0, i32 0
	%211 = load i16, i16* %210, align 2
	%212 = and i16 %211, 32
	%213 = icmp eq i16 %212, 32
	store %..any zeroinitializer, %..any* %33
	store i1 zeroinitializer, i1* %34
	store i1 %213, i1* %34
	%214 = bitcast i1* %34 to %..rawptr
	%215 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%216 = getelementptr inbounds %..any, %..any* %33, i64 0, i32 0
	%217 = getelementptr inbounds %..any, %..any* %33, i64 0, i32 1
	store %Type_Info* %215, %Type_Info** %216
	store %..rawptr %214, %..rawptr* %217
	%218 = load %..any, %..any* %33, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %35
	store [1 x %..any] zeroinitializer, [1 x %..any]* %36
	%219 = getelementptr inbounds [1 x %..any], [1 x %..any]* %36, i64 0, i32 0
	store %..any %218, %..any* %219
	%220 = getelementptr inbounds [1 x %..any], [1 x %..any]* %36, i64 0, i32 0
	%221 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %35, i64 0, i32 0
	store %..any* %220, %..any** %221
	%222 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %35, i64 0, i32 1
	store i64 1, i64* %222
	%223 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %35, i64 0, i32 2
	store i64 1, i64* %223
	%224 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %35, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b0, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %224)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%225 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%226 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %225, i64 0, i32 0
	%227 = load i16, i16* %226, align 2
	%228 = and i16 %227, 64
	%229 = icmp eq i16 %228, 64
	store %..any zeroinitializer, %..any* %37
	store i1 zeroinitializer, i1* %38
	store i1 %229, i1* %38
	%230 = bitcast i1* %38 to %..rawptr
	%231 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%232 = getelementptr inbounds %..any, %..any* %37, i64 0, i32 0
	%233 = getelementptr inbounds %..any, %..any* %37, i64 0, i32 1
	store %Type_Info* %231, %Type_Info** %232
	store %..rawptr %230, %..rawptr* %233
	%234 = load %..any, %..any* %37, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %39
	store [1 x %..any] zeroinitializer, [1 x %..any]* %40
	%235 = getelementptr inbounds [1 x %..any], [1 x %..any]* %40, i64 0, i32 0
	store %..any %234, %..any* %235
	%236 = getelementptr inbounds [1 x %..any], [1 x %..any]* %40, i64 0, i32 0
	%237 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 0
	store %..any* %236, %..any** %237
	%238 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 1
	store i64 1, i64* %238
	%239 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %39, i64 0, i32 2
	store i64 1, i64* %239
	%240 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %39, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b1, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %240)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%241 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%242 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %241, i64 0, i32 0
	%243 = load i16, i16* %242, align 2
	%244 = and i16 %243, 128
	%245 = icmp eq i16 %244, 128
	store %..any zeroinitializer, %..any* %41
	store i1 zeroinitializer, i1* %42
	store i1 %245, i1* %42
	%246 = bitcast i1* %42 to %..rawptr
	%247 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%248 = getelementptr inbounds %..any, %..any* %41, i64 0, i32 0
	%249 = getelementptr inbounds %..any, %..any* %41, i64 0, i32 1
	store %Type_Info* %247, %Type_Info** %248
	store %..rawptr %246, %..rawptr* %249
	%250 = load %..any, %..any* %41, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %43
	store [1 x %..any] zeroinitializer, [1 x %..any]* %44
	%251 = getelementptr inbounds [1 x %..any], [1 x %..any]* %44, i64 0, i32 0
	store %..any %250, %..any* %251
	%252 = getelementptr inbounds [1 x %..any], [1 x %..any]* %44, i64 0, i32 0
	%253 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %43, i64 0, i32 0
	store %..any* %252, %..any** %253
	%254 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %43, i64 0, i32 1
	store i64 1, i64* %254
	%255 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %43, i64 0, i32 2
	store i64 1, i64* %255
	%256 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %43, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b2, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %256)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%257 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%258 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %257, i64 0, i32 0
	%259 = load i16, i16* %258, align 2
	%260 = and i16 %259, 256
	%261 = icmp eq i16 %260, 256
	store %..any zeroinitializer, %..any* %45
	store i1 zeroinitializer, i1* %46
	store i1 %261, i1* %46
	%262 = bitcast i1* %46 to %..rawptr
	%263 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%264 = getelementptr inbounds %..any, %..any* %45, i64 0, i32 0
	%265 = getelementptr inbounds %..any, %..any* %45, i64 0, i32 1
	store %Type_Info* %263, %Type_Info** %264
	store %..rawptr %262, %..rawptr* %265
	%266 = load %..any, %..any* %45, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %47
	store [1 x %..any] zeroinitializer, [1 x %..any]* %48
	%267 = getelementptr inbounds [1 x %..any], [1 x %..any]* %48, i64 0, i32 0
	store %..any %266, %..any* %267
	%268 = getelementptr inbounds [1 x %..any], [1 x %..any]* %48, i64 0, i32 0
	%269 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %47, i64 0, i32 0
	store %..any* %268, %..any** %269
	%270 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %47, i64 0, i32 1
	store i64 1, i64* %270
	%271 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %47, i64 0, i32 2
	store i64 1, i64* %271
	%272 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %47, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b3, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %272)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%273 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%274 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %273, i64 0, i32 0
	%275 = load i16, i16* %274, align 2
	%276 = and i16 %275, 512
	%277 = icmp eq i16 %276, 512
	store %..any zeroinitializer, %..any* %49
	store i1 zeroinitializer, i1* %50
	store i1 %277, i1* %50
	%278 = bitcast i1* %50 to %..rawptr
	%279 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%280 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 0
	%281 = getelementptr inbounds %..any, %..any* %49, i64 0, i32 1
	store %Type_Info* %279, %Type_Info** %280
	store %..rawptr %278, %..rawptr* %281
	%282 = load %..any, %..any* %49, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %51
	store [1 x %..any] zeroinitializer, [1 x %..any]* %52
	%283 = getelementptr inbounds [1 x %..any], [1 x %..any]* %52, i64 0, i32 0
	store %..any %282, %..any* %283
	%284 = getelementptr inbounds [1 x %..any], [1 x %..any]* %52, i64 0, i32 0
	%285 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %51, i64 0, i32 0
	store %..any* %284, %..any** %285
	%286 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %51, i64 0, i32 1
	store i64 1, i64* %286
	%287 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %51, i64 0, i32 2
	store i64 1, i64* %287
	%288 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %51, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b4, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %288)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%289 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%290 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %289, i64 0, i32 0
	%291 = load i16, i16* %290, align 2
	%292 = and i16 %291, 4096
	%293 = icmp eq i16 %292, 4096
	store %..any zeroinitializer, %..any* %53
	store i1 zeroinitializer, i1* %54
	store i1 %293, i1* %54
	%294 = bitcast i1* %54 to %..rawptr
	%295 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%296 = getelementptr inbounds %..any, %..any* %53, i64 0, i32 0
	%297 = getelementptr inbounds %..any, %..any* %53, i64 0, i32 1
	store %Type_Info* %295, %Type_Info** %296
	store %..rawptr %294, %..rawptr* %297
	%298 = load %..any, %..any* %53, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %55
	store [1 x %..any] zeroinitializer, [1 x %..any]* %56
	%299 = getelementptr inbounds [1 x %..any], [1 x %..any]* %56, i64 0, i32 0
	store %..any %298, %..any* %299
	%300 = getelementptr inbounds [1 x %..any], [1 x %..any]* %56, i64 0, i32 0
	%301 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %55, i64 0, i32 0
	store %..any* %300, %..any** %301
	%302 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %55, i64 0, i32 1
	store i64 1, i64* %302
	%303 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %55, i64 0, i32 2
	store i64 1, i64* %303
	%304 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %55, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b5, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %304)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%305 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%306 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %305, i64 0, i32 0
	%307 = load i16, i16* %306, align 2
	%308 = and i16 %307, 8192
	%309 = icmp eq i16 %308, 8192
	store %..any zeroinitializer, %..any* %57
	store i1 zeroinitializer, i1* %58
	store i1 %309, i1* %58
	%310 = bitcast i1* %58 to %..rawptr
	%311 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%312 = getelementptr inbounds %..any, %..any* %57, i64 0, i32 0
	%313 = getelementptr inbounds %..any, %..any* %57, i64 0, i32 1
	store %Type_Info* %311, %Type_Info** %312
	store %..rawptr %310, %..rawptr* %313
	%314 = load %..any, %..any* %57, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %59
	store [1 x %..any] zeroinitializer, [1 x %..any]* %60
	%315 = getelementptr inbounds [1 x %..any], [1 x %..any]* %60, i64 0, i32 0
	store %..any %314, %..any* %315
	%316 = getelementptr inbounds [1 x %..any], [1 x %..any]* %60, i64 0, i32 0
	%317 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %59, i64 0, i32 0
	store %..any* %316, %..any** %317
	%318 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %59, i64 0, i32 1
	store i64 1, i64* %318
	%319 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %59, i64 0, i32 2
	store i64 1, i64* %319
	%320 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %59, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b6, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %320)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%321 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%322 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %321, i64 0, i32 0
	%323 = load i16, i16* %322, align 2
	%324 = and i16 %323, 16384
	%325 = icmp eq i16 %324, 16384
	store %..any zeroinitializer, %..any* %61
	store i1 zeroinitializer, i1* %62
	store i1 %325, i1* %62
	%326 = bitcast i1* %62 to %..rawptr
	%327 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%328 = getelementptr inbounds %..any, %..any* %61, i64 0, i32 0
	%329 = getelementptr inbounds %..any, %..any* %61, i64 0, i32 1
	store %Type_Info* %327, %Type_Info** %328
	store %..rawptr %326, %..rawptr* %329
	%330 = load %..any, %..any* %61, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %63
	store [1 x %..any] zeroinitializer, [1 x %..any]* %64
	%331 = getelementptr inbounds [1 x %..any], [1 x %..any]* %64, i64 0, i32 0
	store %..any %330, %..any* %331
	%332 = getelementptr inbounds [1 x %..any], [1 x %..any]* %64, i64 0, i32 0
	%333 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %63, i64 0, i32 0
	store %..any* %332, %..any** %333
	%334 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %63, i64 0, i32 1
	store i64 1, i64* %334
	%335 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %63, i64 0, i32 2
	store i64 1, i64* %335
	%336 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %63, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b7, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %336)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%337 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%338 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %337, i64 0, i32 0
	%339 = load i16, i16* %338, align 2
	%340 = and i16 %339, 32768
	%341 = icmp eq i16 %340, 32768
	store %..any zeroinitializer, %..any* %65
	store i1 zeroinitializer, i1* %66
	store i1 %341, i1* %66
	%342 = bitcast i1* %66 to %..rawptr
	%343 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%344 = getelementptr inbounds %..any, %..any* %65, i64 0, i32 0
	%345 = getelementptr inbounds %..any, %..any* %65, i64 0, i32 1
	store %Type_Info* %343, %Type_Info** %344
	store %..rawptr %342, %..rawptr* %345
	%346 = load %..any, %..any* %65, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %67
	store [1 x %..any] zeroinitializer, [1 x %..any]* %68
	%347 = getelementptr inbounds [1 x %..any], [1 x %..any]* %68, i64 0, i32 0
	store %..any %346, %..any* %347
	%348 = getelementptr inbounds [1 x %..any], [1 x %..any]* %68, i64 0, i32 0
	%349 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 0
	store %..any* %348, %..any** %349
	%350 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 1
	store i64 1, i64* %350
	%351 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %67, i64 0, i32 2
	store i64 1, i64* %351
	%352 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %67, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$1b8, i64 0, i32 0), i64 17}, {%..any*, i64, i64} %352)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %69
	%353 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %69, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.__str$1b9, i64 0, i32 0), i64 15}, {%..any*, i64, i64} %353)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%354 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%355 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %354, i64 0, i32 1
	%356 = load i8, i8* %355, align 1
	; SelectorExpr
	; SelectorExpr
	%357 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%358 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %357, i64 0, i32 1
	%359 = load i8, i8* %358, align 1
	; cast - cast
	%360 = uitofp i8 %359 to float
	%361 = fdiv float %360, 0x406fe00000000000
	%362 = fmul float %361, 0x4059000000000000
	store %..any zeroinitializer, %..any* %70
	%363 = bitcast i8* %355 to %..rawptr
	%364 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%365 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 0
	%366 = getelementptr inbounds %..any, %..any* %70, i64 0, i32 1
	store %Type_Info* %364, %Type_Info** %365
	store %..rawptr %363, %..rawptr* %366
	%367 = load %..any, %..any* %70, align 8
	store %..any zeroinitializer, %..any* %71
	store float zeroinitializer, float* %72
	store float %362, float* %72
	%368 = bitcast float* %72 to %..rawptr
	%369 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%370 = getelementptr inbounds %..any, %..any* %71, i64 0, i32 0
	%371 = getelementptr inbounds %..any, %..any* %71, i64 0, i32 1
	store %Type_Info* %369, %Type_Info** %370
	store %..rawptr %368, %..rawptr* %371
	%372 = load %..any, %..any* %71, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %73
	store [2 x %..any] zeroinitializer, [2 x %..any]* %74
	%373 = getelementptr inbounds [2 x %..any], [2 x %..any]* %74, i64 0, i32 0
	store %..any %367, %..any* %373
	%374 = getelementptr inbounds [2 x %..any], [2 x %..any]* %74, i64 0, i32 1
	store %..any %372, %..any* %374
	%375 = getelementptr inbounds [2 x %..any], [2 x %..any]* %74, i64 0, i32 0
	%376 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %73, i64 0, i32 0
	store %..any* %375, %..any** %376
	%377 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %73, i64 0, i32 1
	store i64 2, i64* %377
	%378 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %73, i64 0, i32 2
	store i64 2, i64* %378
	%379 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %73, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1ba, i64 0, i32 0), i64 25}, {%..any*, i64, i64} %379)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%380 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%381 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %380, i64 0, i32 2
	%382 = load i8, i8* %381, align 1
	; SelectorExpr
	; SelectorExpr
	%383 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%384 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %383, i64 0, i32 2
	%385 = load i8, i8* %384, align 1
	; cast - cast
	%386 = uitofp i8 %385 to float
	%387 = fdiv float %386, 0x406fe00000000000
	%388 = fmul float %387, 0x4059000000000000
	store %..any zeroinitializer, %..any* %75
	%389 = bitcast i8* %381 to %..rawptr
	%390 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%391 = getelementptr inbounds %..any, %..any* %75, i64 0, i32 0
	%392 = getelementptr inbounds %..any, %..any* %75, i64 0, i32 1
	store %Type_Info* %390, %Type_Info** %391
	store %..rawptr %389, %..rawptr* %392
	%393 = load %..any, %..any* %75, align 8
	store %..any zeroinitializer, %..any* %76
	store float zeroinitializer, float* %77
	store float %388, float* %77
	%394 = bitcast float* %77 to %..rawptr
	%395 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%396 = getelementptr inbounds %..any, %..any* %76, i64 0, i32 0
	%397 = getelementptr inbounds %..any, %..any* %76, i64 0, i32 1
	store %Type_Info* %395, %Type_Info** %396
	store %..rawptr %394, %..rawptr* %397
	%398 = load %..any, %..any* %76, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %78
	store [2 x %..any] zeroinitializer, [2 x %..any]* %79
	%399 = getelementptr inbounds [2 x %..any], [2 x %..any]* %79, i64 0, i32 0
	store %..any %393, %..any* %399
	%400 = getelementptr inbounds [2 x %..any], [2 x %..any]* %79, i64 0, i32 1
	store %..any %398, %..any* %400
	%401 = getelementptr inbounds [2 x %..any], [2 x %..any]* %79, i64 0, i32 0
	%402 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %78, i64 0, i32 0
	store %..any* %401, %..any** %402
	%403 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %78, i64 0, i32 1
	store i64 2, i64* %403
	%404 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %78, i64 0, i32 2
	store i64 2, i64* %404
	%405 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %78, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$1bb, i64 0, i32 0), i64 25}, {%..any*, i64, i64} %405)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %80
	%406 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %80, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$1bc, i64 0, i32 0), i64 13}, {%..any*, i64, i64} %406)
	; SelectorExpr
	call ccc void @igIndent(float 0x4024000000000000)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%407 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%408 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %407, i64 0, i32 3
	%409 = load i16, i16* %408, align 2
	; SelectorExpr
	; SelectorExpr
	%410 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%411 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %410, i64 0, i32 4
	%412 = load i16, i16* %411, align 2
	store %..any zeroinitializer, %..any* %81
	%413 = bitcast i16* %408 to %..rawptr
	%414 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%415 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%416 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	store %Type_Info* %414, %Type_Info** %415
	store %..rawptr %413, %..rawptr* %416
	%417 = load %..any, %..any* %81, align 8
	store %..any zeroinitializer, %..any* %82
	%418 = bitcast i16* %411 to %..rawptr
	%419 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%420 = getelementptr inbounds %..any, %..any* %82, i64 0, i32 0
	%421 = getelementptr inbounds %..any, %..any* %82, i64 0, i32 1
	store %Type_Info* %419, %Type_Info** %420
	store %..rawptr %418, %..rawptr* %421
	%422 = load %..any, %..any* %82, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %83
	store [2 x %..any] zeroinitializer, [2 x %..any]* %84
	%423 = getelementptr inbounds [2 x %..any], [2 x %..any]* %84, i64 0, i32 0
	store %..any %417, %..any* %423
	%424 = getelementptr inbounds [2 x %..any], [2 x %..any]* %84, i64 0, i32 1
	store %..any %422, %..any* %424
	%425 = getelementptr inbounds [2 x %..any], [2 x %..any]* %84, i64 0, i32 0
	%426 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %83, i64 0, i32 0
	store %..any* %425, %..any** %426
	%427 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %83, i64 0, i32 1
	store i64 2, i64* %427
	%428 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %83, i64 0, i32 2
	store i64 2, i64* %428
	%429 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %83, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1bd, i64 0, i32 0), i64 21}, {%..any*, i64, i64} %429)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%430 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%431 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %430, i64 0, i32 5
	%432 = load i16, i16* %431, align 2
	; SelectorExpr
	; SelectorExpr
	%433 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %4, i64 0, i32 1
	%434 = getelementptr inbounds %jaze_xinput-16.GamepadState, %jaze_xinput-16.GamepadState* %433, i64 0, i32 6
	%435 = load i16, i16* %434, align 2
	store %..any zeroinitializer, %..any* %85
	%436 = bitcast i16* %431 to %..rawptr
	%437 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%438 = getelementptr inbounds %..any, %..any* %85, i64 0, i32 0
	%439 = getelementptr inbounds %..any, %..any* %85, i64 0, i32 1
	store %Type_Info* %437, %Type_Info** %438
	store %..rawptr %436, %..rawptr* %439
	%440 = load %..any, %..any* %85, align 8
	store %..any zeroinitializer, %..any* %86
	%441 = bitcast i16* %434 to %..rawptr
	%442 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	%443 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 0
	%444 = getelementptr inbounds %..any, %..any* %86, i64 0, i32 1
	store %Type_Info* %442, %Type_Info** %443
	store %..rawptr %441, %..rawptr* %444
	%445 = load %..any, %..any* %86, align 8
	; variadic call argument generation
	store {%..any*, i64, i64} zeroinitializer, {%..any*, i64, i64}* %87
	store [2 x %..any] zeroinitializer, [2 x %..any]* %88
	%446 = getelementptr inbounds [2 x %..any], [2 x %..any]* %88, i64 0, i32 0
	store %..any %440, %..any* %446
	%447 = getelementptr inbounds [2 x %..any], [2 x %..any]* %88, i64 0, i32 1
	store %..any %445, %..any* %447
	%448 = getelementptr inbounds [2 x %..any], [2 x %..any]* %88, i64 0, i32 0
	%449 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %87, i64 0, i32 0
	store %..any* %448, %..any** %449
	%450 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %87, i64 0, i32 1
	store i64 2, i64* %450
	%451 = getelementptr inbounds {%..any*, i64, i64}, {%..any*, i64, i64}* %87, i64 0, i32 2
	store i64 2, i64* %451
	%452 = load {%..any*, i64, i64}, {%..any*, i64, i64}* %87, align 8
	call void @.imgui-8.Text(%..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$1be, i64 0, i32 0), i64 21}, {%..any*, i64, i64} %452)
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	; SelectorExpr
	call ccc void @igSeparator()
	; SelectorExpr
	call ccc void @igUnindent(float 0x4024000000000000)
	br label %if.done-7

if.done-7:
	br label %for.interval.loop-1

for.interval.done-8:
	; SelectorExpr
	call ccc void @igEnd()
	ret void
}

define void @.jaze_imgui-15.SetStyle() {
decls-0:
	%0 = alloca %imgui-8.GuiStyle*, align 8
	; style
	store %imgui-8.GuiStyle* zeroinitializer, %imgui-8.GuiStyle** %0
		%1 = call ccc %imgui-8.GuiStyle* @igGetStyle()
	store %imgui-8.GuiStyle* %1, %imgui-8.GuiStyle** %0
	; AssignStmt
	; SelectorExpr
	%2 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%3 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %2, i64 0
	%4 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %3, i64 0, i32 3
	store float 0x4000000000000000, float* %4
	; AssignStmt
	; SelectorExpr
	%5 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%6 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %5, i64 0
	%7 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %6, i64 0, i32 5
	store float 0x4000000000000000, float* %7
	; AssignStmt
	; SelectorExpr
	%8 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%9 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %8, i64 0
	%10 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %9, i64 0, i32 7
	store float 0x4000000000000000, float* %10
	; AssignStmt
	; SelectorExpr
	%11 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%12 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %11, i64 0
	%13 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %12, i64 0, i32 16
	store float 0x4000000000000000, float* %13
	; AssignStmt
	; SelectorExpr
	%14 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%15 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %14, i64 0
	%16 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %15, i64 0, i32 13
	store float 0x402e000000000000, float* %16
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%17 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%18 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %17, i64 0
	%19 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %18, i64 0, i32 22
	%20 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %19, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1bf, i64 0, i32 0), i64 48}, i64 32, i64 25, i64 0, i64 43)
	store %imgui-8.Vec4 {float 0x3fcc1c1c00000000, float 0x3fcc1c1c00000000, float 0x3fcc1c1c00000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %20
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%21 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%22 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %21, i64 0
	%23 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %22, i64 0, i32 22
	%24 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %23, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c0, i64 0, i32 0), i64 48}, i64 33, i64 25, i64 1, i64 43)
	store %imgui-8.Vec4 {float 0x3fe6969680000000, float 0x3fe6969680000000, float 0x3fe6969680000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %24
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%25 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%26 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %25, i64 0
	%27 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %26, i64 0, i32 22
	%28 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %27, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c1, i64 0, i32 0), i64 48}, i64 35, i64 25, i64 2, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3fee1e1e00000000}, %imgui-8.Vec4* %28
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%29 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%30 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %29, i64 0
	%31 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %30, i64 0, i32 22
	%32 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %31, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c2, i64 0, i32 0), i64 48}, i64 36, i64 25, i64 3, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x3ff0000000000000, float 0x0000000000000000}, %imgui-8.Vec4* %32
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%33 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%34 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %33, i64 0
	%35 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %34, i64 0, i32 22
	%36 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %35, i64 0, i32 4
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c3, i64 0, i32 0), i64 48}, i64 38, i64 25, i64 4, i64 43)
	store %imgui-8.Vec4 {float 0x3fef5f5f40000000, float 0x3fef5f5f40000000, float 0x3fef5f5f40000000, float 0x3fee1e1e00000000}, %imgui-8.Vec4* %36
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%37 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%38 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %37, i64 0
	%39 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %38, i64 0, i32 22
	%40 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %39, i64 0, i32 5
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c4, i64 0, i32 0), i64 48}, i64 40, i64 25, i64 5, i64 43)
	store %imgui-8.Vec4 {float 0x3fe1919180000000, float 0x3fe1919180000000, float 0x3fe1919180000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %40
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%41 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%42 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %41, i64 0
	%43 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %42, i64 0, i32 22
	%44 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %43, i64 0, i32 6
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c5, i64 0, i32 0), i64 48}, i64 41, i64 25, i64 6, i64 43)
	store %imgui-8.Vec4 {float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3fa4141400000000}, %imgui-8.Vec4* %44
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%45 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%46 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %45, i64 0
	%47 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %46, i64 0, i32 22
	%48 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %47, i64 0, i32 7
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c6, i64 0, i32 0), i64 48}, i64 43, i64 25, i64 7, i64 43)
	store %imgui-8.Vec4 {float 0x3feafafae0000000, float 0x3feafafae0000000, float 0x3feafafae0000000, float 0x3fdcdcdcc0000000}, %imgui-8.Vec4* %48
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%49 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%50 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %49, i64 0
	%51 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %50, i64 0, i32 22
	%52 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %51, i64 0, i32 10
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c7, i64 0, i32 0), i64 48}, i64 45, i64 25, i64 10, i64 43)
	store %imgui-8.Vec4 {float 0x3fe9191900000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %52
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%53 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%54 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %53, i64 0
	%55 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %54, i64 0, i32 22
	%56 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %55, i64 0, i32 11
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c8, i64 0, i32 0), i64 48}, i64 46, i64 25, i64 11, i64 43)
	store %imgui-8.Vec4 {float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fe9999980000000, float 0x3fd9999980000000}, %imgui-8.Vec4* %56
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%57 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%58 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %57, i64 0
	%59 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %58, i64 0, i32 22
	%60 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %59, i64 0, i32 12
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1c9, i64 0, i32 0), i64 48}, i64 47, i64 25, i64 12, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %60
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%61 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%62 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %61, i64 0
	%63 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %62, i64 0, i32 22
	%64 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %63, i64 0, i32 13
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ca, i64 0, i32 0), i64 48}, i64 49, i64 25, i64 13, i64 43)
	store %imgui-8.Vec4 {float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %64
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%65 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%66 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %65, i64 0
	%67 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %66, i64 0, i32 22
	%68 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %67, i64 0, i32 14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1cb, i64 0, i32 0), i64 48}, i64 51, i64 25, i64 14, i64 43)
	store %imgui-8.Vec4 {float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee1e1e00000000, float 0x3fee9e9e80000000}, %imgui-8.Vec4* %68
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%69 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%70 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %69, i64 0
	%71 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %70, i64 0, i32 22
	%72 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %71, i64 0, i32 15
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1cc, i64 0, i32 0), i64 48}, i64 52, i64 25, i64 15, i64 43)
	store %imgui-8.Vec4 {float 0x3fe9999980000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fd3535340000000}, %imgui-8.Vec4* %72
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%73 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%74 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %73, i64 0
	%75 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %74, i64 0, i32 22
	%76 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %75, i64 0, i32 16
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1cd, i64 0, i32 0), i64 48}, i64 53, i64 25, i64 16, i64 43)
	store %imgui-8.Vec4 {float 0x3fee1e1e00000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fd9999980000000}, %imgui-8.Vec4* %76
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%77 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%78 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %77, i64 0
	%79 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %78, i64 0, i32 22
	%80 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %79, i64 0, i32 17
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ce, i64 0, i32 0), i64 48}, i64 54, i64 25, i64 17, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3fe0101000000000, float 0x3fe0101000000000, float 0x3fd9999980000000}, %imgui-8.Vec4* %80
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%81 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%82 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %81, i64 0
	%83 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %82, i64 0, i32 22
	%84 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %83, i64 0, i32 18
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1cf, i64 0, i32 0), i64 48}, i64 56, i64 25, i64 18, i64 43)
	store %imgui-8.Vec4 {float 0x3fecdcdcc0000000, float 0x3fecdcdcc0000000, float 0x3fecdcdcc0000000, float 0x3fef9f9f80000000}, %imgui-8.Vec4* %84
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%85 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%86 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %85, i64 0
	%87 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %86, i64 0, i32 22
	%88 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %87, i64 0, i32 19
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d0, i64 0, i32 0), i64 48}, i64 58, i64 25, i64 19, i64 43)
	store %imgui-8.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fef9f9f80000000}, %imgui-8.Vec4* %88
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%89 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%90 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %89, i64 0
	%91 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %90, i64 0, i32 22
	%92 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %91, i64 0, i32 20
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d1, i64 0, i32 0), i64 48}, i64 60, i64 25, i64 20, i64 43)
	store %imgui-8.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000}, %imgui-8.Vec4* %92
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%93 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%94 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %93, i64 0
	%95 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %94, i64 0, i32 22
	%96 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %95, i64 0, i32 21
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d2, i64 0, i32 0), i64 48}, i64 61, i64 25, i64 21, i64 43)
	store %imgui-8.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %96
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%97 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%98 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %97, i64 0
	%99 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %98, i64 0, i32 22
	%100 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %99, i64 0, i32 22
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d3, i64 0, i32 0), i64 48}, i64 63, i64 25, i64 22, i64 43)
	store %imgui-8.Vec4 {float 0x3fe9191900000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3fe3333320000000}, %imgui-8.Vec4* %100
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%101 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%102 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %101, i64 0
	%103 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %102, i64 0, i32 22
	%104 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %103, i64 0, i32 23
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d4, i64 0, i32 0), i64 48}, i64 64, i64 25, i64 23, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3fc9191900000000, float 0x3fc9191900000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %104
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%105 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%106 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %105, i64 0
	%107 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %106, i64 0, i32 22
	%108 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %107, i64 0, i32 25
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d5, i64 0, i32 0), i64 48}, i64 66, i64 25, i64 25, i64 43)
	store %imgui-8.Vec4 {float 0x3fee1e1e00000000, float 0x3fd9999980000000, float 0x3fd9999980000000, float 0x3fdcdcdcc0000000}, %imgui-8.Vec4* %108
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%109 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%110 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %109, i64 0
	%111 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %110, i64 0, i32 22
	%112 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %111, i64 0, i32 26
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d6, i64 0, i32 0), i64 48}, i64 67, i64 25, i64 26, i64 43)
	store %imgui-8.Vec4 {float 0x3fee1e1e00000000, float 0x3fdcdcdcc0000000, float 0x3fe3737360000000, float 0x3fe9999980000000}, %imgui-8.Vec4* %112
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%113 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%114 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %113, i64 0
	%115 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %114, i64 0, i32 22
	%116 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %115, i64 0, i32 27
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d7, i64 0, i32 0), i64 48}, i64 68, i64 25, i64 27, i64 43)
	store %imgui-8.Vec4 {float 0x3febdbdbc0000000, float 0x3fe0f0f0e0000000, float 0x3fe2323220000000, float 0x3fe9999980000000}, %imgui-8.Vec4* %116
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%117 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%118 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %117, i64 0
	%119 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %118, i64 0, i32 22
	%120 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %119, i64 0, i32 31
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d8, i64 0, i32 0), i64 48}, i64 70, i64 25, i64 31, i64 43)
	store %imgui-8.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fd3535340000000}, %imgui-8.Vec4* %120
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%121 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%122 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %121, i64 0
	%123 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %122, i64 0, i32 22
	%124 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %123, i64 0, i32 32
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1d9, i64 0, i32 0), i64 48}, i64 71, i64 25, i64 32, i64 43)
	store %imgui-8.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe3333320000000}, %imgui-8.Vec4* %124
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%125 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%126 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %125, i64 0
	%127 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %126, i64 0, i32 22
	%128 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %127, i64 0, i32 33
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1da, i64 0, i32 0), i64 48}, i64 72, i64 25, i64 33, i64 43)
	store %imgui-8.Vec4 {float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fe2d2d2c0000000, float 0x3fecdcdcc0000000}, %imgui-8.Vec4* %128
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%129 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%130 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %129, i64 0
	%131 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %130, i64 0, i32 22
	%132 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %131, i64 0, i32 37
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1db, i64 0, i32 0), i64 48}, i64 74, i64 25, i64 37, i64 43)
	store %imgui-8.Vec4 {float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3fd9191900000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %132
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%133 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%134 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %133, i64 0
	%135 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %134, i64 0, i32 22
	%136 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %135, i64 0, i32 40
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1dc, i64 0, i32 0), i64 48}, i64 75, i64 25, i64 40, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x3fdd1d1d00000000, float 0x0000000000000000, float 0x3ff0000000000000}, %imgui-8.Vec4* %136
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%137 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%138 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %137, i64 0
	%139 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %138, i64 0, i32 22
	%140 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %139, i64 0, i32 41
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1dd, i64 0, i32 0), i64 48}, i64 77, i64 25, i64 41, i64 43)
	store %imgui-8.Vec4 {float 0x3ff0000000000000, float 0x0000000000000000, float 0x0000000000000000, float 0x3fd6565640000000}, %imgui-8.Vec4* %140
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%141 = load %imgui-8.GuiStyle*, %imgui-8.GuiStyle** %0, align 8
	%142 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %141, i64 0
	%143 = getelementptr inbounds %imgui-8.GuiStyle, %imgui-8.GuiStyle* %142, i64 0, i32 22
	%144 = getelementptr inbounds [43 x %imgui-8.Vec4], [43 x %imgui-8.Vec4]* %143, i64 0, i32 42
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1de, i64 0, i32 0), i64 48}, i64 79, i64 25, i64 42, i64 43)
	store %imgui-8.Vec4 {float 0x3fc9999980000000, float 0x3fc9999980000000, float 0x3fc9999980000000, float 0x3fd6969680000000}, %imgui-8.Vec4* %144
	ret void
}

define void @.jaze_imgui-15.Init(%..rawptr %windowHandle) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %imgui-8.GuiIO*, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %..string, align 8
	%4 = alloca %jaze_gl-12.Shader, align 8
	%5 = alloca i1, align 1
	%6 = alloca %jaze_gl-12.Shader, align 8
	%7 = alloca i1, align 1
	%8 = alloca %__Map_Header, align 8
	%9 = alloca %__Map_Key, align 8
	%10 = alloca i32, align 4
	%11 = alloca %__Map_Header, align 8
	%12 = alloca %__Map_Key, align 8
	%13 = alloca i32, align 4
	%14 = alloca %__Map_Header, align 8
	%15 = alloca %__Map_Key, align 8
	%16 = alloca i32, align 4
	%17 = alloca %__Map_Header, align 8
	%18 = alloca %__Map_Key, align 8
	%19 = alloca i32, align 4
	%20 = alloca %__Map_Header, align 8
	%21 = alloca %__Map_Key, align 8
	%22 = alloca i32, align 4
	%23 = alloca {i32, i1}, align 4
	%24 = alloca %__Map_Header, align 8
	%25 = alloca %__Map_Key, align 8
	%26 = alloca {i32, i1}, align 4
	%27 = alloca %__Map_Header, align 8
	%28 = alloca %__Map_Key, align 8
	%29 = alloca {i32, i1}, align 4
	%30 = alloca %__Map_Header, align 8
	%31 = alloca %__Map_Key, align 8
	%32 = alloca {i32, i1}, align 4
	%33 = alloca %__Map_Header, align 8
	%34 = alloca %__Map_Key, align 8
	%35 = alloca {i32, i1}, align 4
	%36 = alloca %__Map_Header, align 8
	%37 = alloca %__Map_Key, align 8
	%38 = alloca {i32, i1}, align 4
	%39 = alloca %__Map_Header, align 8
	%40 = alloca %__Map_Key, align 8
	%41 = alloca i8*, align 8
	%42 = alloca i32, align 4
	%43 = alloca i32, align 4
	%44 = alloca i32, align 4
	%45 = alloca {i32*, i64, i64}, align 8
	%46 = alloca [1 x i32], align 4
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %windowHandle, %..rawptr* %0
	; io
	store %imgui-8.GuiIO* zeroinitializer, %imgui-8.GuiIO** %1
		%47 = call ccc %imgui-8.GuiIO* @igGetIO()
	store %imgui-8.GuiIO* %47, %imgui-8.GuiIO** %1
	; AssignStmt
	; SelectorExpr
	%48 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%49 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %48, i64 0
	%50 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %49, i64 0, i32 28
	%51 = load %..rawptr, %..rawptr* %0, align 8
	store %..rawptr %51, %..rawptr* %50
	; AssignStmt
	; SelectorExpr
	%52 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%53 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %52, i64 0
	%54 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %53, i64 0, i32 22
	store void (%imgui-8.DrawData*)* @.jaze_imgui-15.RenderProc, void (%imgui-8.DrawData*)** %54
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%55 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%56 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %55, i64 0
	%57 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %56, i64 0, i32 8
	%58 = getelementptr inbounds [19 x i32], [19 x i32]* %57, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1df, i64 0, i32 0), i64 48}, i64 87, i64 22, i64 0, i64 19)
	store i32 9, i32* %58
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%59 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%60 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %59, i64 0
	%61 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %60, i64 0, i32 8
	%62 = getelementptr inbounds [19 x i32], [19 x i32]* %61, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e0, i64 0, i32 0), i64 48}, i64 88, i64 22, i64 1, i64 19)
	store i32 37, i32* %62
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%63 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%64 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %63, i64 0
	%65 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %64, i64 0, i32 8
	%66 = getelementptr inbounds [19 x i32], [19 x i32]* %65, i64 0, i32 2
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e1, i64 0, i32 0), i64 48}, i64 89, i64 22, i64 2, i64 19)
	store i32 39, i32* %66
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%67 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%68 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %67, i64 0
	%69 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %68, i64 0, i32 8
	%70 = getelementptr inbounds [19 x i32], [19 x i32]* %69, i64 0, i32 3
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e2, i64 0, i32 0), i64 48}, i64 90, i64 22, i64 3, i64 19)
	store i32 38, i32* %70
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%71 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%72 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %71, i64 0
	%73 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %72, i64 0, i32 8
	%74 = getelementptr inbounds [19 x i32], [19 x i32]* %73, i64 0, i32 4
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e3, i64 0, i32 0), i64 48}, i64 91, i64 22, i64 4, i64 19)
	store i32 40, i32* %74
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%75 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%76 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %75, i64 0
	%77 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %76, i64 0, i32 8
	%78 = getelementptr inbounds [19 x i32], [19 x i32]* %77, i64 0, i32 5
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e4, i64 0, i32 0), i64 48}, i64 92, i64 22, i64 5, i64 19)
	store i32 34, i32* %78
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%79 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%80 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %79, i64 0
	%81 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %80, i64 0, i32 8
	%82 = getelementptr inbounds [19 x i32], [19 x i32]* %81, i64 0, i32 6
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e5, i64 0, i32 0), i64 48}, i64 93, i64 22, i64 6, i64 19)
	store i32 33, i32* %82
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%83 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%84 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %83, i64 0
	%85 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %84, i64 0, i32 8
	%86 = getelementptr inbounds [19 x i32], [19 x i32]* %85, i64 0, i32 7
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e6, i64 0, i32 0), i64 48}, i64 94, i64 22, i64 7, i64 19)
	store i32 36, i32* %86
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%87 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%88 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %87, i64 0
	%89 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %88, i64 0, i32 8
	%90 = getelementptr inbounds [19 x i32], [19 x i32]* %89, i64 0, i32 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e7, i64 0, i32 0), i64 48}, i64 95, i64 22, i64 8, i64 19)
	store i32 35, i32* %90
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%91 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%92 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %91, i64 0
	%93 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %92, i64 0, i32 8
	%94 = getelementptr inbounds [19 x i32], [19 x i32]* %93, i64 0, i32 9
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e8, i64 0, i32 0), i64 48}, i64 96, i64 22, i64 9, i64 19)
	store i32 46, i32* %94
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%95 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%96 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %95, i64 0
	%97 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %96, i64 0, i32 8
	%98 = getelementptr inbounds [19 x i32], [19 x i32]* %97, i64 0, i32 10
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1e9, i64 0, i32 0), i64 48}, i64 97, i64 22, i64 10, i64 19)
	store i32 8, i32* %98
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%99 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%100 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %99, i64 0
	%101 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %100, i64 0, i32 8
	%102 = getelementptr inbounds [19 x i32], [19 x i32]* %101, i64 0, i32 11
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ea, i64 0, i32 0), i64 48}, i64 98, i64 22, i64 11, i64 19)
	store i32 13, i32* %102
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%103 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%104 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %103, i64 0
	%105 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %104, i64 0, i32 8
	%106 = getelementptr inbounds [19 x i32], [19 x i32]* %105, i64 0, i32 12
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1eb, i64 0, i32 0), i64 48}, i64 99, i64 22, i64 12, i64 19)
	store i32 27, i32* %106
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%107 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%108 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %107, i64 0
	%109 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %108, i64 0, i32 8
	%110 = getelementptr inbounds [19 x i32], [19 x i32]* %109, i64 0, i32 13
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ec, i64 0, i32 0), i64 48}, i64 100, i64 22, i64 13, i64 19)
	store i32 65, i32* %110
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%111 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%112 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %111, i64 0
	%113 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %112, i64 0, i32 8
	%114 = getelementptr inbounds [19 x i32], [19 x i32]* %113, i64 0, i32 14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ed, i64 0, i32 0), i64 48}, i64 101, i64 22, i64 14, i64 19)
	store i32 67, i32* %114
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%115 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%116 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %115, i64 0
	%117 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %116, i64 0, i32 8
	%118 = getelementptr inbounds [19 x i32], [19 x i32]* %117, i64 0, i32 15
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ee, i64 0, i32 0), i64 48}, i64 102, i64 22, i64 15, i64 19)
	store i32 86, i32* %118
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%119 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%120 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %119, i64 0
	%121 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %120, i64 0, i32 8
	%122 = getelementptr inbounds [19 x i32], [19 x i32]* %121, i64 0, i32 16
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1ef, i64 0, i32 0), i64 48}, i64 103, i64 22, i64 16, i64 19)
	store i32 88, i32* %122
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%123 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%124 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %123, i64 0
	%125 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %124, i64 0, i32 8
	%126 = getelementptr inbounds [19 x i32], [19 x i32]* %125, i64 0, i32 17
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1f0, i64 0, i32 0), i64 48}, i64 104, i64 22, i64 17, i64 19)
	store i32 89, i32* %126
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%127 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%128 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %127, i64 0
	%129 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %128, i64 0, i32 8
	%130 = getelementptr inbounds [19 x i32], [19 x i32]* %129, i64 0, i32 18
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1f1, i64 0, i32 0), i64 48}, i64 105, i64 22, i64 18, i64 19)
	store i32 90, i32* %130
	; vertexShaderString
	store %..string zeroinitializer, %..string* %2
		store %..string {i8* getelementptr inbounds ([332 x i8], [332 x i8]* @.__str$1f2, i64 0, i32 0), i64 332}, %..string* %2
	; fragmentShaderString
	store %..string zeroinitializer, %..string* %3
		store %..string {i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.__str$1f3, i64 0, i32 0), i64 243}, %..string* %3
	; AssignStmt
	; SelectorExpr
	%131 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	; SelectorExpr
	%132 = call %jaze_gl-12.Program @.jaze_gl-12.CreateProgram()
	store %jaze_gl-12.Program %132, %jaze_gl-12.Program* %131
	; vertexShader
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %4
		; ok1
	store i1 zeroinitializer, i1* %5
		; SelectorExpr
	%133 = load %..string, %..string* %2, align 8
	%134 = call {%jaze_gl-12.Shader, i1} @.jaze_gl-12.UtilCreateAndCompileShader(i32 35633, %..string %133)
	%135 = extractvalue {%jaze_gl-12.Shader, i1} %134, 0
	%136 = extractvalue {%jaze_gl-12.Shader, i1} %134, 1
	store %jaze_gl-12.Shader %135, %jaze_gl-12.Shader* %4
	store i1 %136, i1* %5
	; fragmentShader
	store %jaze_gl-12.Shader zeroinitializer, %jaze_gl-12.Shader* %6
		; ok2
	store i1 zeroinitializer, i1* %7
		; SelectorExpr
	%137 = load %..string, %..string* %3, align 8
	%138 = call {%jaze_gl-12.Shader, i1} @.jaze_gl-12.UtilCreateAndCompileShader(i32 35632, %..string %137)
	%139 = extractvalue {%jaze_gl-12.Shader, i1} %138, 0
	%140 = extractvalue {%jaze_gl-12.Shader, i1} %138, 1
	store %jaze_gl-12.Shader %139, %jaze_gl-12.Shader* %6
	store i1 %140, i1* %7
	; IfStmt
	%141 = load i1, i1* %5, align 1
	br i1 %141, label %cmp.or-1, label %if.then-2

cmp.or-1:
	%142 = load i1, i1* %7, align 1
	br i1 %142, label %if.done-3, label %if.then-2

if.then-2:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$1f4, i64 0, i32 0), i64 48}, i64 139, i64 15, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$1f5, i64 0, i32 0), i64 6})
	br label %if.done-3

if.done-3:
	; SelectorExpr
	; SelectorExpr
	%143 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%144 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %143, align 8
	%145 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %4, align 8
	call void @.jaze_gl-12.AttachShader(%jaze_gl-12.Program %144, %jaze_gl-12.Shader %145)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%146 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%147 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %146, i64 0, i32 2
	%148 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %4, align 8
	store %jaze_gl-12.Shader %148, %jaze_gl-12.Shader* %147
	; SelectorExpr
	; SelectorExpr
	%149 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%150 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %149, align 8
	%151 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %6, align 8
	call void @.jaze_gl-12.AttachShader(%jaze_gl-12.Program %150, %jaze_gl-12.Shader %151)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%152 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%153 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %152, i64 0, i32 3
	%154 = load %jaze_gl-12.Shader, %jaze_gl-12.Shader* %6, align 8
	store %jaze_gl-12.Shader %154, %jaze_gl-12.Shader* %153
	; SelectorExpr
	; SelectorExpr
	%155 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%156 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %155, align 8
	call void @.jaze_gl-12.LinkProgram(%jaze_gl-12.Program %156)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%157 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%158 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %157, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%159 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%160 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %159, align 8
	%161 = call i32 @.jaze_gl-12.GetUniformLocation(%jaze_gl-12.Program %160, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1f6, i64 0, i32 0), i64 7})
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	%162 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 0
	%163 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %158 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %163, %Raw_Dynamic_Map** %162
	%164 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 1
	store i1 true, i1* %164
	%165 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 2
	store i64 40, i64* %165
	%166 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 3
	store i64 8, i64* %166
	%167 = getelementptr inbounds %__Map_Header, %__Map_Header* %8, i64 0, i32 4
	store i64 32, i64* %167
	%168 = load %__Map_Header, %__Map_Header* %8, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	%169 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 0
	store i64 2829778445906215252, i64* %169
	%170 = getelementptr inbounds %__Map_Key, %__Map_Key* %9, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1f7, i64 0, i32 0), i64 7}, %..string* %170
	%171 = load %__Map_Key, %__Map_Key* %9, align 8
	store i32 zeroinitializer, i32* %10
	store i32 %161, i32* %10
	%172 = bitcast i32* %10 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %168, %__Map_Key %171, %..rawptr %172)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%173 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%174 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %173, i64 0, i32 0
	; SelectorExpr
	; SelectorExpr
	%175 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%176 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %175, align 8
	%177 = call i32 @.jaze_gl-12.GetUniformLocation(%jaze_gl-12.Program %176, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1f8, i64 0, i32 0), i64 7})
	store %__Map_Header zeroinitializer, %__Map_Header* %11
	%178 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 0
	%179 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %174 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %179, %Raw_Dynamic_Map** %178
	%180 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 1
	store i1 true, i1* %180
	%181 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 2
	store i64 40, i64* %181
	%182 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 3
	store i64 8, i64* %182
	%183 = getelementptr inbounds %__Map_Header, %__Map_Header* %11, i64 0, i32 4
	store i64 32, i64* %183
	%184 = load %__Map_Header, %__Map_Header* %11, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %12
	%185 = getelementptr inbounds %__Map_Key, %__Map_Key* %12, i64 0, i32 0
	store i64 -9017138883755609675, i64* %185
	%186 = getelementptr inbounds %__Map_Key, %__Map_Key* %12, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$1f9, i64 0, i32 0), i64 7}, %..string* %186
	%187 = load %__Map_Key, %__Map_Key* %12, align 8
	store i32 zeroinitializer, i32* %13
	store i32 %177, i32* %13
	%188 = bitcast i32* %13 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %184, %__Map_Key %187, %..rawptr %188)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%189 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%190 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %189, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%191 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%192 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %191, align 8
	%193 = call i32 @.jaze_gl-12.GetAttribLocation(%jaze_gl-12.Program %192, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1fa, i64 0, i32 0), i64 8})
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	%194 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 0
	%195 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %190 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %195, %Raw_Dynamic_Map** %194
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 1
	store i1 true, i1* %196
	%197 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 2
	store i64 40, i64* %197
	%198 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 3
	store i64 8, i64* %198
	%199 = getelementptr inbounds %__Map_Header, %__Map_Header* %14, i64 0, i32 4
	store i64 32, i64* %199
	%200 = load %__Map_Header, %__Map_Header* %14, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %15
	%201 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 0
	store i64 -4512294542364210646, i64* %201
	%202 = getelementptr inbounds %__Map_Key, %__Map_Key* %15, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$1fb, i64 0, i32 0), i64 8}, %..string* %202
	%203 = load %__Map_Key, %__Map_Key* %15, align 8
	store i32 zeroinitializer, i32* %16
	store i32 %193, i32* %16
	%204 = bitcast i32* %16 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %200, %__Map_Key %203, %..rawptr %204)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%205 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%206 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %205, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%207 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%208 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %207, align 8
	%209 = call i32 @.jaze_gl-12.GetAttribLocation(%jaze_gl-12.Program %208, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1fc, i64 0, i32 0), i64 2})
	store %__Map_Header zeroinitializer, %__Map_Header* %17
	%210 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 0
	%211 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %206 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %211, %Raw_Dynamic_Map** %210
	%212 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 1
	store i1 true, i1* %212
	%213 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 2
	store i64 40, i64* %213
	%214 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 3
	store i64 8, i64* %214
	%215 = getelementptr inbounds %__Map_Header, %__Map_Header* %17, i64 0, i32 4
	store i64 32, i64* %215
	%216 = load %__Map_Header, %__Map_Header* %17, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %18
	%217 = getelementptr inbounds %__Map_Key, %__Map_Key* %18, i64 0, i32 0
	store i64 662345837686521650, i64* %217
	%218 = getelementptr inbounds %__Map_Key, %__Map_Key* %18, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$1fd, i64 0, i32 0), i64 2}, %..string* %218
	%219 = load %__Map_Key, %__Map_Key* %18, align 8
	store i32 zeroinitializer, i32* %19
	store i32 %209, i32* %19
	%220 = bitcast i32* %19 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %216, %__Map_Key %219, %..rawptr %220)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%221 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%222 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %221, i64 0, i32 1
	; SelectorExpr
	; SelectorExpr
	%223 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%224 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %223, align 8
	%225 = call i32 @.jaze_gl-12.GetAttribLocation(%jaze_gl-12.Program %224, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1fe, i64 0, i32 0), i64 5})
	store %__Map_Header zeroinitializer, %__Map_Header* %20
	%226 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 0
	%227 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %222 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %227, %Raw_Dynamic_Map** %226
	%228 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 1
	store i1 true, i1* %228
	%229 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 2
	store i64 40, i64* %229
	%230 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 3
	store i64 8, i64* %230
	%231 = getelementptr inbounds %__Map_Header, %__Map_Header* %20, i64 0, i32 4
	store i64 32, i64* %231
	%232 = load %__Map_Header, %__Map_Header* %20, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %21
	%233 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 0
	store i64 3769135706557701272, i64* %233
	%234 = getelementptr inbounds %__Map_Key, %__Map_Key* %21, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$1ff, i64 0, i32 0), i64 5}, %..string* %234
	%235 = load %__Map_Key, %__Map_Key* %21, align 8
	store i32 zeroinitializer, i32* %22
	store i32 %225, i32* %22
	%236 = bitcast i32* %22 to %..rawptr
	call void @.__dynamic_map_set(%__Map_Header %232, %__Map_Key %235, %..rawptr %236)
	; AssignStmt
	; SelectorExpr
	%237 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 2
	; SelectorExpr
	%238 = call i32 @.jaze_gl-12.GenBuffer()
	; cast - cast
	store i32 %238, i32* %237
	; AssignStmt
	; SelectorExpr
	%239 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 3
	; SelectorExpr
	%240 = call i32 @.jaze_gl-12.GenBuffer()
	; cast - cast
	store i32 %240, i32* %239
	; AssignStmt
	; SelectorExpr
	%241 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 4
	; SelectorExpr
	%242 = call i32 @.jaze_gl-12.GenVertexArray()
	store i32 %242, i32* %241
	; SelectorExpr
	; SelectorExpr
	%243 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 2
	%244 = load i32, i32* %243, align 4
	call void @.jaze_gl-12.BindBuffer-1976290682192(i32 %244)
	; SelectorExpr
	; SelectorExpr
	%245 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 3
	%246 = load i32, i32* %245, align 4
	call void @.jaze_gl-12.BindBuffer-1976290682560(i32 %246)
	; SelectorExpr
	; SelectorExpr
	%247 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 4
	%248 = load i32, i32* %247, align 4
	call void @.jaze_gl-12.BindVertexArray(i32 %248)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%249 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%250 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %249, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %23
	store %__Map_Header zeroinitializer, %__Map_Header* %24
	%251 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 0
	%252 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %250 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %252, %Raw_Dynamic_Map** %251
	%253 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 1
	store i1 true, i1* %253
	%254 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 2
	store i64 40, i64* %254
	%255 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 3
	store i64 8, i64* %255
	%256 = getelementptr inbounds %__Map_Header, %__Map_Header* %24, i64 0, i32 4
	store i64 32, i64* %256
	%257 = load %__Map_Header, %__Map_Header* %24, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %25
	%258 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 0
	store i64 -4512294542364210646, i64* %258
	%259 = getelementptr inbounds %__Map_Key, %__Map_Key* %25, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$200, i64 0, i32 0), i64 8}, %..string* %259
	%260 = load %__Map_Key, %__Map_Key* %25, align 8
	%261 = call %..rawptr @.__dynamic_map_get(%__Map_Header %257, %__Map_Key %260)
	%262 = icmp ne %..rawptr %261, null
	%263 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 1
	store i1 %262, i1* %263
	br i1 %262, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%264 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 0
	%265 = bitcast %..rawptr %261 to i32*
	%266 = load i32, i32* %265, align 4
	store i32 %266, i32* %264
	br label %map.get.done-5

map.get.done-5:
	%267 = getelementptr inbounds {i32, i1}, {i32, i1}* %23, i64 0, i32 0
	%268 = load i32, i32* %267, align 4
	; cast - cast
	%269 = bitcast i32 %268 to i32
	call void @.jaze_gl-12.EnableVertexAttribArray(i32 %269)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%270 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%271 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %270, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %26
	store %__Map_Header zeroinitializer, %__Map_Header* %27
	%272 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 0
	%273 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %271 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %273, %Raw_Dynamic_Map** %272
	%274 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 1
	store i1 true, i1* %274
	%275 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 2
	store i64 40, i64* %275
	%276 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 3
	store i64 8, i64* %276
	%277 = getelementptr inbounds %__Map_Header, %__Map_Header* %27, i64 0, i32 4
	store i64 32, i64* %277
	%278 = load %__Map_Header, %__Map_Header* %27, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %28
	%279 = getelementptr inbounds %__Map_Key, %__Map_Key* %28, i64 0, i32 0
	store i64 662345837686521650, i64* %279
	%280 = getelementptr inbounds %__Map_Key, %__Map_Key* %28, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$201, i64 0, i32 0), i64 2}, %..string* %280
	%281 = load %__Map_Key, %__Map_Key* %28, align 8
	%282 = call %..rawptr @.__dynamic_map_get(%__Map_Header %278, %__Map_Key %281)
	%283 = icmp ne %..rawptr %282, null
	%284 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 1
	store i1 %283, i1* %284
	br i1 %283, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%285 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 0
	%286 = bitcast %..rawptr %282 to i32*
	%287 = load i32, i32* %286, align 4
	store i32 %287, i32* %285
	br label %map.get.done-7

map.get.done-7:
	%288 = getelementptr inbounds {i32, i1}, {i32, i1}* %26, i64 0, i32 0
	%289 = load i32, i32* %288, align 4
	; cast - cast
	%290 = bitcast i32 %289 to i32
	call void @.jaze_gl-12.EnableVertexAttribArray(i32 %290)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%291 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%292 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %291, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %29
	store %__Map_Header zeroinitializer, %__Map_Header* %30
	%293 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 0
	%294 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %292 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %294, %Raw_Dynamic_Map** %293
	%295 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 1
	store i1 true, i1* %295
	%296 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 2
	store i64 40, i64* %296
	%297 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 3
	store i64 8, i64* %297
	%298 = getelementptr inbounds %__Map_Header, %__Map_Header* %30, i64 0, i32 4
	store i64 32, i64* %298
	%299 = load %__Map_Header, %__Map_Header* %30, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %31
	%300 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 0
	store i64 3769135706557701272, i64* %300
	%301 = getelementptr inbounds %__Map_Key, %__Map_Key* %31, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$202, i64 0, i32 0), i64 5}, %..string* %301
	%302 = load %__Map_Key, %__Map_Key* %31, align 8
	%303 = call %..rawptr @.__dynamic_map_get(%__Map_Header %299, %__Map_Key %302)
	%304 = icmp ne %..rawptr %303, null
	%305 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 1
	store i1 %304, i1* %305
	br i1 %304, label %map.get.then-8, label %map.get.done-9

map.get.then-8:
	%306 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 0
	%307 = bitcast %..rawptr %303 to i32*
	%308 = load i32, i32* %307, align 4
	store i32 %308, i32* %306
	br label %map.get.done-9

map.get.done-9:
	%309 = getelementptr inbounds {i32, i1}, {i32, i1}* %29, i64 0, i32 0
	%310 = load i32, i32* %309, align 4
	; cast - cast
	%311 = bitcast i32 %310 to i32
	call void @.jaze_gl-12.EnableVertexAttribArray(i32 %311)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%312 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%313 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %312, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %32
	store %__Map_Header zeroinitializer, %__Map_Header* %33
	%314 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 0
	%315 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %313 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %315, %Raw_Dynamic_Map** %314
	%316 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 1
	store i1 true, i1* %316
	%317 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 2
	store i64 40, i64* %317
	%318 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 3
	store i64 8, i64* %318
	%319 = getelementptr inbounds %__Map_Header, %__Map_Header* %33, i64 0, i32 4
	store i64 32, i64* %319
	%320 = load %__Map_Header, %__Map_Header* %33, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %34
	%321 = getelementptr inbounds %__Map_Key, %__Map_Key* %34, i64 0, i32 0
	store i64 -4512294542364210646, i64* %321
	%322 = getelementptr inbounds %__Map_Key, %__Map_Key* %34, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$203, i64 0, i32 0), i64 8}, %..string* %322
	%323 = load %__Map_Key, %__Map_Key* %34, align 8
	%324 = call %..rawptr @.__dynamic_map_get(%__Map_Header %320, %__Map_Key %323)
	%325 = icmp ne %..rawptr %324, null
	%326 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 1
	store i1 %325, i1* %326
	br i1 %325, label %map.get.then-10, label %map.get.done-11

map.get.then-10:
	%327 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 0
	%328 = bitcast %..rawptr %324 to i32*
	%329 = load i32, i32* %328, align 4
	store i32 %329, i32* %327
	br label %map.get.done-11

map.get.done-11:
	%330 = getelementptr inbounds {i32, i1}, {i32, i1}* %32, i64 0, i32 0
	%331 = load i32, i32* %330, align 4
	; cast - cast
	%332 = bitcast i32 %331 to i32
	call void @.jaze_gl-12.VertexAttribPointer(i32 %332, i32 2, i32 5126, i1 false, i32 20, %..rawptr null)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%333 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%334 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %333, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %35
	store %__Map_Header zeroinitializer, %__Map_Header* %36
	%335 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 0
	%336 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %334 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %336, %Raw_Dynamic_Map** %335
	%337 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 1
	store i1 true, i1* %337
	%338 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 2
	store i64 40, i64* %338
	%339 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 3
	store i64 8, i64* %339
	%340 = getelementptr inbounds %__Map_Header, %__Map_Header* %36, i64 0, i32 4
	store i64 32, i64* %340
	%341 = load %__Map_Header, %__Map_Header* %36, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %37
	%342 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 0
	store i64 662345837686521650, i64* %342
	%343 = getelementptr inbounds %__Map_Key, %__Map_Key* %37, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$204, i64 0, i32 0), i64 2}, %..string* %343
	%344 = load %__Map_Key, %__Map_Key* %37, align 8
	%345 = call %..rawptr @.__dynamic_map_get(%__Map_Header %341, %__Map_Key %344)
	%346 = icmp ne %..rawptr %345, null
	%347 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 1
	store i1 %346, i1* %347
	br i1 %346, label %map.get.then-12, label %map.get.done-13

map.get.then-12:
	%348 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 0
	%349 = bitcast %..rawptr %345 to i32*
	%350 = load i32, i32* %349, align 4
	store i32 %350, i32* %348
	br label %map.get.done-13

map.get.done-13:
	%351 = getelementptr inbounds {i32, i1}, {i32, i1}* %35, i64 0, i32 0
	%352 = load i32, i32* %351, align 4
	; cast - cast
	%353 = bitcast i32 %352 to i32
	call void @.jaze_gl-12.VertexAttribPointer(i32 %353, i32 2, i32 5126, i1 false, i32 20, %..rawptr inttoptr (i64 8 to %..rawptr))
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%354 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%355 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %354, i64 0, i32 1
	store {i32, i1} zeroinitializer, {i32, i1}* %38
	store %__Map_Header zeroinitializer, %__Map_Header* %39
	%356 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 0
	%357 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %355 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %357, %Raw_Dynamic_Map** %356
	%358 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 1
	store i1 true, i1* %358
	%359 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 2
	store i64 40, i64* %359
	%360 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 3
	store i64 8, i64* %360
	%361 = getelementptr inbounds %__Map_Header, %__Map_Header* %39, i64 0, i32 4
	store i64 32, i64* %361
	%362 = load %__Map_Header, %__Map_Header* %39, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %40
	%363 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 0
	store i64 3769135706557701272, i64* %363
	%364 = getelementptr inbounds %__Map_Key, %__Map_Key* %40, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$205, i64 0, i32 0), i64 5}, %..string* %364
	%365 = load %__Map_Key, %__Map_Key* %40, align 8
	%366 = call %..rawptr @.__dynamic_map_get(%__Map_Header %362, %__Map_Key %365)
	%367 = icmp ne %..rawptr %366, null
	%368 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 1
	store i1 %367, i1* %368
	br i1 %367, label %map.get.then-14, label %map.get.done-15

map.get.then-14:
	%369 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 0
	%370 = bitcast %..rawptr %366 to i32*
	%371 = load i32, i32* %370, align 4
	store i32 %371, i32* %369
	br label %map.get.done-15

map.get.done-15:
	%372 = getelementptr inbounds {i32, i1}, {i32, i1}* %38, i64 0, i32 0
	%373 = load i32, i32* %372, align 4
	; cast - cast
	%374 = bitcast i32 %373 to i32
	call void @.jaze_gl-12.VertexAttribPointer(i32 %374, i32 4, i32 5121, i1 true, i32 20, %..rawptr inttoptr (i64 16 to %..rawptr))
	; pixels
	store i8* zeroinitializer, i8** %41
		; width
	store i32 zeroinitializer, i32* %42
		; height
	store i32 zeroinitializer, i32* %43
		; bytePer
	store i32 zeroinitializer, i32* %44
		; SelectorExpr
	%375 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%376 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %375, i64 0
	%377 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %376, i64 0, i32 12
	%378 = load %imgui-8.FontAtlas*, %imgui-8.FontAtlas** %377, align 8
	%379 = getelementptr inbounds i8*, i8** %41, i64 0
	%380 = getelementptr inbounds i32, i32* %42, i64 0
	%381 = getelementptr inbounds i32, i32* %43, i64 0
	%382 = getelementptr inbounds i32, i32* %44, i64 0
	call ccc void @ImFontAtlas_GetTexDataAsRGBA32(%imgui-8.FontAtlas* %378, i8** %379, i32* %380, i32* %381, i32* %382)
	; AssignStmt
	; SelectorExpr
	%383 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 5
	; SelectorExpr
	%384 = call i32 @.jaze_gl-12.GenTexture()
	store i32 %384, i32* %383
	; SelectorExpr
	; SelectorExpr
	%385 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 5
	%386 = load i32, i32* %385, align 4
	call void @.jaze_gl-12.BindTexture(i32 3553, i32 %386)
	; SelectorExpr
	call void @.jaze_gl-12.TexParameteri(i32 3553, i32 10241, i32 9729)
	; SelectorExpr
	call void @.jaze_gl-12.TexParameteri(i32 3553, i32 10240, i32 9729)
	; SelectorExpr
	%387 = load i32, i32* %42, align 4
	%388 = load i32, i32* %43, align 4
	%389 = load i8*, i8** %41, align 8
	%390 = bitcast i8* %389 to %..rawptr
	call void @.jaze_gl-12.TexImage2D(i32 3553, i32 0, i32 6408, i32 %387, i32 %388, i32 6408, i32 5121, %..rawptr %390)
	; SelectorExpr
	%391 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%392 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %391, i64 0
	%393 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %392, i64 0, i32 12
	%394 = load %imgui-8.FontAtlas*, %imgui-8.FontAtlas** %393, align 8
	; SelectorExpr
	%395 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 5
	%396 = getelementptr inbounds i32, i32* %395, i64 0
	; cast - cast
	%397 = bitcast i32* %396 to %..rawptr
	call ccc void @ImFontAtlas_SetTexID(%imgui-8.FontAtlas* %394, %..rawptr %397)
	; append
	; SelectorExpr
	; SelectorExpr
	%398 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 1
	%399 = bitcast {i32*, i64, i64,%Allocator}* %398 to %..rawptr
	; SelectorExpr
	; SelectorExpr
	%400 = getelementptr inbounds %jaze_gl-12.DebugInfo_t, %jaze_gl-12.DebugInfo_t* @.jaze_gl-12.DebugInfo, i64 0, i32 1
	%401 = load {i32*, i64, i64,%Allocator}, {i32*, i64, i64,%Allocator}* %400, align 8
	; SelectorExpr
	%402 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 5
	%403 = load i32, i32* %402, align 4
	; variadic call argument generation
	store {i32*, i64, i64} zeroinitializer, {i32*, i64, i64}* %45
	store [1 x i32] zeroinitializer, [1 x i32]* %46
	%404 = getelementptr inbounds [1 x i32], [1 x i32]* %46, i64 0, i32 0
	store i32 %403, i32* %404
	%405 = getelementptr inbounds [1 x i32], [1 x i32]* %46, i64 0, i32 0
	%406 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %45, i64 0, i32 0
	store i32* %405, i32** %406
	%407 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %45, i64 0, i32 1
	store i64 1, i64* %407
	%408 = getelementptr inbounds {i32*, i64, i64}, {i32*, i64, i64}* %45, i64 0, i32 2
	store i64 1, i64* %408
	%409 = load {i32*, i64, i64}, {i32*, i64, i64}* %45, align 8
	%410 = extractvalue {i32*, i64, i64} %409, 0
	%411 = extractvalue {i32*, i64, i64} %409, 1
	%412 = bitcast i32* %410 to %..rawptr
	%413 = call i64 @.__dynamic_array_append(%..rawptr %399, i64 4, i64 4, %..rawptr %412, i64 %411)
	call void @.jaze_imgui-15.SetStyle()
	ret void
}

define void @.jaze_imgui-15.BeginNewFrame(double %deltaTime) {
decls-0:
	%0 = alloca double, align 8
	%1 = alloca %imgui-8.GuiIO*, align 8
	%2 = alloca %windows-6.Rect, align 4
	%3 = alloca %windows-6.Point, align 4
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store double zeroinitializer, double* %0
		store double %deltaTime, double* %0
	; io
	store %imgui-8.GuiIO* zeroinitializer, %imgui-8.GuiIO** %1
		%10 = call ccc %imgui-8.GuiIO* @igGetIO()
	store %imgui-8.GuiIO* %10, %imgui-8.GuiIO** %1
	; rect
	store %windows-6.Rect zeroinitializer, %windows-6.Rect* %2
		; SelectorExpr
	; SelectorExpr
	%11 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%12 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %11, i64 0
	%13 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %12, i64 0, i32 28
	%14 = load %..rawptr, %..rawptr* %13, align 8
	; cast - cast
	%15 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %2, i64 0
	%16 = call ccc i32 @GetClientRect(%..rawptr %14, %windows-6.Rect* %15)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%17 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%18 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %17, i64 0
	%19 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %18, i64 0, i32 0
	%20 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %19, i64 0, i32 0
	; SelectorExpr
	%21 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %2, i64 0, i32 2
	%22 = load i32, i32* %21, align 4
	; cast - cast
	%23 = sitofp i32 %22 to float
	store float %23, float* %20
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%25 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %24, i64 0
	%26 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %25, i64 0, i32 0
	%27 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %26, i64 0, i32 1
	; SelectorExpr
	%28 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %2, i64 0, i32 3
	%29 = load i32, i32* %28, align 4
	; cast - cast
	%30 = sitofp i32 %29 to float
	store float %30, float* %27
	; IfStmt
	; SelectorExpr
	%31 = call ccc %..rawptr @GetActiveWindow()
	; SelectorExpr
	%32 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%33 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %32, i64 0
	%34 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %33, i64 0, i32 28
	%35 = load %..rawptr, %..rawptr* %34, align 8
	; cast - cast
	%36 = icmp eq %..rawptr %31, %35
	br i1 %36, label %if.then-1, label %if.else-13

if.then-1:
	; pos
	store %windows-6.Point zeroinitializer, %windows-6.Point* %3
		; SelectorExpr
	%37 = getelementptr inbounds %windows-6.Point, %windows-6.Point* %3, i64 0
	%38 = call ccc i32 @GetCursorPos(%windows-6.Point* %37)
	; SelectorExpr
	; SelectorExpr
	%39 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%40 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %39, i64 0
	%41 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %40, i64 0, i32 28
	%42 = load %..rawptr, %..rawptr* %41, align 8
	; cast - cast
	%43 = getelementptr inbounds %windows-6.Point, %windows-6.Point* %3, i64 0
	%44 = call ccc i32 @ScreenToClient(%..rawptr %42, %windows-6.Point* %43)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%45 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%46 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %45, i64 0
	%47 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %46, i64 0, i32 29
	%48 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %47, i64 0, i32 0
	; SelectorExpr
	%49 = getelementptr inbounds %windows-6.Point, %windows-6.Point* %3, i64 0, i32 0
	%50 = load i32, i32* %49, align 4
	; cast - cast
	%51 = sitofp i32 %50 to float
	store float %51, float* %48
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%52 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%53 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %52, i64 0
	%54 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %53, i64 0, i32 29
	%55 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %54, i64 0, i32 1
	; SelectorExpr
	%56 = getelementptr inbounds %windows-6.Point, %windows-6.Point* %3, i64 0, i32 1
	%57 = load i32, i32* %56, align 4
	; cast - cast
	%58 = sitofp i32 %57 to float
	store float %58, float* %55
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%59 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%60 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %59, i64 0
	%61 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %60, i64 0, i32 30
	%62 = getelementptr inbounds [5 x i1], [5 x i1]* %61, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$206, i64 0, i32 0), i64 48}, i64 202, i64 22, i64 0, i64 5)
	; SelectorExpr
	%63 = call i1 @.windows-6.is_key_down(i32 1)
	store i1 %63, i1* %62
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%64 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%65 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %64, i64 0
	%66 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %65, i64 0, i32 30
	%67 = getelementptr inbounds [5 x i1], [5 x i1]* %66, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$207, i64 0, i32 0), i64 48}, i64 203, i64 22, i64 1, i64 5)
	; SelectorExpr
	%68 = call i1 @.windows-6.is_key_down(i32 2)
	store i1 %68, i1* %67
	; AssignStmt
	; SelectorExpr
	%69 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%70 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %69, i64 0
	%71 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %70, i64 0, i32 31
	; SelectorExpr
	%72 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 1
	%73 = load i32, i32* %72, align 4
	; cast - cast
	%74 = sitofp i32 %73 to float
	store float %74, float* %71
	; AssignStmt
	; SelectorExpr
	%75 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%76 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %75, i64 0
	%77 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %76, i64 0, i32 33
	; SelectorExpr
	%78 = call i1 @.windows-6.is_key_down(i32 162)
	; SelectorExpr
	%79 = call i1 @.windows-6.is_key_down(i32 162)
	br i1 %79, label %logical.cmp.done-3, label %logical.cmp.rhs-2

logical.cmp.rhs-2:
	; SelectorExpr
	%80 = call i1 @.windows-6.is_key_down(i32 163)
	br label %logical.cmp.done-3

logical.cmp.done-3:
	%81 = phi i1 [ true, %if.then-1 ], [ %80, %logical.cmp.rhs-2 ]
	store i1 %81, i1* %77
	; AssignStmt
	; SelectorExpr
	%82 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%83 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %82, i64 0
	%84 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %83, i64 0, i32 34
	; SelectorExpr
	%85 = call i1 @.windows-6.is_key_down(i32 160)
	; SelectorExpr
	%86 = call i1 @.windows-6.is_key_down(i32 160)
	br i1 %86, label %logical.cmp.done-5, label %logical.cmp.rhs-4

logical.cmp.rhs-4:
	; SelectorExpr
	%87 = call i1 @.windows-6.is_key_down(i32 161)
	br label %logical.cmp.done-5

logical.cmp.done-5:
	%88 = phi i1 [ true, %logical.cmp.done-3 ], [ %87, %logical.cmp.rhs-4 ]
	store i1 %88, i1* %84
	; AssignStmt
	; SelectorExpr
	%89 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%90 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %89, i64 0
	%91 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %90, i64 0, i32 35
	; SelectorExpr
	%92 = call i1 @.windows-6.is_key_down(i32 164)
	; SelectorExpr
	%93 = call i1 @.windows-6.is_key_down(i32 164)
	br i1 %93, label %logical.cmp.done-7, label %logical.cmp.rhs-6

logical.cmp.rhs-6:
	; SelectorExpr
	%94 = call i1 @.windows-6.is_key_down(i32 165)
	br label %logical.cmp.done-7

logical.cmp.done-7:
	%95 = phi i1 [ true, %logical.cmp.done-5 ], [ %94, %logical.cmp.rhs-6 ]
	store i1 %95, i1* %91
	; AssignStmt
	; SelectorExpr
	%96 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%97 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %96, i64 0
	%98 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %97, i64 0, i32 36
	; SelectorExpr
	%99 = call i1 @.windows-6.is_key_down(i32 91)
	; SelectorExpr
	%100 = call i1 @.windows-6.is_key_down(i32 91)
	br i1 %100, label %logical.cmp.done-9, label %logical.cmp.rhs-8

logical.cmp.rhs-8:
	; SelectorExpr
	%101 = call i1 @.windows-6.is_key_down(i32 92)
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%102 = phi i1 [ true, %logical.cmp.done-7 ], [ %101, %logical.cmp.rhs-8 ]
	store i1 %102, i1* %98
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %4
		store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.interval.loop-10

for.interval.loop-10:
	%103 = load i64, i64* %5, align 8
	%104 = icmp slt i64 %103, 257
	br i1 %104, label %for.interval.body-11, label %for.interval.done-12

for.interval.body-11:
	%105 = load i64, i64* %5, align 8
	%106 = load i64, i64* %6, align 8
	%107 = load i64, i64* %5, align 8
	%108 = add i64 %107, 1
	store i64 %108, i64* %5
	%109 = load i64, i64* %6, align 8
	%110 = add i64 %109, 1
	store i64 %110, i64* %6
	store i64 %105, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%111 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%112 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %111, i64 0
	%113 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %112, i64 0, i32 37
	%114 = load i64, i64* %4, align 8
	%115 = trunc i64 %114 to i32
	%116 = getelementptr inbounds [512 x i1], [512 x i1]* %113, i64 0, i32 %115
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$208, i64 0, i32 0), i64 48}, i64 213, i64 25, i64 %114, i64 512)
	; SelectorExpr
	%117 = load i64, i64* %4, align 8
	; cast - cast
	%118 = trunc i64 %117 to i32
	%119 = call i1 @.windows-6.is_key_down(i32 %118)
	store i1 %119, i1* %116
	br label %for.interval.loop-10

for.interval.done-12:
	br label %if.done-17

if.else-13:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%120 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%121 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %120, i64 0
	%122 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %121, i64 0, i32 30
	%123 = getelementptr inbounds [5 x i1], [5 x i1]* %122, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$209, i64 0, i32 0), i64 48}, i64 216, i64 22, i64 0, i64 5)
	store i1 false, i1* %123
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%124 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%125 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %124, i64 0
	%126 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %125, i64 0, i32 30
	%127 = getelementptr inbounds [5 x i1], [5 x i1]* %126, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$20a, i64 0, i32 0), i64 48}, i64 217, i64 22, i64 1, i64 5)
	store i1 false, i1* %127
	; AssignStmt
	; SelectorExpr
	%128 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%129 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %128, i64 0
	%130 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %129, i64 0, i32 33
	store i1 false, i1* %130
	; AssignStmt
	; SelectorExpr
	%131 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%132 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %131, i64 0
	%133 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %132, i64 0, i32 34
	store i1 false, i1* %133
	; AssignStmt
	; SelectorExpr
	%134 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%135 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %134, i64 0
	%136 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %135, i64 0, i32 35
	store i1 false, i1* %136
	; AssignStmt
	; SelectorExpr
	%137 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%138 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %137, i64 0
	%139 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %138, i64 0, i32 36
	store i1 false, i1* %139
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %7
		store i64 zeroinitializer, i64* %8
	store i64 0, i64* %8
	store i64 zeroinitializer, i64* %9
	store i64 0, i64* %9
	br label %for.interval.loop-14

for.interval.loop-14:
	%140 = load i64, i64* %8, align 8
	%141 = icmp slt i64 %140, 256
	br i1 %141, label %for.interval.body-15, label %for.interval.done-16

for.interval.body-15:
	%142 = load i64, i64* %8, align 8
	%143 = load i64, i64* %9, align 8
	%144 = load i64, i64* %8, align 8
	%145 = add i64 %144, 1
	store i64 %145, i64* %8
	%146 = load i64, i64* %9, align 8
	%147 = add i64 %146, 1
	store i64 %147, i64* %9
	store i64 %142, i64* %7
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%148 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%149 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %148, i64 0
	%150 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %149, i64 0, i32 37
	%151 = load i64, i64* %7, align 8
	%152 = trunc i64 %151 to i32
	%153 = getelementptr inbounds [512 x i1], [512 x i1]* %150, i64 0, i32 %152
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$20b, i64 0, i32 0), i64 48}, i64 224, i64 25, i64 %151, i64 512)
	store i1 false, i1* %153
	br label %for.interval.loop-14

for.interval.done-16:
	br label %if.done-17

if.done-17:
	; AssignStmt
	; SelectorExpr
	%154 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 1
	store i32 0, i32* %154
	; AssignStmt
	; SelectorExpr
	%155 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%156 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %155, i64 0
	%157 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %156, i64 0, i32 1
	%158 = load double, double* %0, align 8
	; cast - cast
	%159 = fptrunc double %158 to float
	store float %159, float* %157
	call ccc void @igNewFrame()
	ret void
}

define ccc void @.jaze_imgui-15.RenderProc(%imgui-8.DrawData* %data) {
decls-0:
	%0 = alloca %imgui-8.DrawData*, align 8
	%1 = alloca %imgui-8.GuiIO*, align 8
	%2 = alloca %windows-6.Rect, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca [4 x [4 x float]], align 4
	%6 = alloca [4 x [4 x float]], align 4
	%7 = alloca [4 x float], align 4
	%8 = alloca [4 x float], align 4
	%9 = alloca {i32, i1}, align 4
	%10 = alloca %__Map_Header, align 8
	%11 = alloca %__Map_Key, align 8
	%12 = alloca {i32, i1}, align 4
	%13 = alloca %__Map_Header, align 8
	%14 = alloca %__Map_Key, align 8
	%15 = alloca {%imgui-8.DrawList**, i64, i64}, align 8
	%16 = alloca {%imgui-8.DrawList**, i64, i64}, align 8
	%17 = alloca i32, align 4
	%18 = alloca %imgui-8.DrawList*, align 8
	%19 = alloca i16*, align 8
	%20 = alloca i32, align 4
	%21 = alloca %imgui-8.DrawCmd*, align 8
	store %imgui-8.DrawData* zeroinitializer, %imgui-8.DrawData** %0
		store %imgui-8.DrawData* %data, %imgui-8.DrawData** %0
	; io
	store %imgui-8.GuiIO* zeroinitializer, %imgui-8.GuiIO** %1
		%22 = call ccc %imgui-8.GuiIO* @igGetIO()
	store %imgui-8.GuiIO* %22, %imgui-8.GuiIO** %1
	; rect
	store %windows-6.Rect zeroinitializer, %windows-6.Rect* %2
		; SelectorExpr
	; SelectorExpr
	%23 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%24 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %23, i64 0
	%25 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %24, i64 0, i32 28
	%26 = load %..rawptr, %..rawptr* %25, align 8
	; cast - cast
	%27 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %2, i64 0
	%28 = call ccc i32 @GetClientRect(%..rawptr %26, %windows-6.Rect* %27)
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%29 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%30 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %29, i64 0
	%31 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %30, i64 0, i32 0
	%32 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %31, i64 0, i32 0
	; SelectorExpr
	%33 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %2, i64 0, i32 2
	%34 = load i32, i32* %33, align 4
	; cast - cast
	%35 = sitofp i32 %34 to float
	store float %35, float* %32
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%36 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%37 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %36, i64 0
	%38 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %37, i64 0, i32 0
	%39 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %38, i64 0, i32 1
	; SelectorExpr
	%40 = getelementptr inbounds %windows-6.Rect, %windows-6.Rect* %2, i64 0, i32 3
	%41 = load i32, i32* %40, align 4
	; cast - cast
	%42 = sitofp i32 %41 to float
	store float %42, float* %39
	; width
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	; SelectorExpr
	%43 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%44 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %43, i64 0
	%45 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %44, i64 0, i32 0
	%46 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %45, i64 0, i32 0
	%47 = load float, float* %46, align 4
	; SelectorExpr
	; SelectorExpr
	%48 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%49 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %48, i64 0
	%50 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %49, i64 0, i32 15
	%51 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %50, i64 0, i32 0
	%52 = load float, float* %51, align 4
	%53 = fmul float %47, %52
	; cast - cast
	%54 = fptosi float %53 to i32
	store i32 %54, i32* %3
	; height
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	; SelectorExpr
	%55 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%56 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %55, i64 0
	%57 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %56, i64 0, i32 0
	%58 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %57, i64 0, i32 1
	%59 = load float, float* %58, align 4
	; SelectorExpr
	; SelectorExpr
	%60 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%61 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %60, i64 0
	%62 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %61, i64 0, i32 15
	%63 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %62, i64 0, i32 1
	%64 = load float, float* %63, align 4
	%65 = fmul float %59, %64
	; cast - cast
	%66 = fptosi float %65 to i32
	store i32 %66, i32* %4
	; IfStmt
	%67 = load i32, i32* %4, align 4
	%68 = icmp eq i32 %67, 0
	br i1 %68, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%69 = load i32, i32* %3, align 4
	%70 = icmp eq i32 %69, 0
	br i1 %70, label %if.then-2, label %if.done-3

if.then-2:
	br label %if.done-3

if.done-3:
	; SelectorExpr
	call void @.jaze_gl-12.Enable(i32 3042)
	; SelectorExpr
	call void @.jaze_gl-12.BlendEquation(i32 32774)
	; SelectorExpr
	call void @.jaze_gl-12.BlendFunc(i32 770, i32 771)
	; SelectorExpr
	call void @.jaze_gl-12.Disable(i32 2884)
	; SelectorExpr
	call void @.jaze_gl-12.Disable(i32 2929)
	; SelectorExpr
	call void @.jaze_gl-12.Enable(i32 3089)
	; SelectorExpr
	call void @.jaze_gl-12.ActiveTexture(i32 33984)
	; SelectorExpr
	%71 = load i32, i32* %3, align 4
	%72 = load i32, i32* %4, align 4
	call ccc void @glViewport(i32 0, i32 0, i32 %71, i32 %72)
	; ortho_projection
	store [4 x [4 x float]] zeroinitializer, [4 x [4 x float]]* %5
		; CompoundLit
	store [4 x [4 x float]] zeroinitializer, [4 x [4 x float]]* %6
	store [4 x [4 x float]] [[4 x float] zeroinitializer, [4 x float] zeroinitializer, [4 x float] [float 0x0000000000000000, float 0x0000000000000000, float 0xbff0000000000000, float 0x0000000000000000], [4 x float] [float 0xbff0000000000000, float 0x3ff0000000000000, float 0x0000000000000000, float 0x3ff0000000000000]], [4 x [4 x float]]* %6
	; CompoundLit
	store [4 x float] zeroinitializer, [4 x float]* %7
	store [4 x float] [float zeroinitializer, float 0x0000000000000000, float 0x0000000000000000, float 0x0000000000000000], [4 x float]* %7
	; SelectorExpr
	; SelectorExpr
	%73 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%74 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %73, i64 0
	%75 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %74, i64 0, i32 0
	%76 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %75, i64 0, i32 0
	%77 = load float, float* %76, align 4
	%78 = fdiv float 0x4000000000000000, %77
	%79 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, i32 0
	store float %78, float* %79
	%80 = load [4 x float], [4 x float]* %7, align 4
	%81 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %6, i64 0, i32 0
	store [4 x float] %80, [4 x float]* %81
	; CompoundLit
	store [4 x float] zeroinitializer, [4 x float]* %8
	store [4 x float] [float 0x0000000000000000, float zeroinitializer, float 0x0000000000000000, float 0x0000000000000000], [4 x float]* %8
	; SelectorExpr
	; SelectorExpr
	%82 = load %imgui-8.GuiIO*, %imgui-8.GuiIO** %1, align 8
	%83 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %82, i64 0
	%84 = getelementptr inbounds %imgui-8.GuiIO, %imgui-8.GuiIO* %83, i64 0, i32 0
	%85 = getelementptr inbounds %imgui-8.Vec2, %imgui-8.Vec2* %84, i64 0, i32 1
	%86 = load float, float* %85, align 4
	%87 = fsub float 0x0000000000000000, %86
	%88 = fdiv float 0x4000000000000000, %87
	%89 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, i32 1
	store float %88, float* %89
	%90 = load [4 x float], [4 x float]* %8, align 4
	%91 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %6, i64 0, i32 1
	store [4 x float] %90, [4 x float]* %91
	%92 = load [4 x [4 x float]], [4 x [4 x float]]* %6, align 4
	store [4 x [4 x float]] %92, [4 x [4 x float]]* %5
	; SelectorExpr
	; SelectorExpr
	%93 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%94 = load %jaze_gl-12.Program, %jaze_gl-12.Program* %93, align 8
	call void @.jaze_gl-12.UseProgram(%jaze_gl-12.Program %94)
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%95 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%96 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %95, i64 0, i32 0
	store {i32, i1} zeroinitializer, {i32, i1}* %9
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%97 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%98 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %96 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %98, %Raw_Dynamic_Map** %97
	%99 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i1 true, i1* %99
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %100
	%101 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %101
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %102
	%103 = load %__Map_Header, %__Map_Header* %10, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%104 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 2829778445906215252, i64* %104
	%105 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$20c, i64 0, i32 0), i64 7}, %..string* %105
	%106 = load %__Map_Key, %__Map_Key* %11, align 8
	%107 = call %..rawptr @.__dynamic_map_get(%__Map_Header %103, %__Map_Key %106)
	%108 = icmp ne %..rawptr %107, null
	%109 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 1
	store i1 %108, i1* %109
	br i1 %108, label %map.get.then-4, label %map.get.done-5

map.get.then-4:
	%110 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 0
	%111 = bitcast %..rawptr %107 to i32*
	%112 = load i32, i32* %111, align 4
	store i32 %112, i32* %110
	br label %map.get.done-5

map.get.done-5:
	%113 = getelementptr inbounds {i32, i1}, {i32, i1}* %9, i64 0, i32 0
	%114 = load i32, i32* %113, align 4
	call void @.jaze_gl-12.Uniform-1976290684768(i32 %114, i32 0)
	; SelectorExpr
	%115 = load void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)** @.jaze_gl-12._UniformMatrix4fv, align 8
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%116 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 0
	%117 = getelementptr inbounds %jaze_gl-12.Program, %jaze_gl-12.Program* %116, i64 0, i32 0
	store {i32, i1} zeroinitializer, {i32, i1}* %12
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	%118 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 0
	%119 = bitcast {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i32}*, i64, i64,%Allocator}}* %117 to %Raw_Dynamic_Map*
	store %Raw_Dynamic_Map* %119, %Raw_Dynamic_Map** %118
	%120 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 1
	store i1 true, i1* %120
	%121 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 2
	store i64 40, i64* %121
	%122 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 3
	store i64 8, i64* %122
	%123 = getelementptr inbounds %__Map_Header, %__Map_Header* %13, i64 0, i32 4
	store i64 32, i64* %123
	%124 = load %__Map_Header, %__Map_Header* %13, align 8
	store %__Map_Key zeroinitializer, %__Map_Key* %14
	%125 = getelementptr inbounds %__Map_Key, %__Map_Key* %14, i64 0, i32 0
	store i64 -9017138883755609675, i64* %125
	%126 = getelementptr inbounds %__Map_Key, %__Map_Key* %14, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$20d, i64 0, i32 0), i64 7}, %..string* %126
	%127 = load %__Map_Key, %__Map_Key* %14, align 8
	%128 = call %..rawptr @.__dynamic_map_get(%__Map_Header %124, %__Map_Key %127)
	%129 = icmp ne %..rawptr %128, null
	%130 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 1
	store i1 %129, i1* %130
	br i1 %129, label %map.get.then-6, label %map.get.done-7

map.get.then-6:
	%131 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 0
	%132 = bitcast %..rawptr %128 to i32*
	%133 = load i32, i32* %132, align 4
	store i32 %133, i32* %131
	br label %map.get.done-7

map.get.done-7:
	%134 = getelementptr inbounds {i32, i1}, {i32, i1}* %12, i64 0, i32 0
	%135 = load i32, i32* %134, align 4
	; IndexExpr
	; IndexExpr
	%136 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %5, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$20e, i64 0, i32 0), i64 48}, i64 267, i64 89, i64 0, i64 4)
	%137 = getelementptr inbounds [4 x float], [4 x float]* %136, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$20f, i64 0, i32 0), i64 48}, i64 267, i64 92, i64 0, i64 4)
	%138 = getelementptr inbounds float, float* %137, i64 0
	call ccc void %115(i32 %135, i32 1, i32 0, float* %138)
	; SelectorExpr
	; SelectorExpr
	%139 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 4
	%140 = load i32, i32* %139, align 4
	call void @.jaze_gl-12.BindVertexArray(i32 %140)
	; newList
	store {%imgui-8.DrawList**, i64, i64} zeroinitializer, {%imgui-8.DrawList**, i64, i64}* %15
		; slice_ptr
	; SelectorExpr
	%141 = load %imgui-8.DrawData*, %imgui-8.DrawData** %0, align 8
	%142 = getelementptr inbounds %imgui-8.DrawData, %imgui-8.DrawData* %141, i64 0
	%143 = getelementptr inbounds %imgui-8.DrawData, %imgui-8.DrawData* %142, i64 0, i32 1
	%144 = load %imgui-8.DrawList**, %imgui-8.DrawList*** %143, align 8
	; SelectorExpr
	%145 = load %imgui-8.DrawData*, %imgui-8.DrawData** %0, align 8
	%146 = getelementptr inbounds %imgui-8.DrawData, %imgui-8.DrawData* %145, i64 0
	%147 = getelementptr inbounds %imgui-8.DrawData, %imgui-8.DrawData* %146, i64 0, i32 2
	%148 = load i32, i32* %147, align 4
	%149 = sext i32 %148 to i64
	store {%imgui-8.DrawList**, i64, i64} zeroinitializer, {%imgui-8.DrawList**, i64, i64}* %16
	%150 = getelementptr inbounds {%imgui-8.DrawList**, i64, i64}, {%imgui-8.DrawList**, i64, i64}* %16, i64 0, i32 0
	store %imgui-8.DrawList** %144, %imgui-8.DrawList*** %150
	%151 = getelementptr inbounds {%imgui-8.DrawList**, i64, i64}, {%imgui-8.DrawList**, i64, i64}* %16, i64 0, i32 1
	store i64 %149, i64* %151
	%152 = getelementptr inbounds {%imgui-8.DrawList**, i64, i64}, {%imgui-8.DrawList**, i64, i64}* %16, i64 0, i32 2
	store i64 %149, i64* %152
	%153 = load {%imgui-8.DrawList**, i64, i64}, {%imgui-8.DrawList**, i64, i64}* %16, align 8
	store {%imgui-8.DrawList**, i64, i64} %153, {%imgui-8.DrawList**, i64, i64}* %15
	; ForStmt
	; n
	store i32 zeroinitializer, i32* %17
		store i32 0, i32* %17
	br label %for.loop-8

for.loop-8:
	%154 = load i32, i32* %17, align 4
	; SelectorExpr
	%155 = load %imgui-8.DrawData*, %imgui-8.DrawData** %0, align 8
	%156 = getelementptr inbounds %imgui-8.DrawData, %imgui-8.DrawData* %155, i64 0
	%157 = getelementptr inbounds %imgui-8.DrawData, %imgui-8.DrawData* %156, i64 0, i32 2
	%158 = load i32, i32* %157, align 4
	%159 = icmp slt i32 %154, %158
	br i1 %159, label %for.body-9, label %for.done-13

for.body-9:
	; list
	store %imgui-8.DrawList* zeroinitializer, %imgui-8.DrawList** %18
		; IndexExpr
	%160 = load {%imgui-8.DrawList**, i64, i64}, {%imgui-8.DrawList**, i64, i64}* %15, align 8
	%161 = extractvalue {%imgui-8.DrawList**, i64, i64} %160, 0
	%162 = extractvalue {%imgui-8.DrawList**, i64, i64} %160, 1
	%163 = load i32, i32* %17, align 4
	%164 = sext i32 %163 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$210, i64 0, i32 0), i64 48}, i64 272, i64 25, i64 %164, i64 %162)
	%165 = getelementptr inbounds %imgui-8.DrawList*, %imgui-8.DrawList** %161, i64 %164
	%166 = load %imgui-8.DrawList*, %imgui-8.DrawList** %165, align 8
	store %imgui-8.DrawList* %166, %imgui-8.DrawList** %18
	; idxBufferOffset
	store i16* zeroinitializer, i16** %19
		store i16* zeroinitializer, i16** %19
	; SelectorExpr
	; SelectorExpr
	%167 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 2
	%168 = load i32, i32* %167, align 4
	call void @.jaze_gl-12.BindBuffer-1976290682192(i32 %168)
	; SelectorExpr
	%169 = load %imgui-8.DrawList*, %imgui-8.DrawList** %18, align 8
	%170 = call ccc i32 @ImDrawList_GetVertexBufferSize(%imgui-8.DrawList* %169)
	%171 = mul i32 %170, 20
	; cast - cast
	%172 = load %imgui-8.DrawList*, %imgui-8.DrawList** %18, align 8
	%173 = call ccc %imgui-8.DrawVert* @ImDrawList_GetVertexPtr(%imgui-8.DrawList* %172, i32 0)
	%174 = bitcast %imgui-8.DrawVert* %173 to %..rawptr
	call void @.jaze_gl-12.BufferData(i32 34962, i32 %171, %..rawptr %174, i32 35040)
	; SelectorExpr
	; SelectorExpr
	%175 = getelementptr inbounds %jaze_imgui-15.State_t, %jaze_imgui-15.State_t* @.jaze_imgui-15.State, i64 0, i32 3
	%176 = load i32, i32* %175, align 4
	call void @.jaze_gl-12.BindBuffer-1976290682560(i32 %176)
	; SelectorExpr
	%177 = load %imgui-8.DrawList*, %imgui-8.DrawList** %18, align 8
	%178 = call ccc i32 @ImDrawList_GetIndexBufferSize(%imgui-8.DrawList* %177)
	%179 = mul i32 %178, 2
	; cast - cast
	%180 = load %imgui-8.DrawList*, %imgui-8.DrawList** %18, align 8
	%181 = call ccc i16* @ImDrawList_GetIndexPtr(%imgui-8.DrawList* %180, i32 0)
	%182 = bitcast i16* %181 to %..rawptr
	call void @.jaze_gl-12.BufferData(i32 34963, i32 %179, %..rawptr %182, i32 35040)
	; ForStmt
	; j
	store i32 zeroinitializer, i32* %20
		store i32 0, i32* %20
	br label %for.loop-10

for.loop-10:
	%183 = load i32, i32* %20, align 4
	%184 = load %imgui-8.DrawList*, %imgui-8.DrawList** %18, align 8
	%185 = call ccc i32 @ImDrawList_GetCmdSize(%imgui-8.DrawList* %184)
	%186 = icmp slt i32 %183, %185
	br i1 %186, label %for.body-11, label %for.done-12

for.body-11:
	; cmd
	store %imgui-8.DrawCmd* zeroinitializer, %imgui-8.DrawCmd** %21
		%187 = load %imgui-8.DrawList*, %imgui-8.DrawList** %18, align 8
	%188 = load i32, i32* %20, align 4
	%189 = call ccc %imgui-8.DrawCmd* @ImDrawList_GetCmdPtr(%imgui-8.DrawList* %187, i32 %188)
	store %imgui-8.DrawCmd* %189, %imgui-8.DrawCmd** %21
	; SelectorExpr
	; SelectorExpr
	%190 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%191 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %190, i64 0
	%192 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %191, i64 0, i32 2
	%193 = load %..rawptr, %..rawptr* %192, align 8
	; cast - cast
	%194 = bitcast %..rawptr %193 to i32*
	%195 = getelementptr inbounds i32, i32* %194, i64 0
	%196 = load i32, i32* %195, align 4
	; cast - cast
	call void @.jaze_gl-12.BindTexture(i32 3553, i32 %196)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%197 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%198 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %197, i64 0
	%199 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %198, i64 0, i32 1
	%200 = getelementptr inbounds %imgui-8.Vec4, %imgui-8.Vec4* %199, i64 0, i32 0
	%201 = load float, float* %200, align 4
	; cast - cast
	%202 = fptosi float %201 to i32
	%203 = load i32, i32* %4, align 4
	; SelectorExpr
	; SelectorExpr
	%204 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%205 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %204, i64 0
	%206 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %205, i64 0, i32 1
	%207 = getelementptr inbounds %imgui-8.Vec4, %imgui-8.Vec4* %206, i64 0, i32 3
	%208 = load float, float* %207, align 4
	; cast - cast
	%209 = fptosi float %208 to i32
	%210 = sub i32 %203, %209
	; SelectorExpr
	; SelectorExpr
	%211 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%212 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %211, i64 0
	%213 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %212, i64 0, i32 1
	%214 = getelementptr inbounds %imgui-8.Vec4, %imgui-8.Vec4* %213, i64 0, i32 2
	%215 = load float, float* %214, align 4
	; SelectorExpr
	; SelectorExpr
	%216 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%217 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %216, i64 0
	%218 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %217, i64 0, i32 1
	%219 = getelementptr inbounds %imgui-8.Vec4, %imgui-8.Vec4* %218, i64 0, i32 0
	%220 = load float, float* %219, align 4
	%221 = fsub float %215, %220
	; cast - cast
	%222 = fptosi float %221 to i32
	; SelectorExpr
	; SelectorExpr
	%223 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%224 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %223, i64 0
	%225 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %224, i64 0, i32 1
	%226 = getelementptr inbounds %imgui-8.Vec4, %imgui-8.Vec4* %225, i64 0, i32 3
	%227 = load float, float* %226, align 4
	; SelectorExpr
	; SelectorExpr
	%228 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%229 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %228, i64 0
	%230 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %229, i64 0, i32 1
	%231 = getelementptr inbounds %imgui-8.Vec4, %imgui-8.Vec4* %230, i64 0, i32 1
	%232 = load float, float* %231, align 4
	%233 = fsub float %227, %232
	; cast - cast
	%234 = fptosi float %233 to i32
	call ccc void @glScissor(i32 %202, i32 %210, i32 %222, i32 %234)
	; SelectorExpr
	; SelectorExpr
	%235 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%236 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %235, i64 0
	%237 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %236, i64 0, i32 0
	%238 = load i32, i32* %237, align 4
	; cast - cast
	%239 = bitcast i32 %238 to i32
	%240 = load i16*, i16** %19, align 8
	%241 = bitcast i16* %240 to %..rawptr
	call void @.jaze_gl-12.DrawElements(i32 4, i32 %239, i32 5123, %..rawptr %241)
	; AssignStmt
	; SelectorExpr
	%242 = load %imgui-8.DrawCmd*, %imgui-8.DrawCmd** %21, align 8
	%243 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %242, i64 0
	%244 = getelementptr inbounds %imgui-8.DrawCmd, %imgui-8.DrawCmd* %243, i64 0, i32 0
	%245 = load i32, i32* %244, align 4
	%246 = load i16*, i16** %19, align 8
	%247 = zext i32 %245 to i64
	%248 = getelementptr inbounds i16, i16* %246, i64 %247
	store i16* %248, i16** %19
	; AssignStmt
	%249 = load i32, i32* %20, align 4
	%250 = add i32 %249, 1
	store i32 %250, i32* %20
	br label %for.loop-10

for.done-12:
	; AssignStmt
	%251 = load i32, i32* %17, align 4
	%252 = add i32 %251, 1
	store i32 %252, i32* %17
	br label %for.loop-8

for.done-13:
	; SelectorExpr
	%253 = load i32, i32* %3, align 4
	%254 = load i32, i32* %4, align 4
	call ccc void @glScissor(i32 0, i32 0, i32 %253, i32 %254)
	ret void
}

define void @.jaze_xinput-16.Enable(i1 %enable) {
decls-0:
	%0 = alloca i1, align 1
	store i1 zeroinitializer, i1* %0
		store i1 %enable, i1* %0
	; IfStmt
	%1 = load void (i32)*, void (i32)** @.jaze_xinput-16._Enable, align 8
	%2 = icmp ne void (i32)* %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.else-2

if.then-1:
	%3 = load void (i32)*, void (i32)** @.jaze_xinput-16._Enable, align 8
	%4 = load i1, i1* %0, align 1
	; cast - cast
	%5 = zext i1 %4 to i32
	call ccc void %3(i32 %5)
	br label %if.done-3

if.else-2:
	br label %if.done-3

if.done-3:
	ret void
}

define {%jaze_xinput-16.Capabilities, i32} @.jaze_xinput-16.GetCapabilities-1976290722800(i32 %user) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca {%jaze_xinput-16.Capabilities, i32}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %user, i32* %0
	; ReturnStmt
	%2 = load i32, i32* %0, align 8
	%3 = call {%jaze_xinput-16.Capabilities, i32} @.jaze_xinput-16.GetCapabilities-1976290723168(i32 %2, i1 false)
	%4 = extractvalue {%jaze_xinput-16.Capabilities, i32} %3, 0
	%5 = extractvalue {%jaze_xinput-16.Capabilities, i32} %3, 1
	store {%jaze_xinput-16.Capabilities, i32} zeroinitializer, {%jaze_xinput-16.Capabilities, i32}* %1
	%6 = getelementptr inbounds {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %1, i64 0, i32 0
	store %jaze_xinput-16.Capabilities %4, %jaze_xinput-16.Capabilities* %6
	%7 = getelementptr inbounds {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %1, i64 0, i32 1
	store i32 %5, i32* %7
	%8 = load {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %1, align 4
	ret {%jaze_xinput-16.Capabilities, i32} %8
}

define {%jaze_xinput-16.Capabilities, i32} @.jaze_xinput-16.GetCapabilities-1976290723168(i32 %user, i1 %onlyGamepads) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca i1, align 1
	%2 = alloca %jaze_xinput-16.Capabilities, align 1
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {%jaze_xinput-16.Capabilities, i32}, align 4
	%6 = alloca {%jaze_xinput-16.Capabilities, i32}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %user, i32* %0
	store i1 zeroinitializer, i1* %1
		store i1 %onlyGamepads, i1* %1
	; IfStmt
	%7 = load i32 (i32, i32, %jaze_xinput-16.Capabilities*)*, i32 (i32, i32, %jaze_xinput-16.Capabilities*)** @.jaze_xinput-16._GetCapabilities, align 8
	%8 = icmp ne i32 (i32, i32, %jaze_xinput-16.Capabilities*)* %7, zeroinitializer
	br i1 %8, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store %jaze_xinput-16.Capabilities zeroinitializer, %jaze_xinput-16.Capabilities* %2
		store %jaze_xinput-16.Capabilities zeroinitializer, %jaze_xinput-16.Capabilities* %2
	; _u
	store i32 zeroinitializer, i32* %3
		%9 = load i32, i32* %0, align 8
	; cast - cast
	store i32 %9, i32* %3
	; err
	store i32 zeroinitializer, i32* %4
		%10 = load i32 (i32, i32, %jaze_xinput-16.Capabilities*)*, i32 (i32, i32, %jaze_xinput-16.Capabilities*)** @.jaze_xinput-16._GetCapabilities, align 8
	%11 = load i32, i32* %0, align 8
	; cast - cast
	%12 = load i1, i1* %1, align 1
	; cast - cast
	%13 = zext i1 %12 to i32
	%14 = getelementptr inbounds %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %2, i64 0
	%15 = call ccc i32 %10(i32 %11, i32 %13, %jaze_xinput-16.Capabilities* %14)
	store i32 %15, i32* %4
	; ReturnStmt
	%16 = load %jaze_xinput-16.Capabilities, %jaze_xinput-16.Capabilities* %2, align 1
	%17 = load i32, i32* %4, align 4
	; cast - cast
	store {%jaze_xinput-16.Capabilities, i32} zeroinitializer, {%jaze_xinput-16.Capabilities, i32}* %5
	%18 = getelementptr inbounds {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %5, i64 0, i32 0
	store %jaze_xinput-16.Capabilities %16, %jaze_xinput-16.Capabilities* %18
	%19 = getelementptr inbounds {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %5, i64 0, i32 1
	store i32 %17, i32* %19
	%20 = load {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %5, align 4
	ret {%jaze_xinput-16.Capabilities, i32} %20

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	store {%jaze_xinput-16.Capabilities, i32} zeroinitializer, {%jaze_xinput-16.Capabilities, i32}* %6
	%21 = getelementptr inbounds {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %6, i64 0, i32 0
	store %jaze_xinput-16.Capabilities zeroinitializer, %jaze_xinput-16.Capabilities* %21
	%22 = getelementptr inbounds {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %6, i64 0, i32 1
	store i32 1167, i32* %22
	%23 = load {%jaze_xinput-16.Capabilities, i32}, {%jaze_xinput-16.Capabilities, i32}* %6, align 4
	ret {%jaze_xinput-16.Capabilities, i32} %23
}

define {%jaze_xinput-16.State, i32} @.jaze_xinput-16.GetState(i32 %user) {
decls-0:
	%0 = alloca i32, align 8
	%1 = alloca %jaze_xinput-16.State, align 4
	%2 = alloca i32, align 4
	%3 = alloca {%jaze_xinput-16.State, i32}, align 4
	%4 = alloca {%jaze_xinput-16.State, i32}, align 4
	store i32 zeroinitializer, i32* %0
		store i32 %user, i32* %0
	; IfStmt
	%5 = load i32 (i32, %jaze_xinput-16.State*)*, i32 (i32, %jaze_xinput-16.State*)** @.jaze_xinput-16._GetState, align 8
	%6 = icmp ne i32 (i32, %jaze_xinput-16.State*)* %5, zeroinitializer
	br i1 %6, label %if.then-1, label %if.else-2

if.then-1:
	; res
	store %jaze_xinput-16.State zeroinitializer, %jaze_xinput-16.State* %1
		store %jaze_xinput-16.State zeroinitializer, %jaze_xinput-16.State* %1
	; err
	store i32 zeroinitializer, i32* %2
		%7 = load i32 (i32, %jaze_xinput-16.State*)*, i32 (i32, %jaze_xinput-16.State*)** @.jaze_xinput-16._GetState, align 8
	%8 = load i32, i32* %0, align 8
	; cast - cast
	%9 = getelementptr inbounds %jaze_xinput-16.State, %jaze_xinput-16.State* %1, i64 0
	%10 = call ccc i32 %7(i32 %8, %jaze_xinput-16.State* %9)
	store i32 %10, i32* %2
	; ReturnStmt
	%11 = load %jaze_xinput-16.State, %jaze_xinput-16.State* %1, align 4
	%12 = load i32, i32* %2, align 4
	; cast - cast
	store {%jaze_xinput-16.State, i32} zeroinitializer, {%jaze_xinput-16.State, i32}* %3
	%13 = getelementptr inbounds {%jaze_xinput-16.State, i32}, {%jaze_xinput-16.State, i32}* %3, i64 0, i32 0
	store %jaze_xinput-16.State %11, %jaze_xinput-16.State* %13
	%14 = getelementptr inbounds {%jaze_xinput-16.State, i32}, {%jaze_xinput-16.State, i32}* %3, i64 0, i32 1
	store i32 %12, i32* %14
	%15 = load {%jaze_xinput-16.State, i32}, {%jaze_xinput-16.State, i32}* %3, align 4
	ret {%jaze_xinput-16.State, i32} %15

if.else-2:
	br label %if.done-3

if.done-3:
	; ReturnStmt
	store {%jaze_xinput-16.State, i32} zeroinitializer, {%jaze_xinput-16.State, i32}* %4
	%16 = getelementptr inbounds {%jaze_xinput-16.State, i32}, {%jaze_xinput-16.State, i32}* %4, i64 0, i32 0
	store %jaze_xinput-16.State zeroinitializer, %jaze_xinput-16.State* %16
	%17 = getelementptr inbounds {%jaze_xinput-16.State, i32}, {%jaze_xinput-16.State, i32}* %4, i64 0, i32 1
	store i32 1167, i32* %17
	%18 = load {%jaze_xinput-16.State, i32}, {%jaze_xinput-16.State, i32}* %4, align 4
	ret {%jaze_xinput-16.State, i32} %18
}

define i1 @.jaze_xinput-16.Init() {
decls-0:
	%0 = alloca %..string, align 8
	%1 = alloca %..string, align 8
	%2 = alloca %..string, align 8
	%3 = alloca %..rawptr, align 8
	%4 = alloca %..rawptr, align 8
	; lib1_4
	store %..string zeroinitializer, %..string* %0
		store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$211, i64 0, i32 0), i64 14}, %..string* %0
	; lib1_3
	store %..string zeroinitializer, %..string* %1
		store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$212, i64 0, i32 0), i64 14}, %..string* %1
	; lib9_1_0
	store %..string zeroinitializer, %..string* %2
		store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$213, i64 0, i32 0), i64 16}, %..string* %2
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %3
		; SelectorExpr
	; IndexExpr
	%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 0
	%7 = extractvalue %..string %5, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.__str$214, i64 0, i32 0), i64 49}, i64 245, i64 39, i64 0, i64 %7)
	%8 = getelementptr inbounds i8, i8* %6, i64 0
	%9 = getelementptr inbounds i8, i8* %8, i64 0
	%10 = call ccc %..rawptr @LoadLibraryA(i8* %9)
	store %..rawptr %10, %..rawptr* %3
	; AssignStmt
	store i64 1, i64* @.jaze_xinput-16.Version
	; IfStmt
	%11 = load %..rawptr, %..rawptr* %3, align 8
	%12 = icmp eq %..rawptr %11, zeroinitializer
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	; IndexExpr
	%13 = load %..string, %..string* %1, align 8
	%14 = extractvalue %..string %13, 0
	%15 = extractvalue %..string %13, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.__str$215, i64 0, i32 0), i64 49}, i64 249, i64 42, i64 0, i64 %15)
	%16 = getelementptr inbounds i8, i8* %14, i64 0
	%17 = getelementptr inbounds i8, i8* %16, i64 0
	%18 = call ccc %..rawptr @LoadLibraryA(i8* %17)
	store %..rawptr %18, %..rawptr* %3
	; AssignStmt
	store i64 2, i64* @.jaze_xinput-16.Version
	br label %if.done-2

if.done-2:
	; IfStmt
	%19 = load %..rawptr, %..rawptr* %3, align 8
	%20 = icmp eq %..rawptr %19, zeroinitializer
	br i1 %20, label %if.then-3, label %if.done-4

if.then-3:
	; lib
	store %..rawptr zeroinitializer, %..rawptr* %4
		; SelectorExpr
	; IndexExpr
	%21 = load %..string, %..string* %2, align 8
	%22 = extractvalue %..string %21, 0
	%23 = extractvalue %..string %21, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.__str$216, i64 0, i32 0), i64 49}, i64 254, i64 45, i64 0, i64 %23)
	%24 = getelementptr inbounds i8, i8* %22, i64 0
	%25 = getelementptr inbounds i8, i8* %24, i64 0
	%26 = call ccc %..rawptr @LoadLibraryA(i8* %25)
	store %..rawptr %26, %..rawptr* %4
	; AssignStmt
	store i64 3, i64* @.jaze_xinput-16.Version
	br label %if.done-4

if.done-4:
	; IfStmt
	%27 = load %..rawptr, %..rawptr* %3, align 8
	%28 = icmp eq %..rawptr %27, zeroinitializer
	br i1 %28, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	store i64 4, i64* @.jaze_xinput-16.Version
	; ReturnStmt
	ret i1 false

if.done-6:
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 1
	%30 = load %..rawptr, %..rawptr* %3, align 8
	; cast - cast
	%31 = ptrtoint %..rawptr %30 to i64
	store i64 %31, i64* %29
	%32 = load %..rawptr, %..rawptr* %3, align 8
	%33 = getelementptr inbounds void (i32)*, void (i32)** @.jaze_xinput-16._Enable, i64 0
	%34 = bitcast void (i32)** %33 to %..rawptr
	call void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %32, %..rawptr %34, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$217, i64 0, i32 0), i64 12})
	%35 = load %..rawptr, %..rawptr* %3, align 8
	%36 = getelementptr inbounds i32 (i32, i8, %jaze_xinput-16.BatteryInformation*)*, i32 (i32, i8, %jaze_xinput-16.BatteryInformation*)** @.jaze_xinput-16._GetBatteryInformation, i64 0
	%37 = bitcast i32 (i32, i8, %jaze_xinput-16.BatteryInformation*)** %36 to %..rawptr
	call void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %35, %..rawptr %37, %..string {i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.__str$218, i64 0, i32 0), i64 27})
	%38 = load %..rawptr, %..rawptr* %3, align 8
	%39 = getelementptr inbounds i32 (i32, i32, %jaze_xinput-16.Capabilities*)*, i32 (i32, i32, %jaze_xinput-16.Capabilities*)** @.jaze_xinput-16._GetCapabilities, i64 0
	%40 = bitcast i32 (i32, i32, %jaze_xinput-16.Capabilities*)** %39 to %..rawptr
	call void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %38, %..rawptr %40, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.__str$219, i64 0, i32 0), i64 21})
	%41 = load %..rawptr, %..rawptr* %3, align 8
	%42 = getelementptr inbounds i32 (i32, i32, %jaze_xinput-16.KeyStroke*)*, i32 (i32, i32, %jaze_xinput-16.KeyStroke*)** @.jaze_xinput-16._GetKeystroke, i64 0
	%43 = bitcast i32 (i32, i32, %jaze_xinput-16.KeyStroke*)** %42 to %..rawptr
	call void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %41, %..rawptr %43, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$21a, i64 0, i32 0), i64 18})
	%44 = load %..rawptr, %..rawptr* %3, align 8
	%45 = getelementptr inbounds i32 (i32, %jaze_xinput-16.State*)*, i32 (i32, %jaze_xinput-16.State*)** @.jaze_xinput-16._GetState, i64 0
	%46 = bitcast i32 (i32, %jaze_xinput-16.State*)** %45 to %..rawptr
	call void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %44, %..rawptr %46, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$21b, i64 0, i32 0), i64 14})
	%47 = load %..rawptr, %..rawptr* %3, align 8
	%48 = getelementptr inbounds i32 (i32, %jaze_xinput-16.VibrationState)*, i32 (i32, %jaze_xinput-16.VibrationState)** @.jaze_xinput-16._SetState, i64 0
	%49 = bitcast i32 (i32, %jaze_xinput-16.VibrationState)** %48 to %..rawptr
	call void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %47, %..rawptr %49, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$21c, i64 0, i32 0), i64 14})
	; ReturnStmt
	ret i1 true
}

define void @.jaze_xinput-16.Init.set_proc_address-0(%..rawptr %h, %..rawptr %p, %..string %name) alwaysinline {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca %..rawptr, align 8
	%2 = alloca %..string, align 8
	%3 = alloca i8*, align 8
	%4 = alloca void ()*, align 8
	%5 = alloca %jaze_xinput-16.DebugFunctionLoadStatus, align 8
	%6 = alloca {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}, align 8
	%7 = alloca [1 x %jaze_xinput-16.DebugFunctionLoadStatus], align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %h, %..rawptr* %0
	store %..rawptr zeroinitializer, %..rawptr* %1
		store %..rawptr %p, %..rawptr* %1
	store %..string zeroinitializer, %..string* %2
		store %..string %name, %..string* %2
	; txt
	store i8* zeroinitializer, i8** %3
		; SelectorExpr
	%8 = load %..string, %..string* %2, align 8
	%9 = call i8* @.strings-9.new_c_string(%..string %8)
	store i8* %9, i8** %3
	; DeferStmt
	; res
	store void ()* zeroinitializer, void ()** %4
		; SelectorExpr
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i8*, i8** %3, align 8
	%12 = call ccc void ()* @GetProcAddress(%..rawptr %10, i8* %11)
	store void ()* %12, void ()** %4
	; AssignStmt
	%13 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%14 = bitcast %..rawptr %13 to void ()**
	%15 = getelementptr inbounds void ()*, void ()** %14, i64 0
	%16 = load void ()*, void ()** %4, align 8
	store void ()* %16, void ()** %15
	; status
	store %jaze_xinput-16.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-16.DebugFunctionLoadStatus* %5
		store %jaze_xinput-16.DebugFunctionLoadStatus zeroinitializer, %jaze_xinput-16.DebugFunctionLoadStatus* %5
	; AssignStmt
	; SelectorExpr
	%17 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %5, i64 0, i32 0
	%18 = load %..string, %..string* %2, align 8
	store %..string %18, %..string* %17
	; AssignStmt
	; SelectorExpr
	%19 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %5, i64 0, i32 1
	%20 = load void ()*, void ()** %4, align 8
	; cast - cast
	%21 = bitcast void ()* %20 to %..rawptr
	; cast - cast
	%22 = ptrtoint %..rawptr %21 to i64
	store i64 %22, i64* %19
	; AssignStmt
	; SelectorExpr
	%23 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %5, i64 0, i32 3
	store i1 false, i1* %23
	; SelectorExpr
	%24 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 2
	%25 = load i32, i32* %24, align 4
	%26 = add i32 %25, 1
	store i32 %26, i32* %24
	; IfStmt
	; SelectorExpr
	%27 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %5, i64 0, i32 1
	%28 = load i64, i64* %27, align 8
	%29 = icmp ne i64 %28, 0
	br i1 %29, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%30 = getelementptr inbounds %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %5, i64 0, i32 3
	store i1 true, i1* %30
	; SelectorExpr
	%31 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 3
	%32 = load i32, i32* %31, align 4
	%33 = add i32 %32, 1
	store i32 %33, i32* %31
	br label %if.done-2

if.done-2:
	; append
	; SelectorExpr
	%34 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 0
	%35 = bitcast {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %34 to %..rawptr
	; SelectorExpr
	%36 = getelementptr inbounds %jaze_xinput-16.DebugInfo_t, %jaze_xinput-16.DebugInfo_t* @.jaze_xinput-16.DebugInfo, i64 0, i32 0
	%37 = load {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64,%Allocator}* %36, align 8
	%38 = load %jaze_xinput-16.DebugFunctionLoadStatus, %jaze_xinput-16.DebugFunctionLoadStatus* %5, align 8
	; variadic call argument generation
	store {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64} zeroinitializer, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}* %6
	store [1 x %jaze_xinput-16.DebugFunctionLoadStatus] zeroinitializer, [1 x %jaze_xinput-16.DebugFunctionLoadStatus]* %7
	%39 = getelementptr inbounds [1 x %jaze_xinput-16.DebugFunctionLoadStatus], [1 x %jaze_xinput-16.DebugFunctionLoadStatus]* %7, i64 0, i32 0
	store %jaze_xinput-16.DebugFunctionLoadStatus %38, %jaze_xinput-16.DebugFunctionLoadStatus* %39
	%40 = getelementptr inbounds [1 x %jaze_xinput-16.DebugFunctionLoadStatus], [1 x %jaze_xinput-16.DebugFunctionLoadStatus]* %7, i64 0, i32 0
	%41 = getelementptr inbounds {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 0
	store %jaze_xinput-16.DebugFunctionLoadStatus* %40, %jaze_xinput-16.DebugFunctionLoadStatus** %41
	%42 = getelementptr inbounds {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %42
	%43 = getelementptr inbounds {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %43
	%44 = load {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}, {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64}* %6, align 8
	%45 = extractvalue {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64} %44, 0
	%46 = extractvalue {%jaze_xinput-16.DebugFunctionLoadStatus*, i64, i64} %44, 1
	%47 = bitcast %jaze_xinput-16.DebugFunctionLoadStatus* %45 to %..rawptr
	%48 = call i64 @.__dynamic_array_append(%..rawptr %35, i64 40, i64 8, %..rawptr %47, i64 %46)
	; defer
	; free
	%49 = load i8*, i8** %3, align 8
	%50 = bitcast i8* %49 to %..rawptr
	call void @.free_ptr(%..rawptr %50)
	ret void
}

define {i64, i64} @.os_windows-17.write(i64 %fd, {i8*, i64, i64} %data) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca {i8*, i64, i64}, align 8
	%2 = alloca i32, align 4
	%3 = alloca i32, align 4
	%4 = alloca i32, align 4
	%5 = alloca {i64, i64}, align 8
	%6 = alloca {i64, i64}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %fd, i64* %0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %1
		store {i8*, i64, i64} %data, {i8*, i64, i64}* %1
	; bytes_written
	store i32 zeroinitializer, i32* %2
		; e
	store i32 zeroinitializer, i32* %3
		; SelectorExpr
	%7 = load i64, i64* %0, align 8
	; cast - cast
	%8 = inttoptr i64 %7 to %..rawptr
	; IndexExpr
	%9 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%10 = extractvalue {i8*, i64, i64} %9, 0
	%11 = extractvalue {i8*, i64, i64} %9, 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.__str$21d, i64 0, i32 0), i64 44}, i64 113, i64 51, i64 0, i64 %11)
	%12 = getelementptr inbounds i8, i8* %10, i64 0
	%13 = getelementptr inbounds i8, i8* %12, i64 0
	%14 = load {i8*, i64, i64}, {i8*, i64, i64}* %1, align 8
	%15 = extractvalue {i8*, i64, i64} %14, 1
	; cast - cast
	%16 = trunc i64 %15 to i32
	%17 = getelementptr inbounds i32, i32* %2, i64 0
	%18 = bitcast i8* %13 to %..rawptr
	%19 = call ccc i32 @WriteFile(%..rawptr %8, %..rawptr %18, i32 %16, i32* %17, %..rawptr zeroinitializer)
	store i32 %19, i32* %3
	; IfStmt
	%20 = load i32, i32* %3, align 4
	%21 = icmp eq i32 %20, 0
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; err
	store i32 zeroinitializer, i32* %4
		; SelectorExpr
	%22 = call ccc i32 @GetLastError()
	store i32 %22, i32* %4
	; ReturnStmt
	%23 = load i32, i32* %4, align 4
	; cast - cast
	%24 = sext i32 %23 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %5
	%25 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 0
	store i64 0, i64* %25
	%26 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 1
	store i64 %24, i64* %26
	%27 = load {i64, i64}, {i64, i64}* %5, align 8
	ret {i64, i64} %27

if.done-2:
	; ReturnStmt
	%28 = load i32, i32* %2, align 4
	; cast - cast
	%29 = sext i32 %28 to i64
	store {i64, i64} zeroinitializer, {i64, i64}* %6
	%30 = getelementptr inbounds {i64, i64}, {i64, i64}* %6, i64 0, i32 0
	store i64 %29, i64* %30
	%31 = getelementptr inbounds {i64, i64}, {i64, i64}* %6, i64 0, i32 1
	store i64 0, i64* %31
	%32 = load {i64, i64}, {i64, i64}* %6, align 8
	ret {i64, i64} %32
}

define i64 @.os_windows-17.get_std_handle(i64 %h) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca %..rawptr, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %h, i64* %0
	; fd
	store %..rawptr zeroinitializer, %..rawptr* %1
		; SelectorExpr
	%2 = load i64, i64* %0, align 8
	; cast - cast
	%3 = trunc i64 %2 to i32
	%4 = call ccc %..rawptr @GetStdHandle(i32 %3)
	store %..rawptr %4, %..rawptr* %1
	; SelectorExpr
	%5 = load %..rawptr, %..rawptr* %1, align 8
	%6 = call ccc i32 @SetHandleInformation(%..rawptr %5, i32 1, i32 0)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %1, align 8
	; cast - cast
	%8 = ptrtoint %..rawptr %7 to i64
	ret i64 %8
}

define %..rawptr @.os_windows-17.heap_alloc(i64 %size) {
decls-0:
	%0 = alloca i64, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %size, i64* %0
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%1 = call ccc %..rawptr @GetProcessHeap()
	%2 = load i64, i64* %0, align 8
	%3 = call ccc %..rawptr @HeapAlloc(%..rawptr %1, i32 8, i64 %2)
	ret %..rawptr %3
}

define %..rawptr @.os_windows-17.heap_resize(%..rawptr %ptr, i64 %new_size) {
decls-0:
	%0 = alloca %..rawptr, align 8
	%1 = alloca i64, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	store i64 zeroinitializer, i64* %1
		store i64 %new_size, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp eq i64 %2, 0
	br i1 %3, label %if.then-1, label %if.done-2

if.then-1:
	%4 = load %..rawptr, %..rawptr* %0, align 8
	call void @.os_windows-17.heap_free(%..rawptr %4)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	%5 = load %..rawptr, %..rawptr* %0, align 8
	%6 = icmp eq %..rawptr %5, zeroinitializer
	br i1 %6, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%7 = load i64, i64* %1, align 8
	%8 = call %..rawptr @.os_windows-17.heap_alloc(i64 %7)
	ret %..rawptr %8

if.done-4:
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%9 = call ccc %..rawptr @GetProcessHeap()
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = call ccc %..rawptr @HeapReAlloc(%..rawptr %9, i32 8, %..rawptr %10, i64 %11)
	ret %..rawptr %12
}

define void @.os_windows-17.heap_free(%..rawptr %ptr) {
decls-0:
	%0 = alloca %..rawptr, align 8
	store %..rawptr zeroinitializer, %..rawptr* %0
		store %..rawptr %ptr, %..rawptr* %0
	; IfStmt
	%1 = load %..rawptr, %..rawptr* %0, align 8
	%2 = icmp eq %..rawptr %1, zeroinitializer
	br i1 %2, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%3 = call ccc %..rawptr @GetProcessHeap()
	%4 = load %..rawptr, %..rawptr* %0, align 8
	%5 = call ccc i32 @HeapFree(%..rawptr %3, i32 0, %..rawptr %4)
	ret void
}

define i64 @.os_windows-17.current_thread_id() {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = call ccc i32 @GetCurrentThreadId()
	; cast - cast
	%1 = zext i32 %0 to i64
	ret i64 %1
}

define i1 @.types-20.is_string(%Type_Info* %info) {
decls-0:
	%0 = alloca %Type_Info*, align 8
	%1 = alloca i1, align 1
	%2 = alloca {%Type_Info.String*, i1}, align 8
	store %Type_Info* zeroinitializer, %Type_Info** %0
		store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%3 = load %Type_Info*, %Type_Info** %0, align 8
	%4 = icmp eq %Type_Info* %3, zeroinitializer
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i1 false

if.done-2:
	; ok
	store i1 zeroinitializer, i1* %1
		%5 = load %Type_Info*, %Type_Info** %0, align 8
	%6 = call %Type_Info* @.type_info_base(%Type_Info* %5)
	; cast - union_cast
	store {%Type_Info.String*, i1} zeroinitializer, {%Type_Info.String*, i1}* %2
	%7 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	%8 = load i64, i64* %7, align 8
	%9 = icmp eq i64 %8, 6
	br i1 %9, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%10 = getelementptr inbounds {%Type_Info.String*, i1}, {%Type_Info.String*, i1}* %2, i64 0, i32 0
	%11 = getelementptr inbounds {%Type_Info.String*, i1}, {%Type_Info.String*, i1}* %2, i64 0, i32 1
	%12 = bitcast %Type_Info* %6 to %Type_Info.String*
	store %Type_Info.String* %12, %Type_Info.String** %10
	store i1 true, i1* %11
	br label %union_cast.end-4

union_cast.end-4:
	%13 = load {%Type_Info.String*, i1}, {%Type_Info.String*, i1}* %2, align 8
	%14 = extractvalue {%Type_Info.String*, i1} %13, 0
	%15 = extractvalue {%Type_Info.String*, i1} %13, 1
	store i1 %15, i1* %1
	; ReturnStmt
	%16 = load i1, i1* %1, align 1
	ret i1 %16
}

define %..string @.strconv-21.append_float({i8*, i64, i64} %buf, double %f, i8 %fmt, i64 %prec, i64 %bit_size) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca double, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store double zeroinitializer, double* %1
		store double %f, double* %1
	store i8 zeroinitializer, i8* %2
		store i8 %fmt, i8* %2
	store i64 zeroinitializer, i64* %3
		store i64 %prec, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	; ReturnStmt
	%6 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%7 = load double, double* %1, align 8
	%8 = load i8, i8* %2, align 1
	%9 = load i64, i64* %3, align 8
	%10 = load i64, i64* %4, align 8
	%11 = call {i8*, i64, i64} @.strconv-21.generic_ftoa({i8*, i64, i64} %6, double %7, i8 %8, i64 %9, i64 %10)
	; cast - cast
	%12 = extractvalue {i8*, i64, i64} %11, 0
	%13 = extractvalue {i8*, i64, i64} %11, 1
	store %..string zeroinitializer, %..string* %5
	%14 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	%15 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i8* %12, i8** %14
	store i64 %13, i64* %15
	%16 = load %..string, %..string* %5, align 8
	ret %..string %16
}

define {i8*, i64, i64} @.strconv-21.generic_ftoa({i8*, i64, i64} %buf, double %val, i8 %fmt, i64 %prec, i64 %bit_size) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca double, align 8
	%2 = alloca i8, align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca %strconv-21.Float_Info*, align 8
	%7 = alloca i64, align 8
	%8 = alloca i1, align 1
	%9 = alloca i64, align 8
	%10 = alloca i64, align 8
	%11 = alloca %..string, align 8
	%12 = alloca i8*, align 8
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca %decimal-23.Decimal, align 8
	%15 = alloca %decimal-23.Decimal*, align 8
	%16 = alloca %strconv-21.Decimal_Slice, align 8
	%17 = alloca i1, align 1
	%18 = alloca %strconv-21.Decimal_Slice, align 8
	%19 = alloca {i8*, i64, i64}, align 8
	%20 = alloca %strconv-21.Decimal_Slice, align 8
	%21 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store double zeroinitializer, double* %1
		store double %val, double* %1
	store i8 zeroinitializer, i8* %2
		store i8 %fmt, i8* %2
	store i64 zeroinitializer, i64* %3
		store i64 %prec, i64* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	; bits
	store i64 zeroinitializer, i64* %5
		; flt
	store %strconv-21.Float_Info* zeroinitializer, %strconv-21.Float_Info** %6
		; MatchStmt
	%22 = load i64, i64* %4, align 8
	%23 = icmp eq i64 %22, 32
	br i1 %23, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%24 = icmp eq i64 %22, 64
	br i1 %24, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	; AssignStmt
	%25 = load double, double* %1, align 8
	; cast - cast
	%26 = fptrunc double %25 to float
	; cast - transmute
	%27 = bitcast float %26 to i32
	; cast - cast
	%28 = zext i32 %27 to i64
	store i64 %28, i64* %5
	; AssignStmt
	%29 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* @.strconv-21.f32_info, i64 0
	store %strconv-21.Float_Info* %29, %strconv-21.Float_Info** %6
	br label %match.done-5

match.case.next-3:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$21e, i64 0, i32 0), i64 41}, i64 70, i64 9, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.__str$21f, i64 0, i32 0), i64 25})
	br label %match.done-5

match.fall.body-4:
	; AssignStmt
	; Cast - transmute
	store i64 zeroinitializer, i64* %7
	%30 = load double, double* %1, align 8
	%31 = bitcast double %30 to i64
	store i64 %31, i64* %7
	%32 = load i64, i64* %7, align 8
	store i64 %32, i64* %5
	; AssignStmt
	%33 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* @.strconv-21.f64_info, i64 0
	store %strconv-21.Float_Info* %33, %strconv-21.Float_Info** %6
	br label %match.done-5

match.done-5:
	; neg
	store i1 zeroinitializer, i1* %8
		%34 = load i64, i64* %5, align 8
	; SelectorExpr
	%35 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%36 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %35, i64 0
	%37 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %36, i64 0, i32 1
	%38 = load i64, i64* %37, align 8
	; SelectorExpr
	%39 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%40 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %39, i64 0
	%41 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %40, i64 0, i32 0
	%42 = load i64, i64* %41, align 8
	%43 = add i64 %38, %42
	%44 = lshr i64 %34, %43
	%45 = icmp ne i64 %44, 0
	store i1 %45, i1* %8
	; exp
	store i64 zeroinitializer, i64* %9
		%46 = load i64, i64* %5, align 8
	; SelectorExpr
	%47 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%48 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %47, i64 0
	%49 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %48, i64 0, i32 0
	%50 = load i64, i64* %49, align 8
	%51 = lshr i64 %46, %50
	; cast - cast
	%52 = bitcast i64 %51 to i64
	; SelectorExpr
	%53 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%54 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %53, i64 0
	%55 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %54, i64 0, i32 1
	%56 = load i64, i64* %55, align 8
	%57 = shl i64 1, %56
	%58 = sub i64 %57, 1
	%59 = and i64 %52, %58
	store i64 %59, i64* %9
	; mant
	store i64 zeroinitializer, i64* %10
		%60 = load i64, i64* %5, align 8
	; SelectorExpr
	%61 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%62 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %61, i64 0
	%63 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %62, i64 0, i32 0
	%64 = load i64, i64* %63, align 8
	%65 = shl i64 1, %64
	%66 = sub i64 %65, 1
	%67 = and i64 %60, %66
	store i64 %67, i64* %10
	; MatchStmt
	%68 = load i64, i64* %9, align 8
	; SelectorExpr
	%69 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%70 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %69, i64 0
	%71 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %70, i64 0, i32 1
	%72 = load i64, i64* %71, align 8
	%73 = shl i64 1, %72
	%74 = sub i64 %73, 1
	%75 = icmp eq i64 %68, %74
	br i1 %75, label %match.case.body-7, label %match.case.next-6

match.case.next-6:
	%76 = icmp eq i64 %68, 0
	br i1 %76, label %match.fall.body-15, label %match.case.next-14

match.case.body-7:
	; s
	store %..string zeroinitializer, %..string* %11
		; IfStmt
	%77 = load i64, i64* %10, align 8
	%78 = icmp ne i64 %77, 0
	br i1 %78, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$220, i64 0, i32 0), i64 3}, %..string* %11
	br label %if.done-13

if.else-9:
	; IfStmt
	%79 = load i1, i1* %8, align 1
	br i1 %79, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$221, i64 0, i32 0), i64 4}, %..string* %11
	br label %if.done-12

if.else-11:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$222, i64 0, i32 0), i64 4}, %..string* %11
	br label %if.done-12

if.done-12:
	br label %if.done-13

if.done-13:
	; append
	%80 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%81 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%82 = load %..string, %..string* %11, align 8
	; cast - cast
	%83 = extractvalue %..string %82, 0
	store i8* zeroinitializer, i8** %12
	store i8* %83, i8** %12
	%84 = extractvalue %..string %82, 1
	%85 = sub i64 %84, 0
	%86 = sub i64 %84, 0
	%87 = load i8*, i8** %12, align 8
	%88 = getelementptr inbounds i8, i8* %87, i64 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%89 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %88, i8** %89
	%90 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %85, i64* %90
	%91 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %86, i64* %91
	%92 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%93 = extractvalue {i8*, i64, i64} %92, 0
	%94 = extractvalue {i8*, i64, i64} %92, 1
	%95 = bitcast i8* %93 to %..rawptr
	%96 = call i64 @.__slice_append(%..rawptr %80, i64 1, i64 1, %..rawptr %95, i64 %94)
	; ReturnStmt
	%97 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %97

match.case.next-14:
	; AssignStmt
	; SelectorExpr
	%98 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%99 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %98, i64 0
	%100 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %99, i64 0, i32 0
	%101 = load i64, i64* %100, align 8
	%102 = shl i64 1, %101
	%103 = load i64, i64* %10, align 8
	%104 = or i64 %103, %102
	store i64 %104, i64* %10
	br label %match.done-16

match.fall.body-15:
	%105 = load i64, i64* %9, align 8
	%106 = add i64 %105, 1
	store i64 %106, i64* %9
	br label %match.done-16

match.done-16:
	; AssignStmt
	; SelectorExpr
	%107 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%108 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %107, i64 0
	%109 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %108, i64 0, i32 2
	%110 = load i64, i64* %109, align 8
	%111 = load i64, i64* %9, align 8
	%112 = add i64 %111, %110
	store i64 %112, i64* %9
	; d_
	store %decimal-23.Decimal zeroinitializer, %decimal-23.Decimal* %14
		; d
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %15
		%113 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %14, i64 0
	store %decimal-23.Decimal* %113, %decimal-23.Decimal** %15
	%114 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%115 = load i64, i64* %10, align 8
	call void @.decimal-23.assign(%decimal-23.Decimal* %114, i64 %115)
	%116 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%117 = load i64, i64* %9, align 8
	; SelectorExpr
	%118 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	%119 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %118, i64 0
	%120 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %119, i64 0, i32 0
	%121 = load i64, i64* %120, align 8
	; cast - cast
	%122 = bitcast i64 %121 to i64
	%123 = sub i64 %117, %122
	call void @.decimal-23.shift(%decimal-23.Decimal* %116, i64 %123)
	; digs
	store %strconv-21.Decimal_Slice zeroinitializer, %strconv-21.Decimal_Slice* %16
		; shortest
	store i1 zeroinitializer, i1* %17
		%124 = load i64, i64* %3, align 8
	%125 = icmp slt i64 %124, 0
	store i1 %125, i1* %17
	; IfStmt
	%126 = load i1, i1* %17, align 1
	br i1 %126, label %if.then-17, label %if.else-28

if.then-17:
	%127 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%128 = load i64, i64* %10, align 8
	%129 = load i64, i64* %9, align 8
	%130 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %6, align 8
	call void @.strconv-21.round_shortest(%decimal-23.Decimal* %127, i64 %128, i64 %129, %strconv-21.Float_Info* %130)
	; AssignStmt
	; CompoundLit
	store %strconv-21.Decimal_Slice zeroinitializer, %strconv-21.Decimal_Slice* %18
	store %strconv-21.Decimal_Slice {{i8*, i64, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i1 zeroinitializer}, %strconv-21.Decimal_Slice* %18
	; SliceExpr
	; SelectorExpr
	%131 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%132 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %131, i64 0
	%133 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %132, i64 0, i32 2
	%134 = load [384 x i8], [384 x i8]* %133, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$223, i64 0, i32 0), i64 41}, i64 107, i64 41, i64 0, i64 384, i64 384)
	%135 = getelementptr inbounds [384 x i8], [384 x i8]* %133, i64 0, i32 0
	%136 = getelementptr inbounds i8, i8* %135, i64 0
	%137 = sub i64 384, 0
	%138 = sub i64 384, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %19
	%139 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 0
	store i8* %136, i8** %139
	%140 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 1
	store i64 %137, i64* %140
	%141 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %19, i64 0, i32 2
	store i64 %138, i64* %141
	%142 = load {i8*, i64, i64}, {i8*, i64, i64}* %19, align 8
	%143 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %18, i64 0, i32 0
	store {i8*, i64, i64} %142, {i8*, i64, i64}* %143
	; SelectorExpr
	%144 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%145 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %144, i64 0
	%146 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %145, i64 0, i32 0
	%147 = load i64, i64* %146, align 8
	%148 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %18, i64 0, i32 1
	store i64 %147, i64* %148
	; SelectorExpr
	%149 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%150 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %149, i64 0
	%151 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %150, i64 0, i32 1
	%152 = load i64, i64* %151, align 8
	%153 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %18, i64 0, i32 2
	store i64 %152, i64* %153
	%154 = load %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %18, align 8
	store %strconv-21.Decimal_Slice %154, %strconv-21.Decimal_Slice* %16
	; MatchStmt
	%155 = load i8, i8* %2, align 1
	%156 = icmp eq i8 %155, 101
	br i1 %156, label %match.case.body-20, label %match.case.next-18

match.case.next-18:
	%157 = icmp eq i8 %155, 69
	br i1 %157, label %match.case.body-20, label %match.case.next-19

match.case.next-19:
	%158 = icmp eq i8 %155, 102
	br i1 %158, label %match.fall.body-23, label %match.case.next-21

match.case.body-20:
	; AssignStmt
	; SelectorExpr
	%159 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %16, i64 0, i32 1
	%160 = load i64, i64* %159, align 8
	%161 = sub i64 %160, 1
	store i64 %161, i64* %3
	br label %match.done-27

match.case.next-21:
	%162 = icmp eq i8 %155, 70
	br i1 %162, label %match.fall.body-23, label %match.case.next-22

match.case.next-22:
	%163 = icmp eq i8 %155, 103
	br i1 %163, label %match.fall.body-26, label %match.case.next-24

match.fall.body-23:
	; AssignStmt
	; max
	; SelectorExpr
	%164 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %16, i64 0, i32 1
	%165 = load i64, i64* %164, align 8
	; SelectorExpr
	%166 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %16, i64 0, i32 2
	%167 = load i64, i64* %166, align 8
	%168 = sub i64 %165, %167
	%169 = icmp sgt i64 %168, 0
	%170 = select i1 %169, i64 %168, i64 0
	store i64 %170, i64* %3
	br label %match.done-27

match.case.next-24:
	%171 = icmp eq i8 %155, 71
	br i1 %171, label %match.fall.body-26, label %match.case.next-25

match.case.next-25:
	br label %match.done-27

match.fall.body-26:
	; AssignStmt
	; SelectorExpr
	%172 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %16, i64 0, i32 1
	%173 = load i64, i64* %172, align 8
	store i64 %173, i64* %3
	br label %match.done-27

match.done-27:
	br label %if.done-41

if.else-28:
	; MatchStmt
	%174 = load i8, i8* %2, align 1
	%175 = icmp eq i8 %174, 101
	br i1 %175, label %match.case.body-31, label %match.case.next-29

match.case.next-29:
	%176 = icmp eq i8 %174, 69
	br i1 %176, label %match.case.body-31, label %match.case.next-30

match.case.next-30:
	%177 = icmp eq i8 %174, 102
	br i1 %177, label %match.fall.body-34, label %match.case.next-32

match.case.body-31:
	%178 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%179 = load i64, i64* %3, align 8
	%180 = add i64 %179, 1
	call void @.decimal-23.round(%decimal-23.Decimal* %178, i64 %180)
	br label %match.done-40

match.case.next-32:
	%181 = icmp eq i8 %174, 70
	br i1 %181, label %match.fall.body-34, label %match.case.next-33

match.case.next-33:
	%182 = icmp eq i8 %174, 103
	br i1 %182, label %match.fall.body-37, label %match.case.next-35

match.fall.body-34:
	%183 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	; SelectorExpr
	%184 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%185 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %184, i64 0
	%186 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %185, i64 0, i32 1
	%187 = load i64, i64* %186, align 8
	%188 = load i64, i64* %3, align 8
	%189 = add i64 %187, %188
	call void @.decimal-23.round(%decimal-23.Decimal* %183, i64 %189)
	br label %match.done-40

match.case.next-35:
	%190 = icmp eq i8 %174, 71
	br i1 %190, label %match.fall.body-37, label %match.case.next-36

match.case.next-36:
	br label %match.done-40

match.fall.body-37:
	; IfStmt
	%191 = load i64, i64* %3, align 8
	%192 = icmp eq i64 %191, 0
	br i1 %192, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	store i64 1, i64* %3
	br label %if.done-39

if.done-39:
	%193 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%194 = load i64, i64* %3, align 8
	call void @.decimal-23.round(%decimal-23.Decimal* %193, i64 %194)
	br label %match.done-40

match.done-40:
	; AssignStmt
	; CompoundLit
	store %strconv-21.Decimal_Slice zeroinitializer, %strconv-21.Decimal_Slice* %20
	store %strconv-21.Decimal_Slice {{i8*, i64, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i1 zeroinitializer}, %strconv-21.Decimal_Slice* %20
	; SliceExpr
	; SelectorExpr
	%195 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%196 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %195, i64 0
	%197 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %196, i64 0, i32 2
	%198 = load [384 x i8], [384 x i8]* %197, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$224, i64 0, i32 0), i64 41}, i64 124, i64 41, i64 0, i64 384, i64 384)
	%199 = getelementptr inbounds [384 x i8], [384 x i8]* %197, i64 0, i32 0
	%200 = getelementptr inbounds i8, i8* %199, i64 0
	%201 = sub i64 384, 0
	%202 = sub i64 384, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %21
	%203 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 0
	store i8* %200, i8** %203
	%204 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 1
	store i64 %201, i64* %204
	%205 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 2
	store i64 %202, i64* %205
	%206 = load {i8*, i64, i64}, {i8*, i64, i64}* %21, align 8
	%207 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %20, i64 0, i32 0
	store {i8*, i64, i64} %206, {i8*, i64, i64}* %207
	; SelectorExpr
	%208 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%209 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %208, i64 0
	%210 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %209, i64 0, i32 0
	%211 = load i64, i64* %210, align 8
	%212 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %20, i64 0, i32 1
	store i64 %211, i64* %212
	; SelectorExpr
	%213 = load %decimal-23.Decimal*, %decimal-23.Decimal** %15, align 8
	%214 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %213, i64 0
	%215 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %214, i64 0, i32 1
	%216 = load i64, i64* %215, align 8
	%217 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %20, i64 0, i32 2
	store i64 %216, i64* %217
	%218 = load %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %20, align 8
	store %strconv-21.Decimal_Slice %218, %strconv-21.Decimal_Slice* %16
	br label %if.done-41

if.done-41:
	; ReturnStmt
	%219 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%220 = load i1, i1* %17, align 1
	%221 = load i1, i1* %8, align 1
	%222 = load %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %16, align 8
	%223 = load i64, i64* %3, align 8
	%224 = load i8, i8* %2, align 1
	%225 = call {i8*, i64, i64} @.strconv-21.format_digits({i8*, i64, i64} %219, i1 %220, i1 %221, %strconv-21.Decimal_Slice %222, i64 %223, i8 %224)
	ret {i8*, i64, i64} %225
}

define {i8*, i64, i64} @.strconv-21.format_digits({i8*, i64, i64} %buf, i1 %shortest, i1 %neg, %strconv-21.Decimal_Slice %digs, i64 %prec, i8 %fmt) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i1, align 1
	%2 = alloca i1, align 1
	%3 = alloca %strconv-21.Decimal_Slice, align 8
	%4 = alloca i64, align 8
	%5 = alloca i8, align 1
	%6 = alloca {i8*, i64, i64}, align 8
	%7 = alloca [1 x i8], align 1
	%8 = alloca i64, align 8
	%9 = alloca {i8*, i64, i64}, align 8
	%10 = alloca {i8*, i64, i64}, align 8
	%11 = alloca [1 x i8], align 1
	%12 = alloca {i8*, i64, i64}, align 8
	%13 = alloca [1 x i8], align 1
	%14 = alloca {i8*, i64, i64}, align 8
	%15 = alloca [1 x i8], align 1
	%16 = alloca i64, align 8
	%17 = alloca i64, align 8
	%18 = alloca i64, align 8
	%19 = alloca i8, align 1
	%20 = alloca i64, align 8
	%21 = alloca {i8*, i64, i64}, align 8
	%22 = alloca [1 x i8], align 1
	%23 = alloca [2 x i8], align 1
	%24 = alloca {i8*, i64, i64}, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store i1 zeroinitializer, i1* %1
		store i1 %shortest, i1* %1
	store i1 zeroinitializer, i1* %2
		store i1 %neg, i1* %2
	store %strconv-21.Decimal_Slice zeroinitializer, %strconv-21.Decimal_Slice* %3
		store %strconv-21.Decimal_Slice %digs, %strconv-21.Decimal_Slice* %3
	store i64 zeroinitializer, i64* %4
		store i64 %prec, i64* %4
	store i8 zeroinitializer, i8* %5
		store i8 %fmt, i8* %5
	; MatchStmt
	%25 = load i8, i8* %5, align 1
	%26 = icmp eq i8 %25, 102
	br i1 %26, label %match.case.body-3, label %match.case.next-1

match.case.next-1:
	%27 = icmp eq i8 %25, 70
	br i1 %27, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%28 = icmp eq i8 %25, 101
	br i1 %28, label %match.fall.body-23, label %match.case.next-21

match.case.body-3:
	; append
	%29 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%30 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; TernaryExpr
	%31 = load i1, i1* %2, align 1
	br i1 %31, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%32 = phi i8 [ 45, %if.then-4 ], [ 43, %if.else-5 ]
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %6
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%33 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %32, i8* %33
	%34 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%35 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 0
	store i8* %34, i8** %35
	%36 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 1
	store i64 1, i64* %36
	%37 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %6, i64 0, i32 2
	store i64 1, i64* %37
	%38 = load {i8*, i64, i64}, {i8*, i64, i64}* %6, align 8
	%39 = extractvalue {i8*, i64, i64} %38, 0
	%40 = extractvalue {i8*, i64, i64} %38, 1
	%41 = bitcast i8* %39 to %..rawptr
	%42 = call i64 @.__slice_append(%..rawptr %29, i64 1, i64 1, %..rawptr %41, i64 %40)
	; IfStmt
	; SelectorExpr
	%43 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 2
	%44 = load i64, i64* %43, align 8
	%45 = icmp sgt i64 %44, 0
	br i1 %45, label %if.then-7, label %if.else-11

if.then-7:
	; m
	store i64 zeroinitializer, i64* %8
		; min
	; SelectorExpr
	%46 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 1
	%47 = load i64, i64* %46, align 8
	; SelectorExpr
	%48 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 2
	%49 = load i64, i64* %48, align 8
	%50 = icmp slt i64 %47, %49
	%51 = select i1 %50, i64 %47, i64 %49
	store i64 %51, i64* %8
	; append
	%52 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%53 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%54 = load i64, i64* %8, align 8
	; SelectorExpr
	%55 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 0
	%56 = load {i8*, i64, i64}, {i8*, i64, i64}* %55, align 8
	%57 = extractvalue {i8*, i64, i64} %56, 2
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$225, i64 0, i32 0), i64 41}, i64 139, i64 29, i64 0, i64 %54, i64 %57)
	%58 = extractvalue {i8*, i64, i64} %56, 0
	%59 = getelementptr inbounds i8, i8* %58, i64 0
	%60 = sub i64 %54, 0
	%61 = sub i64 %57, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %9
	%62 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 0
	store i8* %59, i8** %62
	%63 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 1
	store i64 %60, i64* %63
	%64 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %9, i64 0, i32 2
	store i64 %61, i64* %64
	%65 = load {i8*, i64, i64}, {i8*, i64, i64}* %9, align 8
	%66 = extractvalue {i8*, i64, i64} %65, 0
	%67 = extractvalue {i8*, i64, i64} %65, 1
	%68 = bitcast i8* %66 to %..rawptr
	%69 = call i64 @.__slice_append(%..rawptr %52, i64 1, i64 1, %..rawptr %68, i64 %67)
	; ForStmt
	br label %for.loop-8

for.loop-8:
	%70 = load i64, i64* %8, align 8
	; SelectorExpr
	%71 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 2
	%72 = load i64, i64* %71, align 8
	%73 = icmp slt i64 %70, %72
	br i1 %73, label %for.body-9, label %for.done-10

for.body-9:
	; append
	%74 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%75 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %10
	store [1 x i8] zeroinitializer, [1 x i8]* %11
	%76 = getelementptr inbounds [1 x i8], [1 x i8]* %11, i64 0, i32 0
	store i8 48, i8* %76
	%77 = getelementptr inbounds [1 x i8], [1 x i8]* %11, i64 0, i32 0
	%78 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 0
	store i8* %77, i8** %78
	%79 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 1
	store i64 1, i64* %79
	%80 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %10, i64 0, i32 2
	store i64 1, i64* %80
	%81 = load {i8*, i64, i64}, {i8*, i64, i64}* %10, align 8
	%82 = extractvalue {i8*, i64, i64} %81, 0
	%83 = extractvalue {i8*, i64, i64} %81, 1
	%84 = bitcast i8* %82 to %..rawptr
	%85 = call i64 @.__slice_append(%..rawptr %74, i64 1, i64 1, %..rawptr %84, i64 %83)
	%86 = load i64, i64* %8, align 8
	%87 = add i64 %86, 1
	store i64 %87, i64* %8
	br label %for.loop-8

for.done-10:
	br label %if.done-12

if.else-11:
	; append
	%88 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%89 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %12
	store [1 x i8] zeroinitializer, [1 x i8]* %13
	%90 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	store i8 48, i8* %90
	%91 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	%92 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 0
	store i8* %91, i8** %92
	%93 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 1
	store i64 1, i64* %93
	%94 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %12, i64 0, i32 2
	store i64 1, i64* %94
	%95 = load {i8*, i64, i64}, {i8*, i64, i64}* %12, align 8
	%96 = extractvalue {i8*, i64, i64} %95, 0
	%97 = extractvalue {i8*, i64, i64} %95, 1
	%98 = bitcast i8* %96 to %..rawptr
	%99 = call i64 @.__slice_append(%..rawptr %88, i64 1, i64 1, %..rawptr %98, i64 %97)
	br label %if.done-12

if.done-12:
	; IfStmt
	%100 = load i64, i64* %4, align 8
	%101 = icmp sgt i64 %100, 0
	br i1 %101, label %if.then-13, label %if.done-20

if.then-13:
	; append
	%102 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%103 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %14
	store [1 x i8] zeroinitializer, [1 x i8]* %15
	%104 = getelementptr inbounds [1 x i8], [1 x i8]* %15, i64 0, i32 0
	store i8 46, i8* %104
	%105 = getelementptr inbounds [1 x i8], [1 x i8]* %15, i64 0, i32 0
	%106 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 0
	store i8* %105, i8** %106
	%107 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 1
	store i64 1, i64* %107
	%108 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %14, i64 0, i32 2
	store i64 1, i64* %108
	%109 = load {i8*, i64, i64}, {i8*, i64, i64}* %14, align 8
	%110 = extractvalue {i8*, i64, i64} %109, 0
	%111 = extractvalue {i8*, i64, i64} %109, 1
	%112 = bitcast i8* %110 to %..rawptr
	%113 = call i64 @.__slice_append(%..rawptr %102, i64 1, i64 1, %..rawptr %112, i64 %111)
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %16
		store i64 zeroinitializer, i64* %17
	store i64 0, i64* %17
	store i64 zeroinitializer, i64* %18
	store i64 0, i64* %18
	br label %for.interval.loop-14

for.interval.loop-14:
	%114 = load i64, i64* %4, align 8
	%115 = load i64, i64* %17, align 8
	%116 = icmp slt i64 %115, %114
	br i1 %116, label %for.interval.body-15, label %for.interval.done-19

for.interval.body-15:
	%117 = load i64, i64* %17, align 8
	%118 = load i64, i64* %18, align 8
	%119 = load i64, i64* %17, align 8
	%120 = add i64 %119, 1
	store i64 %120, i64* %17
	%121 = load i64, i64* %18, align 8
	%122 = add i64 %121, 1
	store i64 %122, i64* %18
	store i64 %117, i64* %16
	; c
	store i8 zeroinitializer, i8* %19
		store i8 48, i8* %19
	; IfStmt
	; j
	store i64 zeroinitializer, i64* %20
		; SelectorExpr
	%123 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 2
	%124 = load i64, i64* %123, align 8
	%125 = load i64, i64* %16, align 8
	%126 = add i64 %124, %125
	store i64 %126, i64* %20
	%127 = load i64, i64* %20, align 8
	%128 = icmp sle i64 0, %127
	br i1 %128, label %cmp.and-16, label %if.done-18

cmp.and-16:
	%129 = load i64, i64* %20, align 8
	; SelectorExpr
	%130 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 1
	%131 = load i64, i64* %130, align 8
	%132 = icmp slt i64 %129, %131
	br i1 %132, label %if.then-17, label %if.done-18

if.then-17:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%133 = getelementptr inbounds %strconv-21.Decimal_Slice, %strconv-21.Decimal_Slice* %3, i64 0, i32 0
	%134 = load {i8*, i64, i64}, {i8*, i64, i64}* %133, align 8
	%135 = extractvalue {i8*, i64, i64} %134, 0
	%136 = extractvalue {i8*, i64, i64} %134, 1
	%137 = load i64, i64* %20, align 8
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$226, i64 0, i32 0), i64 41}, i64 154, i64 22, i64 %137, i64 %136)
	%138 = getelementptr inbounds i8, i8* %135, i64 %137
	%139 = load i8, i8* %138, align 1
	store i8 %139, i8* %19
	br label %if.done-18

if.done-18:
	; append
	%140 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%141 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	%142 = load i8, i8* %19, align 1
	; variadic call argument generation
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %21
	store [1 x i8] zeroinitializer, [1 x i8]* %22
	%143 = getelementptr inbounds [1 x i8], [1 x i8]* %22, i64 0, i32 0
	store i8 %142, i8* %143
	%144 = getelementptr inbounds [1 x i8], [1 x i8]* %22, i64 0, i32 0
	%145 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 0
	store i8* %144, i8** %145
	%146 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 1
	store i64 1, i64* %146
	%147 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %21, i64 0, i32 2
	store i64 1, i64* %147
	%148 = load {i8*, i64, i64}, {i8*, i64, i64}* %21, align 8
	%149 = extractvalue {i8*, i64, i64} %148, 0
	%150 = extractvalue {i8*, i64, i64} %148, 1
	%151 = bitcast i8* %149 to %..rawptr
	%152 = call i64 @.__slice_append(%..rawptr %140, i64 1, i64 1, %..rawptr %151, i64 %150)
	br label %for.interval.loop-14

for.interval.done-19:
	br label %if.done-20

if.done-20:
	; ReturnStmt
	%153 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %153

match.case.next-21:
	%154 = icmp eq i8 %25, 69
	br i1 %154, label %match.fall.body-23, label %match.case.next-22

match.case.next-22:
	%155 = icmp eq i8 %25, 103
	br i1 %155, label %match.fall.body-26, label %match.case.next-24

match.fall.body-23:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$227, i64 0, i32 0), i64 41}, i64 163, i64 9, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$228, i64 0, i32 0), i64 48})
	; ReturnStmt
	%156 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %156

match.case.next-24:
	%157 = icmp eq i8 %25, 71
	br i1 %157, label %match.fall.body-26, label %match.case.next-25

match.case.next-25:
	br label %match.done-27

match.fall.body-26:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$229, i64 0, i32 0), i64 41}, i64 167, i64 9, %..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.__str$22a, i64 0, i32 0), i64 48})
	; ReturnStmt
	%158 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %158

match.done-27:
	; c
	store [2 x i8] zeroinitializer, [2 x i8]* %23
		; AssignStmt
	; IndexExpr
	%159 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$22b, i64 0, i32 0), i64 41}, i64 172, i64 4, i64 0, i64 2)
	store i8 37, i8* %159
	; AssignStmt
	; IndexExpr
	%160 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i32 1
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$22c, i64 0, i32 0), i64 41}, i64 173, i64 4, i64 1, i64 2)
	%161 = load i8, i8* %5, align 1
	store i8 %161, i8* %160
	; append
	%162 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%163 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%164 = load [2 x i8], [2 x i8]* %23, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$22d, i64 0, i32 0), i64 41}, i64 174, i64 17, i64 0, i64 2, i64 2)
	%165 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i32 0
	%166 = getelementptr inbounds i8, i8* %165, i64 0
	%167 = sub i64 2, 0
	%168 = sub i64 2, 0
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %24
	%169 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 0
	store i8* %166, i8** %169
	%170 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 1
	store i64 %167, i64* %170
	%171 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %24, i64 0, i32 2
	store i64 %168, i64* %171
	%172 = load {i8*, i64, i64}, {i8*, i64, i64}* %24, align 8
	%173 = extractvalue {i8*, i64, i64} %172, 0
	%174 = extractvalue {i8*, i64, i64} %172, 1
	%175 = bitcast i8* %173 to %..rawptr
	%176 = call i64 @.__slice_append(%..rawptr %162, i64 1, i64 1, %..rawptr %175, i64 %174)
	; ReturnStmt
	%177 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	ret {i8*, i64, i64} %177
}

define void @.strconv-21.round_shortest(%decimal-23.Decimal* %d, i64 %mant, i64 %exp, %strconv-21.Float_Info* %flt) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca %strconv-21.Float_Info*, align 8
	%4 = alloca i64, align 8
	%5 = alloca %decimal-23.Decimal, align 8
	%6 = alloca %decimal-23.Decimal*, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca %decimal-23.Decimal, align 8
	%10 = alloca %decimal-23.Decimal*, align 8
	%11 = alloca i1, align 1
	%12 = alloca i64, align 8
	%13 = alloca i64, align 8
	%14 = alloca i64, align 8
	%15 = alloca i8, align 1
	%16 = alloca i8, align 1
	%17 = alloca i8, align 1
	%18 = alloca i1, align 1
	%19 = alloca i1, align 1
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %d, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %mant, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %exp, i64* %2
	store %strconv-21.Float_Info* zeroinitializer, %strconv-21.Float_Info** %3
		store %strconv-21.Float_Info* %flt, %strconv-21.Float_Info** %3
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp eq i64 %20, 0
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ReturnStmt
	ret void

if.done-2:
	; minexp
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%25 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %3, align 8
	%26 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %25, i64 0
	%27 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %26, i64 0, i32 2
	%28 = load i64, i64* %27, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %4
	; IfStmt
	%30 = load i64, i64* %2, align 8
	%31 = load i64, i64* %4, align 8
	%32 = icmp sgt i64 %30, %31
	br i1 %32, label %cmp.and-3, label %if.done-5

cmp.and-3:
	; SelectorExpr
	%33 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %34, i64 0, i32 1
	%36 = load i64, i64* %35, align 8
	; SelectorExpr
	%37 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%38 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %37, i64 0
	%39 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %38, i64 0, i32 0
	%40 = load i64, i64* %39, align 8
	%41 = sub i64 %36, %40
	%42 = mul i64 332, %41
	%43 = load i64, i64* %2, align 8
	; SelectorExpr
	%44 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %3, align 8
	%45 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %44, i64 0
	%46 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %45, i64 0, i32 0
	%47 = load i64, i64* %46, align 8
	; cast - cast
	%48 = bitcast i64 %47 to i64
	%49 = sub i64 %43, %48
	%50 = mul i64 100, %49
	%51 = icmp sge i64 %42, %50
	br i1 %51, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	ret void

if.done-5:
	; upper_
	store %decimal-23.Decimal zeroinitializer, %decimal-23.Decimal* %5
		; upper
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %6
		%52 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %5, i64 0
	store %decimal-23.Decimal* %52, %decimal-23.Decimal** %6
	%53 = load %decimal-23.Decimal*, %decimal-23.Decimal** %6, align 8
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 2, %54
	%56 = sub i64 %55, 1
	call void @.decimal-23.assign(%decimal-23.Decimal* %53, i64 %56)
	%57 = load %decimal-23.Decimal*, %decimal-23.Decimal** %6, align 8
	%58 = load i64, i64* %2, align 8
	; SelectorExpr
	%59 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %3, align 8
	%60 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %59, i64 0
	%61 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %60, i64 0, i32 0
	%62 = load i64, i64* %61, align 8
	; cast - cast
	%63 = bitcast i64 %62 to i64
	%64 = sub i64 %58, %63
	%65 = sub i64 %64, 1
	call void @.decimal-23.shift(%decimal-23.Decimal* %57, i64 %65)
	; mantlo
	store i64 zeroinitializer, i64* %7
		; explo
	store i64 zeroinitializer, i64* %8
		; IfStmt
	%66 = load i64, i64* %1, align 8
	; SelectorExpr
	%67 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %3, align 8
	%68 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %67, i64 0
	%69 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %68, i64 0, i32 0
	%70 = load i64, i64* %69, align 8
	%71 = shl i64 1, %70
	%72 = icmp ugt i64 %66, %71
	br i1 %72, label %if.then-7, label %cmp.or-6

cmp.or-6:
	%73 = load i64, i64* %2, align 8
	%74 = load i64, i64* %4, align 8
	%75 = icmp eq i64 %73, %74
	br i1 %75, label %if.then-7, label %if.else-8

if.then-7:
	; AssignStmt
	%76 = load i64, i64* %1, align 8
	%77 = sub i64 %76, 1
	store i64 %77, i64* %7
	; AssignStmt
	%78 = load i64, i64* %2, align 8
	store i64 %78, i64* %8
	br label %if.done-9

if.else-8:
	; AssignStmt
	%79 = load i64, i64* %1, align 8
	%80 = mul i64 2, %79
	%81 = sub i64 %80, 1
	store i64 %81, i64* %7
	; AssignStmt
	%82 = load i64, i64* %2, align 8
	%83 = sub i64 %82, 1
	store i64 %83, i64* %8
	br label %if.done-9

if.done-9:
	; lower_
	store %decimal-23.Decimal zeroinitializer, %decimal-23.Decimal* %9
		; lower
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %10
		%84 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %9, i64 0
	store %decimal-23.Decimal* %84, %decimal-23.Decimal** %10
	%85 = load %decimal-23.Decimal*, %decimal-23.Decimal** %10, align 8
	%86 = load i64, i64* %7, align 8
	%87 = mul i64 2, %86
	%88 = add i64 %87, 1
	call void @.decimal-23.assign(%decimal-23.Decimal* %85, i64 %88)
	%89 = load %decimal-23.Decimal*, %decimal-23.Decimal** %10, align 8
	%90 = load i64, i64* %8, align 8
	; SelectorExpr
	%91 = load %strconv-21.Float_Info*, %strconv-21.Float_Info** %3, align 8
	%92 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %91, i64 0
	%93 = getelementptr inbounds %strconv-21.Float_Info, %strconv-21.Float_Info* %92, i64 0, i32 0
	%94 = load i64, i64* %93, align 8
	; cast - cast
	%95 = bitcast i64 %94 to i64
	%96 = sub i64 %90, %95
	%97 = sub i64 %96, 1
	call void @.decimal-23.shift(%decimal-23.Decimal* %89, i64 %97)
	; inclusive
	store i1 zeroinitializer, i1* %11
		%98 = load i64, i64* %1, align 8
	%99 = urem i64 %98, 2
	%100 = icmp eq i64 %99, 0
	store i1 %100, i1* %11
	; RangeStmt
	; i
	store i64 zeroinitializer, i64* %12
		store i64 zeroinitializer, i64* %13
	store i64 0, i64* %13
	store i64 zeroinitializer, i64* %14
	store i64 0, i64* %14
	br label %for.interval.loop-10

for.interval.loop-10:
	; SelectorExpr
	%101 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%102 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %101, i64 0
	%103 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %102, i64 0, i32 0
	%104 = load i64, i64* %103, align 8
	%105 = load i64, i64* %13, align 8
	%106 = icmp slt i64 %105, %104
	br i1 %106, label %for.interval.body-11, label %for.interval.done-34

for.interval.body-11:
	%107 = load i64, i64* %13, align 8
	%108 = load i64, i64* %14, align 8
	%109 = load i64, i64* %13, align 8
	%110 = add i64 %109, 1
	store i64 %110, i64* %13
	%111 = load i64, i64* %14, align 8
	%112 = add i64 %111, 1
	store i64 %112, i64* %14
	store i64 %107, i64* %12
	; l
	store i8 zeroinitializer, i8* %15
		store i8 48, i8* %15
	; IfStmt
	%113 = load i64, i64* %12, align 8
	; SelectorExpr
	%114 = load %decimal-23.Decimal*, %decimal-23.Decimal** %10, align 8
	%115 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %114, i64 0
	%116 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %115, i64 0, i32 0
	%117 = load i64, i64* %116, align 8
	%118 = icmp slt i64 %113, %117
	br i1 %118, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%119 = load %decimal-23.Decimal*, %decimal-23.Decimal** %10, align 8
	%120 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %119, i64 0
	%121 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %120, i64 0, i32 2
	%122 = load i64, i64* %12, align 8
	%123 = trunc i64 %122 to i32
	%124 = getelementptr inbounds [384 x i8], [384 x i8]* %121, i64 0, i32 %123
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$22e, i64 0, i32 0), i64 41}, i64 218, i64 21, i64 %122, i64 384)
	%125 = load i8, i8* %124, align 1
	store i8 %125, i8* %15
	br label %if.done-13

if.done-13:
	; m
	store i8 zeroinitializer, i8* %16
		; IndexExpr
	; SelectorExpr
	%126 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%127 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %126, i64 0
	%128 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %127, i64 0, i32 2
	%129 = load i64, i64* %12, align 8
	%130 = trunc i64 %129 to i32
	%131 = getelementptr inbounds [384 x i8], [384 x i8]* %128, i64 0, i32 %130
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$22f, i64 0, i32 0), i64 41}, i64 220, i64 17, i64 %129, i64 384)
	%132 = load i8, i8* %131, align 1
	store i8 %132, i8* %16
	; u
	store i8 zeroinitializer, i8* %17
		store i8 48, i8* %17
	; IfStmt
	%133 = load i64, i64* %12, align 8
	; SelectorExpr
	%134 = load %decimal-23.Decimal*, %decimal-23.Decimal** %6, align 8
	%135 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %134, i64 0
	%136 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %135, i64 0, i32 0
	%137 = load i64, i64* %136, align 8
	%138 = icmp slt i64 %133, %137
	br i1 %138, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%139 = load %decimal-23.Decimal*, %decimal-23.Decimal** %6, align 8
	%140 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %139, i64 0
	%141 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %140, i64 0, i32 2
	%142 = load i64, i64* %12, align 8
	%143 = trunc i64 %142 to i32
	%144 = getelementptr inbounds [384 x i8], [384 x i8]* %141, i64 0, i32 %143
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$230, i64 0, i32 0), i64 41}, i64 223, i64 21, i64 %142, i64 384)
	%145 = load i8, i8* %144, align 1
	store i8 %145, i8* %17
	br label %if.done-15

if.done-15:
	; ok_round_down
	store i1 zeroinitializer, i1* %18
		%146 = load i8, i8* %15, align 1
	%147 = load i8, i8* %16, align 1
	%148 = icmp ne i8 %146, %147
	%149 = load i8, i8* %15, align 1
	%150 = load i8, i8* %16, align 1
	%151 = icmp ne i8 %149, %150
	br i1 %151, label %logical.cmp.done-19, label %logical.cmp.rhs-16

logical.cmp.rhs-16:
	%152 = load i1, i1* %11, align 1
	%153 = load i1, i1* %11, align 1
	br i1 %153, label %logical.cmp.rhs-17, label %logical.cmp.done-18

logical.cmp.rhs-17:
	%154 = load i64, i64* %12, align 8
	%155 = add i64 %154, 1
	; SelectorExpr
	%156 = load %decimal-23.Decimal*, %decimal-23.Decimal** %10, align 8
	%157 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %156, i64 0
	%158 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %157, i64 0, i32 0
	%159 = load i64, i64* %158, align 8
	%160 = icmp eq i64 %155, %159
	br label %logical.cmp.done-18

logical.cmp.done-18:
	%161 = phi i1 [ false, %logical.cmp.rhs-16 ], [ %160, %logical.cmp.rhs-17 ]
	br label %logical.cmp.done-19

logical.cmp.done-19:
	%162 = phi i1 [ true, %if.done-15 ], [ %161, %logical.cmp.done-18 ]
	store i1 %162, i1* %18
	; ok_round_up
	store i1 zeroinitializer, i1* %19
		%163 = load i8, i8* %16, align 1
	%164 = load i8, i8* %17, align 1
	%165 = icmp ne i8 %163, %164
	%166 = load i8, i8* %16, align 1
	%167 = load i8, i8* %17, align 1
	%168 = icmp ne i8 %166, %167
	br i1 %168, label %logical.cmp.rhs-20, label %logical.cmp.done-26

logical.cmp.rhs-20:
	%169 = load i1, i1* %11, align 1
	%170 = load i1, i1* %11, align 1
	br i1 %170, label %logical.cmp.done-22, label %logical.cmp.rhs-21

logical.cmp.rhs-21:
	%171 = load i8, i8* %16, align 1
	%172 = add i8 %171, 1
	%173 = load i8, i8* %17, align 1
	%174 = icmp ult i8 %172, %173
	br label %logical.cmp.done-22

logical.cmp.done-22:
	%175 = phi i1 [ true, %logical.cmp.rhs-20 ], [ %174, %logical.cmp.rhs-21 ]
	%176 = load i1, i1* %11, align 1
	br i1 %176, label %logical.cmp.done-25, label %cmp.or-23

cmp.or-23:
	%177 = load i8, i8* %16, align 1
	%178 = add i8 %177, 1
	%179 = load i8, i8* %17, align 1
	%180 = icmp ult i8 %178, %179
	br i1 %180, label %logical.cmp.done-25, label %logical.cmp.rhs-24

logical.cmp.rhs-24:
	%181 = load i64, i64* %12, align 8
	%182 = add i64 %181, 1
	; SelectorExpr
	%183 = load %decimal-23.Decimal*, %decimal-23.Decimal** %6, align 8
	%184 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %183, i64 0
	%185 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %184, i64 0, i32 0
	%186 = load i64, i64* %185, align 8
	%187 = icmp slt i64 %182, %186
	br label %logical.cmp.done-25

logical.cmp.done-25:
	%188 = phi i1 [ true, %logical.cmp.done-22 ], [ true, %cmp.or-23 ], [ %187, %logical.cmp.rhs-24 ]
	br label %logical.cmp.done-26

logical.cmp.done-26:
	%189 = phi i1 [ false, %logical.cmp.done-19 ], [ %188, %logical.cmp.done-25 ]
	store i1 %189, i1* %19
	; IfStmt
	%190 = load i1, i1* %18, align 1
	br i1 %190, label %cmp.and-27, label %if.done-29

cmp.and-27:
	%191 = load i1, i1* %19, align 1
	br i1 %191, label %if.then-28, label %if.done-29

if.then-28:
	%192 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%193 = load i64, i64* %12, align 8
	%194 = add i64 %193, 1
	call void @.decimal-23.round(%decimal-23.Decimal* %192, i64 %194)
	; ReturnStmt
	ret void

if.done-29:
	; IfStmt
	%195 = load i1, i1* %18, align 1
	br i1 %195, label %if.then-30, label %if.done-31

if.then-30:
	%196 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%197 = load i64, i64* %12, align 8
	%198 = add i64 %197, 1
	call void @.decimal-23.round_down(%decimal-23.Decimal* %196, i64 %198)
	; ReturnStmt
	ret void

if.done-31:
	; IfStmt
	%199 = load i1, i1* %19, align 1
	br i1 %199, label %if.then-32, label %if.done-33

if.then-32:
	%200 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%201 = load i64, i64* %12, align 8
	%202 = add i64 %201, 1
	call void @.decimal-23.round_up(%decimal-23.Decimal* %200, i64 %202)
	; ReturnStmt
	ret void

if.done-33:
	br label %for.interval.loop-10

for.interval.done-34:
	ret void
}

define {i64, i1} @.strconv-21.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size) {
decls-0:
	%0 = alloca i64, align 8
	%1 = alloca i1, align 1
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i8, align 1
	%5 = alloca i16, align 2
	%6 = alloca i32, align 4
	%7 = alloca i64, align 8
	%8 = alloca {i64, i1}, align 8
	store i64 zeroinitializer, i64* %0
		store i64 %u, i64* %0
	store i1 zeroinitializer, i1* %1
		store i1 %is_signed, i1* %1
	store i64 zeroinitializer, i64* %2
		store i64 %bit_size, i64* %2
	; neg
	store i1 zeroinitializer, i1* %3
		store i1 false, i1* %3
	; IfStmt
	%9 = load i1, i1* %1, align 1
	br i1 %9, label %if.then-1, label %if.done-19

if.then-1:
	; MatchStmt
	%10 = load i64, i64* %2, align 8
	%11 = icmp eq i64 %10, 8
	br i1 %11, label %match.case.body-3, label %match.case.next-2

match.case.next-2:
	%12 = icmp eq i64 %10, 16
	br i1 %12, label %match.fall.body-7, label %match.case.next-6

match.case.body-3:
	; i
	store i8 zeroinitializer, i8* %4
		%13 = load i64, i64* %0, align 8
	; cast - cast
	%14 = trunc i64 %13 to i8
	store i8 %14, i8* %4
	; AssignStmt
	%15 = load i8, i8* %4, align 1
	%16 = icmp slt i8 %15, 0
	store i1 %16, i1* %3
	; IfStmt
	%17 = load i1, i1* %3, align 1
	br i1 %17, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%18 = load i8, i8* %4, align 1
	%19 = sub i8 0, %18
	store i8 %19, i8* %4
	br label %if.done-5

if.done-5:
	; AssignStmt
	%20 = load i8, i8* %4, align 1
	; cast - cast
	%21 = sext i8 %20 to i64
	store i64 %21, i64* %0
	br label %match.done-18

match.case.next-6:
	%22 = icmp eq i64 %10, 32
	br i1 %22, label %match.fall.body-11, label %match.case.next-10

match.fall.body-7:
	; i
	store i16 zeroinitializer, i16* %5
		%23 = load i64, i64* %0, align 8
	; cast - cast
	%24 = trunc i64 %23 to i16
	store i16 %24, i16* %5
	; AssignStmt
	%25 = load i16, i16* %5, align 2
	%26 = icmp slt i16 %25, 0
	store i1 %26, i1* %3
	; IfStmt
	%27 = load i1, i1* %3, align 1
	br i1 %27, label %if.then-8, label %if.done-9

if.then-8:
	; AssignStmt
	%28 = load i16, i16* %5, align 2
	%29 = sub i16 0, %28
	store i16 %29, i16* %5
	br label %if.done-9

if.done-9:
	; AssignStmt
	%30 = load i16, i16* %5, align 2
	; cast - cast
	%31 = sext i16 %30 to i64
	store i64 %31, i64* %0
	br label %match.done-18

match.case.next-10:
	%32 = icmp eq i64 %10, 64
	br i1 %32, label %match.fall.body-15, label %match.case.next-14

match.fall.body-11:
	; i
	store i32 zeroinitializer, i32* %6
		%33 = load i64, i64* %0, align 8
	; cast - cast
	%34 = trunc i64 %33 to i32
	store i32 %34, i32* %6
	; AssignStmt
	%35 = load i32, i32* %6, align 4
	%36 = icmp slt i32 %35, 0
	store i1 %36, i1* %3
	; IfStmt
	%37 = load i1, i1* %3, align 1
	br i1 %37, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%38 = load i32, i32* %6, align 4
	%39 = sub i32 0, %38
	store i32 %39, i32* %6
	br label %if.done-13

if.done-13:
	; AssignStmt
	%40 = load i32, i32* %6, align 4
	; cast - cast
	%41 = sext i32 %40 to i64
	store i64 %41, i64* %0
	br label %match.done-18

match.case.next-14:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$231, i64 0, i32 0), i64 41}, i64 274, i64 10, %..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$232, i64 0, i32 0), i64 41})
	br label %match.done-18

match.fall.body-15:
	; i
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %0, align 8
	; cast - cast
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load i64, i64* %7, align 8
	%45 = icmp slt i64 %44, 0
	store i1 %45, i1* %3
	; IfStmt
	%46 = load i1, i1* %3, align 1
	br i1 %46, label %if.then-16, label %if.done-17

if.then-16:
	; AssignStmt
	%47 = load i64, i64* %7, align 8
	%48 = sub i64 0, %47
	store i64 %48, i64* %7
	br label %if.done-17

if.done-17:
	; AssignStmt
	%49 = load i64, i64* %7, align 8
	; cast - cast
	%50 = bitcast i64 %49 to i64
	store i64 %50, i64* %0
	br label %match.done-18

match.done-18:
	br label %if.done-19

if.done-19:
	; ReturnStmt
	%51 = load i64, i64* %0, align 8
	%52 = load i1, i1* %3, align 1
	store {i64, i1} zeroinitializer, {i64, i1}* %8
	%53 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 0
	store i64 %51, i64* %53
	%54 = getelementptr inbounds {i64, i1}, {i64, i1}* %8, i64 0, i32 1
	store i1 %52, i1* %54
	%55 = load {i64, i1}, {i64, i1}* %8, align 8
	ret {i64, i1} %55
}

define %..string @.strconv-21.append_bits({i8*, i64, i64} %buf, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, i64 %flags) {
decls-0:
	%0 = alloca {i8*, i64, i64}, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i1, align 1
	%4 = alloca i64, align 8
	%5 = alloca %..string, align 8
	%6 = alloca i64, align 8
	%7 = alloca [65 x i8], align 1
	%8 = alloca i64, align 8
	%9 = alloca i1, align 1
	%10 = alloca i64, align 8
	%11 = alloca i64, align 8
	%12 = alloca i1, align 1
	%13 = alloca {i8*, i64, i64}, align 8
	%14 = alloca %..string, align 8
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %0
		store {i8*, i64, i64} %buf, {i8*, i64, i64}* %0
	store i64 zeroinitializer, i64* %1
		store i64 %u, i64* %1
	store i64 zeroinitializer, i64* %2
		store i64 %base, i64* %2
	store i1 zeroinitializer, i1* %3
		store i1 %is_signed, i1* %3
	store i64 zeroinitializer, i64* %4
		store i64 %bit_size, i64* %4
	store %..string zeroinitializer, %..string* %5
		store %..string %digits, %..string* %5
	store i64 zeroinitializer, i64* %6
		store i64 %flags, i64* %6
	; IfStmt
	%15 = load i64, i64* %2, align 8
	%16 = icmp slt i64 %15, 2
	br i1 %16, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%17 = load i64, i64* %2, align 8
	%18 = icmp sgt i64 %17, 32
	br i1 %18, label %if.then-2, label %if.done-3

if.then-2:
	; panic
	call void @.__panic(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$233, i64 0, i32 0), i64 41}, i64 290, i64 9, %..string {i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.__str$234, i64 0, i32 0), i64 43})
	br label %if.done-3

if.done-3:
	; a
	store [65 x i8] zeroinitializer, [65 x i8]* %7
		; i
	store i64 zeroinitializer, i64* %8
		store i64 65, i64* %8
	; neg
	store i1 zeroinitializer, i1* %9
		; AssignStmt
	%19 = load i64, i64* %1, align 8
	%20 = load i1, i1* %3, align 1
	%21 = load i64, i64* %4, align 8
	%22 = call {i64, i1} @.strconv-21.is_integer_negative(i64 %19, i1 %20, i64 %21)
	%23 = extractvalue {i64, i1} %22, 0
	%24 = extractvalue {i64, i1} %22, 1
	store i64 %23, i64* %1
	store i1 %24, i1* %9
	; ForStmt
	; b
	store i64 zeroinitializer, i64* %10
		%25 = load i64, i64* %2, align 8
	; cast - cast
	%26 = bitcast i64 %25 to i64
	store i64 %26, i64* %10
	br label %for.loop-4

for.loop-4:
	%27 = load i64, i64* %1, align 8
	%28 = load i64, i64* %10, align 8
	%29 = icmp uge i64 %27, %28
	br i1 %29, label %for.body-5, label %for.done-6

for.body-5:
	%30 = load i64, i64* %8, align 8
	%31 = sub i64 %30, 1
	store i64 %31, i64* %8
	; q
	store i64 zeroinitializer, i64* %11
		%32 = load i64, i64* %1, align 8
	%33 = load i64, i64* %10, align 8
	%34 = udiv i64 %32, %33
	store i64 %34, i64* %11
	; AssignStmt
	; IndexExpr
	%35 = load i64, i64* %8, align 8
	%36 = trunc i64 %35 to i32
	%37 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %36
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$235, i64 0, i32 0), i64 41}, i64 302, i64 5, i64 %35, i64 65)
	; IndexExpr
	%38 = load %..string, %..string* %5, align 8
	%39 = extractvalue %..string %38, 0
	%40 = extractvalue %..string %38, 1
	%41 = load i64, i64* %1, align 8
	%42 = load i64, i64* %11, align 8
	%43 = load i64, i64* %10, align 8
	%44 = mul i64 %42, %43
	%45 = sub i64 %41, %44
	; cast - cast
	%46 = bitcast i64 %45 to i64
	%47 = bitcast i64 %46 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$236, i64 0, i32 0), i64 41}, i64 302, i64 17, i64 %47, i64 %40)
	%48 = getelementptr inbounds i8, i8* %39, i64 %47
	%49 = load i8, i8* %48, align 1
	store i8 %49, i8* %37
	; AssignStmt
	%50 = load i64, i64* %11, align 8
	store i64 %50, i64* %1
	br label %for.loop-4

for.done-6:
	%51 = load i64, i64* %8, align 8
	%52 = sub i64 %51, 1
	store i64 %52, i64* %8
	; AssignStmt
	; IndexExpr
	%53 = load i64, i64* %8, align 8
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$237, i64 0, i32 0), i64 41}, i64 307, i64 4, i64 %53, i64 65)
	; IndexExpr
	%56 = load %..string, %..string* %5, align 8
	%57 = extractvalue %..string %56, 0
	%58 = extractvalue %..string %56, 1
	%59 = load i64, i64* %1, align 8
	; cast - cast
	%60 = bitcast i64 %59 to i64
	%61 = bitcast i64 %60 to i64
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$238, i64 0, i32 0), i64 41}, i64 307, i64 16, i64 %61, i64 %58)
	%62 = getelementptr inbounds i8, i8* %57, i64 %61
	%63 = load i8, i8* %62, align 1
	store i8 %63, i8* %55
	; IfStmt
	%64 = load i64, i64* %6, align 8
	%65 = and i64 %64, 1
	%66 = icmp ne i64 %65, 0
	br i1 %66, label %if.then-7, label %if.done-21

if.then-7:
	; ok
	store i1 zeroinitializer, i1* %12
		store i1 true, i1* %12
	; MatchStmt
	%67 = load i64, i64* %2, align 8
	%68 = icmp eq i64 %67, 2
	br i1 %68, label %match.case.body-9, label %match.case.next-8

match.case.next-8:
	%69 = icmp eq i64 %67, 8
	br i1 %69, label %match.fall.body-11, label %match.case.next-10

match.case.body-9:
	%70 = load i64, i64* %8, align 8
	%71 = sub i64 %70, 1
	store i64 %71, i64* %8
	; AssignStmt
	; IndexExpr
	%72 = load i64, i64* %8, align 8
	%73 = trunc i64 %72 to i32
	%74 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %73
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$239, i64 0, i32 0), i64 41}, i64 312, i64 19, i64 %72, i64 65)
	store i8 98, i8* %74
	br label %match.done-18

match.case.next-10:
	%75 = icmp eq i64 %67, 10
	br i1 %75, label %match.fall.body-13, label %match.case.next-12

match.fall.body-11:
	%76 = load i64, i64* %8, align 8
	%77 = sub i64 %76, 1
	store i64 %77, i64* %8
	; AssignStmt
	; IndexExpr
	%78 = load i64, i64* %8, align 8
	%79 = trunc i64 %78 to i32
	%80 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %79
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$23a, i64 0, i32 0), i64 41}, i64 313, i64 19, i64 %78, i64 65)
	store i8 111, i8* %80
	br label %match.done-18

match.case.next-12:
	%81 = icmp eq i64 %67, 12
	br i1 %81, label %match.fall.body-15, label %match.case.next-14

match.fall.body-13:
	%82 = load i64, i64* %8, align 8
	%83 = sub i64 %82, 1
	store i64 %83, i64* %8
	; AssignStmt
	; IndexExpr
	%84 = load i64, i64* %8, align 8
	%85 = trunc i64 %84 to i32
	%86 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %85
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$23b, i64 0, i32 0), i64 41}, i64 314, i64 19, i64 %84, i64 65)
	store i8 100, i8* %86
	br label %match.done-18

match.case.next-14:
	%87 = icmp eq i64 %67, 16
	br i1 %87, label %match.fall.body-17, label %match.case.next-16

match.fall.body-15:
	%88 = load i64, i64* %8, align 8
	%89 = sub i64 %88, 1
	store i64 %89, i64* %8
	; AssignStmt
	; IndexExpr
	%90 = load i64, i64* %8, align 8
	%91 = trunc i64 %90 to i32
	%92 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %91
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$23c, i64 0, i32 0), i64 41}, i64 315, i64 19, i64 %90, i64 65)
	store i8 122, i8* %92
	br label %match.done-18

match.case.next-16:
	; AssignStmt
	store i1 false, i1* %12
	br label %match.done-18

match.fall.body-17:
	%93 = load i64, i64* %8, align 8
	%94 = sub i64 %93, 1
	store i64 %94, i64* %8
	; AssignStmt
	; IndexExpr
	%95 = load i64, i64* %8, align 8
	%96 = trunc i64 %95 to i32
	%97 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %96
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$23d, i64 0, i32 0), i64 41}, i64 316, i64 19, i64 %95, i64 65)
	store i8 120, i8* %97
	br label %match.done-18

match.done-18:
	; IfStmt
	%98 = load i1, i1* %12, align 1
	br i1 %98, label %if.then-19, label %if.done-20

if.then-19:
	%99 = load i64, i64* %8, align 8
	%100 = sub i64 %99, 1
	store i64 %100, i64* %8
	; AssignStmt
	; IndexExpr
	%101 = load i64, i64* %8, align 8
	%102 = trunc i64 %101 to i32
	%103 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %102
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$23e, i64 0, i32 0), i64 41}, i64 321, i64 6, i64 %101, i64 65)
	store i8 48, i8* %103
	br label %if.done-20

if.done-20:
	br label %if.done-21

if.done-21:
	; IfStmt
	%104 = load i1, i1* %9, align 1
	br i1 %104, label %if.then-22, label %if.else-23

if.then-22:
	%105 = load i64, i64* %8, align 8
	%106 = sub i64 %105, 1
	store i64 %106, i64* %8
	; AssignStmt
	; IndexExpr
	%107 = load i64, i64* %8, align 8
	%108 = trunc i64 %107 to i32
	%109 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %108
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$23f, i64 0, i32 0), i64 41}, i64 326, i64 10, i64 %107, i64 65)
	store i8 45, i8* %109
	br label %if.done-29

if.else-23:
	; IfStmt
	%110 = load i64, i64* %6, align 8
	%111 = and i64 %110, 2
	%112 = icmp ne i64 %111, 0
	br i1 %112, label %if.then-24, label %if.else-25

if.then-24:
	%113 = load i64, i64* %8, align 8
	%114 = sub i64 %113, 1
	store i64 %114, i64* %8
	; AssignStmt
	; IndexExpr
	%115 = load i64, i64* %8, align 8
	%116 = trunc i64 %115 to i32
	%117 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %116
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$240, i64 0, i32 0), i64 41}, i64 328, i64 10, i64 %115, i64 65)
	store i8 43, i8* %117
	br label %if.done-28

if.else-25:
	; IfStmt
	%118 = load i64, i64* %6, align 8
	%119 = and i64 %118, 4
	%120 = icmp ne i64 %119, 0
	br i1 %120, label %if.then-26, label %if.done-27

if.then-26:
	%121 = load i64, i64* %8, align 8
	%122 = sub i64 %121, 1
	store i64 %122, i64* %8
	; AssignStmt
	; IndexExpr
	%123 = load i64, i64* %8, align 8
	%124 = trunc i64 %123 to i32
	%125 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 %124
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$241, i64 0, i32 0), i64 41}, i64 330, i64 10, i64 %123, i64 65)
	store i8 32, i8* %125
	br label %if.done-27

if.done-27:
	br label %if.done-28

if.done-28:
	br label %if.done-29

if.done-29:
	; append
	%126 = bitcast {i8*, i64, i64}* %0 to %..rawptr
	%127 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; SliceExpr
	%128 = load i64, i64* %8, align 8
	%129 = load [65 x i8], [65 x i8]* %7, align 1
	call void @.__slice_expr_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$242, i64 0, i32 0), i64 41}, i64 334, i64 17, i64 %128, i64 65, i64 65)
	%130 = getelementptr inbounds [65 x i8], [65 x i8]* %7, i64 0, i32 0
	%131 = getelementptr inbounds i8, i8* %130, i64 %128
	%132 = sub i64 65, %128
	%133 = sub i64 65, %128
	store {i8*, i64, i64} zeroinitializer, {i8*, i64, i64}* %13
	%134 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 0
	store i8* %131, i8** %134
	%135 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 1
	store i64 %132, i64* %135
	%136 = getelementptr inbounds {i8*, i64, i64}, {i8*, i64, i64}* %13, i64 0, i32 2
	store i64 %133, i64* %136
	%137 = load {i8*, i64, i64}, {i8*, i64, i64}* %13, align 8
	%138 = extractvalue {i8*, i64, i64} %137, 0
	%139 = extractvalue {i8*, i64, i64} %137, 1
	%140 = bitcast i8* %138 to %..rawptr
	%141 = call i64 @.__slice_append(%..rawptr %126, i64 1, i64 1, %..rawptr %140, i64 %139)
	; ReturnStmt
	%142 = load {i8*, i64, i64}, {i8*, i64, i64}* %0, align 8
	; cast - cast
	%143 = extractvalue {i8*, i64, i64} %142, 0
	%144 = extractvalue {i8*, i64, i64} %142, 1
	store %..string zeroinitializer, %..string* %14
	%145 = getelementptr inbounds %..string, %..string* %14, i64 0, i32 0
	%146 = getelementptr inbounds %..string, %..string* %14, i64 0, i32 1
	store i8* %143, i8** %145
	store i64 %144, i64* %146
	%147 = load %..string, %..string* %14, align 8
	ret %..string %147
}

define void @.decimal-23.trim(%decimal-23.Decimal* %a) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	; ForStmt
	br label %for.loop-1

for.loop-1:
	; SelectorExpr
	%1 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%2 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %1, i64 0
	%3 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %2, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	%5 = icmp sgt i64 %4, 0
	br i1 %5, label %cmp.and-2, label %for.done-4

cmp.and-2:
	; IndexExpr
	; SelectorExpr
	%6 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%7 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %6, i64 0
	%8 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %7, i64 0, i32 2
	; SelectorExpr
	%9 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%10 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %9, i64 0
	%11 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %10, i64 0, i32 0
	%12 = load i64, i64* %11, align 8
	%13 = sub i64 %12, 1
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [384 x i8], [384 x i8]* %8, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$243, i64 0, i32 0), i64 41}, i64 52, i64 32, i64 %13, i64 384)
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 48
	br i1 %17, label %for.body-3, label %for.done-4

for.body-3:
	; SelectorExpr
	%18 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%19 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %18, i64 0
	%20 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %19, i64 0, i32 0
	%21 = load i64, i64* %20, align 8
	%22 = sub i64 %21, 1
	store i64 %22, i64* %20
	br label %for.loop-1

for.done-4:
	; IfStmt
	; SelectorExpr
	%23 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%24 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %23, i64 0
	%25 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %24, i64 0, i32 0
	%26 = load i64, i64* %25, align 8
	%27 = icmp eq i64 %26, 0
	br i1 %27, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%28 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%29 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %28, i64 0
	%30 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %29, i64 0, i32 1
	store i64 0, i64* %30
	br label %if.done-6

if.done-6:
	ret void
}

define void @.decimal-23.assign(%decimal-23.Decimal* %a, i64 %i) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca [32 x i8], align 1
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %i, i64* %1
	; buf
	store [32 x i8] zeroinitializer, [32 x i8]* %2
		; n
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%5 = load i64, i64* %1, align 8
	%6 = icmp ugt i64 %5, 0
	br i1 %6, label %for.body-2, label %for.done-3

for.body-2:
	; j
	store i64 zeroinitializer, i64* %4
		%7 = load i64, i64* %1, align 8
	%8 = udiv i64 %7, 10
	store i64 %8, i64* %4
	; AssignStmt
	%9 = load i64, i64* %4, align 8
	%10 = mul i64 10, %9
	%11 = load i64, i64* %1, align 8
	%12 = sub i64 %11, %10
	store i64 %12, i64* %1
	; AssignStmt
	; IndexExpr
	%13 = load i64, i64* %3, align 8
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$244, i64 0, i32 0), i64 41}, i64 67, i64 7, i64 %13, i64 32)
	%16 = load i64, i64* %1, align 8
	%17 = add i64 48, %16
	; cast - cast
	%18 = trunc i64 %17 to i8
	store i8 %18, i8* %15
	%19 = load i64, i64* %3, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %3
	; AssignStmt
	%21 = load i64, i64* %4, align 8
	store i64 %21, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ForStmt
	%25 = load i64, i64* %3, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %3
	br label %for.loop-4

for.loop-4:
	%27 = load i64, i64* %3, align 8
	%28 = icmp sge i64 %27, 0
	br i1 %28, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%29 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%30 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %29, i64 0
	%31 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %30, i64 0, i32 2
	; SelectorExpr
	%32 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%33 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %32, i64 0
	%34 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %33, i64 0, i32 0
	%35 = load i64, i64* %34, align 8
	%36 = trunc i64 %35 to i32
	%37 = getelementptr inbounds [384 x i8], [384 x i8]* %31, i64 0, i32 %36
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$245, i64 0, i32 0), i64 41}, i64 74, i64 14, i64 %35, i64 384)
	; IndexExpr
	%38 = load i64, i64* %3, align 8
	%39 = trunc i64 %38 to i32
	%40 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i32 %39
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$246, i64 0, i32 0), i64 41}, i64 74, i64 27, i64 %38, i64 32)
	%41 = load i8, i8* %40, align 1
	store i8 %41, i8* %37
	; SelectorExpr
	%42 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%43 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %42, i64 0
	%44 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %43, i64 0, i32 0
	%45 = load i64, i64* %44, align 8
	%46 = add i64 %45, 1
	store i64 %46, i64* %44
	%47 = load i64, i64* %3, align 8
	%48 = sub i64 %47, 1
	store i64 %48, i64* %3
	br label %for.loop-4

for.done-6:
	; AssignStmt
	; SelectorExpr
	%49 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%50 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %49, i64 0
	%51 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %50, i64 0, i32 1
	; SelectorExpr
	%52 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%53 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %52, i64 0
	%54 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %53, i64 0, i32 0
	%55 = load i64, i64* %54, align 8
	store i64 %55, i64* %51
	%56 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	call void @.decimal-23.trim(%decimal-23.Decimal* %56)
	ret void
}

define void @.decimal-23.shift_right(%decimal-23.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; r
	store i64 zeroinitializer, i64* %2
		store i64 0, i64* %2
	; w
	store i64 zeroinitializer, i64* %3
		store i64 0, i64* %3
	; n
	store i64 zeroinitializer, i64* %4
		; ForStmt
	br label %for.loop-1

for.loop-1:
	%10 = load i64, i64* %4, align 8
	%11 = load i64, i64* %1, align 8
	%12 = lshr i64 %10, %11
	%13 = icmp eq i64 %12, 0
	br i1 %13, label %for.body-2, label %for.done-10

for.body-2:
	; IfStmt
	%14 = load i64, i64* %2, align 8
	; SelectorExpr
	%15 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%16 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %15, i64 0
	%17 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %16, i64 0, i32 0
	%18 = load i64, i64* %17, align 8
	%19 = icmp sge i64 %14, %18
	br i1 %19, label %if.then-3, label %if.done-9

if.then-3:
	; IfStmt
	%20 = load i64, i64* %4, align 8
	%21 = icmp eq i64 %20, 0
	br i1 %21, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %23, i64 0, i32 0
	store i64 0, i64* %24
	; ReturnStmt
	ret void

if.done-5:
	; ForStmt
	br label %for.loop-6

for.loop-6:
	%25 = load i64, i64* %4, align 8
	%26 = load i64, i64* %1, align 8
	%27 = lshr i64 %25, %26
	%28 = icmp eq i64 %27, 0
	br i1 %28, label %for.body-7, label %for.done-8

for.body-7:
	; AssignStmt
	%29 = load i64, i64* %4, align 8
	%30 = mul i64 %29, 10
	store i64 %30, i64* %4
	%31 = load i64, i64* %2, align 8
	%32 = add i64 %31, 1
	store i64 %32, i64* %2
	br label %for.loop-6

for.done-8:
	; break
	br label %for.done-10

if.done-9:
	; c
	store i64 zeroinitializer, i64* %5
		; IndexExpr
	; SelectorExpr
	%33 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %34, i64 0, i32 2
	%36 = load i64, i64* %2, align 8
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %37
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$247, i64 0, i32 0), i64 41}, i64 102, i64 27, i64 %36, i64 384)
	%39 = load i8, i8* %38, align 1
	; cast - cast
	%40 = zext i8 %39 to i64
	store i64 %40, i64* %5
	; AssignStmt
	%41 = load i64, i64* %4, align 8
	%42 = mul i64 %41, 10
	%43 = load i64, i64* %5, align 8
	%44 = add i64 %42, %43
	%45 = sub i64 %44, 48
	store i64 %45, i64* %4
	%46 = load i64, i64* %2, align 8
	%47 = add i64 %46, 1
	store i64 %47, i64* %2
	br label %for.loop-1

for.done-10:
	; AssignStmt
	; SelectorExpr
	%48 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %49, i64 0, i32 1
	%51 = load i64, i64* %2, align 8
	%52 = sub i64 %51, 1
	%53 = load i64, i64* %50, align 8
	%54 = sub i64 %53, %52
	store i64 %54, i64* %50
	; mask
	store i64 zeroinitializer, i64* %6
		%55 = load i64, i64* %1, align 8
	%56 = shl i64 1, %55
	%57 = bitcast i64 %56 to i64
	%58 = sub i64 %57, 1
	%59 = bitcast i64 %58 to i64
	store i64 %59, i64* %6
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%60 = load i64, i64* %2, align 8
	; SelectorExpr
	%61 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%62 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %61, i64 0
	%63 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %62, i64 0, i32 0
	%64 = load i64, i64* %63, align 8
	%65 = icmp slt i64 %60, %64
	br i1 %65, label %for.body-12, label %for.done-13

for.body-12:
	; c
	store i64 zeroinitializer, i64* %7
		; IndexExpr
	; SelectorExpr
	%66 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%67 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %66, i64 0
	%68 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %67, i64 0, i32 2
	%69 = load i64, i64* %2, align 8
	%70 = trunc i64 %69 to i32
	%71 = getelementptr inbounds [384 x i8], [384 x i8]* %68, i64 0, i32 %70
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$248, i64 0, i32 0), i64 41}, i64 110, i64 27, i64 %69, i64 384)
	%72 = load i8, i8* %71, align 1
	; cast - cast
	%73 = zext i8 %72 to i64
	store i64 %73, i64* %7
	; dig
	store i64 zeroinitializer, i64* %8
		%74 = load i64, i64* %4, align 8
	%75 = load i64, i64* %1, align 8
	%76 = lshr i64 %74, %75
	store i64 %76, i64* %8
	; AssignStmt
	%77 = load i64, i64* %6, align 8
	%78 = load i64, i64* %4, align 8
	%79 = and i64 %78, %77
	store i64 %79, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%80 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%81 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %80, i64 0
	%82 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %81, i64 0, i32 2
	%83 = load i64, i64* %3, align 8
	%84 = trunc i64 %83 to i32
	%85 = getelementptr inbounds [384 x i8], [384 x i8]* %82, i64 0, i32 %84
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$249, i64 0, i32 0), i64 41}, i64 113, i64 12, i64 %83, i64 384)
	%86 = load i64, i64* %8, align 8
	%87 = add i64 48, %86
	; cast - cast
	%88 = trunc i64 %87 to i8
	store i8 %88, i8* %85
	%89 = load i64, i64* %3, align 8
	%90 = add i64 %89, 1
	store i64 %90, i64* %3
	; AssignStmt
	%91 = load i64, i64* %4, align 8
	%92 = mul i64 %91, 10
	%93 = load i64, i64* %7, align 8
	%94 = add i64 %92, %93
	%95 = sub i64 %94, 48
	store i64 %95, i64* %4
	%96 = load i64, i64* %2, align 8
	%97 = add i64 %96, 1
	store i64 %97, i64* %2
	br label %for.loop-11

for.done-13:
	; ForStmt
	br label %for.loop-14

for.loop-14:
	%98 = load i64, i64* %4, align 8
	%99 = icmp ugt i64 %98, 0
	br i1 %99, label %for.body-15, label %for.done-21

for.body-15:
	; dig
	store i64 zeroinitializer, i64* %9
		%100 = load i64, i64* %4, align 8
	%101 = load i64, i64* %1, align 8
	%102 = lshr i64 %100, %101
	store i64 %102, i64* %9
	; AssignStmt
	%103 = load i64, i64* %6, align 8
	%104 = load i64, i64* %4, align 8
	%105 = and i64 %104, %103
	store i64 %105, i64* %4
	; IfStmt
	%106 = load i64, i64* %3, align 8
	%107 = icmp slt i64 %106, 384
	br i1 %107, label %if.then-16, label %if.else-17

if.then-16:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%108 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%109 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %108, i64 0
	%110 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %109, i64 0, i32 2
	%111 = load i64, i64* %3, align 8
	%112 = trunc i64 %111 to i32
	%113 = getelementptr inbounds [384 x i8], [384 x i8]* %110, i64 0, i32 %112
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$24a, i64 0, i32 0), i64 41}, i64 122, i64 13, i64 %111, i64 384)
	%114 = load i64, i64* %9, align 8
	%115 = add i64 48, %114
	; cast - cast
	%116 = trunc i64 %115 to i8
	store i8 %116, i8* %113
	%117 = load i64, i64* %3, align 8
	%118 = add i64 %117, 1
	store i64 %118, i64* %3
	br label %if.done-20

if.else-17:
	; IfStmt
	%119 = load i64, i64* %9, align 8
	%120 = icmp ugt i64 %119, 0
	br i1 %120, label %if.then-18, label %if.done-19

if.then-18:
	; AssignStmt
	; SelectorExpr
	%121 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%122 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %121, i64 0
	%123 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %122, i64 0, i32 4
	store i1 true, i1* %123
	br label %if.done-19

if.done-19:
	br label %if.done-20

if.done-20:
	; AssignStmt
	%124 = load i64, i64* %4, align 8
	%125 = mul i64 %124, 10
	store i64 %125, i64* %4
	br label %for.loop-14

for.done-21:
	; AssignStmt
	; SelectorExpr
	%126 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%127 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %126, i64 0
	%128 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %127, i64 0, i32 0
	%129 = load i64, i64* %3, align 8
	store i64 %129, i64* %128
	%130 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	call void @.decimal-23.trim(%decimal-23.Decimal* %130)
	ret void
}

define void @.decimal-23.shift_left(%decimal-23.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i64, align 8
	%4 = alloca i64, align 8
	%5 = alloca i64, align 8
	%6 = alloca i64, align 8
	%7 = alloca i64, align 8
	%8 = alloca i64, align 8
	%9 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; delta
	store i64 zeroinitializer, i64* %2
		%10 = load i64, i64* %1, align 8
	%11 = udiv i64 %10, 4
	; cast - cast
	%12 = bitcast i64 %11 to i64
	store i64 %12, i64* %2
	; r
	store i64 zeroinitializer, i64* %3
		; SelectorExpr
	%13 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%14 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %13, i64 0
	%15 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %14, i64 0, i32 0
	%16 = load i64, i64* %15, align 8
	store i64 %16, i64* %3
	; w
	store i64 zeroinitializer, i64* %4
		; SelectorExpr
	%17 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%18 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %17, i64 0
	%19 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %18, i64 0, i32 0
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %2, align 8
	%22 = add i64 %20, %21
	store i64 %22, i64* %4
	; n
	store i64 zeroinitializer, i64* %5
		; ForStmt
	%23 = load i64, i64* %3, align 8
	%24 = sub i64 %23, 1
	store i64 %24, i64* %3
	br label %for.loop-1

for.loop-1:
	%25 = load i64, i64* %3, align 8
	%26 = icmp sge i64 %25, 0
	br i1 %26, label %for.body-2, label %for.done-8

for.body-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%27 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%28 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %27, i64 0
	%29 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %28, i64 0, i32 2
	%30 = load i64, i64* %3, align 8
	%31 = trunc i64 %30 to i32
	%32 = getelementptr inbounds [384 x i8], [384 x i8]* %29, i64 0, i32 %31
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$24b, i64 0, i32 0), i64 41}, i64 143, i64 28, i64 %30, i64 384)
	%33 = load i8, i8* %32, align 1
	; cast - cast
	%34 = zext i8 %33 to i64
	%35 = sub i64 %34, 48
	%36 = load i64, i64* %1, align 8
	%37 = shl i64 %35, %36
	%38 = load i64, i64* %5, align 8
	%39 = add i64 %38, %37
	store i64 %39, i64* %5
	; quo
	store i64 zeroinitializer, i64* %6
		%40 = load i64, i64* %5, align 8
	%41 = udiv i64 %40, 10
	store i64 %41, i64* %6
	; rem
	store i64 zeroinitializer, i64* %7
		%42 = load i64, i64* %5, align 8
	%43 = load i64, i64* %6, align 8
	%44 = mul i64 10, %43
	%45 = sub i64 %42, %44
	store i64 %45, i64* %7
	%46 = load i64, i64* %4, align 8
	%47 = sub i64 %46, 1
	store i64 %47, i64* %4
	; IfStmt
	%48 = load i64, i64* %4, align 8
	%49 = icmp slt i64 %48, 384
	br i1 %49, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%50 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%51 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %50, i64 0
	%52 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %51, i64 0, i32 2
	%53 = load i64, i64* %4, align 8
	%54 = trunc i64 %53 to i32
	%55 = getelementptr inbounds [384 x i8], [384 x i8]* %52, i64 0, i32 %54
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$24c, i64 0, i32 0), i64 41}, i64 148, i64 13, i64 %53, i64 384)
	%56 = load i64, i64* %7, align 8
	%57 = add i64 48, %56
	; cast - cast
	%58 = trunc i64 %57 to i8
	store i8 %58, i8* %55
	br label %if.done-7

if.else-4:
	; IfStmt
	%59 = load i64, i64* %7, align 8
	%60 = icmp ne i64 %59, 0
	br i1 %60, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%61 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%62 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %61, i64 0
	%63 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %62, i64 0, i32 4
	store i1 true, i1* %63
	br label %if.done-6

if.done-6:
	br label %if.done-7

if.done-7:
	; AssignStmt
	%64 = load i64, i64* %6, align 8
	store i64 %64, i64* %5
	%65 = load i64, i64* %3, align 8
	%66 = sub i64 %65, 1
	store i64 %66, i64* %3
	br label %for.loop-1

for.done-8:
	; ForStmt
	br label %for.loop-9

for.loop-9:
	%67 = load i64, i64* %5, align 8
	%68 = icmp ugt i64 %67, 0
	br i1 %68, label %for.body-10, label %for.done-16

for.body-10:
	; quo
	store i64 zeroinitializer, i64* %8
		%69 = load i64, i64* %5, align 8
	%70 = udiv i64 %69, 10
	store i64 %70, i64* %8
	; rem
	store i64 zeroinitializer, i64* %9
		%71 = load i64, i64* %5, align 8
	%72 = load i64, i64* %8, align 8
	%73 = mul i64 10, %72
	%74 = sub i64 %71, %73
	store i64 %74, i64* %9
	%75 = load i64, i64* %4, align 8
	%76 = sub i64 %75, 1
	store i64 %76, i64* %4
	; IfStmt
	%77 = load i64, i64* %4, align 8
	%78 = icmp slt i64 %77, 384
	br i1 %78, label %if.then-11, label %if.else-12

if.then-11:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%79 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%80 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %79, i64 0
	%81 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %80, i64 0, i32 2
	%82 = load i64, i64* %4, align 8
	%83 = trunc i64 %82 to i32
	%84 = getelementptr inbounds [384 x i8], [384 x i8]* %81, i64 0, i32 %83
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$24d, i64 0, i32 0), i64 41}, i64 160, i64 13, i64 %82, i64 384)
	%85 = load i64, i64* %9, align 8
	%86 = add i64 48, %85
	; cast - cast
	%87 = trunc i64 %86 to i8
	store i8 %87, i8* %84
	br label %if.done-15

if.else-12:
	; IfStmt
	%88 = load i64, i64* %9, align 8
	%89 = icmp ne i64 %88, 0
	br i1 %89, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; SelectorExpr
	%90 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%91 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %90, i64 0
	%92 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %91, i64 0, i32 4
	store i1 true, i1* %92
	br label %if.done-14

if.done-14:
	br label %if.done-15

if.done-15:
	; AssignStmt
	%93 = load i64, i64* %8, align 8
	store i64 %93, i64* %5
	br label %for.loop-9

for.done-16:
	; AssignStmt
	; SelectorExpr
	%94 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%95 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %94, i64 0
	%96 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %95, i64 0, i32 0
	%97 = load i64, i64* %2, align 8
	%98 = load i64, i64* %96, align 8
	%99 = add i64 %98, %97
	store i64 %99, i64* %96
	; AssignStmt
	; SelectorExpr
	%100 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%101 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %100, i64 0
	%102 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %101, i64 0, i32 0
	; min
	; SelectorExpr
	%103 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%104 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %103, i64 0
	%105 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %104, i64 0, i32 0
	%106 = load i64, i64* %105, align 8
	%107 = icmp slt i64 %106, 384
	%108 = select i1 %107, i64 %106, i64 384
	store i64 %108, i64* %102
	; AssignStmt
	; SelectorExpr
	%109 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%110 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %109, i64 0
	%111 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %110, i64 0, i32 1
	%112 = load i64, i64* %2, align 8
	%113 = load i64, i64* %111, align 8
	%114 = add i64 %113, %112
	store i64 %114, i64* %111
	%115 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	call void @.decimal-23.trim(%decimal-23.Decimal* %115)
	ret void
}

define void @.decimal-23.shift(%decimal-23.Decimal* %a, i64 %k) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %k, i64* %1
	; MatchStmt
	; SelectorExpr
	%2 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%3 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %2, i64 0
	%4 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %3, i64 0, i32 0
	%5 = load i64, i64* %4, align 8
	%6 = icmp eq i64 %5, 0
	%7 = icmp eq i1 true, %6
	br i1 %7, label %match.case.body-2, label %match.case.next-1

match.case.next-1:
	%8 = load i64, i64* %1, align 8
	%9 = icmp sgt i64 %8, 0
	%10 = icmp eq i1 true, %9
	br i1 %10, label %match.fall.body-4, label %match.case.next-3

match.case.body-2:
	br label %match.done-13

match.case.next-3:
	%11 = load i64, i64* %1, align 8
	%12 = icmp slt i64 %11, 0
	%13 = icmp eq i1 true, %12
	br i1 %13, label %match.fall.body-9, label %match.case.next-8

match.fall.body-4:
	; ForStmt
	br label %for.loop-5

for.loop-5:
	%14 = load i64, i64* %1, align 8
	%15 = icmp sgt i64 %14, 60
	br i1 %15, label %for.body-6, label %for.done-7

for.body-6:
	%16 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	call void @.decimal-23.shift_left(%decimal-23.Decimal* %16, i64 60)
	; AssignStmt
	%17 = load i64, i64* %1, align 8
	%18 = sub i64 %17, 60
	store i64 %18, i64* %1
	br label %for.loop-5

for.done-7:
	%19 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%20 = load i64, i64* %1, align 8
	; cast - cast
	%21 = bitcast i64 %20 to i64
	call void @.decimal-23.shift_left(%decimal-23.Decimal* %19, i64 %21)
	br label %match.done-13

match.case.next-8:
	br label %match.done-13

match.fall.body-9:
	; ForStmt
	br label %for.loop-10

for.loop-10:
	%22 = load i64, i64* %1, align 8
	%23 = icmp slt i64 %22, -60
	br i1 %23, label %for.body-11, label %for.done-12

for.body-11:
	%24 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	call void @.decimal-23.shift_right(%decimal-23.Decimal* %24, i64 60)
	; AssignStmt
	%25 = load i64, i64* %1, align 8
	%26 = add i64 %25, 60
	store i64 %26, i64* %1
	br label %for.loop-10

for.done-12:
	%27 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%28 = load i64, i64* %1, align 8
	%29 = sub i64 0, %28
	; cast - cast
	%30 = bitcast i64 %29 to i64
	call void @.decimal-23.shift_right(%decimal-23.Decimal* %27, i64 %30)
	br label %match.done-13

match.done-13:
	ret void
}

define i1 @.decimal-23.can_round_up(%decimal-23.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret i1 false

if.done-3:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	%10 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%11 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %10, i64 0
	%12 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %11, i64 0, i32 2
	%13 = load i64, i64* %1, align 8
	%14 = trunc i64 %13 to i32
	%15 = getelementptr inbounds [384 x i8], [384 x i8]* %12, i64 0, i32 %14
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$24e, i64 0, i32 0), i64 41}, i64 196, i64 14, i64 %13, i64 384)
	%16 = load i8, i8* %15, align 1
	%17 = icmp eq i8 %16, 53
	br i1 %17, label %cmp.and-4, label %if.done-10

cmp.and-4:
	%18 = load i64, i64* %1, align 8
	%19 = add i64 %18, 1
	; SelectorExpr
	%20 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%21 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %20, i64 0
	%22 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %21, i64 0, i32 0
	%23 = load i64, i64* %22, align 8
	%24 = icmp eq i64 %19, %23
	br i1 %24, label %if.then-5, label %if.done-10

if.then-5:
	; IfStmt
	; SelectorExpr
	%25 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%26 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %25, i64 0
	%27 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %26, i64 0, i32 4
	%28 = load i1, i1* %27, align 1
	br i1 %28, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	ret i1 true

if.done-7:
	; ReturnStmt
	%29 = load i64, i64* %1, align 8
	%30 = icmp sgt i64 %29, 0
	%31 = load i64, i64* %1, align 8
	%32 = icmp sgt i64 %31, 0
	br i1 %32, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; IndexExpr
	; SelectorExpr
	%33 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %34, i64 0, i32 2
	%36 = load i64, i64* %1, align 8
	%37 = sub i64 %36, 1
	%38 = trunc i64 %37 to i32
	%39 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %38
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$24f, i64 0, i32 0), i64 41}, i64 200, i64 30, i64 %37, i64 384)
	%40 = load i8, i8* %39, align 1
	%41 = sub i8 %40, 48
	%42 = urem i8 %41, 2
	%43 = icmp ne i8 %42, 0
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%44 = phi i1 [ false, %if.done-7 ], [ %43, %logical.cmp.rhs-8 ]
	ret i1 %44

if.done-10:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%45 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%46 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %45, i64 0
	%47 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %46, i64 0, i32 2
	%48 = load i64, i64* %1, align 8
	%49 = trunc i64 %48 to i32
	%50 = getelementptr inbounds [384 x i8], [384 x i8]* %47, i64 0, i32 %49
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$250, i64 0, i32 0), i64 41}, i64 203, i64 18, i64 %48, i64 384)
	%51 = load i8, i8* %50, align 1
	%52 = icmp uge i8 %51, 53
	ret i1 %52
}

define void @.decimal-23.round(%decimal-23.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; IfStmt
	%10 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = call i1 @.decimal-23.can_round_up(%decimal-23.Decimal* %10, i64 %11)
	br i1 %12, label %if.then-4, label %if.else-5

if.then-4:
	%13 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%14 = load i64, i64* %1, align 8
	call void @.decimal-23.round_up(%decimal-23.Decimal* %13, i64 %14)
	br label %if.done-6

if.else-5:
	%15 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%16 = load i64, i64* %1, align 8
	call void @.decimal-23.round_down(%decimal-23.Decimal* %15, i64 %16)
	br label %if.done-6

if.done-6:
	ret void
}

define void @.decimal-23.round_up(%decimal-23.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	%2 = alloca i64, align 8
	%3 = alloca i8, align 1
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%4 = load i64, i64* %1, align 8
	%5 = icmp slt i64 %4, 0
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %8, i64 0, i32 0
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	br i1 %11, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; ForStmt
	; i
	store i64 zeroinitializer, i64* %2
		%12 = load i64, i64* %1, align 8
	%13 = sub i64 %12, 1
	store i64 %13, i64* %2
	br label %for.loop-4

for.loop-4:
	%14 = load i64, i64* %2, align 8
	%15 = icmp sge i64 %14, 0
	br i1 %15, label %for.body-5, label %for.done-8

for.body-5:
	; IfStmt
	; c
	store i8 zeroinitializer, i8* %3
		; IndexExpr
	; SelectorExpr
	%16 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%17 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %16, i64 0
	%18 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %17, i64 0, i32 2
	%19 = load i64, i64* %2, align 8
	%20 = trunc i64 %19 to i32
	%21 = getelementptr inbounds [384 x i8], [384 x i8]* %18, i64 0, i32 %20
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$251, i64 0, i32 0), i64 41}, i64 219, i64 20, i64 %19, i64 384)
	%22 = load i8, i8* %21, align 1
	store i8 %22, i8* %3
	%23 = load i8, i8* %3, align 1
	%24 = icmp ult i8 %23, 57
	br i1 %24, label %if.then-6, label %if.done-7

if.then-6:
	; IndexExpr
	; SelectorExpr
	%25 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%26 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %25, i64 0
	%27 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %26, i64 0, i32 2
	%28 = load i64, i64* %2, align 8
	%29 = trunc i64 %28 to i32
	%30 = getelementptr inbounds [384 x i8], [384 x i8]* %27, i64 0, i32 %29
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$252, i64 0, i32 0), i64 41}, i64 220, i64 13, i64 %28, i64 384)
	%31 = load i8, i8* %30, align 1
	%32 = add i8 %31, 1
	store i8 %32, i8* %30
	; AssignStmt
	; SelectorExpr
	%33 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %34, i64 0, i32 0
	%36 = load i64, i64* %2, align 8
	%37 = add i64 %36, 1
	store i64 %37, i64* %35
	; ReturnStmt
	ret void

if.done-7:
	%38 = load i64, i64* %2, align 8
	%39 = sub i64 %38, 1
	store i64 %39, i64* %2
	br label %for.loop-4

for.done-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%40 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%41 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %40, i64 0
	%42 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %41, i64 0, i32 2
	%43 = getelementptr inbounds [384 x i8], [384 x i8]* %42, i64 0, i32 0
	call void @.__bounds_check_error(%..string {i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.__str$253, i64 0, i32 0), i64 41}, i64 227, i64 11, i64 0, i64 384)
	store i8 49, i8* %43
	; AssignStmt
	; SelectorExpr
	%44 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%45 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %44, i64 0
	%46 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %45, i64 0, i32 0
	store i64 1, i64* %46
	; SelectorExpr
	%47 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%48 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %47, i64 0
	%49 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %48, i64 0, i32 1
	%50 = load i64, i64* %49, align 8
	%51 = add i64 %50, 1
	store i64 %51, i64* %49
	ret void
}

define void @.decimal-23.round_down(%decimal-23.Decimal* %a, i64 %nd) {
decls-0:
	%0 = alloca %decimal-23.Decimal*, align 8
	%1 = alloca i64, align 8
	store %decimal-23.Decimal* zeroinitializer, %decimal-23.Decimal** %0
		store %decimal-23.Decimal* %a, %decimal-23.Decimal** %0
	store i64 zeroinitializer, i64* %1
		store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	br i1 %3, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%4 = load i64, i64* %1, align 8
	; SelectorExpr
	%5 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%6 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %5, i64 0
	%7 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %6, i64 0, i32 0
	%8 = load i64, i64* %7, align 8
	%9 = icmp sge i64 %4, %8
	br i1 %9, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; AssignStmt
	; SelectorExpr
	%10 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	%11 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %10, i64 0
	%12 = getelementptr inbounds %decimal-23.Decimal, %decimal-23.Decimal* %11, i64 0, i32 0
	%13 = load i64, i64* %1, align 8
	store i64 %13, i64* %12
	%14 = load %decimal-23.Decimal*, %decimal-23.Decimal** %0, align 8
	call void @.decimal-23.trim(%decimal-23.Decimal* %14)
	ret void
}

define void @.__$startup_runtime() noinline {
decls-0:
	%0 = call i64 @.os_windows-17.get_std_handle(i64 -11)
	%1 = call i64 @.os_windows-17.get_std_handle(i64 -12)
	store i64 %0, i64* @.os_windows-17.stdout
	store i64 %1, i64* @.os_windows-17.stderr
	%2 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%3 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 0
	store %Type_Info* %2, %Type_Info** %3
	%4 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 1
	store i64 163, i64* %4
	%5 = getelementptr inbounds {%Type_Info*, i64, i64}, {%Type_Info*, i64, i64}* @__type_table, i64 0, i32 2
	store i64 163, i64* %5
	%6 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	; Type_Info_Named
	%7 = bitcast %Type_Info* %6 to %Type_Info.Named*
	%8 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	%9 = bitcast %Type_Info* %8 to %Type_Info*
	%10 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %7, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$254, i64 0, i32 0), i64 5}, %..string* %10
	%11 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %7, i64 0, i32 1
	store %Type_Info* %9, %Type_Info** %11
	%12 = getelementptr inbounds %Type_Info, %Type_Info* %6, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %12
	%13 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 1
	; Type_Info_Struct
	%14 = bitcast %Type_Info* %13 to %Type_Info.Struct*
	%15 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %14, i64 0, i32 0
	%16 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 3
	store i64 24, i64* %16
	%17 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 4
	store i64 8, i64* %17
	%18 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 5
	store i1 false, i1* %18
	%19 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 6
	store i1 true, i1* %19
	%20 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 7
	store i1 false, i1* %20
	%21 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 0
	%22 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 0
	%23 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 0
	%24 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%25 = bitcast %Type_Info* %24 to %Type_Info*
	%26 = getelementptr inbounds %Type_Info*, %Type_Info** %21, i64 0
	%27 = getelementptr inbounds i64, i64* %23, i64 0
	%28 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	store %Type_Info* %28, %Type_Info** %26
	%29 = getelementptr inbounds %..string, %..string* %22, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$255, i64 0, i32 0), i64 4}, %..string* %29
	store i64 0, i64* %27
	%30 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%31 = bitcast %Type_Info* %30 to %Type_Info*
	%32 = getelementptr inbounds %Type_Info*, %Type_Info** %21, i64 1
	%33 = getelementptr inbounds i64, i64* %23, i64 1
	%34 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %34, %Type_Info** %32
	%35 = getelementptr inbounds %..string, %..string* %22, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$256, i64 0, i32 0), i64 4}, %..string* %35
	store i64 16, i64* %33
	%36 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 0
	%37 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %36, i64 0, i32 0
	store %Type_Info** %21, %Type_Info*** %37
	%38 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %36, i64 0, i32 1
	store i64 2, i64* %38
	%39 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %36, i64 0, i32 2
	store i64 2, i64* %39
	%40 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 1
	%41 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %40, i64 0, i32 0
	store %..string* %22, %..string** %41
	%42 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %40, i64 0, i32 1
	store i64 2, i64* %42
	%43 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %40, i64 0, i32 2
	store i64 2, i64* %43
	%44 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %15, i64 0, i32 2
	%45 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %44, i64 0, i32 0
	store i64* %23, i64** %45
	%46 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %44, i64 0, i32 1
	store i64 2, i64* %46
	%47 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %44, i64 0, i32 2
	store i64 2, i64* %47
	%48 = getelementptr inbounds %Type_Info, %Type_Info* %13, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %48
	%49 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	; Type_Info_Basic
	%50 = bitcast %Type_Info* %49 to %Type_Info.String*
	%51 = getelementptr inbounds %Type_Info, %Type_Info* %49, i64 0, i32 2 ; UnionTagPtr
	store i64 6, i64* %51
	%52 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%53 = bitcast %Type_Info* %52 to %Type_Info.Pointer*
	%54 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%55 = bitcast %Type_Info* %54 to %Type_Info*
	%56 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %53, i64 0, i32 0
	store %Type_Info* %55, %Type_Info** %56
	%57 = getelementptr inbounds %Type_Info, %Type_Info* %52, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %57
	%58 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	; Type_Info_Basic
	%59 = bitcast %Type_Info* %58 to %Type_Info.Integer*
	%60 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %59, i64 0, i32 0
	store i64 1, i64* %60
	%61 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %59, i64 0, i32 1
	store i1 false, i1* %61
	%62 = getelementptr inbounds %Type_Info, %Type_Info* %58, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %62
	%63 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	; Type_Info_Basic
	%64 = bitcast %Type_Info* %63 to %Type_Info.Integer*
	%65 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %64, i64 0, i32 0
	store i64 8, i64* %65
	%66 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %64, i64 0, i32 1
	store i1 true, i1* %66
	%67 = getelementptr inbounds %Type_Info, %Type_Info* %63, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %67
	%68 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%69 = bitcast %Type_Info* %68 to %Type_Info.Pointer*
	%70 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%71 = bitcast %Type_Info* %70 to %Type_Info*
	%72 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %69, i64 0, i32 0
	store %Type_Info* %71, %Type_Info** %72
	%73 = getelementptr inbounds %Type_Info, %Type_Info* %68, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %73
	%74 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	; Type_Info_Named
	%75 = bitcast %Type_Info* %74 to %Type_Info.Named*
	%76 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	%77 = bitcast %Type_Info* %76 to %Type_Info*
	%78 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %75, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$257, i64 0, i32 0), i64 9}, %..string* %78
	%79 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %75, i64 0, i32 1
	store %Type_Info* %77, %Type_Info** %79
	%80 = getelementptr inbounds %Type_Info, %Type_Info* %74, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %80
	%81 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 8
	; Type_Info_Union
	%82 = bitcast %Type_Info* %81 to %Type_Info.Union*
	%83 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 3
	store i64 144, i64* %83
	%84 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 4
	store i64 8, i64* %84
	%85 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 0
	%86 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 2
	%87 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 2
	%88 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 2
	%89 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %85, i64 0, i32 0
	%90 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %89, i64 0, i32 0
	store %Type_Info** %86, %Type_Info*** %90
	%91 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %89, i64 0, i32 1
	store i64 0, i64* %91
	%92 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %89, i64 0, i32 2
	store i64 0, i64* %92
	%93 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %85, i64 0, i32 1
	%94 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %93, i64 0, i32 0
	store %..string* %87, %..string** %94
	%95 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %93, i64 0, i32 1
	store i64 0, i64* %95
	%96 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %93, i64 0, i32 2
	store i64 0, i64* %96
	%97 = getelementptr inbounds {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}, {{%Type_Info**, i64, i64}, {%..string*, i64, i64}, {i64*, i64, i64}}* %85, i64 0, i32 2
	%98 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %97, i64 0, i32 0
	store i64* %88, i64** %98
	%99 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %97, i64 0, i32 1
	store i64 0, i64* %99
	%100 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %97, i64 0, i32 2
	store i64 0, i64* %100
	%101 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 1
	%102 = getelementptr inbounds %Type_Info.Union, %Type_Info.Union* %82, i64 0, i32 2
	%103 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 2
	%104 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 2
	%105 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	%106 = bitcast %Type_Info* %105 to %Type_Info*
	%107 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 0
	%108 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 0
	store %Type_Info* %108, %Type_Info** %107
	%109 = getelementptr inbounds %..string, %..string* %103, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$258, i64 0, i32 0), i64 5}, %..string* %109
	%110 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%111 = bitcast %Type_Info* %110 to %Type_Info*
	%112 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 1
	%113 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	store %Type_Info* %113, %Type_Info** %112
	%114 = getelementptr inbounds %..string, %..string* %103, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$259, i64 0, i32 0), i64 7}, %..string* %114
	%115 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%116 = bitcast %Type_Info* %115 to %Type_Info*
	%117 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 2
	%118 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	store %Type_Info* %118, %Type_Info** %117
	%119 = getelementptr inbounds %..string, %..string* %103, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$25a, i64 0, i32 0), i64 5}, %..string* %119
	%120 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%121 = bitcast %Type_Info* %120 to %Type_Info*
	%122 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 3
	%123 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	store %Type_Info* %123, %Type_Info** %122
	%124 = getelementptr inbounds %..string, %..string* %103, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$25b, i64 0, i32 0), i64 7}, %..string* %124
	%125 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	%126 = bitcast %Type_Info* %125 to %Type_Info*
	%127 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 4
	%128 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	store %Type_Info* %128, %Type_Info** %127
	%129 = getelementptr inbounds %..string, %..string* %103, i64 4
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$25c, i64 0, i32 0), i64 10}, %..string* %129
	%130 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%131 = bitcast %Type_Info* %130 to %Type_Info*
	%132 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 5
	%133 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	store %Type_Info* %133, %Type_Info** %132
	%134 = getelementptr inbounds %..string, %..string* %103, i64 5
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$25d, i64 0, i32 0), i64 6}, %..string* %134
	%135 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%136 = bitcast %Type_Info* %135 to %Type_Info*
	%137 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 6
	%138 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	store %Type_Info* %138, %Type_Info** %137
	%139 = getelementptr inbounds %..string, %..string* %103, i64 6
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$25e, i64 0, i32 0), i64 7}, %..string* %139
	%140 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%141 = bitcast %Type_Info* %140 to %Type_Info*
	%142 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 7
	%143 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	store %Type_Info* %143, %Type_Info** %142
	%144 = getelementptr inbounds %..string, %..string* %103, i64 7
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$25f, i64 0, i32 0), i64 3}, %..string* %144
	%145 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%146 = bitcast %Type_Info* %145 to %Type_Info*
	%147 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 8
	%148 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	store %Type_Info* %148, %Type_Info** %147
	%149 = getelementptr inbounds %..string, %..string* %103, i64 8
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$260, i64 0, i32 0), i64 7}, %..string* %149
	%150 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%151 = bitcast %Type_Info* %150 to %Type_Info*
	%152 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 9
	%153 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	store %Type_Info* %153, %Type_Info** %152
	%154 = getelementptr inbounds %..string, %..string* %103, i64 9
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$261, i64 0, i32 0), i64 9}, %..string* %154
	%155 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%156 = bitcast %Type_Info* %155 to %Type_Info*
	%157 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 10
	%158 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	store %Type_Info* %158, %Type_Info** %157
	%159 = getelementptr inbounds %..string, %..string* %103, i64 10
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$262, i64 0, i32 0), i64 5}, %..string* %159
	%160 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%161 = bitcast %Type_Info* %160 to %Type_Info*
	%162 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 11
	%163 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	store %Type_Info* %163, %Type_Info** %162
	%164 = getelementptr inbounds %..string, %..string* %103, i64 11
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$263, i64 0, i32 0), i64 13}, %..string* %164
	%165 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%166 = bitcast %Type_Info* %165 to %Type_Info*
	%167 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 12
	%168 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	store %Type_Info* %168, %Type_Info** %167
	%169 = getelementptr inbounds %..string, %..string* %103, i64 12
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$264, i64 0, i32 0), i64 5}, %..string* %169
	%170 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%171 = bitcast %Type_Info* %170 to %Type_Info*
	%172 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 13
	%173 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	store %Type_Info* %173, %Type_Info** %172
	%174 = getelementptr inbounds %..string, %..string* %103, i64 13
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$265, i64 0, i32 0), i64 6}, %..string* %174
	%175 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%176 = bitcast %Type_Info* %175 to %Type_Info*
	%177 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 14
	%178 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	store %Type_Info* %178, %Type_Info** %177
	%179 = getelementptr inbounds %..string, %..string* %103, i64 14
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$266, i64 0, i32 0), i64 5}, %..string* %179
	%180 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%181 = bitcast %Type_Info* %180 to %Type_Info*
	%182 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 15
	%183 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	store %Type_Info* %183, %Type_Info** %182
	%184 = getelementptr inbounds %..string, %..string* %103, i64 15
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$267, i64 0, i32 0), i64 6}, %..string* %184
	%185 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%186 = bitcast %Type_Info* %185 to %Type_Info*
	%187 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 16
	%188 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	store %Type_Info* %188, %Type_Info** %187
	%189 = getelementptr inbounds %..string, %..string* %103, i64 16
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$268, i64 0, i32 0), i64 9}, %..string* %189
	%190 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	%191 = bitcast %Type_Info* %190 to %Type_Info*
	%192 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 17
	%193 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	store %Type_Info* %193, %Type_Info** %192
	%194 = getelementptr inbounds %..string, %..string* %103, i64 17
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$269, i64 0, i32 0), i64 5}, %..string* %194
	%195 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	%196 = bitcast %Type_Info* %195 to %Type_Info*
	%197 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 18
	%198 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	store %Type_Info* %198, %Type_Info** %197
	%199 = getelementptr inbounds %..string, %..string* %103, i64 18
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$26a, i64 0, i32 0), i64 4}, %..string* %199
	%200 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%201 = bitcast %Type_Info* %200 to %Type_Info*
	%202 = getelementptr inbounds %Type_Info*, %Type_Info** %104, i64 19
	%203 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	store %Type_Info* %203, %Type_Info** %202
	%204 = getelementptr inbounds %..string, %..string* %103, i64 19
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$26b, i64 0, i32 0), i64 3}, %..string* %204
	%205 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %101, i64 0, i32 0
	store %..string* %103, %..string** %205
	%206 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %101, i64 0, i32 1
	store i64 20, i64* %206
	%207 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %101, i64 0, i32 2
	store i64 20, i64* %207
	%208 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %102, i64 0, i32 0
	store %Type_Info** %104, %Type_Info*** %208
	%209 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %102, i64 0, i32 1
	store i64 20, i64* %209
	%210 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %102, i64 0, i32 2
	store i64 20, i64* %210
	%211 = getelementptr inbounds %Type_Info, %Type_Info* %81, i64 0, i32 2 ; UnionTagPtr
	store i64 18, i64* %211
	%212 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	; Type_Info_Named
	%213 = bitcast %Type_Info* %212 to %Type_Info.Named*
	%214 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	%215 = bitcast %Type_Info* %214 to %Type_Info*
	%216 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %213, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$26c, i64 0, i32 0), i64 7}, %..string* %216
	%217 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %213, i64 0, i32 1
	store %Type_Info* %215, %Type_Info** %217
	%218 = getelementptr inbounds %Type_Info, %Type_Info* %212, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %218
	%219 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 10
	; Type_Info_Struct
	%220 = bitcast %Type_Info* %219 to %Type_Info.Struct*
	%221 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %220, i64 0, i32 0
	%222 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 3
	store i64 16, i64* %222
	%223 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 4
	store i64 8, i64* %223
	%224 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 5
	store i1 false, i1* %224
	%225 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 6
	store i1 true, i1* %225
	%226 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 7
	store i1 false, i1* %226
	%227 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 22
	%228 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 22
	%229 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 2
	%230 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%231 = bitcast %Type_Info* %230 to %Type_Info*
	%232 = getelementptr inbounds %Type_Info*, %Type_Info** %227, i64 0
	%233 = getelementptr inbounds i64, i64* %229, i64 0
	%234 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %234, %Type_Info** %232
	%235 = getelementptr inbounds %..string, %..string* %228, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$26d, i64 0, i32 0), i64 4}, %..string* %235
	store i64 0, i64* %233
	%236 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%237 = bitcast %Type_Info* %236 to %Type_Info*
	%238 = getelementptr inbounds %Type_Info*, %Type_Info** %227, i64 1
	%239 = getelementptr inbounds i64, i64* %229, i64 1
	%240 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %240, %Type_Info** %238
	%241 = getelementptr inbounds %..string, %..string* %228, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$26e, i64 0, i32 0), i64 6}, %..string* %241
	store i64 8, i64* %239
	%242 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 0
	%243 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %242, i64 0, i32 0
	store %Type_Info** %227, %Type_Info*** %243
	%244 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %242, i64 0, i32 1
	store i64 2, i64* %244
	%245 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %242, i64 0, i32 2
	store i64 2, i64* %245
	%246 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 1
	%247 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %246, i64 0, i32 0
	store %..string* %228, %..string** %247
	%248 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %246, i64 0, i32 1
	store i64 2, i64* %248
	%249 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %246, i64 0, i32 2
	store i64 2, i64* %249
	%250 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %221, i64 0, i32 2
	%251 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %250, i64 0, i32 0
	store i64* %229, i64** %251
	%252 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %250, i64 0, i32 1
	store i64 2, i64* %252
	%253 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %250, i64 0, i32 2
	store i64 2, i64* %253
	%254 = getelementptr inbounds %Type_Info, %Type_Info* %219, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %254
	%255 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	; Type_Info_Basic
	%256 = bitcast %Type_Info* %255 to %Type_Info.Boolean*
	%257 = getelementptr inbounds %Type_Info, %Type_Info* %255, i64 0, i32 2 ; UnionTagPtr
	store i64 7, i64* %257
	%258 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	; Type_Info_Named
	%259 = bitcast %Type_Info* %258 to %Type_Info.Named*
	%260 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%261 = bitcast %Type_Info* %260 to %Type_Info*
	%262 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %259, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$26f, i64 0, i32 0), i64 5}, %..string* %262
	%263 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %259, i64 0, i32 1
	store %Type_Info* %261, %Type_Info** %263
	%264 = getelementptr inbounds %Type_Info, %Type_Info* %258, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %264
	%265 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	; Type_Info_Struct
	%266 = bitcast %Type_Info* %265 to %Type_Info.Struct*
	%267 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %266, i64 0, i32 0
	%268 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 3
	store i64 8, i64* %268
	%269 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 4
	store i64 8, i64* %269
	%270 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 5
	store i1 false, i1* %270
	%271 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 6
	store i1 true, i1* %271
	%272 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 7
	store i1 false, i1* %272
	%273 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 24
	%274 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 24
	%275 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 4
	%276 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%277 = bitcast %Type_Info* %276 to %Type_Info*
	%278 = getelementptr inbounds %Type_Info*, %Type_Info** %273, i64 0
	%279 = getelementptr inbounds i64, i64* %275, i64 0
	%280 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %280, %Type_Info** %278
	%281 = getelementptr inbounds %..string, %..string* %274, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$270, i64 0, i32 0), i64 4}, %..string* %281
	store i64 0, i64* %279
	%282 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 0
	%283 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %282, i64 0, i32 0
	store %Type_Info** %273, %Type_Info*** %283
	%284 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %282, i64 0, i32 1
	store i64 1, i64* %284
	%285 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %282, i64 0, i32 2
	store i64 1, i64* %285
	%286 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 1
	%287 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %286, i64 0, i32 0
	store %..string* %274, %..string** %287
	%288 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %286, i64 0, i32 1
	store i64 1, i64* %288
	%289 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %286, i64 0, i32 2
	store i64 1, i64* %289
	%290 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %267, i64 0, i32 2
	%291 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %290, i64 0, i32 0
	store i64* %275, i64** %291
	%292 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %290, i64 0, i32 1
	store i64 1, i64* %292
	%293 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %290, i64 0, i32 2
	store i64 1, i64* %293
	%294 = getelementptr inbounds %Type_Info, %Type_Info* %265, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %294
	%295 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	; Type_Info_Named
	%296 = bitcast %Type_Info* %295 to %Type_Info.Named*
	%297 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%298 = bitcast %Type_Info* %297 to %Type_Info*
	%299 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %296, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$271, i64 0, i32 0), i64 7}, %..string* %299
	%300 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %296, i64 0, i32 1
	store %Type_Info* %298, %Type_Info** %300
	%301 = getelementptr inbounds %Type_Info, %Type_Info* %295, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %301
	%302 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	; Type_Info_Struct
	%303 = bitcast %Type_Info* %302 to %Type_Info.Struct*
	%304 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %303, i64 0, i32 0
	%305 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 3
	store i64 8, i64* %305
	%306 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 4
	store i64 8, i64* %306
	%307 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 5
	store i1 false, i1* %307
	%308 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 6
	store i1 true, i1* %308
	%309 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 7
	store i1 false, i1* %309
	%310 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 25
	%311 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 25
	%312 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 5
	%313 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%314 = bitcast %Type_Info* %313 to %Type_Info*
	%315 = getelementptr inbounds %Type_Info*, %Type_Info** %310, i64 0
	%316 = getelementptr inbounds i64, i64* %312, i64 0
	%317 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %317, %Type_Info** %315
	%318 = getelementptr inbounds %..string, %..string* %311, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$272, i64 0, i32 0), i64 4}, %..string* %318
	store i64 0, i64* %316
	%319 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 0
	%320 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %319, i64 0, i32 0
	store %Type_Info** %310, %Type_Info*** %320
	%321 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %319, i64 0, i32 1
	store i64 1, i64* %321
	%322 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %319, i64 0, i32 2
	store i64 1, i64* %322
	%323 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 1
	%324 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %323, i64 0, i32 0
	store %..string* %311, %..string** %324
	%325 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %323, i64 0, i32 1
	store i64 1, i64* %325
	%326 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %323, i64 0, i32 2
	store i64 1, i64* %326
	%327 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %304, i64 0, i32 2
	%328 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %327, i64 0, i32 0
	store i64* %312, i64** %328
	%329 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %327, i64 0, i32 1
	store i64 1, i64* %329
	%330 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %327, i64 0, i32 2
	store i64 1, i64* %330
	%331 = getelementptr inbounds %Type_Info, %Type_Info* %302, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %331
	%332 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 15
	; Type_Info_Named
	%333 = bitcast %Type_Info* %332 to %Type_Info.Named*
	%334 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	%335 = bitcast %Type_Info* %334 to %Type_Info*
	%336 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %333, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$273, i64 0, i32 0), i64 10}, %..string* %336
	%337 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %333, i64 0, i32 1
	store %Type_Info* %335, %Type_Info** %337
	%338 = getelementptr inbounds %Type_Info, %Type_Info* %332, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %338
	%339 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 13
	; Type_Info_Struct
	%340 = bitcast %Type_Info* %339 to %Type_Info.Struct*
	%341 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %340, i64 0, i32 0
	%342 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 3
	store i64 8, i64* %342
	%343 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 4
	store i64 8, i64* %343
	%344 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 5
	store i1 false, i1* %344
	%345 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 6
	store i1 true, i1* %345
	%346 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 7
	store i1 false, i1* %346
	%347 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 26
	%348 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 26
	%349 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 6
	%350 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%351 = bitcast %Type_Info* %350 to %Type_Info*
	%352 = getelementptr inbounds %Type_Info*, %Type_Info** %347, i64 0
	%353 = getelementptr inbounds i64, i64* %349, i64 0
	%354 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %354, %Type_Info** %352
	%355 = getelementptr inbounds %..string, %..string* %348, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$274, i64 0, i32 0), i64 4}, %..string* %355
	store i64 0, i64* %353
	%356 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 0
	%357 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %356, i64 0, i32 0
	store %Type_Info** %347, %Type_Info*** %357
	%358 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %356, i64 0, i32 1
	store i64 1, i64* %358
	%359 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %356, i64 0, i32 2
	store i64 1, i64* %359
	%360 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 1
	%361 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %360, i64 0, i32 0
	store %..string* %348, %..string** %361
	%362 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %360, i64 0, i32 1
	store i64 1, i64* %362
	%363 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %360, i64 0, i32 2
	store i64 1, i64* %363
	%364 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %341, i64 0, i32 2
	%365 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %364, i64 0, i32 0
	store i64* %349, i64** %365
	%366 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %364, i64 0, i32 1
	store i64 1, i64* %366
	%367 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %364, i64 0, i32 2
	store i64 1, i64* %367
	%368 = getelementptr inbounds %Type_Info, %Type_Info* %339, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %368
	%369 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	; Type_Info_Named
	%370 = bitcast %Type_Info* %369 to %Type_Info.Named*
	%371 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%372 = bitcast %Type_Info* %371 to %Type_Info*
	%373 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %370, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$275, i64 0, i32 0), i64 6}, %..string* %373
	%374 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %370, i64 0, i32 1
	store %Type_Info* %372, %Type_Info** %374
	%375 = getelementptr inbounds %Type_Info, %Type_Info* %369, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %375
	%376 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	; Type_Info_Struct
	%377 = bitcast %Type_Info* %376 to %Type_Info.Struct*
	%378 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %377, i64 0, i32 0
	%379 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 3
	store i64 0, i64* %379
	%380 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 4
	store i64 1, i64* %380
	%381 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 5
	store i1 false, i1* %381
	%382 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 6
	store i1 true, i1* %382
	%383 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 7
	store i1 false, i1* %383
	%384 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 27
	%385 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 27
	%386 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 7
	%387 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 0
	%388 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %387, i64 0, i32 0
	store %Type_Info** %384, %Type_Info*** %388
	%389 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %387, i64 0, i32 1
	store i64 0, i64* %389
	%390 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %387, i64 0, i32 2
	store i64 0, i64* %390
	%391 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 1
	%392 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %391, i64 0, i32 0
	store %..string* %385, %..string** %392
	%393 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %391, i64 0, i32 1
	store i64 0, i64* %393
	%394 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %391, i64 0, i32 2
	store i64 0, i64* %394
	%395 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %378, i64 0, i32 2
	%396 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %395, i64 0, i32 0
	store i64* %386, i64** %396
	%397 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %395, i64 0, i32 1
	store i64 0, i64* %397
	%398 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %395, i64 0, i32 2
	store i64 0, i64* %398
	%399 = getelementptr inbounds %Type_Info, %Type_Info* %376, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %399
	%400 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	; Type_Info_Named
	%401 = bitcast %Type_Info* %400 to %Type_Info.Named*
	%402 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%403 = bitcast %Type_Info* %402 to %Type_Info*
	%404 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %401, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$276, i64 0, i32 0), i64 7}, %..string* %404
	%405 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %401, i64 0, i32 1
	store %Type_Info* %403, %Type_Info** %405
	%406 = getelementptr inbounds %Type_Info, %Type_Info* %400, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %406
	%407 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	; Type_Info_Struct
	%408 = bitcast %Type_Info* %407 to %Type_Info.Struct*
	%409 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %408, i64 0, i32 0
	%410 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 3
	store i64 0, i64* %410
	%411 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 4
	store i64 1, i64* %411
	%412 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 5
	store i1 false, i1* %412
	%413 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 6
	store i1 true, i1* %413
	%414 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 7
	store i1 false, i1* %414
	%415 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 27
	%416 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 27
	%417 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 7
	%418 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 0
	%419 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %418, i64 0, i32 0
	store %Type_Info** %415, %Type_Info*** %419
	%420 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %418, i64 0, i32 1
	store i64 0, i64* %420
	%421 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %418, i64 0, i32 2
	store i64 0, i64* %421
	%422 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 1
	%423 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %422, i64 0, i32 0
	store %..string* %416, %..string** %423
	%424 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %422, i64 0, i32 1
	store i64 0, i64* %424
	%425 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %422, i64 0, i32 2
	store i64 0, i64* %425
	%426 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %409, i64 0, i32 2
	%427 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %426, i64 0, i32 0
	store i64* %417, i64** %427
	%428 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %426, i64 0, i32 1
	store i64 0, i64* %428
	%429 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %426, i64 0, i32 2
	store i64 0, i64* %429
	%430 = getelementptr inbounds %Type_Info, %Type_Info* %407, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %430
	%431 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	; Type_Info_Named
	%432 = bitcast %Type_Info* %431 to %Type_Info.Named*
	%433 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	%434 = bitcast %Type_Info* %433 to %Type_Info*
	%435 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %432, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$277, i64 0, i32 0), i64 3}, %..string* %435
	%436 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %432, i64 0, i32 1
	store %Type_Info* %434, %Type_Info** %436
	%437 = getelementptr inbounds %Type_Info, %Type_Info* %431, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %437
	%438 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 17
	; Type_Info_Struct
	%439 = bitcast %Type_Info* %438 to %Type_Info.Struct*
	%440 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %439, i64 0, i32 0
	%441 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 3
	store i64 0, i64* %441
	%442 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 4
	store i64 1, i64* %442
	%443 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 5
	store i1 false, i1* %443
	%444 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 6
	store i1 true, i1* %444
	%445 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 7
	store i1 false, i1* %445
	%446 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 27
	%447 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 27
	%448 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 7
	%449 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 0
	%450 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %449, i64 0, i32 0
	store %Type_Info** %446, %Type_Info*** %450
	%451 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %449, i64 0, i32 1
	store i64 0, i64* %451
	%452 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %449, i64 0, i32 2
	store i64 0, i64* %452
	%453 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 1
	%454 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %453, i64 0, i32 0
	store %..string* %447, %..string** %454
	%455 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %453, i64 0, i32 1
	store i64 0, i64* %455
	%456 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %453, i64 0, i32 2
	store i64 0, i64* %456
	%457 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %440, i64 0, i32 2
	%458 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %457, i64 0, i32 0
	store i64* %448, i64** %458
	%459 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %457, i64 0, i32 1
	store i64 0, i64* %459
	%460 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %457, i64 0, i32 2
	store i64 0, i64* %460
	%461 = getelementptr inbounds %Type_Info, %Type_Info* %438, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %461
	%462 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	; Type_Info_Named
	%463 = bitcast %Type_Info* %462 to %Type_Info.Named*
	%464 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 21
	%465 = bitcast %Type_Info* %464 to %Type_Info*
	%466 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %463, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$278, i64 0, i32 0), i64 7}, %..string* %466
	%467 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %463, i64 0, i32 1
	store %Type_Info* %465, %Type_Info** %467
	%468 = getelementptr inbounds %Type_Info, %Type_Info* %462, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %468
	%469 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 21
	; Type_Info_Struct
	%470 = bitcast %Type_Info* %469 to %Type_Info.Struct*
	%471 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %470, i64 0, i32 0
	%472 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 3
	store i64 8, i64* %472
	%473 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 4
	store i64 8, i64* %473
	%474 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 5
	store i1 false, i1* %474
	%475 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 6
	store i1 true, i1* %475
	%476 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 7
	store i1 false, i1* %476
	%477 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 27
	%478 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 27
	%479 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 7
	%480 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%481 = bitcast %Type_Info* %480 to %Type_Info*
	%482 = getelementptr inbounds %Type_Info*, %Type_Info** %477, i64 0
	%483 = getelementptr inbounds i64, i64* %479, i64 0
	%484 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %484, %Type_Info** %482
	%485 = getelementptr inbounds %..string, %..string* %478, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$279, i64 0, i32 0), i64 4}, %..string* %485
	store i64 0, i64* %483
	%486 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 0
	%487 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %486, i64 0, i32 0
	store %Type_Info** %477, %Type_Info*** %487
	%488 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %486, i64 0, i32 1
	store i64 1, i64* %488
	%489 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %486, i64 0, i32 2
	store i64 1, i64* %489
	%490 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 1
	%491 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %490, i64 0, i32 0
	store %..string* %478, %..string** %491
	%492 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %490, i64 0, i32 1
	store i64 1, i64* %492
	%493 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %490, i64 0, i32 2
	store i64 1, i64* %493
	%494 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %471, i64 0, i32 2
	%495 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %494, i64 0, i32 0
	store i64* %479, i64** %495
	%496 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %494, i64 0, i32 1
	store i64 1, i64* %496
	%497 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %494, i64 0, i32 2
	store i64 1, i64* %497
	%498 = getelementptr inbounds %Type_Info, %Type_Info* %469, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %498
	%499 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%500 = bitcast %Type_Info* %499 to %Type_Info.Pointer*
	%501 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%502 = bitcast %Type_Info* %501 to %Type_Info*
	%503 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %500, i64 0, i32 0
	store %Type_Info* %502, %Type_Info** %503
	%504 = getelementptr inbounds %Type_Info, %Type_Info* %499, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %504
	%505 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	; Type_Info_Named
	%506 = bitcast %Type_Info* %505 to %Type_Info.Named*
	%507 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 23
	%508 = bitcast %Type_Info* %507 to %Type_Info*
	%509 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %506, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$27a, i64 0, i32 0), i64 9}, %..string* %509
	%510 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %506, i64 0, i32 1
	store %Type_Info* %508, %Type_Info** %510
	%511 = getelementptr inbounds %Type_Info, %Type_Info* %505, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %511
	%512 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 23
	; Type_Info_Struct
	%513 = bitcast %Type_Info* %512 to %Type_Info.Struct*
	%514 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %513, i64 0, i32 0
	%515 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 3
	store i64 32, i64* %515
	%516 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 4
	store i64 8, i64* %516
	%517 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 5
	store i1 false, i1* %517
	%518 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 6
	store i1 true, i1* %518
	%519 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 7
	store i1 false, i1* %519
	%520 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 28
	%521 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 28
	%522 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 8
	%523 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%524 = bitcast %Type_Info* %523 to %Type_Info*
	%525 = getelementptr inbounds %Type_Info*, %Type_Info** %520, i64 0
	%526 = getelementptr inbounds i64, i64* %522, i64 0
	%527 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %527, %Type_Info** %525
	%528 = getelementptr inbounds %..string, %..string* %521, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$27b, i64 0, i32 0), i64 6}, %..string* %528
	store i64 0, i64* %526
	%529 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%530 = bitcast %Type_Info* %529 to %Type_Info*
	%531 = getelementptr inbounds %Type_Info*, %Type_Info** %520, i64 1
	%532 = getelementptr inbounds i64, i64* %522, i64 1
	%533 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %533, %Type_Info** %531
	%534 = getelementptr inbounds %..string, %..string* %521, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$27c, i64 0, i32 0), i64 7}, %..string* %534
	store i64 8, i64* %532
	%535 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%536 = bitcast %Type_Info* %535 to %Type_Info*
	%537 = getelementptr inbounds %Type_Info*, %Type_Info** %520, i64 2
	%538 = getelementptr inbounds i64, i64* %522, i64 2
	%539 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %539, %Type_Info** %537
	%540 = getelementptr inbounds %..string, %..string* %521, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$27d, i64 0, i32 0), i64 8}, %..string* %540
	store i64 16, i64* %538
	%541 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	%542 = bitcast %Type_Info* %541 to %Type_Info*
	%543 = getelementptr inbounds %Type_Info*, %Type_Info** %520, i64 3
	%544 = getelementptr inbounds i64, i64* %522, i64 3
	%545 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	store %Type_Info* %545, %Type_Info** %543
	%546 = getelementptr inbounds %..string, %..string* %521, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$27e, i64 0, i32 0), i64 10}, %..string* %546
	store i64 24, i64* %544
	%547 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 0
	%548 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %547, i64 0, i32 0
	store %Type_Info** %520, %Type_Info*** %548
	%549 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %547, i64 0, i32 1
	store i64 4, i64* %549
	%550 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %547, i64 0, i32 2
	store i64 4, i64* %550
	%551 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 1
	%552 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %551, i64 0, i32 0
	store %..string* %521, %..string** %552
	%553 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %551, i64 0, i32 1
	store i64 4, i64* %553
	%554 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %551, i64 0, i32 2
	store i64 4, i64* %554
	%555 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %514, i64 0, i32 2
	%556 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %555, i64 0, i32 0
	store i64* %522, i64** %556
	%557 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %555, i64 0, i32 1
	store i64 4, i64* %557
	%558 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %555, i64 0, i32 2
	store i64 4, i64* %558
	%559 = getelementptr inbounds %Type_Info, %Type_Info* %512, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %559
	%560 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%561 = bitcast %Type_Info* %560 to %Type_Info.Pointer*
	%562 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%563 = bitcast %Type_Info* %562 to %Type_Info*
	%564 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %561, i64 0, i32 0
	store %Type_Info* %563, %Type_Info** %564
	%565 = getelementptr inbounds %Type_Info, %Type_Info* %560, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %565
	%566 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%567 = bitcast %Type_Info* %566 to %Type_Info.Pointer*
	%568 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%569 = bitcast %Type_Info* %568 to %Type_Info*
	%570 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %567, i64 0, i32 0
	store %Type_Info* %569, %Type_Info** %570
	%571 = getelementptr inbounds %Type_Info, %Type_Info* %566, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %571
	%572 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 24
	; Type_Info_Named
	%573 = bitcast %Type_Info* %572 to %Type_Info.Named*
	%574 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 25
	%575 = bitcast %Type_Info* %574 to %Type_Info*
	%576 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %573, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$27f, i64 0, i32 0), i64 18}, %..string* %576
	%577 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %573, i64 0, i32 1
	store %Type_Info* %575, %Type_Info** %577
	%578 = getelementptr inbounds %Type_Info, %Type_Info* %572, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %578
	%579 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 25
	; Type_Info_Enum
	%580 = bitcast %Type_Info* %579 to %Type_Info.Enum*
	%581 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%582 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %580, i64 0, i32 0
	store %Type_Info* %581, %Type_Info** %582
	%583 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 0
	%584 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 0
	%585 = bitcast {[0 x <8 x i8>], [8 x i8]}* %584 to i64*
	store i64 0, i64* %585
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$280, i64 0, i32 0), i64 4}, %..string* %583
	%586 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 1
	%587 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 1
	%588 = bitcast {[0 x <8 x i8>], [8 x i8]}* %587 to i64*
	store i64 1, i64* %588
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$281, i64 0, i32 0), i64 1}, %..string* %586
	%589 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 2
	%590 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 2
	%591 = bitcast {[0 x <8 x i8>], [8 x i8]}* %590 to i64*
	store i64 2, i64* %591
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$282, i64 0, i32 0), i64 3}, %..string* %589
	%592 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 3
	%593 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 3
	%594 = bitcast {[0 x <8 x i8>], [8 x i8]}* %593 to i64*
	store i64 3, i64* %594
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$283, i64 0, i32 0), i64 4}, %..string* %592
	%595 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %580, i64 0, i32 1
	%596 = getelementptr inbounds [4 x %..string], [4 x %..string]* @.__$enum_names-19, i64 0, i32 0
	%597 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %595, i64 0, i32 0
	store %..string* %596, %..string** %597
	%598 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %595, i64 0, i32 1
	store i64 4, i64* %598
	%599 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %580, i64 0, i32 2
	%600 = getelementptr inbounds [4 x {[0 x <8 x i8>], [8 x i8]}], [4 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-19, i64 0, i32 0
	%601 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %599, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %600, {[0 x <8 x i8>], [8 x i8]}** %601
	%602 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %599, i64 0, i32 1
	store i64 4, i64* %602
	%603 = getelementptr inbounds %Type_Info, %Type_Info* %579, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %603
	%604 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	; Type_Info_Named
	%605 = bitcast %Type_Info* %604 to %Type_Info.Named*
	%606 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	%607 = bitcast %Type_Info* %606 to %Type_Info*
	%608 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %605, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$284, i64 0, i32 0), i64 5}, %..string* %608
	%609 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %605, i64 0, i32 1
	store %Type_Info* %607, %Type_Info** %609
	%610 = getelementptr inbounds %Type_Info, %Type_Info* %604, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %610
	%611 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 27
	; Type_Info_Struct
	%612 = bitcast %Type_Info* %611 to %Type_Info.Struct*
	%613 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %612, i64 0, i32 0
	%614 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 3
	store i64 24, i64* %614
	%615 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 4
	store i64 8, i64* %615
	%616 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 5
	store i1 false, i1* %616
	%617 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 6
	store i1 true, i1* %617
	%618 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 7
	store i1 false, i1* %618
	%619 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 32
	%620 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 32
	%621 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 12
	%622 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%623 = bitcast %Type_Info* %622 to %Type_Info*
	%624 = getelementptr inbounds %Type_Info*, %Type_Info** %619, i64 0
	%625 = getelementptr inbounds i64, i64* %621, i64 0
	%626 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %626, %Type_Info** %624
	%627 = getelementptr inbounds %..string, %..string* %620, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$285, i64 0, i32 0), i64 4}, %..string* %627
	store i64 0, i64* %625
	%628 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%629 = bitcast %Type_Info* %628 to %Type_Info*
	%630 = getelementptr inbounds %Type_Info*, %Type_Info** %619, i64 1
	%631 = getelementptr inbounds i64, i64* %621, i64 1
	%632 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %632, %Type_Info** %630
	%633 = getelementptr inbounds %..string, %..string* %620, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$286, i64 0, i32 0), i64 9}, %..string* %633
	store i64 8, i64* %631
	%634 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%635 = bitcast %Type_Info* %634 to %Type_Info*
	%636 = getelementptr inbounds %Type_Info*, %Type_Info** %619, i64 2
	%637 = getelementptr inbounds i64, i64* %621, i64 2
	%638 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %638, %Type_Info** %636
	%639 = getelementptr inbounds %..string, %..string* %620, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$287, i64 0, i32 0), i64 5}, %..string* %639
	store i64 16, i64* %637
	%640 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 0
	%641 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %640, i64 0, i32 0
	store %Type_Info** %619, %Type_Info*** %641
	%642 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %640, i64 0, i32 1
	store i64 3, i64* %642
	%643 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %640, i64 0, i32 2
	store i64 3, i64* %643
	%644 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 1
	%645 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %644, i64 0, i32 0
	store %..string* %620, %..string** %645
	%646 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %644, i64 0, i32 1
	store i64 3, i64* %646
	%647 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %644, i64 0, i32 2
	store i64 3, i64* %647
	%648 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %613, i64 0, i32 2
	%649 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %648, i64 0, i32 0
	store i64* %621, i64** %649
	%650 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %648, i64 0, i32 1
	store i64 3, i64* %650
	%651 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %648, i64 0, i32 2
	store i64 3, i64* %651
	%652 = getelementptr inbounds %Type_Info, %Type_Info* %611, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %652
	%653 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%654 = bitcast %Type_Info* %653 to %Type_Info.Pointer*
	%655 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%656 = bitcast %Type_Info* %655 to %Type_Info*
	%657 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %654, i64 0, i32 0
	store %Type_Info* %656, %Type_Info** %657
	%658 = getelementptr inbounds %Type_Info, %Type_Info* %653, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %658
	%659 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	; Type_Info_Named
	%660 = bitcast %Type_Info* %659 to %Type_Info.Named*
	%661 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%662 = bitcast %Type_Info* %661 to %Type_Info*
	%663 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %660, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$288, i64 0, i32 0), i64 13}, %..string* %663
	%664 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %660, i64 0, i32 1
	store %Type_Info* %662, %Type_Info** %664
	%665 = getelementptr inbounds %Type_Info, %Type_Info* %659, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %665
	%666 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	; Type_Info_Struct
	%667 = bitcast %Type_Info* %666 to %Type_Info.Struct*
	%668 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %667, i64 0, i32 0
	%669 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 3
	store i64 16, i64* %669
	%670 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 4
	store i64 8, i64* %670
	%671 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 5
	store i1 false, i1* %671
	%672 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 6
	store i1 true, i1* %672
	%673 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 7
	store i1 false, i1* %673
	%674 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 35
	%675 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 35
	%676 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 15
	%677 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%678 = bitcast %Type_Info* %677 to %Type_Info*
	%679 = getelementptr inbounds %Type_Info*, %Type_Info** %674, i64 0
	%680 = getelementptr inbounds i64, i64* %676, i64 0
	%681 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %681, %Type_Info** %679
	%682 = getelementptr inbounds %..string, %..string* %675, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$289, i64 0, i32 0), i64 4}, %..string* %682
	store i64 0, i64* %680
	%683 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%684 = bitcast %Type_Info* %683 to %Type_Info*
	%685 = getelementptr inbounds %Type_Info*, %Type_Info** %674, i64 1
	%686 = getelementptr inbounds i64, i64* %676, i64 1
	%687 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %687, %Type_Info** %685
	%688 = getelementptr inbounds %..string, %..string* %675, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$28a, i64 0, i32 0), i64 9}, %..string* %688
	store i64 8, i64* %686
	%689 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 0
	%690 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %689, i64 0, i32 0
	store %Type_Info** %674, %Type_Info*** %690
	%691 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %689, i64 0, i32 1
	store i64 2, i64* %691
	%692 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %689, i64 0, i32 2
	store i64 2, i64* %692
	%693 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 1
	%694 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %693, i64 0, i32 0
	store %..string* %675, %..string** %694
	%695 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %693, i64 0, i32 1
	store i64 2, i64* %695
	%696 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %693, i64 0, i32 2
	store i64 2, i64* %696
	%697 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %668, i64 0, i32 2
	%698 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %697, i64 0, i32 0
	store i64* %676, i64** %698
	%699 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %697, i64 0, i32 1
	store i64 2, i64* %699
	%700 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %697, i64 0, i32 2
	store i64 2, i64* %700
	%701 = getelementptr inbounds %Type_Info, %Type_Info* %666, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %701
	%702 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%703 = bitcast %Type_Info* %702 to %Type_Info.Pointer*
	%704 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%705 = bitcast %Type_Info* %704 to %Type_Info*
	%706 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %703, i64 0, i32 0
	store %Type_Info* %705, %Type_Info** %706
	%707 = getelementptr inbounds %Type_Info, %Type_Info* %702, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %707
	%708 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	; Type_Info_Named
	%709 = bitcast %Type_Info* %708 to %Type_Info.Named*
	%710 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	%711 = bitcast %Type_Info* %710 to %Type_Info*
	%712 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %709, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$28b, i64 0, i32 0), i64 5}, %..string* %712
	%713 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %709, i64 0, i32 1
	store %Type_Info* %711, %Type_Info** %713
	%714 = getelementptr inbounds %Type_Info, %Type_Info* %708, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %714
	%715 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 29
	; Type_Info_Struct
	%716 = bitcast %Type_Info* %715 to %Type_Info.Struct*
	%717 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %716, i64 0, i32 0
	%718 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 3
	store i64 16, i64* %718
	%719 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 4
	store i64 8, i64* %719
	%720 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 5
	store i1 false, i1* %720
	%721 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 6
	store i1 true, i1* %721
	%722 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 7
	store i1 false, i1* %722
	%723 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 37
	%724 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 37
	%725 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 17
	%726 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%727 = bitcast %Type_Info* %726 to %Type_Info*
	%728 = getelementptr inbounds %Type_Info*, %Type_Info** %723, i64 0
	%729 = getelementptr inbounds i64, i64* %725, i64 0
	%730 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %730, %Type_Info** %728
	%731 = getelementptr inbounds %..string, %..string* %724, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$28c, i64 0, i32 0), i64 4}, %..string* %731
	store i64 0, i64* %729
	%732 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%733 = bitcast %Type_Info* %732 to %Type_Info*
	%734 = getelementptr inbounds %Type_Info*, %Type_Info** %723, i64 1
	%735 = getelementptr inbounds i64, i64* %725, i64 1
	%736 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %736, %Type_Info** %734
	%737 = getelementptr inbounds %..string, %..string* %724, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$28d, i64 0, i32 0), i64 9}, %..string* %737
	store i64 8, i64* %735
	%738 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 0
	%739 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %738, i64 0, i32 0
	store %Type_Info** %723, %Type_Info*** %739
	%740 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %738, i64 0, i32 1
	store i64 2, i64* %740
	%741 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %738, i64 0, i32 2
	store i64 2, i64* %741
	%742 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 1
	%743 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %742, i64 0, i32 0
	store %..string* %724, %..string** %743
	%744 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %742, i64 0, i32 1
	store i64 2, i64* %744
	%745 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %742, i64 0, i32 2
	store i64 2, i64* %745
	%746 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %717, i64 0, i32 2
	%747 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %746, i64 0, i32 0
	store i64* %725, i64** %747
	%748 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %746, i64 0, i32 1
	store i64 2, i64* %748
	%749 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %746, i64 0, i32 2
	store i64 2, i64* %749
	%750 = getelementptr inbounds %Type_Info, %Type_Info* %715, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %750
	%751 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%752 = bitcast %Type_Info* %751 to %Type_Info.Pointer*
	%753 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%754 = bitcast %Type_Info* %753 to %Type_Info*
	%755 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %752, i64 0, i32 0
	store %Type_Info* %754, %Type_Info** %755
	%756 = getelementptr inbounds %Type_Info, %Type_Info* %751, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %756
	%757 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	; Type_Info_Named
	%758 = bitcast %Type_Info* %757 to %Type_Info.Named*
	%759 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	%760 = bitcast %Type_Info* %759 to %Type_Info*
	%761 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %758, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$28e, i64 0, i32 0), i64 6}, %..string* %761
	%762 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %758, i64 0, i32 1
	store %Type_Info* %760, %Type_Info** %762
	%763 = getelementptr inbounds %Type_Info, %Type_Info* %757, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %763
	%764 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 32
	; Type_Info_Struct
	%765 = bitcast %Type_Info* %764 to %Type_Info.Struct*
	%766 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %765, i64 0, i32 0
	%767 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 3
	store i64 32, i64* %767
	%768 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 4
	store i64 8, i64* %768
	%769 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 5
	store i1 false, i1* %769
	%770 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 6
	store i1 true, i1* %770
	%771 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 7
	store i1 false, i1* %771
	%772 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 39
	%773 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 39
	%774 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 19
	%775 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%776 = bitcast %Type_Info* %775 to %Type_Info*
	%777 = getelementptr inbounds %Type_Info*, %Type_Info** %772, i64 0
	%778 = getelementptr inbounds i64, i64* %774, i64 0
	%779 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %779, %Type_Info** %777
	%780 = getelementptr inbounds %..string, %..string* %773, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$28f, i64 0, i32 0), i64 4}, %..string* %780
	store i64 0, i64* %778
	%781 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%782 = bitcast %Type_Info* %781 to %Type_Info*
	%783 = getelementptr inbounds %Type_Info*, %Type_Info** %772, i64 1
	%784 = getelementptr inbounds i64, i64* %774, i64 1
	%785 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %785, %Type_Info** %783
	%786 = getelementptr inbounds %..string, %..string* %773, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$290, i64 0, i32 0), i64 9}, %..string* %786
	store i64 8, i64* %784
	%787 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%788 = bitcast %Type_Info* %787 to %Type_Info*
	%789 = getelementptr inbounds %Type_Info*, %Type_Info** %772, i64 2
	%790 = getelementptr inbounds i64, i64* %774, i64 2
	%791 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %791, %Type_Info** %789
	%792 = getelementptr inbounds %..string, %..string* %773, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$291, i64 0, i32 0), i64 5}, %..string* %792
	store i64 16, i64* %790
	%793 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%794 = bitcast %Type_Info* %793 to %Type_Info*
	%795 = getelementptr inbounds %Type_Info*, %Type_Info** %772, i64 3
	%796 = getelementptr inbounds i64, i64* %774, i64 3
	%797 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %797, %Type_Info** %795
	%798 = getelementptr inbounds %..string, %..string* %773, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$292, i64 0, i32 0), i64 5}, %..string* %798
	store i64 24, i64* %796
	%799 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 0
	%800 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %799, i64 0, i32 0
	store %Type_Info** %772, %Type_Info*** %800
	%801 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %799, i64 0, i32 1
	store i64 4, i64* %801
	%802 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %799, i64 0, i32 2
	store i64 4, i64* %802
	%803 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 1
	%804 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %803, i64 0, i32 0
	store %..string* %773, %..string** %804
	%805 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %803, i64 0, i32 1
	store i64 4, i64* %805
	%806 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %803, i64 0, i32 2
	store i64 4, i64* %806
	%807 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %766, i64 0, i32 2
	%808 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %807, i64 0, i32 0
	store i64* %774, i64** %808
	%809 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %807, i64 0, i32 1
	store i64 4, i64* %809
	%810 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %807, i64 0, i32 2
	store i64 4, i64* %810
	%811 = getelementptr inbounds %Type_Info, %Type_Info* %764, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %811
	%812 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%813 = bitcast %Type_Info* %812 to %Type_Info.Pointer*
	%814 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%815 = bitcast %Type_Info* %814 to %Type_Info*
	%816 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %813, i64 0, i32 0
	store %Type_Info* %815, %Type_Info** %816
	%817 = getelementptr inbounds %Type_Info, %Type_Info* %812, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %817
	%818 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	; Type_Info_Named
	%819 = bitcast %Type_Info* %818 to %Type_Info.Named*
	%820 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%821 = bitcast %Type_Info* %820 to %Type_Info*
	%822 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %819, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$293, i64 0, i32 0), i64 5}, %..string* %822
	%823 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %819, i64 0, i32 1
	store %Type_Info* %821, %Type_Info** %823
	%824 = getelementptr inbounds %Type_Info, %Type_Info* %818, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %824
	%825 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	; Type_Info_Struct
	%826 = bitcast %Type_Info* %825 to %Type_Info.Struct*
	%827 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %826, i64 0, i32 0
	%828 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 3
	store i64 96, i64* %828
	%829 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 4
	store i64 8, i64* %829
	%830 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 5
	store i1 false, i1* %830
	%831 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 6
	store i1 true, i1* %831
	%832 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 7
	store i1 false, i1* %832
	%833 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 43
	%834 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 43
	%835 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 23
	%836 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%837 = bitcast %Type_Info* %836 to %Type_Info*
	%838 = getelementptr inbounds %Type_Info*, %Type_Info** %833, i64 0
	%839 = getelementptr inbounds i64, i64* %835, i64 0
	%840 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	store %Type_Info* %840, %Type_Info** %838
	%841 = getelementptr inbounds %..string, %..string* %834, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$294, i64 0, i32 0), i64 6}, %..string* %841
	store i64 0, i64* %839
	%842 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 0
	%843 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %842, i64 0, i32 0
	store %Type_Info** %833, %Type_Info*** %843
	%844 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %842, i64 0, i32 1
	store i64 1, i64* %844
	%845 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %842, i64 0, i32 2
	store i64 1, i64* %845
	%846 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 1
	%847 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %846, i64 0, i32 0
	store %..string* %834, %..string** %847
	%848 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %846, i64 0, i32 1
	store i64 1, i64* %848
	%849 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %846, i64 0, i32 2
	store i64 1, i64* %849
	%850 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %827, i64 0, i32 2
	%851 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %850, i64 0, i32 0
	store i64* %835, i64** %851
	%852 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %850, i64 0, i32 1
	store i64 1, i64* %852
	%853 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %850, i64 0, i32 2
	store i64 1, i64* %853
	%854 = getelementptr inbounds %Type_Info, %Type_Info* %825, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %854
	%855 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	; Type_Info_Named
	%856 = bitcast %Type_Info* %855 to %Type_Info.Named*
	%857 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	%858 = bitcast %Type_Info* %857 to %Type_Info*
	%859 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %856, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$295, i64 0, i32 0), i64 16}, %..string* %859
	%860 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %856, i64 0, i32 1
	store %Type_Info* %858, %Type_Info** %860
	%861 = getelementptr inbounds %Type_Info, %Type_Info* %855, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %861
	%862 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 36
	; Type_Info_Struct
	%863 = bitcast %Type_Info* %862 to %Type_Info.Struct*
	%864 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %863, i64 0, i32 0
	%865 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 3
	store i64 96, i64* %865
	%866 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 4
	store i64 8, i64* %866
	%867 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 5
	store i1 false, i1* %867
	%868 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 6
	store i1 true, i1* %868
	%869 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 7
	store i1 false, i1* %869
	%870 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 44
	%871 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 44
	%872 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 24
	%873 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%874 = bitcast %Type_Info* %873 to %Type_Info*
	%875 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 0
	%876 = getelementptr inbounds i64, i64* %872, i64 0
	%877 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %877, %Type_Info** %875
	%878 = getelementptr inbounds %..string, %..string* %871, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$296, i64 0, i32 0), i64 5}, %..string* %878
	store i64 0, i64* %876
	%879 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%880 = bitcast %Type_Info* %879 to %Type_Info*
	%881 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 1
	%882 = getelementptr inbounds i64, i64* %872, i64 1
	%883 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	store %Type_Info* %883, %Type_Info** %881
	%884 = getelementptr inbounds %..string, %..string* %871, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$297, i64 0, i32 0), i64 5}, %..string* %884
	store i64 24, i64* %882
	%885 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%886 = bitcast %Type_Info* %885 to %Type_Info*
	%887 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 2
	%888 = getelementptr inbounds i64, i64* %872, i64 2
	%889 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	store %Type_Info* %889, %Type_Info** %887
	%890 = getelementptr inbounds %..string, %..string* %871, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$298, i64 0, i32 0), i64 7}, %..string* %890
	store i64 48, i64* %888
	%891 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%892 = bitcast %Type_Info* %891 to %Type_Info*
	%893 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 3
	%894 = getelementptr inbounds i64, i64* %872, i64 3
	%895 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %895, %Type_Info** %893
	%896 = getelementptr inbounds %..string, %..string* %871, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$299, i64 0, i32 0), i64 4}, %..string* %896
	store i64 72, i64* %894
	%897 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%898 = bitcast %Type_Info* %897 to %Type_Info*
	%899 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 4
	%900 = getelementptr inbounds i64, i64* %872, i64 4
	%901 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %901, %Type_Info** %899
	%902 = getelementptr inbounds %..string, %..string* %871, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$29a, i64 0, i32 0), i64 5}, %..string* %902
	store i64 80, i64* %900
	%903 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%904 = bitcast %Type_Info* %903 to %Type_Info*
	%905 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 5
	%906 = getelementptr inbounds i64, i64* %872, i64 5
	%907 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %907, %Type_Info** %905
	%908 = getelementptr inbounds %..string, %..string* %871, i64 5
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$29b, i64 0, i32 0), i64 6}, %..string* %908
	store i64 88, i64* %906
	%909 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%910 = bitcast %Type_Info* %909 to %Type_Info*
	%911 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 6
	%912 = getelementptr inbounds i64, i64* %872, i64 6
	%913 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %913, %Type_Info** %911
	%914 = getelementptr inbounds %..string, %..string* %871, i64 6
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$29c, i64 0, i32 0), i64 7}, %..string* %914
	store i64 89, i64* %912
	%915 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	%916 = bitcast %Type_Info* %915 to %Type_Info*
	%917 = getelementptr inbounds %Type_Info*, %Type_Info** %870, i64 7
	%918 = getelementptr inbounds i64, i64* %872, i64 7
	%919 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %919, %Type_Info** %917
	%920 = getelementptr inbounds %..string, %..string* %871, i64 7
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$29d, i64 0, i32 0), i64 12}, %..string* %920
	store i64 90, i64* %918
	%921 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 0
	%922 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %921, i64 0, i32 0
	store %Type_Info** %870, %Type_Info*** %922
	%923 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %921, i64 0, i32 1
	store i64 8, i64* %923
	%924 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %921, i64 0, i32 2
	store i64 8, i64* %924
	%925 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 1
	%926 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %925, i64 0, i32 0
	store %..string* %871, %..string** %926
	%927 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %925, i64 0, i32 1
	store i64 8, i64* %927
	%928 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %925, i64 0, i32 2
	store i64 8, i64* %928
	%929 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %864, i64 0, i32 2
	%930 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %929, i64 0, i32 0
	store i64* %872, i64** %930
	%931 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %929, i64 0, i32 1
	store i64 8, i64* %931
	%932 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %929, i64 0, i32 2
	store i64 8, i64* %932
	%933 = getelementptr inbounds %Type_Info, %Type_Info* %862, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %933
	%934 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%935 = bitcast %Type_Info* %934 to %Type_Info.Slice*
	%936 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%937 = bitcast %Type_Info* %936 to %Type_Info*
	%938 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %935, i64 0, i32 0
	store %Type_Info* %937, %Type_Info** %938
	%939 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %935, i64 0, i32 1
	store i64 8, i64* %939
	%940 = getelementptr inbounds %Type_Info, %Type_Info* %934, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %940
	%941 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%942 = bitcast %Type_Info* %941 to %Type_Info.Pointer*
	%943 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%944 = bitcast %Type_Info* %943 to %Type_Info*
	%945 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %942, i64 0, i32 0
	store %Type_Info* %944, %Type_Info** %945
	%946 = getelementptr inbounds %Type_Info, %Type_Info* %941, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %946
	%947 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%948 = bitcast %Type_Info* %947 to %Type_Info.Pointer*
	%949 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%950 = bitcast %Type_Info* %949 to %Type_Info*
	%951 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %948, i64 0, i32 0
	store %Type_Info* %950, %Type_Info** %951
	%952 = getelementptr inbounds %Type_Info, %Type_Info* %947, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %952
	%953 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	; Type_Info_Slice
	%954 = bitcast %Type_Info* %953 to %Type_Info.Slice*
	%955 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%956 = bitcast %Type_Info* %955 to %Type_Info*
	%957 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %954, i64 0, i32 0
	store %Type_Info* %956, %Type_Info** %957
	%958 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %954, i64 0, i32 1
	store i64 16, i64* %958
	%959 = getelementptr inbounds %Type_Info, %Type_Info* %953, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %959
	%960 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	; Type_Info_Pointer
	%961 = bitcast %Type_Info* %960 to %Type_Info.Pointer*
	%962 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%963 = bitcast %Type_Info* %962 to %Type_Info*
	%964 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %961, i64 0, i32 0
	store %Type_Info* %963, %Type_Info** %964
	%965 = getelementptr inbounds %Type_Info, %Type_Info* %960, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %965
	%966 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	; Type_Info_Slice
	%967 = bitcast %Type_Info* %966 to %Type_Info.Slice*
	%968 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%969 = bitcast %Type_Info* %968 to %Type_Info*
	%970 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %967, i64 0, i32 0
	store %Type_Info* %969, %Type_Info** %970
	%971 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %967, i64 0, i32 1
	store i64 8, i64* %971
	%972 = getelementptr inbounds %Type_Info, %Type_Info* %966, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %972
	%973 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	; Type_Info_Pointer
	%974 = bitcast %Type_Info* %973 to %Type_Info.Pointer*
	%975 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%976 = bitcast %Type_Info* %975 to %Type_Info*
	%977 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %974, i64 0, i32 0
	store %Type_Info* %976, %Type_Info** %977
	%978 = getelementptr inbounds %Type_Info, %Type_Info* %973, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %978
	%979 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	; Type_Info_Named
	%980 = bitcast %Type_Info* %979 to %Type_Info.Named*
	%981 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%982 = bitcast %Type_Info* %981 to %Type_Info*
	%983 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %980, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$29e, i64 0, i32 0), i64 6}, %..string* %983
	%984 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %980, i64 0, i32 1
	store %Type_Info* %982, %Type_Info** %984
	%985 = getelementptr inbounds %Type_Info, %Type_Info* %979, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %985
	%986 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	; Type_Info_Struct
	%987 = bitcast %Type_Info* %986 to %Type_Info.Struct*
	%988 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %987, i64 0, i32 0
	%989 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 3
	store i64 96, i64* %989
	%990 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 4
	store i64 8, i64* %990
	%991 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 5
	store i1 false, i1* %991
	%992 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 6
	store i1 true, i1* %992
	%993 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 7
	store i1 false, i1* %993
	%994 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 52
	%995 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 52
	%996 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 32
	%997 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%998 = bitcast %Type_Info* %997 to %Type_Info*
	%999 = getelementptr inbounds %Type_Info*, %Type_Info** %994, i64 0
	%1000 = getelementptr inbounds i64, i64* %996, i64 0
	%1001 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	store %Type_Info* %1001, %Type_Info** %999
	%1002 = getelementptr inbounds %..string, %..string* %995, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$29f, i64 0, i32 0), i64 6}, %..string* %1002
	store i64 0, i64* %1000
	%1003 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 0
	%1004 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1003, i64 0, i32 0
	store %Type_Info** %994, %Type_Info*** %1004
	%1005 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1003, i64 0, i32 1
	store i64 1, i64* %1005
	%1006 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1003, i64 0, i32 2
	store i64 1, i64* %1006
	%1007 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 1
	%1008 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1007, i64 0, i32 0
	store %..string* %995, %..string** %1008
	%1009 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1007, i64 0, i32 1
	store i64 1, i64* %1009
	%1010 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1007, i64 0, i32 2
	store i64 1, i64* %1010
	%1011 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %988, i64 0, i32 2
	%1012 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1011, i64 0, i32 0
	store i64* %996, i64** %1012
	%1013 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1011, i64 0, i32 1
	store i64 1, i64* %1013
	%1014 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1011, i64 0, i32 2
	store i64 1, i64* %1014
	%1015 = getelementptr inbounds %Type_Info, %Type_Info* %986, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1015
	%1016 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	; Type_Info_Named
	%1017 = bitcast %Type_Info* %1016 to %Type_Info.Named*
	%1018 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	%1019 = bitcast %Type_Info* %1018 to %Type_Info*
	%1020 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1017, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2a0, i64 0, i32 0), i64 9}, %..string* %1020
	%1021 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1017, i64 0, i32 1
	store %Type_Info* %1019, %Type_Info** %1021
	%1022 = getelementptr inbounds %Type_Info, %Type_Info* %1016, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1022
	%1023 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 34
	; Type_Info_Struct
	%1024 = bitcast %Type_Info* %1023 to %Type_Info.Struct*
	%1025 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1024, i64 0, i32 0
	%1026 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 3
	store i64 96, i64* %1026
	%1027 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 4
	store i64 8, i64* %1027
	%1028 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 5
	store i1 false, i1* %1028
	%1029 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 6
	store i1 true, i1* %1029
	%1030 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 7
	store i1 false, i1* %1030
	%1031 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 53
	%1032 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 53
	%1033 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 33
	%1034 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	%1035 = bitcast %Type_Info* %1034 to %Type_Info*
	%1036 = getelementptr inbounds %Type_Info*, %Type_Info** %1031, i64 0
	%1037 = getelementptr inbounds i64, i64* %1033, i64 0
	%1038 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 35
	store %Type_Info* %1038, %Type_Info** %1036
	%1039 = getelementptr inbounds %..string, %..string* %1032, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2a1, i64 0, i32 0), i64 6}, %..string* %1039
	store i64 0, i64* %1037
	%1040 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 0
	%1041 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1040, i64 0, i32 0
	store %Type_Info** %1031, %Type_Info*** %1041
	%1042 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1040, i64 0, i32 1
	store i64 1, i64* %1042
	%1043 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1040, i64 0, i32 2
	store i64 1, i64* %1043
	%1044 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 1
	%1045 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1044, i64 0, i32 0
	store %..string* %1032, %..string** %1045
	%1046 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1044, i64 0, i32 1
	store i64 1, i64* %1046
	%1047 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1044, i64 0, i32 2
	store i64 1, i64* %1047
	%1048 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1025, i64 0, i32 2
	%1049 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1048, i64 0, i32 0
	store i64* %1033, i64** %1049
	%1050 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1048, i64 0, i32 1
	store i64 1, i64* %1050
	%1051 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1048, i64 0, i32 2
	store i64 1, i64* %1051
	%1052 = getelementptr inbounds %Type_Info, %Type_Info* %1023, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1052
	%1053 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	; Type_Info_Named
	%1054 = bitcast %Type_Info* %1053 to %Type_Info.Named*
	%1055 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	%1056 = bitcast %Type_Info* %1055 to %Type_Info*
	%1057 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1054, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a2, i64 0, i32 0), i64 5}, %..string* %1057
	%1058 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1054, i64 0, i32 1
	store %Type_Info* %1056, %Type_Info** %1058
	%1059 = getelementptr inbounds %Type_Info, %Type_Info* %1053, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1059
	%1060 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 46
	; Type_Info_Struct
	%1061 = bitcast %Type_Info* %1060 to %Type_Info.Struct*
	%1062 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1061, i64 0, i32 0
	%1063 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 3
	store i64 136, i64* %1063
	%1064 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 4
	store i64 8, i64* %1064
	%1065 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 5
	store i1 false, i1* %1065
	%1066 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 6
	store i1 true, i1* %1066
	%1067 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 7
	store i1 false, i1* %1067
	%1068 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 54
	%1069 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 54
	%1070 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 34
	%1071 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	%1072 = bitcast %Type_Info* %1071 to %Type_Info*
	%1073 = getelementptr inbounds %Type_Info*, %Type_Info** %1068, i64 0
	%1074 = getelementptr inbounds i64, i64* %1070, i64 0
	%1075 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	store %Type_Info* %1075, %Type_Info** %1073
	%1076 = getelementptr inbounds %..string, %..string* %1069, i64 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2a3, i64 0, i32 0), i64 13}, %..string* %1076
	store i64 0, i64* %1074
	%1077 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1078 = bitcast %Type_Info* %1077 to %Type_Info*
	%1079 = getelementptr inbounds %Type_Info*, %Type_Info** %1068, i64 1
	%1080 = getelementptr inbounds i64, i64* %1070, i64 1
	%1081 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	store %Type_Info* %1081, %Type_Info** %1079
	%1082 = getelementptr inbounds %..string, %..string* %1069, i64 1
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2a4, i64 0, i32 0), i64 13}, %..string* %1082
	store i64 72, i64* %1080
	%1083 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1084 = bitcast %Type_Info* %1083 to %Type_Info*
	%1085 = getelementptr inbounds %Type_Info*, %Type_Info** %1068, i64 2
	%1086 = getelementptr inbounds i64, i64* %1070, i64 2
	%1087 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %1087, %Type_Info** %1085
	%1088 = getelementptr inbounds %..string, %..string* %1069, i64 2
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2a5, i64 0, i32 0), i64 13}, %..string* %1088
	store i64 96, i64* %1086
	%1089 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1090 = bitcast %Type_Info* %1089 to %Type_Info*
	%1091 = getelementptr inbounds %Type_Info*, %Type_Info** %1068, i64 3
	%1092 = getelementptr inbounds i64, i64* %1070, i64 3
	%1093 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %1093, %Type_Info** %1091
	%1094 = getelementptr inbounds %..string, %..string* %1069, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2a6, i64 0, i32 0), i64 4}, %..string* %1094
	store i64 120, i64* %1092
	%1095 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1096 = bitcast %Type_Info* %1095 to %Type_Info*
	%1097 = getelementptr inbounds %Type_Info*, %Type_Info** %1068, i64 4
	%1098 = getelementptr inbounds i64, i64* %1070, i64 4
	%1099 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %1099, %Type_Info** %1097
	%1100 = getelementptr inbounds %..string, %..string* %1069, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a7, i64 0, i32 0), i64 5}, %..string* %1100
	store i64 128, i64* %1098
	%1101 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 0
	%1102 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1101, i64 0, i32 0
	store %Type_Info** %1068, %Type_Info*** %1102
	%1103 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1101, i64 0, i32 1
	store i64 5, i64* %1103
	%1104 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1101, i64 0, i32 2
	store i64 5, i64* %1104
	%1105 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 1
	%1106 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1105, i64 0, i32 0
	store %..string* %1069, %..string** %1106
	%1107 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1105, i64 0, i32 1
	store i64 5, i64* %1107
	%1108 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1105, i64 0, i32 2
	store i64 5, i64* %1108
	%1109 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1062, i64 0, i32 2
	%1110 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1109, i64 0, i32 0
	store i64* %1070, i64** %1110
	%1111 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1109, i64 0, i32 1
	store i64 5, i64* %1111
	%1112 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1109, i64 0, i32 2
	store i64 5, i64* %1112
	%1113 = getelementptr inbounds %Type_Info, %Type_Info* %1060, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1113
	%1114 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 47
	; Type_Info_Struct
	%1115 = bitcast %Type_Info* %1114 to %Type_Info.Struct*
	%1116 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1115, i64 0, i32 0
	%1117 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 3
	store i64 72, i64* %1117
	%1118 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 4
	store i64 8, i64* %1118
	%1119 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 5
	store i1 false, i1* %1119
	%1120 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 6
	store i1 false, i1* %1120
	%1121 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 7
	store i1 false, i1* %1121
	%1122 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 59
	%1123 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 59
	%1124 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 39
	%1125 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	%1126 = bitcast %Type_Info* %1125 to %Type_Info*
	%1127 = getelementptr inbounds %Type_Info*, %Type_Info** %1122, i64 0
	%1128 = getelementptr inbounds i64, i64* %1124, i64 0
	%1129 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	store %Type_Info* %1129, %Type_Info** %1127
	%1130 = getelementptr inbounds %..string, %..string* %1123, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a8, i64 0, i32 0), i64 5}, %..string* %1130
	store i64 0, i64* %1128
	%1131 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1132 = bitcast %Type_Info* %1131 to %Type_Info*
	%1133 = getelementptr inbounds %Type_Info*, %Type_Info** %1122, i64 1
	%1134 = getelementptr inbounds i64, i64* %1124, i64 1
	%1135 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	store %Type_Info* %1135, %Type_Info** %1133
	%1136 = getelementptr inbounds %..string, %..string* %1123, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2a9, i64 0, i32 0), i64 5}, %..string* %1136
	store i64 24, i64* %1134
	%1137 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	%1138 = bitcast %Type_Info* %1137 to %Type_Info*
	%1139 = getelementptr inbounds %Type_Info*, %Type_Info** %1122, i64 2
	%1140 = getelementptr inbounds i64, i64* %1124, i64 2
	%1141 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	store %Type_Info* %1141, %Type_Info** %1139
	%1142 = getelementptr inbounds %..string, %..string* %1123, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2aa, i64 0, i32 0), i64 7}, %..string* %1142
	store i64 48, i64* %1140
	%1143 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 0
	%1144 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1143, i64 0, i32 0
	store %Type_Info** %1122, %Type_Info*** %1144
	%1145 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1143, i64 0, i32 1
	store i64 3, i64* %1145
	%1146 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1143, i64 0, i32 2
	store i64 3, i64* %1146
	%1147 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 1
	%1148 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1147, i64 0, i32 0
	store %..string* %1123, %..string** %1148
	%1149 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1147, i64 0, i32 1
	store i64 3, i64* %1149
	%1150 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1147, i64 0, i32 2
	store i64 3, i64* %1150
	%1151 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1116, i64 0, i32 2
	%1152 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1151, i64 0, i32 0
	store i64* %1124, i64** %1152
	%1153 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1151, i64 0, i32 1
	store i64 3, i64* %1153
	%1154 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1151, i64 0, i32 2
	store i64 3, i64* %1154
	%1155 = getelementptr inbounds %Type_Info, %Type_Info* %1114, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1155
	%1156 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%1157 = bitcast %Type_Info* %1156 to %Type_Info.Slice*
	%1158 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1159 = bitcast %Type_Info* %1158 to %Type_Info*
	%1160 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1157, i64 0, i32 0
	store %Type_Info* %1159, %Type_Info** %1160
	%1161 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1157, i64 0, i32 1
	store i64 8, i64* %1161
	%1162 = getelementptr inbounds %Type_Info, %Type_Info* %1156, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1162
	%1163 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1164 = bitcast %Type_Info* %1163 to %Type_Info.Pointer*
	%1165 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1166 = bitcast %Type_Info* %1165 to %Type_Info*
	%1167 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1164, i64 0, i32 0
	store %Type_Info* %1166, %Type_Info** %1167
	%1168 = getelementptr inbounds %Type_Info, %Type_Info* %1163, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1168
	%1169 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%1170 = bitcast %Type_Info* %1169 to %Type_Info.Pointer*
	%1171 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1172 = bitcast %Type_Info* %1171 to %Type_Info*
	%1173 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1170, i64 0, i32 0
	store %Type_Info* %1172, %Type_Info** %1173
	%1174 = getelementptr inbounds %Type_Info, %Type_Info* %1169, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1174
	%1175 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	; Type_Info_Slice
	%1176 = bitcast %Type_Info* %1175 to %Type_Info.Slice*
	%1177 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1178 = bitcast %Type_Info* %1177 to %Type_Info*
	%1179 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1176, i64 0, i32 0
	store %Type_Info* %1178, %Type_Info** %1179
	%1180 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1176, i64 0, i32 1
	store i64 16, i64* %1180
	%1181 = getelementptr inbounds %Type_Info, %Type_Info* %1175, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1181
	%1182 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	; Type_Info_Pointer
	%1183 = bitcast %Type_Info* %1182 to %Type_Info.Pointer*
	%1184 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1185 = bitcast %Type_Info* %1184 to %Type_Info*
	%1186 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1183, i64 0, i32 0
	store %Type_Info* %1185, %Type_Info** %1186
	%1187 = getelementptr inbounds %Type_Info, %Type_Info* %1182, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1187
	%1188 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 41
	; Type_Info_Slice
	%1189 = bitcast %Type_Info* %1188 to %Type_Info.Slice*
	%1190 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1191 = bitcast %Type_Info* %1190 to %Type_Info*
	%1192 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1189, i64 0, i32 0
	store %Type_Info* %1191, %Type_Info** %1192
	%1193 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1189, i64 0, i32 1
	store i64 8, i64* %1193
	%1194 = getelementptr inbounds %Type_Info, %Type_Info* %1188, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1194
	%1195 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 42
	; Type_Info_Pointer
	%1196 = bitcast %Type_Info* %1195 to %Type_Info.Pointer*
	%1197 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1198 = bitcast %Type_Info* %1197 to %Type_Info*
	%1199 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1196, i64 0, i32 0
	store %Type_Info* %1198, %Type_Info** %1199
	%1200 = getelementptr inbounds %Type_Info, %Type_Info* %1195, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1200
	%1201 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	; Type_Info_Slice
	%1202 = bitcast %Type_Info* %1201 to %Type_Info.Slice*
	%1203 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1204 = bitcast %Type_Info* %1203 to %Type_Info*
	%1205 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1202, i64 0, i32 0
	store %Type_Info* %1204, %Type_Info** %1205
	%1206 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1202, i64 0, i32 1
	store i64 16, i64* %1206
	%1207 = getelementptr inbounds %Type_Info, %Type_Info* %1201, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1207
	%1208 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	; Type_Info_Pointer
	%1209 = bitcast %Type_Info* %1208 to %Type_Info.Pointer*
	%1210 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1211 = bitcast %Type_Info* %1210 to %Type_Info*
	%1212 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1209, i64 0, i32 0
	store %Type_Info* %1211, %Type_Info** %1212
	%1213 = getelementptr inbounds %Type_Info, %Type_Info* %1208, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1213
	%1214 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 37
	; Type_Info_Slice
	%1215 = bitcast %Type_Info* %1214 to %Type_Info.Slice*
	%1216 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1217 = bitcast %Type_Info* %1216 to %Type_Info*
	%1218 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1215, i64 0, i32 0
	store %Type_Info* %1217, %Type_Info** %1218
	%1219 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1215, i64 0, i32 1
	store i64 8, i64* %1219
	%1220 = getelementptr inbounds %Type_Info, %Type_Info* %1214, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1220
	%1221 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1222 = bitcast %Type_Info* %1221 to %Type_Info.Pointer*
	%1223 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1224 = bitcast %Type_Info* %1223 to %Type_Info*
	%1225 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1222, i64 0, i32 0
	store %Type_Info* %1224, %Type_Info** %1225
	%1226 = getelementptr inbounds %Type_Info, %Type_Info* %1221, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1226
	%1227 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 38
	; Type_Info_Pointer
	%1228 = bitcast %Type_Info* %1227 to %Type_Info.Pointer*
	%1229 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1230 = bitcast %Type_Info* %1229 to %Type_Info*
	%1231 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1228, i64 0, i32 0
	store %Type_Info* %1230, %Type_Info** %1231
	%1232 = getelementptr inbounds %Type_Info, %Type_Info* %1227, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1232
	%1233 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	; Type_Info_Named
	%1234 = bitcast %Type_Info* %1233 to %Type_Info.Named*
	%1235 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	%1236 = bitcast %Type_Info* %1235 to %Type_Info*
	%1237 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1234, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2ab, i64 0, i32 0), i64 4}, %..string* %1237
	%1238 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1234, i64 0, i32 1
	store %Type_Info* %1236, %Type_Info** %1238
	%1239 = getelementptr inbounds %Type_Info, %Type_Info* %1233, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1239
	%1240 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 49
	; Type_Info_Struct
	%1241 = bitcast %Type_Info* %1240 to %Type_Info.Struct*
	%1242 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1241, i64 0, i32 0
	%1243 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 3
	store i64 56, i64* %1243
	%1244 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 4
	store i64 8, i64* %1244
	%1245 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 5
	store i1 false, i1* %1245
	%1246 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 6
	store i1 true, i1* %1246
	%1247 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 7
	store i1 false, i1* %1247
	%1248 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 62
	%1249 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 62
	%1250 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 42
	%1251 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1252 = bitcast %Type_Info* %1251 to %Type_Info*
	%1253 = getelementptr inbounds %Type_Info*, %Type_Info** %1248, i64 0
	%1254 = getelementptr inbounds i64, i64* %1250, i64 0
	%1255 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1255, %Type_Info** %1253
	%1256 = getelementptr inbounds %..string, %..string* %1249, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2ac, i64 0, i32 0), i64 4}, %..string* %1256
	store i64 0, i64* %1254
	%1257 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	%1258 = bitcast %Type_Info* %1257 to %Type_Info*
	%1259 = getelementptr inbounds %Type_Info*, %Type_Info** %1248, i64 1
	%1260 = getelementptr inbounds i64, i64* %1250, i64 1
	%1261 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	store %Type_Info* %1261, %Type_Info** %1259
	%1262 = getelementptr inbounds %..string, %..string* %1249, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2ad, i64 0, i32 0), i64 5}, %..string* %1262
	store i64 8, i64* %1260
	%1263 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	%1264 = bitcast %Type_Info* %1263 to %Type_Info*
	%1265 = getelementptr inbounds %Type_Info*, %Type_Info** %1248, i64 2
	%1266 = getelementptr inbounds i64, i64* %1250, i64 2
	%1267 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	store %Type_Info* %1267, %Type_Info** %1265
	%1268 = getelementptr inbounds %..string, %..string* %1249, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2ae, i64 0, i32 0), i64 6}, %..string* %1268
	store i64 32, i64* %1266
	%1269 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 0
	%1270 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1269, i64 0, i32 0
	store %Type_Info** %1248, %Type_Info*** %1270
	%1271 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1269, i64 0, i32 1
	store i64 3, i64* %1271
	%1272 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1269, i64 0, i32 2
	store i64 3, i64* %1272
	%1273 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 1
	%1274 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1273, i64 0, i32 0
	store %..string* %1249, %..string** %1274
	%1275 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1273, i64 0, i32 1
	store i64 3, i64* %1275
	%1276 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1273, i64 0, i32 2
	store i64 3, i64* %1276
	%1277 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1242, i64 0, i32 2
	%1278 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1277, i64 0, i32 0
	store i64* %1250, i64** %1278
	%1279 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1277, i64 0, i32 1
	store i64 3, i64* %1279
	%1280 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1277, i64 0, i32 2
	store i64 3, i64* %1280
	%1281 = getelementptr inbounds %Type_Info, %Type_Info* %1240, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1281
	%1282 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1283 = bitcast %Type_Info* %1282 to %Type_Info.Pointer*
	%1284 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1285 = bitcast %Type_Info* %1284 to %Type_Info*
	%1286 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1283, i64 0, i32 0
	store %Type_Info* %1285, %Type_Info** %1286
	%1287 = getelementptr inbounds %Type_Info, %Type_Info* %1282, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1287
	%1288 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 39
	; Type_Info_Slice
	%1289 = bitcast %Type_Info* %1288 to %Type_Info.Slice*
	%1290 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1291 = bitcast %Type_Info* %1290 to %Type_Info*
	%1292 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1289, i64 0, i32 0
	store %Type_Info* %1291, %Type_Info** %1292
	%1293 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1289, i64 0, i32 1
	store i64 16, i64* %1293
	%1294 = getelementptr inbounds %Type_Info, %Type_Info* %1288, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1294
	%1295 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 40
	; Type_Info_Pointer
	%1296 = bitcast %Type_Info* %1295 to %Type_Info.Pointer*
	%1297 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 2
	%1298 = bitcast %Type_Info* %1297 to %Type_Info*
	%1299 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1296, i64 0, i32 0
	store %Type_Info* %1298, %Type_Info** %1299
	%1300 = getelementptr inbounds %Type_Info, %Type_Info* %1295, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1300
	%1301 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 50
	; Type_Info_Slice
	%1302 = bitcast %Type_Info* %1301 to %Type_Info.Slice*
	%1303 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	%1304 = bitcast %Type_Info* %1303 to %Type_Info*
	%1305 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1302, i64 0, i32 0
	store %Type_Info* %1304, %Type_Info** %1305
	%1306 = getelementptr inbounds %Type_Info.Slice, %Type_Info.Slice* %1302, i64 0, i32 1
	store i64 8, i64* %1306
	%1307 = getelementptr inbounds %Type_Info, %Type_Info* %1301, i64 0, i32 2 ; UnionTagPtr
	store i64 13, i64* %1307
	%1308 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	; Type_Info_Named
	%1309 = bitcast %Type_Info* %1308 to %Type_Info.Named*
	%1310 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	%1311 = bitcast %Type_Info* %1310 to %Type_Info*
	%1312 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1309, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.__str$2af, i64 0, i32 0), i64 20}, %..string* %1312
	%1313 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1309, i64 0, i32 1
	store %Type_Info* %1311, %Type_Info** %1313
	%1314 = getelementptr inbounds %Type_Info, %Type_Info* %1308, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1314
	%1315 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 52
	; Type_Info_RawUnion
	%1316 = bitcast %Type_Info* %1315 to %Type_Info.Raw_Union*
	%1317 = getelementptr inbounds %Type_Info.Raw_Union, %Type_Info.Raw_Union* %1316, i64 0, i32 0
	%1318 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1317, i64 0, i32 3
	store i64 8, i64* %1318
	%1319 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1317, i64 0, i32 4
	store i64 8, i64* %1319
	%1320 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 65
	%1321 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 65
	%1322 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 45
	%1323 = getelementptr inbounds %Type_Info*, %Type_Info** %1320, i64 0
	%1324 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	store %Type_Info* %1324, %Type_Info** %1323
	%1325 = getelementptr inbounds %..string, %..string* %1321, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2b0, i64 0, i32 0), i64 1}, %..string* %1325
	%1326 = getelementptr inbounds %Type_Info*, %Type_Info** %1320, i64 1
	%1327 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	store %Type_Info* %1327, %Type_Info** %1326
	%1328 = getelementptr inbounds %..string, %..string* %1321, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2b1, i64 0, i32 0), i64 1}, %..string* %1328
	%1329 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1317, i64 0, i32 0
	%1330 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1329, i64 0, i32 0
	store %Type_Info** %1320, %Type_Info*** %1330
	%1331 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1329, i64 0, i32 1
	store i64 2, i64* %1331
	%1332 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1329, i64 0, i32 2
	store i64 2, i64* %1332
	%1333 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1317, i64 0, i32 1
	%1334 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1333, i64 0, i32 0
	store %..string* %1321, %..string** %1334
	%1335 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1333, i64 0, i32 1
	store i64 2, i64* %1335
	%1336 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1333, i64 0, i32 2
	store i64 2, i64* %1336
	%1337 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1317, i64 0, i32 2
	%1338 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1337, i64 0, i32 0
	store i64* %1322, i64** %1338
	%1339 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1337, i64 0, i32 1
	store i64 2, i64* %1339
	%1340 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1337, i64 0, i32 2
	store i64 2, i64* %1340
	%1341 = getelementptr inbounds %Type_Info, %Type_Info* %1315, i64 0, i32 2 ; UnionTagPtr
	store i64 17, i64* %1341
	%1342 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 53
	; Type_Info_Basic
	%1343 = bitcast %Type_Info* %1342 to %Type_Info.Float*
	%1344 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %1343, i64 0, i32 0
	store i64 8, i64* %1344
	%1345 = getelementptr inbounds %Type_Info, %Type_Info* %1342, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %1345
	%1346 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 54
	; Type_Info_Basic
	%1347 = bitcast %Type_Info* %1346 to %Type_Info.Integer*
	%1348 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1347, i64 0, i32 0
	store i64 8, i64* %1348
	%1349 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1347, i64 0, i32 1
	store i1 true, i1* %1349
	%1350 = getelementptr inbounds %Type_Info, %Type_Info* %1346, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1350
	%1351 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 55
	; Type_Info_Pointer
	%1352 = bitcast %Type_Info* %1351 to %Type_Info.Pointer*
	%1353 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 51
	%1354 = bitcast %Type_Info* %1353 to %Type_Info*
	%1355 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1352, i64 0, i32 0
	store %Type_Info* %1354, %Type_Info** %1355
	%1356 = getelementptr inbounds %Type_Info, %Type_Info* %1351, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1356
	%1357 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	; Type_Info_Named
	%1358 = bitcast %Type_Info* %1357 to %Type_Info.Named*
	%1359 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	%1360 = bitcast %Type_Info* %1359 to %Type_Info*
	%1361 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1358, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2b2, i64 0, i32 0), i64 3}, %..string* %1361
	%1362 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1358, i64 0, i32 1
	store %Type_Info* %1360, %Type_Info** %1362
	%1363 = getelementptr inbounds %Type_Info, %Type_Info* %1357, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1363
	%1364 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 57
	; Type_Info_Struct
	%1365 = bitcast %Type_Info* %1364 to %Type_Info.Struct*
	%1366 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1365, i64 0, i32 0
	%1367 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 3
	store i64 32, i64* %1367
	%1368 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 4
	store i64 8, i64* %1368
	%1369 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 5
	store i1 false, i1* %1369
	%1370 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 6
	store i1 true, i1* %1370
	%1371 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 7
	store i1 false, i1* %1371
	%1372 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 67
	%1373 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 67
	%1374 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 47
	%1375 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1376 = bitcast %Type_Info* %1375 to %Type_Info*
	%1377 = getelementptr inbounds %Type_Info*, %Type_Info** %1372, i64 0
	%1378 = getelementptr inbounds i64, i64* %1374, i64 0
	%1379 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1379, %Type_Info** %1377
	%1380 = getelementptr inbounds %..string, %..string* %1373, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2b3, i64 0, i32 0), i64 3}, %..string* %1380
	store i64 0, i64* %1378
	%1381 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1382 = bitcast %Type_Info* %1381 to %Type_Info*
	%1383 = getelementptr inbounds %Type_Info*, %Type_Info** %1372, i64 1
	%1384 = getelementptr inbounds i64, i64* %1374, i64 1
	%1385 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1385, %Type_Info** %1383
	%1386 = getelementptr inbounds %..string, %..string* %1373, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2b4, i64 0, i32 0), i64 5}, %..string* %1386
	store i64 8, i64* %1384
	%1387 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	%1388 = bitcast %Type_Info* %1387 to %Type_Info*
	%1389 = getelementptr inbounds %Type_Info*, %Type_Info** %1372, i64 2
	%1390 = getelementptr inbounds i64, i64* %1374, i64 2
	%1391 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	store %Type_Info* %1391, %Type_Info** %1389
	%1392 = getelementptr inbounds %..string, %..string* %1373, i64 2
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.__str$2b5, i64 0, i32 0), i64 16}, %..string* %1392
	store i64 16, i64* %1390
	%1393 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%1394 = bitcast %Type_Info* %1393 to %Type_Info*
	%1395 = getelementptr inbounds %Type_Info*, %Type_Info** %1372, i64 3
	%1396 = getelementptr inbounds i64, i64* %1374, i64 3
	%1397 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	store %Type_Info* %1397, %Type_Info** %1395
	%1398 = getelementptr inbounds %..string, %..string* %1373, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2b6, i64 0, i32 0), i64 5}, %..string* %1398
	store i64 24, i64* %1396
	%1399 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 0
	%1400 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1399, i64 0, i32 0
	store %Type_Info** %1372, %Type_Info*** %1400
	%1401 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1399, i64 0, i32 1
	store i64 4, i64* %1401
	%1402 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1399, i64 0, i32 2
	store i64 4, i64* %1402
	%1403 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 1
	%1404 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1403, i64 0, i32 0
	store %..string* %1373, %..string** %1404
	%1405 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1403, i64 0, i32 1
	store i64 4, i64* %1405
	%1406 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1403, i64 0, i32 2
	store i64 4, i64* %1406
	%1407 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1366, i64 0, i32 2
	%1408 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1407, i64 0, i32 0
	store i64* %1374, i64** %1408
	%1409 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1407, i64 0, i32 1
	store i64 4, i64* %1409
	%1410 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1407, i64 0, i32 2
	store i64 4, i64* %1410
	%1411 = getelementptr inbounds %Type_Info, %Type_Info* %1364, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1411
	%1412 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1413 = bitcast %Type_Info* %1412 to %Type_Info.Pointer*
	%1414 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1415 = bitcast %Type_Info* %1414 to %Type_Info*
	%1416 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1413, i64 0, i32 0
	store %Type_Info* %1415, %Type_Info** %1416
	%1417 = getelementptr inbounds %Type_Info, %Type_Info* %1412, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1417
	%1418 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1419 = bitcast %Type_Info* %1418 to %Type_Info.Pointer*
	%1420 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1421 = bitcast %Type_Info* %1420 to %Type_Info*
	%1422 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1419, i64 0, i32 0
	store %Type_Info* %1421, %Type_Info** %1422
	%1423 = getelementptr inbounds %Type_Info, %Type_Info* %1418, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1423
	%1424 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1425 = bitcast %Type_Info* %1424 to %Type_Info.Pointer*
	%1426 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1427 = bitcast %Type_Info* %1426 to %Type_Info*
	%1428 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1425, i64 0, i32 0
	store %Type_Info* %1427, %Type_Info** %1428
	%1429 = getelementptr inbounds %Type_Info, %Type_Info* %1424, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1429
	%1430 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1431 = bitcast %Type_Info* %1430 to %Type_Info.Pointer*
	%1432 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1433 = bitcast %Type_Info* %1432 to %Type_Info*
	%1434 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1431, i64 0, i32 0
	store %Type_Info* %1433, %Type_Info** %1434
	%1435 = getelementptr inbounds %Type_Info, %Type_Info* %1430, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1435
	%1436 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	; Type_Info_Basic
	%1437 = bitcast %Type_Info* %1436 to %Type_Info.Integer*
	%1438 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1437, i64 0, i32 0
	store i64 4, i64* %1438
	%1439 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1437, i64 0, i32 1
	store i1 true, i1* %1439
	%1440 = getelementptr inbounds %Type_Info, %Type_Info* %1436, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1440
	%1441 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	; Type_Info_Named
	%1442 = bitcast %Type_Info* %1441 to %Type_Info.Named*
	%1443 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 60
	%1444 = bitcast %Type_Info* %1443 to %Type_Info*
	%1445 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1442, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$2b7, i64 0, i32 0), i64 11}, %..string* %1445
	%1446 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1442, i64 0, i32 1
	store %Type_Info* %1444, %Type_Info** %1446
	%1447 = getelementptr inbounds %Type_Info, %Type_Info* %1441, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1447
	%1448 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 60
	; Type_Info_Enum
	%1449 = bitcast %Type_Info* %1448 to %Type_Info.Enum*
	%1450 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%1451 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1449, i64 0, i32 0
	store %Type_Info* %1450, %Type_Info** %1451
	%1452 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 0
	%1453 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 0
	%1454 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1453 to i64*
	store i64 33350, i64* %1454
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2b8, i64 0, i32 0), i64 3}, %..string* %1452
	%1455 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 1
	%1456 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 1
	%1457 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1456 to i64*
	store i64 33351, i64* %1457
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$2b9, i64 0, i32 0), i64 12}, %..string* %1455
	%1458 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 2
	%1459 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 2
	%1460 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1459 to i64*
	store i64 33352, i64* %1460
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$2ba, i64 0, i32 0), i64 14}, %..string* %1458
	%1461 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 3
	%1462 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 3
	%1463 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1462 to i64*
	store i64 33353, i64* %1463
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$2bb, i64 0, i32 0), i64 10}, %..string* %1461
	%1464 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 4
	%1465 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 4
	%1466 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1465 to i64*
	store i64 33354, i64* %1466
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$2bc, i64 0, i32 0), i64 11}, %..string* %1464
	%1467 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 5
	%1468 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 5
	%1469 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1468 to i64*
	store i64 33355, i64* %1469
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2bd, i64 0, i32 0), i64 5}, %..string* %1467
	%1470 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 6
	%1471 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 6
	%1472 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1471 to i64*
	store i64 4352, i64* %1472
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2be, i64 0, i32 0), i64 8}, %..string* %1470
	%1473 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1449, i64 0, i32 1
	%1474 = getelementptr inbounds [7 x %..string], [7 x %..string]* @.__$enum_names-3c, i64 0, i32 0
	%1475 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1473, i64 0, i32 0
	store %..string* %1474, %..string** %1475
	%1476 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1473, i64 0, i32 1
	store i64 7, i64* %1476
	%1477 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1449, i64 0, i32 2
	%1478 = getelementptr inbounds [7 x {[0 x <8 x i8>], [8 x i8]}], [7 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3c, i64 0, i32 0
	%1479 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1477, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %1478, {[0 x <8 x i8>], [8 x i8]}** %1479
	%1480 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1477, i64 0, i32 1
	store i64 7, i64* %1480
	%1481 = getelementptr inbounds %Type_Info, %Type_Info* %1448, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %1481
	%1482 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	; Type_Info_Named
	%1483 = bitcast %Type_Info* %1482 to %Type_Info.Named*
	%1484 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 62
	%1485 = bitcast %Type_Info* %1484 to %Type_Info*
	%1486 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1483, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2bf, i64 0, i32 0), i64 9}, %..string* %1486
	%1487 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1483, i64 0, i32 1
	store %Type_Info* %1485, %Type_Info** %1487
	%1488 = getelementptr inbounds %Type_Info, %Type_Info* %1482, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1488
	%1489 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 62
	; Type_Info_Enum
	%1490 = bitcast %Type_Info* %1489 to %Type_Info.Enum*
	%1491 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%1492 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1490, i64 0, i32 0
	store %Type_Info* %1491, %Type_Info** %1492
	%1493 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 0
	%1494 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 0
	%1495 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1494 to i64*
	store i64 33356, i64* %1495
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2c0, i64 0, i32 0), i64 5}, %..string* %1493
	%1496 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 1
	%1497 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 1
	%1498 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1497 to i64*
	store i64 33357, i64* %1498
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.__str$2c1, i64 0, i32 0), i64 18}, %..string* %1496
	%1499 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 2
	%1500 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 2
	%1501 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1500 to i64*
	store i64 33358, i64* %1501
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$2c2, i64 0, i32 0), i64 17}, %..string* %1499
	%1502 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 3
	%1503 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 3
	%1504 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1503 to i64*
	store i64 33359, i64* %1504
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$2c3, i64 0, i32 0), i64 11}, %..string* %1502
	%1505 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 4
	%1506 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 4
	%1507 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1506 to i64*
	store i64 33360, i64* %1507
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$2c4, i64 0, i32 0), i64 11}, %..string* %1505
	%1508 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 5
	%1509 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 5
	%1510 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1509 to i64*
	store i64 33384, i64* %1510
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2c5, i64 0, i32 0), i64 6}, %..string* %1508
	%1511 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 6
	%1512 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 6
	%1513 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1512 to i64*
	store i64 33385, i64* %1513
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2c6, i64 0, i32 0), i64 9}, %..string* %1511
	%1514 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 7
	%1515 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 7
	%1516 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1515 to i64*
	store i64 33386, i64* %1516
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2c7, i64 0, i32 0), i64 8}, %..string* %1514
	%1517 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 8
	%1518 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 8
	%1519 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1518 to i64*
	store i64 33361, i64* %1519
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2c8, i64 0, i32 0), i64 5}, %..string* %1517
	%1520 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 9
	%1521 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 9
	%1522 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1521 to i64*
	store i64 4352, i64* %1522
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2c9, i64 0, i32 0), i64 8}, %..string* %1520
	%1523 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1490, i64 0, i32 1
	%1524 = getelementptr inbounds [10 x %..string], [10 x %..string]* @.__$enum_names-3e, i64 0, i32 0
	%1525 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1523, i64 0, i32 0
	store %..string* %1524, %..string** %1525
	%1526 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1523, i64 0, i32 1
	store i64 10, i64* %1526
	%1527 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1490, i64 0, i32 2
	%1528 = getelementptr inbounds [10 x {[0 x <8 x i8>], [8 x i8]}], [10 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-3e, i64 0, i32 0
	%1529 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1527, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %1528, {[0 x <8 x i8>], [8 x i8]}** %1529
	%1530 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1527, i64 0, i32 1
	store i64 10, i64* %1530
	%1531 = getelementptr inbounds %Type_Info, %Type_Info* %1489, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %1531
	%1532 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	; Type_Info_Named
	%1533 = bitcast %Type_Info* %1532 to %Type_Info.Named*
	%1534 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	%1535 = bitcast %Type_Info* %1534 to %Type_Info*
	%1536 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1533, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$2ca, i64 0, i32 0), i64 13}, %..string* %1536
	%1537 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1533, i64 0, i32 1
	store %Type_Info* %1535, %Type_Info** %1537
	%1538 = getelementptr inbounds %Type_Info, %Type_Info* %1532, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1538
	%1539 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 64
	; Type_Info_Enum
	%1540 = bitcast %Type_Info* %1539 to %Type_Info.Enum*
	%1541 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%1542 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1540, i64 0, i32 0
	store %Type_Info* %1541, %Type_Info** %1542
	%1543 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 0
	%1544 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 0
	%1545 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1544 to i64*
	store i64 37190, i64* %1545
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2cb, i64 0, i32 0), i64 4}, %..string* %1543
	%1546 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 1
	%1547 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 1
	%1548 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1547 to i64*
	store i64 37191, i64* %1548
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2cc, i64 0, i32 0), i64 6}, %..string* %1546
	%1549 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 2
	%1550 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 2
	%1551 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1550 to i64*
	store i64 37192, i64* %1551
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2cd, i64 0, i32 0), i64 3}, %..string* %1549
	%1552 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 3
	%1553 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 3
	%1554 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1553 to i64*
	store i64 33387, i64* %1554
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$2ce, i64 0, i32 0), i64 12}, %..string* %1552
	%1555 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 4
	%1556 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 4
	%1557 = bitcast {[0 x <8 x i8>], [8 x i8]}* %1556 to i64*
	store i64 4352, i64* %1557
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2cf, i64 0, i32 0), i64 8}, %..string* %1555
	%1558 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1540, i64 0, i32 1
	%1559 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-40, i64 0, i32 0
	%1560 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1558, i64 0, i32 0
	store %..string* %1559, %..string** %1560
	%1561 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1558, i64 0, i32 1
	store i64 5, i64* %1561
	%1562 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %1540, i64 0, i32 2
	%1563 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-40, i64 0, i32 0
	%1564 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1562, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %1563, {[0 x <8 x i8>], [8 x i8]}** %1564
	%1565 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %1562, i64 0, i32 1
	store i64 5, i64* %1565
	%1566 = getelementptr inbounds %Type_Info, %Type_Info* %1539, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %1566
	%1567 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 65
	; Type_Info_Basic
	%1568 = bitcast %Type_Info* %1567 to %Type_Info.Integer*
	%1569 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1568, i64 0, i32 0
	store i64 8, i64* %1569
	%1570 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1568, i64 0, i32 1
	store i1 false, i1* %1570
	%1571 = getelementptr inbounds %Type_Info, %Type_Info* %1567, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1571
	%1572 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	; Type_Info_Pointer
	%1573 = bitcast %Type_Info* %1572 to %Type_Info.Pointer*
	%1574 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%1575 = bitcast %Type_Info* %1574 to %Type_Info*
	%1576 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1573, i64 0, i32 0
	store %Type_Info* %1575, %Type_Info** %1576
	%1577 = getelementptr inbounds %Type_Info, %Type_Info* %1572, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1577
	%1578 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1579 = bitcast %Type_Info* %1578 to %Type_Info.Pointer*
	%1580 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1581 = bitcast %Type_Info* %1580 to %Type_Info*
	%1582 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1579, i64 0, i32 0
	store %Type_Info* %1581, %Type_Info** %1582
	%1583 = getelementptr inbounds %Type_Info, %Type_Info* %1578, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1583
	%1584 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	; Type_Info_Pointer
	%1585 = bitcast %Type_Info* %1584 to %Type_Info.Pointer*
	%1586 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%1587 = bitcast %Type_Info* %1586 to %Type_Info*
	%1588 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1585, i64 0, i32 0
	store %Type_Info* %1587, %Type_Info** %1588
	%1589 = getelementptr inbounds %Type_Info, %Type_Info* %1584, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1589
	%1590 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 68
	; Type_Info_Basic
	%1591 = bitcast %Type_Info* %1590 to %Type_Info.Integer*
	%1592 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1591, i64 0, i32 0
	store i64 1, i64* %1592
	%1593 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1591, i64 0, i32 1
	store i1 true, i1* %1593
	%1594 = getelementptr inbounds %Type_Info, %Type_Info* %1590, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1594
	%1595 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 69
	; Type_Info_Basic
	%1596 = bitcast %Type_Info* %1595 to %Type_Info.Integer*
	%1597 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1596, i64 0, i32 0
	store i64 2, i64* %1597
	%1598 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1596, i64 0, i32 1
	store i1 true, i1* %1598
	%1599 = getelementptr inbounds %Type_Info, %Type_Info* %1595, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1599
	%1600 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 70
	; Type_Info_Basic
	%1601 = bitcast %Type_Info* %1600 to %Type_Info.Integer*
	%1602 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1601, i64 0, i32 0
	store i64 2, i64* %1602
	%1603 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1601, i64 0, i32 1
	store i1 false, i1* %1603
	%1604 = getelementptr inbounds %Type_Info, %Type_Info* %1600, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1604
	%1605 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	; Type_Info_Basic
	%1606 = bitcast %Type_Info* %1605 to %Type_Info.Integer*
	%1607 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1606, i64 0, i32 0
	store i64 4, i64* %1607
	%1608 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1606, i64 0, i32 1
	store i1 false, i1* %1608
	%1609 = getelementptr inbounds %Type_Info, %Type_Info* %1605, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1609
	%1610 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 72
	; Type_Info_Basic
	%1611 = bitcast %Type_Info* %1610 to %Type_Info.Integer*
	%1612 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1611, i64 0, i32 0
	store i64 8, i64* %1612
	%1613 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %1611, i64 0, i32 1
	store i1 false, i1* %1613
	%1614 = getelementptr inbounds %Type_Info, %Type_Info* %1610, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %1614
	%1615 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 73
	; Type_Info_Basic
	%1616 = bitcast %Type_Info* %1615 to %Type_Info.Any*
	%1617 = getelementptr inbounds %Type_Info, %Type_Info* %1615, i64 0, i32 2 ; UnionTagPtr
	store i64 8, i64* %1617
	%1618 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1619 = bitcast %Type_Info* %1618 to %Type_Info.Pointer*
	%1620 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1621 = bitcast %Type_Info* %1620 to %Type_Info*
	%1622 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1619, i64 0, i32 0
	store %Type_Info* %1621, %Type_Info** %1622
	%1623 = getelementptr inbounds %Type_Info, %Type_Info* %1618, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1623
	%1624 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	; Type_Info_Basic
	%1625 = bitcast %Type_Info* %1624 to %Type_Info.Pointer*
	%1626 = getelementptr inbounds %Type_Info, %Type_Info* %1624, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1626
	%1627 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	; Type_Info_Basic
	%1628 = bitcast %Type_Info* %1627 to %Type_Info.Float*
	%1629 = getelementptr inbounds %Type_Info.Float, %Type_Info.Float* %1628, i64 0, i32 0
	store i64 4, i64* %1629
	%1630 = getelementptr inbounds %Type_Info, %Type_Info* %1627, i64 0, i32 2 ; UnionTagPtr
	store i64 3, i64* %1630
	%1631 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1632 = bitcast %Type_Info* %1631 to %Type_Info.Pointer*
	%1633 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1634 = bitcast %Type_Info* %1633 to %Type_Info*
	%1635 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1632, i64 0, i32 0
	store %Type_Info* %1634, %Type_Info** %1635
	%1636 = getelementptr inbounds %Type_Info, %Type_Info* %1631, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1636
	%1637 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	; Type_Info_Pointer
	%1638 = bitcast %Type_Info* %1637 to %Type_Info.Pointer*
	%1639 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%1640 = bitcast %Type_Info* %1639 to %Type_Info*
	%1641 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1638, i64 0, i32 0
	store %Type_Info* %1640, %Type_Info** %1641
	%1642 = getelementptr inbounds %Type_Info, %Type_Info* %1637, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1642
	%1643 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	; Type_Info_Pointer
	%1644 = bitcast %Type_Info* %1643 to %Type_Info.Pointer*
	%1645 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%1646 = bitcast %Type_Info* %1645 to %Type_Info*
	%1647 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1644, i64 0, i32 0
	store %Type_Info* %1646, %Type_Info** %1647
	%1648 = getelementptr inbounds %Type_Info, %Type_Info* %1643, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1648
	%1649 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	; Type_Info_Pointer
	%1650 = bitcast %Type_Info* %1649 to %Type_Info.Pointer*
	%1651 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%1652 = bitcast %Type_Info* %1651 to %Type_Info*
	%1653 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1650, i64 0, i32 0
	store %Type_Info* %1652, %Type_Info** %1653
	%1654 = getelementptr inbounds %Type_Info, %Type_Info* %1649, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1654
	%1655 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%1656 = bitcast %Type_Info* %1655 to %Type_Info.Pointer*
	%1657 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%1658 = bitcast %Type_Info* %1657 to %Type_Info*
	%1659 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1656, i64 0, i32 0
	store %Type_Info* %1658, %Type_Info** %1659
	%1660 = getelementptr inbounds %Type_Info, %Type_Info* %1655, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1660
	%1661 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 77
	; Type_Info_Basic
	%1662 = bitcast %Type_Info* %1661 to %Type_Info.Complex*
	%1663 = getelementptr inbounds %Type_Info.Complex, %Type_Info.Complex* %1662, i64 0, i32 0
	store i64 8, i64* %1663
	%1664 = getelementptr inbounds %Type_Info, %Type_Info* %1661, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %1664
	%1665 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 78
	; Type_Info_Basic
	%1666 = bitcast %Type_Info* %1665 to %Type_Info.Complex*
	%1667 = getelementptr inbounds %Type_Info.Complex, %Type_Info.Complex* %1666, i64 0, i32 0
	store i64 16, i64* %1667
	%1668 = getelementptr inbounds %Type_Info, %Type_Info* %1665, i64 0, i32 2 ; UnionTagPtr
	store i64 4, i64* %1668
	%1669 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 79
	; Type_Info_Basic
	%1670 = bitcast %Type_Info* %1669 to %Type_Info.Quaternion*
	%1671 = getelementptr inbounds %Type_Info.Quaternion, %Type_Info.Quaternion* %1670, i64 0, i32 0
	store i64 16, i64* %1671
	%1672 = getelementptr inbounds %Type_Info, %Type_Info* %1669, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %1672
	%1673 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 80
	; Type_Info_Basic
	%1674 = bitcast %Type_Info* %1673 to %Type_Info.Quaternion*
	%1675 = getelementptr inbounds %Type_Info.Quaternion, %Type_Info.Quaternion* %1674, i64 0, i32 0
	store i64 32, i64* %1675
	%1676 = getelementptr inbounds %Type_Info, %Type_Info* %1673, i64 0, i32 2 ; UnionTagPtr
	store i64 5, i64* %1676
	%1677 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 81
	; Type_Info_Named
	%1678 = bitcast %Type_Info* %1677 to %Type_Info.Named*
	%1679 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	%1680 = bitcast %Type_Info* %1679 to %Type_Info*
	%1681 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1678, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2d0, i64 0, i32 0), i64 9}, %..string* %1681
	%1682 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1678, i64 0, i32 1
	store %Type_Info* %1680, %Type_Info** %1682
	%1683 = getelementptr inbounds %Type_Info, %Type_Info* %1677, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1683
	%1684 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 82
	; Type_Info_Named
	%1685 = bitcast %Type_Info* %1684 to %Type_Info.Named*
	%1686 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	%1687 = bitcast %Type_Info* %1686 to %Type_Info*
	%1688 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1685, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2d1, i64 0, i32 0), i64 4}, %..string* %1688
	%1689 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1685, i64 0, i32 1
	store %Type_Info* %1687, %Type_Info** %1689
	%1690 = getelementptr inbounds %Type_Info, %Type_Info* %1684, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1690
	%1691 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 83
	; Type_Info_Struct
	%1692 = bitcast %Type_Info* %1691 to %Type_Info.Struct*
	%1693 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1692, i64 0, i32 0
	%1694 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 3
	store i64 8, i64* %1694
	%1695 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 4
	store i64 4, i64* %1695
	%1696 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 5
	store i1 false, i1* %1696
	%1697 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 6
	store i1 true, i1* %1697
	%1698 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 7
	store i1 false, i1* %1698
	%1699 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 71
	%1700 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 71
	%1701 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 51
	%1702 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%1703 = bitcast %Type_Info* %1702 to %Type_Info*
	%1704 = getelementptr inbounds %Type_Info*, %Type_Info** %1699, i64 0
	%1705 = getelementptr inbounds i64, i64* %1701, i64 0
	%1706 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %1706, %Type_Info** %1704
	%1707 = getelementptr inbounds %..string, %..string* %1700, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2d2, i64 0, i32 0), i64 1}, %..string* %1707
	store i64 0, i64* %1705
	%1708 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%1709 = bitcast %Type_Info* %1708 to %Type_Info*
	%1710 = getelementptr inbounds %Type_Info*, %Type_Info** %1699, i64 1
	%1711 = getelementptr inbounds i64, i64* %1701, i64 1
	%1712 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %1712, %Type_Info** %1710
	%1713 = getelementptr inbounds %..string, %..string* %1700, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2d3, i64 0, i32 0), i64 1}, %..string* %1713
	store i64 4, i64* %1711
	%1714 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 0
	%1715 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1714, i64 0, i32 0
	store %Type_Info** %1699, %Type_Info*** %1715
	%1716 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1714, i64 0, i32 1
	store i64 2, i64* %1716
	%1717 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1714, i64 0, i32 2
	store i64 2, i64* %1717
	%1718 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 1
	%1719 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1718, i64 0, i32 0
	store %..string* %1700, %..string** %1719
	%1720 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1718, i64 0, i32 1
	store i64 2, i64* %1720
	%1721 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1718, i64 0, i32 2
	store i64 2, i64* %1721
	%1722 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1693, i64 0, i32 2
	%1723 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1722, i64 0, i32 0
	store i64* %1701, i64** %1723
	%1724 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1722, i64 0, i32 1
	store i64 2, i64* %1724
	%1725 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1722, i64 0, i32 2
	store i64 2, i64* %1725
	%1726 = getelementptr inbounds %Type_Info, %Type_Info* %1691, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1726
	%1727 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 84
	; Type_Info_Named
	%1728 = bitcast %Type_Info* %1727 to %Type_Info.Named*
	%1729 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	%1730 = bitcast %Type_Info* %1729 to %Type_Info*
	%1731 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1728, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2d4, i64 0, i32 0), i64 4}, %..string* %1731
	%1732 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %1728, i64 0, i32 1
	store %Type_Info* %1730, %Type_Info** %1732
	%1733 = getelementptr inbounds %Type_Info, %Type_Info* %1727, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %1733
	%1734 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 85
	; Type_Info_Struct
	%1735 = bitcast %Type_Info* %1734 to %Type_Info.Struct*
	%1736 = getelementptr inbounds %Type_Info.Struct, %Type_Info.Struct* %1735, i64 0, i32 0
	%1737 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 3
	store i64 16, i64* %1737
	%1738 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 4
	store i64 4, i64* %1738
	%1739 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 5
	store i1 false, i1* %1739
	%1740 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 6
	store i1 true, i1* %1740
	%1741 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 7
	store i1 false, i1* %1741
	%1742 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 73
	%1743 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 73
	%1744 = getelementptr inbounds [179 x i64], [179 x i64]* @.__$type_info_offsets_data, i64 0, i32 53
	%1745 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%1746 = bitcast %Type_Info* %1745 to %Type_Info*
	%1747 = getelementptr inbounds %Type_Info*, %Type_Info** %1742, i64 0
	%1748 = getelementptr inbounds i64, i64* %1744, i64 0
	%1749 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %1749, %Type_Info** %1747
	%1750 = getelementptr inbounds %..string, %..string* %1743, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2d5, i64 0, i32 0), i64 1}, %..string* %1750
	store i64 0, i64* %1748
	%1751 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%1752 = bitcast %Type_Info* %1751 to %Type_Info*
	%1753 = getelementptr inbounds %Type_Info*, %Type_Info** %1742, i64 1
	%1754 = getelementptr inbounds i64, i64* %1744, i64 1
	%1755 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %1755, %Type_Info** %1753
	%1756 = getelementptr inbounds %..string, %..string* %1743, i64 1
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2d6, i64 0, i32 0), i64 1}, %..string* %1756
	store i64 4, i64* %1754
	%1757 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%1758 = bitcast %Type_Info* %1757 to %Type_Info*
	%1759 = getelementptr inbounds %Type_Info*, %Type_Info** %1742, i64 2
	%1760 = getelementptr inbounds i64, i64* %1744, i64 2
	%1761 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %1761, %Type_Info** %1759
	%1762 = getelementptr inbounds %..string, %..string* %1743, i64 2
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2d7, i64 0, i32 0), i64 1}, %..string* %1762
	store i64 8, i64* %1760
	%1763 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%1764 = bitcast %Type_Info* %1763 to %Type_Info*
	%1765 = getelementptr inbounds %Type_Info*, %Type_Info** %1742, i64 3
	%1766 = getelementptr inbounds i64, i64* %1744, i64 3
	%1767 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %1767, %Type_Info** %1765
	%1768 = getelementptr inbounds %..string, %..string* %1743, i64 3
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2d8, i64 0, i32 0), i64 1}, %..string* %1768
	store i64 12, i64* %1766
	%1769 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 0
	%1770 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1769, i64 0, i32 0
	store %Type_Info** %1742, %Type_Info*** %1770
	%1771 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1769, i64 0, i32 1
	store i64 4, i64* %1771
	%1772 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1769, i64 0, i32 2
	store i64 4, i64* %1772
	%1773 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 1
	%1774 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1773, i64 0, i32 0
	store %..string* %1743, %..string** %1774
	%1775 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1773, i64 0, i32 1
	store i64 4, i64* %1775
	%1776 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1773, i64 0, i32 2
	store i64 4, i64* %1776
	%1777 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1736, i64 0, i32 2
	%1778 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1777, i64 0, i32 0
	store i64* %1744, i64** %1778
	%1779 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1777, i64 0, i32 1
	store i64 4, i64* %1779
	%1780 = getelementptr inbounds {i64*, i64, i64}, {i64*, i64, i64}* %1777, i64 0, i32 2
	store i64 4, i64* %1780
	%1781 = getelementptr inbounds %Type_Info, %Type_Info* %1734, i64 0, i32 2 ; UnionTagPtr
	store i64 16, i64* %1781
	%1782 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 86
	; Type_Info_Proc
	%1783 = bitcast %Type_Info* %1782 to %Type_Info.Procedure*
	%1784 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1783, i64 0, i32 0
	%1785 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1783, i64 0, i32 1
	%1786 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1783, i64 0, i32 2
	%1787 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1783, i64 0, i32 3
	%1788 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	%1789 = bitcast %Type_Info* %1788 to %Type_Info*
	store %Type_Info* %1789, %Type_Info** %1784
	store i1 false, i1* %1786
	store i64 1, i64* %1787
	%1790 = getelementptr inbounds %Type_Info, %Type_Info* %1782, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1790
	%1791 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 87
	; Type_Info_Tuple
	%1792 = bitcast %Type_Info* %1791 to %Type_Info.Tuple*
	%1793 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1792, i64 0, i32 0
	%1794 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1793, i64 0, i32 4
	store i64 8, i64* %1794
	%1795 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 77
	%1796 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 77
	%1797 = getelementptr inbounds %Type_Info*, %Type_Info** %1795, i64 0
	%1798 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1798, %Type_Info** %1797
	%1799 = getelementptr inbounds %..string, %..string* %1796, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2d9, i64 0, i32 0), i64 4}, %..string* %1799
	%1800 = getelementptr inbounds %Type_Info*, %Type_Info** %1795, i64 1
	%1801 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1801, %Type_Info** %1800
	%1802 = getelementptr inbounds %..string, %..string* %1796, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2da, i64 0, i32 0), i64 5}, %..string* %1802
	%1803 = getelementptr inbounds %Type_Info*, %Type_Info** %1795, i64 2
	%1804 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1804, %Type_Info** %1803
	%1805 = getelementptr inbounds %..string, %..string* %1796, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2db, i64 0, i32 0), i64 5}, %..string* %1805
	%1806 = getelementptr inbounds %Type_Info*, %Type_Info** %1795, i64 3
	%1807 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	store %Type_Info* %1807, %Type_Info** %1806
	%1808 = getelementptr inbounds %..string, %..string* %1796, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2dc, i64 0, i32 0), i64 7}, %..string* %1808
	%1809 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1793, i64 0, i32 0
	%1810 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1809, i64 0, i32 0
	store %Type_Info** %1795, %Type_Info*** %1810
	%1811 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1809, i64 0, i32 1
	store i64 4, i64* %1811
	%1812 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1809, i64 0, i32 2
	store i64 4, i64* %1812
	%1813 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1793, i64 0, i32 1
	%1814 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1813, i64 0, i32 0
	store %..string* %1796, %..string** %1814
	%1815 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1813, i64 0, i32 1
	store i64 4, i64* %1815
	%1816 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1813, i64 0, i32 2
	store i64 4, i64* %1816
	%1817 = getelementptr inbounds %Type_Info, %Type_Info* %1791, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1817
	%1818 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Proc
	%1819 = bitcast %Type_Info* %1818 to %Type_Info.Procedure*
	%1820 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1819, i64 0, i32 0
	%1821 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1819, i64 0, i32 1
	%1822 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1819, i64 0, i32 2
	%1823 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1819, i64 0, i32 3
	%1824 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%1825 = bitcast %Type_Info* %1824 to %Type_Info*
	store %Type_Info* %1825, %Type_Info** %1820
	store i1 false, i1* %1822
	store i64 1, i64* %1823
	%1826 = getelementptr inbounds %Type_Info, %Type_Info* %1818, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1826
	%1827 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%1828 = bitcast %Type_Info* %1827 to %Type_Info.Tuple*
	%1829 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1828, i64 0, i32 0
	%1830 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1829, i64 0, i32 4
	store i64 4, i64* %1830
	%1831 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 81
	%1832 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 81
	%1833 = getelementptr inbounds %Type_Info*, %Type_Info** %1831, i64 0
	%1834 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %1834, %Type_Info** %1833
	%1835 = getelementptr inbounds %..string, %..string* %1832, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2dd, i64 0, i32 0), i64 6}, %..string* %1835
	%1836 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1829, i64 0, i32 0
	%1837 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1836, i64 0, i32 0
	store %Type_Info** %1831, %Type_Info*** %1837
	%1838 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1836, i64 0, i32 1
	store i64 1, i64* %1838
	%1839 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1836, i64 0, i32 2
	store i64 1, i64* %1839
	%1840 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1829, i64 0, i32 1
	%1841 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1840, i64 0, i32 0
	store %..string* %1832, %..string** %1841
	%1842 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1840, i64 0, i32 1
	store i64 1, i64* %1842
	%1843 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1840, i64 0, i32 2
	store i64 1, i64* %1843
	%1844 = getelementptr inbounds %Type_Info, %Type_Info* %1827, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1844
	%1845 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 90
	; Type_Info_Proc
	%1846 = bitcast %Type_Info* %1845 to %Type_Info.Procedure*
	%1847 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1846, i64 0, i32 0
	%1848 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1846, i64 0, i32 1
	%1849 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1846, i64 0, i32 2
	%1850 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1846, i64 0, i32 3
	%1851 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 91
	%1852 = bitcast %Type_Info* %1851 to %Type_Info*
	store %Type_Info* %1852, %Type_Info** %1847
	store i1 false, i1* %1849
	store i64 1, i64* %1850
	%1853 = getelementptr inbounds %Type_Info, %Type_Info* %1845, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1853
	%1854 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 91
	; Type_Info_Tuple
	%1855 = bitcast %Type_Info* %1854 to %Type_Info.Tuple*
	%1856 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1855, i64 0, i32 0
	%1857 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1856, i64 0, i32 4
	store i64 8, i64* %1857
	%1858 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 82
	%1859 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 82
	%1860 = getelementptr inbounds %Type_Info*, %Type_Info** %1858, i64 0
	%1861 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %1861, %Type_Info** %1860
	%1862 = getelementptr inbounds %..string, %..string* %1859, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2de, i64 0, i32 0), i64 5}, %..string* %1862
	%1863 = getelementptr inbounds %Type_Info*, %Type_Info** %1858, i64 1
	%1864 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1864, %Type_Info** %1863
	%1865 = getelementptr inbounds %..string, %..string* %1859, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2df, i64 0, i32 0), i64 4}, %..string* %1865
	%1866 = getelementptr inbounds %Type_Info*, %Type_Info** %1858, i64 2
	%1867 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1867, %Type_Info** %1866
	%1868 = getelementptr inbounds %..string, %..string* %1859, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2e0, i64 0, i32 0), i64 4}, %..string* %1868
	%1869 = getelementptr inbounds %Type_Info*, %Type_Info** %1858, i64 3
	%1870 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %1870, %Type_Info** %1869
	%1871 = getelementptr inbounds %..string, %..string* %1859, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$2e1, i64 0, i32 0), i64 10}, %..string* %1871
	%1872 = getelementptr inbounds %Type_Info*, %Type_Info** %1858, i64 4
	%1873 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %1873, %Type_Info** %1872
	%1874 = getelementptr inbounds %..string, %..string* %1859, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2e2, i64 0, i32 0), i64 6}, %..string* %1874
	%1875 = getelementptr inbounds %Type_Info*, %Type_Info** %1858, i64 5
	%1876 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	store %Type_Info* %1876, %Type_Info** %1875
	%1877 = getelementptr inbounds %..string, %..string* %1859, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2e3, i64 0, i32 0), i64 7}, %..string* %1877
	%1878 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1856, i64 0, i32 0
	%1879 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1878, i64 0, i32 0
	store %Type_Info** %1858, %Type_Info*** %1879
	%1880 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1878, i64 0, i32 1
	store i64 6, i64* %1880
	%1881 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1878, i64 0, i32 2
	store i64 6, i64* %1881
	%1882 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1856, i64 0, i32 1
	%1883 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1882, i64 0, i32 0
	store %..string* %1859, %..string** %1883
	%1884 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1882, i64 0, i32 1
	store i64 6, i64* %1884
	%1885 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1882, i64 0, i32 2
	store i64 6, i64* %1885
	%1886 = getelementptr inbounds %Type_Info, %Type_Info* %1854, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1886
	%1887 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Proc
	%1888 = bitcast %Type_Info* %1887 to %Type_Info.Procedure*
	%1889 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1888, i64 0, i32 0
	%1890 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1888, i64 0, i32 1
	%1891 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1888, i64 0, i32 2
	%1892 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1888, i64 0, i32 3
	%1893 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%1894 = bitcast %Type_Info* %1893 to %Type_Info*
	store %Type_Info* %1894, %Type_Info** %1889
	store i1 false, i1* %1891
	store i64 1, i64* %1892
	%1895 = getelementptr inbounds %Type_Info, %Type_Info* %1887, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1895
	%1896 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%1897 = bitcast %Type_Info* %1896 to %Type_Info.Tuple*
	%1898 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1897, i64 0, i32 0
	%1899 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1898, i64 0, i32 4
	store i64 4, i64* %1899
	%1900 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 88
	%1901 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 88
	%1902 = getelementptr inbounds %Type_Info*, %Type_Info** %1900, i64 0
	%1903 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %1903, %Type_Info** %1902
	%1904 = getelementptr inbounds %..string, %..string* %1901, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2e4, i64 0, i32 0), i64 5}, %..string* %1904
	%1905 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1898, i64 0, i32 0
	%1906 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1905, i64 0, i32 0
	store %Type_Info** %1900, %Type_Info*** %1906
	%1907 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1905, i64 0, i32 1
	store i64 1, i64* %1907
	%1908 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1905, i64 0, i32 2
	store i64 1, i64* %1908
	%1909 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1898, i64 0, i32 1
	%1910 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1909, i64 0, i32 0
	store %..string* %1901, %..string** %1910
	%1911 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1909, i64 0, i32 1
	store i64 1, i64* %1911
	%1912 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1909, i64 0, i32 2
	store i64 1, i64* %1912
	%1913 = getelementptr inbounds %Type_Info, %Type_Info* %1896, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1913
	%1914 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	; Type_Info_Proc
	%1915 = bitcast %Type_Info* %1914 to %Type_Info.Procedure*
	%1916 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1915, i64 0, i32 0
	%1917 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1915, i64 0, i32 1
	%1918 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1915, i64 0, i32 2
	%1919 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1915, i64 0, i32 3
	%1920 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	%1921 = bitcast %Type_Info* %1920 to %Type_Info*
	store %Type_Info* %1921, %Type_Info** %1916
	store i1 false, i1* %1918
	store i64 1, i64* %1919
	%1922 = getelementptr inbounds %Type_Info, %Type_Info* %1914, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1922
	%1923 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	; Type_Info_Tuple
	%1924 = bitcast %Type_Info* %1923 to %Type_Info.Tuple*
	%1925 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1924, i64 0, i32 0
	%1926 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1925, i64 0, i32 4
	store i64 8, i64* %1926
	%1927 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 89
	%1928 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 89
	%1929 = getelementptr inbounds %Type_Info*, %Type_Info** %1927, i64 0
	%1930 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1930, %Type_Info** %1929
	%1931 = getelementptr inbounds %..string, %..string* %1928, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2e5, i64 0, i32 0), i64 5}, %..string* %1931
	%1932 = getelementptr inbounds %Type_Info*, %Type_Info** %1927, i64 1
	%1933 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	store %Type_Info* %1933, %Type_Info** %1932
	%1934 = getelementptr inbounds %..string, %..string* %1928, i64 1
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2e6, i64 0, i32 0), i64 7}, %..string* %1934
	%1935 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1925, i64 0, i32 0
	%1936 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1935, i64 0, i32 0
	store %Type_Info** %1927, %Type_Info*** %1936
	%1937 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1935, i64 0, i32 1
	store i64 2, i64* %1937
	%1938 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1935, i64 0, i32 2
	store i64 2, i64* %1938
	%1939 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1925, i64 0, i32 1
	%1940 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1939, i64 0, i32 0
	store %..string* %1928, %..string** %1940
	%1941 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1939, i64 0, i32 1
	store i64 2, i64* %1941
	%1942 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1939, i64 0, i32 2
	store i64 2, i64* %1942
	%1943 = getelementptr inbounds %Type_Info, %Type_Info* %1923, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1943
	%1944 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	; Type_Info_Pointer
	%1945 = bitcast %Type_Info* %1944 to %Type_Info.Pointer*
	%1946 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%1947 = bitcast %Type_Info* %1946 to %Type_Info*
	%1948 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %1945, i64 0, i32 0
	store %Type_Info* %1947, %Type_Info** %1948
	%1949 = getelementptr inbounds %Type_Info, %Type_Info* %1944, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %1949
	%1950 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 95
	; Type_Info_Proc
	%1951 = bitcast %Type_Info* %1950 to %Type_Info.Procedure*
	%1952 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1951, i64 0, i32 0
	%1953 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1951, i64 0, i32 1
	%1954 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1951, i64 0, i32 2
	%1955 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1951, i64 0, i32 3
	%1956 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	%1957 = bitcast %Type_Info* %1956 to %Type_Info*
	store %Type_Info* %1957, %Type_Info** %1952
	store i1 false, i1* %1954
	store i64 1, i64* %1955
	%1958 = getelementptr inbounds %Type_Info, %Type_Info* %1950, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1958
	%1959 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 96
	; Type_Info_Tuple
	%1960 = bitcast %Type_Info* %1959 to %Type_Info.Tuple*
	%1961 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1960, i64 0, i32 0
	%1962 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1961, i64 0, i32 4
	store i64 8, i64* %1962
	%1963 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 91
	%1964 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 91
	%1965 = getelementptr inbounds %Type_Info*, %Type_Info** %1963, i64 0
	%1966 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1966, %Type_Info** %1965
	%1967 = getelementptr inbounds %..string, %..string* %1964, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2e7, i64 0, i32 0), i64 6}, %..string* %1967
	%1968 = getelementptr inbounds %Type_Info*, %Type_Info** %1963, i64 1
	%1969 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1969, %Type_Info** %1968
	%1970 = getelementptr inbounds %..string, %..string* %1964, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2e8, i64 0, i32 0), i64 4}, %..string* %1970
	%1971 = getelementptr inbounds %Type_Info*, %Type_Info** %1963, i64 2
	%1972 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	store %Type_Info* %1972, %Type_Info** %1971
	%1973 = getelementptr inbounds %..string, %..string* %1964, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2e9, i64 0, i32 0), i64 4}, %..string* %1973
	%1974 = getelementptr inbounds %Type_Info*, %Type_Info** %1963, i64 3
	%1975 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %1975, %Type_Info** %1974
	%1976 = getelementptr inbounds %..string, %..string* %1964, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2ea, i64 0, i32 0), i64 5}, %..string* %1976
	%1977 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1961, i64 0, i32 0
	%1978 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1977, i64 0, i32 0
	store %Type_Info** %1963, %Type_Info*** %1978
	%1979 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1977, i64 0, i32 1
	store i64 4, i64* %1979
	%1980 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %1977, i64 0, i32 2
	store i64 4, i64* %1980
	%1981 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1961, i64 0, i32 1
	%1982 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1981, i64 0, i32 0
	store %..string* %1964, %..string** %1982
	%1983 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1981, i64 0, i32 1
	store i64 4, i64* %1983
	%1984 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %1981, i64 0, i32 2
	store i64 4, i64* %1984
	%1985 = getelementptr inbounds %Type_Info, %Type_Info* %1959, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %1985
	%1986 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 97
	; Type_Info_Proc
	%1987 = bitcast %Type_Info* %1986 to %Type_Info.Procedure*
	%1988 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1987, i64 0, i32 0
	%1989 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1987, i64 0, i32 1
	%1990 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1987, i64 0, i32 2
	%1991 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %1987, i64 0, i32 3
	%1992 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%1993 = bitcast %Type_Info* %1992 to %Type_Info*
	store %Type_Info* %1993, %Type_Info** %1988
	store i1 false, i1* %1990
	store i64 1, i64* %1991
	%1994 = getelementptr inbounds %Type_Info, %Type_Info* %1986, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %1994
	%1995 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	; Type_Info_Tuple
	%1996 = bitcast %Type_Info* %1995 to %Type_Info.Tuple*
	%1997 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %1996, i64 0, i32 0
	%1998 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1997, i64 0, i32 4
	store i64 4, i64* %1998
	%1999 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 95
	%2000 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 95
	%2001 = getelementptr inbounds %Type_Info*, %Type_Info** %1999, i64 0
	%2002 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2002, %Type_Info** %2001
	%2003 = getelementptr inbounds %..string, %..string* %2000, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2eb, i64 0, i32 0), i64 6}, %..string* %2003
	%2004 = getelementptr inbounds %Type_Info*, %Type_Info** %1999, i64 1
	%2005 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2005, %Type_Info** %2004
	%2006 = getelementptr inbounds %..string, %..string* %2000, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2ec, i64 0, i32 0), i64 6}, %..string* %2006
	%2007 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1997, i64 0, i32 0
	%2008 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2007, i64 0, i32 0
	store %Type_Info** %1999, %Type_Info*** %2008
	%2009 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2007, i64 0, i32 1
	store i64 2, i64* %2009
	%2010 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2007, i64 0, i32 2
	store i64 2, i64* %2010
	%2011 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %1997, i64 0, i32 1
	%2012 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2011, i64 0, i32 0
	store %..string* %2000, %..string** %2012
	%2013 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2011, i64 0, i32 1
	store i64 2, i64* %2013
	%2014 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2011, i64 0, i32 2
	store i64 2, i64* %2014
	%2015 = getelementptr inbounds %Type_Info, %Type_Info* %1995, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2015
	%2016 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 92
	; Type_Info_Proc
	%2017 = bitcast %Type_Info* %2016 to %Type_Info.Procedure*
	%2018 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2017, i64 0, i32 0
	%2019 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2017, i64 0, i32 1
	%2020 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2017, i64 0, i32 2
	%2021 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2017, i64 0, i32 3
	%2022 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	%2023 = bitcast %Type_Info* %2022 to %Type_Info*
	store %Type_Info* %2023, %Type_Info** %2018
	store i1 false, i1* %2020
	store i64 1, i64* %2021
	%2024 = getelementptr inbounds %Type_Info, %Type_Info* %2016, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2024
	%2025 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 93
	; Type_Info_Tuple
	%2026 = bitcast %Type_Info* %2025 to %Type_Info.Tuple*
	%2027 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2026, i64 0, i32 0
	%2028 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2027, i64 0, i32 4
	store i64 8, i64* %2028
	%2029 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 97
	%2030 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 97
	%2031 = getelementptr inbounds %Type_Info*, %Type_Info** %2029, i64 0
	%2032 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2032, %Type_Info** %2031
	%2033 = getelementptr inbounds %..string, %..string* %2030, i64 0
	store %..string {i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.__str$2ed, i64 0, i32 0), i64 1}, %..string* %2033
	%2034 = getelementptr inbounds %Type_Info*, %Type_Info** %2029, i64 1
	%2035 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	store %Type_Info* %2035, %Type_Info** %2034
	%2036 = getelementptr inbounds %..string, %..string* %2030, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2ee, i64 0, i32 0), i64 6}, %..string* %2036
	%2037 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2027, i64 0, i32 0
	%2038 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2037, i64 0, i32 0
	store %Type_Info** %2029, %Type_Info*** %2038
	%2039 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2037, i64 0, i32 1
	store i64 2, i64* %2039
	%2040 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2037, i64 0, i32 2
	store i64 2, i64* %2040
	%2041 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2027, i64 0, i32 1
	%2042 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2041, i64 0, i32 0
	store %..string* %2030, %..string** %2042
	%2043 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2041, i64 0, i32 1
	store i64 2, i64* %2043
	%2044 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2041, i64 0, i32 2
	store i64 2, i64* %2044
	%2045 = getelementptr inbounds %Type_Info, %Type_Info* %2025, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2045
	%2046 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	; Type_Info_Pointer
	%2047 = bitcast %Type_Info* %2046 to %Type_Info.Pointer*
	%2048 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%2049 = bitcast %Type_Info* %2048 to %Type_Info*
	%2050 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2047, i64 0, i32 0
	store %Type_Info* %2049, %Type_Info** %2050
	%2051 = getelementptr inbounds %Type_Info, %Type_Info* %2046, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2051
	%2052 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 99
	; Type_Info_Proc
	%2053 = bitcast %Type_Info* %2052 to %Type_Info.Procedure*
	%2054 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2053, i64 0, i32 0
	%2055 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2053, i64 0, i32 1
	%2056 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2053, i64 0, i32 2
	%2057 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2053, i64 0, i32 3
	%2058 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 100
	%2059 = bitcast %Type_Info* %2058 to %Type_Info*
	store %Type_Info* %2059, %Type_Info** %2054
	store i1 false, i1* %2056
	store i64 1, i64* %2057
	%2060 = getelementptr inbounds %Type_Info, %Type_Info* %2052, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2060
	%2061 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 100
	; Type_Info_Tuple
	%2062 = bitcast %Type_Info* %2061 to %Type_Info.Tuple*
	%2063 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2062, i64 0, i32 0
	%2064 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2063, i64 0, i32 4
	store i64 8, i64* %2064
	%2065 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 99
	%2066 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 99
	%2067 = getelementptr inbounds %Type_Info*, %Type_Info** %2065, i64 0
	%2068 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2068, %Type_Info** %2067
	%2069 = getelementptr inbounds %..string, %..string* %2066, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2ef, i64 0, i32 0), i64 6}, %..string* %2069
	%2070 = getelementptr inbounds %Type_Info*, %Type_Info** %2065, i64 1
	%2071 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2071, %Type_Info** %2070
	%2072 = getelementptr inbounds %..string, %..string* %2066, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2f0, i64 0, i32 0), i64 4}, %..string* %2072
	%2073 = getelementptr inbounds %Type_Info*, %Type_Info** %2065, i64 2
	%2074 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2074, %Type_Info** %2073
	%2075 = getelementptr inbounds %..string, %..string* %2066, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2f1, i64 0, i32 0), i64 8}, %..string* %2075
	%2076 = getelementptr inbounds %Type_Info*, %Type_Info** %2065, i64 3
	%2077 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2077, %Type_Info** %2076
	%2078 = getelementptr inbounds %..string, %..string* %2066, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$2f2, i64 0, i32 0), i64 5}, %..string* %2078
	%2079 = getelementptr inbounds %Type_Info*, %Type_Info** %2065, i64 4
	%2080 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	store %Type_Info* %2080, %Type_Info** %2079
	%2081 = getelementptr inbounds %..string, %..string* %2066, i64 4
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$2f3, i64 0, i32 0), i64 3}, %..string* %2081
	%2082 = getelementptr inbounds %Type_Info*, %Type_Info** %2065, i64 5
	%2083 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 11
	store %Type_Info* %2083, %Type_Info** %2082
	%2084 = getelementptr inbounds %..string, %..string* %2066, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2f4, i64 0, i32 0), i64 7}, %..string* %2084
	%2085 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2063, i64 0, i32 0
	%2086 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2085, i64 0, i32 0
	store %Type_Info** %2065, %Type_Info*** %2086
	%2087 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2085, i64 0, i32 1
	store i64 6, i64* %2087
	%2088 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2085, i64 0, i32 2
	store i64 6, i64* %2088
	%2089 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2063, i64 0, i32 1
	%2090 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2089, i64 0, i32 0
	store %..string* %2066, %..string** %2090
	%2091 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2089, i64 0, i32 1
	store i64 6, i64* %2091
	%2092 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2089, i64 0, i32 2
	store i64 6, i64* %2092
	%2093 = getelementptr inbounds %Type_Info, %Type_Info* %2061, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2093
	%2094 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 94
	; Type_Info_Pointer
	%2095 = bitcast %Type_Info* %2094 to %Type_Info.Pointer*
	%2096 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%2097 = bitcast %Type_Info* %2096 to %Type_Info*
	%2098 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2095, i64 0, i32 0
	store %Type_Info* %2097, %Type_Info** %2098
	%2099 = getelementptr inbounds %Type_Info, %Type_Info* %2094, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2099
	%2100 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 101
	; Type_Info_Proc
	%2101 = bitcast %Type_Info* %2100 to %Type_Info.Procedure*
	%2102 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2101, i64 0, i32 0
	%2103 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2101, i64 0, i32 1
	%2104 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2101, i64 0, i32 2
	%2105 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2101, i64 0, i32 3
	%2106 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	%2107 = bitcast %Type_Info* %2106 to %Type_Info*
	store %Type_Info* %2107, %Type_Info** %2102
	store i1 false, i1* %2104
	store i64 1, i64* %2105
	%2108 = getelementptr inbounds %Type_Info, %Type_Info* %2100, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2108
	%2109 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 102
	; Type_Info_Tuple
	%2110 = bitcast %Type_Info* %2109 to %Type_Info.Tuple*
	%2111 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2110, i64 0, i32 0
	%2112 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2111, i64 0, i32 4
	store i64 8, i64* %2112
	%2113 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 105
	%2114 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 105
	%2115 = getelementptr inbounds %Type_Info*, %Type_Info** %2113, i64 0
	%2116 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	store %Type_Info* %2116, %Type_Info** %2115
	%2117 = getelementptr inbounds %..string, %..string* %2114, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2f5, i64 0, i32 0), i64 8}, %..string* %2117
	%2118 = getelementptr inbounds %Type_Info*, %Type_Info** %2113, i64 1
	%2119 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	store %Type_Info* %2119, %Type_Info** %2118
	%2120 = getelementptr inbounds %..string, %..string* %2114, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2f6, i64 0, i32 0), i64 9}, %..string* %2120
	%2121 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2111, i64 0, i32 0
	%2122 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2121, i64 0, i32 0
	store %Type_Info** %2113, %Type_Info*** %2122
	%2123 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2121, i64 0, i32 1
	store i64 2, i64* %2123
	%2124 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2121, i64 0, i32 2
	store i64 2, i64* %2124
	%2125 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2111, i64 0, i32 1
	%2126 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2125, i64 0, i32 0
	store %..string* %2114, %..string** %2126
	%2127 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2125, i64 0, i32 1
	store i64 2, i64* %2127
	%2128 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2125, i64 0, i32 2
	store i64 2, i64* %2128
	%2129 = getelementptr inbounds %Type_Info, %Type_Info* %2109, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2129
	%2130 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 103
	; Type_Info_Named
	%2131 = bitcast %Type_Info* %2130 to %Type_Info.Named*
	%2132 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	%2133 = bitcast %Type_Info* %2132 to %Type_Info*
	%2134 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2131, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.__str$2f7, i64 0, i32 0), i64 24}, %..string* %2134
	%2135 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %2131, i64 0, i32 1
	store %Type_Info* %2133, %Type_Info** %2135
	%2136 = getelementptr inbounds %Type_Info, %Type_Info* %2130, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %2136
	%2137 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 104
	; Type_Info_Proc
	%2138 = bitcast %Type_Info* %2137 to %Type_Info.Procedure*
	%2139 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2138, i64 0, i32 0
	%2140 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2138, i64 0, i32 1
	%2141 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2138, i64 0, i32 2
	%2142 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2138, i64 0, i32 3
	%2143 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	%2144 = bitcast %Type_Info* %2143 to %Type_Info*
	store %Type_Info* %2144, %Type_Info** %2139
	store i1 false, i1* %2141
	store i64 1, i64* %2142
	%2145 = getelementptr inbounds %Type_Info, %Type_Info* %2137, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2145
	%2146 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 105
	; Type_Info_Tuple
	%2147 = bitcast %Type_Info* %2146 to %Type_Info.Tuple*
	%2148 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2147, i64 0, i32 0
	%2149 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2148, i64 0, i32 4
	store i64 8, i64* %2149
	%2150 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 107
	%2151 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 107
	%2152 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 0
	%2153 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 59
	store %Type_Info* %2153, %Type_Info** %2152
	%2154 = getelementptr inbounds %..string, %..string* %2151, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2f8, i64 0, i32 0), i64 6}, %..string* %2154
	%2155 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 1
	%2156 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 61
	store %Type_Info* %2156, %Type_Info** %2155
	%2157 = getelementptr inbounds %..string, %..string* %2151, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$2f9, i64 0, i32 0), i64 4}, %..string* %2157
	%2158 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 2
	%2159 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2159, %Type_Info** %2158
	%2160 = getelementptr inbounds %..string, %..string* %2151, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$2fa, i64 0, i32 0), i64 2}, %..string* %2160
	%2161 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 3
	%2162 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 63
	store %Type_Info* %2162, %Type_Info** %2161
	%2163 = getelementptr inbounds %..string, %..string* %2151, i64 3
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$2fb, i64 0, i32 0), i64 8}, %..string* %2163
	%2164 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 4
	%2165 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2165, %Type_Info** %2164
	%2166 = getelementptr inbounds %..string, %..string* %2151, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2fc, i64 0, i32 0), i64 6}, %..string* %2166
	%2167 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 5
	%2168 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2168, %Type_Info** %2167
	%2169 = getelementptr inbounds %..string, %..string* %2151, i64 5
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$2fd, i64 0, i32 0), i64 7}, %..string* %2169
	%2170 = getelementptr inbounds %Type_Info*, %Type_Info** %2150, i64 6
	%2171 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 74
	store %Type_Info* %2171, %Type_Info** %2170
	%2172 = getelementptr inbounds %..string, %..string* %2151, i64 6
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$2fe, i64 0, i32 0), i64 9}, %..string* %2172
	%2173 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2148, i64 0, i32 0
	%2174 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2173, i64 0, i32 0
	store %Type_Info** %2150, %Type_Info*** %2174
	%2175 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2173, i64 0, i32 1
	store i64 7, i64* %2175
	%2176 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2173, i64 0, i32 2
	store i64 7, i64* %2176
	%2177 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2148, i64 0, i32 1
	%2178 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2177, i64 0, i32 0
	store %..string* %2151, %..string** %2178
	%2179 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2177, i64 0, i32 1
	store i64 7, i64* %2179
	%2180 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2177, i64 0, i32 2
	store i64 7, i64* %2180
	%2181 = getelementptr inbounds %Type_Info, %Type_Info* %2146, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2181
	%2182 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2183 = bitcast %Type_Info* %2182 to %Type_Info.Pointer*
	%2184 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2185 = bitcast %Type_Info* %2184 to %Type_Info*
	%2186 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2183, i64 0, i32 0
	store %Type_Info* %2185, %Type_Info** %2186
	%2187 = getelementptr inbounds %Type_Info, %Type_Info* %2182, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2187
	%2188 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	; Type_Info_Basic
	%2189 = bitcast %Type_Info* %2188 to %Type_Info.Integer*
	%2190 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2189, i64 0, i32 0
	store i64 1, i64* %2190
	%2191 = getelementptr inbounds %Type_Info.Integer, %Type_Info.Integer* %2189, i64 0, i32 1
	store i1 false, i1* %2191
	%2192 = getelementptr inbounds %Type_Info, %Type_Info* %2188, i64 0, i32 2 ; UnionTagPtr
	store i64 2, i64* %2192
	%2193 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 106
	; Type_Info_Proc
	%2194 = bitcast %Type_Info* %2193 to %Type_Info.Procedure*
	%2195 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2194, i64 0, i32 0
	%2196 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2194, i64 0, i32 1
	%2197 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2194, i64 0, i32 2
	%2198 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2194, i64 0, i32 3
	%2199 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	%2200 = bitcast %Type_Info* %2199 to %Type_Info*
	store %Type_Info* %2200, %Type_Info** %2195
	store i1 false, i1* %2197
	store i64 1, i64* %2198
	%2201 = getelementptr inbounds %Type_Info, %Type_Info* %2193, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2201
	%2202 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 107
	; Type_Info_Tuple
	%2203 = bitcast %Type_Info* %2202 to %Type_Info.Tuple*
	%2204 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2203, i64 0, i32 0
	%2205 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2204, i64 0, i32 4
	store i64 8, i64* %2205
	%2206 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 114
	%2207 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 114
	%2208 = getelementptr inbounds %Type_Info*, %Type_Info** %2206, i64 0
	%2209 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2209, %Type_Info** %2208
	%2210 = getelementptr inbounds %..string, %..string* %2207, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$2ff, i64 0, i32 0), i64 6}, %..string* %2210
	%2211 = getelementptr inbounds %Type_Info*, %Type_Info** %2206, i64 1
	%2212 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2212, %Type_Info** %2211
	%2213 = getelementptr inbounds %..string, %..string* %2207, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$300, i64 0, i32 0), i64 5}, %..string* %2213
	%2214 = getelementptr inbounds %Type_Info*, %Type_Info** %2206, i64 2
	%2215 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	store %Type_Info* %2215, %Type_Info** %2214
	%2216 = getelementptr inbounds %..string, %..string* %2207, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$301, i64 0, i32 0), i64 6}, %..string* %2216
	%2217 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2204, i64 0, i32 0
	%2218 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2217, i64 0, i32 0
	store %Type_Info** %2206, %Type_Info*** %2218
	%2219 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2217, i64 0, i32 1
	store i64 3, i64* %2219
	%2220 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2217, i64 0, i32 2
	store i64 3, i64* %2220
	%2221 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2204, i64 0, i32 1
	%2222 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2221, i64 0, i32 0
	store %..string* %2207, %..string** %2222
	%2223 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2221, i64 0, i32 1
	store i64 3, i64* %2223
	%2224 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2221, i64 0, i32 2
	store i64 3, i64* %2224
	%2225 = getelementptr inbounds %Type_Info, %Type_Info* %2202, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2225
	%2226 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Pointer
	%2227 = bitcast %Type_Info* %2226 to %Type_Info.Pointer*
	%2228 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2229 = bitcast %Type_Info* %2228 to %Type_Info*
	%2230 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2227, i64 0, i32 0
	store %Type_Info* %2229, %Type_Info** %2230
	%2231 = getelementptr inbounds %Type_Info, %Type_Info* %2226, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2231
	%2232 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 109
	; Type_Info_Proc
	%2233 = bitcast %Type_Info* %2232 to %Type_Info.Procedure*
	%2234 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2233, i64 0, i32 0
	%2235 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2233, i64 0, i32 1
	%2236 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2233, i64 0, i32 2
	%2237 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2233, i64 0, i32 3
	%2238 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	%2239 = bitcast %Type_Info* %2238 to %Type_Info*
	store %Type_Info* %2239, %Type_Info** %2234
	store i1 false, i1* %2236
	store i64 1, i64* %2237
	%2240 = getelementptr inbounds %Type_Info, %Type_Info* %2232, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2240
	%2241 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 110
	; Type_Info_Tuple
	%2242 = bitcast %Type_Info* %2241 to %Type_Info.Tuple*
	%2243 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2242, i64 0, i32 0
	%2244 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2243, i64 0, i32 4
	store i64 8, i64* %2244
	%2245 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 117
	%2246 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 117
	%2247 = getelementptr inbounds %Type_Info*, %Type_Info** %2245, i64 0
	%2248 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2248, %Type_Info** %2247
	%2249 = getelementptr inbounds %..string, %..string* %2246, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$302, i64 0, i32 0), i64 6}, %..string* %2249
	%2250 = getelementptr inbounds %Type_Info*, %Type_Info** %2245, i64 1
	%2251 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2251, %Type_Info** %2250
	%2252 = getelementptr inbounds %..string, %..string* %2246, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$303, i64 0, i32 0), i64 9}, %..string* %2252
	%2253 = getelementptr inbounds %Type_Info*, %Type_Info** %2245, i64 2
	%2254 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	store %Type_Info* %2254, %Type_Info** %2253
	%2255 = getelementptr inbounds %..string, %..string* %2246, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$304, i64 0, i32 0), i64 6}, %..string* %2255
	%2256 = getelementptr inbounds %Type_Info*, %Type_Info** %2245, i64 3
	%2257 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2257, %Type_Info** %2256
	%2258 = getelementptr inbounds %..string, %..string* %2246, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$305, i64 0, i32 0), i64 7}, %..string* %2258
	%2259 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2243, i64 0, i32 0
	%2260 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2259, i64 0, i32 0
	store %Type_Info** %2245, %Type_Info*** %2260
	%2261 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2259, i64 0, i32 1
	store i64 4, i64* %2261
	%2262 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2259, i64 0, i32 2
	store i64 4, i64* %2262
	%2263 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2243, i64 0, i32 1
	%2264 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2263, i64 0, i32 0
	store %..string* %2246, %..string** %2264
	%2265 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2263, i64 0, i32 1
	store i64 4, i64* %2265
	%2266 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2263, i64 0, i32 2
	store i64 4, i64* %2266
	%2267 = getelementptr inbounds %Type_Info, %Type_Info* %2241, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2267
	%2268 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Pointer
	%2269 = bitcast %Type_Info* %2268 to %Type_Info.Pointer*
	%2270 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2271 = bitcast %Type_Info* %2270 to %Type_Info*
	%2272 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2269, i64 0, i32 0
	store %Type_Info* %2271, %Type_Info** %2272
	%2273 = getelementptr inbounds %Type_Info, %Type_Info* %2268, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2273
	%2274 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2275 = bitcast %Type_Info* %2274 to %Type_Info.Pointer*
	%2276 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2277 = bitcast %Type_Info* %2276 to %Type_Info*
	%2278 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2275, i64 0, i32 0
	store %Type_Info* %2277, %Type_Info** %2278
	%2279 = getelementptr inbounds %Type_Info, %Type_Info* %2274, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2279
	%2280 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 111
	; Type_Info_Proc
	%2281 = bitcast %Type_Info* %2280 to %Type_Info.Procedure*
	%2282 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2281, i64 0, i32 0
	%2283 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2281, i64 0, i32 1
	%2284 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2281, i64 0, i32 2
	%2285 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2281, i64 0, i32 3
	%2286 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	%2287 = bitcast %Type_Info* %2286 to %Type_Info*
	store %Type_Info* %2287, %Type_Info** %2282
	%2288 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 112
	%2289 = bitcast %Type_Info* %2288 to %Type_Info*
	store %Type_Info* %2289, %Type_Info** %2283
	store i1 false, i1* %2284
	store i64 1, i64* %2285
	%2290 = getelementptr inbounds %Type_Info, %Type_Info* %2280, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2290
	%2291 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 98
	; Type_Info_Tuple
	%2292 = bitcast %Type_Info* %2291 to %Type_Info.Tuple*
	%2293 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2292, i64 0, i32 0
	%2294 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2293, i64 0, i32 4
	store i64 4, i64* %2294
	%2295 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 121
	%2296 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 121
	%2297 = getelementptr inbounds %Type_Info*, %Type_Info** %2295, i64 0
	%2298 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2298, %Type_Info** %2297
	%2299 = getelementptr inbounds %..string, %..string* %2296, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$306, i64 0, i32 0), i64 4}, %..string* %2299
	%2300 = getelementptr inbounds %Type_Info*, %Type_Info** %2295, i64 1
	%2301 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2301, %Type_Info** %2300
	%2302 = getelementptr inbounds %..string, %..string* %2296, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$307, i64 0, i32 0), i64 5}, %..string* %2302
	%2303 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2293, i64 0, i32 0
	%2304 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2303, i64 0, i32 0
	store %Type_Info** %2295, %Type_Info*** %2304
	%2305 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2303, i64 0, i32 1
	store i64 2, i64* %2305
	%2306 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2303, i64 0, i32 2
	store i64 2, i64* %2306
	%2307 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2293, i64 0, i32 1
	%2308 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2307, i64 0, i32 0
	store %..string* %2296, %..string** %2308
	%2309 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2307, i64 0, i32 1
	store i64 2, i64* %2309
	%2310 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2307, i64 0, i32 2
	store i64 2, i64* %2310
	%2311 = getelementptr inbounds %Type_Info, %Type_Info* %2291, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2311
	%2312 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 112
	; Type_Info_Tuple
	%2313 = bitcast %Type_Info* %2312 to %Type_Info.Tuple*
	%2314 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2313, i64 0, i32 0
	%2315 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2314, i64 0, i32 4
	store i64 8, i64* %2315
	%2316 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 123
	%2317 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 123
	%2318 = getelementptr inbounds %Type_Info*, %Type_Info** %2316, i64 0
	%2319 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2319, %Type_Info** %2318
	%2320 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2314, i64 0, i32 0
	%2321 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2320, i64 0, i32 0
	store %Type_Info** %2316, %Type_Info*** %2321
	%2322 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2320, i64 0, i32 1
	store i64 1, i64* %2322
	%2323 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2320, i64 0, i32 2
	store i64 1, i64* %2323
	%2324 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2314, i64 0, i32 1
	%2325 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2324, i64 0, i32 0
	store %..string* %2317, %..string** %2325
	%2326 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2324, i64 0, i32 1
	store i64 1, i64* %2326
	%2327 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2324, i64 0, i32 2
	store i64 1, i64* %2327
	%2328 = getelementptr inbounds %Type_Info, %Type_Info* %2312, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2328
	%2329 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2330 = bitcast %Type_Info* %2329 to %Type_Info.Pointer*
	%2331 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2332 = bitcast %Type_Info* %2331 to %Type_Info*
	%2333 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2330, i64 0, i32 0
	store %Type_Info* %2332, %Type_Info** %2333
	%2334 = getelementptr inbounds %Type_Info, %Type_Info* %2329, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2334
	%2335 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	; Type_Info_Proc
	%2336 = bitcast %Type_Info* %2335 to %Type_Info.Procedure*
	%2337 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2336, i64 0, i32 0
	%2338 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2336, i64 0, i32 1
	%2339 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2336, i64 0, i32 2
	%2340 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2336, i64 0, i32 3
	%2341 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%2342 = bitcast %Type_Info* %2341 to %Type_Info*
	store %Type_Info* %2342, %Type_Info** %2337
	store i1 false, i1* %2339
	store i64 1, i64* %2340
	%2343 = getelementptr inbounds %Type_Info, %Type_Info* %2335, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2343
	%2344 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	; Type_Info_Tuple
	%2345 = bitcast %Type_Info* %2344 to %Type_Info.Tuple*
	%2346 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2345, i64 0, i32 0
	%2347 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2346, i64 0, i32 4
	store i64 4, i64* %2347
	%2348 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 124
	%2349 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 124
	%2350 = getelementptr inbounds %Type_Info*, %Type_Info** %2348, i64 0
	%2351 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2351, %Type_Info** %2350
	%2352 = getelementptr inbounds %..string, %..string* %2349, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$308, i64 0, i32 0), i64 4}, %..string* %2352
	%2353 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2346, i64 0, i32 0
	%2354 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2353, i64 0, i32 0
	store %Type_Info** %2348, %Type_Info*** %2354
	%2355 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2353, i64 0, i32 1
	store i64 1, i64* %2355
	%2356 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2353, i64 0, i32 2
	store i64 1, i64* %2356
	%2357 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2346, i64 0, i32 1
	%2358 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2357, i64 0, i32 0
	store %..string* %2349, %..string** %2358
	%2359 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2357, i64 0, i32 1
	store i64 1, i64* %2359
	%2360 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2357, i64 0, i32 2
	store i64 1, i64* %2360
	%2361 = getelementptr inbounds %Type_Info, %Type_Info* %2344, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2361
	%2362 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	; Type_Info_Proc
	%2363 = bitcast %Type_Info* %2362 to %Type_Info.Procedure*
	%2364 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2363, i64 0, i32 0
	%2365 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2363, i64 0, i32 1
	%2366 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2363, i64 0, i32 2
	%2367 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2363, i64 0, i32 3
	%2368 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	%2369 = bitcast %Type_Info* %2368 to %Type_Info*
	store %Type_Info* %2369, %Type_Info** %2364
	store i1 false, i1* %2366
	store i64 1, i64* %2367
	%2370 = getelementptr inbounds %Type_Info, %Type_Info* %2362, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2370
	%2371 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	; Type_Info_Tuple
	%2372 = bitcast %Type_Info* %2371 to %Type_Info.Tuple*
	%2373 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2372, i64 0, i32 0
	%2374 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2373, i64 0, i32 4
	store i64 4, i64* %2374
	%2375 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 125
	%2376 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 125
	%2377 = getelementptr inbounds %Type_Info*, %Type_Info** %2375, i64 0
	%2378 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2378, %Type_Info** %2377
	%2379 = getelementptr inbounds %..string, %..string* %2376, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$309, i64 0, i32 0), i64 7}, %..string* %2379
	%2380 = getelementptr inbounds %Type_Info*, %Type_Info** %2375, i64 1
	%2381 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2381, %Type_Info** %2380
	%2382 = getelementptr inbounds %..string, %..string* %2376, i64 1
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$30a, i64 0, i32 0), i64 9}, %..string* %2382
	%2383 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2373, i64 0, i32 0
	%2384 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2383, i64 0, i32 0
	store %Type_Info** %2375, %Type_Info*** %2384
	%2385 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2383, i64 0, i32 1
	store i64 2, i64* %2385
	%2386 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2383, i64 0, i32 2
	store i64 2, i64* %2386
	%2387 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2373, i64 0, i32 1
	%2388 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2387, i64 0, i32 0
	store %..string* %2376, %..string** %2388
	%2389 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2387, i64 0, i32 1
	store i64 2, i64* %2389
	%2390 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2387, i64 0, i32 2
	store i64 2, i64* %2390
	%2391 = getelementptr inbounds %Type_Info, %Type_Info* %2371, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2391
	%2392 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Proc
	%2393 = bitcast %Type_Info* %2392 to %Type_Info.Procedure*
	%2394 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2393, i64 0, i32 0
	%2395 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2393, i64 0, i32 1
	%2396 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2393, i64 0, i32 2
	%2397 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2393, i64 0, i32 3
	%2398 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%2399 = bitcast %Type_Info* %2398 to %Type_Info*
	store %Type_Info* %2399, %Type_Info** %2394
	store i1 false, i1* %2396
	store i64 1, i64* %2397
	%2400 = getelementptr inbounds %Type_Info, %Type_Info* %2392, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2400
	%2401 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%2402 = bitcast %Type_Info* %2401 to %Type_Info.Tuple*
	%2403 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2402, i64 0, i32 0
	%2404 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2403, i64 0, i32 4
	store i64 4, i64* %2404
	%2405 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 127
	%2406 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 127
	%2407 = getelementptr inbounds %Type_Info*, %Type_Info** %2405, i64 0
	%2408 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2408, %Type_Info** %2407
	%2409 = getelementptr inbounds %..string, %..string* %2406, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$30b, i64 0, i32 0), i64 6}, %..string* %2409
	%2410 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2403, i64 0, i32 0
	%2411 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2410, i64 0, i32 0
	store %Type_Info** %2405, %Type_Info*** %2411
	%2412 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2410, i64 0, i32 1
	store i64 1, i64* %2412
	%2413 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2410, i64 0, i32 2
	store i64 1, i64* %2413
	%2414 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2403, i64 0, i32 1
	%2415 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2414, i64 0, i32 0
	store %..string* %2406, %..string** %2415
	%2416 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2414, i64 0, i32 1
	store i64 1, i64* %2416
	%2417 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2414, i64 0, i32 2
	store i64 1, i64* %2417
	%2418 = getelementptr inbounds %Type_Info, %Type_Info* %2401, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2418
	%2419 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 117
	; Type_Info_Proc
	%2420 = bitcast %Type_Info* %2419 to %Type_Info.Procedure*
	%2421 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 0
	%2422 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 1
	%2423 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 2
	%2424 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2420, i64 0, i32 3
	%2425 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%2426 = bitcast %Type_Info* %2425 to %Type_Info*
	store %Type_Info* %2426, %Type_Info** %2421
	%2427 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%2428 = bitcast %Type_Info* %2427 to %Type_Info*
	store %Type_Info* %2428, %Type_Info** %2422
	store i1 false, i1* %2423
	store i64 1, i64* %2424
	%2429 = getelementptr inbounds %Type_Info, %Type_Info* %2419, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2429
	%2430 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	; Type_Info_Tuple
	%2431 = bitcast %Type_Info* %2430 to %Type_Info.Tuple*
	%2432 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2431, i64 0, i32 0
	%2433 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2432, i64 0, i32 4
	store i64 4, i64* %2433
	%2434 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 128
	%2435 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 128
	%2436 = getelementptr inbounds %Type_Info*, %Type_Info** %2434, i64 0
	%2437 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2437, %Type_Info** %2436
	%2438 = getelementptr inbounds %..string, %..string* %2435, i64 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$30c, i64 0, i32 0), i64 11}, %..string* %2438
	%2439 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2432, i64 0, i32 0
	%2440 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2439, i64 0, i32 0
	store %Type_Info** %2434, %Type_Info*** %2440
	%2441 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2439, i64 0, i32 1
	store i64 1, i64* %2441
	%2442 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2439, i64 0, i32 2
	store i64 1, i64* %2442
	%2443 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2432, i64 0, i32 1
	%2444 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2443, i64 0, i32 0
	store %..string* %2435, %..string** %2444
	%2445 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2443, i64 0, i32 1
	store i64 1, i64* %2445
	%2446 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2443, i64 0, i32 2
	store i64 1, i64* %2446
	%2447 = getelementptr inbounds %Type_Info, %Type_Info* %2430, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2447
	%2448 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%2449 = bitcast %Type_Info* %2448 to %Type_Info.Tuple*
	%2450 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2449, i64 0, i32 0
	%2451 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2450, i64 0, i32 4
	store i64 4, i64* %2451
	%2452 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 129
	%2453 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 129
	%2454 = getelementptr inbounds %Type_Info*, %Type_Info** %2452, i64 0
	%2455 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2455, %Type_Info** %2454
	%2456 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2450, i64 0, i32 0
	%2457 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2456, i64 0, i32 0
	store %Type_Info** %2452, %Type_Info*** %2457
	%2458 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2456, i64 0, i32 1
	store i64 1, i64* %2458
	%2459 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2456, i64 0, i32 2
	store i64 1, i64* %2459
	%2460 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2450, i64 0, i32 1
	%2461 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2460, i64 0, i32 0
	store %..string* %2453, %..string** %2461
	%2462 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2460, i64 0, i32 1
	store i64 1, i64* %2462
	%2463 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2460, i64 0, i32 2
	store i64 1, i64* %2463
	%2464 = getelementptr inbounds %Type_Info, %Type_Info* %2448, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2464
	%2465 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 118
	; Type_Info_Proc
	%2466 = bitcast %Type_Info* %2465 to %Type_Info.Procedure*
	%2467 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2466, i64 0, i32 0
	%2468 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2466, i64 0, i32 1
	%2469 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2466, i64 0, i32 2
	%2470 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2466, i64 0, i32 3
	%2471 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 119
	%2472 = bitcast %Type_Info* %2471 to %Type_Info*
	store %Type_Info* %2472, %Type_Info** %2467
	store i1 false, i1* %2469
	store i64 1, i64* %2470
	%2473 = getelementptr inbounds %Type_Info, %Type_Info* %2465, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2473
	%2474 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 119
	; Type_Info_Tuple
	%2475 = bitcast %Type_Info* %2474 to %Type_Info.Tuple*
	%2476 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2475, i64 0, i32 0
	%2477 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2476, i64 0, i32 4
	store i64 8, i64* %2477
	%2478 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 130
	%2479 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 130
	%2480 = getelementptr inbounds %Type_Info*, %Type_Info** %2478, i64 0
	%2481 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2481, %Type_Info** %2480
	%2482 = getelementptr inbounds %..string, %..string* %2479, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$30d, i64 0, i32 0), i64 6}, %..string* %2482
	%2483 = getelementptr inbounds %Type_Info*, %Type_Info** %2478, i64 1
	%2484 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2484, %Type_Info** %2483
	%2485 = getelementptr inbounds %..string, %..string* %2479, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$30e, i64 0, i32 0), i64 5}, %..string* %2485
	%2486 = getelementptr inbounds %Type_Info*, %Type_Info** %2478, i64 2
	%2487 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 120
	store %Type_Info* %2487, %Type_Info** %2486
	%2488 = getelementptr inbounds %..string, %..string* %2479, i64 2
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$30f, i64 0, i32 0), i64 3}, %..string* %2488
	%2489 = getelementptr inbounds %Type_Info*, %Type_Info** %2478, i64 3
	%2490 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	store %Type_Info* %2490, %Type_Info** %2489
	%2491 = getelementptr inbounds %..string, %..string* %2479, i64 3
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$310, i64 0, i32 0), i64 6}, %..string* %2491
	%2492 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2476, i64 0, i32 0
	%2493 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2492, i64 0, i32 0
	store %Type_Info** %2478, %Type_Info*** %2493
	%2494 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2492, i64 0, i32 1
	store i64 4, i64* %2494
	%2495 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2492, i64 0, i32 2
	store i64 4, i64* %2495
	%2496 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2476, i64 0, i32 1
	%2497 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2496, i64 0, i32 0
	store %..string* %2479, %..string** %2497
	%2498 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2496, i64 0, i32 1
	store i64 4, i64* %2498
	%2499 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2496, i64 0, i32 2
	store i64 4, i64* %2499
	%2500 = getelementptr inbounds %Type_Info, %Type_Info* %2474, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2500
	%2501 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 120
	; Type_Info_Pointer
	%2502 = bitcast %Type_Info* %2501 to %Type_Info.Pointer*
	%2503 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	%2504 = bitcast %Type_Info* %2503 to %Type_Info*
	%2505 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2502, i64 0, i32 0
	store %Type_Info* %2504, %Type_Info** %2505
	%2506 = getelementptr inbounds %Type_Info, %Type_Info* %2501, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2506
	%2507 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%2508 = bitcast %Type_Info* %2507 to %Type_Info.Pointer*
	%2509 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%2510 = bitcast %Type_Info* %2509 to %Type_Info*
	%2511 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2508, i64 0, i32 0
	store %Type_Info* %2510, %Type_Info** %2511
	%2512 = getelementptr inbounds %Type_Info, %Type_Info* %2507, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2512
	%2513 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 108
	; Type_Info_Pointer
	%2514 = bitcast %Type_Info* %2513 to %Type_Info.Pointer*
	%2515 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	%2516 = bitcast %Type_Info* %2515 to %Type_Info*
	%2517 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2514, i64 0, i32 0
	store %Type_Info* %2516, %Type_Info** %2517
	%2518 = getelementptr inbounds %Type_Info, %Type_Info* %2513, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2518
	%2519 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 121
	; Type_Info_Proc
	%2520 = bitcast %Type_Info* %2519 to %Type_Info.Procedure*
	%2521 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2520, i64 0, i32 0
	%2522 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2520, i64 0, i32 1
	%2523 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2520, i64 0, i32 2
	%2524 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2520, i64 0, i32 3
	%2525 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 122
	%2526 = bitcast %Type_Info* %2525 to %Type_Info*
	store %Type_Info* %2526, %Type_Info** %2521
	store i1 false, i1* %2523
	store i64 1, i64* %2524
	%2527 = getelementptr inbounds %Type_Info, %Type_Info* %2519, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2527
	%2528 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 122
	; Type_Info_Tuple
	%2529 = bitcast %Type_Info* %2528 to %Type_Info.Tuple*
	%2530 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2529, i64 0, i32 0
	%2531 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2530, i64 0, i32 4
	store i64 4, i64* %2531
	%2532 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 134
	%2533 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 134
	%2534 = getelementptr inbounds %Type_Info*, %Type_Info** %2532, i64 0
	%2535 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2535, %Type_Info** %2534
	%2536 = getelementptr inbounds %..string, %..string* %2533, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$311, i64 0, i32 0), i64 7}, %..string* %2536
	%2537 = getelementptr inbounds %Type_Info*, %Type_Info** %2532, i64 1
	%2538 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2538, %Type_Info** %2537
	%2539 = getelementptr inbounds %..string, %..string* %2533, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$312, i64 0, i32 0), i64 6}, %..string* %2539
	%2540 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2530, i64 0, i32 0
	%2541 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2540, i64 0, i32 0
	store %Type_Info** %2532, %Type_Info*** %2541
	%2542 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2540, i64 0, i32 1
	store i64 2, i64* %2542
	%2543 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2540, i64 0, i32 2
	store i64 2, i64* %2543
	%2544 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2530, i64 0, i32 1
	%2545 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2544, i64 0, i32 0
	store %..string* %2533, %..string** %2545
	%2546 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2544, i64 0, i32 1
	store i64 2, i64* %2546
	%2547 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2544, i64 0, i32 2
	store i64 2, i64* %2547
	%2548 = getelementptr inbounds %Type_Info, %Type_Info* %2528, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2548
	%2549 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 123
	; Type_Info_Proc
	%2550 = bitcast %Type_Info* %2549 to %Type_Info.Procedure*
	%2551 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2550, i64 0, i32 0
	%2552 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2550, i64 0, i32 1
	%2553 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2550, i64 0, i32 2
	%2554 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2550, i64 0, i32 3
	%2555 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%2556 = bitcast %Type_Info* %2555 to %Type_Info*
	store %Type_Info* %2556, %Type_Info** %2552
	store i1 false, i1* %2553
	store i64 1, i64* %2554
	%2557 = getelementptr inbounds %Type_Info, %Type_Info* %2549, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2557
	%2558 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%2559 = bitcast %Type_Info* %2558 to %Type_Info.Tuple*
	%2560 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2559, i64 0, i32 0
	%2561 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2560, i64 0, i32 4
	store i64 4, i64* %2561
	%2562 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 136
	%2563 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 136
	%2564 = getelementptr inbounds %Type_Info*, %Type_Info** %2562, i64 0
	%2565 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2565, %Type_Info** %2564
	%2566 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2560, i64 0, i32 0
	%2567 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2566, i64 0, i32 0
	store %Type_Info** %2562, %Type_Info*** %2567
	%2568 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2566, i64 0, i32 1
	store i64 1, i64* %2568
	%2569 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2566, i64 0, i32 2
	store i64 1, i64* %2569
	%2570 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2560, i64 0, i32 1
	%2571 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2570, i64 0, i32 0
	store %..string* %2563, %..string** %2571
	%2572 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2570, i64 0, i32 1
	store i64 1, i64* %2572
	%2573 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2570, i64 0, i32 2
	store i64 1, i64* %2573
	%2574 = getelementptr inbounds %Type_Info, %Type_Info* %2558, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2574
	%2575 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Proc
	%2576 = bitcast %Type_Info* %2575 to %Type_Info.Procedure*
	%2577 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2576, i64 0, i32 0
	%2578 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2576, i64 0, i32 1
	%2579 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2576, i64 0, i32 2
	%2580 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2576, i64 0, i32 3
	%2581 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%2582 = bitcast %Type_Info* %2581 to %Type_Info*
	store %Type_Info* %2582, %Type_Info** %2577
	store i1 false, i1* %2579
	store i64 1, i64* %2580
	%2583 = getelementptr inbounds %Type_Info, %Type_Info* %2575, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2583
	%2584 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%2585 = bitcast %Type_Info* %2584 to %Type_Info.Tuple*
	%2586 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2585, i64 0, i32 0
	%2587 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2586, i64 0, i32 4
	store i64 4, i64* %2587
	%2588 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 137
	%2589 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 137
	%2590 = getelementptr inbounds %Type_Info*, %Type_Info** %2588, i64 0
	%2591 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2591, %Type_Info** %2590
	%2592 = getelementptr inbounds %..string, %..string* %2589, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$313, i64 0, i32 0), i64 7}, %..string* %2592
	%2593 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2586, i64 0, i32 0
	%2594 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2593, i64 0, i32 0
	store %Type_Info** %2588, %Type_Info*** %2594
	%2595 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2593, i64 0, i32 1
	store i64 1, i64* %2595
	%2596 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2593, i64 0, i32 2
	store i64 1, i64* %2596
	%2597 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2586, i64 0, i32 1
	%2598 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2597, i64 0, i32 0
	store %..string* %2589, %..string** %2598
	%2599 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2597, i64 0, i32 1
	store i64 1, i64* %2599
	%2600 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2597, i64 0, i32 2
	store i64 1, i64* %2600
	%2601 = getelementptr inbounds %Type_Info, %Type_Info* %2584, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2601
	%2602 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 88
	; Type_Info_Proc
	%2603 = bitcast %Type_Info* %2602 to %Type_Info.Procedure*
	%2604 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2603, i64 0, i32 0
	%2605 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2603, i64 0, i32 1
	%2606 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2603, i64 0, i32 2
	%2607 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2603, i64 0, i32 3
	%2608 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	%2609 = bitcast %Type_Info* %2608 to %Type_Info*
	store %Type_Info* %2609, %Type_Info** %2604
	store i1 false, i1* %2606
	store i64 1, i64* %2607
	%2610 = getelementptr inbounds %Type_Info, %Type_Info* %2602, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2610
	%2611 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 89
	; Type_Info_Tuple
	%2612 = bitcast %Type_Info* %2611 to %Type_Info.Tuple*
	%2613 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2612, i64 0, i32 0
	%2614 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2613, i64 0, i32 4
	store i64 4, i64* %2614
	%2615 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 138
	%2616 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 138
	%2617 = getelementptr inbounds %Type_Info*, %Type_Info** %2615, i64 0
	%2618 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2618, %Type_Info** %2617
	%2619 = getelementptr inbounds %..string, %..string* %2616, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$314, i64 0, i32 0), i64 7}, %..string* %2619
	%2620 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2613, i64 0, i32 0
	%2621 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2620, i64 0, i32 0
	store %Type_Info** %2615, %Type_Info*** %2621
	%2622 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2620, i64 0, i32 1
	store i64 1, i64* %2622
	%2623 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2620, i64 0, i32 2
	store i64 1, i64* %2623
	%2624 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2613, i64 0, i32 1
	%2625 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2624, i64 0, i32 0
	store %..string* %2616, %..string** %2625
	%2626 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2624, i64 0, i32 1
	store i64 1, i64* %2626
	%2627 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2624, i64 0, i32 2
	store i64 1, i64* %2627
	%2628 = getelementptr inbounds %Type_Info, %Type_Info* %2611, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2628
	%2629 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 113
	; Type_Info_Proc
	%2630 = bitcast %Type_Info* %2629 to %Type_Info.Procedure*
	%2631 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2630, i64 0, i32 0
	%2632 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2630, i64 0, i32 1
	%2633 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2630, i64 0, i32 2
	%2634 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2630, i64 0, i32 3
	%2635 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%2636 = bitcast %Type_Info* %2635 to %Type_Info*
	store %Type_Info* %2636, %Type_Info** %2631
	store i1 false, i1* %2633
	store i64 1, i64* %2634
	%2637 = getelementptr inbounds %Type_Info, %Type_Info* %2629, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2637
	%2638 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	; Type_Info_Tuple
	%2639 = bitcast %Type_Info* %2638 to %Type_Info.Tuple*
	%2640 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2639, i64 0, i32 0
	%2641 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2640, i64 0, i32 4
	store i64 4, i64* %2641
	%2642 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 139
	%2643 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 139
	%2644 = getelementptr inbounds %Type_Info*, %Type_Info** %2642, i64 0
	%2645 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2645, %Type_Info** %2644
	%2646 = getelementptr inbounds %..string, %..string* %2643, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$315, i64 0, i32 0), i64 7}, %..string* %2646
	%2647 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2640, i64 0, i32 0
	%2648 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2647, i64 0, i32 0
	store %Type_Info** %2642, %Type_Info*** %2648
	%2649 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2647, i64 0, i32 1
	store i64 1, i64* %2649
	%2650 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2647, i64 0, i32 2
	store i64 1, i64* %2650
	%2651 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2640, i64 0, i32 1
	%2652 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2651, i64 0, i32 0
	store %..string* %2643, %..string** %2652
	%2653 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2651, i64 0, i32 1
	store i64 1, i64* %2653
	%2654 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2651, i64 0, i32 2
	store i64 1, i64* %2654
	%2655 = getelementptr inbounds %Type_Info, %Type_Info* %2638, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2655
	%2656 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 115
	; Type_Info_Proc
	%2657 = bitcast %Type_Info* %2656 to %Type_Info.Procedure*
	%2658 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2657, i64 0, i32 0
	%2659 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2657, i64 0, i32 1
	%2660 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2657, i64 0, i32 2
	%2661 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2657, i64 0, i32 3
	%2662 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	%2663 = bitcast %Type_Info* %2662 to %Type_Info*
	store %Type_Info* %2663, %Type_Info** %2658
	store i1 false, i1* %2660
	store i64 1, i64* %2661
	%2664 = getelementptr inbounds %Type_Info, %Type_Info* %2656, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2664
	%2665 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 116
	; Type_Info_Tuple
	%2666 = bitcast %Type_Info* %2665 to %Type_Info.Tuple*
	%2667 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2666, i64 0, i32 0
	%2668 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2667, i64 0, i32 4
	store i64 4, i64* %2668
	%2669 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 140
	%2670 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 140
	%2671 = getelementptr inbounds %Type_Info*, %Type_Info** %2669, i64 0
	%2672 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2672, %Type_Info** %2671
	%2673 = getelementptr inbounds %..string, %..string* %2670, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$316, i64 0, i32 0), i64 3}, %..string* %2673
	%2674 = getelementptr inbounds %Type_Info*, %Type_Info** %2669, i64 1
	%2675 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2675, %Type_Info** %2674
	%2676 = getelementptr inbounds %..string, %..string* %2670, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$317, i64 0, i32 0), i64 2}, %..string* %2676
	%2677 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2667, i64 0, i32 0
	%2678 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2677, i64 0, i32 0
	store %Type_Info** %2669, %Type_Info*** %2678
	%2679 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2677, i64 0, i32 1
	store i64 2, i64* %2679
	%2680 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2677, i64 0, i32 2
	store i64 2, i64* %2680
	%2681 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2667, i64 0, i32 1
	%2682 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2681, i64 0, i32 0
	store %..string* %2670, %..string** %2682
	%2683 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2681, i64 0, i32 1
	store i64 2, i64* %2683
	%2684 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2681, i64 0, i32 2
	store i64 2, i64* %2684
	%2685 = getelementptr inbounds %Type_Info, %Type_Info* %2665, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2685
	%2686 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 124
	; Type_Info_Proc
	%2687 = bitcast %Type_Info* %2686 to %Type_Info.Procedure*
	%2688 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2687, i64 0, i32 0
	%2689 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2687, i64 0, i32 1
	%2690 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2687, i64 0, i32 2
	%2691 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2687, i64 0, i32 3
	%2692 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 125
	%2693 = bitcast %Type_Info* %2692 to %Type_Info*
	store %Type_Info* %2693, %Type_Info** %2688
	store i1 false, i1* %2690
	store i64 1, i64* %2691
	%2694 = getelementptr inbounds %Type_Info, %Type_Info* %2686, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2694
	%2695 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 125
	; Type_Info_Tuple
	%2696 = bitcast %Type_Info* %2695 to %Type_Info.Tuple*
	%2697 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2696, i64 0, i32 0
	%2698 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2697, i64 0, i32 4
	store i64 4, i64* %2698
	%2699 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 142
	%2700 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 142
	%2701 = getelementptr inbounds %Type_Info*, %Type_Info** %2699, i64 0
	%2702 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2702, %Type_Info** %2701
	%2703 = getelementptr inbounds %..string, %..string* %2700, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$318, i64 0, i32 0), i64 3}, %..string* %2703
	%2704 = getelementptr inbounds %Type_Info*, %Type_Info** %2699, i64 1
	%2705 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2705, %Type_Info** %2704
	%2706 = getelementptr inbounds %..string, %..string* %2700, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$319, i64 0, i32 0), i64 2}, %..string* %2706
	%2707 = getelementptr inbounds %Type_Info*, %Type_Info** %2699, i64 2
	%2708 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2708, %Type_Info** %2707
	%2709 = getelementptr inbounds %..string, %..string* %2700, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$31a, i64 0, i32 0), i64 2}, %..string* %2709
	%2710 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2697, i64 0, i32 0
	%2711 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2710, i64 0, i32 0
	store %Type_Info** %2699, %Type_Info*** %2711
	%2712 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2710, i64 0, i32 1
	store i64 3, i64* %2712
	%2713 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2710, i64 0, i32 2
	store i64 3, i64* %2713
	%2714 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2697, i64 0, i32 1
	%2715 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2714, i64 0, i32 0
	store %..string* %2700, %..string** %2715
	%2716 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2714, i64 0, i32 1
	store i64 3, i64* %2716
	%2717 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2714, i64 0, i32 2
	store i64 3, i64* %2717
	%2718 = getelementptr inbounds %Type_Info, %Type_Info* %2695, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2718
	%2719 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 126
	; Type_Info_Proc
	%2720 = bitcast %Type_Info* %2719 to %Type_Info.Procedure*
	%2721 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2720, i64 0, i32 0
	%2722 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2720, i64 0, i32 1
	%2723 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2720, i64 0, i32 2
	%2724 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2720, i64 0, i32 3
	%2725 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 127
	%2726 = bitcast %Type_Info* %2725 to %Type_Info*
	store %Type_Info* %2726, %Type_Info** %2721
	store i1 false, i1* %2723
	store i64 1, i64* %2724
	%2727 = getelementptr inbounds %Type_Info, %Type_Info* %2719, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2727
	%2728 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 127
	; Type_Info_Tuple
	%2729 = bitcast %Type_Info* %2728 to %Type_Info.Tuple*
	%2730 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2729, i64 0, i32 0
	%2731 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2730, i64 0, i32 4
	store i64 4, i64* %2731
	%2732 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 145
	%2733 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 145
	%2734 = getelementptr inbounds %Type_Info*, %Type_Info** %2732, i64 0
	%2735 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2735, %Type_Info** %2734
	%2736 = getelementptr inbounds %..string, %..string* %2733, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$31b, i64 0, i32 0), i64 3}, %..string* %2736
	%2737 = getelementptr inbounds %Type_Info*, %Type_Info** %2732, i64 1
	%2738 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2738, %Type_Info** %2737
	%2739 = getelementptr inbounds %..string, %..string* %2733, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$31c, i64 0, i32 0), i64 2}, %..string* %2739
	%2740 = getelementptr inbounds %Type_Info*, %Type_Info** %2732, i64 2
	%2741 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2741, %Type_Info** %2740
	%2742 = getelementptr inbounds %..string, %..string* %2733, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$31d, i64 0, i32 0), i64 2}, %..string* %2742
	%2743 = getelementptr inbounds %Type_Info*, %Type_Info** %2732, i64 3
	%2744 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2744, %Type_Info** %2743
	%2745 = getelementptr inbounds %..string, %..string* %2733, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$31e, i64 0, i32 0), i64 2}, %..string* %2745
	%2746 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2730, i64 0, i32 0
	%2747 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2746, i64 0, i32 0
	store %Type_Info** %2732, %Type_Info*** %2747
	%2748 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2746, i64 0, i32 1
	store i64 4, i64* %2748
	%2749 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2746, i64 0, i32 2
	store i64 4, i64* %2749
	%2750 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2730, i64 0, i32 1
	%2751 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2750, i64 0, i32 0
	store %..string* %2733, %..string** %2751
	%2752 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2750, i64 0, i32 1
	store i64 4, i64* %2752
	%2753 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2750, i64 0, i32 2
	store i64 4, i64* %2753
	%2754 = getelementptr inbounds %Type_Info, %Type_Info* %2728, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2754
	%2755 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 128
	; Type_Info_Proc
	%2756 = bitcast %Type_Info* %2755 to %Type_Info.Procedure*
	%2757 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2756, i64 0, i32 0
	%2758 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2756, i64 0, i32 1
	%2759 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2756, i64 0, i32 2
	%2760 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2756, i64 0, i32 3
	%2761 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	%2762 = bitcast %Type_Info* %2761 to %Type_Info*
	store %Type_Info* %2762, %Type_Info** %2757
	store i1 false, i1* %2759
	store i64 1, i64* %2760
	%2763 = getelementptr inbounds %Type_Info, %Type_Info* %2755, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2763
	%2764 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 129
	; Type_Info_Tuple
	%2765 = bitcast %Type_Info* %2764 to %Type_Info.Tuple*
	%2766 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2765, i64 0, i32 0
	%2767 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2766, i64 0, i32 4
	store i64 4, i64* %2767
	%2768 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 149
	%2769 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 149
	%2770 = getelementptr inbounds %Type_Info*, %Type_Info** %2768, i64 0
	%2771 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2771, %Type_Info** %2770
	%2772 = getelementptr inbounds %..string, %..string* %2769, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$31f, i64 0, i32 0), i64 3}, %..string* %2772
	%2773 = getelementptr inbounds %Type_Info*, %Type_Info** %2768, i64 1
	%2774 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2774, %Type_Info** %2773
	%2775 = getelementptr inbounds %..string, %..string* %2769, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$320, i64 0, i32 0), i64 2}, %..string* %2775
	%2776 = getelementptr inbounds %Type_Info*, %Type_Info** %2768, i64 2
	%2777 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2777, %Type_Info** %2776
	%2778 = getelementptr inbounds %..string, %..string* %2769, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$321, i64 0, i32 0), i64 2}, %..string* %2778
	%2779 = getelementptr inbounds %Type_Info*, %Type_Info** %2768, i64 3
	%2780 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2780, %Type_Info** %2779
	%2781 = getelementptr inbounds %..string, %..string* %2769, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$322, i64 0, i32 0), i64 2}, %..string* %2781
	%2782 = getelementptr inbounds %Type_Info*, %Type_Info** %2768, i64 4
	%2783 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2783, %Type_Info** %2782
	%2784 = getelementptr inbounds %..string, %..string* %2769, i64 4
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$323, i64 0, i32 0), i64 2}, %..string* %2784
	%2785 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2766, i64 0, i32 0
	%2786 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2785, i64 0, i32 0
	store %Type_Info** %2768, %Type_Info*** %2786
	%2787 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2785, i64 0, i32 1
	store i64 5, i64* %2787
	%2788 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2785, i64 0, i32 2
	store i64 5, i64* %2788
	%2789 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2766, i64 0, i32 1
	%2790 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2789, i64 0, i32 0
	store %..string* %2769, %..string** %2790
	%2791 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2789, i64 0, i32 1
	store i64 5, i64* %2791
	%2792 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2789, i64 0, i32 2
	store i64 5, i64* %2792
	%2793 = getelementptr inbounds %Type_Info, %Type_Info* %2764, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2793
	%2794 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 130
	; Type_Info_Proc
	%2795 = bitcast %Type_Info* %2794 to %Type_Info.Procedure*
	%2796 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2795, i64 0, i32 0
	%2797 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2795, i64 0, i32 1
	%2798 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2795, i64 0, i32 2
	%2799 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2795, i64 0, i32 3
	%2800 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	%2801 = bitcast %Type_Info* %2800 to %Type_Info*
	store %Type_Info* %2801, %Type_Info** %2796
	store i1 false, i1* %2798
	store i64 1, i64* %2799
	%2802 = getelementptr inbounds %Type_Info, %Type_Info* %2794, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2802
	%2803 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 131
	; Type_Info_Tuple
	%2804 = bitcast %Type_Info* %2803 to %Type_Info.Tuple*
	%2805 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2804, i64 0, i32 0
	%2806 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2805, i64 0, i32 4
	store i64 4, i64* %2806
	%2807 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 154
	%2808 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 154
	%2809 = getelementptr inbounds %Type_Info*, %Type_Info** %2807, i64 0
	%2810 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2810, %Type_Info** %2809
	%2811 = getelementptr inbounds %..string, %..string* %2808, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$324, i64 0, i32 0), i64 3}, %..string* %2811
	%2812 = getelementptr inbounds %Type_Info*, %Type_Info** %2807, i64 1
	%2813 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2813, %Type_Info** %2812
	%2814 = getelementptr inbounds %..string, %..string* %2808, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$325, i64 0, i32 0), i64 2}, %..string* %2814
	%2815 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2805, i64 0, i32 0
	%2816 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2815, i64 0, i32 0
	store %Type_Info** %2807, %Type_Info*** %2816
	%2817 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2815, i64 0, i32 1
	store i64 2, i64* %2817
	%2818 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2815, i64 0, i32 2
	store i64 2, i64* %2818
	%2819 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2805, i64 0, i32 1
	%2820 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2819, i64 0, i32 0
	store %..string* %2808, %..string** %2820
	%2821 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2819, i64 0, i32 1
	store i64 2, i64* %2821
	%2822 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2819, i64 0, i32 2
	store i64 2, i64* %2822
	%2823 = getelementptr inbounds %Type_Info, %Type_Info* %2803, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2823
	%2824 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 132
	; Type_Info_Proc
	%2825 = bitcast %Type_Info* %2824 to %Type_Info.Procedure*
	%2826 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2825, i64 0, i32 0
	%2827 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2825, i64 0, i32 1
	%2828 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2825, i64 0, i32 2
	%2829 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2825, i64 0, i32 3
	%2830 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 133
	%2831 = bitcast %Type_Info* %2830 to %Type_Info*
	store %Type_Info* %2831, %Type_Info** %2826
	store i1 false, i1* %2828
	store i64 1, i64* %2829
	%2832 = getelementptr inbounds %Type_Info, %Type_Info* %2824, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2832
	%2833 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 133
	; Type_Info_Tuple
	%2834 = bitcast %Type_Info* %2833 to %Type_Info.Tuple*
	%2835 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2834, i64 0, i32 0
	%2836 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2835, i64 0, i32 4
	store i64 4, i64* %2836
	%2837 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 156
	%2838 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 156
	%2839 = getelementptr inbounds %Type_Info*, %Type_Info** %2837, i64 0
	%2840 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2840, %Type_Info** %2839
	%2841 = getelementptr inbounds %..string, %..string* %2838, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$326, i64 0, i32 0), i64 3}, %..string* %2841
	%2842 = getelementptr inbounds %Type_Info*, %Type_Info** %2837, i64 1
	%2843 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2843, %Type_Info** %2842
	%2844 = getelementptr inbounds %..string, %..string* %2838, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$327, i64 0, i32 0), i64 2}, %..string* %2844
	%2845 = getelementptr inbounds %Type_Info*, %Type_Info** %2837, i64 2
	%2846 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2846, %Type_Info** %2845
	%2847 = getelementptr inbounds %..string, %..string* %2838, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$328, i64 0, i32 0), i64 2}, %..string* %2847
	%2848 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2835, i64 0, i32 0
	%2849 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2848, i64 0, i32 0
	store %Type_Info** %2837, %Type_Info*** %2849
	%2850 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2848, i64 0, i32 1
	store i64 3, i64* %2850
	%2851 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2848, i64 0, i32 2
	store i64 3, i64* %2851
	%2852 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2835, i64 0, i32 1
	%2853 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2852, i64 0, i32 0
	store %..string* %2838, %..string** %2853
	%2854 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2852, i64 0, i32 1
	store i64 3, i64* %2854
	%2855 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2852, i64 0, i32 2
	store i64 3, i64* %2855
	%2856 = getelementptr inbounds %Type_Info, %Type_Info* %2833, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2856
	%2857 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 134
	; Type_Info_Proc
	%2858 = bitcast %Type_Info* %2857 to %Type_Info.Procedure*
	%2859 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2858, i64 0, i32 0
	%2860 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2858, i64 0, i32 1
	%2861 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2858, i64 0, i32 2
	%2862 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2858, i64 0, i32 3
	%2863 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	%2864 = bitcast %Type_Info* %2863 to %Type_Info*
	store %Type_Info* %2864, %Type_Info** %2859
	store i1 false, i1* %2861
	store i64 1, i64* %2862
	%2865 = getelementptr inbounds %Type_Info, %Type_Info* %2857, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2865
	%2866 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 135
	; Type_Info_Tuple
	%2867 = bitcast %Type_Info* %2866 to %Type_Info.Tuple*
	%2868 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2867, i64 0, i32 0
	%2869 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2868, i64 0, i32 4
	store i64 4, i64* %2869
	%2870 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 159
	%2871 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 159
	%2872 = getelementptr inbounds %Type_Info*, %Type_Info** %2870, i64 0
	%2873 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2873, %Type_Info** %2872
	%2874 = getelementptr inbounds %..string, %..string* %2871, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$329, i64 0, i32 0), i64 3}, %..string* %2874
	%2875 = getelementptr inbounds %Type_Info*, %Type_Info** %2870, i64 1
	%2876 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2876, %Type_Info** %2875
	%2877 = getelementptr inbounds %..string, %..string* %2871, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$32a, i64 0, i32 0), i64 2}, %..string* %2877
	%2878 = getelementptr inbounds %Type_Info*, %Type_Info** %2870, i64 2
	%2879 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2879, %Type_Info** %2878
	%2880 = getelementptr inbounds %..string, %..string* %2871, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$32b, i64 0, i32 0), i64 2}, %..string* %2880
	%2881 = getelementptr inbounds %Type_Info*, %Type_Info** %2870, i64 3
	%2882 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2882, %Type_Info** %2881
	%2883 = getelementptr inbounds %..string, %..string* %2871, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$32c, i64 0, i32 0), i64 2}, %..string* %2883
	%2884 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2868, i64 0, i32 0
	%2885 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2884, i64 0, i32 0
	store %Type_Info** %2870, %Type_Info*** %2885
	%2886 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2884, i64 0, i32 1
	store i64 4, i64* %2886
	%2887 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2884, i64 0, i32 2
	store i64 4, i64* %2887
	%2888 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2868, i64 0, i32 1
	%2889 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2888, i64 0, i32 0
	store %..string* %2871, %..string** %2889
	%2890 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2888, i64 0, i32 1
	store i64 4, i64* %2890
	%2891 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2888, i64 0, i32 2
	store i64 4, i64* %2891
	%2892 = getelementptr inbounds %Type_Info, %Type_Info* %2866, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2892
	%2893 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 136
	; Type_Info_Proc
	%2894 = bitcast %Type_Info* %2893 to %Type_Info.Procedure*
	%2895 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2894, i64 0, i32 0
	%2896 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2894, i64 0, i32 1
	%2897 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2894, i64 0, i32 2
	%2898 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2894, i64 0, i32 3
	%2899 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 137
	%2900 = bitcast %Type_Info* %2899 to %Type_Info*
	store %Type_Info* %2900, %Type_Info** %2895
	store i1 false, i1* %2897
	store i64 1, i64* %2898
	%2901 = getelementptr inbounds %Type_Info, %Type_Info* %2893, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2901
	%2902 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 137
	; Type_Info_Tuple
	%2903 = bitcast %Type_Info* %2902 to %Type_Info.Tuple*
	%2904 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2903, i64 0, i32 0
	%2905 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2904, i64 0, i32 4
	store i64 4, i64* %2905
	%2906 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 163
	%2907 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 163
	%2908 = getelementptr inbounds %Type_Info*, %Type_Info** %2906, i64 0
	%2909 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2909, %Type_Info** %2908
	%2910 = getelementptr inbounds %..string, %..string* %2907, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$32d, i64 0, i32 0), i64 3}, %..string* %2910
	%2911 = getelementptr inbounds %Type_Info*, %Type_Info** %2906, i64 1
	%2912 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2912, %Type_Info** %2911
	%2913 = getelementptr inbounds %..string, %..string* %2907, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$32e, i64 0, i32 0), i64 2}, %..string* %2913
	%2914 = getelementptr inbounds %Type_Info*, %Type_Info** %2906, i64 2
	%2915 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2915, %Type_Info** %2914
	%2916 = getelementptr inbounds %..string, %..string* %2907, i64 2
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$32f, i64 0, i32 0), i64 2}, %..string* %2916
	%2917 = getelementptr inbounds %Type_Info*, %Type_Info** %2906, i64 3
	%2918 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2918, %Type_Info** %2917
	%2919 = getelementptr inbounds %..string, %..string* %2907, i64 3
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$330, i64 0, i32 0), i64 2}, %..string* %2919
	%2920 = getelementptr inbounds %Type_Info*, %Type_Info** %2906, i64 4
	%2921 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	store %Type_Info* %2921, %Type_Info** %2920
	%2922 = getelementptr inbounds %..string, %..string* %2907, i64 4
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.__str$331, i64 0, i32 0), i64 2}, %..string* %2922
	%2923 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2904, i64 0, i32 0
	%2924 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2923, i64 0, i32 0
	store %Type_Info** %2906, %Type_Info*** %2924
	%2925 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2923, i64 0, i32 1
	store i64 5, i64* %2925
	%2926 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2923, i64 0, i32 2
	store i64 5, i64* %2926
	%2927 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2904, i64 0, i32 1
	%2928 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2927, i64 0, i32 0
	store %..string* %2907, %..string** %2928
	%2929 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2927, i64 0, i32 1
	store i64 5, i64* %2929
	%2930 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2927, i64 0, i32 2
	store i64 5, i64* %2930
	%2931 = getelementptr inbounds %Type_Info, %Type_Info* %2902, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2931
	%2932 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 138
	; Type_Info_Proc
	%2933 = bitcast %Type_Info* %2932 to %Type_Info.Procedure*
	%2934 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2933, i64 0, i32 0
	%2935 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2933, i64 0, i32 1
	%2936 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2933, i64 0, i32 2
	%2937 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2933, i64 0, i32 3
	%2938 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 139
	%2939 = bitcast %Type_Info* %2938 to %Type_Info*
	store %Type_Info* %2939, %Type_Info** %2934
	store i1 false, i1* %2936
	store i64 1, i64* %2937
	%2940 = getelementptr inbounds %Type_Info, %Type_Info* %2932, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2940
	%2941 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 139
	; Type_Info_Tuple
	%2942 = bitcast %Type_Info* %2941 to %Type_Info.Tuple*
	%2943 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2942, i64 0, i32 0
	%2944 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2943, i64 0, i32 4
	store i64 8, i64* %2944
	%2945 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 168
	%2946 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 168
	%2947 = getelementptr inbounds %Type_Info*, %Type_Info** %2945, i64 0
	%2948 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2948, %Type_Info** %2947
	%2949 = getelementptr inbounds %..string, %..string* %2946, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.__str$332, i64 0, i32 0), i64 3}, %..string* %2949
	%2950 = getelementptr inbounds %Type_Info*, %Type_Info** %2945, i64 1
	%2951 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2951, %Type_Info** %2950
	%2952 = getelementptr inbounds %..string, %..string* %2946, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$333, i64 0, i32 0), i64 5}, %..string* %2952
	%2953 = getelementptr inbounds %Type_Info*, %Type_Info** %2945, i64 2
	%2954 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %2954, %Type_Info** %2953
	%2955 = getelementptr inbounds %..string, %..string* %2946, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$334, i64 0, i32 0), i64 9}, %..string* %2955
	%2956 = getelementptr inbounds %Type_Info*, %Type_Info** %2945, i64 3
	%2957 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 140
	store %Type_Info* %2957, %Type_Info** %2956
	%2958 = getelementptr inbounds %..string, %..string* %2946, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$335, i64 0, i32 0), i64 5}, %..string* %2958
	%2959 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2943, i64 0, i32 0
	%2960 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2959, i64 0, i32 0
	store %Type_Info** %2945, %Type_Info*** %2960
	%2961 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2959, i64 0, i32 1
	store i64 4, i64* %2961
	%2962 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2959, i64 0, i32 2
	store i64 4, i64* %2962
	%2963 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2943, i64 0, i32 1
	%2964 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2963, i64 0, i32 0
	store %..string* %2946, %..string** %2964
	%2965 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2963, i64 0, i32 1
	store i64 4, i64* %2965
	%2966 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %2963, i64 0, i32 2
	store i64 4, i64* %2966
	%2967 = getelementptr inbounds %Type_Info, %Type_Info* %2941, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %2967
	%2968 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 140
	; Type_Info_Pointer
	%2969 = bitcast %Type_Info* %2968 to %Type_Info.Pointer*
	%2970 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 75
	%2971 = bitcast %Type_Info* %2970 to %Type_Info*
	%2972 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %2969, i64 0, i32 0
	store %Type_Info* %2971, %Type_Info** %2972
	%2973 = getelementptr inbounds %Type_Info, %Type_Info* %2968, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %2973
	%2974 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	; Type_Info_Proc
	%2975 = bitcast %Type_Info* %2974 to %Type_Info.Procedure*
	%2976 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2975, i64 0, i32 0
	%2977 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2975, i64 0, i32 1
	%2978 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2975, i64 0, i32 2
	%2979 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %2975, i64 0, i32 3
	%2980 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 142
	%2981 = bitcast %Type_Info* %2980 to %Type_Info*
	store %Type_Info* %2981, %Type_Info** %2976
	%2982 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%2983 = bitcast %Type_Info* %2982 to %Type_Info*
	store %Type_Info* %2983, %Type_Info** %2977
	store i1 false, i1* %2978
	store i64 1, i64* %2979
	%2984 = getelementptr inbounds %Type_Info, %Type_Info* %2974, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %2984
	%2985 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 142
	; Type_Info_Tuple
	%2986 = bitcast %Type_Info* %2985 to %Type_Info.Tuple*
	%2987 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %2986, i64 0, i32 0
	%2988 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2987, i64 0, i32 4
	store i64 8, i64* %2988
	%2989 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 172
	%2990 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 172
	%2991 = getelementptr inbounds %Type_Info*, %Type_Info** %2989, i64 0
	%2992 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %2992, %Type_Info** %2991
	%2993 = getelementptr inbounds %..string, %..string* %2990, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$336, i64 0, i32 0), i64 7}, %..string* %2993
	%2994 = getelementptr inbounds %Type_Info*, %Type_Info** %2989, i64 1
	%2995 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %2995, %Type_Info** %2994
	%2996 = getelementptr inbounds %..string, %..string* %2990, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$337, i64 0, i32 0), i64 4}, %..string* %2996
	%2997 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2987, i64 0, i32 0
	%2998 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2997, i64 0, i32 0
	store %Type_Info** %2989, %Type_Info*** %2998
	%2999 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2997, i64 0, i32 1
	store i64 2, i64* %2999
	%3000 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %2997, i64 0, i32 2
	store i64 2, i64* %3000
	%3001 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %2987, i64 0, i32 1
	%3002 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3001, i64 0, i32 0
	store %..string* %2990, %..string** %3002
	%3003 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3001, i64 0, i32 1
	store i64 2, i64* %3003
	%3004 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3001, i64 0, i32 2
	store i64 2, i64* %3004
	%3005 = getelementptr inbounds %Type_Info, %Type_Info* %2985, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3005
	%3006 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%3007 = bitcast %Type_Info* %3006 to %Type_Info.Pointer*
	%3008 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%3009 = bitcast %Type_Info* %3008 to %Type_Info*
	%3010 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3007, i64 0, i32 0
	store %Type_Info* %3009, %Type_Info** %3010
	%3011 = getelementptr inbounds %Type_Info, %Type_Info* %3006, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3011
	%3012 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	; Type_Info_Tuple
	%3013 = bitcast %Type_Info* %3012 to %Type_Info.Tuple*
	%3014 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3013, i64 0, i32 0
	%3015 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3014, i64 0, i32 4
	store i64 4, i64* %3015
	%3016 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 174
	%3017 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 174
	%3018 = getelementptr inbounds %Type_Info*, %Type_Info** %3016, i64 0
	%3019 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3019, %Type_Info** %3018
	%3020 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3014, i64 0, i32 0
	%3021 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3020, i64 0, i32 0
	store %Type_Info** %3016, %Type_Info*** %3021
	%3022 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3020, i64 0, i32 1
	store i64 1, i64* %3022
	%3023 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3020, i64 0, i32 2
	store i64 1, i64* %3023
	%3024 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3014, i64 0, i32 1
	%3025 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3024, i64 0, i32 0
	store %..string* %3017, %..string** %3025
	%3026 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3024, i64 0, i32 1
	store i64 1, i64* %3026
	%3027 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3024, i64 0, i32 2
	store i64 1, i64* %3027
	%3028 = getelementptr inbounds %Type_Info, %Type_Info* %3012, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3028
	%3029 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 141
	; Type_Info_Proc
	%3030 = bitcast %Type_Info* %3029 to %Type_Info.Procedure*
	%3031 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3030, i64 0, i32 0
	%3032 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3030, i64 0, i32 1
	%3033 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3030, i64 0, i32 2
	%3034 = getelementptr inbounds %Type_Info.Procedure, %Type_Info.Procedure* %3030, i64 0, i32 3
	%3035 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 142
	%3036 = bitcast %Type_Info* %3035 to %Type_Info*
	store %Type_Info* %3036, %Type_Info** %3031
	%3037 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	%3038 = bitcast %Type_Info* %3037 to %Type_Info*
	store %Type_Info* %3038, %Type_Info** %3032
	store i1 false, i1* %3033
	store i64 1, i64* %3034
	%3039 = getelementptr inbounds %Type_Info, %Type_Info* %3029, i64 0, i32 2 ; UnionTagPtr
	store i64 10, i64* %3039
	%3040 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 142
	; Type_Info_Tuple
	%3041 = bitcast %Type_Info* %3040 to %Type_Info.Tuple*
	%3042 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3041, i64 0, i32 0
	%3043 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3042, i64 0, i32 4
	store i64 8, i64* %3043
	%3044 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 175
	%3045 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 175
	%3046 = getelementptr inbounds %Type_Info*, %Type_Info** %3044, i64 0
	%3047 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	store %Type_Info* %3047, %Type_Info** %3046
	%3048 = getelementptr inbounds %..string, %..string* %3045, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$338, i64 0, i32 0), i64 7}, %..string* %3048
	%3049 = getelementptr inbounds %Type_Info*, %Type_Info** %3044, i64 1
	%3050 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	store %Type_Info* %3050, %Type_Info** %3049
	%3051 = getelementptr inbounds %..string, %..string* %3045, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$339, i64 0, i32 0), i64 4}, %..string* %3051
	%3052 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3042, i64 0, i32 0
	%3053 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3052, i64 0, i32 0
	store %Type_Info** %3044, %Type_Info*** %3053
	%3054 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3052, i64 0, i32 1
	store i64 2, i64* %3054
	%3055 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3052, i64 0, i32 2
	store i64 2, i64* %3055
	%3056 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3042, i64 0, i32 1
	%3057 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3056, i64 0, i32 0
	store %..string* %3045, %..string** %3057
	%3058 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3056, i64 0, i32 1
	store i64 2, i64* %3058
	%3059 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3056, i64 0, i32 2
	store i64 2, i64* %3059
	%3060 = getelementptr inbounds %Type_Info, %Type_Info* %3040, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3060
	%3061 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 3
	; Type_Info_Pointer
	%3062 = bitcast %Type_Info* %3061 to %Type_Info.Pointer*
	%3063 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%3064 = bitcast %Type_Info* %3063 to %Type_Info*
	%3065 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3062, i64 0, i32 0
	store %Type_Info* %3064, %Type_Info** %3065
	%3066 = getelementptr inbounds %Type_Info, %Type_Info* %3061, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3066
	%3067 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 114
	; Type_Info_Tuple
	%3068 = bitcast %Type_Info* %3067 to %Type_Info.Tuple*
	%3069 = getelementptr inbounds %Type_Info.Tuple, %Type_Info.Tuple* %3068, i64 0, i32 0
	%3070 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3069, i64 0, i32 4
	store i64 4, i64* %3070
	%3071 = getelementptr inbounds [179 x %Type_Info*], [179 x %Type_Info*]* @.__$type_info_types_data, i64 0, i32 177
	%3072 = getelementptr inbounds [179 x %..string], [179 x %..string]* @.__$type_info_names_data, i64 0, i32 177
	%3073 = getelementptr inbounds %Type_Info*, %Type_Info** %3071, i64 0
	%3074 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 58
	store %Type_Info* %3074, %Type_Info** %3073
	%3075 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3069, i64 0, i32 0
	%3076 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3075, i64 0, i32 0
	store %Type_Info** %3071, %Type_Info*** %3076
	%3077 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3075, i64 0, i32 1
	store i64 1, i64* %3077
	%3078 = getelementptr inbounds {%Type_Info**, i64, i64}, {%Type_Info**, i64, i64}* %3075, i64 0, i32 2
	store i64 1, i64* %3078
	%3079 = getelementptr inbounds %Type_Info_Record, %Type_Info_Record* %3069, i64 0, i32 1
	%3080 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3079, i64 0, i32 0
	store %..string* %3072, %..string** %3080
	%3081 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3079, i64 0, i32 1
	store i64 1, i64* %3081
	%3082 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3079, i64 0, i32 2
	store i64 1, i64* %3082
	%3083 = getelementptr inbounds %Type_Info, %Type_Info* %3067, i64 0, i32 2 ; UnionTagPtr
	store i64 15, i64* %3083
	%3084 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 143
	; Type_Info_Named
	%3085 = bitcast %Type_Info* %3084 to %Type_Info.Named*
	%3086 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 71
	%3087 = bitcast %Type_Info* %3086 to %Type_Info*
	%3088 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3085, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$33a, i64 0, i32 0), i64 7}, %..string* %3088
	%3089 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3085, i64 0, i32 1
	store %Type_Info* %3087, %Type_Info** %3089
	%3090 = getelementptr inbounds %Type_Info, %Type_Info* %3084, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3090
	%3091 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%3092 = bitcast %Type_Info* %3091 to %Type_Info.Pointer*
	%3093 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%3094 = bitcast %Type_Info* %3093 to %Type_Info*
	%3095 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3092, i64 0, i32 0
	store %Type_Info* %3094, %Type_Info** %3095
	%3096 = getelementptr inbounds %Type_Info, %Type_Info* %3091, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3096
	%3097 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 144
	; Type_Info_Pointer
	%3098 = bitcast %Type_Info* %3097 to %Type_Info.Pointer*
	%3099 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%3100 = bitcast %Type_Info* %3099 to %Type_Info*
	%3101 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3098, i64 0, i32 0
	store %Type_Info* %3100, %Type_Info** %3101
	%3102 = getelementptr inbounds %Type_Info, %Type_Info* %3097, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3102
	%3103 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	; Type_Info_Pointer
	%3104 = bitcast %Type_Info* %3103 to %Type_Info.Pointer*
	%3105 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%3106 = bitcast %Type_Info* %3105 to %Type_Info*
	%3107 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3104, i64 0, i32 0
	store %Type_Info* %3106, %Type_Info** %3107
	%3108 = getelementptr inbounds %Type_Info, %Type_Info* %3103, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3108
	%3109 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 145
	; Type_Info_Named
	%3110 = bitcast %Type_Info* %3109 to %Type_Info.Named*
	%3111 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 146
	%3112 = bitcast %Type_Info* %3111 to %Type_Info*
	%3113 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3110, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.__str$33b, i64 0, i32 0), i64 13}, %..string* %3113
	%3114 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3110, i64 0, i32 1
	store %Type_Info* %3112, %Type_Info** %3114
	%3115 = getelementptr inbounds %Type_Info, %Type_Info* %3109, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3115
	%3116 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 146
	; Type_Info_Enum
	%3117 = bitcast %Type_Info* %3116 to %Type_Info.Enum*
	%3118 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 5
	%3119 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3117, i64 0, i32 0
	store %Type_Info* %3118, %Type_Info** %3119
	%3120 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-92, i64 0, i32 0
	%3121 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-92, i64 0, i32 0
	%3122 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3121 to i64*
	store i64 0, i64* %3122
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$33c, i64 0, i32 0), i64 9}, %..string* %3120
	%3123 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-92, i64 0, i32 1
	%3124 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-92, i64 0, i32 1
	%3125 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3124 to i64*
	store i64 1, i64* %3125
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$33d, i64 0, i32 0), i64 10}, %..string* %3123
	%3126 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-92, i64 0, i32 2
	%3127 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-92, i64 0, i32 2
	%3128 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3127 to i64*
	store i64 2, i64* %3128
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.__str$33e, i64 0, i32 0), i64 10}, %..string* %3126
	%3129 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-92, i64 0, i32 3
	%3130 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-92, i64 0, i32 3
	%3131 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3130 to i64*
	store i64 3, i64* %3131
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.__str$33f, i64 0, i32 0), i64 12}, %..string* %3129
	%3132 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-92, i64 0, i32 4
	%3133 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-92, i64 0, i32 4
	%3134 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3133 to i64*
	store i64 4, i64* %3134
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$340, i64 0, i32 0), i64 5}, %..string* %3132
	%3135 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3117, i64 0, i32 1
	%3136 = getelementptr inbounds [5 x %..string], [5 x %..string]* @.__$enum_names-92, i64 0, i32 0
	%3137 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3135, i64 0, i32 0
	store %..string* %3136, %..string** %3137
	%3138 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3135, i64 0, i32 1
	store i64 5, i64* %3138
	%3139 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3117, i64 0, i32 2
	%3140 = getelementptr inbounds [5 x {[0 x <8 x i8>], [8 x i8]}], [5 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-92, i64 0, i32 0
	%3141 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %3139, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %3140, {[0 x <8 x i8>], [8 x i8]}** %3141
	%3142 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %3139, i64 0, i32 1
	store i64 5, i64* %3142
	%3143 = getelementptr inbounds %Type_Info, %Type_Info* %3116, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %3143
	%3144 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 147
	; Type_Info_Named
	%3145 = bitcast %Type_Info* %3144 to %Type_Info.Named*
	%3146 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 148
	%3147 = bitcast %Type_Info* %3146 to %Type_Info*
	%3148 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3145, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.__str$341, i64 0, i32 0), i64 14}, %..string* %3148
	%3149 = getelementptr inbounds %Type_Info.Named, %Type_Info.Named* %3145, i64 0, i32 1
	store %Type_Info* %3147, %Type_Info** %3149
	%3150 = getelementptr inbounds %Type_Info, %Type_Info* %3144, i64 0, i32 2 ; UnionTagPtr
	store i64 1, i64* %3150
	%3151 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 148
	; Type_Info_Enum
	%3152 = bitcast %Type_Info* %3151 to %Type_Info.Enum*
	%3153 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 4
	%3154 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3152, i64 0, i32 0
	store %Type_Info* %3153, %Type_Info** %3154
	%3155 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 0
	%3156 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 0
	%3157 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3156 to i64*
	store i64 0, i64* %3157
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$342, i64 0, i32 0), i64 7}, %..string* %3155
	%3158 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 1
	%3159 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 1
	%3160 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3159 to i64*
	store i64 1, i64* %3160
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$343, i64 0, i32 0), i64 7}, %..string* %3158
	%3161 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 2
	%3162 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 2
	%3163 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3162 to i64*
	store i64 2, i64* %3163
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.__str$344, i64 0, i32 0), i64 5}, %..string* %3161
	%3164 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 3
	%3165 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 3
	%3166 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3165 to i64*
	store i64 3, i64* %3166
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$345, i64 0, i32 0), i64 11}, %..string* %3164
	%3167 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 4
	%3168 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 4
	%3169 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3168 to i64*
	store i64 4, i64* %3169
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.__str$346, i64 0, i32 0), i64 11}, %..string* %3167
	%3170 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 5
	%3171 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 5
	%3172 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3171 to i64*
	store i64 5, i64* %3172
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.__str$347, i64 0, i32 0), i64 8}, %..string* %3170
	%3173 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 6
	%3174 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 6
	%3175 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3174 to i64*
	store i64 6, i64* %3175
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.__str$348, i64 0, i32 0), i64 6}, %..string* %3173
	%3176 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 7
	%3177 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 7
	%3178 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3177 to i64*
	store i64 7, i64* %3178
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$349, i64 0, i32 0), i64 9}, %..string* %3176
	%3179 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 8
	%3180 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 8
	%3181 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3180 to i64*
	store i64 11, i64* %3181
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.__str$34a, i64 0, i32 0), i64 4}, %..string* %3179
	%3182 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 9
	%3183 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 9
	%3184 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3183 to i64*
	store i64 8, i64* %3184
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.__str$34b, i64 0, i32 0), i64 7}, %..string* %3182
	%3185 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 10
	%3186 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 10
	%3187 = bitcast {[0 x <8 x i8>], [8 x i8]}* %3186 to i64*
	store i64 19, i64* %3187
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.__str$34c, i64 0, i32 0), i64 9}, %..string* %3185
	%3188 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3152, i64 0, i32 1
	%3189 = getelementptr inbounds [11 x %..string], [11 x %..string]* @.__$enum_names-94, i64 0, i32 0
	%3190 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3188, i64 0, i32 0
	store %..string* %3189, %..string** %3190
	%3191 = getelementptr inbounds {%..string*, i64, i64}, {%..string*, i64, i64}* %3188, i64 0, i32 1
	store i64 11, i64* %3191
	%3192 = getelementptr inbounds %Type_Info.Enum, %Type_Info.Enum* %3152, i64 0, i32 2
	%3193 = getelementptr inbounds [11 x {[0 x <8 x i8>], [8 x i8]}], [11 x {[0 x <8 x i8>], [8 x i8]}]* @.__$enum_values-94, i64 0, i32 0
	%3194 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %3192, i64 0, i32 0
	store {[0 x <8 x i8>], [8 x i8]}* %3193, {[0 x <8 x i8>], [8 x i8]}** %3194
	%3195 = getelementptr inbounds {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}, {{[0 x <8 x i8>], [8 x i8]}*, i64, i64}* %3192, i64 0, i32 1
	store i64 11, i64* %3195
	%3196 = getelementptr inbounds %Type_Info, %Type_Info* %3151, i64 0, i32 2 ; UnionTagPtr
	store i64 19, i64* %3196
	%3197 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 6
	; Type_Info_Pointer
	%3198 = bitcast %Type_Info* %3197 to %Type_Info.Pointer*
	%3199 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 7
	%3200 = bitcast %Type_Info* %3199 to %Type_Info*
	%3201 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3198, i64 0, i32 0
	store %Type_Info* %3200, %Type_Info** %3201
	%3202 = getelementptr inbounds %Type_Info, %Type_Info* %3197, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3202
	%3203 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 149
	; Type_Info_Pointer
	%3204 = bitcast %Type_Info* %3203 to %Type_Info.Pointer*
	%3205 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%3206 = bitcast %Type_Info* %3205 to %Type_Info*
	%3207 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3204, i64 0, i32 0
	store %Type_Info* %3206, %Type_Info** %3207
	%3208 = getelementptr inbounds %Type_Info, %Type_Info* %3203, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3208
	%3209 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 150
	; Type_Info_Pointer
	%3210 = bitcast %Type_Info* %3209 to %Type_Info.Pointer*
	%3211 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%3212 = bitcast %Type_Info* %3211 to %Type_Info*
	%3213 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3210, i64 0, i32 0
	store %Type_Info* %3212, %Type_Info** %3213
	%3214 = getelementptr inbounds %Type_Info, %Type_Info* %3209, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3214
	%3215 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 149
	; Type_Info_Pointer
	%3216 = bitcast %Type_Info* %3215 to %Type_Info.Pointer*
	%3217 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 9
	%3218 = bitcast %Type_Info* %3217 to %Type_Info*
	%3219 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3216, i64 0, i32 0
	store %Type_Info* %3218, %Type_Info** %3219
	%3220 = getelementptr inbounds %Type_Info, %Type_Info* %3215, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3220
	%3221 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 150
	; Type_Info_Pointer
	%3222 = bitcast %Type_Info* %3221 to %Type_Info.Pointer*
	%3223 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 12
	%3224 = bitcast %Type_Info* %3223 to %Type_Info*
	%3225 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3222, i64 0, i32 0
	store %Type_Info* %3224, %Type_Info** %3225
	%3226 = getelementptr inbounds %Type_Info, %Type_Info* %3221, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3226
	%3227 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 151
	; Type_Info_Pointer
	%3228 = bitcast %Type_Info* %3227 to %Type_Info.Pointer*
	%3229 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 14
	%3230 = bitcast %Type_Info* %3229 to %Type_Info*
	%3231 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3228, i64 0, i32 0
	store %Type_Info* %3230, %Type_Info** %3231
	%3232 = getelementptr inbounds %Type_Info, %Type_Info* %3227, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3232
	%3233 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 152
	; Type_Info_Pointer
	%3234 = bitcast %Type_Info* %3233 to %Type_Info.Pointer*
	%3235 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 19
	%3236 = bitcast %Type_Info* %3235 to %Type_Info*
	%3237 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3234, i64 0, i32 0
	store %Type_Info* %3236, %Type_Info** %3237
	%3238 = getelementptr inbounds %Type_Info, %Type_Info* %3233, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3238
	%3239 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 153
	; Type_Info_Pointer
	%3240 = bitcast %Type_Info* %3239 to %Type_Info.Pointer*
	%3241 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 16
	%3242 = bitcast %Type_Info* %3241 to %Type_Info*
	%3243 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3240, i64 0, i32 0
	store %Type_Info* %3242, %Type_Info** %3243
	%3244 = getelementptr inbounds %Type_Info, %Type_Info* %3239, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3244
	%3245 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 154
	; Type_Info_Pointer
	%3246 = bitcast %Type_Info* %3245 to %Type_Info.Pointer*
	%3247 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 18
	%3248 = bitcast %Type_Info* %3247 to %Type_Info*
	%3249 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3246, i64 0, i32 0
	store %Type_Info* %3248, %Type_Info** %3249
	%3250 = getelementptr inbounds %Type_Info, %Type_Info* %3245, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3250
	%3251 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 155
	; Type_Info_Pointer
	%3252 = bitcast %Type_Info* %3251 to %Type_Info.Pointer*
	%3253 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 20
	%3254 = bitcast %Type_Info* %3253 to %Type_Info*
	%3255 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3252, i64 0, i32 0
	store %Type_Info* %3254, %Type_Info** %3255
	%3256 = getelementptr inbounds %Type_Info, %Type_Info* %3251, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3256
	%3257 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 144
	; Type_Info_Pointer
	%3258 = bitcast %Type_Info* %3257 to %Type_Info.Pointer*
	%3259 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 22
	%3260 = bitcast %Type_Info* %3259 to %Type_Info*
	%3261 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3258, i64 0, i32 0
	store %Type_Info* %3260, %Type_Info** %3261
	%3262 = getelementptr inbounds %Type_Info, %Type_Info* %3257, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3262
	%3263 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 156
	; Type_Info_Pointer
	%3264 = bitcast %Type_Info* %3263 to %Type_Info.Pointer*
	%3265 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 26
	%3266 = bitcast %Type_Info* %3265 to %Type_Info*
	%3267 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3264, i64 0, i32 0
	store %Type_Info* %3266, %Type_Info** %3267
	%3268 = getelementptr inbounds %Type_Info, %Type_Info* %3263, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3268
	%3269 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 76
	; Type_Info_Pointer
	%3270 = bitcast %Type_Info* %3269 to %Type_Info.Pointer*
	%3271 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 28
	%3272 = bitcast %Type_Info* %3271 to %Type_Info*
	%3273 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3270, i64 0, i32 0
	store %Type_Info* %3272, %Type_Info** %3273
	%3274 = getelementptr inbounds %Type_Info, %Type_Info* %3269, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3274
	%3275 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 157
	; Type_Info_Pointer
	%3276 = bitcast %Type_Info* %3275 to %Type_Info.Pointer*
	%3277 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 56
	%3278 = bitcast %Type_Info* %3277 to %Type_Info*
	%3279 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3276, i64 0, i32 0
	store %Type_Info* %3278, %Type_Info** %3279
	%3280 = getelementptr inbounds %Type_Info, %Type_Info* %3275, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3280
	%3281 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 158
	; Type_Info_Pointer
	%3282 = bitcast %Type_Info* %3281 to %Type_Info.Pointer*
	%3283 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 30
	%3284 = bitcast %Type_Info* %3283 to %Type_Info*
	%3285 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3282, i64 0, i32 0
	store %Type_Info* %3284, %Type_Info** %3285
	%3286 = getelementptr inbounds %Type_Info, %Type_Info* %3281, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3286
	%3287 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 159
	; Type_Info_Pointer
	%3288 = bitcast %Type_Info* %3287 to %Type_Info.Pointer*
	%3289 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 31
	%3290 = bitcast %Type_Info* %3289 to %Type_Info*
	%3291 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3288, i64 0, i32 0
	store %Type_Info* %3290, %Type_Info** %3291
	%3292 = getelementptr inbounds %Type_Info, %Type_Info* %3287, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3292
	%3293 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 66
	; Type_Info_Pointer
	%3294 = bitcast %Type_Info* %3293 to %Type_Info.Pointer*
	%3295 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 33
	%3296 = bitcast %Type_Info* %3295 to %Type_Info*
	%3297 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3294, i64 0, i32 0
	store %Type_Info* %3296, %Type_Info** %3297
	%3298 = getelementptr inbounds %Type_Info, %Type_Info* %3293, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3298
	%3299 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 67
	; Type_Info_Pointer
	%3300 = bitcast %Type_Info* %3299 to %Type_Info.Pointer*
	%3301 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 43
	%3302 = bitcast %Type_Info* %3301 to %Type_Info*
	%3303 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3300, i64 0, i32 0
	store %Type_Info* %3302, %Type_Info** %3303
	%3304 = getelementptr inbounds %Type_Info, %Type_Info* %3299, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3304
	%3305 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 160
	; Type_Info_Pointer
	%3306 = bitcast %Type_Info* %3305 to %Type_Info.Pointer*
	%3307 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 45
	%3308 = bitcast %Type_Info* %3307 to %Type_Info*
	%3309 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3306, i64 0, i32 0
	store %Type_Info* %3308, %Type_Info** %3309
	%3310 = getelementptr inbounds %Type_Info, %Type_Info* %3305, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3310
	%3311 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 161
	; Type_Info_Pointer
	%3312 = bitcast %Type_Info* %3311 to %Type_Info.Pointer*
	%3313 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 44
	%3314 = bitcast %Type_Info* %3313 to %Type_Info*
	%3315 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3312, i64 0, i32 0
	store %Type_Info* %3314, %Type_Info** %3315
	%3316 = getelementptr inbounds %Type_Info, %Type_Info* %3311, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3316
	%3317 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 162
	; Type_Info_Pointer
	%3318 = bitcast %Type_Info* %3317 to %Type_Info.Pointer*
	%3319 = getelementptr inbounds [163 x %Type_Info], [163 x %Type_Info]* @.__$type_info_data, i64 0, i32 48
	%3320 = bitcast %Type_Info* %3319 to %Type_Info*
	%3321 = getelementptr inbounds %Type_Info.Pointer, %Type_Info.Pointer* %3318, i64 0, i32 0
	store %Type_Info* %3320, %Type_Info** %3321
	%3322 = getelementptr inbounds %Type_Info, %Type_Info* %3317, i64 0, i32 2 ; UnionTagPtr
	store i64 9, i64* %3322
	ret void
}
@.__$type_info_data = private global [163 x %Type_Info] zeroinitializer
@.__$type_info_types_data = global [179 x %Type_Info*] zeroinitializer
@.__$type_info_names_data = global [179 x %..string] zeroinitializer
@.__$type_info_offsets_data = global [179 x i64] zeroinitializer
@__type_table = global {%Type_Info*, i64, i64} zeroinitializer
@__context = thread_local global %Context zeroinitializer
@main-2.ProgramRunning = global i1 zeroinitializer
@main-2.ShowDebugMenu = global i1 false
@main-2.GlobalWin32VarsPtr = global %main-2.Win32Vars_t* zeroinitializer
@main-2.GlobalWindowPosition = global %jaze_win32-11.WINDOWPLACEMENT zeroinitializer
@.fmt-4.__DIGITS_LOWER = global %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$34d, i64 0, i32 0), i64 17}
@.fmt-4.__DIGITS_UPPER = global %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.__str$34e, i64 0, i32 0), i64 17}
@.utf8-5.accept_ranges = global [5 x %utf8-5.Accept_Range] [%utf8-5.Accept_Range {i8 128, i8 191}, %utf8-5.Accept_Range {i8 160, i8 191}, %utf8-5.Accept_Range {i8 128, i8 159}, %utf8-5.Accept_Range {i8 144, i8 191}, %utf8-5.Accept_Range {i8 128, i8 143}]
@.utf8-5.accept_sizes = global [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241]
@.jaze_gl-12.DebugInfo = global %jaze_gl-12.DebugInfo_t zeroinitializer
@.jaze_gl-12._BufferData = global void (i32, i32, %..rawptr, i32)* zeroinitializer
@.jaze_gl-12._BindBuffer = global void (i32, i32)* zeroinitializer
@.jaze_gl-12._GenBuffers = global void (i32, i32*)* zeroinitializer
@.jaze_gl-12._GenVertexArrays = global void (i32, i32*)* zeroinitializer
@.jaze_gl-12._EnableVertexAttribArray = global void (i32)* zeroinitializer
@.jaze_gl-12._VertexAttribPointer = global void (i32, i32, i32, i1, i32, %..rawptr)* zeroinitializer
@.jaze_gl-12._BindVertexArray = global void (i32)* zeroinitializer
@.jaze_gl-12._Uniform1i = global void (i32, i32)* zeroinitializer
@.jaze_gl-12._Uniform2i = global void (i32, i32, i32)* zeroinitializer
@.jaze_gl-12._Uniform3i = global void (i32, i32, i32, i32)* zeroinitializer
@.jaze_gl-12._Uniform4i = global void (i32, i32, i32, i32, i32)* zeroinitializer
@.jaze_gl-12._Uniform1f = global void (i32, float)* zeroinitializer
@.jaze_gl-12._Uniform2f = global void (i32, float, float)* zeroinitializer
@.jaze_gl-12._Uniform3f = global void (i32, float, float, float)* zeroinitializer
@.jaze_gl-12._Uniform4f = global void (i32, float, float, float, float)* zeroinitializer
@.jaze_gl-12._UniformMatrix4fv = global void (i32, i32, i32, float*)* zeroinitializer
@.jaze_gl-12._GetUniformLocation = global i32 (i32, i8*)* zeroinitializer
@.jaze_gl-12._GetAttribLocation = global i32 (i32, i8*)* zeroinitializer
@.jaze_gl-12._DrawElements = global void (i32, i32, i32, %..rawptr)* zeroinitializer
@.jaze_gl-12._UseProgram = global void (i32)* zeroinitializer
@.jaze_gl-12._LinkProgram = global void (i32)* zeroinitializer
@.jaze_gl-12._ActiveTexture = global void (i32)* zeroinitializer
@.jaze_gl-12._BlendEquationSeparate = global void (i32, i32)* zeroinitializer
@.jaze_gl-12._BlendEquation = global void (i32)* zeroinitializer
@.jaze_gl-12._AttachShader = global void (i32, i32)* zeroinitializer
@.jaze_gl-12._CreateProgram = global i32 ()* zeroinitializer
@.jaze_gl-12._ShaderSource = global void (i32, i32, i8**, i32*)* zeroinitializer
@.jaze_gl-12._CreateShader = global i32 (i32)* zeroinitializer
@.jaze_gl-12._CompileShader = global void (i32)* zeroinitializer
@.jaze_gl-12._DebugMessageControl = global void (i32, i32, i32, i32, i32*, i1)* zeroinitializer
@.jaze_gl-12._DebugMessageCallback = global void (void (i32, i32, i32, i32, i32, i8*, %..rawptr)*, %..rawptr)* zeroinitializer
@.jaze_gl-12._GetShaderiv = global void (i32, i32, i32*)* zeroinitializer
@.jaze_gl-12._GetShaderInfoLog = global void (i32, i32, i32*, i8*)* zeroinitializer
@.jaze_gl-12._GetStringi = global i8* (i32, i32)* zeroinitializer
@.jaze_wgl-13.CreateContextAttribsARB = global %..rawptr (%..rawptr, %..rawptr, i32*)* zeroinitializer
@.jaze_wgl-13.ChoosePixelFormatARB = global i32 (%..rawptr, i32*, float*, i32, i32*, i32*)* zeroinitializer
@.jaze_wgl-13.SwapIntervalEXT = global i1 (i32)* zeroinitializer
@.jaze_wgl-13.GetExtensionsStringARB = global i8* (%..rawptr)* zeroinitializer
@.jaze_debug_windows-14.GlobalDebugWndBools = global {{i64*, i64, i64,%Allocator}, {{%__Map_Key, i64, i1}*, i64, i64,%Allocator}} zeroinitializer
@.jaze_debug_windows-14.CurrentViewTexture = global i32 zeroinitializer
@.jaze_imgui-15.State = global %jaze_imgui-15.State_t zeroinitializer
@.jaze_xinput-16._Enable = global void (i32)* zeroinitializer
@.jaze_xinput-16._GetBatteryInformation = global i32 (i32, i8, %jaze_xinput-16.BatteryInformation*)* zeroinitializer
@.jaze_xinput-16._GetCapabilities = global i32 (i32, i32, %jaze_xinput-16.Capabilities*)* zeroinitializer
@.jaze_xinput-16._GetKeystroke = global i32 (i32, i32, %jaze_xinput-16.KeyStroke*)* zeroinitializer
@.jaze_xinput-16._GetState = global i32 (i32, %jaze_xinput-16.State*)* zeroinitializer
@.jaze_xinput-16._SetState = global i32 (i32, %jaze_xinput-16.VibrationState)* zeroinitializer
@.jaze_xinput-16.DebugInfo = global %jaze_xinput-16.DebugInfo_t zeroinitializer
@.jaze_xinput-16.Version = global i64 0
@.os_windows-17.stdout = global i64 zeroinitializer
@.os_windows-17.stderr = global i64 zeroinitializer
@.strconv-21.f32_info = global %strconv-21.Float_Info {i64 23, i64 8, i64 -127}
@.strconv-21.f64_info = global %strconv-21.Float_Info {i64 52, i64 11, i64 -1023}
@.__csba$0 = global [6 x float] [float 0x0000000000000000, float 0x3fe0000000000000, float 0x3fe0000000000000, float 0xbfe0000000000000, float 0xbfe0000000000000, float 0xbfe0000000000000]
@.__$enum_names-19 = private global [4 x %..string] zeroinitializer
@.__$enum_values-19 = private global [4 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3c = private global [7 x %..string] zeroinitializer
@.__$enum_values-3c = private global [7 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-3e = private global [10 x %..string] zeroinitializer
@.__$enum_values-3e = private global [10 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-40 = private global [5 x %..string] zeroinitializer
@.__$enum_values-40 = private global [5 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-92 = private global [5 x %..string] zeroinitializer
@.__$enum_values-92 = private global [5 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__$enum_names-94 = private global [11 x %..string] zeroinitializer
@.__$enum_values-94 = private global [11 x {[0 x <8 x i8>], [8 x i8]}] zeroinitializer
@.__str$0 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1 = private global [10 x i8] c"ptr\20\21\3D\20nil"
@.__str$2 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$3 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$4 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$5 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$6 = private global [32 x i8] c"\25s\28\25d\3A\25d\29\20Runtime\20assertion\3A\20\25s\0A"
@.__str$7 = private global [20 x i8] c"\25s\28\25d\3A\25d\29\20Panic\3A\20\25s\0A"
@.__str$8 = private global [48 x i8] c"\25s\28\25d\3A\25d\29\20Index\20\25d\20is\20out\20of\20bounds\20range\200..\25d\0A"
@.__str$9 = private global [46 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20slice\20indices\3A\20\5B\25d..\25d..\25d\5D\0A"
@.__str$a = private global [46 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20substring\20indices\3A\20\5B\25d..\25d\5D\0A"
@.__str$b = private global [45 x i8] c"\25s\28\25d\3A\25d\29\20Invalid\20\60union_cast\60\20from\20\25T\20to\20\25T\0A"
@.__str$c = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$d = private global [32 x i8] c"array.allocator.procedure\20\21\3D\20nil"
@.__str$e = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$f = private global [32 x i8] c"array.allocator.procedure\20\21\3D\20nil"
@.__str$10 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$11 = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$12 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$13 = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$14 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$15 = private global [11 x i8] c"data\20\21\3D\20nil"
@.__str$16 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$17 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$18 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$19 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1a = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1b = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5C_preload.odin"
@.__str$1c = private global [10 x i8] c"jaze_class"
@.__str$1d = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$1e = private global [24 x i8] c"Could\20Not\20Register\20Class"
@.__str$1f = private global [4 x i8] c"Jaze"
@.__str$20 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$21 = private global [23 x i8] c"Could\20Not\20Create\20Window"
@.__str$22 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$23 = private global [10 x i8] c"ctx\20\21\3D\20nil"
@.__str$24 = private global [6 x i8] c"STATIC"
@.__str$25 = private global [13 x i8] c"OpenGL\20Loader"
@.__str$26 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$27 = private global [16 x i8] c"wndHandle\20\21\3D\20nil"
@.__str$28 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$29 = private global [12 x i8] c"wndDc\20\21\3D\20nil"
@.__str$2a = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$2b = private global [13 x i8] c"oldCtx\20\21\3D\20nil"
@.__str$2c = private global [23 x i8] c"wglChoosePixelFormatARB"
@.__str$2d = private global [26 x i8] c"wglCreateContextAttribsARB"
@.__str$2e = private global [25 x i8] c"wglGetExtensionsStringARB"
@.__str$2f = private global [18 x i8] c"wglSwapIntervalEXT"
@.__str$30 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$31 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$32 = private global [35 x i8] c"Couldn\27t\20find\20suitable\20pixel\20format"
@.__str$33 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$34 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$35 = private global [10 x i8] c"ctx\20\21\3D\20nil"
@.__str$36 = private global [6 x i8] c"Sizing"
@.__str$37 = private global [6 x i8] c"\25d\2C\20\25d"
@.__str$38 = private global [17 x i8] c"\5B\25v\20\7C\20\25v\20\7C\20\25v\5D\20\25s"
@.__str$39 = private global [4 x i8] c"Misc"
@.__str$3a = private global [11 x i8] c"OpenGL\20Info"
@.__str$3b = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$3c = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$3d = private global [13 x i8] c"Win32Var\20Info"
@.__str$3e = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$3f = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$40 = private global [6 x i8] c"XInput"
@.__str$41 = private global [4 x i8] c"Info"
@.__str$42 = private global [14 x i8] c"ShowXinputInfo"
@.__str$43 = private global [14 x i8] c"ShowXinputInfo"
@.__str$44 = private global [5 x i8] c"State"
@.__str$45 = private global [15 x i8] c"ShowXinputState"
@.__str$46 = private global [15 x i8] c"ShowXinputState"
@.__str$47 = private global [16 x i8] c"Show\20Test\20Window"
@.__str$48 = private global [14 x i8] c"ShowTestWindow"
@.__str$49 = private global [14 x i8] c"ShowTestWindow"
@.__str$4a = private global [17 x i8] c"Toggle\20Fullscreen"
@.__str$4b = private global [9 x i8] c"Alt\2BEnter"
@.__str$4c = private global [4 x i8] c"Exit"
@.__str$4d = private global [6 x i8] c"Escape"
@.__str$4e = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$4f = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$50 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$51 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$52 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$53 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$54 = private global [14 x i8] c"ShowXinputInfo"
@.__str$55 = private global [14 x i8] c"ShowXinputInfo"
@.__str$56 = private global [14 x i8] c"ShowXinputInfo"
@.__str$57 = private global [15 x i8] c"ShowXinputState"
@.__str$58 = private global [15 x i8] c"ShowXinputState"
@.__str$59 = private global [15 x i8] c"ShowXinputState"
@.__str$5a = private global [14 x i8] c"ShowTestWindow"
@.__str$5b = private global [14 x i8] c"ShowTestWindow"
@.__str$5c = private global [14 x i8] c"ShowTestWindow"
@.__str$5d = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$5e = private global [5 x i8] c"Jaze\20"
@.__str$5f = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$60 = private global [42 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cmain.odin"
@.__str$61 = private global [14 x i8] c"ShowOpenGLInfo"
@.__str$62 = private global [16 x i8] c"ShowWin32VarInfo"
@.__str$63 = private global [14 x i8] c"ShowTestWindow"
@.__str$64 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$65 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$66 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$67 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$68 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$69 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$6a = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$6b = private global [3 x i8] c"int"
@.__str$6c = private global [4 x i8] c"uint"
@.__str$6d = private global [1 x i8] c"i"
@.__str$6e = private global [1 x i8] c"u"
@.__str$6f = private global [3 x i8] c"f32"
@.__str$70 = private global [3 x i8] c"f64"
@.__str$71 = private global [9 x i8] c"complex64"
@.__str$72 = private global [10 x i8] c"complex128"
@.__str$73 = private global [13 x i8] c"quaternion128"
@.__str$74 = private global [10 x i8] c"quaternion"
@.__str$75 = private global [6 x i8] c"string"
@.__str$76 = private global [4 x i8] c"bool"
@.__str$77 = private global [6 x i8] c"rawptr"
@.__str$78 = private global [1 x i8] c"\5E"
@.__str$79 = private global [4 x i8] c"proc"
@.__str$7a = private global [2 x i8] c"\28\29"
@.__str$7b = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$7c = private global [1 x i8] c"\28"
@.__str$7d = private global [2 x i8] c"\2C\20"
@.__str$7e = private global [1 x i8] c"\29"
@.__str$7f = private global [4 x i8] c"\20-\3E\20"
@.__str$80 = private global [1 x i8] c"\28"
@.__str$81 = private global [2 x i8] c"\2C\20"
@.__str$82 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$83 = private global [2 x i8] c"\3A\20"
@.__str$84 = private global [1 x i8] c"\29"
@.__str$85 = private global [1 x i8] c"\5B"
@.__str$86 = private global [1 x i8] c"\5D"
@.__str$87 = private global [4 x i8] c"\5B..\5D"
@.__str$88 = private global [1 x i8] c"\5B"
@.__str$89 = private global [1 x i8] c"\5D"
@.__str$8a = private global [8 x i8] c"\5Bvector\20"
@.__str$8b = private global [1 x i8] c"\5D"
@.__str$8c = private global [4 x i8] c"map\5B"
@.__str$8d = private global [7 x i8] c"struct\20"
@.__str$8e = private global [8 x i8] c"\23packed\20"
@.__str$8f = private global [9 x i8] c"\23ordered\20"
@.__str$90 = private global [7 x i8] c"\23align\20"
@.__str$91 = private global [2 x i8] c"\2C\20"
@.__str$92 = private global [2 x i8] c"\3A\20"
@.__str$93 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$94 = private global [7 x i8] c"union\20\7B"
@.__str$95 = private global [2 x i8] c"\2C\20"
@.__str$96 = private global [2 x i8] c"\3A\20"
@.__str$97 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$98 = private global [2 x i8] c"\2C\20"
@.__str$99 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$9a = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$9b = private global [2 x i8] c"\2C\20"
@.__str$9c = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$9d = private global [2 x i8] c"\3A\20"
@.__str$9e = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$9f = private global [1 x i8] c"\7D"
@.__str$a0 = private global [11 x i8] c"raw_union\20\7B"
@.__str$a1 = private global [2 x i8] c"\2C\20"
@.__str$a2 = private global [2 x i8] c"\3A\20"
@.__str$a3 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$a4 = private global [1 x i8] c"\7D"
@.__str$a5 = private global [5 x i8] c"enum\20"
@.__str$a6 = private global [2 x i8] c"\20\7B"
@.__str$a7 = private global [2 x i8] c"\2C\20"
@.__str$a8 = private global [1 x i8] c"\7D"
@.__str$a9 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$aa = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ab = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ac = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ad = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ae = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$af = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$b0 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$b1 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$b2 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$b3 = private global [9 x i8] c"verb\20\21\3D\20v"
@.__str$b4 = private global [2 x i8] c"\25\21"
@.__str$b5 = private global [5 x i8] c"\3Cnil\3E"
@.__str$b6 = private global [4 x i8] c"true"
@.__str$b7 = private global [5 x i8] c"false"
@.__str$b8 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$b9 = private global [41 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size"
@.__str$ba = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bb = private global [55 x i8] c"_write_int\3A\20buffer\20overrun.\20Width\20and\20precision\20too\20big"
@.__str$bc = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bd = private global [32 x i8] c"_write_int\3A\20unknown\20base\2C\20whoops"
@.__str$be = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$bf = private global [2 x i8] c"U\2B"
@.__str$c0 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c1 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c2 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c3 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c4 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c5 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c6 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c7 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c8 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$c9 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ca = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$cb = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$cc = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$cd = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ce = private global [2 x i8] c"0x"
@.__str$cf = private global [5 x i8] c"\3Cnil\3E"
@.__str$d0 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d1 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d2 = private global [18 x i8] c"\21\25\28BAD\20ENUM\20VALUE\29"
@.__str$d3 = private global [5 x i8] c"\3Cnil\3E"
@.__str$d4 = private global [2 x i8] c"\2C\20"
@.__str$d5 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d6 = private global [3 x i8] c"\20\3D\20"
@.__str$d7 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d8 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$d9 = private global [2 x i8] c"\2C\20"
@.__str$da = private global [2 x i8] c"\2C\20"
@.__str$db = private global [4 x i8] c"map\5B"
@.__str$dc = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$dd = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$de = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$df = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e0 = private global [2 x i8] c"\2C\20"
@.__str$e1 = private global [1 x i8] c"\3D"
@.__str$e2 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e3 = private global [2 x i8] c"\2C\20"
@.__str$e4 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e5 = private global [2 x i8] c"\2C\20"
@.__str$e6 = private global [2 x i8] c"\2C\20"
@.__str$e7 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$e8 = private global [3 x i8] c"\20\3D\20"
@.__str$e9 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ea = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$eb = private global [2 x i8] c"\2C\20"
@.__str$ec = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ed = private global [3 x i8] c"\20\3D\20"
@.__str$ee = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$ef = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f0 = private global [11 x i8] c"\28raw_union\29"
@.__str$f1 = private global [3 x i8] c"\20\40\20"
@.__str$f2 = private global [5 x i8] c"\3Cnil\3E"
@.__str$f3 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f4 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f5 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f6 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f7 = private global [13 x i8] c"\25\21\28BAD\20WIDTH\29"
@.__str$f8 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$f9 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$fa = private global [17 x i8] c"\25\21\28BAD\20PRECISION\29"
@.__str$fb = private global [11 x i8] c"\25\21\28NO\20VERB\29"
@.__str$fc = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$fd = private global [23 x i8] c"\25\21\28BAD\20ARGUMENT\20NUMBER\29"
@.__str$fe = private global [20 x i8] c"\25\21\28MISSING\20ARGUMENT\29"
@.__str$ff = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$100 = private global [9 x i8] c"\25\21\28EXTRA\20"
@.__str$101 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$102 = private global [2 x i8] c"\2C\20"
@.__str$103 = private global [5 x i8] c"\3Cnil\3E"
@.__str$104 = private global [37 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cfmt.odin"
@.__str$105 = private global [1 x i8] c"\29"
@.__str$106 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$107 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$108 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$109 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$10a = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$10b = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$10c = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$10d = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$10e = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$10f = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$110 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$111 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$112 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$113 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$114 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$115 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$116 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$117 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$118 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$119 = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11a = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11b = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11c = private global [38 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cutf8.odin"
@.__str$11d = private global [55 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$11e = private global [55 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$11f = private global [17 x i8] c"len\28s\29\20\3C\20len\28buf\29"
@.__str$120 = private global [55 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Codimgui\5Csrc\5Cimgui.odin"
@.__str$121 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrings.odin"
@.__str$122 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrings.odin"
@.__str$123 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrings.odin"
@.__str$124 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$125 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$126 = private global [26 x i8] c"------\20Shader\20Error\20------"
@.__str$127 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$128 = private global [26 x i8] c"--------------------------"
@.__str$129 = private global [3 x i8] c"nil"
@.__str$12a = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$12b = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$12c = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$12d = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$12e = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$12f = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$130 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$131 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$132 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$133 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$134 = private global [13 x i8] c"opengl32.dll\00"
@.__str$135 = private global [45 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_gl.odin"
@.__str$136 = private global [14 x i8] c"glDrawElements"
@.__str$137 = private global [17 x i8] c"glBindVertexArray"
@.__str$138 = private global [21 x i8] c"glVertexAttribPointer"
@.__str$139 = private global [25 x i8] c"glEnableVertexAttribArray"
@.__str$13a = private global [17 x i8] c"glGenVertexArrays"
@.__str$13b = private global [12 x i8] c"glBufferData"
@.__str$13c = private global [12 x i8] c"glBindBuffer"
@.__str$13d = private global [12 x i8] c"glGenBuffers"
@.__str$13e = private global [24 x i8] c"glDebugMessageControlARB"
@.__str$13f = private global [25 x i8] c"glDebugMessageCallbackARB"
@.__str$140 = private global [13 x i8] c"glGetShaderiv"
@.__str$141 = private global [18 x i8] c"glGetShaderInfoLog"
@.__str$142 = private global [12 x i8] c"glGetStringi"
@.__str$143 = private global [15 x i8] c"glBlendEquation"
@.__str$144 = private global [23 x i8] c"glBlendEquationSeparate"
@.__str$145 = private global [15 x i8] c"glCompileShader"
@.__str$146 = private global [14 x i8] c"glCreateShader"
@.__str$147 = private global [14 x i8] c"glShaderSource"
@.__str$148 = private global [14 x i8] c"glAttachShader"
@.__str$149 = private global [15 x i8] c"glCreateProgram"
@.__str$14a = private global [13 x i8] c"glLinkProgram"
@.__str$14b = private global [12 x i8] c"glUseProgram"
@.__str$14c = private global [15 x i8] c"glActiveTexture"
@.__str$14d = private global [11 x i8] c"glUniform1i"
@.__str$14e = private global [11 x i8] c"glUniform2i"
@.__str$14f = private global [11 x i8] c"glUniform3i"
@.__str$150 = private global [11 x i8] c"glUniform4i"
@.__str$151 = private global [11 x i8] c"glUniform1f"
@.__str$152 = private global [11 x i8] c"glUniform2f"
@.__str$153 = private global [11 x i8] c"glUniform3f"
@.__str$154 = private global [11 x i8] c"glUniform4f"
@.__str$155 = private global [18 x i8] c"glUniformMatrix4fv"
@.__str$156 = private global [20 x i8] c"glGetUniformLocation"
@.__str$157 = private global [19 x i8] c"glGetAttribLocation"
@.__str$158 = private global [46 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$159 = private global [10 x i8] c"res\20\21\3D\20nil"
@.__str$15a = private global [46 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_wgl.odin"
@.__str$15b = private global [15 x i8] c"Loaded\20Textures"
@.__str$15c = private global [11 x i8] c"Texture\20\25d\3A"
@.__str$15d = private global [4 x i8] c"View"
@.__str$15e = private global [13 x i8] c"ViewGLTexture"
@.__str$15f = private global [13 x i8] c"ViewGLTexture"
@.__str$160 = private global [13 x i8] c"ViewGLTexture"
@.__str$161 = private global [13 x i8] c"ViewGLTexture"
@.__str$162 = private global [12 x i8] c"Texture\20View"
@.__str$163 = private global [11 x i8] c"OpenGL\20Info"
@.__str$164 = private global [9 x i8] c"Versions\3A"
@.__str$165 = private global [14 x i8] c"Highest\3A\20\25d.\25d"
@.__str$166 = private global [14 x i8] c"Current\3A\20\25d.\25d"
@.__str$167 = private global [11 x i8] c"GLSL\3A\20\20\20\20\25s"
@.__str$168 = private global [16 x i8] c"Lib\20Address\200x\25x"
@.__str$169 = private global [12 x i8] c"Vendor\3A\20\20\20\25s"
@.__str$16a = private global [12 x i8] c"Render\3A\20\20\20\25s"
@.__str$16b = private global [12 x i8] c"CtxFlags\3A\20\25d"
@.__str$16c = private global [30 x i8] c"Number\20of\20extensions\3A\20\20\20\20\20\20\20\25d"
@.__str$16d = private global [9 x i8] c"View\23\23Ext"
@.__str$16e = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$16f = private global [30 x i8] c"Number\20of\20WGL\20extensions\3A\20\20\20\25d"
@.__str$170 = private global [9 x i8] c"View\23\23WGL"
@.__str$171 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$172 = private global [33 x i8] c"Number\20of\20functions\20loaded\3A\20\25d\2F\25d"
@.__str$173 = private global [16 x i8] c"Loaded\20Functions"
@.__str$174 = private global [20 x i8] c"Functions\23\23\23FuncLoad"
@.__str$175 = private global [9 x i8] c"\25s\20\40\200x\25X"
@.__str$176 = private global [2 x i8] c"\25t"
@.__str$177 = private global [2 x i8] c"\25t"
@.__str$178 = private global [2 x i8] c"\25d"
@.__str$179 = private global [4 x i8] c"true"
@.__str$17a = private global [5 x i8] c"false"
@.__str$17b = private global [10 x i8] c"Loaded\3A\20\25s"
@.__str$17c = private global [29 x i8] c"Number\20of\20loaded\20textures\3A\20\25d"
@.__str$17d = private global [13 x i8] c"View\23\23Texture"
@.__str$17e = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$17f = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$180 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$181 = private global [15 x i8] c"Extensions\23\23Ext"
@.__str$182 = private global [20 x i8] c"OpenGLShowExtensions"
@.__str$183 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$184 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$185 = private global [14 x i8] c"WGL\20Extensions"
@.__str$186 = private global [23 x i8] c"OpenGLShowWGLExtensions"
@.__str$187 = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$188 = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$189 = private global [21 x i8] c"ShowGLTextureOverview"
@.__str$18a = private global [14 x i8] c"Win32Vars\20Info"
@.__str$18b = private global [27 x i8] c"Application\20Handle\3A\20\20\20\200x\25X"
@.__str$18c = private global [27 x i8] c"Window\20Handle\3A\20\20\20\20\20\20\20\20\200x\25X"
@.__str$18d = private global [35 x i8] c"Window\20Size\3A\20\20\20\20\20\20\20\20\20\20\20\7B\25.3f\2C\20\25.3f\7D"
@.__str$18e = private global [27 x i8] c"Device\20Context\20Handle\3A\200x\25X"
@.__str$18f = private global [11 x i8] c"XInput\20Info"
@.__str$190 = private global [11 x i8] c"Version\3A\20\25s"
@.__str$191 = private global [17 x i8] c"Lib\20Address\3A\200x\25x"
@.__str$192 = private global [33 x i8] c"Number\20of\20functions\20loaded\3A\20\25d\2F\25d"
@.__str$193 = private global [16 x i8] c"Loaded\20Functions"
@.__str$194 = private global [9 x i8] c"Functions"
@.__str$195 = private global [17 x i8] c"Loaded\3A\20\25t\20\40\200x\25x"
@.__str$196 = private global [9 x i8] c"Connected"
@.__str$197 = private global [13 x i8] c"Not\20Connected"
@.__str$198 = private global [15 x i8] c"Gamepad\20\25d\28\25s\29\3A"
@.__str$199 = private global [12 x i8] c"Capabilites\3A"
@.__str$19a = private global [10 x i8] c"Subtype\20\25s"
@.__str$19b = private global [6 x i8] c"Flags\3A"
@.__str$19c = private global [17 x i8] c"Voice\3A\20\20\20\20\20\20\20\20\20\25t"
@.__str$19d = private global [17 x i8] c"FFB\3A\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$19e = private global [17 x i8] c"Wireless\3A\20\20\20\20\20\20\25t"
@.__str$19f = private global [17 x i8] c"PMD\3A\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1a0 = private global [17 x i8] c"NoNavigations\3A\20\25t"
@.__str$1a1 = private global [20 x i8] c"Battery\20Information\3A"
@.__str$1a2 = private global [3 x i8] c"N\2FA"
@.__str$1a3 = private global [17 x i8] c"Battery\20Type\3A\20\20\25s"
@.__str$1a4 = private global [3 x i8] c"N\2FA"
@.__str$1a5 = private global [17 x i8] c"Battery\20Level\3A\20\25s"
@.__str$1a6 = private global [12 x i8] c"XInput\20State"
@.__str$1a7 = private global [9 x i8] c"Connected"
@.__str$1a8 = private global [13 x i8] c"Not\20Connected"
@.__str$1a9 = private global [15 x i8] c"Gamepad\20\25d\28\25s\29\3A"
@.__str$1aa = private global [14 x i8] c"Button\20States\3A"
@.__str$1ab = private global [17 x i8] c"DpadUp\3A\20\20\20\20\20\20\20\20\25t"
@.__str$1ac = private global [17 x i8] c"DpadDown\3A\20\20\20\20\20\20\25t"
@.__str$1ad = private global [17 x i8] c"DpadLeft\3A\20\20\20\20\20\20\25t"
@.__str$1ae = private global [17 x i8] c"DpadRight\3A\20\20\20\20\20\25t"
@.__str$1af = private global [17 x i8] c"Start\3A\20\20\20\20\20\20\20\20\20\25t"
@.__str$1b0 = private global [17 x i8] c"Back\3A\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1b1 = private global [17 x i8] c"LeftThumb\3A\20\20\20\20\20\25t"
@.__str$1b2 = private global [17 x i8] c"RightThumb\3A\20\20\20\20\25t"
@.__str$1b3 = private global [17 x i8] c"LeftShoulder\3A\20\20\25t"
@.__str$1b4 = private global [17 x i8] c"RightShoulder\3A\20\25t"
@.__str$1b5 = private global [17 x i8] c"A\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1b6 = private global [17 x i8] c"B\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1b7 = private global [17 x i8] c"X\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1b8 = private global [17 x i8] c"Y\3A\20\20\20\20\20\20\20\20\20\20\20\20\20\25t"
@.__str$1b9 = private global [15 x i8] c"Trigger\20States\3A"
@.__str$1ba = private global [25 x i8] c"Left\20Trigger\3A\20\20\25d\28\25.1f\25\25\29"
@.__str$1bb = private global [25 x i8] c"Right\20Trigger\3A\20\25d\28\25.1f\25\25\29"
@.__str$1bc = private global [13 x i8] c"Stick\20States\3A"
@.__str$1bd = private global [21 x i8] c"Left\20Stick\3A\20\20\3C\25d\2C\20\25d\3E"
@.__str$1be = private global [21 x i8] c"Right\20Stick\3A\20\3C\25d\2C\20\25d\3E"
@.__str$1bf = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c0 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c1 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c2 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c3 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c4 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c5 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c6 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c7 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c8 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1c9 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ca = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1cb = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1cc = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1cd = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ce = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1cf = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d0 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d1 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d2 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d3 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d4 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d5 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d6 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d7 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d8 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1d9 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1da = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1db = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1dc = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1dd = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1de = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1df = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e0 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e1 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e2 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e3 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e4 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e5 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e6 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e7 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e8 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1e9 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ea = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1eb = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ec = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ed = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ee = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1ef = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1f0 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1f1 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1f2 = private global [332 x i8] c"\23version\20330\0D\0A\20\20\20\20\20\20\20\20uniform\20mat4\20ProjMtx\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec2\20Position\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec2\20UV\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec4\20Color\3B\0D\0A\20\20\20\20\20\20\20\20out\20vec2\20Frag_UV\3B\0D\0A\20\20\20\20\20\20\20\20out\20vec4\20Frag_Color\3B\0D\0A\20\20\20\20\20\20\20\20void\20main\28\29\0D\0A\20\20\20\20\20\20\20\20\7B\0D\0A\20\20\20\20\20\20\20\20\20\20\20Frag_UV\20\3D\20UV\3B\0D\0A\20\20\20\20\20\20\20\20\20\20\20Frag_Color\20\3D\20Color\3B\0D\0A\20\20\20\20\20\20\20\20\20\20\20gl_Position\20\3D\20ProjMtx\20\2A\20vec4\28Position.xy\2C0\2C1\29\3B\0D\0A\20\20\20\20\20\20\20\20\7D"
@.__str$1f3 = private global [243 x i8] c"\23version\20330\0D\0A\20\20\20\20\20\20\20\20uniform\20sampler2D\20Texture\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec2\20Frag_UV\3B\0D\0A\20\20\20\20\20\20\20\20in\20vec4\20Frag_Color\3B\0D\0A\20\20\20\20\20\20\20\20out\20vec4\20Out_Color\3B\0D\0A\20\20\20\20\20\20\20\20void\20main\28\29\0D\0A\20\20\20\20\20\20\20\20\7B\0D\0A\20\20\20\20\20\20\20\20\20\20\20Out_Color\20\3D\20Frag_Color\20\2A\20texture\28\20Texture\2C\20Frag_UV.st\29\3B\0D\0A\20\20\20\20\20\20\20\20\7D"
@.__str$1f4 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$1f5 = private global [6 x i8] c"FUUUCK"
@.__str$1f6 = private global [7 x i8] c"Texture"
@.__str$1f7 = private global [7 x i8] c"Texture"
@.__str$1f8 = private global [7 x i8] c"ProjMtx"
@.__str$1f9 = private global [7 x i8] c"ProjMtx"
@.__str$1fa = private global [8 x i8] c"Position"
@.__str$1fb = private global [8 x i8] c"Position"
@.__str$1fc = private global [2 x i8] c"UV"
@.__str$1fd = private global [2 x i8] c"UV"
@.__str$1fe = private global [5 x i8] c"Color"
@.__str$1ff = private global [5 x i8] c"Color"
@.__str$200 = private global [8 x i8] c"Position"
@.__str$201 = private global [2 x i8] c"UV"
@.__str$202 = private global [5 x i8] c"Color"
@.__str$203 = private global [8 x i8] c"Position"
@.__str$204 = private global [2 x i8] c"UV"
@.__str$205 = private global [5 x i8] c"Color"
@.__str$206 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$207 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$208 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$209 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$20a = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$20b = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$20c = private global [7 x i8] c"Texture"
@.__str$20d = private global [7 x i8] c"ProjMtx"
@.__str$20e = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$20f = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$210 = private global [48 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_imgui.odin"
@.__str$211 = private global [14 x i8] c"xinput1_4.dll\00"
@.__str$212 = private global [14 x i8] c"xinput1_3.dll\00"
@.__str$213 = private global [16 x i8] c"xinput9_1_0.dll\00"
@.__str$214 = private global [49 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_xinput.odin"
@.__str$215 = private global [49 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_xinput.odin"
@.__str$216 = private global [49 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5CRepo\5CJaze\5Csrc\5Cjaze_xinput.odin"
@.__str$217 = private global [12 x i8] c"XInputEnable"
@.__str$218 = private global [27 x i8] c"XInputGetBatteryInformation"
@.__str$219 = private global [21 x i8] c"XInputGetCapabilities"
@.__str$21a = private global [18 x i8] c"XInputGetKeystroke"
@.__str$21b = private global [14 x i8] c"XInputGetState"
@.__str$21c = private global [14 x i8] c"XInputSetState"
@.__str$21d = private global [44 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cos_windows.odin"
@.__str$21e = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$21f = private global [25 x i8] c"strconv\3A\20invalid\20bit_size"
@.__str$220 = private global [3 x i8] c"NaN"
@.__str$221 = private global [4 x i8] c"-Inf"
@.__str$222 = private global [4 x i8] c"\2BInf"
@.__str$223 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$224 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$225 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$226 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$227 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$228 = private global [48 x i8] c"strconv\3A\20e\2FE\20float\20printing\20is\20not\20yet\20supported"
@.__str$229 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$22a = private global [48 x i8] c"strconv\3A\20g\2FG\20float\20printing\20is\20not\20yet\20supported"
@.__str$22b = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$22c = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$22d = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$22e = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$22f = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$230 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$231 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$232 = private global [41 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size"
@.__str$233 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$234 = private global [43 x i8] c"strconv\3A\20illegal\20base\20passed\20to\20append_bits"
@.__str$235 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$236 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$237 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$238 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$239 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$23a = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$23b = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$23c = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$23d = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$23e = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$23f = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$240 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$241 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$242 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cstrconv.odin"
@.__str$243 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$244 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$245 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$246 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$247 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$248 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$249 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$24a = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$24b = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$24c = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$24d = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$24e = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$24f = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$250 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$251 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$252 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$253 = private global [41 x i8] c"C\3A\5CUsers\5Cfyouc\5CDev\5COdin\5Ccore\5Cdecimal.odin"
@.__str$254 = private global [5 x i8] c"Named"
@.__str$255 = private global [4 x i8] c"name"
@.__str$256 = private global [4 x i8] c"base"
@.__str$257 = private global [9 x i8] c"Type_Info"
@.__str$258 = private global [5 x i8] c"Named"
@.__str$259 = private global [7 x i8] c"Integer"
@.__str$25a = private global [5 x i8] c"Float"
@.__str$25b = private global [7 x i8] c"Complex"
@.__str$25c = private global [10 x i8] c"Quaternion"
@.__str$25d = private global [6 x i8] c"String"
@.__str$25e = private global [7 x i8] c"Boolean"
@.__str$25f = private global [3 x i8] c"Any"
@.__str$260 = private global [7 x i8] c"Pointer"
@.__str$261 = private global [9 x i8] c"Procedure"
@.__str$262 = private global [5 x i8] c"Array"
@.__str$263 = private global [13 x i8] c"Dynamic_Array"
@.__str$264 = private global [5 x i8] c"Slice"
@.__str$265 = private global [6 x i8] c"Vector"
@.__str$266 = private global [5 x i8] c"Tuple"
@.__str$267 = private global [6 x i8] c"Struct"
@.__str$268 = private global [9 x i8] c"Raw_Union"
@.__str$269 = private global [5 x i8] c"Union"
@.__str$26a = private global [4 x i8] c"Enum"
@.__str$26b = private global [3 x i8] c"Map"
@.__str$26c = private global [7 x i8] c"Integer"
@.__str$26d = private global [4 x i8] c"size"
@.__str$26e = private global [6 x i8] c"signed"
@.__str$26f = private global [5 x i8] c"Float"
@.__str$270 = private global [4 x i8] c"size"
@.__str$271 = private global [7 x i8] c"Complex"
@.__str$272 = private global [4 x i8] c"size"
@.__str$273 = private global [10 x i8] c"Quaternion"
@.__str$274 = private global [4 x i8] c"size"
@.__str$275 = private global [6 x i8] c"String"
@.__str$276 = private global [7 x i8] c"Boolean"
@.__str$277 = private global [3 x i8] c"Any"
@.__str$278 = private global [7 x i8] c"Pointer"
@.__str$279 = private global [4 x i8] c"elem"
@.__str$27a = private global [9 x i8] c"Procedure"
@.__str$27b = private global [6 x i8] c"params"
@.__str$27c = private global [7 x i8] c"results"
@.__str$27d = private global [8 x i8] c"variadic"
@.__str$27e = private global [10 x i8] c"convention"
@.__str$27f = private global [18 x i8] c"Calling_Convention"
@.__str$280 = private global [4 x i8] c"ODIN"
@.__str$281 = private global [1 x i8] c"C"
@.__str$282 = private global [3 x i8] c"STD"
@.__str$283 = private global [4 x i8] c"FAST"
@.__str$284 = private global [5 x i8] c"Array"
@.__str$285 = private global [4 x i8] c"elem"
@.__str$286 = private global [9 x i8] c"elem_size"
@.__str$287 = private global [5 x i8] c"count"
@.__str$288 = private global [13 x i8] c"Dynamic_Array"
@.__str$289 = private global [4 x i8] c"elem"
@.__str$28a = private global [9 x i8] c"elem_size"
@.__str$28b = private global [5 x i8] c"Slice"
@.__str$28c = private global [4 x i8] c"elem"
@.__str$28d = private global [9 x i8] c"elem_size"
@.__str$28e = private global [6 x i8] c"Vector"
@.__str$28f = private global [4 x i8] c"elem"
@.__str$290 = private global [9 x i8] c"elem_size"
@.__str$291 = private global [5 x i8] c"count"
@.__str$292 = private global [5 x i8] c"align"
@.__str$293 = private global [5 x i8] c"Tuple"
@.__str$294 = private global [6 x i8] c"record"
@.__str$295 = private global [16 x i8] c"Type_Info_Record"
@.__str$296 = private global [5 x i8] c"types"
@.__str$297 = private global [5 x i8] c"names"
@.__str$298 = private global [7 x i8] c"offsets"
@.__str$299 = private global [4 x i8] c"size"
@.__str$29a = private global [5 x i8] c"align"
@.__str$29b = private global [6 x i8] c"packed"
@.__str$29c = private global [7 x i8] c"ordered"
@.__str$29d = private global [12 x i8] c"custom_align"
@.__str$29e = private global [6 x i8] c"Struct"
@.__str$29f = private global [6 x i8] c"record"
@.__str$2a0 = private global [9 x i8] c"Raw_Union"
@.__str$2a1 = private global [6 x i8] c"record"
@.__str$2a2 = private global [5 x i8] c"Union"
@.__str$2a3 = private global [13 x i8] c"common_fields"
@.__str$2a4 = private global [13 x i8] c"variant_names"
@.__str$2a5 = private global [13 x i8] c"variant_types"
@.__str$2a6 = private global [4 x i8] c"size"
@.__str$2a7 = private global [5 x i8] c"align"
@.__str$2a8 = private global [5 x i8] c"types"
@.__str$2a9 = private global [5 x i8] c"names"
@.__str$2aa = private global [7 x i8] c"offsets"
@.__str$2ab = private global [4 x i8] c"Enum"
@.__str$2ac = private global [4 x i8] c"base"
@.__str$2ad = private global [5 x i8] c"names"
@.__str$2ae = private global [6 x i8] c"values"
@.__str$2af = private global [20 x i8] c"Type_Info_Enum_Value"
@.__str$2b0 = private global [1 x i8] c"f"
@.__str$2b1 = private global [1 x i8] c"i"
@.__str$2b2 = private global [3 x i8] c"Map"
@.__str$2b3 = private global [3 x i8] c"key"
@.__str$2b4 = private global [5 x i8] c"value"
@.__str$2b5 = private global [16 x i8] c"generated_struct"
@.__str$2b6 = private global [5 x i8] c"count"
@.__str$2b7 = private global [11 x i8] c"DebugSource"
@.__str$2b8 = private global [3 x i8] c"Api"
@.__str$2b9 = private global [12 x i8] c"WindowSystem"
@.__str$2ba = private global [14 x i8] c"ShaderCompiler"
@.__str$2bb = private global [10 x i8] c"ThirdParty"
@.__str$2bc = private global [11 x i8] c"Application"
@.__str$2bd = private global [5 x i8] c"Other"
@.__str$2be = private global [8 x i8] c"DontCare"
@.__str$2bf = private global [9 x i8] c"DebugType"
@.__str$2c0 = private global [5 x i8] c"Error"
@.__str$2c1 = private global [18 x i8] c"DeprecatedBehavior"
@.__str$2c2 = private global [17 x i8] c"UndefinedBehavior"
@.__str$2c3 = private global [11 x i8] c"Portability"
@.__str$2c4 = private global [11 x i8] c"Performance"
@.__str$2c5 = private global [6 x i8] c"Marker"
@.__str$2c6 = private global [9 x i8] c"PushGroup"
@.__str$2c7 = private global [8 x i8] c"PopGroup"
@.__str$2c8 = private global [5 x i8] c"Other"
@.__str$2c9 = private global [8 x i8] c"DontCare"
@.__str$2ca = private global [13 x i8] c"DebugSeverity"
@.__str$2cb = private global [4 x i8] c"High"
@.__str$2cc = private global [6 x i8] c"Medium"
@.__str$2cd = private global [3 x i8] c"Low"
@.__str$2ce = private global [12 x i8] c"Notification"
@.__str$2cf = private global [8 x i8] c"DontCare"
@.__str$2d0 = private global [9 x i8] c"TextureID"
@.__str$2d1 = private global [4 x i8] c"Vec2"
@.__str$2d2 = private global [1 x i8] c"x"
@.__str$2d3 = private global [1 x i8] c"y"
@.__str$2d4 = private global [4 x i8] c"Vec4"
@.__str$2d5 = private global [1 x i8] c"x"
@.__str$2d6 = private global [1 x i8] c"y"
@.__str$2d7 = private global [1 x i8] c"z"
@.__str$2d8 = private global [1 x i8] c"w"
@.__str$2d9 = private global [4 x i8] c"mode"
@.__str$2da = private global [5 x i8] c"count"
@.__str$2db = private global [5 x i8] c"type_"
@.__str$2dc = private global [7 x i8] c"indices"
@.__str$2dd = private global [6 x i8] c"buffer"
@.__str$2de = private global [5 x i8] c"index"
@.__str$2df = private global [4 x i8] c"size"
@.__str$2e0 = private global [4 x i8] c"type"
@.__str$2e1 = private global [10 x i8] c"normalized"
@.__str$2e2 = private global [6 x i8] c"stride"
@.__str$2e3 = private global [7 x i8] c"pointer"
@.__str$2e4 = private global [5 x i8] c"index"
@.__str$2e5 = private global [5 x i8] c"count"
@.__str$2e6 = private global [7 x i8] c"buffers"
@.__str$2e7 = private global [6 x i8] c"target"
@.__str$2e8 = private global [4 x i8] c"size"
@.__str$2e9 = private global [4 x i8] c"data"
@.__str$2ea = private global [5 x i8] c"usage"
@.__str$2eb = private global [6 x i8] c"target"
@.__str$2ec = private global [6 x i8] c"buffer"
@.__str$2ed = private global [1 x i8] c"n"
@.__str$2ee = private global [6 x i8] c"buffer"
@.__str$2ef = private global [6 x i8] c"source"
@.__str$2f0 = private global [4 x i8] c"type"
@.__str$2f1 = private global [8 x i8] c"severity"
@.__str$2f2 = private global [5 x i8] c"count"
@.__str$2f3 = private global [3 x i8] c"ids"
@.__str$2f4 = private global [7 x i8] c"enabled"
@.__str$2f5 = private global [8 x i8] c"callback"
@.__str$2f6 = private global [9 x i8] c"userParam"
@.__str$2f7 = private global [24 x i8] c"DebugMessageCallbackProc"
@.__str$2f8 = private global [6 x i8] c"source"
@.__str$2f9 = private global [4 x i8] c"type"
@.__str$2fa = private global [2 x i8] c"id"
@.__str$2fb = private global [8 x i8] c"severity"
@.__str$2fc = private global [6 x i8] c"length"
@.__str$2fd = private global [7 x i8] c"message"
@.__str$2fe = private global [9 x i8] c"userParam"
@.__str$2ff = private global [6 x i8] c"shader"
@.__str$300 = private global [5 x i8] c"pname"
@.__str$301 = private global [6 x i8] c"params"
@.__str$302 = private global [6 x i8] c"shader"
@.__str$303 = private global [9 x i8] c"maxLength"
@.__str$304 = private global [6 x i8] c"length"
@.__str$305 = private global [7 x i8] c"infoLog"
@.__str$306 = private global [4 x i8] c"name"
@.__str$307 = private global [5 x i8] c"index"
@.__str$308 = private global [4 x i8] c"mode"
@.__str$309 = private global [7 x i8] c"modeRGB"
@.__str$30a = private global [9 x i8] c"modeAlpha"
@.__str$30b = private global [6 x i8] c"shader"
@.__str$30c = private global [11 x i8] c"shader_type"
@.__str$30d = private global [6 x i8] c"shader"
@.__str$30e = private global [5 x i8] c"count"
@.__str$30f = private global [3 x i8] c"str"
@.__str$310 = private global [6 x i8] c"length"
@.__str$311 = private global [7 x i8] c"program"
@.__str$312 = private global [6 x i8] c"shader"
@.__str$313 = private global [7 x i8] c"program"
@.__str$314 = private global [7 x i8] c"program"
@.__str$315 = private global [7 x i8] c"texture"
@.__str$316 = private global [3 x i8] c"loc"
@.__str$317 = private global [2 x i8] c"v0"
@.__str$318 = private global [3 x i8] c"loc"
@.__str$319 = private global [2 x i8] c"v0"
@.__str$31a = private global [2 x i8] c"v1"
@.__str$31b = private global [3 x i8] c"loc"
@.__str$31c = private global [2 x i8] c"v0"
@.__str$31d = private global [2 x i8] c"v1"
@.__str$31e = private global [2 x i8] c"v2"
@.__str$31f = private global [3 x i8] c"loc"
@.__str$320 = private global [2 x i8] c"v0"
@.__str$321 = private global [2 x i8] c"v1"
@.__str$322 = private global [2 x i8] c"v2"
@.__str$323 = private global [2 x i8] c"v3"
@.__str$324 = private global [3 x i8] c"loc"
@.__str$325 = private global [2 x i8] c"v0"
@.__str$326 = private global [3 x i8] c"loc"
@.__str$327 = private global [2 x i8] c"v0"
@.__str$328 = private global [2 x i8] c"v1"
@.__str$329 = private global [3 x i8] c"loc"
@.__str$32a = private global [2 x i8] c"v0"
@.__str$32b = private global [2 x i8] c"v1"
@.__str$32c = private global [2 x i8] c"v2"
@.__str$32d = private global [3 x i8] c"loc"
@.__str$32e = private global [2 x i8] c"v0"
@.__str$32f = private global [2 x i8] c"v1"
@.__str$330 = private global [2 x i8] c"v2"
@.__str$331 = private global [2 x i8] c"v3"
@.__str$332 = private global [3 x i8] c"loc"
@.__str$333 = private global [5 x i8] c"count"
@.__str$334 = private global [9 x i8] c"transpose"
@.__str$335 = private global [5 x i8] c"value"
@.__str$336 = private global [7 x i8] c"program"
@.__str$337 = private global [4 x i8] c"name"
@.__str$338 = private global [7 x i8] c"program"
@.__str$339 = private global [4 x i8] c"name"
@.__str$33a = private global [7 x i8] c"Texture"
@.__str$33b = private global [13 x i8] c"XInputVersion"
@.__str$33c = private global [9 x i8] c"NotLoaded"
@.__str$33d = private global [10 x i8] c"Version1_4"
@.__str$33e = private global [10 x i8] c"Version1_3"
@.__str$33f = private global [12 x i8] c"Version9_1_0"
@.__str$340 = private global [5 x i8] c"Error"
@.__str$341 = private global [14 x i8] c"ControllerType"
@.__str$342 = private global [7 x i8] c"Unknown"
@.__str$343 = private global [7 x i8] c"Gamepad"
@.__str$344 = private global [5 x i8] c"Wheel"
@.__str$345 = private global [11 x i8] c"ArcadeStick"
@.__str$346 = private global [11 x i8] c"FlightStick"
@.__str$347 = private global [8 x i8] c"DancePad"
@.__str$348 = private global [6 x i8] c"Guitar"
@.__str$349 = private global [9 x i8] c"GuitarAlt"
@.__str$34a = private global [4 x i8] c"Bass"
@.__str$34b = private global [7 x i8] c"DrumKit"
@.__str$34c = private global [9 x i8] c"ArcadePad"
@.__str$34d = private global [17 x i8] c"0123456789abcdefx"
@.__str$34e = private global [17 x i8] c"0123456789ABCDEFX"
